/**
 * DataBoxManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-09-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataBoxDiskCopyLogDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataBoxDiskCopyLogDetails::OAIDataBoxDiskCopyLogDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataBoxDiskCopyLogDetails::OAIDataBoxDiskCopyLogDetails() {
    this->initializeModel();
}

OAIDataBoxDiskCopyLogDetails::~OAIDataBoxDiskCopyLogDetails() {}

void OAIDataBoxDiskCopyLogDetails::initializeModel() {

    m_disk_serial_number_isSet = false;
    m_disk_serial_number_isValid = false;

    m_error_log_link_isSet = false;
    m_error_log_link_isValid = false;

    m_verbose_log_link_isSet = false;
    m_verbose_log_link_isValid = false;

    m_copy_log_details_type_isSet = false;
    m_copy_log_details_type_isValid = false;
}

void OAIDataBoxDiskCopyLogDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDataBoxDiskCopyLogDetails::fromJsonObject(QJsonObject json) {

    m_disk_serial_number_isValid = ::OpenAPI::fromJsonValue(m_disk_serial_number, json[QString("diskSerialNumber")]);
    m_disk_serial_number_isSet = !json[QString("diskSerialNumber")].isNull() && m_disk_serial_number_isValid;

    m_error_log_link_isValid = ::OpenAPI::fromJsonValue(m_error_log_link, json[QString("errorLogLink")]);
    m_error_log_link_isSet = !json[QString("errorLogLink")].isNull() && m_error_log_link_isValid;

    m_verbose_log_link_isValid = ::OpenAPI::fromJsonValue(m_verbose_log_link, json[QString("verboseLogLink")]);
    m_verbose_log_link_isSet = !json[QString("verboseLogLink")].isNull() && m_verbose_log_link_isValid;

    m_copy_log_details_type_isValid = ::OpenAPI::fromJsonValue(m_copy_log_details_type, json[QString("copyLogDetailsType")]);
    m_copy_log_details_type_isSet = !json[QString("copyLogDetailsType")].isNull() && m_copy_log_details_type_isValid;
}

QString OAIDataBoxDiskCopyLogDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDataBoxDiskCopyLogDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_disk_serial_number_isSet) {
        obj.insert(QString("diskSerialNumber"), ::OpenAPI::toJsonValue(m_disk_serial_number));
    }
    if (m_error_log_link_isSet) {
        obj.insert(QString("errorLogLink"), ::OpenAPI::toJsonValue(m_error_log_link));
    }
    if (m_verbose_log_link_isSet) {
        obj.insert(QString("verboseLogLink"), ::OpenAPI::toJsonValue(m_verbose_log_link));
    }
    if (m_copy_log_details_type_isSet) {
        obj.insert(QString("copyLogDetailsType"), ::OpenAPI::toJsonValue(m_copy_log_details_type));
    }
    return obj;
}

QString OAIDataBoxDiskCopyLogDetails::getDiskSerialNumber() const {
    return m_disk_serial_number;
}
void OAIDataBoxDiskCopyLogDetails::setDiskSerialNumber(const QString &disk_serial_number) {
    m_disk_serial_number = disk_serial_number;
    m_disk_serial_number_isSet = true;
}

bool OAIDataBoxDiskCopyLogDetails::is_disk_serial_number_Set() const{
    return m_disk_serial_number_isSet;
}

bool OAIDataBoxDiskCopyLogDetails::is_disk_serial_number_Valid() const{
    return m_disk_serial_number_isValid;
}

QString OAIDataBoxDiskCopyLogDetails::getErrorLogLink() const {
    return m_error_log_link;
}
void OAIDataBoxDiskCopyLogDetails::setErrorLogLink(const QString &error_log_link) {
    m_error_log_link = error_log_link;
    m_error_log_link_isSet = true;
}

bool OAIDataBoxDiskCopyLogDetails::is_error_log_link_Set() const{
    return m_error_log_link_isSet;
}

bool OAIDataBoxDiskCopyLogDetails::is_error_log_link_Valid() const{
    return m_error_log_link_isValid;
}

QString OAIDataBoxDiskCopyLogDetails::getVerboseLogLink() const {
    return m_verbose_log_link;
}
void OAIDataBoxDiskCopyLogDetails::setVerboseLogLink(const QString &verbose_log_link) {
    m_verbose_log_link = verbose_log_link;
    m_verbose_log_link_isSet = true;
}

bool OAIDataBoxDiskCopyLogDetails::is_verbose_log_link_Set() const{
    return m_verbose_log_link_isSet;
}

bool OAIDataBoxDiskCopyLogDetails::is_verbose_log_link_Valid() const{
    return m_verbose_log_link_isValid;
}

QString OAIDataBoxDiskCopyLogDetails::getCopyLogDetailsType() const {
    return m_copy_log_details_type;
}
void OAIDataBoxDiskCopyLogDetails::setCopyLogDetailsType(const QString &copy_log_details_type) {
    m_copy_log_details_type = copy_log_details_type;
    m_copy_log_details_type_isSet = true;
}

bool OAIDataBoxDiskCopyLogDetails::is_copy_log_details_type_Set() const{
    return m_copy_log_details_type_isSet;
}

bool OAIDataBoxDiskCopyLogDetails::is_copy_log_details_type_Valid() const{
    return m_copy_log_details_type_isValid;
}

bool OAIDataBoxDiskCopyLogDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_disk_serial_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_log_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_verbose_log_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_copy_log_details_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDataBoxDiskCopyLogDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_copy_log_details_type_isValid && true;
}

} // namespace OpenAPI
