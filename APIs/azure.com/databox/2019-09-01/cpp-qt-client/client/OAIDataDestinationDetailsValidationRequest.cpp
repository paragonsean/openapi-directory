/**
 * DataBoxManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-09-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataDestinationDetailsValidationRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataDestinationDetailsValidationRequest::OAIDataDestinationDetailsValidationRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataDestinationDetailsValidationRequest::OAIDataDestinationDetailsValidationRequest() {
    this->initializeModel();
}

OAIDataDestinationDetailsValidationRequest::~OAIDataDestinationDetailsValidationRequest() {}

void OAIDataDestinationDetailsValidationRequest::initializeModel() {

    m_destination_account_details_isSet = false;
    m_destination_account_details_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_validation_type_isSet = false;
    m_validation_type_isValid = false;
}

void OAIDataDestinationDetailsValidationRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDataDestinationDetailsValidationRequest::fromJsonObject(QJsonObject json) {

    m_destination_account_details_isValid = ::OpenAPI::fromJsonValue(m_destination_account_details, json[QString("destinationAccountDetails")]);
    m_destination_account_details_isSet = !json[QString("destinationAccountDetails")].isNull() && m_destination_account_details_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_validation_type_isValid = ::OpenAPI::fromJsonValue(m_validation_type, json[QString("validationType")]);
    m_validation_type_isSet = !json[QString("validationType")].isNull() && m_validation_type_isValid;
}

QString OAIDataDestinationDetailsValidationRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDataDestinationDetailsValidationRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_destination_account_details.size() > 0) {
        obj.insert(QString("destinationAccountDetails"), ::OpenAPI::toJsonValue(m_destination_account_details));
    }
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_validation_type_isSet) {
        obj.insert(QString("validationType"), ::OpenAPI::toJsonValue(m_validation_type));
    }
    return obj;
}

QList<OAIDestinationAccountDetails> OAIDataDestinationDetailsValidationRequest::getDestinationAccountDetails() const {
    return m_destination_account_details;
}
void OAIDataDestinationDetailsValidationRequest::setDestinationAccountDetails(const QList<OAIDestinationAccountDetails> &destination_account_details) {
    m_destination_account_details = destination_account_details;
    m_destination_account_details_isSet = true;
}

bool OAIDataDestinationDetailsValidationRequest::is_destination_account_details_Set() const{
    return m_destination_account_details_isSet;
}

bool OAIDataDestinationDetailsValidationRequest::is_destination_account_details_Valid() const{
    return m_destination_account_details_isValid;
}

QString OAIDataDestinationDetailsValidationRequest::getLocation() const {
    return m_location;
}
void OAIDataDestinationDetailsValidationRequest::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIDataDestinationDetailsValidationRequest::is_location_Set() const{
    return m_location_isSet;
}

bool OAIDataDestinationDetailsValidationRequest::is_location_Valid() const{
    return m_location_isValid;
}

QString OAIDataDestinationDetailsValidationRequest::getValidationType() const {
    return m_validation_type;
}
void OAIDataDestinationDetailsValidationRequest::setValidationType(const QString &validation_type) {
    m_validation_type = validation_type;
    m_validation_type_isSet = true;
}

bool OAIDataDestinationDetailsValidationRequest::is_validation_type_Set() const{
    return m_validation_type_isSet;
}

bool OAIDataDestinationDetailsValidationRequest::is_validation_type_Valid() const{
    return m_validation_type_isValid;
}

bool OAIDataDestinationDetailsValidationRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_destination_account_details.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_validation_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDataDestinationDetailsValidationRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_destination_account_details_isValid && m_location_isValid && m_validation_type_isValid && true;
}

} // namespace OpenAPI
