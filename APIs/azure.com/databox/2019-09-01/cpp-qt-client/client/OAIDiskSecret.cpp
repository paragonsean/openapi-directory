/**
 * DataBoxManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-09-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDiskSecret.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDiskSecret::OAIDiskSecret(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDiskSecret::OAIDiskSecret() {
    this->initializeModel();
}

OAIDiskSecret::~OAIDiskSecret() {}

void OAIDiskSecret::initializeModel() {

    m_bit_locker_key_isSet = false;
    m_bit_locker_key_isValid = false;

    m_disk_serial_number_isSet = false;
    m_disk_serial_number_isValid = false;
}

void OAIDiskSecret::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDiskSecret::fromJsonObject(QJsonObject json) {

    m_bit_locker_key_isValid = ::OpenAPI::fromJsonValue(m_bit_locker_key, json[QString("bitLockerKey")]);
    m_bit_locker_key_isSet = !json[QString("bitLockerKey")].isNull() && m_bit_locker_key_isValid;

    m_disk_serial_number_isValid = ::OpenAPI::fromJsonValue(m_disk_serial_number, json[QString("diskSerialNumber")]);
    m_disk_serial_number_isSet = !json[QString("diskSerialNumber")].isNull() && m_disk_serial_number_isValid;
}

QString OAIDiskSecret::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDiskSecret::asJsonObject() const {
    QJsonObject obj;
    if (m_bit_locker_key_isSet) {
        obj.insert(QString("bitLockerKey"), ::OpenAPI::toJsonValue(m_bit_locker_key));
    }
    if (m_disk_serial_number_isSet) {
        obj.insert(QString("diskSerialNumber"), ::OpenAPI::toJsonValue(m_disk_serial_number));
    }
    return obj;
}

QString OAIDiskSecret::getBitLockerKey() const {
    return m_bit_locker_key;
}
void OAIDiskSecret::setBitLockerKey(const QString &bit_locker_key) {
    m_bit_locker_key = bit_locker_key;
    m_bit_locker_key_isSet = true;
}

bool OAIDiskSecret::is_bit_locker_key_Set() const{
    return m_bit_locker_key_isSet;
}

bool OAIDiskSecret::is_bit_locker_key_Valid() const{
    return m_bit_locker_key_isValid;
}

QString OAIDiskSecret::getDiskSerialNumber() const {
    return m_disk_serial_number;
}
void OAIDiskSecret::setDiskSerialNumber(const QString &disk_serial_number) {
    m_disk_serial_number = disk_serial_number;
    m_disk_serial_number_isSet = true;
}

bool OAIDiskSecret::is_disk_serial_number_Set() const{
    return m_disk_serial_number_isSet;
}

bool OAIDiskSecret::is_disk_serial_number_Valid() const{
    return m_disk_serial_number_isValid;
}

bool OAIDiskSecret::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bit_locker_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disk_serial_number_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDiskSecret::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
