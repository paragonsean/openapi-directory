/**
 * DataBoxManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-09-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAccountCredentialDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAccountCredentialDetails::OAIAccountCredentialDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAccountCredentialDetails::OAIAccountCredentialDetails() {
    this->initializeModel();
}

OAIAccountCredentialDetails::~OAIAccountCredentialDetails() {}

void OAIAccountCredentialDetails::initializeModel() {

    m_account_connection_string_isSet = false;
    m_account_connection_string_isValid = false;

    m_account_name_isSet = false;
    m_account_name_isValid = false;

    m_data_destination_type_isSet = false;
    m_data_destination_type_isValid = false;

    m_share_credential_details_isSet = false;
    m_share_credential_details_isValid = false;
}

void OAIAccountCredentialDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAccountCredentialDetails::fromJsonObject(QJsonObject json) {

    m_account_connection_string_isValid = ::OpenAPI::fromJsonValue(m_account_connection_string, json[QString("accountConnectionString")]);
    m_account_connection_string_isSet = !json[QString("accountConnectionString")].isNull() && m_account_connection_string_isValid;

    m_account_name_isValid = ::OpenAPI::fromJsonValue(m_account_name, json[QString("accountName")]);
    m_account_name_isSet = !json[QString("accountName")].isNull() && m_account_name_isValid;

    m_data_destination_type_isValid = ::OpenAPI::fromJsonValue(m_data_destination_type, json[QString("dataDestinationType")]);
    m_data_destination_type_isSet = !json[QString("dataDestinationType")].isNull() && m_data_destination_type_isValid;

    m_share_credential_details_isValid = ::OpenAPI::fromJsonValue(m_share_credential_details, json[QString("shareCredentialDetails")]);
    m_share_credential_details_isSet = !json[QString("shareCredentialDetails")].isNull() && m_share_credential_details_isValid;
}

QString OAIAccountCredentialDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAccountCredentialDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_account_connection_string_isSet) {
        obj.insert(QString("accountConnectionString"), ::OpenAPI::toJsonValue(m_account_connection_string));
    }
    if (m_account_name_isSet) {
        obj.insert(QString("accountName"), ::OpenAPI::toJsonValue(m_account_name));
    }
    if (m_data_destination_type_isSet) {
        obj.insert(QString("dataDestinationType"), ::OpenAPI::toJsonValue(m_data_destination_type));
    }
    if (m_share_credential_details.size() > 0) {
        obj.insert(QString("shareCredentialDetails"), ::OpenAPI::toJsonValue(m_share_credential_details));
    }
    return obj;
}

QString OAIAccountCredentialDetails::getAccountConnectionString() const {
    return m_account_connection_string;
}
void OAIAccountCredentialDetails::setAccountConnectionString(const QString &account_connection_string) {
    m_account_connection_string = account_connection_string;
    m_account_connection_string_isSet = true;
}

bool OAIAccountCredentialDetails::is_account_connection_string_Set() const{
    return m_account_connection_string_isSet;
}

bool OAIAccountCredentialDetails::is_account_connection_string_Valid() const{
    return m_account_connection_string_isValid;
}

QString OAIAccountCredentialDetails::getAccountName() const {
    return m_account_name;
}
void OAIAccountCredentialDetails::setAccountName(const QString &account_name) {
    m_account_name = account_name;
    m_account_name_isSet = true;
}

bool OAIAccountCredentialDetails::is_account_name_Set() const{
    return m_account_name_isSet;
}

bool OAIAccountCredentialDetails::is_account_name_Valid() const{
    return m_account_name_isValid;
}

QString OAIAccountCredentialDetails::getDataDestinationType() const {
    return m_data_destination_type;
}
void OAIAccountCredentialDetails::setDataDestinationType(const QString &data_destination_type) {
    m_data_destination_type = data_destination_type;
    m_data_destination_type_isSet = true;
}

bool OAIAccountCredentialDetails::is_data_destination_type_Set() const{
    return m_data_destination_type_isSet;
}

bool OAIAccountCredentialDetails::is_data_destination_type_Valid() const{
    return m_data_destination_type_isValid;
}

QList<OAIShareCredentialDetails> OAIAccountCredentialDetails::getShareCredentialDetails() const {
    return m_share_credential_details;
}
void OAIAccountCredentialDetails::setShareCredentialDetails(const QList<OAIShareCredentialDetails> &share_credential_details) {
    m_share_credential_details = share_credential_details;
    m_share_credential_details_isSet = true;
}

bool OAIAccountCredentialDetails::is_share_credential_details_Set() const{
    return m_share_credential_details_isSet;
}

bool OAIAccountCredentialDetails::is_share_credential_details_Valid() const{
    return m_share_credential_details_isValid;
}

bool OAIAccountCredentialDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_connection_string_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_destination_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_share_credential_details.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAccountCredentialDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
