/**
 * DataBoxManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-09-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIShareCredentialDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIShareCredentialDetails::OAIShareCredentialDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIShareCredentialDetails::OAIShareCredentialDetails() {
    this->initializeModel();
}

OAIShareCredentialDetails::~OAIShareCredentialDetails() {}

void OAIShareCredentialDetails::initializeModel() {

    m_password_isSet = false;
    m_password_isValid = false;

    m_share_name_isSet = false;
    m_share_name_isValid = false;

    m_share_type_isSet = false;
    m_share_type_isValid = false;

    m_supported_access_protocols_isSet = false;
    m_supported_access_protocols_isValid = false;

    m_user_name_isSet = false;
    m_user_name_isValid = false;
}

void OAIShareCredentialDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIShareCredentialDetails::fromJsonObject(QJsonObject json) {

    m_password_isValid = ::OpenAPI::fromJsonValue(m_password, json[QString("password")]);
    m_password_isSet = !json[QString("password")].isNull() && m_password_isValid;

    m_share_name_isValid = ::OpenAPI::fromJsonValue(m_share_name, json[QString("shareName")]);
    m_share_name_isSet = !json[QString("shareName")].isNull() && m_share_name_isValid;

    m_share_type_isValid = ::OpenAPI::fromJsonValue(m_share_type, json[QString("shareType")]);
    m_share_type_isSet = !json[QString("shareType")].isNull() && m_share_type_isValid;

    m_supported_access_protocols_isValid = ::OpenAPI::fromJsonValue(m_supported_access_protocols, json[QString("supportedAccessProtocols")]);
    m_supported_access_protocols_isSet = !json[QString("supportedAccessProtocols")].isNull() && m_supported_access_protocols_isValid;

    m_user_name_isValid = ::OpenAPI::fromJsonValue(m_user_name, json[QString("userName")]);
    m_user_name_isSet = !json[QString("userName")].isNull() && m_user_name_isValid;
}

QString OAIShareCredentialDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIShareCredentialDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_password_isSet) {
        obj.insert(QString("password"), ::OpenAPI::toJsonValue(m_password));
    }
    if (m_share_name_isSet) {
        obj.insert(QString("shareName"), ::OpenAPI::toJsonValue(m_share_name));
    }
    if (m_share_type_isSet) {
        obj.insert(QString("shareType"), ::OpenAPI::toJsonValue(m_share_type));
    }
    if (m_supported_access_protocols.size() > 0) {
        obj.insert(QString("supportedAccessProtocols"), ::OpenAPI::toJsonValue(m_supported_access_protocols));
    }
    if (m_user_name_isSet) {
        obj.insert(QString("userName"), ::OpenAPI::toJsonValue(m_user_name));
    }
    return obj;
}

QString OAIShareCredentialDetails::getPassword() const {
    return m_password;
}
void OAIShareCredentialDetails::setPassword(const QString &password) {
    m_password = password;
    m_password_isSet = true;
}

bool OAIShareCredentialDetails::is_password_Set() const{
    return m_password_isSet;
}

bool OAIShareCredentialDetails::is_password_Valid() const{
    return m_password_isValid;
}

QString OAIShareCredentialDetails::getShareName() const {
    return m_share_name;
}
void OAIShareCredentialDetails::setShareName(const QString &share_name) {
    m_share_name = share_name;
    m_share_name_isSet = true;
}

bool OAIShareCredentialDetails::is_share_name_Set() const{
    return m_share_name_isSet;
}

bool OAIShareCredentialDetails::is_share_name_Valid() const{
    return m_share_name_isValid;
}

QString OAIShareCredentialDetails::getShareType() const {
    return m_share_type;
}
void OAIShareCredentialDetails::setShareType(const QString &share_type) {
    m_share_type = share_type;
    m_share_type_isSet = true;
}

bool OAIShareCredentialDetails::is_share_type_Set() const{
    return m_share_type_isSet;
}

bool OAIShareCredentialDetails::is_share_type_Valid() const{
    return m_share_type_isValid;
}

QList<QString> OAIShareCredentialDetails::getSupportedAccessProtocols() const {
    return m_supported_access_protocols;
}
void OAIShareCredentialDetails::setSupportedAccessProtocols(const QList<QString> &supported_access_protocols) {
    m_supported_access_protocols = supported_access_protocols;
    m_supported_access_protocols_isSet = true;
}

bool OAIShareCredentialDetails::is_supported_access_protocols_Set() const{
    return m_supported_access_protocols_isSet;
}

bool OAIShareCredentialDetails::is_supported_access_protocols_Valid() const{
    return m_supported_access_protocols_isValid;
}

QString OAIShareCredentialDetails::getUserName() const {
    return m_user_name;
}
void OAIShareCredentialDetails::setUserName(const QString &user_name) {
    m_user_name = user_name;
    m_user_name_isSet = true;
}

bool OAIShareCredentialDetails::is_user_name_Set() const{
    return m_user_name_isSet;
}

bool OAIShareCredentialDetails::is_user_name_Valid() const{
    return m_user_name_isValid;
}

bool OAIShareCredentialDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_share_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_share_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supported_access_protocols.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIShareCredentialDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
