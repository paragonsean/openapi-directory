/**
 * DataBoxManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-09-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataBoxSecret.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataBoxSecret::OAIDataBoxSecret(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataBoxSecret::OAIDataBoxSecret() {
    this->initializeModel();
}

OAIDataBoxSecret::~OAIDataBoxSecret() {}

void OAIDataBoxSecret::initializeModel() {

    m_account_credential_details_isSet = false;
    m_account_credential_details_isValid = false;

    m_device_password_isSet = false;
    m_device_password_isValid = false;

    m_device_serial_number_isSet = false;
    m_device_serial_number_isValid = false;

    m_encoded_validation_cert_pub_key_isSet = false;
    m_encoded_validation_cert_pub_key_isValid = false;

    m_network_configurations_isSet = false;
    m_network_configurations_isValid = false;
}

void OAIDataBoxSecret::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDataBoxSecret::fromJsonObject(QJsonObject json) {

    m_account_credential_details_isValid = ::OpenAPI::fromJsonValue(m_account_credential_details, json[QString("accountCredentialDetails")]);
    m_account_credential_details_isSet = !json[QString("accountCredentialDetails")].isNull() && m_account_credential_details_isValid;

    m_device_password_isValid = ::OpenAPI::fromJsonValue(m_device_password, json[QString("devicePassword")]);
    m_device_password_isSet = !json[QString("devicePassword")].isNull() && m_device_password_isValid;

    m_device_serial_number_isValid = ::OpenAPI::fromJsonValue(m_device_serial_number, json[QString("deviceSerialNumber")]);
    m_device_serial_number_isSet = !json[QString("deviceSerialNumber")].isNull() && m_device_serial_number_isValid;

    m_encoded_validation_cert_pub_key_isValid = ::OpenAPI::fromJsonValue(m_encoded_validation_cert_pub_key, json[QString("encodedValidationCertPubKey")]);
    m_encoded_validation_cert_pub_key_isSet = !json[QString("encodedValidationCertPubKey")].isNull() && m_encoded_validation_cert_pub_key_isValid;

    m_network_configurations_isValid = ::OpenAPI::fromJsonValue(m_network_configurations, json[QString("networkConfigurations")]);
    m_network_configurations_isSet = !json[QString("networkConfigurations")].isNull() && m_network_configurations_isValid;
}

QString OAIDataBoxSecret::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDataBoxSecret::asJsonObject() const {
    QJsonObject obj;
    if (m_account_credential_details.size() > 0) {
        obj.insert(QString("accountCredentialDetails"), ::OpenAPI::toJsonValue(m_account_credential_details));
    }
    if (m_device_password_isSet) {
        obj.insert(QString("devicePassword"), ::OpenAPI::toJsonValue(m_device_password));
    }
    if (m_device_serial_number_isSet) {
        obj.insert(QString("deviceSerialNumber"), ::OpenAPI::toJsonValue(m_device_serial_number));
    }
    if (m_encoded_validation_cert_pub_key_isSet) {
        obj.insert(QString("encodedValidationCertPubKey"), ::OpenAPI::toJsonValue(m_encoded_validation_cert_pub_key));
    }
    if (m_network_configurations.size() > 0) {
        obj.insert(QString("networkConfigurations"), ::OpenAPI::toJsonValue(m_network_configurations));
    }
    return obj;
}

QList<OAIAccountCredentialDetails> OAIDataBoxSecret::getAccountCredentialDetails() const {
    return m_account_credential_details;
}
void OAIDataBoxSecret::setAccountCredentialDetails(const QList<OAIAccountCredentialDetails> &account_credential_details) {
    m_account_credential_details = account_credential_details;
    m_account_credential_details_isSet = true;
}

bool OAIDataBoxSecret::is_account_credential_details_Set() const{
    return m_account_credential_details_isSet;
}

bool OAIDataBoxSecret::is_account_credential_details_Valid() const{
    return m_account_credential_details_isValid;
}

QString OAIDataBoxSecret::getDevicePassword() const {
    return m_device_password;
}
void OAIDataBoxSecret::setDevicePassword(const QString &device_password) {
    m_device_password = device_password;
    m_device_password_isSet = true;
}

bool OAIDataBoxSecret::is_device_password_Set() const{
    return m_device_password_isSet;
}

bool OAIDataBoxSecret::is_device_password_Valid() const{
    return m_device_password_isValid;
}

QString OAIDataBoxSecret::getDeviceSerialNumber() const {
    return m_device_serial_number;
}
void OAIDataBoxSecret::setDeviceSerialNumber(const QString &device_serial_number) {
    m_device_serial_number = device_serial_number;
    m_device_serial_number_isSet = true;
}

bool OAIDataBoxSecret::is_device_serial_number_Set() const{
    return m_device_serial_number_isSet;
}

bool OAIDataBoxSecret::is_device_serial_number_Valid() const{
    return m_device_serial_number_isValid;
}

QString OAIDataBoxSecret::getEncodedValidationCertPubKey() const {
    return m_encoded_validation_cert_pub_key;
}
void OAIDataBoxSecret::setEncodedValidationCertPubKey(const QString &encoded_validation_cert_pub_key) {
    m_encoded_validation_cert_pub_key = encoded_validation_cert_pub_key;
    m_encoded_validation_cert_pub_key_isSet = true;
}

bool OAIDataBoxSecret::is_encoded_validation_cert_pub_key_Set() const{
    return m_encoded_validation_cert_pub_key_isSet;
}

bool OAIDataBoxSecret::is_encoded_validation_cert_pub_key_Valid() const{
    return m_encoded_validation_cert_pub_key_isValid;
}

QList<OAIApplianceNetworkConfiguration> OAIDataBoxSecret::getNetworkConfigurations() const {
    return m_network_configurations;
}
void OAIDataBoxSecret::setNetworkConfigurations(const QList<OAIApplianceNetworkConfiguration> &network_configurations) {
    m_network_configurations = network_configurations;
    m_network_configurations_isSet = true;
}

bool OAIDataBoxSecret::is_network_configurations_Set() const{
    return m_network_configurations_isSet;
}

bool OAIDataBoxSecret::is_network_configurations_Valid() const{
    return m_network_configurations_isValid;
}

bool OAIDataBoxSecret::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_credential_details.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_serial_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encoded_validation_cert_pub_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_configurations.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDataBoxSecret::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
