/**
 * DataBoxManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-09-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPreferencesValidationRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPreferencesValidationRequest::OAIPreferencesValidationRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPreferencesValidationRequest::OAIPreferencesValidationRequest() {
    this->initializeModel();
}

OAIPreferencesValidationRequest::~OAIPreferencesValidationRequest() {}

void OAIPreferencesValidationRequest::initializeModel() {

    m_device_type_isSet = false;
    m_device_type_isValid = false;

    m_preference_isSet = false;
    m_preference_isValid = false;

    m_validation_type_isSet = false;
    m_validation_type_isValid = false;
}

void OAIPreferencesValidationRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPreferencesValidationRequest::fromJsonObject(QJsonObject json) {

    m_device_type_isValid = ::OpenAPI::fromJsonValue(m_device_type, json[QString("deviceType")]);
    m_device_type_isSet = !json[QString("deviceType")].isNull() && m_device_type_isValid;

    m_preference_isValid = ::OpenAPI::fromJsonValue(m_preference, json[QString("preference")]);
    m_preference_isSet = !json[QString("preference")].isNull() && m_preference_isValid;

    m_validation_type_isValid = ::OpenAPI::fromJsonValue(m_validation_type, json[QString("validationType")]);
    m_validation_type_isSet = !json[QString("validationType")].isNull() && m_validation_type_isValid;
}

QString OAIPreferencesValidationRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPreferencesValidationRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_device_type_isSet) {
        obj.insert(QString("deviceType"), ::OpenAPI::toJsonValue(m_device_type));
    }
    if (m_preference.isSet()) {
        obj.insert(QString("preference"), ::OpenAPI::toJsonValue(m_preference));
    }
    if (m_validation_type_isSet) {
        obj.insert(QString("validationType"), ::OpenAPI::toJsonValue(m_validation_type));
    }
    return obj;
}

QString OAIPreferencesValidationRequest::getDeviceType() const {
    return m_device_type;
}
void OAIPreferencesValidationRequest::setDeviceType(const QString &device_type) {
    m_device_type = device_type;
    m_device_type_isSet = true;
}

bool OAIPreferencesValidationRequest::is_device_type_Set() const{
    return m_device_type_isSet;
}

bool OAIPreferencesValidationRequest::is_device_type_Valid() const{
    return m_device_type_isValid;
}

OAIPreferences OAIPreferencesValidationRequest::getPreference() const {
    return m_preference;
}
void OAIPreferencesValidationRequest::setPreference(const OAIPreferences &preference) {
    m_preference = preference;
    m_preference_isSet = true;
}

bool OAIPreferencesValidationRequest::is_preference_Set() const{
    return m_preference_isSet;
}

bool OAIPreferencesValidationRequest::is_preference_Valid() const{
    return m_preference_isValid;
}

QString OAIPreferencesValidationRequest::getValidationType() const {
    return m_validation_type;
}
void OAIPreferencesValidationRequest::setValidationType(const QString &validation_type) {
    m_validation_type = validation_type;
    m_validation_type_isSet = true;
}

bool OAIPreferencesValidationRequest::is_validation_type_Set() const{
    return m_validation_type_isSet;
}

bool OAIPreferencesValidationRequest::is_validation_type_Valid() const{
    return m_validation_type_isValid;
}

bool OAIPreferencesValidationRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_device_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preference.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_validation_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPreferencesValidationRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_device_type_isValid && m_validation_type_isValid && true;
}

} // namespace OpenAPI
