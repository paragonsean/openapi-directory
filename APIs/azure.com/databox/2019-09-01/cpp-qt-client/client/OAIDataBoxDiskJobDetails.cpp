/**
 * DataBoxManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-09-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataBoxDiskJobDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataBoxDiskJobDetails::OAIDataBoxDiskJobDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataBoxDiskJobDetails::OAIDataBoxDiskJobDetails() {
    this->initializeModel();
}

OAIDataBoxDiskJobDetails::~OAIDataBoxDiskJobDetails() {}

void OAIDataBoxDiskJobDetails::initializeModel() {

    m_copy_progress_isSet = false;
    m_copy_progress_isValid = false;

    m_disks_and_size_details_isSet = false;
    m_disks_and_size_details_isValid = false;

    m_passkey_isSet = false;
    m_passkey_isValid = false;

    m_preferred_disks_isSet = false;
    m_preferred_disks_isValid = false;

    m_chain_of_custody_sas_key_isSet = false;
    m_chain_of_custody_sas_key_isValid = false;

    m_contact_details_isSet = false;
    m_contact_details_isValid = false;

    m_copy_log_details_isSet = false;
    m_copy_log_details_isValid = false;

    m_delivery_package_isSet = false;
    m_delivery_package_isValid = false;

    m_destination_account_details_isSet = false;
    m_destination_account_details_isValid = false;

    m_error_details_isSet = false;
    m_error_details_isValid = false;

    m_expected_data_size_in_terabytes_isSet = false;
    m_expected_data_size_in_terabytes_isValid = false;

    m_job_details_type_isSet = false;
    m_job_details_type_isValid = false;

    m_job_stages_isSet = false;
    m_job_stages_isValid = false;

    m_preferences_isSet = false;
    m_preferences_isValid = false;

    m_return_package_isSet = false;
    m_return_package_isValid = false;

    m_reverse_shipment_label_sas_key_isSet = false;
    m_reverse_shipment_label_sas_key_isValid = false;

    m_shipping_address_isSet = false;
    m_shipping_address_isValid = false;
}

void OAIDataBoxDiskJobDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDataBoxDiskJobDetails::fromJsonObject(QJsonObject json) {

    m_copy_progress_isValid = ::OpenAPI::fromJsonValue(m_copy_progress, json[QString("copyProgress")]);
    m_copy_progress_isSet = !json[QString("copyProgress")].isNull() && m_copy_progress_isValid;

    m_disks_and_size_details_isValid = ::OpenAPI::fromJsonValue(m_disks_and_size_details, json[QString("disksAndSizeDetails")]);
    m_disks_and_size_details_isSet = !json[QString("disksAndSizeDetails")].isNull() && m_disks_and_size_details_isValid;

    m_passkey_isValid = ::OpenAPI::fromJsonValue(m_passkey, json[QString("passkey")]);
    m_passkey_isSet = !json[QString("passkey")].isNull() && m_passkey_isValid;

    m_preferred_disks_isValid = ::OpenAPI::fromJsonValue(m_preferred_disks, json[QString("preferredDisks")]);
    m_preferred_disks_isSet = !json[QString("preferredDisks")].isNull() && m_preferred_disks_isValid;

    m_chain_of_custody_sas_key_isValid = ::OpenAPI::fromJsonValue(m_chain_of_custody_sas_key, json[QString("chainOfCustodySasKey")]);
    m_chain_of_custody_sas_key_isSet = !json[QString("chainOfCustodySasKey")].isNull() && m_chain_of_custody_sas_key_isValid;

    m_contact_details_isValid = ::OpenAPI::fromJsonValue(m_contact_details, json[QString("contactDetails")]);
    m_contact_details_isSet = !json[QString("contactDetails")].isNull() && m_contact_details_isValid;

    m_copy_log_details_isValid = ::OpenAPI::fromJsonValue(m_copy_log_details, json[QString("copyLogDetails")]);
    m_copy_log_details_isSet = !json[QString("copyLogDetails")].isNull() && m_copy_log_details_isValid;

    m_delivery_package_isValid = ::OpenAPI::fromJsonValue(m_delivery_package, json[QString("deliveryPackage")]);
    m_delivery_package_isSet = !json[QString("deliveryPackage")].isNull() && m_delivery_package_isValid;

    m_destination_account_details_isValid = ::OpenAPI::fromJsonValue(m_destination_account_details, json[QString("destinationAccountDetails")]);
    m_destination_account_details_isSet = !json[QString("destinationAccountDetails")].isNull() && m_destination_account_details_isValid;

    m_error_details_isValid = ::OpenAPI::fromJsonValue(m_error_details, json[QString("errorDetails")]);
    m_error_details_isSet = !json[QString("errorDetails")].isNull() && m_error_details_isValid;

    m_expected_data_size_in_terabytes_isValid = ::OpenAPI::fromJsonValue(m_expected_data_size_in_terabytes, json[QString("expectedDataSizeInTerabytes")]);
    m_expected_data_size_in_terabytes_isSet = !json[QString("expectedDataSizeInTerabytes")].isNull() && m_expected_data_size_in_terabytes_isValid;

    m_job_details_type_isValid = ::OpenAPI::fromJsonValue(m_job_details_type, json[QString("jobDetailsType")]);
    m_job_details_type_isSet = !json[QString("jobDetailsType")].isNull() && m_job_details_type_isValid;

    m_job_stages_isValid = ::OpenAPI::fromJsonValue(m_job_stages, json[QString("jobStages")]);
    m_job_stages_isSet = !json[QString("jobStages")].isNull() && m_job_stages_isValid;

    m_preferences_isValid = ::OpenAPI::fromJsonValue(m_preferences, json[QString("preferences")]);
    m_preferences_isSet = !json[QString("preferences")].isNull() && m_preferences_isValid;

    m_return_package_isValid = ::OpenAPI::fromJsonValue(m_return_package, json[QString("returnPackage")]);
    m_return_package_isSet = !json[QString("returnPackage")].isNull() && m_return_package_isValid;

    m_reverse_shipment_label_sas_key_isValid = ::OpenAPI::fromJsonValue(m_reverse_shipment_label_sas_key, json[QString("reverseShipmentLabelSasKey")]);
    m_reverse_shipment_label_sas_key_isSet = !json[QString("reverseShipmentLabelSasKey")].isNull() && m_reverse_shipment_label_sas_key_isValid;

    m_shipping_address_isValid = ::OpenAPI::fromJsonValue(m_shipping_address, json[QString("shippingAddress")]);
    m_shipping_address_isSet = !json[QString("shippingAddress")].isNull() && m_shipping_address_isValid;
}

QString OAIDataBoxDiskJobDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDataBoxDiskJobDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_copy_progress.size() > 0) {
        obj.insert(QString("copyProgress"), ::OpenAPI::toJsonValue(m_copy_progress));
    }
    if (m_disks_and_size_details.size() > 0) {
        obj.insert(QString("disksAndSizeDetails"), ::OpenAPI::toJsonValue(m_disks_and_size_details));
    }
    if (m_passkey_isSet) {
        obj.insert(QString("passkey"), ::OpenAPI::toJsonValue(m_passkey));
    }
    if (m_preferred_disks.size() > 0) {
        obj.insert(QString("preferredDisks"), ::OpenAPI::toJsonValue(m_preferred_disks));
    }
    if (m_chain_of_custody_sas_key_isSet) {
        obj.insert(QString("chainOfCustodySasKey"), ::OpenAPI::toJsonValue(m_chain_of_custody_sas_key));
    }
    if (m_contact_details.isSet()) {
        obj.insert(QString("contactDetails"), ::OpenAPI::toJsonValue(m_contact_details));
    }
    if (m_copy_log_details.size() > 0) {
        obj.insert(QString("copyLogDetails"), ::OpenAPI::toJsonValue(m_copy_log_details));
    }
    if (m_delivery_package.isSet()) {
        obj.insert(QString("deliveryPackage"), ::OpenAPI::toJsonValue(m_delivery_package));
    }
    if (m_destination_account_details.size() > 0) {
        obj.insert(QString("destinationAccountDetails"), ::OpenAPI::toJsonValue(m_destination_account_details));
    }
    if (m_error_details.size() > 0) {
        obj.insert(QString("errorDetails"), ::OpenAPI::toJsonValue(m_error_details));
    }
    if (m_expected_data_size_in_terabytes_isSet) {
        obj.insert(QString("expectedDataSizeInTerabytes"), ::OpenAPI::toJsonValue(m_expected_data_size_in_terabytes));
    }
    if (m_job_details_type_isSet) {
        obj.insert(QString("jobDetailsType"), ::OpenAPI::toJsonValue(m_job_details_type));
    }
    if (m_job_stages.size() > 0) {
        obj.insert(QString("jobStages"), ::OpenAPI::toJsonValue(m_job_stages));
    }
    if (m_preferences.isSet()) {
        obj.insert(QString("preferences"), ::OpenAPI::toJsonValue(m_preferences));
    }
    if (m_return_package.isSet()) {
        obj.insert(QString("returnPackage"), ::OpenAPI::toJsonValue(m_return_package));
    }
    if (m_reverse_shipment_label_sas_key_isSet) {
        obj.insert(QString("reverseShipmentLabelSasKey"), ::OpenAPI::toJsonValue(m_reverse_shipment_label_sas_key));
    }
    if (m_shipping_address.isSet()) {
        obj.insert(QString("shippingAddress"), ::OpenAPI::toJsonValue(m_shipping_address));
    }
    return obj;
}

QList<OAIDataBoxDiskCopyProgress> OAIDataBoxDiskJobDetails::getCopyProgress() const {
    return m_copy_progress;
}
void OAIDataBoxDiskJobDetails::setCopyProgress(const QList<OAIDataBoxDiskCopyProgress> &copy_progress) {
    m_copy_progress = copy_progress;
    m_copy_progress_isSet = true;
}

bool OAIDataBoxDiskJobDetails::is_copy_progress_Set() const{
    return m_copy_progress_isSet;
}

bool OAIDataBoxDiskJobDetails::is_copy_progress_Valid() const{
    return m_copy_progress_isValid;
}

QMap<QString, qint32> OAIDataBoxDiskJobDetails::getDisksAndSizeDetails() const {
    return m_disks_and_size_details;
}
void OAIDataBoxDiskJobDetails::setDisksAndSizeDetails(const QMap<QString, qint32> &disks_and_size_details) {
    m_disks_and_size_details = disks_and_size_details;
    m_disks_and_size_details_isSet = true;
}

bool OAIDataBoxDiskJobDetails::is_disks_and_size_details_Set() const{
    return m_disks_and_size_details_isSet;
}

bool OAIDataBoxDiskJobDetails::is_disks_and_size_details_Valid() const{
    return m_disks_and_size_details_isValid;
}

QString OAIDataBoxDiskJobDetails::getPasskey() const {
    return m_passkey;
}
void OAIDataBoxDiskJobDetails::setPasskey(const QString &passkey) {
    m_passkey = passkey;
    m_passkey_isSet = true;
}

bool OAIDataBoxDiskJobDetails::is_passkey_Set() const{
    return m_passkey_isSet;
}

bool OAIDataBoxDiskJobDetails::is_passkey_Valid() const{
    return m_passkey_isValid;
}

QMap<QString, qint32> OAIDataBoxDiskJobDetails::getPreferredDisks() const {
    return m_preferred_disks;
}
void OAIDataBoxDiskJobDetails::setPreferredDisks(const QMap<QString, qint32> &preferred_disks) {
    m_preferred_disks = preferred_disks;
    m_preferred_disks_isSet = true;
}

bool OAIDataBoxDiskJobDetails::is_preferred_disks_Set() const{
    return m_preferred_disks_isSet;
}

bool OAIDataBoxDiskJobDetails::is_preferred_disks_Valid() const{
    return m_preferred_disks_isValid;
}

QString OAIDataBoxDiskJobDetails::getChainOfCustodySasKey() const {
    return m_chain_of_custody_sas_key;
}
void OAIDataBoxDiskJobDetails::setChainOfCustodySasKey(const QString &chain_of_custody_sas_key) {
    m_chain_of_custody_sas_key = chain_of_custody_sas_key;
    m_chain_of_custody_sas_key_isSet = true;
}

bool OAIDataBoxDiskJobDetails::is_chain_of_custody_sas_key_Set() const{
    return m_chain_of_custody_sas_key_isSet;
}

bool OAIDataBoxDiskJobDetails::is_chain_of_custody_sas_key_Valid() const{
    return m_chain_of_custody_sas_key_isValid;
}

OAIContactDetails OAIDataBoxDiskJobDetails::getContactDetails() const {
    return m_contact_details;
}
void OAIDataBoxDiskJobDetails::setContactDetails(const OAIContactDetails &contact_details) {
    m_contact_details = contact_details;
    m_contact_details_isSet = true;
}

bool OAIDataBoxDiskJobDetails::is_contact_details_Set() const{
    return m_contact_details_isSet;
}

bool OAIDataBoxDiskJobDetails::is_contact_details_Valid() const{
    return m_contact_details_isValid;
}

QList<OAICopyLogDetails> OAIDataBoxDiskJobDetails::getCopyLogDetails() const {
    return m_copy_log_details;
}
void OAIDataBoxDiskJobDetails::setCopyLogDetails(const QList<OAICopyLogDetails> &copy_log_details) {
    m_copy_log_details = copy_log_details;
    m_copy_log_details_isSet = true;
}

bool OAIDataBoxDiskJobDetails::is_copy_log_details_Set() const{
    return m_copy_log_details_isSet;
}

bool OAIDataBoxDiskJobDetails::is_copy_log_details_Valid() const{
    return m_copy_log_details_isValid;
}

OAIPackageShippingDetails OAIDataBoxDiskJobDetails::getDeliveryPackage() const {
    return m_delivery_package;
}
void OAIDataBoxDiskJobDetails::setDeliveryPackage(const OAIPackageShippingDetails &delivery_package) {
    m_delivery_package = delivery_package;
    m_delivery_package_isSet = true;
}

bool OAIDataBoxDiskJobDetails::is_delivery_package_Set() const{
    return m_delivery_package_isSet;
}

bool OAIDataBoxDiskJobDetails::is_delivery_package_Valid() const{
    return m_delivery_package_isValid;
}

QList<OAIDestinationAccountDetails> OAIDataBoxDiskJobDetails::getDestinationAccountDetails() const {
    return m_destination_account_details;
}
void OAIDataBoxDiskJobDetails::setDestinationAccountDetails(const QList<OAIDestinationAccountDetails> &destination_account_details) {
    m_destination_account_details = destination_account_details;
    m_destination_account_details_isSet = true;
}

bool OAIDataBoxDiskJobDetails::is_destination_account_details_Set() const{
    return m_destination_account_details_isSet;
}

bool OAIDataBoxDiskJobDetails::is_destination_account_details_Valid() const{
    return m_destination_account_details_isValid;
}

QList<OAIJobErrorDetails> OAIDataBoxDiskJobDetails::getErrorDetails() const {
    return m_error_details;
}
void OAIDataBoxDiskJobDetails::setErrorDetails(const QList<OAIJobErrorDetails> &error_details) {
    m_error_details = error_details;
    m_error_details_isSet = true;
}

bool OAIDataBoxDiskJobDetails::is_error_details_Set() const{
    return m_error_details_isSet;
}

bool OAIDataBoxDiskJobDetails::is_error_details_Valid() const{
    return m_error_details_isValid;
}

qint32 OAIDataBoxDiskJobDetails::getExpectedDataSizeInTerabytes() const {
    return m_expected_data_size_in_terabytes;
}
void OAIDataBoxDiskJobDetails::setExpectedDataSizeInTerabytes(const qint32 &expected_data_size_in_terabytes) {
    m_expected_data_size_in_terabytes = expected_data_size_in_terabytes;
    m_expected_data_size_in_terabytes_isSet = true;
}

bool OAIDataBoxDiskJobDetails::is_expected_data_size_in_terabytes_Set() const{
    return m_expected_data_size_in_terabytes_isSet;
}

bool OAIDataBoxDiskJobDetails::is_expected_data_size_in_terabytes_Valid() const{
    return m_expected_data_size_in_terabytes_isValid;
}

QString OAIDataBoxDiskJobDetails::getJobDetailsType() const {
    return m_job_details_type;
}
void OAIDataBoxDiskJobDetails::setJobDetailsType(const QString &job_details_type) {
    m_job_details_type = job_details_type;
    m_job_details_type_isSet = true;
}

bool OAIDataBoxDiskJobDetails::is_job_details_type_Set() const{
    return m_job_details_type_isSet;
}

bool OAIDataBoxDiskJobDetails::is_job_details_type_Valid() const{
    return m_job_details_type_isValid;
}

QList<OAIJobStages> OAIDataBoxDiskJobDetails::getJobStages() const {
    return m_job_stages;
}
void OAIDataBoxDiskJobDetails::setJobStages(const QList<OAIJobStages> &job_stages) {
    m_job_stages = job_stages;
    m_job_stages_isSet = true;
}

bool OAIDataBoxDiskJobDetails::is_job_stages_Set() const{
    return m_job_stages_isSet;
}

bool OAIDataBoxDiskJobDetails::is_job_stages_Valid() const{
    return m_job_stages_isValid;
}

OAIPreferences OAIDataBoxDiskJobDetails::getPreferences() const {
    return m_preferences;
}
void OAIDataBoxDiskJobDetails::setPreferences(const OAIPreferences &preferences) {
    m_preferences = preferences;
    m_preferences_isSet = true;
}

bool OAIDataBoxDiskJobDetails::is_preferences_Set() const{
    return m_preferences_isSet;
}

bool OAIDataBoxDiskJobDetails::is_preferences_Valid() const{
    return m_preferences_isValid;
}

OAIPackageShippingDetails OAIDataBoxDiskJobDetails::getReturnPackage() const {
    return m_return_package;
}
void OAIDataBoxDiskJobDetails::setReturnPackage(const OAIPackageShippingDetails &return_package) {
    m_return_package = return_package;
    m_return_package_isSet = true;
}

bool OAIDataBoxDiskJobDetails::is_return_package_Set() const{
    return m_return_package_isSet;
}

bool OAIDataBoxDiskJobDetails::is_return_package_Valid() const{
    return m_return_package_isValid;
}

QString OAIDataBoxDiskJobDetails::getReverseShipmentLabelSasKey() const {
    return m_reverse_shipment_label_sas_key;
}
void OAIDataBoxDiskJobDetails::setReverseShipmentLabelSasKey(const QString &reverse_shipment_label_sas_key) {
    m_reverse_shipment_label_sas_key = reverse_shipment_label_sas_key;
    m_reverse_shipment_label_sas_key_isSet = true;
}

bool OAIDataBoxDiskJobDetails::is_reverse_shipment_label_sas_key_Set() const{
    return m_reverse_shipment_label_sas_key_isSet;
}

bool OAIDataBoxDiskJobDetails::is_reverse_shipment_label_sas_key_Valid() const{
    return m_reverse_shipment_label_sas_key_isValid;
}

OAIShippingAddress OAIDataBoxDiskJobDetails::getShippingAddress() const {
    return m_shipping_address;
}
void OAIDataBoxDiskJobDetails::setShippingAddress(const OAIShippingAddress &shipping_address) {
    m_shipping_address = shipping_address;
    m_shipping_address_isSet = true;
}

bool OAIDataBoxDiskJobDetails::is_shipping_address_Set() const{
    return m_shipping_address_isSet;
}

bool OAIDataBoxDiskJobDetails::is_shipping_address_Valid() const{
    return m_shipping_address_isValid;
}

bool OAIDataBoxDiskJobDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_copy_progress.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_disks_and_size_details.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_passkey_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preferred_disks.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_chain_of_custody_sas_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contact_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_copy_log_details.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_delivery_package.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_account_details.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_details.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_expected_data_size_in_terabytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_details_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_stages.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_preferences.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_return_package.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reverse_shipment_label_sas_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_address.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDataBoxDiskJobDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_contact_details_isValid && m_destination_account_details_isValid && m_job_details_type_isValid && m_shipping_address_isValid && true;
}

} // namespace OpenAPI
