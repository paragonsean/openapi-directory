# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.error import Error
from openapi_server.models.job_delivery_info import JobDeliveryInfo
from openapi_server.models.job_details import JobDetails
from openapi_server import util


class JobProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cancellation_reason: str=None, delivery_info: JobDeliveryInfo=None, delivery_type: str=None, details: JobDetails=None, error: Error=None, is_cancellable: bool=None, is_cancellable_without_fee: bool=None, is_deletable: bool=None, is_shipping_address_editable: bool=None, start_time: datetime=None, status: str=None):
        """JobProperties - a model defined in OpenAPI

        :param cancellation_reason: The cancellation_reason of this JobProperties.
        :param delivery_info: The delivery_info of this JobProperties.
        :param delivery_type: The delivery_type of this JobProperties.
        :param details: The details of this JobProperties.
        :param error: The error of this JobProperties.
        :param is_cancellable: The is_cancellable of this JobProperties.
        :param is_cancellable_without_fee: The is_cancellable_without_fee of this JobProperties.
        :param is_deletable: The is_deletable of this JobProperties.
        :param is_shipping_address_editable: The is_shipping_address_editable of this JobProperties.
        :param start_time: The start_time of this JobProperties.
        :param status: The status of this JobProperties.
        """
        self.openapi_types = {
            'cancellation_reason': str,
            'delivery_info': JobDeliveryInfo,
            'delivery_type': str,
            'details': JobDetails,
            'error': Error,
            'is_cancellable': bool,
            'is_cancellable_without_fee': bool,
            'is_deletable': bool,
            'is_shipping_address_editable': bool,
            'start_time': datetime,
            'status': str
        }

        self.attribute_map = {
            'cancellation_reason': 'cancellationReason',
            'delivery_info': 'deliveryInfo',
            'delivery_type': 'deliveryType',
            'details': 'details',
            'error': 'error',
            'is_cancellable': 'isCancellable',
            'is_cancellable_without_fee': 'isCancellableWithoutFee',
            'is_deletable': 'isDeletable',
            'is_shipping_address_editable': 'isShippingAddressEditable',
            'start_time': 'startTime',
            'status': 'status'
        }

        self._cancellation_reason = cancellation_reason
        self._delivery_info = delivery_info
        self._delivery_type = delivery_type
        self._details = details
        self._error = error
        self._is_cancellable = is_cancellable
        self._is_cancellable_without_fee = is_cancellable_without_fee
        self._is_deletable = is_deletable
        self._is_shipping_address_editable = is_shipping_address_editable
        self._start_time = start_time
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JobProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JobProperties of this JobProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cancellation_reason(self):
        """Gets the cancellation_reason of this JobProperties.

        Reason for cancellation.

        :return: The cancellation_reason of this JobProperties.
        :rtype: str
        """
        return self._cancellation_reason

    @cancellation_reason.setter
    def cancellation_reason(self, cancellation_reason):
        """Sets the cancellation_reason of this JobProperties.

        Reason for cancellation.

        :param cancellation_reason: The cancellation_reason of this JobProperties.
        :type cancellation_reason: str
        """

        self._cancellation_reason = cancellation_reason

    @property
    def delivery_info(self):
        """Gets the delivery_info of this JobProperties.


        :return: The delivery_info of this JobProperties.
        :rtype: JobDeliveryInfo
        """
        return self._delivery_info

    @delivery_info.setter
    def delivery_info(self, delivery_info):
        """Sets the delivery_info of this JobProperties.


        :param delivery_info: The delivery_info of this JobProperties.
        :type delivery_info: JobDeliveryInfo
        """

        self._delivery_info = delivery_info

    @property
    def delivery_type(self):
        """Gets the delivery_type of this JobProperties.

        Delivery type of Job.

        :return: The delivery_type of this JobProperties.
        :rtype: str
        """
        return self._delivery_type

    @delivery_type.setter
    def delivery_type(self, delivery_type):
        """Sets the delivery_type of this JobProperties.

        Delivery type of Job.

        :param delivery_type: The delivery_type of this JobProperties.
        :type delivery_type: str
        """
        allowed_values = ["NonScheduled", "Scheduled"]  # noqa: E501
        if delivery_type not in allowed_values:
            raise ValueError(
                "Invalid value for `delivery_type` ({0}), must be one of {1}"
                .format(delivery_type, allowed_values)
            )

        self._delivery_type = delivery_type

    @property
    def details(self):
        """Gets the details of this JobProperties.


        :return: The details of this JobProperties.
        :rtype: JobDetails
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this JobProperties.


        :param details: The details of this JobProperties.
        :type details: JobDetails
        """

        self._details = details

    @property
    def error(self):
        """Gets the error of this JobProperties.


        :return: The error of this JobProperties.
        :rtype: Error
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this JobProperties.


        :param error: The error of this JobProperties.
        :type error: Error
        """

        self._error = error

    @property
    def is_cancellable(self):
        """Gets the is_cancellable of this JobProperties.

        Describes whether the job is cancellable or not.

        :return: The is_cancellable of this JobProperties.
        :rtype: bool
        """
        return self._is_cancellable

    @is_cancellable.setter
    def is_cancellable(self, is_cancellable):
        """Sets the is_cancellable of this JobProperties.

        Describes whether the job is cancellable or not.

        :param is_cancellable: The is_cancellable of this JobProperties.
        :type is_cancellable: bool
        """

        self._is_cancellable = is_cancellable

    @property
    def is_cancellable_without_fee(self):
        """Gets the is_cancellable_without_fee of this JobProperties.

        Flag to indicate cancellation of scheduled job.

        :return: The is_cancellable_without_fee of this JobProperties.
        :rtype: bool
        """
        return self._is_cancellable_without_fee

    @is_cancellable_without_fee.setter
    def is_cancellable_without_fee(self, is_cancellable_without_fee):
        """Sets the is_cancellable_without_fee of this JobProperties.

        Flag to indicate cancellation of scheduled job.

        :param is_cancellable_without_fee: The is_cancellable_without_fee of this JobProperties.
        :type is_cancellable_without_fee: bool
        """

        self._is_cancellable_without_fee = is_cancellable_without_fee

    @property
    def is_deletable(self):
        """Gets the is_deletable of this JobProperties.

        Describes whether the job is deletable or not.

        :return: The is_deletable of this JobProperties.
        :rtype: bool
        """
        return self._is_deletable

    @is_deletable.setter
    def is_deletable(self, is_deletable):
        """Sets the is_deletable of this JobProperties.

        Describes whether the job is deletable or not.

        :param is_deletable: The is_deletable of this JobProperties.
        :type is_deletable: bool
        """

        self._is_deletable = is_deletable

    @property
    def is_shipping_address_editable(self):
        """Gets the is_shipping_address_editable of this JobProperties.

        Describes whether the shipping address is editable or not.

        :return: The is_shipping_address_editable of this JobProperties.
        :rtype: bool
        """
        return self._is_shipping_address_editable

    @is_shipping_address_editable.setter
    def is_shipping_address_editable(self, is_shipping_address_editable):
        """Sets the is_shipping_address_editable of this JobProperties.

        Describes whether the shipping address is editable or not.

        :param is_shipping_address_editable: The is_shipping_address_editable of this JobProperties.
        :type is_shipping_address_editable: bool
        """

        self._is_shipping_address_editable = is_shipping_address_editable

    @property
    def start_time(self):
        """Gets the start_time of this JobProperties.

        Time at which the job was started in UTC ISO 8601 format.

        :return: The start_time of this JobProperties.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this JobProperties.

        Time at which the job was started in UTC ISO 8601 format.

        :param start_time: The start_time of this JobProperties.
        :type start_time: datetime
        """

        self._start_time = start_time

    @property
    def status(self):
        """Gets the status of this JobProperties.

        Name of the stage which is in progress.

        :return: The status of this JobProperties.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this JobProperties.

        Name of the stage which is in progress.

        :param status: The status of this JobProperties.
        :type status: str
        """
        allowed_values = ["DeviceOrdered", "DevicePrepared", "Dispatched", "Delivered", "PickedUp", "AtAzureDC", "DataCopy", "Completed", "CompletedWithErrors", "Cancelled", "Failed_IssueReportedAtCustomer", "Failed_IssueDetectedAtAzureDC", "Aborted", "CompletedWithWarnings", "ReadyToDispatchFromAzureDC", "ReadyToReceiveAtAzureDC"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
