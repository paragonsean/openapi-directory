# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CopyProgress(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: str=None, bytes_sent_to_cloud: int=None, data_destination_type: str=None, files_errored_out: int=None, files_processed: int=None, invalid_file_bytes_uploaded: int=None, invalid_files_processed: int=None, renamed_container_count: int=None, storage_account_name: str=None, total_bytes_to_process: int=None, total_files_to_process: int=None):
        """CopyProgress - a model defined in OpenAPI

        :param account_id: The account_id of this CopyProgress.
        :param bytes_sent_to_cloud: The bytes_sent_to_cloud of this CopyProgress.
        :param data_destination_type: The data_destination_type of this CopyProgress.
        :param files_errored_out: The files_errored_out of this CopyProgress.
        :param files_processed: The files_processed of this CopyProgress.
        :param invalid_file_bytes_uploaded: The invalid_file_bytes_uploaded of this CopyProgress.
        :param invalid_files_processed: The invalid_files_processed of this CopyProgress.
        :param renamed_container_count: The renamed_container_count of this CopyProgress.
        :param storage_account_name: The storage_account_name of this CopyProgress.
        :param total_bytes_to_process: The total_bytes_to_process of this CopyProgress.
        :param total_files_to_process: The total_files_to_process of this CopyProgress.
        """
        self.openapi_types = {
            'account_id': str,
            'bytes_sent_to_cloud': int,
            'data_destination_type': str,
            'files_errored_out': int,
            'files_processed': int,
            'invalid_file_bytes_uploaded': int,
            'invalid_files_processed': int,
            'renamed_container_count': int,
            'storage_account_name': str,
            'total_bytes_to_process': int,
            'total_files_to_process': int
        }

        self.attribute_map = {
            'account_id': 'accountId',
            'bytes_sent_to_cloud': 'bytesSentToCloud',
            'data_destination_type': 'dataDestinationType',
            'files_errored_out': 'filesErroredOut',
            'files_processed': 'filesProcessed',
            'invalid_file_bytes_uploaded': 'invalidFileBytesUploaded',
            'invalid_files_processed': 'invalidFilesProcessed',
            'renamed_container_count': 'renamedContainerCount',
            'storage_account_name': 'storageAccountName',
            'total_bytes_to_process': 'totalBytesToProcess',
            'total_files_to_process': 'totalFilesToProcess'
        }

        self._account_id = account_id
        self._bytes_sent_to_cloud = bytes_sent_to_cloud
        self._data_destination_type = data_destination_type
        self._files_errored_out = files_errored_out
        self._files_processed = files_processed
        self._invalid_file_bytes_uploaded = invalid_file_bytes_uploaded
        self._invalid_files_processed = invalid_files_processed
        self._renamed_container_count = renamed_container_count
        self._storage_account_name = storage_account_name
        self._total_bytes_to_process = total_bytes_to_process
        self._total_files_to_process = total_files_to_process

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CopyProgress':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CopyProgress of this CopyProgress.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this CopyProgress.

        Id of the account where the data needs to be uploaded.

        :return: The account_id of this CopyProgress.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this CopyProgress.

        Id of the account where the data needs to be uploaded.

        :param account_id: The account_id of this CopyProgress.
        :type account_id: str
        """

        self._account_id = account_id

    @property
    def bytes_sent_to_cloud(self):
        """Gets the bytes_sent_to_cloud of this CopyProgress.

        Amount of data uploaded by the job as of now.

        :return: The bytes_sent_to_cloud of this CopyProgress.
        :rtype: int
        """
        return self._bytes_sent_to_cloud

    @bytes_sent_to_cloud.setter
    def bytes_sent_to_cloud(self, bytes_sent_to_cloud):
        """Sets the bytes_sent_to_cloud of this CopyProgress.

        Amount of data uploaded by the job as of now.

        :param bytes_sent_to_cloud: The bytes_sent_to_cloud of this CopyProgress.
        :type bytes_sent_to_cloud: int
        """

        self._bytes_sent_to_cloud = bytes_sent_to_cloud

    @property
    def data_destination_type(self):
        """Gets the data_destination_type of this CopyProgress.

        Data Destination Type.

        :return: The data_destination_type of this CopyProgress.
        :rtype: str
        """
        return self._data_destination_type

    @data_destination_type.setter
    def data_destination_type(self, data_destination_type):
        """Sets the data_destination_type of this CopyProgress.

        Data Destination Type.

        :param data_destination_type: The data_destination_type of this CopyProgress.
        :type data_destination_type: str
        """
        allowed_values = ["StorageAccount", "ManagedDisk"]  # noqa: E501
        if data_destination_type not in allowed_values:
            raise ValueError(
                "Invalid value for `data_destination_type` ({0}), must be one of {1}"
                .format(data_destination_type, allowed_values)
            )

        self._data_destination_type = data_destination_type

    @property
    def files_errored_out(self):
        """Gets the files_errored_out of this CopyProgress.

        Number of files which could not be copied

        :return: The files_errored_out of this CopyProgress.
        :rtype: int
        """
        return self._files_errored_out

    @files_errored_out.setter
    def files_errored_out(self, files_errored_out):
        """Sets the files_errored_out of this CopyProgress.

        Number of files which could not be copied

        :param files_errored_out: The files_errored_out of this CopyProgress.
        :type files_errored_out: int
        """

        self._files_errored_out = files_errored_out

    @property
    def files_processed(self):
        """Gets the files_processed of this CopyProgress.

        Number of files processed by the job as of now.

        :return: The files_processed of this CopyProgress.
        :rtype: int
        """
        return self._files_processed

    @files_processed.setter
    def files_processed(self, files_processed):
        """Sets the files_processed of this CopyProgress.

        Number of files processed by the job as of now.

        :param files_processed: The files_processed of this CopyProgress.
        :type files_processed: int
        """

        self._files_processed = files_processed

    @property
    def invalid_file_bytes_uploaded(self):
        """Gets the invalid_file_bytes_uploaded of this CopyProgress.

        Total amount of data not adhering to azure naming conventions which were processed by automatic renaming

        :return: The invalid_file_bytes_uploaded of this CopyProgress.
        :rtype: int
        """
        return self._invalid_file_bytes_uploaded

    @invalid_file_bytes_uploaded.setter
    def invalid_file_bytes_uploaded(self, invalid_file_bytes_uploaded):
        """Sets the invalid_file_bytes_uploaded of this CopyProgress.

        Total amount of data not adhering to azure naming conventions which were processed by automatic renaming

        :param invalid_file_bytes_uploaded: The invalid_file_bytes_uploaded of this CopyProgress.
        :type invalid_file_bytes_uploaded: int
        """

        self._invalid_file_bytes_uploaded = invalid_file_bytes_uploaded

    @property
    def invalid_files_processed(self):
        """Gets the invalid_files_processed of this CopyProgress.

        Number of files not adhering to azure naming conventions which were processed by automatic renaming

        :return: The invalid_files_processed of this CopyProgress.
        :rtype: int
        """
        return self._invalid_files_processed

    @invalid_files_processed.setter
    def invalid_files_processed(self, invalid_files_processed):
        """Sets the invalid_files_processed of this CopyProgress.

        Number of files not adhering to azure naming conventions which were processed by automatic renaming

        :param invalid_files_processed: The invalid_files_processed of this CopyProgress.
        :type invalid_files_processed: int
        """

        self._invalid_files_processed = invalid_files_processed

    @property
    def renamed_container_count(self):
        """Gets the renamed_container_count of this CopyProgress.

        Number of folders not adhering to azure naming conventions which were processed by automatic renaming

        :return: The renamed_container_count of this CopyProgress.
        :rtype: int
        """
        return self._renamed_container_count

    @renamed_container_count.setter
    def renamed_container_count(self, renamed_container_count):
        """Sets the renamed_container_count of this CopyProgress.

        Number of folders not adhering to azure naming conventions which were processed by automatic renaming

        :param renamed_container_count: The renamed_container_count of this CopyProgress.
        :type renamed_container_count: int
        """

        self._renamed_container_count = renamed_container_count

    @property
    def storage_account_name(self):
        """Gets the storage_account_name of this CopyProgress.

        Name of the storage account where the data needs to be uploaded.

        :return: The storage_account_name of this CopyProgress.
        :rtype: str
        """
        return self._storage_account_name

    @storage_account_name.setter
    def storage_account_name(self, storage_account_name):
        """Sets the storage_account_name of this CopyProgress.

        Name of the storage account where the data needs to be uploaded.

        :param storage_account_name: The storage_account_name of this CopyProgress.
        :type storage_account_name: str
        """

        self._storage_account_name = storage_account_name

    @property
    def total_bytes_to_process(self):
        """Gets the total_bytes_to_process of this CopyProgress.

        Total amount of data to be processed by the job.

        :return: The total_bytes_to_process of this CopyProgress.
        :rtype: int
        """
        return self._total_bytes_to_process

    @total_bytes_to_process.setter
    def total_bytes_to_process(self, total_bytes_to_process):
        """Sets the total_bytes_to_process of this CopyProgress.

        Total amount of data to be processed by the job.

        :param total_bytes_to_process: The total_bytes_to_process of this CopyProgress.
        :type total_bytes_to_process: int
        """

        self._total_bytes_to_process = total_bytes_to_process

    @property
    def total_files_to_process(self):
        """Gets the total_files_to_process of this CopyProgress.

        Total number of files to be processed by the job.

        :return: The total_files_to_process of this CopyProgress.
        :rtype: int
        """
        return self._total_files_to_process

    @total_files_to_process.setter
    def total_files_to_process(self, total_files_to_process):
        """Sets the total_files_to_process of this CopyProgress.

        Total number of files to be processed by the job.

        :param total_files_to_process: The total_files_to_process of this CopyProgress.
        :type total_files_to_process: int
        """

        self._total_files_to_process = total_files_to_process
