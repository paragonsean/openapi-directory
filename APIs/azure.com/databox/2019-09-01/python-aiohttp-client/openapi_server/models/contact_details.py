# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.notification_preference import NotificationPreference
from openapi_server import util


class ContactDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, contact_name: str=None, email_list: List[str]=None, mobile: str=None, notification_preference: List[NotificationPreference]=None, phone: str=None, phone_extension: str=None):
        """ContactDetails - a model defined in OpenAPI

        :param contact_name: The contact_name of this ContactDetails.
        :param email_list: The email_list of this ContactDetails.
        :param mobile: The mobile of this ContactDetails.
        :param notification_preference: The notification_preference of this ContactDetails.
        :param phone: The phone of this ContactDetails.
        :param phone_extension: The phone_extension of this ContactDetails.
        """
        self.openapi_types = {
            'contact_name': str,
            'email_list': List[str],
            'mobile': str,
            'notification_preference': List[NotificationPreference],
            'phone': str,
            'phone_extension': str
        }

        self.attribute_map = {
            'contact_name': 'contactName',
            'email_list': 'emailList',
            'mobile': 'mobile',
            'notification_preference': 'notificationPreference',
            'phone': 'phone',
            'phone_extension': 'phoneExtension'
        }

        self._contact_name = contact_name
        self._email_list = email_list
        self._mobile = mobile
        self._notification_preference = notification_preference
        self._phone = phone
        self._phone_extension = phone_extension

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContactDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ContactDetails of this ContactDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def contact_name(self):
        """Gets the contact_name of this ContactDetails.

        Contact name of the person.

        :return: The contact_name of this ContactDetails.
        :rtype: str
        """
        return self._contact_name

    @contact_name.setter
    def contact_name(self, contact_name):
        """Sets the contact_name of this ContactDetails.

        Contact name of the person.

        :param contact_name: The contact_name of this ContactDetails.
        :type contact_name: str
        """
        if contact_name is None:
            raise ValueError("Invalid value for `contact_name`, must not be `None`")

        self._contact_name = contact_name

    @property
    def email_list(self):
        """Gets the email_list of this ContactDetails.

        List of Email-ids to be notified about job progress.

        :return: The email_list of this ContactDetails.
        :rtype: List[str]
        """
        return self._email_list

    @email_list.setter
    def email_list(self, email_list):
        """Sets the email_list of this ContactDetails.

        List of Email-ids to be notified about job progress.

        :param email_list: The email_list of this ContactDetails.
        :type email_list: List[str]
        """
        if email_list is None:
            raise ValueError("Invalid value for `email_list`, must not be `None`")

        self._email_list = email_list

    @property
    def mobile(self):
        """Gets the mobile of this ContactDetails.

        Mobile number of the contact person.

        :return: The mobile of this ContactDetails.
        :rtype: str
        """
        return self._mobile

    @mobile.setter
    def mobile(self, mobile):
        """Sets the mobile of this ContactDetails.

        Mobile number of the contact person.

        :param mobile: The mobile of this ContactDetails.
        :type mobile: str
        """

        self._mobile = mobile

    @property
    def notification_preference(self):
        """Gets the notification_preference of this ContactDetails.

        Notification preference for a job stage.

        :return: The notification_preference of this ContactDetails.
        :rtype: List[NotificationPreference]
        """
        return self._notification_preference

    @notification_preference.setter
    def notification_preference(self, notification_preference):
        """Sets the notification_preference of this ContactDetails.

        Notification preference for a job stage.

        :param notification_preference: The notification_preference of this ContactDetails.
        :type notification_preference: List[NotificationPreference]
        """

        self._notification_preference = notification_preference

    @property
    def phone(self):
        """Gets the phone of this ContactDetails.

        Phone number of the contact person.

        :return: The phone of this ContactDetails.
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this ContactDetails.

        Phone number of the contact person.

        :param phone: The phone of this ContactDetails.
        :type phone: str
        """
        if phone is None:
            raise ValueError("Invalid value for `phone`, must not be `None`")

        self._phone = phone

    @property
    def phone_extension(self):
        """Gets the phone_extension of this ContactDetails.

        Phone extension number of the contact person.

        :return: The phone_extension of this ContactDetails.
        :rtype: str
        """
        return self._phone_extension

    @phone_extension.setter
    def phone_extension(self, phone_extension):
        """Sets the phone_extension of this ContactDetails.

        Phone extension number of the contact person.

        :param phone_extension: The phone_extension of this ContactDetails.
        :type phone_extension: str
        """

        self._phone_extension = phone_extension
