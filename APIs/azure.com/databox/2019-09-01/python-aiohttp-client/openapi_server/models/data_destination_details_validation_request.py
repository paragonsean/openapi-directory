# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.destination_account_details import DestinationAccountDetails
from openapi_server.models.validation_input_request import ValidationInputRequest
from openapi_server import util


class DataDestinationDetailsValidationRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, destination_account_details: List[DestinationAccountDetails]=None, location: str=None, validation_type: str=None):
        """DataDestinationDetailsValidationRequest - a model defined in OpenAPI

        :param destination_account_details: The destination_account_details of this DataDestinationDetailsValidationRequest.
        :param location: The location of this DataDestinationDetailsValidationRequest.
        :param validation_type: The validation_type of this DataDestinationDetailsValidationRequest.
        """
        self.openapi_types = {
            'destination_account_details': List[DestinationAccountDetails],
            'location': str,
            'validation_type': str
        }

        self.attribute_map = {
            'destination_account_details': 'destinationAccountDetails',
            'location': 'location',
            'validation_type': 'validationType'
        }

        self._destination_account_details = destination_account_details
        self._location = location
        self._validation_type = validation_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DataDestinationDetailsValidationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DataDestinationDetailsValidationRequest of this DataDestinationDetailsValidationRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def destination_account_details(self):
        """Gets the destination_account_details of this DataDestinationDetailsValidationRequest.

        Destination account details list.

        :return: The destination_account_details of this DataDestinationDetailsValidationRequest.
        :rtype: List[DestinationAccountDetails]
        """
        return self._destination_account_details

    @destination_account_details.setter
    def destination_account_details(self, destination_account_details):
        """Sets the destination_account_details of this DataDestinationDetailsValidationRequest.

        Destination account details list.

        :param destination_account_details: The destination_account_details of this DataDestinationDetailsValidationRequest.
        :type destination_account_details: List[DestinationAccountDetails]
        """
        if destination_account_details is None:
            raise ValueError("Invalid value for `destination_account_details`, must not be `None`")

        self._destination_account_details = destination_account_details

    @property
    def location(self):
        """Gets the location of this DataDestinationDetailsValidationRequest.

        Location of stamp or geo.

        :return: The location of this DataDestinationDetailsValidationRequest.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this DataDestinationDetailsValidationRequest.

        Location of stamp or geo.

        :param location: The location of this DataDestinationDetailsValidationRequest.
        :type location: str
        """
        if location is None:
            raise ValueError("Invalid value for `location`, must not be `None`")

        self._location = location

    @property
    def validation_type(self):
        """Gets the validation_type of this DataDestinationDetailsValidationRequest.

        Identifies the type of validation request.

        :return: The validation_type of this DataDestinationDetailsValidationRequest.
        :rtype: str
        """
        return self._validation_type

    @validation_type.setter
    def validation_type(self, validation_type):
        """Sets the validation_type of this DataDestinationDetailsValidationRequest.

        Identifies the type of validation request.

        :param validation_type: The validation_type of this DataDestinationDetailsValidationRequest.
        :type validation_type: str
        """
        allowed_values = ["ValidateAddress", "ValidateDataDestinationDetails", "ValidateSubscriptionIsAllowedToCreateJob", "ValidatePreferences", "ValidateCreateOrderLimit", "ValidateSkuAvailability"]  # noqa: E501
        if validation_type not in allowed_values:
            raise ValueError(
                "Invalid value for `validation_type` ({0}), must be one of {1}"
                .format(validation_type, allowed_values)
            )

        self._validation_type = validation_type
