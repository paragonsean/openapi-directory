# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.validation_input_request import ValidationInputRequest
from openapi_server import util


class CreateOrderLimitForSubscriptionValidationRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, device_type: str=None, validation_type: str=None):
        """CreateOrderLimitForSubscriptionValidationRequest - a model defined in OpenAPI

        :param device_type: The device_type of this CreateOrderLimitForSubscriptionValidationRequest.
        :param validation_type: The validation_type of this CreateOrderLimitForSubscriptionValidationRequest.
        """
        self.openapi_types = {
            'device_type': str,
            'validation_type': str
        }

        self.attribute_map = {
            'device_type': 'deviceType',
            'validation_type': 'validationType'
        }

        self._device_type = device_type
        self._validation_type = validation_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateOrderLimitForSubscriptionValidationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateOrderLimitForSubscriptionValidationRequest of this CreateOrderLimitForSubscriptionValidationRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def device_type(self):
        """Gets the device_type of this CreateOrderLimitForSubscriptionValidationRequest.

        Device type to be used for the job.

        :return: The device_type of this CreateOrderLimitForSubscriptionValidationRequest.
        :rtype: str
        """
        return self._device_type

    @device_type.setter
    def device_type(self, device_type):
        """Sets the device_type of this CreateOrderLimitForSubscriptionValidationRequest.

        Device type to be used for the job.

        :param device_type: The device_type of this CreateOrderLimitForSubscriptionValidationRequest.
        :type device_type: str
        """
        allowed_values = ["DataBox", "DataBoxDisk", "DataBoxHeavy"]  # noqa: E501
        if device_type not in allowed_values:
            raise ValueError(
                "Invalid value for `device_type` ({0}), must be one of {1}"
                .format(device_type, allowed_values)
            )

        self._device_type = device_type

    @property
    def validation_type(self):
        """Gets the validation_type of this CreateOrderLimitForSubscriptionValidationRequest.

        Identifies the type of validation request.

        :return: The validation_type of this CreateOrderLimitForSubscriptionValidationRequest.
        :rtype: str
        """
        return self._validation_type

    @validation_type.setter
    def validation_type(self, validation_type):
        """Sets the validation_type of this CreateOrderLimitForSubscriptionValidationRequest.

        Identifies the type of validation request.

        :param validation_type: The validation_type of this CreateOrderLimitForSubscriptionValidationRequest.
        :type validation_type: str
        """
        allowed_values = ["ValidateAddress", "ValidateDataDestinationDetails", "ValidateSubscriptionIsAllowedToCreateJob", "ValidatePreferences", "ValidateCreateOrderLimit", "ValidateSkuAvailability"]  # noqa: E501
        if validation_type not in allowed_values:
            raise ValueError(
                "Invalid value for `validation_type` ({0}), must be one of {1}"
                .format(validation_type, allowed_values)
            )

        self._validation_type = validation_type
