# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.job_properties import JobProperties
from openapi_server.models.sku import Sku
from openapi_server import util


class JobResource(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, name: str=None, properties: JobProperties=None, type: str=None, location: str=None, sku: Sku=None, tags: Dict[str, str]=None):
        """JobResource - a model defined in OpenAPI

        :param id: The id of this JobResource.
        :param name: The name of this JobResource.
        :param properties: The properties of this JobResource.
        :param type: The type of this JobResource.
        :param location: The location of this JobResource.
        :param sku: The sku of this JobResource.
        :param tags: The tags of this JobResource.
        """
        self.openapi_types = {
            'id': str,
            'name': str,
            'properties': JobProperties,
            'type': str,
            'location': str,
            'sku': Sku,
            'tags': Dict[str, str]
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'properties': 'properties',
            'type': 'type',
            'location': 'location',
            'sku': 'sku',
            'tags': 'tags'
        }

        self._id = id
        self._name = name
        self._properties = properties
        self._type = type
        self._location = location
        self._sku = sku
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JobResource':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JobResource of this JobResource.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this JobResource.

        Id of the object.

        :return: The id of this JobResource.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this JobResource.

        Id of the object.

        :param id: The id of this JobResource.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this JobResource.

        Name of the object.

        :return: The name of this JobResource.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this JobResource.

        Name of the object.

        :param name: The name of this JobResource.
        :type name: str
        """

        self._name = name

    @property
    def properties(self):
        """Gets the properties of this JobResource.


        :return: The properties of this JobResource.
        :rtype: JobProperties
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this JobResource.


        :param properties: The properties of this JobResource.
        :type properties: JobProperties
        """
        if properties is None:
            raise ValueError("Invalid value for `properties`, must not be `None`")

        self._properties = properties

    @property
    def type(self):
        """Gets the type of this JobResource.

        Type of the object.

        :return: The type of this JobResource.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this JobResource.

        Type of the object.

        :param type: The type of this JobResource.
        :type type: str
        """

        self._type = type

    @property
    def location(self):
        """Gets the location of this JobResource.

        The location of the resource. This will be one of the supported and registered Azure Regions (e.g. West US, East US, Southeast Asia, etc.). The region of a resource cannot be changed once it is created, but if an identical region is specified on update the request will succeed.

        :return: The location of this JobResource.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this JobResource.

        The location of the resource. This will be one of the supported and registered Azure Regions (e.g. West US, East US, Southeast Asia, etc.). The region of a resource cannot be changed once it is created, but if an identical region is specified on update the request will succeed.

        :param location: The location of this JobResource.
        :type location: str
        """
        if location is None:
            raise ValueError("Invalid value for `location`, must not be `None`")

        self._location = location

    @property
    def sku(self):
        """Gets the sku of this JobResource.


        :return: The sku of this JobResource.
        :rtype: Sku
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """Sets the sku of this JobResource.


        :param sku: The sku of this JobResource.
        :type sku: Sku
        """
        if sku is None:
            raise ValueError("Invalid value for `sku`, must not be `None`")

        self._sku = sku

    @property
    def tags(self):
        """Gets the tags of this JobResource.

        The list of key value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups).

        :return: The tags of this JobResource.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this JobResource.

        The list of key value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups).

        :param tags: The tags of this JobResource.
        :type tags: Dict[str, str]
        """

        self._tags = tags
