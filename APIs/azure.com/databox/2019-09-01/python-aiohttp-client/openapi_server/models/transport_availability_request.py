# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TransportAvailabilityRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, sku_name: str=None):
        """TransportAvailabilityRequest - a model defined in OpenAPI

        :param sku_name: The sku_name of this TransportAvailabilityRequest.
        """
        self.openapi_types = {
            'sku_name': str
        }

        self.attribute_map = {
            'sku_name': 'skuName'
        }

        self._sku_name = sku_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TransportAvailabilityRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TransportAvailabilityRequest of this TransportAvailabilityRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def sku_name(self):
        """Gets the sku_name of this TransportAvailabilityRequest.

        Type of the device.

        :return: The sku_name of this TransportAvailabilityRequest.
        :rtype: str
        """
        return self._sku_name

    @sku_name.setter
    def sku_name(self, sku_name):
        """Sets the sku_name of this TransportAvailabilityRequest.

        Type of the device.

        :param sku_name: The sku_name of this TransportAvailabilityRequest.
        :type sku_name: str
        """
        allowed_values = ["DataBox", "DataBoxDisk", "DataBoxHeavy"]  # noqa: E501
        if sku_name not in allowed_values:
            raise ValueError(
                "Invalid value for `sku_name` ({0}), must be one of {1}"
                .format(sku_name, allowed_values)
            )

        self._sku_name = sku_name
