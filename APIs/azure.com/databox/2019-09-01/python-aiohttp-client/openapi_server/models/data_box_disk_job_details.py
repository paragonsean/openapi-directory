# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.contact_details import ContactDetails
from openapi_server.models.copy_log_details import CopyLogDetails
from openapi_server.models.data_box_disk_copy_progress import DataBoxDiskCopyProgress
from openapi_server.models.destination_account_details import DestinationAccountDetails
from openapi_server.models.job_details import JobDetails
from openapi_server.models.job_error_details import JobErrorDetails
from openapi_server.models.job_stages import JobStages
from openapi_server.models.package_shipping_details import PackageShippingDetails
from openapi_server.models.preferences import Preferences
from openapi_server.models.shipping_address import ShippingAddress
from openapi_server import util


class DataBoxDiskJobDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, copy_progress: List[DataBoxDiskCopyProgress]=None, disks_and_size_details: Dict[str, int]=None, passkey: str=None, preferred_disks: Dict[str, int]=None, chain_of_custody_sas_key: str=None, contact_details: ContactDetails=None, copy_log_details: List[CopyLogDetails]=None, delivery_package: PackageShippingDetails=None, destination_account_details: List[DestinationAccountDetails]=None, error_details: List[JobErrorDetails]=None, expected_data_size_in_terabytes: int=None, job_details_type: str=None, job_stages: List[JobStages]=None, preferences: Preferences=None, return_package: PackageShippingDetails=None, reverse_shipment_label_sas_key: str=None, shipping_address: ShippingAddress=None):
        """DataBoxDiskJobDetails - a model defined in OpenAPI

        :param copy_progress: The copy_progress of this DataBoxDiskJobDetails.
        :param disks_and_size_details: The disks_and_size_details of this DataBoxDiskJobDetails.
        :param passkey: The passkey of this DataBoxDiskJobDetails.
        :param preferred_disks: The preferred_disks of this DataBoxDiskJobDetails.
        :param chain_of_custody_sas_key: The chain_of_custody_sas_key of this DataBoxDiskJobDetails.
        :param contact_details: The contact_details of this DataBoxDiskJobDetails.
        :param copy_log_details: The copy_log_details of this DataBoxDiskJobDetails.
        :param delivery_package: The delivery_package of this DataBoxDiskJobDetails.
        :param destination_account_details: The destination_account_details of this DataBoxDiskJobDetails.
        :param error_details: The error_details of this DataBoxDiskJobDetails.
        :param expected_data_size_in_terabytes: The expected_data_size_in_terabytes of this DataBoxDiskJobDetails.
        :param job_details_type: The job_details_type of this DataBoxDiskJobDetails.
        :param job_stages: The job_stages of this DataBoxDiskJobDetails.
        :param preferences: The preferences of this DataBoxDiskJobDetails.
        :param return_package: The return_package of this DataBoxDiskJobDetails.
        :param reverse_shipment_label_sas_key: The reverse_shipment_label_sas_key of this DataBoxDiskJobDetails.
        :param shipping_address: The shipping_address of this DataBoxDiskJobDetails.
        """
        self.openapi_types = {
            'copy_progress': List[DataBoxDiskCopyProgress],
            'disks_and_size_details': Dict[str, int],
            'passkey': str,
            'preferred_disks': Dict[str, int],
            'chain_of_custody_sas_key': str,
            'contact_details': ContactDetails,
            'copy_log_details': List[CopyLogDetails],
            'delivery_package': PackageShippingDetails,
            'destination_account_details': List[DestinationAccountDetails],
            'error_details': List[JobErrorDetails],
            'expected_data_size_in_terabytes': int,
            'job_details_type': str,
            'job_stages': List[JobStages],
            'preferences': Preferences,
            'return_package': PackageShippingDetails,
            'reverse_shipment_label_sas_key': str,
            'shipping_address': ShippingAddress
        }

        self.attribute_map = {
            'copy_progress': 'copyProgress',
            'disks_and_size_details': 'disksAndSizeDetails',
            'passkey': 'passkey',
            'preferred_disks': 'preferredDisks',
            'chain_of_custody_sas_key': 'chainOfCustodySasKey',
            'contact_details': 'contactDetails',
            'copy_log_details': 'copyLogDetails',
            'delivery_package': 'deliveryPackage',
            'destination_account_details': 'destinationAccountDetails',
            'error_details': 'errorDetails',
            'expected_data_size_in_terabytes': 'expectedDataSizeInTerabytes',
            'job_details_type': 'jobDetailsType',
            'job_stages': 'jobStages',
            'preferences': 'preferences',
            'return_package': 'returnPackage',
            'reverse_shipment_label_sas_key': 'reverseShipmentLabelSasKey',
            'shipping_address': 'shippingAddress'
        }

        self._copy_progress = copy_progress
        self._disks_and_size_details = disks_and_size_details
        self._passkey = passkey
        self._preferred_disks = preferred_disks
        self._chain_of_custody_sas_key = chain_of_custody_sas_key
        self._contact_details = contact_details
        self._copy_log_details = copy_log_details
        self._delivery_package = delivery_package
        self._destination_account_details = destination_account_details
        self._error_details = error_details
        self._expected_data_size_in_terabytes = expected_data_size_in_terabytes
        self._job_details_type = job_details_type
        self._job_stages = job_stages
        self._preferences = preferences
        self._return_package = return_package
        self._reverse_shipment_label_sas_key = reverse_shipment_label_sas_key
        self._shipping_address = shipping_address

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DataBoxDiskJobDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DataBoxDiskJobDetails of this DataBoxDiskJobDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def copy_progress(self):
        """Gets the copy_progress of this DataBoxDiskJobDetails.

        Copy progress per disk.

        :return: The copy_progress of this DataBoxDiskJobDetails.
        :rtype: List[DataBoxDiskCopyProgress]
        """
        return self._copy_progress

    @copy_progress.setter
    def copy_progress(self, copy_progress):
        """Sets the copy_progress of this DataBoxDiskJobDetails.

        Copy progress per disk.

        :param copy_progress: The copy_progress of this DataBoxDiskJobDetails.
        :type copy_progress: List[DataBoxDiskCopyProgress]
        """

        self._copy_progress = copy_progress

    @property
    def disks_and_size_details(self):
        """Gets the disks_and_size_details of this DataBoxDiskJobDetails.

        Contains the map of disk serial number to the disk size being used for the job. Is returned only after the disks are shipped to the customer.

        :return: The disks_and_size_details of this DataBoxDiskJobDetails.
        :rtype: Dict[str, int]
        """
        return self._disks_and_size_details

    @disks_and_size_details.setter
    def disks_and_size_details(self, disks_and_size_details):
        """Sets the disks_and_size_details of this DataBoxDiskJobDetails.

        Contains the map of disk serial number to the disk size being used for the job. Is returned only after the disks are shipped to the customer.

        :param disks_and_size_details: The disks_and_size_details of this DataBoxDiskJobDetails.
        :type disks_and_size_details: Dict[str, int]
        """

        self._disks_and_size_details = disks_and_size_details

    @property
    def passkey(self):
        """Gets the passkey of this DataBoxDiskJobDetails.

        User entered passkey for DataBox Disk job.

        :return: The passkey of this DataBoxDiskJobDetails.
        :rtype: str
        """
        return self._passkey

    @passkey.setter
    def passkey(self, passkey):
        """Sets the passkey of this DataBoxDiskJobDetails.

        User entered passkey for DataBox Disk job.

        :param passkey: The passkey of this DataBoxDiskJobDetails.
        :type passkey: str
        """

        self._passkey = passkey

    @property
    def preferred_disks(self):
        """Gets the preferred_disks of this DataBoxDiskJobDetails.

        User preference on what size disks are needed for the job. The map is from the disk size in TB to the count. Eg. {2,5} means 5 disks of 2 TB size. Key is string but will be checked against an int.

        :return: The preferred_disks of this DataBoxDiskJobDetails.
        :rtype: Dict[str, int]
        """
        return self._preferred_disks

    @preferred_disks.setter
    def preferred_disks(self, preferred_disks):
        """Sets the preferred_disks of this DataBoxDiskJobDetails.

        User preference on what size disks are needed for the job. The map is from the disk size in TB to the count. Eg. {2,5} means 5 disks of 2 TB size. Key is string but will be checked against an int.

        :param preferred_disks: The preferred_disks of this DataBoxDiskJobDetails.
        :type preferred_disks: Dict[str, int]
        """

        self._preferred_disks = preferred_disks

    @property
    def chain_of_custody_sas_key(self):
        """Gets the chain_of_custody_sas_key of this DataBoxDiskJobDetails.

        Shared access key to download the chain of custody logs

        :return: The chain_of_custody_sas_key of this DataBoxDiskJobDetails.
        :rtype: str
        """
        return self._chain_of_custody_sas_key

    @chain_of_custody_sas_key.setter
    def chain_of_custody_sas_key(self, chain_of_custody_sas_key):
        """Sets the chain_of_custody_sas_key of this DataBoxDiskJobDetails.

        Shared access key to download the chain of custody logs

        :param chain_of_custody_sas_key: The chain_of_custody_sas_key of this DataBoxDiskJobDetails.
        :type chain_of_custody_sas_key: str
        """

        self._chain_of_custody_sas_key = chain_of_custody_sas_key

    @property
    def contact_details(self):
        """Gets the contact_details of this DataBoxDiskJobDetails.


        :return: The contact_details of this DataBoxDiskJobDetails.
        :rtype: ContactDetails
        """
        return self._contact_details

    @contact_details.setter
    def contact_details(self, contact_details):
        """Sets the contact_details of this DataBoxDiskJobDetails.


        :param contact_details: The contact_details of this DataBoxDiskJobDetails.
        :type contact_details: ContactDetails
        """
        if contact_details is None:
            raise ValueError("Invalid value for `contact_details`, must not be `None`")

        self._contact_details = contact_details

    @property
    def copy_log_details(self):
        """Gets the copy_log_details of this DataBoxDiskJobDetails.

        List of copy log details.

        :return: The copy_log_details of this DataBoxDiskJobDetails.
        :rtype: List[CopyLogDetails]
        """
        return self._copy_log_details

    @copy_log_details.setter
    def copy_log_details(self, copy_log_details):
        """Sets the copy_log_details of this DataBoxDiskJobDetails.

        List of copy log details.

        :param copy_log_details: The copy_log_details of this DataBoxDiskJobDetails.
        :type copy_log_details: List[CopyLogDetails]
        """

        self._copy_log_details = copy_log_details

    @property
    def delivery_package(self):
        """Gets the delivery_package of this DataBoxDiskJobDetails.


        :return: The delivery_package of this DataBoxDiskJobDetails.
        :rtype: PackageShippingDetails
        """
        return self._delivery_package

    @delivery_package.setter
    def delivery_package(self, delivery_package):
        """Sets the delivery_package of this DataBoxDiskJobDetails.


        :param delivery_package: The delivery_package of this DataBoxDiskJobDetails.
        :type delivery_package: PackageShippingDetails
        """

        self._delivery_package = delivery_package

    @property
    def destination_account_details(self):
        """Gets the destination_account_details of this DataBoxDiskJobDetails.

        Destination account details.

        :return: The destination_account_details of this DataBoxDiskJobDetails.
        :rtype: List[DestinationAccountDetails]
        """
        return self._destination_account_details

    @destination_account_details.setter
    def destination_account_details(self, destination_account_details):
        """Sets the destination_account_details of this DataBoxDiskJobDetails.

        Destination account details.

        :param destination_account_details: The destination_account_details of this DataBoxDiskJobDetails.
        :type destination_account_details: List[DestinationAccountDetails]
        """
        if destination_account_details is None:
            raise ValueError("Invalid value for `destination_account_details`, must not be `None`")

        self._destination_account_details = destination_account_details

    @property
    def error_details(self):
        """Gets the error_details of this DataBoxDiskJobDetails.

        Error details for failure. This is optional.

        :return: The error_details of this DataBoxDiskJobDetails.
        :rtype: List[JobErrorDetails]
        """
        return self._error_details

    @error_details.setter
    def error_details(self, error_details):
        """Sets the error_details of this DataBoxDiskJobDetails.

        Error details for failure. This is optional.

        :param error_details: The error_details of this DataBoxDiskJobDetails.
        :type error_details: List[JobErrorDetails]
        """

        self._error_details = error_details

    @property
    def expected_data_size_in_terabytes(self):
        """Gets the expected_data_size_in_terabytes of this DataBoxDiskJobDetails.

        The expected size of the data, which needs to be transferred in this job, in terabytes.

        :return: The expected_data_size_in_terabytes of this DataBoxDiskJobDetails.
        :rtype: int
        """
        return self._expected_data_size_in_terabytes

    @expected_data_size_in_terabytes.setter
    def expected_data_size_in_terabytes(self, expected_data_size_in_terabytes):
        """Sets the expected_data_size_in_terabytes of this DataBoxDiskJobDetails.

        The expected size of the data, which needs to be transferred in this job, in terabytes.

        :param expected_data_size_in_terabytes: The expected_data_size_in_terabytes of this DataBoxDiskJobDetails.
        :type expected_data_size_in_terabytes: int
        """

        self._expected_data_size_in_terabytes = expected_data_size_in_terabytes

    @property
    def job_details_type(self):
        """Gets the job_details_type of this DataBoxDiskJobDetails.

        Indicates the type of job details.

        :return: The job_details_type of this DataBoxDiskJobDetails.
        :rtype: str
        """
        return self._job_details_type

    @job_details_type.setter
    def job_details_type(self, job_details_type):
        """Sets the job_details_type of this DataBoxDiskJobDetails.

        Indicates the type of job details.

        :param job_details_type: The job_details_type of this DataBoxDiskJobDetails.
        :type job_details_type: str
        """
        allowed_values = ["DataBox", "DataBoxDisk", "DataBoxHeavy"]  # noqa: E501
        if job_details_type not in allowed_values:
            raise ValueError(
                "Invalid value for `job_details_type` ({0}), must be one of {1}"
                .format(job_details_type, allowed_values)
            )

        self._job_details_type = job_details_type

    @property
    def job_stages(self):
        """Gets the job_stages of this DataBoxDiskJobDetails.

        List of stages that run in the job.

        :return: The job_stages of this DataBoxDiskJobDetails.
        :rtype: List[JobStages]
        """
        return self._job_stages

    @job_stages.setter
    def job_stages(self, job_stages):
        """Sets the job_stages of this DataBoxDiskJobDetails.

        List of stages that run in the job.

        :param job_stages: The job_stages of this DataBoxDiskJobDetails.
        :type job_stages: List[JobStages]
        """

        self._job_stages = job_stages

    @property
    def preferences(self):
        """Gets the preferences of this DataBoxDiskJobDetails.


        :return: The preferences of this DataBoxDiskJobDetails.
        :rtype: Preferences
        """
        return self._preferences

    @preferences.setter
    def preferences(self, preferences):
        """Sets the preferences of this DataBoxDiskJobDetails.


        :param preferences: The preferences of this DataBoxDiskJobDetails.
        :type preferences: Preferences
        """

        self._preferences = preferences

    @property
    def return_package(self):
        """Gets the return_package of this DataBoxDiskJobDetails.


        :return: The return_package of this DataBoxDiskJobDetails.
        :rtype: PackageShippingDetails
        """
        return self._return_package

    @return_package.setter
    def return_package(self, return_package):
        """Sets the return_package of this DataBoxDiskJobDetails.


        :param return_package: The return_package of this DataBoxDiskJobDetails.
        :type return_package: PackageShippingDetails
        """

        self._return_package = return_package

    @property
    def reverse_shipment_label_sas_key(self):
        """Gets the reverse_shipment_label_sas_key of this DataBoxDiskJobDetails.

        Shared access key to download the return shipment label

        :return: The reverse_shipment_label_sas_key of this DataBoxDiskJobDetails.
        :rtype: str
        """
        return self._reverse_shipment_label_sas_key

    @reverse_shipment_label_sas_key.setter
    def reverse_shipment_label_sas_key(self, reverse_shipment_label_sas_key):
        """Sets the reverse_shipment_label_sas_key of this DataBoxDiskJobDetails.

        Shared access key to download the return shipment label

        :param reverse_shipment_label_sas_key: The reverse_shipment_label_sas_key of this DataBoxDiskJobDetails.
        :type reverse_shipment_label_sas_key: str
        """

        self._reverse_shipment_label_sas_key = reverse_shipment_label_sas_key

    @property
    def shipping_address(self):
        """Gets the shipping_address of this DataBoxDiskJobDetails.


        :return: The shipping_address of this DataBoxDiskJobDetails.
        :rtype: ShippingAddress
        """
        return self._shipping_address

    @shipping_address.setter
    def shipping_address(self, shipping_address):
        """Sets the shipping_address of this DataBoxDiskJobDetails.


        :param shipping_address: The shipping_address of this DataBoxDiskJobDetails.
        :type shipping_address: ShippingAddress
        """
        if shipping_address is None:
            raise ValueError("Invalid value for `shipping_address`, must not be `None`")

        self._shipping_address = shipping_address
