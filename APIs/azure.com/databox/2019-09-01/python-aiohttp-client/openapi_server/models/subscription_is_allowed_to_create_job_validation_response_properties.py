# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.error import Error
from openapi_server.models.validation_input_response import ValidationInputResponse
from openapi_server import util


class SubscriptionIsAllowedToCreateJobValidationResponseProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, status: str=None, error: Error=None, validation_type: str=None):
        """SubscriptionIsAllowedToCreateJobValidationResponseProperties - a model defined in OpenAPI

        :param status: The status of this SubscriptionIsAllowedToCreateJobValidationResponseProperties.
        :param error: The error of this SubscriptionIsAllowedToCreateJobValidationResponseProperties.
        :param validation_type: The validation_type of this SubscriptionIsAllowedToCreateJobValidationResponseProperties.
        """
        self.openapi_types = {
            'status': str,
            'error': Error,
            'validation_type': str
        }

        self.attribute_map = {
            'status': 'status',
            'error': 'error',
            'validation_type': 'validationType'
        }

        self._status = status
        self._error = error
        self._validation_type = validation_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SubscriptionIsAllowedToCreateJobValidationResponseProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SubscriptionIsAllowedToCreateJobValidationResponseProperties of this SubscriptionIsAllowedToCreateJobValidationResponseProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def status(self):
        """Gets the status of this SubscriptionIsAllowedToCreateJobValidationResponseProperties.

        Validation status of subscription permission to create job.

        :return: The status of this SubscriptionIsAllowedToCreateJobValidationResponseProperties.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this SubscriptionIsAllowedToCreateJobValidationResponseProperties.

        Validation status of subscription permission to create job.

        :param status: The status of this SubscriptionIsAllowedToCreateJobValidationResponseProperties.
        :type status: str
        """
        allowed_values = ["Valid", "Invalid", "Skipped"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def error(self):
        """Gets the error of this SubscriptionIsAllowedToCreateJobValidationResponseProperties.


        :return: The error of this SubscriptionIsAllowedToCreateJobValidationResponseProperties.
        :rtype: Error
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this SubscriptionIsAllowedToCreateJobValidationResponseProperties.


        :param error: The error of this SubscriptionIsAllowedToCreateJobValidationResponseProperties.
        :type error: Error
        """

        self._error = error

    @property
    def validation_type(self):
        """Gets the validation_type of this SubscriptionIsAllowedToCreateJobValidationResponseProperties.

        Identifies the type of validation response.

        :return: The validation_type of this SubscriptionIsAllowedToCreateJobValidationResponseProperties.
        :rtype: str
        """
        return self._validation_type

    @validation_type.setter
    def validation_type(self, validation_type):
        """Sets the validation_type of this SubscriptionIsAllowedToCreateJobValidationResponseProperties.

        Identifies the type of validation response.

        :param validation_type: The validation_type of this SubscriptionIsAllowedToCreateJobValidationResponseProperties.
        :type validation_type: str
        """
        allowed_values = ["ValidateAddress", "ValidateDataDestinationDetails", "ValidateSubscriptionIsAllowedToCreateJob", "ValidatePreferences", "ValidateCreateOrderLimit", "ValidateSkuAvailability"]  # noqa: E501
        if validation_type not in allowed_values:
            raise ValueError(
                "Invalid value for `validation_type` ({0}), must be one of {1}"
                .format(validation_type, allowed_values)
            )

        self._validation_type = validation_type
