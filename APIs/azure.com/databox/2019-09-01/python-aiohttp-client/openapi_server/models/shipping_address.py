# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ShippingAddress(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address_type: str=None, city: str=None, company_name: str=None, country: str=None, postal_code: str=None, state_or_province: str=None, street_address1: str=None, street_address2: str=None, street_address3: str=None, zip_extended_code: str=None):
        """ShippingAddress - a model defined in OpenAPI

        :param address_type: The address_type of this ShippingAddress.
        :param city: The city of this ShippingAddress.
        :param company_name: The company_name of this ShippingAddress.
        :param country: The country of this ShippingAddress.
        :param postal_code: The postal_code of this ShippingAddress.
        :param state_or_province: The state_or_province of this ShippingAddress.
        :param street_address1: The street_address1 of this ShippingAddress.
        :param street_address2: The street_address2 of this ShippingAddress.
        :param street_address3: The street_address3 of this ShippingAddress.
        :param zip_extended_code: The zip_extended_code of this ShippingAddress.
        """
        self.openapi_types = {
            'address_type': str,
            'city': str,
            'company_name': str,
            'country': str,
            'postal_code': str,
            'state_or_province': str,
            'street_address1': str,
            'street_address2': str,
            'street_address3': str,
            'zip_extended_code': str
        }

        self.attribute_map = {
            'address_type': 'addressType',
            'city': 'city',
            'company_name': 'companyName',
            'country': 'country',
            'postal_code': 'postalCode',
            'state_or_province': 'stateOrProvince',
            'street_address1': 'streetAddress1',
            'street_address2': 'streetAddress2',
            'street_address3': 'streetAddress3',
            'zip_extended_code': 'zipExtendedCode'
        }

        self._address_type = address_type
        self._city = city
        self._company_name = company_name
        self._country = country
        self._postal_code = postal_code
        self._state_or_province = state_or_province
        self._street_address1 = street_address1
        self._street_address2 = street_address2
        self._street_address3 = street_address3
        self._zip_extended_code = zip_extended_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ShippingAddress':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ShippingAddress of this ShippingAddress.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address_type(self):
        """Gets the address_type of this ShippingAddress.

        Type of address.

        :return: The address_type of this ShippingAddress.
        :rtype: str
        """
        return self._address_type

    @address_type.setter
    def address_type(self, address_type):
        """Sets the address_type of this ShippingAddress.

        Type of address.

        :param address_type: The address_type of this ShippingAddress.
        :type address_type: str
        """
        allowed_values = ["None", "Residential", "Commercial"]  # noqa: E501
        if address_type not in allowed_values:
            raise ValueError(
                "Invalid value for `address_type` ({0}), must be one of {1}"
                .format(address_type, allowed_values)
            )

        self._address_type = address_type

    @property
    def city(self):
        """Gets the city of this ShippingAddress.

        Name of the City.

        :return: The city of this ShippingAddress.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this ShippingAddress.

        Name of the City.

        :param city: The city of this ShippingAddress.
        :type city: str
        """

        self._city = city

    @property
    def company_name(self):
        """Gets the company_name of this ShippingAddress.

        Name of the company.

        :return: The company_name of this ShippingAddress.
        :rtype: str
        """
        return self._company_name

    @company_name.setter
    def company_name(self, company_name):
        """Sets the company_name of this ShippingAddress.

        Name of the company.

        :param company_name: The company_name of this ShippingAddress.
        :type company_name: str
        """

        self._company_name = company_name

    @property
    def country(self):
        """Gets the country of this ShippingAddress.

        Name of the Country.

        :return: The country of this ShippingAddress.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this ShippingAddress.

        Name of the Country.

        :param country: The country of this ShippingAddress.
        :type country: str
        """
        if country is None:
            raise ValueError("Invalid value for `country`, must not be `None`")

        self._country = country

    @property
    def postal_code(self):
        """Gets the postal_code of this ShippingAddress.

        Postal code.

        :return: The postal_code of this ShippingAddress.
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this ShippingAddress.

        Postal code.

        :param postal_code: The postal_code of this ShippingAddress.
        :type postal_code: str
        """
        if postal_code is None:
            raise ValueError("Invalid value for `postal_code`, must not be `None`")

        self._postal_code = postal_code

    @property
    def state_or_province(self):
        """Gets the state_or_province of this ShippingAddress.

        Name of the State or Province.

        :return: The state_or_province of this ShippingAddress.
        :rtype: str
        """
        return self._state_or_province

    @state_or_province.setter
    def state_or_province(self, state_or_province):
        """Sets the state_or_province of this ShippingAddress.

        Name of the State or Province.

        :param state_or_province: The state_or_province of this ShippingAddress.
        :type state_or_province: str
        """

        self._state_or_province = state_or_province

    @property
    def street_address1(self):
        """Gets the street_address1 of this ShippingAddress.

        Street Address line 1.

        :return: The street_address1 of this ShippingAddress.
        :rtype: str
        """
        return self._street_address1

    @street_address1.setter
    def street_address1(self, street_address1):
        """Sets the street_address1 of this ShippingAddress.

        Street Address line 1.

        :param street_address1: The street_address1 of this ShippingAddress.
        :type street_address1: str
        """
        if street_address1 is None:
            raise ValueError("Invalid value for `street_address1`, must not be `None`")

        self._street_address1 = street_address1

    @property
    def street_address2(self):
        """Gets the street_address2 of this ShippingAddress.

        Street Address line 2.

        :return: The street_address2 of this ShippingAddress.
        :rtype: str
        """
        return self._street_address2

    @street_address2.setter
    def street_address2(self, street_address2):
        """Sets the street_address2 of this ShippingAddress.

        Street Address line 2.

        :param street_address2: The street_address2 of this ShippingAddress.
        :type street_address2: str
        """

        self._street_address2 = street_address2

    @property
    def street_address3(self):
        """Gets the street_address3 of this ShippingAddress.

        Street Address line 3.

        :return: The street_address3 of this ShippingAddress.
        :rtype: str
        """
        return self._street_address3

    @street_address3.setter
    def street_address3(self, street_address3):
        """Sets the street_address3 of this ShippingAddress.

        Street Address line 3.

        :param street_address3: The street_address3 of this ShippingAddress.
        :type street_address3: str
        """

        self._street_address3 = street_address3

    @property
    def zip_extended_code(self):
        """Gets the zip_extended_code of this ShippingAddress.

        Extended Zip Code.

        :return: The zip_extended_code of this ShippingAddress.
        :rtype: str
        """
        return self._zip_extended_code

    @zip_extended_code.setter
    def zip_extended_code(self, zip_extended_code):
        """Sets the zip_extended_code of this ShippingAddress.

        Extended Zip Code.

        :param zip_extended_code: The zip_extended_code of this ShippingAddress.
        :type zip_extended_code: str
        """

        self._zip_extended_code = zip_extended_code
