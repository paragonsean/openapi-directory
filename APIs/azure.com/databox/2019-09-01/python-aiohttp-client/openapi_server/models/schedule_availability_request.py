# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ScheduleAvailabilityRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, sku_name: str=None, storage_location: str=None):
        """ScheduleAvailabilityRequest - a model defined in OpenAPI

        :param sku_name: The sku_name of this ScheduleAvailabilityRequest.
        :param storage_location: The storage_location of this ScheduleAvailabilityRequest.
        """
        self.openapi_types = {
            'sku_name': str,
            'storage_location': str
        }

        self.attribute_map = {
            'sku_name': 'skuName',
            'storage_location': 'storageLocation'
        }

        self._sku_name = sku_name
        self._storage_location = storage_location

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ScheduleAvailabilityRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ScheduleAvailabilityRequest of this ScheduleAvailabilityRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def sku_name(self):
        """Gets the sku_name of this ScheduleAvailabilityRequest.

        Sku Name for which the order is to be scheduled.

        :return: The sku_name of this ScheduleAvailabilityRequest.
        :rtype: str
        """
        return self._sku_name

    @sku_name.setter
    def sku_name(self, sku_name):
        """Sets the sku_name of this ScheduleAvailabilityRequest.

        Sku Name for which the order is to be scheduled.

        :param sku_name: The sku_name of this ScheduleAvailabilityRequest.
        :type sku_name: str
        """
        allowed_values = ["DataBox", "DataBoxDisk", "DataBoxHeavy"]  # noqa: E501
        if sku_name not in allowed_values:
            raise ValueError(
                "Invalid value for `sku_name` ({0}), must be one of {1}"
                .format(sku_name, allowed_values)
            )

        self._sku_name = sku_name

    @property
    def storage_location(self):
        """Gets the storage_location of this ScheduleAvailabilityRequest.

        Location for data transfer.   For locations check: https://management.azure.com/subscriptions/SUBSCRIPTIONID/locations?api-version=2018-01-01

        :return: The storage_location of this ScheduleAvailabilityRequest.
        :rtype: str
        """
        return self._storage_location

    @storage_location.setter
    def storage_location(self, storage_location):
        """Sets the storage_location of this ScheduleAvailabilityRequest.

        Location for data transfer.   For locations check: https://management.azure.com/subscriptions/SUBSCRIPTIONID/locations?api-version=2018-01-01

        :param storage_location: The storage_location of this ScheduleAvailabilityRequest.
        :type storage_location: str
        """
        if storage_location is None:
            raise ValueError("Invalid value for `storage_location`, must not be `None`")

        self._storage_location = storage_location
