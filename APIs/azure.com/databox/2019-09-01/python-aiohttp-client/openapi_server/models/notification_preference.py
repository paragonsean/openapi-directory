# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NotificationPreference(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, send_notification: bool=None, stage_name: str=None):
        """NotificationPreference - a model defined in OpenAPI

        :param send_notification: The send_notification of this NotificationPreference.
        :param stage_name: The stage_name of this NotificationPreference.
        """
        self.openapi_types = {
            'send_notification': bool,
            'stage_name': str
        }

        self.attribute_map = {
            'send_notification': 'sendNotification',
            'stage_name': 'stageName'
        }

        self._send_notification = send_notification
        self._stage_name = stage_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NotificationPreference':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NotificationPreference of this NotificationPreference.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def send_notification(self):
        """Gets the send_notification of this NotificationPreference.

        Notification is required or not.

        :return: The send_notification of this NotificationPreference.
        :rtype: bool
        """
        return self._send_notification

    @send_notification.setter
    def send_notification(self, send_notification):
        """Sets the send_notification of this NotificationPreference.

        Notification is required or not.

        :param send_notification: The send_notification of this NotificationPreference.
        :type send_notification: bool
        """
        if send_notification is None:
            raise ValueError("Invalid value for `send_notification`, must not be `None`")

        self._send_notification = send_notification

    @property
    def stage_name(self):
        """Gets the stage_name of this NotificationPreference.

        Name of the stage.

        :return: The stage_name of this NotificationPreference.
        :rtype: str
        """
        return self._stage_name

    @stage_name.setter
    def stage_name(self, stage_name):
        """Sets the stage_name of this NotificationPreference.

        Name of the stage.

        :param stage_name: The stage_name of this NotificationPreference.
        :type stage_name: str
        """
        allowed_values = ["DevicePrepared", "Dispatched", "Delivered", "PickedUp", "AtAzureDC", "DataCopy"]  # noqa: E501
        if stage_name not in allowed_values:
            raise ValueError(
                "Invalid value for `stage_name` ({0}), must be one of {1}"
                .format(stage_name, allowed_values)
            )

        self._stage_name = stage_name
