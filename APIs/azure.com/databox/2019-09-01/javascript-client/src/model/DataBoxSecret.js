/**
 * DataBoxManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-09-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AccountCredentialDetails from './AccountCredentialDetails';
import ApplianceNetworkConfiguration from './ApplianceNetworkConfiguration';

/**
 * The DataBoxSecret model module.
 * @module model/DataBoxSecret
 * @version 2019-09-01
 */
class DataBoxSecret {
    /**
     * Constructs a new <code>DataBoxSecret</code>.
     * The secrets related to a DataBox.
     * @alias module:model/DataBoxSecret
     */
    constructor() { 
        
        DataBoxSecret.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DataBoxSecret</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DataBoxSecret} obj Optional instance to populate.
     * @return {module:model/DataBoxSecret} The populated <code>DataBoxSecret</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DataBoxSecret();

            if (data.hasOwnProperty('accountCredentialDetails')) {
                obj['accountCredentialDetails'] = ApiClient.convertToType(data['accountCredentialDetails'], [AccountCredentialDetails]);
            }
            if (data.hasOwnProperty('devicePassword')) {
                obj['devicePassword'] = ApiClient.convertToType(data['devicePassword'], 'String');
            }
            if (data.hasOwnProperty('deviceSerialNumber')) {
                obj['deviceSerialNumber'] = ApiClient.convertToType(data['deviceSerialNumber'], 'String');
            }
            if (data.hasOwnProperty('encodedValidationCertPubKey')) {
                obj['encodedValidationCertPubKey'] = ApiClient.convertToType(data['encodedValidationCertPubKey'], 'String');
            }
            if (data.hasOwnProperty('networkConfigurations')) {
                obj['networkConfigurations'] = ApiClient.convertToType(data['networkConfigurations'], [ApplianceNetworkConfiguration]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DataBoxSecret</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DataBoxSecret</code>.
     */
    static validateJSON(data) {
        if (data['accountCredentialDetails']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['accountCredentialDetails'])) {
                throw new Error("Expected the field `accountCredentialDetails` to be an array in the JSON data but got " + data['accountCredentialDetails']);
            }
            // validate the optional field `accountCredentialDetails` (array)
            for (const item of data['accountCredentialDetails']) {
                AccountCredentialDetails.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['devicePassword'] && !(typeof data['devicePassword'] === 'string' || data['devicePassword'] instanceof String)) {
            throw new Error("Expected the field `devicePassword` to be a primitive type in the JSON string but got " + data['devicePassword']);
        }
        // ensure the json data is a string
        if (data['deviceSerialNumber'] && !(typeof data['deviceSerialNumber'] === 'string' || data['deviceSerialNumber'] instanceof String)) {
            throw new Error("Expected the field `deviceSerialNumber` to be a primitive type in the JSON string but got " + data['deviceSerialNumber']);
        }
        // ensure the json data is a string
        if (data['encodedValidationCertPubKey'] && !(typeof data['encodedValidationCertPubKey'] === 'string' || data['encodedValidationCertPubKey'] instanceof String)) {
            throw new Error("Expected the field `encodedValidationCertPubKey` to be a primitive type in the JSON string but got " + data['encodedValidationCertPubKey']);
        }
        if (data['networkConfigurations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['networkConfigurations'])) {
                throw new Error("Expected the field `networkConfigurations` to be an array in the JSON data but got " + data['networkConfigurations']);
            }
            // validate the optional field `networkConfigurations` (array)
            for (const item of data['networkConfigurations']) {
                ApplianceNetworkConfiguration.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Per account level access credentials.
 * @member {Array.<module:model/AccountCredentialDetails>} accountCredentialDetails
 */
DataBoxSecret.prototype['accountCredentialDetails'] = undefined;

/**
 * Password for out of the box experience on device.
 * @member {String} devicePassword
 */
DataBoxSecret.prototype['devicePassword'] = undefined;

/**
 * Serial number of the assigned device.
 * @member {String} deviceSerialNumber
 */
DataBoxSecret.prototype['deviceSerialNumber'] = undefined;

/**
 * The base 64 encoded public key to authenticate with the device
 * @member {String} encodedValidationCertPubKey
 */
DataBoxSecret.prototype['encodedValidationCertPubKey'] = undefined;

/**
 * Network configuration of the appliance.
 * @member {Array.<module:model/ApplianceNetworkConfiguration>} networkConfigurations
 */
DataBoxSecret.prototype['networkConfigurations'] = undefined;






export default DataBoxSecret;

