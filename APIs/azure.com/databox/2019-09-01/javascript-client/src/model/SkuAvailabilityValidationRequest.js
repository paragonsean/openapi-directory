/**
 * DataBoxManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-09-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ValidationInputRequest from './ValidationInputRequest';

/**
 * The SkuAvailabilityValidationRequest model module.
 * @module model/SkuAvailabilityValidationRequest
 * @version 2019-09-01
 */
class SkuAvailabilityValidationRequest {
    /**
     * Constructs a new <code>SkuAvailabilityValidationRequest</code>.
     * Request to validate sku availability.
     * @alias module:model/SkuAvailabilityValidationRequest
     * @extends module:model/ValidationInputRequest
     * @implements module:model/ValidationInputRequest
     * @param validationType {module:model/SkuAvailabilityValidationRequest.ValidationTypeEnum} Identifies the type of validation request.
     */
    constructor(validationType) { 
        ValidationInputRequest.initialize(this, validationType);
        SkuAvailabilityValidationRequest.initialize(this, validationType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, validationType) { 
        obj['country'] = country;
        obj['deviceType'] = deviceType;
        obj['location'] = location;
        obj['transferType'] = transferType;
    }

    /**
     * Constructs a <code>SkuAvailabilityValidationRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SkuAvailabilityValidationRequest} obj Optional instance to populate.
     * @return {module:model/SkuAvailabilityValidationRequest} The populated <code>SkuAvailabilityValidationRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SkuAvailabilityValidationRequest();
            ValidationInputRequest.constructFromObject(data, obj);
            ValidationInputRequest.constructFromObject(data, obj);

            if (data.hasOwnProperty('country')) {
                obj['country'] = ApiClient.convertToType(data['country'], 'String');
            }
            if (data.hasOwnProperty('deviceType')) {
                obj['deviceType'] = ApiClient.convertToType(data['deviceType'], 'String');
            }
            if (data.hasOwnProperty('location')) {
                obj['location'] = ApiClient.convertToType(data['location'], 'String');
            }
            if (data.hasOwnProperty('transferType')) {
                obj['transferType'] = ApiClient.convertToType(data['transferType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SkuAvailabilityValidationRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SkuAvailabilityValidationRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SkuAvailabilityValidationRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['country'] && !(typeof data['country'] === 'string' || data['country'] instanceof String)) {
            throw new Error("Expected the field `country` to be a primitive type in the JSON string but got " + data['country']);
        }
        // ensure the json data is a string
        if (data['deviceType'] && !(typeof data['deviceType'] === 'string' || data['deviceType'] instanceof String)) {
            throw new Error("Expected the field `deviceType` to be a primitive type in the JSON string but got " + data['deviceType']);
        }
        // ensure the json data is a string
        if (data['location'] && !(typeof data['location'] === 'string' || data['location'] instanceof String)) {
            throw new Error("Expected the field `location` to be a primitive type in the JSON string but got " + data['location']);
        }
        // ensure the json data is a string
        if (data['transferType'] && !(typeof data['transferType'] === 'string' || data['transferType'] instanceof String)) {
            throw new Error("Expected the field `transferType` to be a primitive type in the JSON string but got " + data['transferType']);
        }

        return true;
    }


}

SkuAvailabilityValidationRequest.RequiredProperties = ["country", "deviceType", "location", "transferType", "validationType"];

/**
 * ISO country code. Country for hardware shipment. For codes check: https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#Officially_assigned_code_elements
 * @member {String} country
 */
SkuAvailabilityValidationRequest.prototype['country'] = undefined;

/**
 * Device type to be used for the job.
 * @member {module:model/SkuAvailabilityValidationRequest.DeviceTypeEnum} deviceType
 */
SkuAvailabilityValidationRequest.prototype['deviceType'] = undefined;

/**
 * Location for data transfer. For locations check: https://management.azure.com/subscriptions/SUBSCRIPTIONID/locations?api-version=2018-01-01
 * @member {String} location
 */
SkuAvailabilityValidationRequest.prototype['location'] = undefined;

/**
 * Type of the transfer.
 * @member {module:model/SkuAvailabilityValidationRequest.TransferTypeEnum} transferType
 */
SkuAvailabilityValidationRequest.prototype['transferType'] = undefined;


// Implement ValidationInputRequest interface:
/**
 * Identifies the type of validation request.
 * @member {module:model/ValidationInputRequest.ValidationTypeEnum} validationType
 */
ValidationInputRequest.prototype['validationType'] = undefined;



/**
 * Allowed values for the <code>deviceType</code> property.
 * @enum {String}
 * @readonly
 */
SkuAvailabilityValidationRequest['DeviceTypeEnum'] = {

    /**
     * value: "DataBox"
     * @const
     */
    "DataBox": "DataBox",

    /**
     * value: "DataBoxDisk"
     * @const
     */
    "DataBoxDisk": "DataBoxDisk",

    /**
     * value: "DataBoxHeavy"
     * @const
     */
    "DataBoxHeavy": "DataBoxHeavy"
};


/**
 * Allowed values for the <code>transferType</code> property.
 * @enum {String}
 * @readonly
 */
SkuAvailabilityValidationRequest['TransferTypeEnum'] = {

    /**
     * value: "ImportToAzure"
     * @const
     */
    "ImportToAzure": "ImportToAzure"
};



export default SkuAvailabilityValidationRequest;

