/**
 * DataBoxManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-09-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AddressValidationOutput from '../model/AddressValidationOutput';
import AvailableSkuRequest from '../model/AvailableSkuRequest';
import AvailableSkusResult from '../model/AvailableSkusResult';
import CloudError from '../model/CloudError';
import RegionConfigurationRequest from '../model/RegionConfigurationRequest';
import RegionConfigurationResponse from '../model/RegionConfigurationResponse';
import ValidateAddress from '../model/ValidateAddress';
import ValidationRequest from '../model/ValidationRequest';
import ValidationResponse from '../model/ValidationResponse';

/**
* Service service.
* @module api/ServiceApi
* @version 2019-09-01
*/
export default class ServiceApi {

    /**
    * Constructs a new ServiceApi. 
    * @alias module:api/ServiceApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the serviceListAvailableSkus operation.
     * @callback module:api/ServiceApi~serviceListAvailableSkusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AvailableSkusResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method provides the list of available skus for the given subscription and location.
     * @param {String} subscriptionId The Subscription Id
     * @param {String} location The location of the resource
     * @param {String} apiVersion The API Version
     * @param {module:model/AvailableSkuRequest} availableSkuRequest Filters for showing the available skus.
     * @param {module:api/ServiceApi~serviceListAvailableSkusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AvailableSkusResult}
     */
    serviceListAvailableSkus(subscriptionId, location, apiVersion, availableSkuRequest, callback) {
      let postBody = availableSkuRequest;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling serviceListAvailableSkus");
      }
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling serviceListAvailableSkus");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling serviceListAvailableSkus");
      }
      // verify the required parameter 'availableSkuRequest' is set
      if (availableSkuRequest === undefined || availableSkuRequest === null) {
        throw new Error("Missing the required parameter 'availableSkuRequest' when calling serviceListAvailableSkus");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'location': location
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AvailableSkusResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.DataBox/locations/{location}/availableSkus', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the serviceListAvailableSkusByResourceGroup operation.
     * @callback module:api/ServiceApi~serviceListAvailableSkusByResourceGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AvailableSkusResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method provides the list of available skus for the given subscription, resource group and location.
     * @param {String} subscriptionId The Subscription Id
     * @param {String} resourceGroupName The Resource Group Name
     * @param {String} location The location of the resource
     * @param {String} apiVersion The API Version
     * @param {module:model/AvailableSkuRequest} availableSkuRequest Filters for showing the available skus.
     * @param {module:api/ServiceApi~serviceListAvailableSkusByResourceGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AvailableSkusResult}
     */
    serviceListAvailableSkusByResourceGroup(subscriptionId, resourceGroupName, location, apiVersion, availableSkuRequest, callback) {
      let postBody = availableSkuRequest;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling serviceListAvailableSkusByResourceGroup");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling serviceListAvailableSkusByResourceGroup");
      }
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling serviceListAvailableSkusByResourceGroup");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling serviceListAvailableSkusByResourceGroup");
      }
      // verify the required parameter 'availableSkuRequest' is set
      if (availableSkuRequest === undefined || availableSkuRequest === null) {
        throw new Error("Missing the required parameter 'availableSkuRequest' when calling serviceListAvailableSkusByResourceGroup");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'location': location
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AvailableSkusResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBox/locations/{location}/availableSkus', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the serviceRegionConfiguration operation.
     * @callback module:api/ServiceApi~serviceRegionConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RegionConfigurationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This API provides configuration details specific to given region/location.
     * @param {String} subscriptionId The Subscription Id
     * @param {String} location The location of the resource
     * @param {String} apiVersion The API Version
     * @param {module:model/RegionConfigurationRequest} regionConfigurationRequest Request body to get the configuration for the region.
     * @param {module:api/ServiceApi~serviceRegionConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RegionConfigurationResponse}
     */
    serviceRegionConfiguration(subscriptionId, location, apiVersion, regionConfigurationRequest, callback) {
      let postBody = regionConfigurationRequest;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling serviceRegionConfiguration");
      }
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling serviceRegionConfiguration");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling serviceRegionConfiguration");
      }
      // verify the required parameter 'regionConfigurationRequest' is set
      if (regionConfigurationRequest === undefined || regionConfigurationRequest === null) {
        throw new Error("Missing the required parameter 'regionConfigurationRequest' when calling serviceRegionConfiguration");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'location': location
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RegionConfigurationResponse;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.DataBox/locations/{location}/regionConfiguration', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the serviceValidateAddress operation.
     * @callback module:api/ServiceApi~serviceValidateAddressCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AddressValidationOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [DEPRECATED NOTICE: This operation will soon be removed] This method validates the customer shipping address and provide alternate addresses if any.
     * @param {String} subscriptionId The Subscription Id
     * @param {String} location The location of the resource
     * @param {String} apiVersion The API Version
     * @param {module:model/ValidateAddress} validateAddress Shipping address of the customer.
     * @param {module:api/ServiceApi~serviceValidateAddressCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AddressValidationOutput}
     */
    serviceValidateAddress(subscriptionId, location, apiVersion, validateAddress, callback) {
      let postBody = validateAddress;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling serviceValidateAddress");
      }
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling serviceValidateAddress");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling serviceValidateAddress");
      }
      // verify the required parameter 'validateAddress' is set
      if (validateAddress === undefined || validateAddress === null) {
        throw new Error("Missing the required parameter 'validateAddress' when calling serviceValidateAddress");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'location': location
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AddressValidationOutput;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.DataBox/locations/{location}/validateAddress', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the serviceValidateInputs operation.
     * @callback module:api/ServiceApi~serviceValidateInputsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ValidationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method does all necessary pre-job creation validation under subscription.
     * @param {String} subscriptionId The Subscription Id
     * @param {String} location The location of the resource
     * @param {String} apiVersion The API Version
     * @param {module:model/ValidationRequest} validationRequest Inputs of the customer.
     * @param {module:api/ServiceApi~serviceValidateInputsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ValidationResponse}
     */
    serviceValidateInputs(subscriptionId, location, apiVersion, validationRequest, callback) {
      let postBody = validationRequest;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling serviceValidateInputs");
      }
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling serviceValidateInputs");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling serviceValidateInputs");
      }
      // verify the required parameter 'validationRequest' is set
      if (validationRequest === undefined || validationRequest === null) {
        throw new Error("Missing the required parameter 'validationRequest' when calling serviceValidateInputs");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'location': location
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ValidationResponse;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.DataBox/locations/{location}/validateInputs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the serviceValidateInputsByResourceGroup operation.
     * @callback module:api/ServiceApi~serviceValidateInputsByResourceGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ValidationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method does all necessary pre-job creation validation under resource group.
     * @param {String} subscriptionId The Subscription Id
     * @param {String} resourceGroupName The Resource Group Name
     * @param {String} location The location of the resource
     * @param {String} apiVersion The API Version
     * @param {module:model/ValidationRequest} validationRequest Inputs of the customer.
     * @param {module:api/ServiceApi~serviceValidateInputsByResourceGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ValidationResponse}
     */
    serviceValidateInputsByResourceGroup(subscriptionId, resourceGroupName, location, apiVersion, validationRequest, callback) {
      let postBody = validationRequest;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling serviceValidateInputsByResourceGroup");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling serviceValidateInputsByResourceGroup");
      }
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling serviceValidateInputsByResourceGroup");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling serviceValidateInputsByResourceGroup");
      }
      // verify the required parameter 'validationRequest' is set
      if (validationRequest === undefined || validationRequest === null) {
        throw new Error("Missing the required parameter 'validationRequest' when calling serviceValidateInputsByResourceGroup");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'location': location
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ValidationResponse;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBox/locations/{location}/validateInputs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
