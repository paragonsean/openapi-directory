/**
 * ManagementLinkClient
 * Azure resources can be linked together to form logical relationships. You can establish links between resources belonging to different resource groups. However, all the linked resources must belong to the same subscription. Each resource can be linked to 50 other resources. If any of the linked resources are deleted or moved, the link owner must clean up the remaining link.
 *
 * The version of the OpenAPI document: 2016-09-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResourceLinkFilter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResourceLinkFilter::OAIResourceLinkFilter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResourceLinkFilter::OAIResourceLinkFilter() {
    this->initializeModel();
}

OAIResourceLinkFilter::~OAIResourceLinkFilter() {}

void OAIResourceLinkFilter::initializeModel() {

    m_target_id_isSet = false;
    m_target_id_isValid = false;
}

void OAIResourceLinkFilter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResourceLinkFilter::fromJsonObject(QJsonObject json) {

    m_target_id_isValid = ::OpenAPI::fromJsonValue(m_target_id, json[QString("targetId")]);
    m_target_id_isSet = !json[QString("targetId")].isNull() && m_target_id_isValid;
}

QString OAIResourceLinkFilter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResourceLinkFilter::asJsonObject() const {
    QJsonObject obj;
    if (m_target_id_isSet) {
        obj.insert(QString("targetId"), ::OpenAPI::toJsonValue(m_target_id));
    }
    return obj;
}

QString OAIResourceLinkFilter::getTargetId() const {
    return m_target_id;
}
void OAIResourceLinkFilter::setTargetId(const QString &target_id) {
    m_target_id = target_id;
    m_target_id_isSet = true;
}

bool OAIResourceLinkFilter::is_target_id_Set() const{
    return m_target_id_isSet;
}

bool OAIResourceLinkFilter::is_target_id_Valid() const{
    return m_target_id_isValid;
}

bool OAIResourceLinkFilter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_target_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResourceLinkFilter::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_target_id_isValid && true;
}

} // namespace OpenAPI
