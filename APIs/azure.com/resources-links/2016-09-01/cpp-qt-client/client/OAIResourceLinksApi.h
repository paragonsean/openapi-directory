/**
 * ManagementLinkClient
 * Azure resources can be linked together to form logical relationships. You can establish links between resources belonging to different resource groups. However, all the linked resources must belong to the same subscription. Each resource can be linked to 50 other resources. If any of the linked resources are deleted or moved, the link owner must clean up the remaining link.
 *
 * The version of the OpenAPI document: 2016-09-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIResourceLinksApi_H
#define OAI_OAIResourceLinksApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIResourceLink.h"
#include "OAIResourceLinkResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIResourceLinksApi : public QObject {
    Q_OBJECT

public:
    OAIResourceLinksApi(const int timeOut = 0);
    ~OAIResourceLinksApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  link_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAIResourceLink [required]
    */
    virtual void resourceLinksCreateOrUpdate(const QString &link_id, const QString &api_version, const OAIResourceLink &parameters);

    /**
    * @param[in]  link_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void resourceLinksDelete(const QString &link_id, const QString &api_version);

    /**
    * @param[in]  link_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void resourceLinksGet(const QString &link_id, const QString &api_version);

    /**
    * @param[in]  scope QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [optional]
    */
    virtual void resourceLinksListAtSourceScope(const QString &scope, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  filter QString [optional]
    */
    virtual void resourceLinksListAtSubscription(const QString &api_version, const QString &subscription_id, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void resourceLinksCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void resourceLinksDeleteCallback(OAIHttpRequestWorker *worker);
    void resourceLinksGetCallback(OAIHttpRequestWorker *worker);
    void resourceLinksListAtSourceScopeCallback(OAIHttpRequestWorker *worker);
    void resourceLinksListAtSubscriptionCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void resourceLinksCreateOrUpdateSignal(OAIResourceLink summary);
    void resourceLinksDeleteSignal();
    void resourceLinksGetSignal(OAIResourceLink summary);
    void resourceLinksListAtSourceScopeSignal(OAIResourceLinkResult summary);
    void resourceLinksListAtSubscriptionSignal(OAIResourceLinkResult summary);


    void resourceLinksCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIResourceLink summary);
    void resourceLinksDeleteSignalFull(OAIHttpRequestWorker *worker);
    void resourceLinksGetSignalFull(OAIHttpRequestWorker *worker, OAIResourceLink summary);
    void resourceLinksListAtSourceScopeSignalFull(OAIHttpRequestWorker *worker, OAIResourceLinkResult summary);
    void resourceLinksListAtSubscriptionSignalFull(OAIHttpRequestWorker *worker, OAIResourceLinkResult summary);

    Q_DECL_DEPRECATED_X("Use resourceLinksCreateOrUpdateSignalError() instead")
    void resourceLinksCreateOrUpdateSignalE(OAIResourceLink summary, QNetworkReply::NetworkError error_type, QString error_str);
    void resourceLinksCreateOrUpdateSignalError(OAIResourceLink summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resourceLinksDeleteSignalError() instead")
    void resourceLinksDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void resourceLinksDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resourceLinksGetSignalError() instead")
    void resourceLinksGetSignalE(OAIResourceLink summary, QNetworkReply::NetworkError error_type, QString error_str);
    void resourceLinksGetSignalError(OAIResourceLink summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resourceLinksListAtSourceScopeSignalError() instead")
    void resourceLinksListAtSourceScopeSignalE(OAIResourceLinkResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void resourceLinksListAtSourceScopeSignalError(OAIResourceLinkResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resourceLinksListAtSubscriptionSignalError() instead")
    void resourceLinksListAtSubscriptionSignalE(OAIResourceLinkResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void resourceLinksListAtSubscriptionSignalError(OAIResourceLinkResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use resourceLinksCreateOrUpdateSignalErrorFull() instead")
    void resourceLinksCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void resourceLinksCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resourceLinksDeleteSignalErrorFull() instead")
    void resourceLinksDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void resourceLinksDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resourceLinksGetSignalErrorFull() instead")
    void resourceLinksGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void resourceLinksGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resourceLinksListAtSourceScopeSignalErrorFull() instead")
    void resourceLinksListAtSourceScopeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void resourceLinksListAtSourceScopeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resourceLinksListAtSubscriptionSignalErrorFull() instead")
    void resourceLinksListAtSubscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void resourceLinksListAtSubscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
