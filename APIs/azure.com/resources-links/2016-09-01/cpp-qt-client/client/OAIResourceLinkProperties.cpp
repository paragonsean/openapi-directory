/**
 * ManagementLinkClient
 * Azure resources can be linked together to form logical relationships. You can establish links between resources belonging to different resource groups. However, all the linked resources must belong to the same subscription. Each resource can be linked to 50 other resources. If any of the linked resources are deleted or moved, the link owner must clean up the remaining link.
 *
 * The version of the OpenAPI document: 2016-09-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResourceLinkProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResourceLinkProperties::OAIResourceLinkProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResourceLinkProperties::OAIResourceLinkProperties() {
    this->initializeModel();
}

OAIResourceLinkProperties::~OAIResourceLinkProperties() {}

void OAIResourceLinkProperties::initializeModel() {

    m_notes_isSet = false;
    m_notes_isValid = false;

    m_source_id_isSet = false;
    m_source_id_isValid = false;

    m_target_id_isSet = false;
    m_target_id_isValid = false;
}

void OAIResourceLinkProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResourceLinkProperties::fromJsonObject(QJsonObject json) {

    m_notes_isValid = ::OpenAPI::fromJsonValue(m_notes, json[QString("notes")]);
    m_notes_isSet = !json[QString("notes")].isNull() && m_notes_isValid;

    m_source_id_isValid = ::OpenAPI::fromJsonValue(m_source_id, json[QString("sourceId")]);
    m_source_id_isSet = !json[QString("sourceId")].isNull() && m_source_id_isValid;

    m_target_id_isValid = ::OpenAPI::fromJsonValue(m_target_id, json[QString("targetId")]);
    m_target_id_isSet = !json[QString("targetId")].isNull() && m_target_id_isValid;
}

QString OAIResourceLinkProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResourceLinkProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_notes_isSet) {
        obj.insert(QString("notes"), ::OpenAPI::toJsonValue(m_notes));
    }
    if (m_source_id_isSet) {
        obj.insert(QString("sourceId"), ::OpenAPI::toJsonValue(m_source_id));
    }
    if (m_target_id_isSet) {
        obj.insert(QString("targetId"), ::OpenAPI::toJsonValue(m_target_id));
    }
    return obj;
}

QString OAIResourceLinkProperties::getNotes() const {
    return m_notes;
}
void OAIResourceLinkProperties::setNotes(const QString &notes) {
    m_notes = notes;
    m_notes_isSet = true;
}

bool OAIResourceLinkProperties::is_notes_Set() const{
    return m_notes_isSet;
}

bool OAIResourceLinkProperties::is_notes_Valid() const{
    return m_notes_isValid;
}

QString OAIResourceLinkProperties::getSourceId() const {
    return m_source_id;
}
void OAIResourceLinkProperties::setSourceId(const QString &source_id) {
    m_source_id = source_id;
    m_source_id_isSet = true;
}

bool OAIResourceLinkProperties::is_source_id_Set() const{
    return m_source_id_isSet;
}

bool OAIResourceLinkProperties::is_source_id_Valid() const{
    return m_source_id_isValid;
}

QString OAIResourceLinkProperties::getTargetId() const {
    return m_target_id;
}
void OAIResourceLinkProperties::setTargetId(const QString &target_id) {
    m_target_id = target_id;
    m_target_id_isSet = true;
}

bool OAIResourceLinkProperties::is_target_id_Set() const{
    return m_target_id_isSet;
}

bool OAIResourceLinkProperties::is_target_id_Valid() const{
    return m_target_id_isValid;
}

bool OAIResourceLinkProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_notes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResourceLinkProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_target_id_isValid && true;
}

} // namespace OpenAPI
