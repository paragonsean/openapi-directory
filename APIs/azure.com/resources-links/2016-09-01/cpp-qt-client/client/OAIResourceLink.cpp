/**
 * ManagementLinkClient
 * Azure resources can be linked together to form logical relationships. You can establish links between resources belonging to different resource groups. However, all the linked resources must belong to the same subscription. Each resource can be linked to 50 other resources. If any of the linked resources are deleted or moved, the link owner must clean up the remaining link.
 *
 * The version of the OpenAPI document: 2016-09-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResourceLink.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResourceLink::OAIResourceLink(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResourceLink::OAIResourceLink() {
    this->initializeModel();
}

OAIResourceLink::~OAIResourceLink() {}

void OAIResourceLink::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_properties_isSet = false;
    m_properties_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIResourceLink::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResourceLink::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_properties_isValid = ::OpenAPI::fromJsonValue(m_properties, json[QString("properties")]);
    m_properties_isSet = !json[QString("properties")].isNull() && m_properties_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIResourceLink::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResourceLink::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_properties.isSet()) {
        obj.insert(QString("properties"), ::OpenAPI::toJsonValue(m_properties));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIResourceLink::getId() const {
    return m_id;
}
void OAIResourceLink::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIResourceLink::is_id_Set() const{
    return m_id_isSet;
}

bool OAIResourceLink::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIResourceLink::getName() const {
    return m_name;
}
void OAIResourceLink::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIResourceLink::is_name_Set() const{
    return m_name_isSet;
}

bool OAIResourceLink::is_name_Valid() const{
    return m_name_isValid;
}

OAIResourceLinkProperties OAIResourceLink::getProperties() const {
    return m_properties;
}
void OAIResourceLink::setProperties(const OAIResourceLinkProperties &properties) {
    m_properties = properties;
    m_properties_isSet = true;
}

bool OAIResourceLink::is_properties_Set() const{
    return m_properties_isSet;
}

bool OAIResourceLink::is_properties_Valid() const{
    return m_properties_isValid;
}

OAIObject OAIResourceLink::getType() const {
    return m_type;
}
void OAIResourceLink::setType(const OAIObject &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIResourceLink::is_type_Set() const{
    return m_type_isSet;
}

bool OAIResourceLink::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIResourceLink::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResourceLink::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
