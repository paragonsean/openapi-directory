/**
 * ManagementLinkClient
 * Azure resources can be linked together to form logical relationships. You can establish links between resources belonging to different resource groups. However, all the linked resources must belong to the same subscription. Each resource can be linked to 50 other resources. If any of the linked resources are deleted or moved, the link owner must clean up the remaining link.
 *
 * The version of the OpenAPI document: 2016-09-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import Operation from './model/Operation';
import OperationDisplay from './model/OperationDisplay';
import OperationListResult from './model/OperationListResult';
import ResourceLink from './model/ResourceLink';
import ResourceLinkFilter from './model/ResourceLinkFilter';
import ResourceLinkProperties from './model/ResourceLinkProperties';
import ResourceLinkResult from './model/ResourceLinkResult';
import OperationsApi from './api/OperationsApi';
import ResourceLinksApi from './api/ResourceLinksApi';


/**
* Azure resources can be linked together to form logical relationships. You can establish links between resources belonging to different resource groups. However, all the linked resources must belong to the same subscription. Each resource can be linked to 50 other resources. If any of the linked resources are deleted or moved, the link owner must clean up the remaining link..<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var ManagementLinkClient = require('index'); // See note below*.
* var xxxSvc = new ManagementLinkClient.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new ManagementLinkClient.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new ManagementLinkClient.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new ManagementLinkClient.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 2016-09-01
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The Operation model constructor.
     * @property {module:model/Operation}
     */
    Operation,

    /**
     * The OperationDisplay model constructor.
     * @property {module:model/OperationDisplay}
     */
    OperationDisplay,

    /**
     * The OperationListResult model constructor.
     * @property {module:model/OperationListResult}
     */
    OperationListResult,

    /**
     * The ResourceLink model constructor.
     * @property {module:model/ResourceLink}
     */
    ResourceLink,

    /**
     * The ResourceLinkFilter model constructor.
     * @property {module:model/ResourceLinkFilter}
     */
    ResourceLinkFilter,

    /**
     * The ResourceLinkProperties model constructor.
     * @property {module:model/ResourceLinkProperties}
     */
    ResourceLinkProperties,

    /**
     * The ResourceLinkResult model constructor.
     * @property {module:model/ResourceLinkResult}
     */
    ResourceLinkResult,

    /**
    * The OperationsApi service constructor.
    * @property {module:api/OperationsApi}
    */
    OperationsApi,

    /**
    * The ResourceLinksApi service constructor.
    * @property {module:api/ResourceLinksApi}
    */
    ResourceLinksApi
};
