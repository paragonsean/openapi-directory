/**
 * ManagementLinkClient
 * Azure resources can be linked together to form logical relationships. You can establish links between resources belonging to different resource groups. However, all the linked resources must belong to the same subscription. Each resource can be linked to 50 other resources. If any of the linked resources are deleted or moved, the link owner must clean up the remaining link.
 *
 * The version of the OpenAPI document: 2016-09-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ResourceLinkProperties from './ResourceLinkProperties';

/**
 * The ResourceLink model module.
 * @module model/ResourceLink
 * @version 2016-09-01
 */
class ResourceLink {
    /**
     * Constructs a new <code>ResourceLink</code>.
     * The resource link.
     * @alias module:model/ResourceLink
     */
    constructor() { 
        
        ResourceLink.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ResourceLink</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ResourceLink} obj Optional instance to populate.
     * @return {module:model/ResourceLink} The populated <code>ResourceLink</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ResourceLink();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('properties')) {
                obj['properties'] = ResourceLinkProperties.constructFromObject(data['properties']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], Object);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ResourceLink</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ResourceLink</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `properties`
        if (data['properties']) { // data not null
          ResourceLinkProperties.validateJSON(data['properties']);
        }

        return true;
    }


}



/**
 * The fully qualified ID of the resource link.
 * @member {String} id
 */
ResourceLink.prototype['id'] = undefined;

/**
 * The name of the resource link.
 * @member {String} name
 */
ResourceLink.prototype['name'] = undefined;

/**
 * @member {module:model/ResourceLinkProperties} properties
 */
ResourceLink.prototype['properties'] = undefined;

/**
 * The resource link object.
 * @member {Object} type
 */
ResourceLink.prototype['type'] = undefined;






export default ResourceLink;

