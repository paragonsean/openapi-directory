# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ResourceLinkFilter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, target_id: str=None):
        """ResourceLinkFilter - a model defined in OpenAPI

        :param target_id: The target_id of this ResourceLinkFilter.
        """
        self.openapi_types = {
            'target_id': str
        }

        self.attribute_map = {
            'target_id': 'targetId'
        }

        self._target_id = target_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ResourceLinkFilter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ResourceLinkFilter of this ResourceLinkFilter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def target_id(self):
        """Gets the target_id of this ResourceLinkFilter.

        The ID of the target resource.

        :return: The target_id of this ResourceLinkFilter.
        :rtype: str
        """
        return self._target_id

    @target_id.setter
    def target_id(self, target_id):
        """Sets the target_id of this ResourceLinkFilter.

        The ID of the target resource.

        :param target_id: The target_id of this ResourceLinkFilter.
        :type target_id: str
        """
        if target_id is None:
            raise ValueError("Invalid value for `target_id`, must not be `None`")

        self._target_id = target_id
