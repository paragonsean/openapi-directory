/*
 * ManagementLinkClient
 * Azure resources can be linked together to form logical relationships. You can establish links between resources belonging to different resource groups. However, all the linked resources must belong to the same subscription. Each resource can be linked to 50 other resources. If any of the linked resources are deleted or moved, the link owner must clean up the remaining link.
 *
 * The version of the OpenAPI document: 2016-09-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ResourceLink;
import org.openapitools.client.model.ResourceLinkResult;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ResourceLinksApi
 */
@Disabled
public class ResourceLinksApiTest {

    private final ResourceLinksApi api = new ResourceLinksApi();

    /**
     * Creates or updates a resource link between the specified resources.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resourceLinksCreateOrUpdateTest() throws ApiException {
        String linkId = null;
        String apiVersion = null;
        ResourceLink parameters = null;
        ResourceLink response = api.resourceLinksCreateOrUpdate(linkId, apiVersion, parameters);
        // TODO: test validations
    }

    /**
     * Deletes a resource link with the specified ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resourceLinksDeleteTest() throws ApiException {
        String linkId = null;
        String apiVersion = null;
        api.resourceLinksDelete(linkId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets a resource link with the specified ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resourceLinksGetTest() throws ApiException {
        String linkId = null;
        String apiVersion = null;
        ResourceLink response = api.resourceLinksGet(linkId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets a list of resource links at and below the specified source scope.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resourceLinksListAtSourceScopeTest() throws ApiException {
        String scope = null;
        String apiVersion = null;
        String $filter = null;
        ResourceLinkResult response = api.resourceLinksListAtSourceScope(scope, apiVersion, $filter);
        // TODO: test validations
    }

    /**
     * Gets all the linked resources for the subscription.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resourceLinksListAtSubscriptionTest() throws ApiException {
        String apiVersion = null;
        String subscriptionId = null;
        String $filter = null;
        ResourceLinkResult response = api.resourceLinksListAtSubscription(apiVersion, subscriptionId, $filter);
        // TODO: test validations
    }

}
