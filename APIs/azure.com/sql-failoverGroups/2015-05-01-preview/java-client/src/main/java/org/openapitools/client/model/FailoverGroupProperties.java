/*
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2015-05-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.FailoverGroupReadOnlyEndpoint;
import org.openapitools.client.model.FailoverGroupReadWriteEndpoint;
import org.openapitools.client.model.PartnerInfo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties of a failover group.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:48:36.122351-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FailoverGroupProperties {
  public static final String SERIALIZED_NAME_DATABASES = "databases";
  @SerializedName(SERIALIZED_NAME_DATABASES)
  private List<String> databases = new ArrayList<>();

  public static final String SERIALIZED_NAME_PARTNER_SERVERS = "partnerServers";
  @SerializedName(SERIALIZED_NAME_PARTNER_SERVERS)
  private List<PartnerInfo> partnerServers = new ArrayList<>();

  public static final String SERIALIZED_NAME_READ_ONLY_ENDPOINT = "readOnlyEndpoint";
  @SerializedName(SERIALIZED_NAME_READ_ONLY_ENDPOINT)
  private FailoverGroupReadOnlyEndpoint readOnlyEndpoint;

  public static final String SERIALIZED_NAME_READ_WRITE_ENDPOINT = "readWriteEndpoint";
  @SerializedName(SERIALIZED_NAME_READ_WRITE_ENDPOINT)
  private FailoverGroupReadWriteEndpoint readWriteEndpoint;

  /**
   * Local replication role of the failover group instance.
   */
  @JsonAdapter(ReplicationRoleEnum.Adapter.class)
  public enum ReplicationRoleEnum {
    PRIMARY("Primary"),
    
    SECONDARY("Secondary");

    private String value;

    ReplicationRoleEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ReplicationRoleEnum fromValue(String value) {
      for (ReplicationRoleEnum b : ReplicationRoleEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ReplicationRoleEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ReplicationRoleEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ReplicationRoleEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ReplicationRoleEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ReplicationRoleEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_REPLICATION_ROLE = "replicationRole";
  @SerializedName(SERIALIZED_NAME_REPLICATION_ROLE)
  private ReplicationRoleEnum replicationRole;

  public static final String SERIALIZED_NAME_REPLICATION_STATE = "replicationState";
  @SerializedName(SERIALIZED_NAME_REPLICATION_STATE)
  private String replicationState;

  public FailoverGroupProperties() {
  }

  public FailoverGroupProperties(
     ReplicationRoleEnum replicationRole, 
     String replicationState
  ) {
    this();
    this.replicationRole = replicationRole;
    this.replicationState = replicationState;
  }

  public FailoverGroupProperties databases(List<String> databases) {
    this.databases = databases;
    return this;
  }

  public FailoverGroupProperties addDatabasesItem(String databasesItem) {
    if (this.databases == null) {
      this.databases = new ArrayList<>();
    }
    this.databases.add(databasesItem);
    return this;
  }

  /**
   * List of databases in the failover group.
   * @return databases
   */
  @javax.annotation.Nullable
  public List<String> getDatabases() {
    return databases;
  }

  public void setDatabases(List<String> databases) {
    this.databases = databases;
  }


  public FailoverGroupProperties partnerServers(List<PartnerInfo> partnerServers) {
    this.partnerServers = partnerServers;
    return this;
  }

  public FailoverGroupProperties addPartnerServersItem(PartnerInfo partnerServersItem) {
    if (this.partnerServers == null) {
      this.partnerServers = new ArrayList<>();
    }
    this.partnerServers.add(partnerServersItem);
    return this;
  }

  /**
   * List of partner server information for the failover group.
   * @return partnerServers
   */
  @javax.annotation.Nonnull
  public List<PartnerInfo> getPartnerServers() {
    return partnerServers;
  }

  public void setPartnerServers(List<PartnerInfo> partnerServers) {
    this.partnerServers = partnerServers;
  }


  public FailoverGroupProperties readOnlyEndpoint(FailoverGroupReadOnlyEndpoint readOnlyEndpoint) {
    this.readOnlyEndpoint = readOnlyEndpoint;
    return this;
  }

  /**
   * Get readOnlyEndpoint
   * @return readOnlyEndpoint
   */
  @javax.annotation.Nullable
  public FailoverGroupReadOnlyEndpoint getReadOnlyEndpoint() {
    return readOnlyEndpoint;
  }

  public void setReadOnlyEndpoint(FailoverGroupReadOnlyEndpoint readOnlyEndpoint) {
    this.readOnlyEndpoint = readOnlyEndpoint;
  }


  public FailoverGroupProperties readWriteEndpoint(FailoverGroupReadWriteEndpoint readWriteEndpoint) {
    this.readWriteEndpoint = readWriteEndpoint;
    return this;
  }

  /**
   * Get readWriteEndpoint
   * @return readWriteEndpoint
   */
  @javax.annotation.Nonnull
  public FailoverGroupReadWriteEndpoint getReadWriteEndpoint() {
    return readWriteEndpoint;
  }

  public void setReadWriteEndpoint(FailoverGroupReadWriteEndpoint readWriteEndpoint) {
    this.readWriteEndpoint = readWriteEndpoint;
  }


  /**
   * Local replication role of the failover group instance.
   * @return replicationRole
   */
  @javax.annotation.Nullable
  public ReplicationRoleEnum getReplicationRole() {
    return replicationRole;
  }



  /**
   * Replication state of the failover group instance.
   * @return replicationState
   */
  @javax.annotation.Nullable
  public String getReplicationState() {
    return replicationState;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FailoverGroupProperties failoverGroupProperties = (FailoverGroupProperties) o;
    return Objects.equals(this.databases, failoverGroupProperties.databases) &&
        Objects.equals(this.partnerServers, failoverGroupProperties.partnerServers) &&
        Objects.equals(this.readOnlyEndpoint, failoverGroupProperties.readOnlyEndpoint) &&
        Objects.equals(this.readWriteEndpoint, failoverGroupProperties.readWriteEndpoint) &&
        Objects.equals(this.replicationRole, failoverGroupProperties.replicationRole) &&
        Objects.equals(this.replicationState, failoverGroupProperties.replicationState);
  }

  @Override
  public int hashCode() {
    return Objects.hash(databases, partnerServers, readOnlyEndpoint, readWriteEndpoint, replicationRole, replicationState);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FailoverGroupProperties {\n");
    sb.append("    databases: ").append(toIndentedString(databases)).append("\n");
    sb.append("    partnerServers: ").append(toIndentedString(partnerServers)).append("\n");
    sb.append("    readOnlyEndpoint: ").append(toIndentedString(readOnlyEndpoint)).append("\n");
    sb.append("    readWriteEndpoint: ").append(toIndentedString(readWriteEndpoint)).append("\n");
    sb.append("    replicationRole: ").append(toIndentedString(replicationRole)).append("\n");
    sb.append("    replicationState: ").append(toIndentedString(replicationState)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("databases");
    openapiFields.add("partnerServers");
    openapiFields.add("readOnlyEndpoint");
    openapiFields.add("readWriteEndpoint");
    openapiFields.add("replicationRole");
    openapiFields.add("replicationState");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("partnerServers");
    openapiRequiredFields.add("readWriteEndpoint");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FailoverGroupProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FailoverGroupProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FailoverGroupProperties is not found in the empty JSON string", FailoverGroupProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FailoverGroupProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FailoverGroupProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : FailoverGroupProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("databases") != null && !jsonObj.get("databases").isJsonNull() && !jsonObj.get("databases").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `databases` to be an array in the JSON string but got `%s`", jsonObj.get("databases").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("partnerServers").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `partnerServers` to be an array in the JSON string but got `%s`", jsonObj.get("partnerServers").toString()));
      }

      JsonArray jsonArraypartnerServers = jsonObj.getAsJsonArray("partnerServers");
      // validate the required field `partnerServers` (array)
      for (int i = 0; i < jsonArraypartnerServers.size(); i++) {
        PartnerInfo.validateJsonElement(jsonArraypartnerServers.get(i));
      };
      // validate the optional field `readOnlyEndpoint`
      if (jsonObj.get("readOnlyEndpoint") != null && !jsonObj.get("readOnlyEndpoint").isJsonNull()) {
        FailoverGroupReadOnlyEndpoint.validateJsonElement(jsonObj.get("readOnlyEndpoint"));
      }
      // validate the required field `readWriteEndpoint`
      FailoverGroupReadWriteEndpoint.validateJsonElement(jsonObj.get("readWriteEndpoint"));
      if ((jsonObj.get("replicationRole") != null && !jsonObj.get("replicationRole").isJsonNull()) && !jsonObj.get("replicationRole").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `replicationRole` to be a primitive type in the JSON string but got `%s`", jsonObj.get("replicationRole").toString()));
      }
      // validate the optional field `replicationRole`
      if (jsonObj.get("replicationRole") != null && !jsonObj.get("replicationRole").isJsonNull()) {
        ReplicationRoleEnum.validateJsonElement(jsonObj.get("replicationRole"));
      }
      if ((jsonObj.get("replicationState") != null && !jsonObj.get("replicationState").isJsonNull()) && !jsonObj.get("replicationState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `replicationState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("replicationState").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FailoverGroupProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FailoverGroupProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FailoverGroupProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FailoverGroupProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<FailoverGroupProperties>() {
           @Override
           public void write(JsonWriter out, FailoverGroupProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FailoverGroupProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FailoverGroupProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FailoverGroupProperties
   * @throws IOException if the JSON string is invalid with respect to FailoverGroupProperties
   */
  public static FailoverGroupProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FailoverGroupProperties.class);
  }

  /**
   * Convert an instance of FailoverGroupProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

