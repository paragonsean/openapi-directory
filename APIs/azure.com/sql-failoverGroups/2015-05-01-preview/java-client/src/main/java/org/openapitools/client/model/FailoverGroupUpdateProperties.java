/*
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2015-05-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.FailoverGroupReadOnlyEndpoint;
import org.openapitools.client.model.FailoverGroupReadWriteEndpoint;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties of a failover group update.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:48:36.122351-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FailoverGroupUpdateProperties {
  public static final String SERIALIZED_NAME_DATABASES = "databases";
  @SerializedName(SERIALIZED_NAME_DATABASES)
  private List<String> databases = new ArrayList<>();

  public static final String SERIALIZED_NAME_READ_ONLY_ENDPOINT = "readOnlyEndpoint";
  @SerializedName(SERIALIZED_NAME_READ_ONLY_ENDPOINT)
  private FailoverGroupReadOnlyEndpoint readOnlyEndpoint;

  public static final String SERIALIZED_NAME_READ_WRITE_ENDPOINT = "readWriteEndpoint";
  @SerializedName(SERIALIZED_NAME_READ_WRITE_ENDPOINT)
  private FailoverGroupReadWriteEndpoint readWriteEndpoint;

  public FailoverGroupUpdateProperties() {
  }

  public FailoverGroupUpdateProperties databases(List<String> databases) {
    this.databases = databases;
    return this;
  }

  public FailoverGroupUpdateProperties addDatabasesItem(String databasesItem) {
    if (this.databases == null) {
      this.databases = new ArrayList<>();
    }
    this.databases.add(databasesItem);
    return this;
  }

  /**
   * List of databases in the failover group.
   * @return databases
   */
  @javax.annotation.Nullable
  public List<String> getDatabases() {
    return databases;
  }

  public void setDatabases(List<String> databases) {
    this.databases = databases;
  }


  public FailoverGroupUpdateProperties readOnlyEndpoint(FailoverGroupReadOnlyEndpoint readOnlyEndpoint) {
    this.readOnlyEndpoint = readOnlyEndpoint;
    return this;
  }

  /**
   * Get readOnlyEndpoint
   * @return readOnlyEndpoint
   */
  @javax.annotation.Nullable
  public FailoverGroupReadOnlyEndpoint getReadOnlyEndpoint() {
    return readOnlyEndpoint;
  }

  public void setReadOnlyEndpoint(FailoverGroupReadOnlyEndpoint readOnlyEndpoint) {
    this.readOnlyEndpoint = readOnlyEndpoint;
  }


  public FailoverGroupUpdateProperties readWriteEndpoint(FailoverGroupReadWriteEndpoint readWriteEndpoint) {
    this.readWriteEndpoint = readWriteEndpoint;
    return this;
  }

  /**
   * Get readWriteEndpoint
   * @return readWriteEndpoint
   */
  @javax.annotation.Nullable
  public FailoverGroupReadWriteEndpoint getReadWriteEndpoint() {
    return readWriteEndpoint;
  }

  public void setReadWriteEndpoint(FailoverGroupReadWriteEndpoint readWriteEndpoint) {
    this.readWriteEndpoint = readWriteEndpoint;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FailoverGroupUpdateProperties failoverGroupUpdateProperties = (FailoverGroupUpdateProperties) o;
    return Objects.equals(this.databases, failoverGroupUpdateProperties.databases) &&
        Objects.equals(this.readOnlyEndpoint, failoverGroupUpdateProperties.readOnlyEndpoint) &&
        Objects.equals(this.readWriteEndpoint, failoverGroupUpdateProperties.readWriteEndpoint);
  }

  @Override
  public int hashCode() {
    return Objects.hash(databases, readOnlyEndpoint, readWriteEndpoint);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FailoverGroupUpdateProperties {\n");
    sb.append("    databases: ").append(toIndentedString(databases)).append("\n");
    sb.append("    readOnlyEndpoint: ").append(toIndentedString(readOnlyEndpoint)).append("\n");
    sb.append("    readWriteEndpoint: ").append(toIndentedString(readWriteEndpoint)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("databases");
    openapiFields.add("readOnlyEndpoint");
    openapiFields.add("readWriteEndpoint");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FailoverGroupUpdateProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FailoverGroupUpdateProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FailoverGroupUpdateProperties is not found in the empty JSON string", FailoverGroupUpdateProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FailoverGroupUpdateProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FailoverGroupUpdateProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("databases") != null && !jsonObj.get("databases").isJsonNull() && !jsonObj.get("databases").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `databases` to be an array in the JSON string but got `%s`", jsonObj.get("databases").toString()));
      }
      // validate the optional field `readOnlyEndpoint`
      if (jsonObj.get("readOnlyEndpoint") != null && !jsonObj.get("readOnlyEndpoint").isJsonNull()) {
        FailoverGroupReadOnlyEndpoint.validateJsonElement(jsonObj.get("readOnlyEndpoint"));
      }
      // validate the optional field `readWriteEndpoint`
      if (jsonObj.get("readWriteEndpoint") != null && !jsonObj.get("readWriteEndpoint").isJsonNull()) {
        FailoverGroupReadWriteEndpoint.validateJsonElement(jsonObj.get("readWriteEndpoint"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FailoverGroupUpdateProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FailoverGroupUpdateProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FailoverGroupUpdateProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FailoverGroupUpdateProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<FailoverGroupUpdateProperties>() {
           @Override
           public void write(JsonWriter out, FailoverGroupUpdateProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FailoverGroupUpdateProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FailoverGroupUpdateProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FailoverGroupUpdateProperties
   * @throws IOException if the JSON string is invalid with respect to FailoverGroupUpdateProperties
   */
  public static FailoverGroupUpdateProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FailoverGroupUpdateProperties.class);
  }

  /**
   * Convert an instance of FailoverGroupUpdateProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

