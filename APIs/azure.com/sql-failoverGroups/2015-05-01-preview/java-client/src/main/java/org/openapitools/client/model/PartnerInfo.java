/*
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2015-05-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Partner server information for the failover group.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:48:36.122351-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PartnerInfo {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private String location;

  /**
   * Replication role of the partner server.
   */
  @JsonAdapter(ReplicationRoleEnum.Adapter.class)
  public enum ReplicationRoleEnum {
    PRIMARY("Primary"),
    
    SECONDARY("Secondary");

    private String value;

    ReplicationRoleEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ReplicationRoleEnum fromValue(String value) {
      for (ReplicationRoleEnum b : ReplicationRoleEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ReplicationRoleEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ReplicationRoleEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ReplicationRoleEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ReplicationRoleEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ReplicationRoleEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_REPLICATION_ROLE = "replicationRole";
  @SerializedName(SERIALIZED_NAME_REPLICATION_ROLE)
  private ReplicationRoleEnum replicationRole;

  public PartnerInfo() {
  }

  public PartnerInfo(
     String location, 
     ReplicationRoleEnum replicationRole
  ) {
    this();
    this.location = location;
    this.replicationRole = replicationRole;
  }

  public PartnerInfo id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Resource identifier of the partner server.
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  /**
   * Geo location of the partner server.
   * @return location
   */
  @javax.annotation.Nullable
  public String getLocation() {
    return location;
  }



  /**
   * Replication role of the partner server.
   * @return replicationRole
   */
  @javax.annotation.Nullable
  public ReplicationRoleEnum getReplicationRole() {
    return replicationRole;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PartnerInfo partnerInfo = (PartnerInfo) o;
    return Objects.equals(this.id, partnerInfo.id) &&
        Objects.equals(this.location, partnerInfo.location) &&
        Objects.equals(this.replicationRole, partnerInfo.replicationRole);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, location, replicationRole);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PartnerInfo {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    replicationRole: ").append(toIndentedString(replicationRole)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("location");
    openapiFields.add("replicationRole");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PartnerInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PartnerInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PartnerInfo is not found in the empty JSON string", PartnerInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PartnerInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PartnerInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PartnerInfo.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("location") != null && !jsonObj.get("location").isJsonNull()) && !jsonObj.get("location").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `location` to be a primitive type in the JSON string but got `%s`", jsonObj.get("location").toString()));
      }
      if ((jsonObj.get("replicationRole") != null && !jsonObj.get("replicationRole").isJsonNull()) && !jsonObj.get("replicationRole").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `replicationRole` to be a primitive type in the JSON string but got `%s`", jsonObj.get("replicationRole").toString()));
      }
      // validate the optional field `replicationRole`
      if (jsonObj.get("replicationRole") != null && !jsonObj.get("replicationRole").isJsonNull()) {
        ReplicationRoleEnum.validateJsonElement(jsonObj.get("replicationRole"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PartnerInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PartnerInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PartnerInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PartnerInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<PartnerInfo>() {
           @Override
           public void write(JsonWriter out, PartnerInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PartnerInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PartnerInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PartnerInfo
   * @throws IOException if the JSON string is invalid with respect to PartnerInfo
   */
  public static PartnerInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PartnerInfo.class);
  }

  /**
   * Convert an instance of PartnerInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

