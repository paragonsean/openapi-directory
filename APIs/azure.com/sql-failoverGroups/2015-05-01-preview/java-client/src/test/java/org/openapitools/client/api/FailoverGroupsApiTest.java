/*
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2015-05-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.FailoverGroup;
import org.openapitools.client.model.FailoverGroupListResult;
import org.openapitools.client.model.FailoverGroupUpdate;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for FailoverGroupsApi
 */
@Disabled
public class FailoverGroupsApiTest {

    private final FailoverGroupsApi api = new FailoverGroupsApi();

    /**
     * Creates or updates a failover group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void failoverGroupsCreateOrUpdateTest() throws ApiException {
        String resourceGroupName = null;
        String serverName = null;
        String failoverGroupName = null;
        String subscriptionId = null;
        String apiVersion = null;
        FailoverGroup parameters = null;
        FailoverGroup response = api.failoverGroupsCreateOrUpdate(resourceGroupName, serverName, failoverGroupName, subscriptionId, apiVersion, parameters);
        // TODO: test validations
    }

    /**
     * Deletes a failover group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void failoverGroupsDeleteTest() throws ApiException {
        String resourceGroupName = null;
        String serverName = null;
        String failoverGroupName = null;
        String subscriptionId = null;
        String apiVersion = null;
        api.failoverGroupsDelete(resourceGroupName, serverName, failoverGroupName, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Fails over from the current primary server to this server.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void failoverGroupsFailoverTest() throws ApiException {
        String resourceGroupName = null;
        String serverName = null;
        String failoverGroupName = null;
        String subscriptionId = null;
        String apiVersion = null;
        FailoverGroup response = api.failoverGroupsFailover(resourceGroupName, serverName, failoverGroupName, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Fails over from the current primary server to this server. This operation might result in data loss.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void failoverGroupsForceFailoverAllowDataLossTest() throws ApiException {
        String resourceGroupName = null;
        String serverName = null;
        String failoverGroupName = null;
        String subscriptionId = null;
        String apiVersion = null;
        FailoverGroup response = api.failoverGroupsForceFailoverAllowDataLoss(resourceGroupName, serverName, failoverGroupName, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets a failover group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void failoverGroupsGetTest() throws ApiException {
        String resourceGroupName = null;
        String serverName = null;
        String failoverGroupName = null;
        String subscriptionId = null;
        String apiVersion = null;
        FailoverGroup response = api.failoverGroupsGet(resourceGroupName, serverName, failoverGroupName, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Lists the failover groups in a server.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void failoverGroupsListByServerTest() throws ApiException {
        String resourceGroupName = null;
        String serverName = null;
        String subscriptionId = null;
        String apiVersion = null;
        FailoverGroupListResult response = api.failoverGroupsListByServer(resourceGroupName, serverName, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Updates a failover group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void failoverGroupsUpdateTest() throws ApiException {
        String resourceGroupName = null;
        String serverName = null;
        String failoverGroupName = null;
        String subscriptionId = null;
        String apiVersion = null;
        FailoverGroupUpdate parameters = null;
        FailoverGroup response = api.failoverGroupsUpdate(resourceGroupName, serverName, failoverGroupName, subscriptionId, apiVersion, parameters);
        // TODO: test validations
    }

}
