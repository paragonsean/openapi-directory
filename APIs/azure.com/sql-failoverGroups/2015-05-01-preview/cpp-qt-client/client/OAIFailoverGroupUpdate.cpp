/**
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2015-05-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFailoverGroupUpdate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFailoverGroupUpdate::OAIFailoverGroupUpdate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFailoverGroupUpdate::OAIFailoverGroupUpdate() {
    this->initializeModel();
}

OAIFailoverGroupUpdate::~OAIFailoverGroupUpdate() {}

void OAIFailoverGroupUpdate::initializeModel() {

    m_properties_isSet = false;
    m_properties_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIFailoverGroupUpdate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFailoverGroupUpdate::fromJsonObject(QJsonObject json) {

    m_properties_isValid = ::OpenAPI::fromJsonValue(m_properties, json[QString("properties")]);
    m_properties_isSet = !json[QString("properties")].isNull() && m_properties_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAIFailoverGroupUpdate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFailoverGroupUpdate::asJsonObject() const {
    QJsonObject obj;
    if (m_properties.isSet()) {
        obj.insert(QString("properties"), ::OpenAPI::toJsonValue(m_properties));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

OAIFailoverGroupUpdateProperties OAIFailoverGroupUpdate::getProperties() const {
    return m_properties;
}
void OAIFailoverGroupUpdate::setProperties(const OAIFailoverGroupUpdateProperties &properties) {
    m_properties = properties;
    m_properties_isSet = true;
}

bool OAIFailoverGroupUpdate::is_properties_Set() const{
    return m_properties_isSet;
}

bool OAIFailoverGroupUpdate::is_properties_Valid() const{
    return m_properties_isValid;
}

QMap<QString, QString> OAIFailoverGroupUpdate::getTags() const {
    return m_tags;
}
void OAIFailoverGroupUpdate::setTags(const QMap<QString, QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIFailoverGroupUpdate::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIFailoverGroupUpdate::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIFailoverGroupUpdate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFailoverGroupUpdate::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
