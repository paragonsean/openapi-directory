/**
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2015-05-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFailoverGroupUpdateProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFailoverGroupUpdateProperties::OAIFailoverGroupUpdateProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFailoverGroupUpdateProperties::OAIFailoverGroupUpdateProperties() {
    this->initializeModel();
}

OAIFailoverGroupUpdateProperties::~OAIFailoverGroupUpdateProperties() {}

void OAIFailoverGroupUpdateProperties::initializeModel() {

    m_databases_isSet = false;
    m_databases_isValid = false;

    m_read_only_endpoint_isSet = false;
    m_read_only_endpoint_isValid = false;

    m_read_write_endpoint_isSet = false;
    m_read_write_endpoint_isValid = false;
}

void OAIFailoverGroupUpdateProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFailoverGroupUpdateProperties::fromJsonObject(QJsonObject json) {

    m_databases_isValid = ::OpenAPI::fromJsonValue(m_databases, json[QString("databases")]);
    m_databases_isSet = !json[QString("databases")].isNull() && m_databases_isValid;

    m_read_only_endpoint_isValid = ::OpenAPI::fromJsonValue(m_read_only_endpoint, json[QString("readOnlyEndpoint")]);
    m_read_only_endpoint_isSet = !json[QString("readOnlyEndpoint")].isNull() && m_read_only_endpoint_isValid;

    m_read_write_endpoint_isValid = ::OpenAPI::fromJsonValue(m_read_write_endpoint, json[QString("readWriteEndpoint")]);
    m_read_write_endpoint_isSet = !json[QString("readWriteEndpoint")].isNull() && m_read_write_endpoint_isValid;
}

QString OAIFailoverGroupUpdateProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFailoverGroupUpdateProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_databases.size() > 0) {
        obj.insert(QString("databases"), ::OpenAPI::toJsonValue(m_databases));
    }
    if (m_read_only_endpoint.isSet()) {
        obj.insert(QString("readOnlyEndpoint"), ::OpenAPI::toJsonValue(m_read_only_endpoint));
    }
    if (m_read_write_endpoint.isSet()) {
        obj.insert(QString("readWriteEndpoint"), ::OpenAPI::toJsonValue(m_read_write_endpoint));
    }
    return obj;
}

QList<QString> OAIFailoverGroupUpdateProperties::getDatabases() const {
    return m_databases;
}
void OAIFailoverGroupUpdateProperties::setDatabases(const QList<QString> &databases) {
    m_databases = databases;
    m_databases_isSet = true;
}

bool OAIFailoverGroupUpdateProperties::is_databases_Set() const{
    return m_databases_isSet;
}

bool OAIFailoverGroupUpdateProperties::is_databases_Valid() const{
    return m_databases_isValid;
}

OAIFailoverGroupReadOnlyEndpoint OAIFailoverGroupUpdateProperties::getReadOnlyEndpoint() const {
    return m_read_only_endpoint;
}
void OAIFailoverGroupUpdateProperties::setReadOnlyEndpoint(const OAIFailoverGroupReadOnlyEndpoint &read_only_endpoint) {
    m_read_only_endpoint = read_only_endpoint;
    m_read_only_endpoint_isSet = true;
}

bool OAIFailoverGroupUpdateProperties::is_read_only_endpoint_Set() const{
    return m_read_only_endpoint_isSet;
}

bool OAIFailoverGroupUpdateProperties::is_read_only_endpoint_Valid() const{
    return m_read_only_endpoint_isValid;
}

OAIFailoverGroupReadWriteEndpoint OAIFailoverGroupUpdateProperties::getReadWriteEndpoint() const {
    return m_read_write_endpoint;
}
void OAIFailoverGroupUpdateProperties::setReadWriteEndpoint(const OAIFailoverGroupReadWriteEndpoint &read_write_endpoint) {
    m_read_write_endpoint = read_write_endpoint;
    m_read_write_endpoint_isSet = true;
}

bool OAIFailoverGroupUpdateProperties::is_read_write_endpoint_Set() const{
    return m_read_write_endpoint_isSet;
}

bool OAIFailoverGroupUpdateProperties::is_read_write_endpoint_Valid() const{
    return m_read_write_endpoint_isValid;
}

bool OAIFailoverGroupUpdateProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_databases.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_read_only_endpoint.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_read_write_endpoint.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFailoverGroupUpdateProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
