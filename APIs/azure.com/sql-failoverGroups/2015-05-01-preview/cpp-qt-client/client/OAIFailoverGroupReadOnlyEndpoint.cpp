/**
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2015-05-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFailoverGroupReadOnlyEndpoint.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFailoverGroupReadOnlyEndpoint::OAIFailoverGroupReadOnlyEndpoint(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFailoverGroupReadOnlyEndpoint::OAIFailoverGroupReadOnlyEndpoint() {
    this->initializeModel();
}

OAIFailoverGroupReadOnlyEndpoint::~OAIFailoverGroupReadOnlyEndpoint() {}

void OAIFailoverGroupReadOnlyEndpoint::initializeModel() {

    m_failover_policy_isSet = false;
    m_failover_policy_isValid = false;
}

void OAIFailoverGroupReadOnlyEndpoint::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFailoverGroupReadOnlyEndpoint::fromJsonObject(QJsonObject json) {

    m_failover_policy_isValid = ::OpenAPI::fromJsonValue(m_failover_policy, json[QString("failoverPolicy")]);
    m_failover_policy_isSet = !json[QString("failoverPolicy")].isNull() && m_failover_policy_isValid;
}

QString OAIFailoverGroupReadOnlyEndpoint::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFailoverGroupReadOnlyEndpoint::asJsonObject() const {
    QJsonObject obj;
    if (m_failover_policy_isSet) {
        obj.insert(QString("failoverPolicy"), ::OpenAPI::toJsonValue(m_failover_policy));
    }
    return obj;
}

QString OAIFailoverGroupReadOnlyEndpoint::getFailoverPolicy() const {
    return m_failover_policy;
}
void OAIFailoverGroupReadOnlyEndpoint::setFailoverPolicy(const QString &failover_policy) {
    m_failover_policy = failover_policy;
    m_failover_policy_isSet = true;
}

bool OAIFailoverGroupReadOnlyEndpoint::is_failover_policy_Set() const{
    return m_failover_policy_isSet;
}

bool OAIFailoverGroupReadOnlyEndpoint::is_failover_policy_Valid() const{
    return m_failover_policy_isValid;
}

bool OAIFailoverGroupReadOnlyEndpoint::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_failover_policy_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFailoverGroupReadOnlyEndpoint::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
