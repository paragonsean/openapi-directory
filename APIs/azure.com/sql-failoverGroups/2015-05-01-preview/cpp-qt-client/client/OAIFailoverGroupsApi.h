/**
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2015-05-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIFailoverGroupsApi_H
#define OAI_OAIFailoverGroupsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIFailoverGroup.h"
#include "OAIFailoverGroupListResult.h"
#include "OAIFailoverGroupUpdate.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIFailoverGroupsApi : public QObject {
    Q_OBJECT

public:
    OAIFailoverGroupsApi(const int timeOut = 0);
    ~OAIFailoverGroupsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  failover_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAIFailoverGroup [required]
    */
    virtual void failoverGroupsCreateOrUpdate(const QString &resource_group_name, const QString &server_name, const QString &failover_group_name, const QString &subscription_id, const QString &api_version, const OAIFailoverGroup &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  failover_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void failoverGroupsDelete(const QString &resource_group_name, const QString &server_name, const QString &failover_group_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  failover_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void failoverGroupsFailover(const QString &resource_group_name, const QString &server_name, const QString &failover_group_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  failover_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void failoverGroupsForceFailoverAllowDataLoss(const QString &resource_group_name, const QString &server_name, const QString &failover_group_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  failover_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void failoverGroupsGet(const QString &resource_group_name, const QString &server_name, const QString &failover_group_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void failoverGroupsListByServer(const QString &resource_group_name, const QString &server_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  failover_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAIFailoverGroupUpdate [required]
    */
    virtual void failoverGroupsUpdate(const QString &resource_group_name, const QString &server_name, const QString &failover_group_name, const QString &subscription_id, const QString &api_version, const OAIFailoverGroupUpdate &parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void failoverGroupsCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void failoverGroupsDeleteCallback(OAIHttpRequestWorker *worker);
    void failoverGroupsFailoverCallback(OAIHttpRequestWorker *worker);
    void failoverGroupsForceFailoverAllowDataLossCallback(OAIHttpRequestWorker *worker);
    void failoverGroupsGetCallback(OAIHttpRequestWorker *worker);
    void failoverGroupsListByServerCallback(OAIHttpRequestWorker *worker);
    void failoverGroupsUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void failoverGroupsCreateOrUpdateSignal(OAIFailoverGroup summary);
    void failoverGroupsDeleteSignal();
    void failoverGroupsFailoverSignal(OAIFailoverGroup summary);
    void failoverGroupsForceFailoverAllowDataLossSignal(OAIFailoverGroup summary);
    void failoverGroupsGetSignal(OAIFailoverGroup summary);
    void failoverGroupsListByServerSignal(OAIFailoverGroupListResult summary);
    void failoverGroupsUpdateSignal(OAIFailoverGroup summary);


    void failoverGroupsCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIFailoverGroup summary);
    void failoverGroupsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void failoverGroupsFailoverSignalFull(OAIHttpRequestWorker *worker, OAIFailoverGroup summary);
    void failoverGroupsForceFailoverAllowDataLossSignalFull(OAIHttpRequestWorker *worker, OAIFailoverGroup summary);
    void failoverGroupsGetSignalFull(OAIHttpRequestWorker *worker, OAIFailoverGroup summary);
    void failoverGroupsListByServerSignalFull(OAIHttpRequestWorker *worker, OAIFailoverGroupListResult summary);
    void failoverGroupsUpdateSignalFull(OAIHttpRequestWorker *worker, OAIFailoverGroup summary);

    Q_DECL_DEPRECATED_X("Use failoverGroupsCreateOrUpdateSignalError() instead")
    void failoverGroupsCreateOrUpdateSignalE(OAIFailoverGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void failoverGroupsCreateOrUpdateSignalError(OAIFailoverGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use failoverGroupsDeleteSignalError() instead")
    void failoverGroupsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void failoverGroupsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use failoverGroupsFailoverSignalError() instead")
    void failoverGroupsFailoverSignalE(OAIFailoverGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void failoverGroupsFailoverSignalError(OAIFailoverGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use failoverGroupsForceFailoverAllowDataLossSignalError() instead")
    void failoverGroupsForceFailoverAllowDataLossSignalE(OAIFailoverGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void failoverGroupsForceFailoverAllowDataLossSignalError(OAIFailoverGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use failoverGroupsGetSignalError() instead")
    void failoverGroupsGetSignalE(OAIFailoverGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void failoverGroupsGetSignalError(OAIFailoverGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use failoverGroupsListByServerSignalError() instead")
    void failoverGroupsListByServerSignalE(OAIFailoverGroupListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void failoverGroupsListByServerSignalError(OAIFailoverGroupListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use failoverGroupsUpdateSignalError() instead")
    void failoverGroupsUpdateSignalE(OAIFailoverGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void failoverGroupsUpdateSignalError(OAIFailoverGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use failoverGroupsCreateOrUpdateSignalErrorFull() instead")
    void failoverGroupsCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void failoverGroupsCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use failoverGroupsDeleteSignalErrorFull() instead")
    void failoverGroupsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void failoverGroupsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use failoverGroupsFailoverSignalErrorFull() instead")
    void failoverGroupsFailoverSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void failoverGroupsFailoverSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use failoverGroupsForceFailoverAllowDataLossSignalErrorFull() instead")
    void failoverGroupsForceFailoverAllowDataLossSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void failoverGroupsForceFailoverAllowDataLossSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use failoverGroupsGetSignalErrorFull() instead")
    void failoverGroupsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void failoverGroupsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use failoverGroupsListByServerSignalErrorFull() instead")
    void failoverGroupsListByServerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void failoverGroupsListByServerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use failoverGroupsUpdateSignalErrorFull() instead")
    void failoverGroupsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void failoverGroupsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
