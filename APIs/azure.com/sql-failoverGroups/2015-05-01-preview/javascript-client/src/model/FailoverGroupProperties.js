/**
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2015-05-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FailoverGroupReadOnlyEndpoint from './FailoverGroupReadOnlyEndpoint';
import FailoverGroupReadWriteEndpoint from './FailoverGroupReadWriteEndpoint';
import PartnerInfo from './PartnerInfo';

/**
 * The FailoverGroupProperties model module.
 * @module model/FailoverGroupProperties
 * @version 2015-05-01-preview
 */
class FailoverGroupProperties {
    /**
     * Constructs a new <code>FailoverGroupProperties</code>.
     * Properties of a failover group.
     * @alias module:model/FailoverGroupProperties
     * @param partnerServers {Array.<module:model/PartnerInfo>} List of partner server information for the failover group.
     * @param readWriteEndpoint {module:model/FailoverGroupReadWriteEndpoint} 
     */
    constructor(partnerServers, readWriteEndpoint) { 
        
        FailoverGroupProperties.initialize(this, partnerServers, readWriteEndpoint);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, partnerServers, readWriteEndpoint) { 
        obj['partnerServers'] = partnerServers;
        obj['readWriteEndpoint'] = readWriteEndpoint;
    }

    /**
     * Constructs a <code>FailoverGroupProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FailoverGroupProperties} obj Optional instance to populate.
     * @return {module:model/FailoverGroupProperties} The populated <code>FailoverGroupProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FailoverGroupProperties();

            if (data.hasOwnProperty('databases')) {
                obj['databases'] = ApiClient.convertToType(data['databases'], ['String']);
            }
            if (data.hasOwnProperty('partnerServers')) {
                obj['partnerServers'] = ApiClient.convertToType(data['partnerServers'], [PartnerInfo]);
            }
            if (data.hasOwnProperty('readOnlyEndpoint')) {
                obj['readOnlyEndpoint'] = FailoverGroupReadOnlyEndpoint.constructFromObject(data['readOnlyEndpoint']);
            }
            if (data.hasOwnProperty('readWriteEndpoint')) {
                obj['readWriteEndpoint'] = FailoverGroupReadWriteEndpoint.constructFromObject(data['readWriteEndpoint']);
            }
            if (data.hasOwnProperty('replicationRole')) {
                obj['replicationRole'] = ApiClient.convertToType(data['replicationRole'], 'String');
            }
            if (data.hasOwnProperty('replicationState')) {
                obj['replicationState'] = ApiClient.convertToType(data['replicationState'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FailoverGroupProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FailoverGroupProperties</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of FailoverGroupProperties.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['databases'])) {
            throw new Error("Expected the field `databases` to be an array in the JSON data but got " + data['databases']);
        }
        if (data['partnerServers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['partnerServers'])) {
                throw new Error("Expected the field `partnerServers` to be an array in the JSON data but got " + data['partnerServers']);
            }
            // validate the optional field `partnerServers` (array)
            for (const item of data['partnerServers']) {
                PartnerInfo.validateJSON(item);
            };
        }
        // validate the optional field `readOnlyEndpoint`
        if (data['readOnlyEndpoint']) { // data not null
          FailoverGroupReadOnlyEndpoint.validateJSON(data['readOnlyEndpoint']);
        }
        // validate the optional field `readWriteEndpoint`
        if (data['readWriteEndpoint']) { // data not null
          FailoverGroupReadWriteEndpoint.validateJSON(data['readWriteEndpoint']);
        }
        // ensure the json data is a string
        if (data['replicationRole'] && !(typeof data['replicationRole'] === 'string' || data['replicationRole'] instanceof String)) {
            throw new Error("Expected the field `replicationRole` to be a primitive type in the JSON string but got " + data['replicationRole']);
        }
        // ensure the json data is a string
        if (data['replicationState'] && !(typeof data['replicationState'] === 'string' || data['replicationState'] instanceof String)) {
            throw new Error("Expected the field `replicationState` to be a primitive type in the JSON string but got " + data['replicationState']);
        }

        return true;
    }


}

FailoverGroupProperties.RequiredProperties = ["partnerServers", "readWriteEndpoint"];

/**
 * List of databases in the failover group.
 * @member {Array.<String>} databases
 */
FailoverGroupProperties.prototype['databases'] = undefined;

/**
 * List of partner server information for the failover group.
 * @member {Array.<module:model/PartnerInfo>} partnerServers
 */
FailoverGroupProperties.prototype['partnerServers'] = undefined;

/**
 * @member {module:model/FailoverGroupReadOnlyEndpoint} readOnlyEndpoint
 */
FailoverGroupProperties.prototype['readOnlyEndpoint'] = undefined;

/**
 * @member {module:model/FailoverGroupReadWriteEndpoint} readWriteEndpoint
 */
FailoverGroupProperties.prototype['readWriteEndpoint'] = undefined;

/**
 * Local replication role of the failover group instance.
 * @member {module:model/FailoverGroupProperties.ReplicationRoleEnum} replicationRole
 */
FailoverGroupProperties.prototype['replicationRole'] = undefined;

/**
 * Replication state of the failover group instance.
 * @member {String} replicationState
 */
FailoverGroupProperties.prototype['replicationState'] = undefined;





/**
 * Allowed values for the <code>replicationRole</code> property.
 * @enum {String}
 * @readonly
 */
FailoverGroupProperties['ReplicationRoleEnum'] = {

    /**
     * value: "Primary"
     * @const
     */
    "Primary": "Primary",

    /**
     * value: "Secondary"
     * @const
     */
    "Secondary": "Secondary"
};



export default FailoverGroupProperties;

