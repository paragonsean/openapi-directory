# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.failover_group_read_only_endpoint import FailoverGroupReadOnlyEndpoint
from openapi_server.models.failover_group_read_write_endpoint import FailoverGroupReadWriteEndpoint
from openapi_server import util


class FailoverGroupUpdateProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, databases: List[str]=None, read_only_endpoint: FailoverGroupReadOnlyEndpoint=None, read_write_endpoint: FailoverGroupReadWriteEndpoint=None):
        """FailoverGroupUpdateProperties - a model defined in OpenAPI

        :param databases: The databases of this FailoverGroupUpdateProperties.
        :param read_only_endpoint: The read_only_endpoint of this FailoverGroupUpdateProperties.
        :param read_write_endpoint: The read_write_endpoint of this FailoverGroupUpdateProperties.
        """
        self.openapi_types = {
            'databases': List[str],
            'read_only_endpoint': FailoverGroupReadOnlyEndpoint,
            'read_write_endpoint': FailoverGroupReadWriteEndpoint
        }

        self.attribute_map = {
            'databases': 'databases',
            'read_only_endpoint': 'readOnlyEndpoint',
            'read_write_endpoint': 'readWriteEndpoint'
        }

        self._databases = databases
        self._read_only_endpoint = read_only_endpoint
        self._read_write_endpoint = read_write_endpoint

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FailoverGroupUpdateProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FailoverGroupUpdateProperties of this FailoverGroupUpdateProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def databases(self):
        """Gets the databases of this FailoverGroupUpdateProperties.

        List of databases in the failover group.

        :return: The databases of this FailoverGroupUpdateProperties.
        :rtype: List[str]
        """
        return self._databases

    @databases.setter
    def databases(self, databases):
        """Sets the databases of this FailoverGroupUpdateProperties.

        List of databases in the failover group.

        :param databases: The databases of this FailoverGroupUpdateProperties.
        :type databases: List[str]
        """

        self._databases = databases

    @property
    def read_only_endpoint(self):
        """Gets the read_only_endpoint of this FailoverGroupUpdateProperties.


        :return: The read_only_endpoint of this FailoverGroupUpdateProperties.
        :rtype: FailoverGroupReadOnlyEndpoint
        """
        return self._read_only_endpoint

    @read_only_endpoint.setter
    def read_only_endpoint(self, read_only_endpoint):
        """Sets the read_only_endpoint of this FailoverGroupUpdateProperties.


        :param read_only_endpoint: The read_only_endpoint of this FailoverGroupUpdateProperties.
        :type read_only_endpoint: FailoverGroupReadOnlyEndpoint
        """

        self._read_only_endpoint = read_only_endpoint

    @property
    def read_write_endpoint(self):
        """Gets the read_write_endpoint of this FailoverGroupUpdateProperties.


        :return: The read_write_endpoint of this FailoverGroupUpdateProperties.
        :rtype: FailoverGroupReadWriteEndpoint
        """
        return self._read_write_endpoint

    @read_write_endpoint.setter
    def read_write_endpoint(self, read_write_endpoint):
        """Sets the read_write_endpoint of this FailoverGroupUpdateProperties.


        :param read_write_endpoint: The read_write_endpoint of this FailoverGroupUpdateProperties.
        :type read_write_endpoint: FailoverGroupReadWriteEndpoint
        """

        self._read_write_endpoint = read_write_endpoint
