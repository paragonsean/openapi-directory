/**
 * Ink Recognizer Client
 * The service is used to perform ink layout and recognition of written words and shapes. Ink strokes passed to the service are recognized and organized into recognition results in the response
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIInkPoint.h
 *
 * An object containing the properties of an point in the path of an ink stroke. The main properties are the x and y values. Other include tip pressure, x tilt etc. For the coordinate values, it is recommended to have a precision of 8 digits after the decimal to obtain most accurate recognition results. The origin (0,0) of the canvas is assumed to be at the top left corner of the canvas
 */

#ifndef OAIInkPoint_H
#define OAIInkPoint_H

#include <QJsonObject>


#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIInkPoint : public OAIObject {
public:
    OAIInkPoint();
    OAIInkPoint(QString json);
    ~OAIInkPoint() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    double getBarrelPressure() const;
    void setBarrelPressure(const double &barrel_pressure);
    bool is_barrel_pressure_Set() const;
    bool is_barrel_pressure_Valid() const;

    bool isBarrelSwitch() const;
    void setBarrelSwitch(const bool &barrel_switch);
    bool is_barrel_switch_Set() const;
    bool is_barrel_switch_Valid() const;

    bool isEraser() const;
    void setEraser(const bool &eraser);
    bool is_eraser_Set() const;
    bool is_eraser_Valid() const;

    double getHeight() const;
    void setHeight(const double &height);
    bool is_height_Set() const;
    bool is_height_Valid() const;

    bool isInverted() const;
    void setInverted(const bool &inverted);
    bool is_inverted_Set() const;
    bool is_inverted_Valid() const;

    bool isSecondaryTip() const;
    void setSecondaryTip(const bool &secondary_tip);
    bool is_secondary_tip_Set() const;
    bool is_secondary_tip_Valid() const;

    double getTimestamp() const;
    void setTimestamp(const double &timestamp);
    bool is_timestamp_Set() const;
    bool is_timestamp_Valid() const;

    double getTipPressure() const;
    void setTipPressure(const double &tip_pressure);
    bool is_tip_pressure_Set() const;
    bool is_tip_pressure_Valid() const;

    bool isTipSwitch() const;
    void setTipSwitch(const bool &tip_switch);
    bool is_tip_switch_Set() const;
    bool is_tip_switch_Valid() const;

    double getWidth() const;
    void setWidth(const double &width);
    bool is_width_Set() const;
    bool is_width_Valid() const;

    double getX() const;
    void setX(const double &x);
    bool is_x_Set() const;
    bool is_x_Valid() const;

    double getXTilt() const;
    void setXTilt(const double &x_tilt);
    bool is_x_tilt_Set() const;
    bool is_x_tilt_Valid() const;

    double getY() const;
    void setY(const double &y);
    bool is_y_Set() const;
    bool is_y_Valid() const;

    double getYTilt() const;
    void setYTilt(const double &y_tilt);
    bool is_y_tilt_Set() const;
    bool is_y_tilt_Valid() const;

    double getZ() const;
    void setZ(const double &z);
    bool is_z_Set() const;
    bool is_z_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    double m_barrel_pressure;
    bool m_barrel_pressure_isSet;
    bool m_barrel_pressure_isValid;

    bool m_barrel_switch;
    bool m_barrel_switch_isSet;
    bool m_barrel_switch_isValid;

    bool m_eraser;
    bool m_eraser_isSet;
    bool m_eraser_isValid;

    double m_height;
    bool m_height_isSet;
    bool m_height_isValid;

    bool m_inverted;
    bool m_inverted_isSet;
    bool m_inverted_isValid;

    bool m_secondary_tip;
    bool m_secondary_tip_isSet;
    bool m_secondary_tip_isValid;

    double m_timestamp;
    bool m_timestamp_isSet;
    bool m_timestamp_isValid;

    double m_tip_pressure;
    bool m_tip_pressure_isSet;
    bool m_tip_pressure_isValid;

    bool m_tip_switch;
    bool m_tip_switch_isSet;
    bool m_tip_switch_isValid;

    double m_width;
    bool m_width_isSet;
    bool m_width_isValid;

    double m_x;
    bool m_x_isSet;
    bool m_x_isValid;

    double m_x_tilt;
    bool m_x_tilt_isSet;
    bool m_x_tilt_isValid;

    double m_y;
    bool m_y_isSet;
    bool m_y_isValid;

    double m_y_tilt;
    bool m_y_tilt_isSet;
    bool m_y_tilt_isValid;

    double m_z;
    bool m_z_isSet;
    bool m_z_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIInkPoint)

#endif // OAIInkPoint_H
