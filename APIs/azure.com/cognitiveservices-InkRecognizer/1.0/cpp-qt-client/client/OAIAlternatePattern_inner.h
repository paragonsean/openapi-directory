/**
 * Ink Recognizer Client
 * The service is used to perform ink layout and recognition of written words and shapes. Ink strokes passed to the service are recognized and organized into recognition results in the response
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAlternatePattern_inner.h
 *
 * 
 */

#ifndef OAIAlternatePattern_inner_H
#define OAIAlternatePattern_inner_H

#include <QJsonObject>

#include "OAILeafCategoryPattern.h"
#include "OAIPointDetailsPattern.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIPointDetailsPattern;

class OAIAlternatePattern_inner : public OAIObject {
public:
    OAIAlternatePattern_inner();
    OAIAlternatePattern_inner(QString json);
    ~OAIAlternatePattern_inner() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAILeafCategoryPattern getCategory() const;
    void setCategory(const OAILeafCategoryPattern &category);
    bool is_category_Set() const;
    bool is_category_Valid() const;

    double getConfidence() const;
    void setConfidence(const double &confidence);
    bool is_confidence_Set() const;
    bool is_confidence_Valid() const;

    QList<OAIPointDetailsPattern> getPoints() const;
    void setPoints(const QList<OAIPointDetailsPattern> &points);
    bool is_points_Set() const;
    bool is_points_Valid() const;

    QString getRecognizedString() const;
    void setRecognizedString(const QString &recognized_string);
    bool is_recognized_string_Set() const;
    bool is_recognized_string_Valid() const;

    double getRotationAngle() const;
    void setRotationAngle(const double &rotation_angle);
    bool is_rotation_angle_Set() const;
    bool is_rotation_angle_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAILeafCategoryPattern m_category;
    bool m_category_isSet;
    bool m_category_isValid;

    double m_confidence;
    bool m_confidence_isSet;
    bool m_confidence_isValid;

    QList<OAIPointDetailsPattern> m_points;
    bool m_points_isSet;
    bool m_points_isValid;

    QString m_recognized_string;
    bool m_recognized_string_isSet;
    bool m_recognized_string_isValid;

    double m_rotation_angle;
    bool m_rotation_angle_isSet;
    bool m_rotation_angle_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAlternatePattern_inner)

#endif // OAIAlternatePattern_inner_H
