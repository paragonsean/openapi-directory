/**
 * Ink Recognizer Client
 * The service is used to perform ink layout and recognition of written words and shapes. Ink strokes passed to the service are recognized and organized into recognition results in the response
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStroke.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStroke::OAIStroke(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStroke::OAIStroke() {
    this->initializeModel();
}

OAIStroke::~OAIStroke() {}

void OAIStroke::initializeModel() {

    m_drawing_attributes_isSet = false;
    m_drawing_attributes_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_language_isSet = false;
    m_language_isValid = false;

    m_points_isSet = false;
    m_points_isValid = false;
}

void OAIStroke::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStroke::fromJsonObject(QJsonObject json) {

    m_drawing_attributes_isValid = ::OpenAPI::fromJsonValue(m_drawing_attributes, json[QString("drawingAttributes")]);
    m_drawing_attributes_isSet = !json[QString("drawingAttributes")].isNull() && m_drawing_attributes_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_language_isValid = ::OpenAPI::fromJsonValue(m_language, json[QString("language")]);
    m_language_isSet = !json[QString("language")].isNull() && m_language_isValid;

    m_points_isValid = ::OpenAPI::fromJsonValue(m_points, json[QString("points")]);
    m_points_isSet = !json[QString("points")].isNull() && m_points_isValid;
}

QString OAIStroke::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStroke::asJsonObject() const {
    QJsonObject obj;
    if (m_drawing_attributes.isSet()) {
        obj.insert(QString("drawingAttributes"), ::OpenAPI::toJsonValue(m_drawing_attributes));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_language_isSet) {
        obj.insert(QString("language"), ::OpenAPI::toJsonValue(m_language));
    }
    if (m_points.size() > 0) {
        obj.insert(QString("points"), ::OpenAPI::toJsonValue(m_points));
    }
    return obj;
}

OAIDrawingAttributesPattern OAIStroke::getDrawingAttributes() const {
    return m_drawing_attributes;
}
void OAIStroke::setDrawingAttributes(const OAIDrawingAttributesPattern &drawing_attributes) {
    m_drawing_attributes = drawing_attributes;
    m_drawing_attributes_isSet = true;
}

bool OAIStroke::is_drawing_attributes_Set() const{
    return m_drawing_attributes_isSet;
}

bool OAIStroke::is_drawing_attributes_Valid() const{
    return m_drawing_attributes_isValid;
}

qint32 OAIStroke::getId() const {
    return m_id;
}
void OAIStroke::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIStroke::is_id_Set() const{
    return m_id_isSet;
}

bool OAIStroke::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIStroke::getKind() const {
    return m_kind;
}
void OAIStroke::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIStroke::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIStroke::is_kind_Valid() const{
    return m_kind_isValid;
}

QString OAIStroke::getLanguage() const {
    return m_language;
}
void OAIStroke::setLanguage(const QString &language) {
    m_language = language;
    m_language_isSet = true;
}

bool OAIStroke::is_language_Set() const{
    return m_language_isSet;
}

bool OAIStroke::is_language_Valid() const{
    return m_language_isValid;
}

QList<OAIInkPoint> OAIStroke::getPoints() const {
    return m_points;
}
void OAIStroke::setPoints(const QList<OAIInkPoint> &points) {
    m_points = points;
    m_points_isSet = true;
}

bool OAIStroke::is_points_Set() const{
    return m_points_isSet;
}

bool OAIStroke::is_points_Valid() const{
    return m_points_isValid;
}

bool OAIStroke::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_drawing_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_points.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStroke::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_points_isValid && true;
}

} // namespace OpenAPI
