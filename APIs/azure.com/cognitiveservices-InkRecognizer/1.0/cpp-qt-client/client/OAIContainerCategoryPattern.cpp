/**
 * Ink Recognizer Client
 * The service is used to perform ink layout and recognition of written words and shapes. Ink strokes passed to the service are recognized and organized into recognition results in the response
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContainerCategoryPattern.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContainerCategoryPattern::OAIContainerCategoryPattern(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContainerCategoryPattern::OAIContainerCategoryPattern() {
    this->initializeModel();
}

OAIContainerCategoryPattern::~OAIContainerCategoryPattern() {}

void OAIContainerCategoryPattern::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIContainerCategoryPattern::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIContainerCategoryPattern::fromJson(QString jsonString) {
    
    if ( jsonString.compare("root", Qt::CaseInsensitive) == 0) {
        m_value = eOAIContainerCategoryPattern::ROOT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("writingRegion", Qt::CaseInsensitive) == 0) {
        m_value = eOAIContainerCategoryPattern::WRITINGREGION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("paragraph", Qt::CaseInsensitive) == 0) {
        m_value = eOAIContainerCategoryPattern::PARAGRAPH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("line", Qt::CaseInsensitive) == 0) {
        m_value = eOAIContainerCategoryPattern::LINE;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIContainerCategoryPattern::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIContainerCategoryPattern::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIContainerCategoryPattern::ROOT:
            val = "root";
            break;
        case eOAIContainerCategoryPattern::WRITINGREGION:
            val = "writingRegion";
            break;
        case eOAIContainerCategoryPattern::PARAGRAPH:
            val = "paragraph";
            break;
        case eOAIContainerCategoryPattern::LINE:
            val = "line";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIContainerCategoryPattern::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIContainerCategoryPattern::eOAIContainerCategoryPattern OAIContainerCategoryPattern::getValue() const {
    return m_value;
}

void OAIContainerCategoryPattern::setValue(const OAIContainerCategoryPattern::eOAIContainerCategoryPattern& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIContainerCategoryPattern::isSet() const {
    
    return m_value_isSet;
}

bool OAIContainerCategoryPattern::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
