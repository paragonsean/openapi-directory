/**
 * Ink Recognizer Client
 * The service is used to perform ink layout and recognition of written words and shapes. Ink strokes passed to the service are recognized and organized into recognition results in the response
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInkPoint.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInkPoint::OAIInkPoint(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInkPoint::OAIInkPoint() {
    this->initializeModel();
}

OAIInkPoint::~OAIInkPoint() {}

void OAIInkPoint::initializeModel() {

    m_barrel_pressure_isSet = false;
    m_barrel_pressure_isValid = false;

    m_barrel_switch_isSet = false;
    m_barrel_switch_isValid = false;

    m_eraser_isSet = false;
    m_eraser_isValid = false;

    m_height_isSet = false;
    m_height_isValid = false;

    m_inverted_isSet = false;
    m_inverted_isValid = false;

    m_secondary_tip_isSet = false;
    m_secondary_tip_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;

    m_tip_pressure_isSet = false;
    m_tip_pressure_isValid = false;

    m_tip_switch_isSet = false;
    m_tip_switch_isValid = false;

    m_width_isSet = false;
    m_width_isValid = false;

    m_x_isSet = false;
    m_x_isValid = false;

    m_x_tilt_isSet = false;
    m_x_tilt_isValid = false;

    m_y_isSet = false;
    m_y_isValid = false;

    m_y_tilt_isSet = false;
    m_y_tilt_isValid = false;

    m_z_isSet = false;
    m_z_isValid = false;
}

void OAIInkPoint::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInkPoint::fromJsonObject(QJsonObject json) {

    m_barrel_pressure_isValid = ::OpenAPI::fromJsonValue(m_barrel_pressure, json[QString("barrelPressure")]);
    m_barrel_pressure_isSet = !json[QString("barrelPressure")].isNull() && m_barrel_pressure_isValid;

    m_barrel_switch_isValid = ::OpenAPI::fromJsonValue(m_barrel_switch, json[QString("barrelSwitch")]);
    m_barrel_switch_isSet = !json[QString("barrelSwitch")].isNull() && m_barrel_switch_isValid;

    m_eraser_isValid = ::OpenAPI::fromJsonValue(m_eraser, json[QString("eraser")]);
    m_eraser_isSet = !json[QString("eraser")].isNull() && m_eraser_isValid;

    m_height_isValid = ::OpenAPI::fromJsonValue(m_height, json[QString("height")]);
    m_height_isSet = !json[QString("height")].isNull() && m_height_isValid;

    m_inverted_isValid = ::OpenAPI::fromJsonValue(m_inverted, json[QString("inverted")]);
    m_inverted_isSet = !json[QString("inverted")].isNull() && m_inverted_isValid;

    m_secondary_tip_isValid = ::OpenAPI::fromJsonValue(m_secondary_tip, json[QString("secondaryTip")]);
    m_secondary_tip_isSet = !json[QString("secondaryTip")].isNull() && m_secondary_tip_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;

    m_tip_pressure_isValid = ::OpenAPI::fromJsonValue(m_tip_pressure, json[QString("tipPressure")]);
    m_tip_pressure_isSet = !json[QString("tipPressure")].isNull() && m_tip_pressure_isValid;

    m_tip_switch_isValid = ::OpenAPI::fromJsonValue(m_tip_switch, json[QString("tipSwitch")]);
    m_tip_switch_isSet = !json[QString("tipSwitch")].isNull() && m_tip_switch_isValid;

    m_width_isValid = ::OpenAPI::fromJsonValue(m_width, json[QString("width")]);
    m_width_isSet = !json[QString("width")].isNull() && m_width_isValid;

    m_x_isValid = ::OpenAPI::fromJsonValue(m_x, json[QString("x")]);
    m_x_isSet = !json[QString("x")].isNull() && m_x_isValid;

    m_x_tilt_isValid = ::OpenAPI::fromJsonValue(m_x_tilt, json[QString("xTilt")]);
    m_x_tilt_isSet = !json[QString("xTilt")].isNull() && m_x_tilt_isValid;

    m_y_isValid = ::OpenAPI::fromJsonValue(m_y, json[QString("y")]);
    m_y_isSet = !json[QString("y")].isNull() && m_y_isValid;

    m_y_tilt_isValid = ::OpenAPI::fromJsonValue(m_y_tilt, json[QString("yTilt")]);
    m_y_tilt_isSet = !json[QString("yTilt")].isNull() && m_y_tilt_isValid;

    m_z_isValid = ::OpenAPI::fromJsonValue(m_z, json[QString("z")]);
    m_z_isSet = !json[QString("z")].isNull() && m_z_isValid;
}

QString OAIInkPoint::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInkPoint::asJsonObject() const {
    QJsonObject obj;
    if (m_barrel_pressure_isSet) {
        obj.insert(QString("barrelPressure"), ::OpenAPI::toJsonValue(m_barrel_pressure));
    }
    if (m_barrel_switch_isSet) {
        obj.insert(QString("barrelSwitch"), ::OpenAPI::toJsonValue(m_barrel_switch));
    }
    if (m_eraser_isSet) {
        obj.insert(QString("eraser"), ::OpenAPI::toJsonValue(m_eraser));
    }
    if (m_height_isSet) {
        obj.insert(QString("height"), ::OpenAPI::toJsonValue(m_height));
    }
    if (m_inverted_isSet) {
        obj.insert(QString("inverted"), ::OpenAPI::toJsonValue(m_inverted));
    }
    if (m_secondary_tip_isSet) {
        obj.insert(QString("secondaryTip"), ::OpenAPI::toJsonValue(m_secondary_tip));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    if (m_tip_pressure_isSet) {
        obj.insert(QString("tipPressure"), ::OpenAPI::toJsonValue(m_tip_pressure));
    }
    if (m_tip_switch_isSet) {
        obj.insert(QString("tipSwitch"), ::OpenAPI::toJsonValue(m_tip_switch));
    }
    if (m_width_isSet) {
        obj.insert(QString("width"), ::OpenAPI::toJsonValue(m_width));
    }
    if (m_x_isSet) {
        obj.insert(QString("x"), ::OpenAPI::toJsonValue(m_x));
    }
    if (m_x_tilt_isSet) {
        obj.insert(QString("xTilt"), ::OpenAPI::toJsonValue(m_x_tilt));
    }
    if (m_y_isSet) {
        obj.insert(QString("y"), ::OpenAPI::toJsonValue(m_y));
    }
    if (m_y_tilt_isSet) {
        obj.insert(QString("yTilt"), ::OpenAPI::toJsonValue(m_y_tilt));
    }
    if (m_z_isSet) {
        obj.insert(QString("z"), ::OpenAPI::toJsonValue(m_z));
    }
    return obj;
}

double OAIInkPoint::getBarrelPressure() const {
    return m_barrel_pressure;
}
void OAIInkPoint::setBarrelPressure(const double &barrel_pressure) {
    m_barrel_pressure = barrel_pressure;
    m_barrel_pressure_isSet = true;
}

bool OAIInkPoint::is_barrel_pressure_Set() const{
    return m_barrel_pressure_isSet;
}

bool OAIInkPoint::is_barrel_pressure_Valid() const{
    return m_barrel_pressure_isValid;
}

bool OAIInkPoint::isBarrelSwitch() const {
    return m_barrel_switch;
}
void OAIInkPoint::setBarrelSwitch(const bool &barrel_switch) {
    m_barrel_switch = barrel_switch;
    m_barrel_switch_isSet = true;
}

bool OAIInkPoint::is_barrel_switch_Set() const{
    return m_barrel_switch_isSet;
}

bool OAIInkPoint::is_barrel_switch_Valid() const{
    return m_barrel_switch_isValid;
}

bool OAIInkPoint::isEraser() const {
    return m_eraser;
}
void OAIInkPoint::setEraser(const bool &eraser) {
    m_eraser = eraser;
    m_eraser_isSet = true;
}

bool OAIInkPoint::is_eraser_Set() const{
    return m_eraser_isSet;
}

bool OAIInkPoint::is_eraser_Valid() const{
    return m_eraser_isValid;
}

double OAIInkPoint::getHeight() const {
    return m_height;
}
void OAIInkPoint::setHeight(const double &height) {
    m_height = height;
    m_height_isSet = true;
}

bool OAIInkPoint::is_height_Set() const{
    return m_height_isSet;
}

bool OAIInkPoint::is_height_Valid() const{
    return m_height_isValid;
}

bool OAIInkPoint::isInverted() const {
    return m_inverted;
}
void OAIInkPoint::setInverted(const bool &inverted) {
    m_inverted = inverted;
    m_inverted_isSet = true;
}

bool OAIInkPoint::is_inverted_Set() const{
    return m_inverted_isSet;
}

bool OAIInkPoint::is_inverted_Valid() const{
    return m_inverted_isValid;
}

bool OAIInkPoint::isSecondaryTip() const {
    return m_secondary_tip;
}
void OAIInkPoint::setSecondaryTip(const bool &secondary_tip) {
    m_secondary_tip = secondary_tip;
    m_secondary_tip_isSet = true;
}

bool OAIInkPoint::is_secondary_tip_Set() const{
    return m_secondary_tip_isSet;
}

bool OAIInkPoint::is_secondary_tip_Valid() const{
    return m_secondary_tip_isValid;
}

double OAIInkPoint::getTimestamp() const {
    return m_timestamp;
}
void OAIInkPoint::setTimestamp(const double &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAIInkPoint::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAIInkPoint::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

double OAIInkPoint::getTipPressure() const {
    return m_tip_pressure;
}
void OAIInkPoint::setTipPressure(const double &tip_pressure) {
    m_tip_pressure = tip_pressure;
    m_tip_pressure_isSet = true;
}

bool OAIInkPoint::is_tip_pressure_Set() const{
    return m_tip_pressure_isSet;
}

bool OAIInkPoint::is_tip_pressure_Valid() const{
    return m_tip_pressure_isValid;
}

bool OAIInkPoint::isTipSwitch() const {
    return m_tip_switch;
}
void OAIInkPoint::setTipSwitch(const bool &tip_switch) {
    m_tip_switch = tip_switch;
    m_tip_switch_isSet = true;
}

bool OAIInkPoint::is_tip_switch_Set() const{
    return m_tip_switch_isSet;
}

bool OAIInkPoint::is_tip_switch_Valid() const{
    return m_tip_switch_isValid;
}

double OAIInkPoint::getWidth() const {
    return m_width;
}
void OAIInkPoint::setWidth(const double &width) {
    m_width = width;
    m_width_isSet = true;
}

bool OAIInkPoint::is_width_Set() const{
    return m_width_isSet;
}

bool OAIInkPoint::is_width_Valid() const{
    return m_width_isValid;
}

double OAIInkPoint::getX() const {
    return m_x;
}
void OAIInkPoint::setX(const double &x) {
    m_x = x;
    m_x_isSet = true;
}

bool OAIInkPoint::is_x_Set() const{
    return m_x_isSet;
}

bool OAIInkPoint::is_x_Valid() const{
    return m_x_isValid;
}

double OAIInkPoint::getXTilt() const {
    return m_x_tilt;
}
void OAIInkPoint::setXTilt(const double &x_tilt) {
    m_x_tilt = x_tilt;
    m_x_tilt_isSet = true;
}

bool OAIInkPoint::is_x_tilt_Set() const{
    return m_x_tilt_isSet;
}

bool OAIInkPoint::is_x_tilt_Valid() const{
    return m_x_tilt_isValid;
}

double OAIInkPoint::getY() const {
    return m_y;
}
void OAIInkPoint::setY(const double &y) {
    m_y = y;
    m_y_isSet = true;
}

bool OAIInkPoint::is_y_Set() const{
    return m_y_isSet;
}

bool OAIInkPoint::is_y_Valid() const{
    return m_y_isValid;
}

double OAIInkPoint::getYTilt() const {
    return m_y_tilt;
}
void OAIInkPoint::setYTilt(const double &y_tilt) {
    m_y_tilt = y_tilt;
    m_y_tilt_isSet = true;
}

bool OAIInkPoint::is_y_tilt_Set() const{
    return m_y_tilt_isSet;
}

bool OAIInkPoint::is_y_tilt_Valid() const{
    return m_y_tilt_isValid;
}

double OAIInkPoint::getZ() const {
    return m_z;
}
void OAIInkPoint::setZ(const double &z) {
    m_z = z;
    m_z_isSet = true;
}

bool OAIInkPoint::is_z_Set() const{
    return m_z_isSet;
}

bool OAIInkPoint::is_z_Valid() const{
    return m_z_isValid;
}

bool OAIInkPoint::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_barrel_pressure_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_barrel_switch_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_eraser_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inverted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secondary_tip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tip_pressure_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tip_switch_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_width_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_x_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_x_tilt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_y_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_y_tilt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_z_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInkPoint::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_x_isValid && m_y_isValid && true;
}

} // namespace OpenAPI
