/**
 * Ink Recognizer Client
 * The service is used to perform ink layout and recognition of written words and shapes. Ink strokes passed to the service are recognized and organized into recognition results in the response
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICategoryPattern.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICategoryPattern::OAICategoryPattern(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICategoryPattern::OAICategoryPattern() {
    this->initializeModel();
}

OAICategoryPattern::~OAICategoryPattern() {}

void OAICategoryPattern::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAICategoryPattern::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAICategoryPattern::fromJson(QString jsonString) {
    
    if ( jsonString.compare("root", Qt::CaseInsensitive) == 0) {
        m_value = eOAICategoryPattern::ROOT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("writingRegion", Qt::CaseInsensitive) == 0) {
        m_value = eOAICategoryPattern::WRITINGREGION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("paragraph", Qt::CaseInsensitive) == 0) {
        m_value = eOAICategoryPattern::PARAGRAPH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("line", Qt::CaseInsensitive) == 0) {
        m_value = eOAICategoryPattern::LINE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("inkBullet", Qt::CaseInsensitive) == 0) {
        m_value = eOAICategoryPattern::INKBULLET;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("inkDrawing", Qt::CaseInsensitive) == 0) {
        m_value = eOAICategoryPattern::INKDRAWING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("inkWord", Qt::CaseInsensitive) == 0) {
        m_value = eOAICategoryPattern::INKWORD;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("unknown", Qt::CaseInsensitive) == 0) {
        m_value = eOAICategoryPattern::UNKNOWN;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAICategoryPattern::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAICategoryPattern::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAICategoryPattern::ROOT:
            val = "root";
            break;
        case eOAICategoryPattern::WRITINGREGION:
            val = "writingRegion";
            break;
        case eOAICategoryPattern::PARAGRAPH:
            val = "paragraph";
            break;
        case eOAICategoryPattern::LINE:
            val = "line";
            break;
        case eOAICategoryPattern::INKBULLET:
            val = "inkBullet";
            break;
        case eOAICategoryPattern::INKDRAWING:
            val = "inkDrawing";
            break;
        case eOAICategoryPattern::INKWORD:
            val = "inkWord";
            break;
        case eOAICategoryPattern::UNKNOWN:
            val = "unknown";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAICategoryPattern::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAICategoryPattern::eOAICategoryPattern OAICategoryPattern::getValue() const {
    return m_value;
}

void OAICategoryPattern::setValue(const OAICategoryPattern::eOAICategoryPattern& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAICategoryPattern::isSet() const {
    
    return m_value_isSet;
}

bool OAICategoryPattern::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
