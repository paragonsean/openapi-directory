/**
 * Ink Recognizer Client
 * The service is used to perform ink layout and recognition of written words and shapes. Ink strokes passed to the service are recognized and organized into recognition results in the response
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPointDetailsPattern.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPointDetailsPattern::OAIPointDetailsPattern(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPointDetailsPattern::OAIPointDetailsPattern() {
    this->initializeModel();
}

OAIPointDetailsPattern::~OAIPointDetailsPattern() {}

void OAIPointDetailsPattern::initializeModel() {

    m_x_isSet = false;
    m_x_isValid = false;

    m_y_isSet = false;
    m_y_isValid = false;
}

void OAIPointDetailsPattern::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPointDetailsPattern::fromJsonObject(QJsonObject json) {

    m_x_isValid = ::OpenAPI::fromJsonValue(m_x, json[QString("x")]);
    m_x_isSet = !json[QString("x")].isNull() && m_x_isValid;

    m_y_isValid = ::OpenAPI::fromJsonValue(m_y, json[QString("y")]);
    m_y_isSet = !json[QString("y")].isNull() && m_y_isValid;
}

QString OAIPointDetailsPattern::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPointDetailsPattern::asJsonObject() const {
    QJsonObject obj;
    if (m_x_isSet) {
        obj.insert(QString("x"), ::OpenAPI::toJsonValue(m_x));
    }
    if (m_y_isSet) {
        obj.insert(QString("y"), ::OpenAPI::toJsonValue(m_y));
    }
    return obj;
}

double OAIPointDetailsPattern::getX() const {
    return m_x;
}
void OAIPointDetailsPattern::setX(const double &x) {
    m_x = x;
    m_x_isSet = true;
}

bool OAIPointDetailsPattern::is_x_Set() const{
    return m_x_isSet;
}

bool OAIPointDetailsPattern::is_x_Valid() const{
    return m_x_isValid;
}

double OAIPointDetailsPattern::getY() const {
    return m_y;
}
void OAIPointDetailsPattern::setY(const double &y) {
    m_y = y;
    m_y_isSet = true;
}

bool OAIPointDetailsPattern::is_y_Set() const{
    return m_y_isSet;
}

bool OAIPointDetailsPattern::is_y_Valid() const{
    return m_y_isValid;
}

bool OAIPointDetailsPattern::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_x_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_y_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPointDetailsPattern::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_x_isValid && m_y_isValid && true;
}

} // namespace OpenAPI
