/**
 * Ink Recognizer Client
 * The service is used to perform ink layout and recognition of written words and shapes. Ink strokes passed to the service are recognized and organized into recognition results in the response
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDrawingAttributesPattern_color.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDrawingAttributesPattern_color::OAIDrawingAttributesPattern_color(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDrawingAttributesPattern_color::OAIDrawingAttributesPattern_color() {
    this->initializeModel();
}

OAIDrawingAttributesPattern_color::~OAIDrawingAttributesPattern_color() {}

void OAIDrawingAttributesPattern_color::initializeModel() {

    m_a_isSet = false;
    m_a_isValid = false;

    m_b_isSet = false;
    m_b_isValid = false;

    m_g_isSet = false;
    m_g_isValid = false;

    m_r_isSet = false;
    m_r_isValid = false;
}

void OAIDrawingAttributesPattern_color::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDrawingAttributesPattern_color::fromJsonObject(QJsonObject json) {

    m_a_isValid = ::OpenAPI::fromJsonValue(m_a, json[QString("a")]);
    m_a_isSet = !json[QString("a")].isNull() && m_a_isValid;

    m_b_isValid = ::OpenAPI::fromJsonValue(m_b, json[QString("b")]);
    m_b_isSet = !json[QString("b")].isNull() && m_b_isValid;

    m_g_isValid = ::OpenAPI::fromJsonValue(m_g, json[QString("g")]);
    m_g_isSet = !json[QString("g")].isNull() && m_g_isValid;

    m_r_isValid = ::OpenAPI::fromJsonValue(m_r, json[QString("r")]);
    m_r_isSet = !json[QString("r")].isNull() && m_r_isValid;
}

QString OAIDrawingAttributesPattern_color::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDrawingAttributesPattern_color::asJsonObject() const {
    QJsonObject obj;
    if (m_a_isSet) {
        obj.insert(QString("a"), ::OpenAPI::toJsonValue(m_a));
    }
    if (m_b_isSet) {
        obj.insert(QString("b"), ::OpenAPI::toJsonValue(m_b));
    }
    if (m_g_isSet) {
        obj.insert(QString("g"), ::OpenAPI::toJsonValue(m_g));
    }
    if (m_r_isSet) {
        obj.insert(QString("r"), ::OpenAPI::toJsonValue(m_r));
    }
    return obj;
}

double OAIDrawingAttributesPattern_color::getA() const {
    return m_a;
}
void OAIDrawingAttributesPattern_color::setA(const double &a) {
    m_a = a;
    m_a_isSet = true;
}

bool OAIDrawingAttributesPattern_color::is_a_Set() const{
    return m_a_isSet;
}

bool OAIDrawingAttributesPattern_color::is_a_Valid() const{
    return m_a_isValid;
}

double OAIDrawingAttributesPattern_color::getB() const {
    return m_b;
}
void OAIDrawingAttributesPattern_color::setB(const double &b) {
    m_b = b;
    m_b_isSet = true;
}

bool OAIDrawingAttributesPattern_color::is_b_Set() const{
    return m_b_isSet;
}

bool OAIDrawingAttributesPattern_color::is_b_Valid() const{
    return m_b_isValid;
}

double OAIDrawingAttributesPattern_color::getG() const {
    return m_g;
}
void OAIDrawingAttributesPattern_color::setG(const double &g) {
    m_g = g;
    m_g_isSet = true;
}

bool OAIDrawingAttributesPattern_color::is_g_Set() const{
    return m_g_isSet;
}

bool OAIDrawingAttributesPattern_color::is_g_Valid() const{
    return m_g_isValid;
}

double OAIDrawingAttributesPattern_color::getR() const {
    return m_r;
}
void OAIDrawingAttributesPattern_color::setR(const double &r) {
    m_r = r;
    m_r_isSet = true;
}

bool OAIDrawingAttributesPattern_color::is_r_Set() const{
    return m_r_isSet;
}

bool OAIDrawingAttributesPattern_color::is_r_Valid() const{
    return m_r_isValid;
}

bool OAIDrawingAttributesPattern_color::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_a_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_b_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_g_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDrawingAttributesPattern_color::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
