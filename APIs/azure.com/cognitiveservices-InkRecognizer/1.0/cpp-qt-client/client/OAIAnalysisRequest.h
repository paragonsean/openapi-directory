/**
 * Ink Recognizer Client
 * The service is used to perform ink layout and recognition of written words and shapes. Ink strokes passed to the service are recognized and organized into recognition results in the response
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAnalysisRequest.h
 *
 * This shows the expected contents of a request
 */

#ifndef OAIAnalysisRequest_H
#define OAIAnalysisRequest_H

#include <QJsonObject>

#include "OAIInkPointValueAttribute.h"
#include "OAIStroke.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIInkPointValueAttribute;
class OAIStroke;

class OAIAnalysisRequest : public OAIObject {
public:
    OAIAnalysisRequest();
    OAIAnalysisRequest(QString json);
    ~OAIAnalysisRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getApplicationType() const;
    void setApplicationType(const QString &application_type);
    bool is_application_type_Set() const;
    bool is_application_type_Valid() const;

    QList<OAIInkPointValueAttribute> getInkPointValueAttributes() const;
    void setInkPointValueAttributes(const QList<OAIInkPointValueAttribute> &ink_point_value_attributes);
    bool is_ink_point_value_attributes_Set() const;
    bool is_ink_point_value_attributes_Valid() const;

    QString getInputDeviceKind() const;
    void setInputDeviceKind(const QString &input_device_kind);
    bool is_input_device_kind_Set() const;
    bool is_input_device_kind_Valid() const;

    QString getLanguage() const;
    void setLanguage(const QString &language);
    bool is_language_Set() const;
    bool is_language_Valid() const;

    QList<OAIStroke> getStrokes() const;
    void setStrokes(const QList<OAIStroke> &strokes);
    bool is_strokes_Set() const;
    bool is_strokes_Valid() const;

    QString getUnit() const;
    void setUnit(const QString &unit);
    bool is_unit_Set() const;
    bool is_unit_Valid() const;

    double getUnitMultiple() const;
    void setUnitMultiple(const double &unit_multiple);
    bool is_unit_multiple_Set() const;
    bool is_unit_multiple_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_application_type;
    bool m_application_type_isSet;
    bool m_application_type_isValid;

    QList<OAIInkPointValueAttribute> m_ink_point_value_attributes;
    bool m_ink_point_value_attributes_isSet;
    bool m_ink_point_value_attributes_isValid;

    QString m_input_device_kind;
    bool m_input_device_kind_isSet;
    bool m_input_device_kind_isValid;

    QString m_language;
    bool m_language_isSet;
    bool m_language_isValid;

    QList<OAIStroke> m_strokes;
    bool m_strokes_isSet;
    bool m_strokes_isValid;

    QString m_unit;
    bool m_unit_isSet;
    bool m_unit_isValid;

    double m_unit_multiple;
    bool m_unit_multiple_isSet;
    bool m_unit_multiple_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAnalysisRequest)

#endif // OAIAnalysisRequest_H
