/**
 * Ink Recognizer Client
 * The service is used to perform ink layout and recognition of written words and shapes. Ink strokes passed to the service are recognized and organized into recognition results in the response
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIShapePattern.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIShapePattern::OAIShapePattern(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIShapePattern::OAIShapePattern() {
    this->initializeModel();
}

OAIShapePattern::~OAIShapePattern() {}

void OAIShapePattern::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIShapePattern::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIShapePattern::fromJson(QString jsonString) {
    
    if ( jsonString.compare("drawing", Qt::CaseInsensitive) == 0) {
        m_value = eOAIShapePattern::DRAWING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("square", Qt::CaseInsensitive) == 0) {
        m_value = eOAIShapePattern::SQUARE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("rectangle", Qt::CaseInsensitive) == 0) {
        m_value = eOAIShapePattern::RECTANGLE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("circle", Qt::CaseInsensitive) == 0) {
        m_value = eOAIShapePattern::CIRCLE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ellipse", Qt::CaseInsensitive) == 0) {
        m_value = eOAIShapePattern::ELLIPSE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("triangle", Qt::CaseInsensitive) == 0) {
        m_value = eOAIShapePattern::TRIANGLE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("isoscelesTriangle", Qt::CaseInsensitive) == 0) {
        m_value = eOAIShapePattern::ISOSCELESTRIANGLE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("equilateralTriangle", Qt::CaseInsensitive) == 0) {
        m_value = eOAIShapePattern::EQUILATERALTRIANGLE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("rightTriangle", Qt::CaseInsensitive) == 0) {
        m_value = eOAIShapePattern::RIGHTTRIANGLE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("quadrilateral", Qt::CaseInsensitive) == 0) {
        m_value = eOAIShapePattern::QUADRILATERAL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("diamond", Qt::CaseInsensitive) == 0) {
        m_value = eOAIShapePattern::DIAMOND;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("trapezoid", Qt::CaseInsensitive) == 0) {
        m_value = eOAIShapePattern::TRAPEZOID;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("parallelogram", Qt::CaseInsensitive) == 0) {
        m_value = eOAIShapePattern::PARALLELOGRAM;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("pentagon", Qt::CaseInsensitive) == 0) {
        m_value = eOAIShapePattern::PENTAGON;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("hexagon", Qt::CaseInsensitive) == 0) {
        m_value = eOAIShapePattern::HEXAGON;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("blockArrow", Qt::CaseInsensitive) == 0) {
        m_value = eOAIShapePattern::BLOCKARROW;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("heart", Qt::CaseInsensitive) == 0) {
        m_value = eOAIShapePattern::HEART;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("starSimple", Qt::CaseInsensitive) == 0) {
        m_value = eOAIShapePattern::STARSIMPLE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("starCrossed", Qt::CaseInsensitive) == 0) {
        m_value = eOAIShapePattern::STARCROSSED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("cloud", Qt::CaseInsensitive) == 0) {
        m_value = eOAIShapePattern::CLOUD;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("line", Qt::CaseInsensitive) == 0) {
        m_value = eOAIShapePattern::LINE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("curve", Qt::CaseInsensitive) == 0) {
        m_value = eOAIShapePattern::CURVE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("polyLine", Qt::CaseInsensitive) == 0) {
        m_value = eOAIShapePattern::POLYLINE;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIShapePattern::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIShapePattern::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIShapePattern::DRAWING:
            val = "drawing";
            break;
        case eOAIShapePattern::SQUARE:
            val = "square";
            break;
        case eOAIShapePattern::RECTANGLE:
            val = "rectangle";
            break;
        case eOAIShapePattern::CIRCLE:
            val = "circle";
            break;
        case eOAIShapePattern::ELLIPSE:
            val = "ellipse";
            break;
        case eOAIShapePattern::TRIANGLE:
            val = "triangle";
            break;
        case eOAIShapePattern::ISOSCELESTRIANGLE:
            val = "isoscelesTriangle";
            break;
        case eOAIShapePattern::EQUILATERALTRIANGLE:
            val = "equilateralTriangle";
            break;
        case eOAIShapePattern::RIGHTTRIANGLE:
            val = "rightTriangle";
            break;
        case eOAIShapePattern::QUADRILATERAL:
            val = "quadrilateral";
            break;
        case eOAIShapePattern::DIAMOND:
            val = "diamond";
            break;
        case eOAIShapePattern::TRAPEZOID:
            val = "trapezoid";
            break;
        case eOAIShapePattern::PARALLELOGRAM:
            val = "parallelogram";
            break;
        case eOAIShapePattern::PENTAGON:
            val = "pentagon";
            break;
        case eOAIShapePattern::HEXAGON:
            val = "hexagon";
            break;
        case eOAIShapePattern::BLOCKARROW:
            val = "blockArrow";
            break;
        case eOAIShapePattern::HEART:
            val = "heart";
            break;
        case eOAIShapePattern::STARSIMPLE:
            val = "starSimple";
            break;
        case eOAIShapePattern::STARCROSSED:
            val = "starCrossed";
            break;
        case eOAIShapePattern::CLOUD:
            val = "cloud";
            break;
        case eOAIShapePattern::LINE:
            val = "line";
            break;
        case eOAIShapePattern::CURVE:
            val = "curve";
            break;
        case eOAIShapePattern::POLYLINE:
            val = "polyLine";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIShapePattern::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIShapePattern::eOAIShapePattern OAIShapePattern::getValue() const {
    return m_value;
}

void OAIShapePattern::setValue(const OAIShapePattern::eOAIShapePattern& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIShapePattern::isSet() const {
    
    return m_value_isSet;
}

bool OAIShapePattern::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
