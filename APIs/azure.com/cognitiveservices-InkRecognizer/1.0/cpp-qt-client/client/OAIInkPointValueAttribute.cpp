/**
 * Ink Recognizer Client
 * The service is used to perform ink layout and recognition of written words and shapes. Ink strokes passed to the service are recognized and organized into recognition results in the response
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInkPointValueAttribute.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInkPointValueAttribute::OAIInkPointValueAttribute(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInkPointValueAttribute::OAIInkPointValueAttribute() {
    this->initializeModel();
}

OAIInkPointValueAttribute::~OAIInkPointValueAttribute() {}

void OAIInkPointValueAttribute::initializeModel() {

    m_logical_maximum_isSet = false;
    m_logical_maximum_isValid = false;

    m_logical_minimum_isSet = false;
    m_logical_minimum_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAIInkPointValueAttribute::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInkPointValueAttribute::fromJsonObject(QJsonObject json) {

    m_logical_maximum_isValid = ::OpenAPI::fromJsonValue(m_logical_maximum, json[QString("logicalMaximum")]);
    m_logical_maximum_isSet = !json[QString("logicalMaximum")].isNull() && m_logical_maximum_isValid;

    m_logical_minimum_isValid = ::OpenAPI::fromJsonValue(m_logical_minimum, json[QString("logicalMinimum")]);
    m_logical_minimum_isSet = !json[QString("logicalMinimum")].isNull() && m_logical_minimum_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAIInkPointValueAttribute::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInkPointValueAttribute::asJsonObject() const {
    QJsonObject obj;
    if (m_logical_maximum_isSet) {
        obj.insert(QString("logicalMaximum"), ::OpenAPI::toJsonValue(m_logical_maximum));
    }
    if (m_logical_minimum_isSet) {
        obj.insert(QString("logicalMinimum"), ::OpenAPI::toJsonValue(m_logical_minimum));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

double OAIInkPointValueAttribute::getLogicalMaximum() const {
    return m_logical_maximum;
}
void OAIInkPointValueAttribute::setLogicalMaximum(const double &logical_maximum) {
    m_logical_maximum = logical_maximum;
    m_logical_maximum_isSet = true;
}

bool OAIInkPointValueAttribute::is_logical_maximum_Set() const{
    return m_logical_maximum_isSet;
}

bool OAIInkPointValueAttribute::is_logical_maximum_Valid() const{
    return m_logical_maximum_isValid;
}

double OAIInkPointValueAttribute::getLogicalMinimum() const {
    return m_logical_minimum;
}
void OAIInkPointValueAttribute::setLogicalMinimum(const double &logical_minimum) {
    m_logical_minimum = logical_minimum;
    m_logical_minimum_isSet = true;
}

bool OAIInkPointValueAttribute::is_logical_minimum_Set() const{
    return m_logical_minimum_isSet;
}

bool OAIInkPointValueAttribute::is_logical_minimum_Valid() const{
    return m_logical_minimum_isValid;
}

QString OAIInkPointValueAttribute::getName() const {
    return m_name;
}
void OAIInkPointValueAttribute::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIInkPointValueAttribute::is_name_Set() const{
    return m_name_isSet;
}

bool OAIInkPointValueAttribute::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIInkPointValueAttribute::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_logical_maximum_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_logical_minimum_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInkPointValueAttribute::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
