/**
 * Ink Recognizer Client
 * The service is used to perform ink layout and recognition of written words and shapes. Ink strokes passed to the service are recognized and organized into recognition results in the response
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILeafCategoryPattern.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILeafCategoryPattern::OAILeafCategoryPattern(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILeafCategoryPattern::OAILeafCategoryPattern() {
    this->initializeModel();
}

OAILeafCategoryPattern::~OAILeafCategoryPattern() {}

void OAILeafCategoryPattern::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAILeafCategoryPattern::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAILeafCategoryPattern::fromJson(QString jsonString) {
    
    if ( jsonString.compare("inkDrawing", Qt::CaseInsensitive) == 0) {
        m_value = eOAILeafCategoryPattern::INKDRAWING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("inkBullet", Qt::CaseInsensitive) == 0) {
        m_value = eOAILeafCategoryPattern::INKBULLET;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("inkWord", Qt::CaseInsensitive) == 0) {
        m_value = eOAILeafCategoryPattern::INKWORD;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("unknown", Qt::CaseInsensitive) == 0) {
        m_value = eOAILeafCategoryPattern::UNKNOWN;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAILeafCategoryPattern::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAILeafCategoryPattern::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAILeafCategoryPattern::INKDRAWING:
            val = "inkDrawing";
            break;
        case eOAILeafCategoryPattern::INKBULLET:
            val = "inkBullet";
            break;
        case eOAILeafCategoryPattern::INKWORD:
            val = "inkWord";
            break;
        case eOAILeafCategoryPattern::UNKNOWN:
            val = "unknown";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAILeafCategoryPattern::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAILeafCategoryPattern::eOAILeafCategoryPattern OAILeafCategoryPattern::getValue() const {
    return m_value;
}

void OAILeafCategoryPattern::setValue(const OAILeafCategoryPattern::eOAILeafCategoryPattern& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAILeafCategoryPattern::isSet() const {
    
    return m_value_isSet;
}

bool OAILeafCategoryPattern::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
