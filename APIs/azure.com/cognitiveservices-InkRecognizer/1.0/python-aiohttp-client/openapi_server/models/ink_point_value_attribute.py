# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class InkPointValueAttribute(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, logical_maximum: float=None, logical_minimum: float=None, name: str=None):
        """InkPointValueAttribute - a model defined in OpenAPI

        :param logical_maximum: The logical_maximum of this InkPointValueAttribute.
        :param logical_minimum: The logical_minimum of this InkPointValueAttribute.
        :param name: The name of this InkPointValueAttribute.
        """
        self.openapi_types = {
            'logical_maximum': float,
            'logical_minimum': float,
            'name': str
        }

        self.attribute_map = {
            'logical_maximum': 'logicalMaximum',
            'logical_minimum': 'logicalMinimum',
            'name': 'name'
        }

        self._logical_maximum = logical_maximum
        self._logical_minimum = logical_minimum
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InkPointValueAttribute':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The inkPointValueAttribute of this InkPointValueAttribute.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def logical_maximum(self):
        """Gets the logical_maximum of this InkPointValueAttribute.

        The maximum value for the attribute

        :return: The logical_maximum of this InkPointValueAttribute.
        :rtype: float
        """
        return self._logical_maximum

    @logical_maximum.setter
    def logical_maximum(self, logical_maximum):
        """Sets the logical_maximum of this InkPointValueAttribute.

        The maximum value for the attribute

        :param logical_maximum: The logical_maximum of this InkPointValueAttribute.
        :type logical_maximum: float
        """

        self._logical_maximum = logical_maximum

    @property
    def logical_minimum(self):
        """Gets the logical_minimum of this InkPointValueAttribute.

        The minimum value for the attribute

        :return: The logical_minimum of this InkPointValueAttribute.
        :rtype: float
        """
        return self._logical_minimum

    @logical_minimum.setter
    def logical_minimum(self, logical_minimum):
        """Sets the logical_minimum of this InkPointValueAttribute.

        The minimum value for the attribute

        :param logical_minimum: The logical_minimum of this InkPointValueAttribute.
        :type logical_minimum: float
        """

        self._logical_minimum = logical_minimum

    @property
    def name(self):
        """Gets the name of this InkPointValueAttribute.

        The name of the point attribute.

        :return: The name of this InkPointValueAttribute.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InkPointValueAttribute.

        The name of the point attribute.

        :param name: The name of this InkPointValueAttribute.
        :type name: str
        """

        self._name = name
