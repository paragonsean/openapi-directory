# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.alternate_pattern_inner import AlternatePatternInner
from openapi_server.models.category_pattern import CategoryPattern
from openapi_server.models.class_pattern import ClassPattern
from openapi_server.models.point_details_pattern import PointDetailsPattern
from openapi_server.models.recognition_unit_inner_bounding_rectangle import RecognitionUnitInnerBoundingRectangle
from openapi_server.models.shape_pattern import ShapePattern
from openapi_server import util


class RecognitionUnitInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alternates: List[AlternatePatternInner]=None, bounding_rectangle: RecognitionUnitInnerBoundingRectangle=None, category: CategoryPattern=None, center: PointDetailsPattern=None, child_ids: List[int]=None, _class: ClassPattern=None, confidence: float=None, id: int=None, parent_id: int=None, points: List[PointDetailsPattern]=None, recognized_object: ShapePattern=None, recognized_text: str=None, rotated_bounding_rectangle: List[PointDetailsPattern]=None, rotation_angle: float=None, stroke_ids: List[int]=None):
        """RecognitionUnitInner - a model defined in OpenAPI

        :param alternates: The alternates of this RecognitionUnitInner.
        :param bounding_rectangle: The bounding_rectangle of this RecognitionUnitInner.
        :param category: The category of this RecognitionUnitInner.
        :param center: The center of this RecognitionUnitInner.
        :param child_ids: The child_ids of this RecognitionUnitInner.
        :param _class: The _class of this RecognitionUnitInner.
        :param confidence: The confidence of this RecognitionUnitInner.
        :param id: The id of this RecognitionUnitInner.
        :param parent_id: The parent_id of this RecognitionUnitInner.
        :param points: The points of this RecognitionUnitInner.
        :param recognized_object: The recognized_object of this RecognitionUnitInner.
        :param recognized_text: The recognized_text of this RecognitionUnitInner.
        :param rotated_bounding_rectangle: The rotated_bounding_rectangle of this RecognitionUnitInner.
        :param rotation_angle: The rotation_angle of this RecognitionUnitInner.
        :param stroke_ids: The stroke_ids of this RecognitionUnitInner.
        """
        self.openapi_types = {
            'alternates': List[AlternatePatternInner],
            'bounding_rectangle': RecognitionUnitInnerBoundingRectangle,
            'category': CategoryPattern,
            'center': PointDetailsPattern,
            'child_ids': List[int],
            '_class': ClassPattern,
            'confidence': float,
            'id': int,
            'parent_id': int,
            'points': List[PointDetailsPattern],
            'recognized_object': ShapePattern,
            'recognized_text': str,
            'rotated_bounding_rectangle': List[PointDetailsPattern],
            'rotation_angle': float,
            'stroke_ids': List[int]
        }

        self.attribute_map = {
            'alternates': 'alternates',
            'bounding_rectangle': 'boundingRectangle',
            'category': 'category',
            'center': 'center',
            'child_ids': 'childIds',
            '_class': 'class',
            'confidence': 'confidence',
            'id': 'id',
            'parent_id': 'parentId',
            'points': 'points',
            'recognized_object': 'recognizedObject',
            'recognized_text': 'recognizedText',
            'rotated_bounding_rectangle': 'rotatedBoundingRectangle',
            'rotation_angle': 'rotationAngle',
            'stroke_ids': 'strokeIds'
        }

        self._alternates = alternates
        self._bounding_rectangle = bounding_rectangle
        self._category = category
        self._center = center
        self._child_ids = child_ids
        self.__class = _class
        self._confidence = confidence
        self._id = id
        self._parent_id = parent_id
        self._points = points
        self._recognized_object = recognized_object
        self._recognized_text = recognized_text
        self._rotated_bounding_rectangle = rotated_bounding_rectangle
        self._rotation_angle = rotation_angle
        self._stroke_ids = stroke_ids

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RecognitionUnitInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The recognitionUnit_inner of this RecognitionUnitInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alternates(self):
        """Gets the alternates of this RecognitionUnitInner.

        The list of alternates for the core recognition result. In case of handwriting related recognition units, this list includes other words that are close possibilities to the results provided as 'recognizedText'.

        :return: The alternates of this RecognitionUnitInner.
        :rtype: List[AlternatePatternInner]
        """
        return self._alternates

    @alternates.setter
    def alternates(self, alternates):
        """Sets the alternates of this RecognitionUnitInner.

        The list of alternates for the core recognition result. In case of handwriting related recognition units, this list includes other words that are close possibilities to the results provided as 'recognizedText'.

        :param alternates: The alternates of this RecognitionUnitInner.
        :type alternates: List[AlternatePatternInner]
        """

        self._alternates = alternates

    @property
    def bounding_rectangle(self):
        """Gets the bounding_rectangle of this RecognitionUnitInner.


        :return: The bounding_rectangle of this RecognitionUnitInner.
        :rtype: RecognitionUnitInnerBoundingRectangle
        """
        return self._bounding_rectangle

    @bounding_rectangle.setter
    def bounding_rectangle(self, bounding_rectangle):
        """Sets the bounding_rectangle of this RecognitionUnitInner.


        :param bounding_rectangle: The bounding_rectangle of this RecognitionUnitInner.
        :type bounding_rectangle: RecognitionUnitInnerBoundingRectangle
        """

        self._bounding_rectangle = bounding_rectangle

    @property
    def category(self):
        """Gets the category of this RecognitionUnitInner.


        :return: The category of this RecognitionUnitInner.
        :rtype: CategoryPattern
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this RecognitionUnitInner.


        :param category: The category of this RecognitionUnitInner.
        :type category: CategoryPattern
        """
        if category is None:
            raise ValueError("Invalid value for `category`, must not be `None`")

        self._category = category

    @property
    def center(self):
        """Gets the center of this RecognitionUnitInner.


        :return: The center of this RecognitionUnitInner.
        :rtype: PointDetailsPattern
        """
        return self._center

    @center.setter
    def center(self, center):
        """Sets the center of this RecognitionUnitInner.


        :param center: The center of this RecognitionUnitInner.
        :type center: PointDetailsPattern
        """

        self._center = center

    @property
    def child_ids(self):
        """Gets the child_ids of this RecognitionUnitInner.

        An array of integers representing the identifier of each child of the current recognition unit.

        :return: The child_ids of this RecognitionUnitInner.
        :rtype: List[int]
        """
        return self._child_ids

    @child_ids.setter
    def child_ids(self, child_ids):
        """Sets the child_ids of this RecognitionUnitInner.

        An array of integers representing the identifier of each child of the current recognition unit.

        :param child_ids: The child_ids of this RecognitionUnitInner.
        :type child_ids: List[int]
        """

        self._child_ids = child_ids

    @property
    def _class(self):
        """Gets the _class of this RecognitionUnitInner.


        :return: The _class of this RecognitionUnitInner.
        :rtype: ClassPattern
        """
        return self.__class

    @_class.setter
    def _class(self, _class):
        """Sets the _class of this RecognitionUnitInner.


        :param _class: The _class of this RecognitionUnitInner.
        :type _class: ClassPattern
        """
        if _class is None:
            raise ValueError("Invalid value for `_class`, must not be `None`")

        self.__class = _class

    @property
    def confidence(self):
        """Gets the confidence of this RecognitionUnitInner.

        A number between 0 and 1 which indicates the confidence level in the result.

        :return: The confidence of this RecognitionUnitInner.
        :rtype: float
        """
        return self._confidence

    @confidence.setter
    def confidence(self, confidence):
        """Sets the confidence of this RecognitionUnitInner.

        A number between 0 and 1 which indicates the confidence level in the result.

        :param confidence: The confidence of this RecognitionUnitInner.
        :type confidence: float
        """

        self._confidence = confidence

    @property
    def id(self):
        """Gets the id of this RecognitionUnitInner.

        The identifier of the recognition unit. This id is used to indicate parent/child relationship between different recognition units.

        :return: The id of this RecognitionUnitInner.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RecognitionUnitInner.

        The identifier of the recognition unit. This id is used to indicate parent/child relationship between different recognition units.

        :param id: The id of this RecognitionUnitInner.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def parent_id(self):
        """Gets the parent_id of this RecognitionUnitInner.

        The id of the parent node in the tree structure of the recognition results. parent = 0 indicates that there is no dedicated parent node for this unit.

        :return: The parent_id of this RecognitionUnitInner.
        :rtype: int
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this RecognitionUnitInner.

        The id of the parent node in the tree structure of the recognition results. parent = 0 indicates that there is no dedicated parent node for this unit.

        :param parent_id: The parent_id of this RecognitionUnitInner.
        :type parent_id: int
        """
        if parent_id is None:
            raise ValueError("Invalid value for `parent_id`, must not be `None`")

        self._parent_id = parent_id

    @property
    def points(self):
        """Gets the points of this RecognitionUnitInner.

        Array of point objects that represent points that are relevant to the type of recognition unit. For example, for a leaf node of inkDrawing category that represents a triangle, points would include the x, y coordinates of the vertices of the recognized triangle. The points represent the coordinates used to create the perfectly drawn shape that is closest to the original input. They may not exactly match.

        :return: The points of this RecognitionUnitInner.
        :rtype: List[PointDetailsPattern]
        """
        return self._points

    @points.setter
    def points(self, points):
        """Sets the points of this RecognitionUnitInner.

        Array of point objects that represent points that are relevant to the type of recognition unit. For example, for a leaf node of inkDrawing category that represents a triangle, points would include the x, y coordinates of the vertices of the recognized triangle. The points represent the coordinates used to create the perfectly drawn shape that is closest to the original input. They may not exactly match.

        :param points: The points of this RecognitionUnitInner.
        :type points: List[PointDetailsPattern]
        """

        self._points = points

    @property
    def recognized_object(self):
        """Gets the recognized_object of this RecognitionUnitInner.


        :return: The recognized_object of this RecognitionUnitInner.
        :rtype: ShapePattern
        """
        return self._recognized_object

    @recognized_object.setter
    def recognized_object(self, recognized_object):
        """Sets the recognized_object of this RecognitionUnitInner.


        :param recognized_object: The recognized_object of this RecognitionUnitInner.
        :type recognized_object: ShapePattern
        """

        self._recognized_object = recognized_object

    @property
    def recognized_text(self):
        """Gets the recognized_text of this RecognitionUnitInner.

        The string contains the text that was recognized. It can be an empty string if the recognizer cannot determine the text.

        :return: The recognized_text of this RecognitionUnitInner.
        :rtype: str
        """
        return self._recognized_text

    @recognized_text.setter
    def recognized_text(self, recognized_text):
        """Sets the recognized_text of this RecognitionUnitInner.

        The string contains the text that was recognized. It can be an empty string if the recognizer cannot determine the text.

        :param recognized_text: The recognized_text of this RecognitionUnitInner.
        :type recognized_text: str
        """

        self._recognized_text = recognized_text

    @property
    def rotated_bounding_rectangle(self):
        """Gets the rotated_bounding_rectangle of this RecognitionUnitInner.

        This is the rotated bounding rectangle that covers the entire recognized object along the angle of rotation of the object. Note that this is NOT the same as rotating the boundingRectangle by the rotation angle.

        :return: The rotated_bounding_rectangle of this RecognitionUnitInner.
        :rtype: List[PointDetailsPattern]
        """
        return self._rotated_bounding_rectangle

    @rotated_bounding_rectangle.setter
    def rotated_bounding_rectangle(self, rotated_bounding_rectangle):
        """Sets the rotated_bounding_rectangle of this RecognitionUnitInner.

        This is the rotated bounding rectangle that covers the entire recognized object along the angle of rotation of the object. Note that this is NOT the same as rotating the boundingRectangle by the rotation angle.

        :param rotated_bounding_rectangle: The rotated_bounding_rectangle of this RecognitionUnitInner.
        :type rotated_bounding_rectangle: List[PointDetailsPattern]
        """

        self._rotated_bounding_rectangle = rotated_bounding_rectangle

    @property
    def rotation_angle(self):
        """Gets the rotation_angle of this RecognitionUnitInner.

        This is the angle at which the unit is rotated in degrees with respect to the positive X axis.

        :return: The rotation_angle of this RecognitionUnitInner.
        :rtype: float
        """
        return self._rotation_angle

    @rotation_angle.setter
    def rotation_angle(self, rotation_angle):
        """Sets the rotation_angle of this RecognitionUnitInner.

        This is the angle at which the unit is rotated in degrees with respect to the positive X axis.

        :param rotation_angle: The rotation_angle of this RecognitionUnitInner.
        :type rotation_angle: float
        """

        self._rotation_angle = rotation_angle

    @property
    def stroke_ids(self):
        """Gets the stroke_ids of this RecognitionUnitInner.

        This is an array of integers representing the list of stroke Identifiers from the input request body that belong to this recognition unit.

        :return: The stroke_ids of this RecognitionUnitInner.
        :rtype: List[int]
        """
        return self._stroke_ids

    @stroke_ids.setter
    def stroke_ids(self, stroke_ids):
        """Sets the stroke_ids of this RecognitionUnitInner.

        This is an array of integers representing the list of stroke Identifiers from the input request body that belong to this recognition unit.

        :param stroke_ids: The stroke_ids of this RecognitionUnitInner.
        :type stroke_ids: List[int]
        """
        if stroke_ids is None:
            raise ValueError("Invalid value for `stroke_ids`, must not be `None`")

        self._stroke_ids = stroke_ids
