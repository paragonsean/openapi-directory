# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.drawing_attributes_pattern import DrawingAttributesPattern
from openapi_server.models.ink_point import InkPoint
from openapi_server import util


class Stroke(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, drawing_attributes: DrawingAttributesPattern=None, id: int=None, kind: str=None, language: str=None, points: List[InkPoint]=None):
        """Stroke - a model defined in OpenAPI

        :param drawing_attributes: The drawing_attributes of this Stroke.
        :param id: The id of this Stroke.
        :param kind: The kind of this Stroke.
        :param language: The language of this Stroke.
        :param points: The points of this Stroke.
        """
        self.openapi_types = {
            'drawing_attributes': DrawingAttributesPattern,
            'id': int,
            'kind': str,
            'language': str,
            'points': List[InkPoint]
        }

        self.attribute_map = {
            'drawing_attributes': 'drawingAttributes',
            'id': 'id',
            'kind': 'kind',
            'language': 'language',
            'points': 'points'
        }

        self._drawing_attributes = drawing_attributes
        self._id = id
        self._kind = kind
        self._language = language
        self._points = points

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Stroke':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The stroke of this Stroke.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def drawing_attributes(self):
        """Gets the drawing_attributes of this Stroke.


        :return: The drawing_attributes of this Stroke.
        :rtype: DrawingAttributesPattern
        """
        return self._drawing_attributes

    @drawing_attributes.setter
    def drawing_attributes(self, drawing_attributes):
        """Sets the drawing_attributes of this Stroke.


        :param drawing_attributes: The drawing_attributes of this Stroke.
        :type drawing_attributes: DrawingAttributesPattern
        """

        self._drawing_attributes = drawing_attributes

    @property
    def id(self):
        """Gets the id of this Stroke.

        This is treated as a unique identifier for each stroke within a request. If the id is repeated within the same request, the service will return an error.

        :return: The id of this Stroke.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Stroke.

        This is treated as a unique identifier for each stroke within a request. If the id is repeated within the same request, the service will return an error.

        :param id: The id of this Stroke.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def kind(self):
        """Gets the kind of this Stroke.

        This is an optional property which influences the decision about what the stroke kind is between inkWriting and inkDrawing. This property should be set ONLY if the type of user content is known ahead of time. Not setting this value implies the kind is not known ahead of time. Kind represents the type of content the stroke is a part of.

        :return: The kind of this Stroke.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this Stroke.

        This is an optional property which influences the decision about what the stroke kind is between inkWriting and inkDrawing. This property should be set ONLY if the type of user content is known ahead of time. Not setting this value implies the kind is not known ahead of time. Kind represents the type of content the stroke is a part of.

        :param kind: The kind of this Stroke.
        :type kind: str
        """
        allowed_values = ["inkDrawing", "inkWriting"]  # noqa: E501
        if kind not in allowed_values:
            raise ValueError(
                "Invalid value for `kind` ({0}), must be one of {1}"
                .format(kind, allowed_values)
            )

        self._kind = kind

    @property
    def language(self):
        """Gets the language of this Stroke.

        The IETF BCP 47 language code (for ex. en-US, en-GB, hi-IN etc.) of the expected language for the handwritten content in this stroke. The response will include results from this language.

        :return: The language of this Stroke.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this Stroke.

        The IETF BCP 47 language code (for ex. en-US, en-GB, hi-IN etc.) of the expected language for the handwritten content in this stroke. The response will include results from this language.

        :param language: The language of this Stroke.
        :type language: str
        """

        self._language = language

    @property
    def points(self):
        """Gets the points of this Stroke.


        :return: The points of this Stroke.
        :rtype: List[InkPoint]
        """
        return self._points

    @points.setter
    def points(self, points):
        """Sets the points of this Stroke.


        :param points: The points of this Stroke.
        :type points: List[InkPoint]
        """
        if points is None:
            raise ValueError("Invalid value for `points`, must not be `None`")

        self._points = points
