# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class InkPoint(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, barrel_pressure: float=None, barrel_switch: bool=None, eraser: bool=None, height: float=None, inverted: bool=None, secondary_tip: bool=None, timestamp: float=None, tip_pressure: float=None, tip_switch: bool=None, width: float=None, x: float=None, x_tilt: float=None, y: float=None, y_tilt: float=None, z: float=None):
        """InkPoint - a model defined in OpenAPI

        :param barrel_pressure: The barrel_pressure of this InkPoint.
        :param barrel_switch: The barrel_switch of this InkPoint.
        :param eraser: The eraser of this InkPoint.
        :param height: The height of this InkPoint.
        :param inverted: The inverted of this InkPoint.
        :param secondary_tip: The secondary_tip of this InkPoint.
        :param timestamp: The timestamp of this InkPoint.
        :param tip_pressure: The tip_pressure of this InkPoint.
        :param tip_switch: The tip_switch of this InkPoint.
        :param width: The width of this InkPoint.
        :param x: The x of this InkPoint.
        :param x_tilt: The x_tilt of this InkPoint.
        :param y: The y of this InkPoint.
        :param y_tilt: The y_tilt of this InkPoint.
        :param z: The z of this InkPoint.
        """
        self.openapi_types = {
            'barrel_pressure': float,
            'barrel_switch': bool,
            'eraser': bool,
            'height': float,
            'inverted': bool,
            'secondary_tip': bool,
            'timestamp': float,
            'tip_pressure': float,
            'tip_switch': bool,
            'width': float,
            'x': float,
            'x_tilt': float,
            'y': float,
            'y_tilt': float,
            'z': float
        }

        self.attribute_map = {
            'barrel_pressure': 'barrelPressure',
            'barrel_switch': 'barrelSwitch',
            'eraser': 'eraser',
            'height': 'height',
            'inverted': 'inverted',
            'secondary_tip': 'secondaryTip',
            'timestamp': 'timestamp',
            'tip_pressure': 'tipPressure',
            'tip_switch': 'tipSwitch',
            'width': 'width',
            'x': 'x',
            'x_tilt': 'xTilt',
            'y': 'y',
            'y_tilt': 'yTilt',
            'z': 'z'
        }

        self._barrel_pressure = barrel_pressure
        self._barrel_switch = barrel_switch
        self._eraser = eraser
        self._height = height
        self._inverted = inverted
        self._secondary_tip = secondary_tip
        self._timestamp = timestamp
        self._tip_pressure = tip_pressure
        self._tip_switch = tip_switch
        self._width = width
        self._x = x
        self._x_tilt = x_tilt
        self._y = y
        self._y_tilt = y_tilt
        self._z = z

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InkPoint':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The inkPoint of this InkPoint.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def barrel_pressure(self):
        """Gets the barrel_pressure of this InkPoint.

        The force exerted directly by the user on a transducer sensor, such as a pressure-sensitive button on the barrel of a stylus. This may not be used for recognition.

        :return: The barrel_pressure of this InkPoint.
        :rtype: float
        """
        return self._barrel_pressure

    @barrel_pressure.setter
    def barrel_pressure(self, barrel_pressure):
        """Sets the barrel_pressure of this InkPoint.

        The force exerted directly by the user on a transducer sensor, such as a pressure-sensitive button on the barrel of a stylus. This may not be used for recognition.

        :param barrel_pressure: The barrel_pressure of this InkPoint.
        :type barrel_pressure: float
        """

        self._barrel_pressure = barrel_pressure

    @property
    def barrel_switch(self):
        """Gets the barrel_switch of this InkPoint.

        A non-tip button located on the barrel of a stylus. Its function is typically mapped to a system secondary button. This may not be used for recognition.

        :return: The barrel_switch of this InkPoint.
        :rtype: bool
        """
        return self._barrel_switch

    @barrel_switch.setter
    def barrel_switch(self, barrel_switch):
        """Sets the barrel_switch of this InkPoint.

        A non-tip button located on the barrel of a stylus. Its function is typically mapped to a system secondary button. This may not be used for recognition.

        :param barrel_switch: The barrel_switch of this InkPoint.
        :type barrel_switch: bool
        """

        self._barrel_switch = barrel_switch

    @property
    def eraser(self):
        """Gets the eraser of this InkPoint.

        The control is used for erasing objects. It is typically located opposite the writing end of a stylus. This may not be used for recognition.

        :return: The eraser of this InkPoint.
        :rtype: bool
        """
        return self._eraser

    @eraser.setter
    def eraser(self, eraser):
        """Sets the eraser of this InkPoint.

        The control is used for erasing objects. It is typically located opposite the writing end of a stylus. This may not be used for recognition.

        :param eraser: The eraser of this InkPoint.
        :type eraser: bool
        """

        self._eraser = eraser

    @property
    def height(self):
        """Gets the height of this InkPoint.

        The height of the tip of the writing instrument. This is used by touch screen devices to report the height of the finger contact on the writing surface. This may not be used for recognition.

        :return: The height of this InkPoint.
        :rtype: float
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this InkPoint.

        The height of the tip of the writing instrument. This is used by touch screen devices to report the height of the finger contact on the writing surface. This may not be used for recognition.

        :param height: The height of this InkPoint.
        :type height: float
        """

        self._height = height

    @property
    def inverted(self):
        """Gets the inverted of this InkPoint.

        A value that indicates that the currently sensed position originates from the end of a stylus opposite the tip switch. This may not be used for recognition.

        :return: The inverted of this InkPoint.
        :rtype: bool
        """
        return self._inverted

    @inverted.setter
    def inverted(self, inverted):
        """Sets the inverted of this InkPoint.

        A value that indicates that the currently sensed position originates from the end of a stylus opposite the tip switch. This may not be used for recognition.

        :param inverted: The inverted of this InkPoint.
        :type inverted: bool
        """

        self._inverted = inverted

    @property
    def secondary_tip(self):
        """Gets the secondary_tip of this InkPoint.

        A secondary switch used in conjunction with the tip switch to indicate pressure above a certain threshold applied with the stylus. This may not be used for recognition.

        :return: The secondary_tip of this InkPoint.
        :rtype: bool
        """
        return self._secondary_tip

    @secondary_tip.setter
    def secondary_tip(self, secondary_tip):
        """Sets the secondary_tip of this InkPoint.

        A secondary switch used in conjunction with the tip switch to indicate pressure above a certain threshold applied with the stylus. This may not be used for recognition.

        :param secondary_tip: The secondary_tip of this InkPoint.
        :type secondary_tip: bool
        """

        self._secondary_tip = secondary_tip

    @property
    def timestamp(self):
        """Gets the timestamp of this InkPoint.

        The time relative to the absolute time the transducer last became active. This may not be used for recognition.

        :return: The timestamp of this InkPoint.
        :rtype: float
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this InkPoint.

        The time relative to the absolute time the transducer last became active. This may not be used for recognition.

        :param timestamp: The timestamp of this InkPoint.
        :type timestamp: float
        """

        self._timestamp = timestamp

    @property
    def tip_pressure(self):
        """Gets the tip_pressure of this InkPoint.

        The force exerted against the tablet surface by the transducer, typically a stylus. This may not be used for recognition.

        :return: The tip_pressure of this InkPoint.
        :rtype: float
        """
        return self._tip_pressure

    @tip_pressure.setter
    def tip_pressure(self, tip_pressure):
        """Sets the tip_pressure of this InkPoint.

        The force exerted against the tablet surface by the transducer, typically a stylus. This may not be used for recognition.

        :param tip_pressure: The tip_pressure of this InkPoint.
        :type tip_pressure: float
        """

        self._tip_pressure = tip_pressure

    @property
    def tip_switch(self):
        """Gets the tip_switch of this InkPoint.

        A switch located on the tip of a stylus indicating contact of the stylus with a surface. This may not be used for recognition.

        :return: The tip_switch of this InkPoint.
        :rtype: bool
        """
        return self._tip_switch

    @tip_switch.setter
    def tip_switch(self, tip_switch):
        """Sets the tip_switch of this InkPoint.

        A switch located on the tip of a stylus indicating contact of the stylus with a surface. This may not be used for recognition.

        :param tip_switch: The tip_switch of this InkPoint.
        :type tip_switch: bool
        """

        self._tip_switch = tip_switch

    @property
    def width(self):
        """Gets the width of this InkPoint.

        The width of the tip of the writing instrument. This is used by touch screen devices to report the width of the finger contact on the writing surface. This may not be used for recognition.

        :return: The width of this InkPoint.
        :rtype: float
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this InkPoint.

        The width of the tip of the writing instrument. This is used by touch screen devices to report the width of the finger contact on the writing surface. This may not be used for recognition.

        :param width: The width of this InkPoint.
        :type width: float
        """

        self._width = width

    @property
    def x(self):
        """Gets the x of this InkPoint.

        The x coordinate of the pen location on the writing surface.

        :return: The x of this InkPoint.
        :rtype: float
        """
        return self._x

    @x.setter
    def x(self, x):
        """Sets the x of this InkPoint.

        The x coordinate of the pen location on the writing surface.

        :param x: The x of this InkPoint.
        :type x: float
        """
        if x is None:
            raise ValueError("Invalid value for `x`, must not be `None`")

        self._x = x

    @property
    def x_tilt(self):
        """Gets the x_tilt of this InkPoint.

        The plane angle between the Y-Z plane and the plane containing the transducer axis and the Y axis. This may not be used for recognition.

        :return: The x_tilt of this InkPoint.
        :rtype: float
        """
        return self._x_tilt

    @x_tilt.setter
    def x_tilt(self, x_tilt):
        """Sets the x_tilt of this InkPoint.

        The plane angle between the Y-Z plane and the plane containing the transducer axis and the Y axis. This may not be used for recognition.

        :param x_tilt: The x_tilt of this InkPoint.
        :type x_tilt: float
        """

        self._x_tilt = x_tilt

    @property
    def y(self):
        """Gets the y of this InkPoint.

        The y coordinate of the pen location on the writing surface.

        :return: The y of this InkPoint.
        :rtype: float
        """
        return self._y

    @y.setter
    def y(self, y):
        """Sets the y of this InkPoint.

        The y coordinate of the pen location on the writing surface.

        :param y: The y of this InkPoint.
        :type y: float
        """
        if y is None:
            raise ValueError("Invalid value for `y`, must not be `None`")

        self._y = y

    @property
    def y_tilt(self):
        """Gets the y_tilt of this InkPoint.

        The angle between the X-Z and transducer-X planes. A positive Y Tilt is toward the user. This may not be used for recognition.

        :return: The y_tilt of this InkPoint.
        :rtype: float
        """
        return self._y_tilt

    @y_tilt.setter
    def y_tilt(self, y_tilt):
        """Sets the y_tilt of this InkPoint.

        The angle between the X-Z and transducer-X planes. A positive Y Tilt is toward the user. This may not be used for recognition.

        :param y_tilt: The y_tilt of this InkPoint.
        :type y_tilt: float
        """

        self._y_tilt = y_tilt

    @property
    def z(self):
        """Gets the z of this InkPoint.

        The z coordinate of the pen location on the writing space. This may not be used for recognition.

        :return: The z of this InkPoint.
        :rtype: float
        """
        return self._z

    @z.setter
    def z(self, z):
        """Sets the z of this InkPoint.

        The z coordinate of the pen location on the writing space. This may not be used for recognition.

        :param z: The z of this InkPoint.
        :type z: float
        """

        self._z = z
