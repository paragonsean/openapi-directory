# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.drawing_attributes_pattern_color import DrawingAttributesPatternColor
from openapi_server import util


class DrawingAttributesPattern(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, color: DrawingAttributesPatternColor=None, fit_to_curve: bool=None, height: float=None, ignore_pressure: bool=None, raster_op: str=None, tip: str=None, width: float=None):
        """DrawingAttributesPattern - a model defined in OpenAPI

        :param color: The color of this DrawingAttributesPattern.
        :param fit_to_curve: The fit_to_curve of this DrawingAttributesPattern.
        :param height: The height of this DrawingAttributesPattern.
        :param ignore_pressure: The ignore_pressure of this DrawingAttributesPattern.
        :param raster_op: The raster_op of this DrawingAttributesPattern.
        :param tip: The tip of this DrawingAttributesPattern.
        :param width: The width of this DrawingAttributesPattern.
        """
        self.openapi_types = {
            'color': DrawingAttributesPatternColor,
            'fit_to_curve': bool,
            'height': float,
            'ignore_pressure': bool,
            'raster_op': str,
            'tip': str,
            'width': float
        }

        self.attribute_map = {
            'color': 'color',
            'fit_to_curve': 'fitToCurve',
            'height': 'height',
            'ignore_pressure': 'ignorePressure',
            'raster_op': 'rasterOp',
            'tip': 'tip',
            'width': 'width'
        }

        self._color = color
        self._fit_to_curve = fit_to_curve
        self._height = height
        self._ignore_pressure = ignore_pressure
        self._raster_op = raster_op
        self._tip = tip
        self._width = width

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DrawingAttributesPattern':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The drawingAttributesPattern of this DrawingAttributesPattern.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def color(self):
        """Gets the color of this DrawingAttributesPattern.


        :return: The color of this DrawingAttributesPattern.
        :rtype: DrawingAttributesPatternColor
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this DrawingAttributesPattern.


        :param color: The color of this DrawingAttributesPattern.
        :type color: DrawingAttributesPatternColor
        """

        self._color = color

    @property
    def fit_to_curve(self):
        """Gets the fit_to_curve of this DrawingAttributesPattern.

         This indicates whether Bezier smoothing is used to render the stroke

        :return: The fit_to_curve of this DrawingAttributesPattern.
        :rtype: bool
        """
        return self._fit_to_curve

    @fit_to_curve.setter
    def fit_to_curve(self, fit_to_curve):
        """Sets the fit_to_curve of this DrawingAttributesPattern.

         This indicates whether Bezier smoothing is used to render the stroke

        :param fit_to_curve: The fit_to_curve of this DrawingAttributesPattern.
        :type fit_to_curve: bool
        """

        self._fit_to_curve = fit_to_curve

    @property
    def height(self):
        """Gets the height of this DrawingAttributesPattern.

        The height of the stylus used to draw the stroke

        :return: The height of this DrawingAttributesPattern.
        :rtype: float
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this DrawingAttributesPattern.

        The height of the stylus used to draw the stroke

        :param height: The height of this DrawingAttributesPattern.
        :type height: float
        """

        self._height = height

    @property
    def ignore_pressure(self):
        """Gets the ignore_pressure of this DrawingAttributesPattern.

         This indicates whether the thickness of a rendered Stroke changes according the amount of pressure applied.

        :return: The ignore_pressure of this DrawingAttributesPattern.
        :rtype: bool
        """
        return self._ignore_pressure

    @ignore_pressure.setter
    def ignore_pressure(self, ignore_pressure):
        """Sets the ignore_pressure of this DrawingAttributesPattern.

         This indicates whether the thickness of a rendered Stroke changes according the amount of pressure applied.

        :param ignore_pressure: The ignore_pressure of this DrawingAttributesPattern.
        :type ignore_pressure: bool
        """

        self._ignore_pressure = ignore_pressure

    @property
    def raster_op(self):
        """Gets the raster_op of this DrawingAttributesPattern.


        :return: The raster_op of this DrawingAttributesPattern.
        :rtype: str
        """
        return self._raster_op

    @raster_op.setter
    def raster_op(self, raster_op):
        """Sets the raster_op of this DrawingAttributesPattern.


        :param raster_op: The raster_op of this DrawingAttributesPattern.
        :type raster_op: str
        """
        allowed_values = ["noOperation", "copyPen", "maskPen"]  # noqa: E501
        if raster_op not in allowed_values:
            raise ValueError(
                "Invalid value for `raster_op` ({0}), must be one of {1}"
                .format(raster_op, allowed_values)
            )

        self._raster_op = raster_op

    @property
    def tip(self):
        """Gets the tip of this DrawingAttributesPattern.

        This specifies the tip to be used to draw a stroke

        :return: The tip of this DrawingAttributesPattern.
        :rtype: str
        """
        return self._tip

    @tip.setter
    def tip(self, tip):
        """Sets the tip of this DrawingAttributesPattern.

        This specifies the tip to be used to draw a stroke

        :param tip: The tip of this DrawingAttributesPattern.
        :type tip: str
        """
        allowed_values = ["ellipse", "rectangle"]  # noqa: E501
        if tip not in allowed_values:
            raise ValueError(
                "Invalid value for `tip` ({0}), must be one of {1}"
                .format(tip, allowed_values)
            )

        self._tip = tip

    @property
    def width(self):
        """Gets the width of this DrawingAttributesPattern.

        The width of the stylus used to draw the stroke

        :return: The width of this DrawingAttributesPattern.
        :rtype: float
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this DrawingAttributesPattern.

        The width of the stylus used to draw the stroke

        :param width: The width of this DrawingAttributesPattern.
        :type width: float
        """

        self._width = width
