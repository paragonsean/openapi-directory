# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.recognition_unit_inner import RecognitionUnitInner
from openapi_server import util


class AnalysisResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, language: str=None, recognition_units: List[RecognitionUnitInner]=None, unit: str=None, unit_multiple: float=None):
        """AnalysisResponse - a model defined in OpenAPI

        :param language: The language of this AnalysisResponse.
        :param recognition_units: The recognition_units of this AnalysisResponse.
        :param unit: The unit of this AnalysisResponse.
        :param unit_multiple: The unit_multiple of this AnalysisResponse.
        """
        self.openapi_types = {
            'language': str,
            'recognition_units': List[RecognitionUnitInner],
            'unit': str,
            'unit_multiple': float
        }

        self.attribute_map = {
            'language': 'language',
            'recognition_units': 'recognitionUnits',
            'unit': 'unit',
            'unit_multiple': 'unitMultiple'
        }

        self._language = language
        self._recognition_units = recognition_units
        self._unit = unit
        self._unit_multiple = unit_multiple

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AnalysisResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The analysisResponse of this AnalysisResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def language(self):
        """Gets the language of this AnalysisResponse.

        This is the language used for recognizing handwriting from the ink strokes in the request.

        :return: The language of this AnalysisResponse.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this AnalysisResponse.

        This is the language used for recognizing handwriting from the ink strokes in the request.

        :param language: The language of this AnalysisResponse.
        :type language: str
        """

        self._language = language

    @property
    def recognition_units(self):
        """Gets the recognition_units of this AnalysisResponse.

        The list of recognition units based on the analysis of the ink strokes.

        :return: The recognition_units of this AnalysisResponse.
        :rtype: List[RecognitionUnitInner]
        """
        return self._recognition_units

    @recognition_units.setter
    def recognition_units(self, recognition_units):
        """Sets the recognition_units of this AnalysisResponse.

        The list of recognition units based on the analysis of the ink strokes.

        :param recognition_units: The recognition_units of this AnalysisResponse.
        :type recognition_units: List[RecognitionUnitInner]
        """
        if recognition_units is None:
            raise ValueError("Invalid value for `recognition_units`, must not be `None`")

        self._recognition_units = recognition_units

    @property
    def unit(self):
        """Gets the unit of this AnalysisResponse.

        This is the physical unit of the ink strokes. It is up to the application developer to decide how to convert the device specific units to physical units before calling the service. The conversion factor can be different based on the type of the device used.

        :return: The unit of this AnalysisResponse.
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this AnalysisResponse.

        This is the physical unit of the ink strokes. It is up to the application developer to decide how to convert the device specific units to physical units before calling the service. The conversion factor can be different based on the type of the device used.

        :param unit: The unit of this AnalysisResponse.
        :type unit: str
        """
        allowed_values = ["mm", "cm", "in"]  # noqa: E501
        if unit not in allowed_values:
            raise ValueError(
                "Invalid value for `unit` ({0}), must be one of {1}"
                .format(unit, allowed_values)
            )

        self._unit = unit

    @property
    def unit_multiple(self):
        """Gets the unit_multiple of this AnalysisResponse.

         This is a scaling factor to be applied to the point coordinates when interpreting them in the physical units specified.

        :return: The unit_multiple of this AnalysisResponse.
        :rtype: float
        """
        return self._unit_multiple

    @unit_multiple.setter
    def unit_multiple(self, unit_multiple):
        """Sets the unit_multiple of this AnalysisResponse.

         This is a scaling factor to be applied to the point coordinates when interpreting them in the physical units specified.

        :param unit_multiple: The unit_multiple of this AnalysisResponse.
        :type unit_multiple: float
        """

        self._unit_multiple = unit_multiple
