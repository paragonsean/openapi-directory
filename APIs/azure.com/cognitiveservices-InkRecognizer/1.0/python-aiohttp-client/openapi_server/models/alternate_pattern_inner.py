# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.leaf_category_pattern import LeafCategoryPattern
from openapi_server.models.point_details_pattern import PointDetailsPattern
from openapi_server import util


class AlternatePatternInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category: LeafCategoryPattern=None, confidence: float=None, points: List[PointDetailsPattern]=None, recognized_string: str=None, rotation_angle: float=None):
        """AlternatePatternInner - a model defined in OpenAPI

        :param category: The category of this AlternatePatternInner.
        :param confidence: The confidence of this AlternatePatternInner.
        :param points: The points of this AlternatePatternInner.
        :param recognized_string: The recognized_string of this AlternatePatternInner.
        :param rotation_angle: The rotation_angle of this AlternatePatternInner.
        """
        self.openapi_types = {
            'category': LeafCategoryPattern,
            'confidence': float,
            'points': List[PointDetailsPattern],
            'recognized_string': str,
            'rotation_angle': float
        }

        self.attribute_map = {
            'category': 'category',
            'confidence': 'confidence',
            'points': 'points',
            'recognized_string': 'recognizedString',
            'rotation_angle': 'rotationAngle'
        }

        self._category = category
        self._confidence = confidence
        self._points = points
        self._recognized_string = recognized_string
        self._rotation_angle = rotation_angle

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AlternatePatternInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The alternatePattern_inner of this AlternatePatternInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category(self):
        """Gets the category of this AlternatePatternInner.


        :return: The category of this AlternatePatternInner.
        :rtype: LeafCategoryPattern
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this AlternatePatternInner.


        :param category: The category of this AlternatePatternInner.
        :type category: LeafCategoryPattern
        """
        if category is None:
            raise ValueError("Invalid value for `category`, must not be `None`")

        self._category = category

    @property
    def confidence(self):
        """Gets the confidence of this AlternatePatternInner.

        A number between 0 and 1 which indicates the confidence level in the result

        :return: The confidence of this AlternatePatternInner.
        :rtype: float
        """
        return self._confidence

    @confidence.setter
    def confidence(self, confidence):
        """Sets the confidence of this AlternatePatternInner.

        A number between 0 and 1 which indicates the confidence level in the result

        :param confidence: The confidence of this AlternatePatternInner.
        :type confidence: float
        """

        self._confidence = confidence

    @property
    def points(self):
        """Gets the points of this AlternatePatternInner.

        Array of point objects that represent points that are relevant to the type of recognition unit. For example, for leaf node of inkDrawing category that represents a triangle, points would include the x,y coordinates of the vertices of the recognized triangle. The points represent the coordinates of points used to create the perfectly drawn shape that is closest to the original input. They may not exactly match.

        :return: The points of this AlternatePatternInner.
        :rtype: List[PointDetailsPattern]
        """
        return self._points

    @points.setter
    def points(self, points):
        """Sets the points of this AlternatePatternInner.

        Array of point objects that represent points that are relevant to the type of recognition unit. For example, for leaf node of inkDrawing category that represents a triangle, points would include the x,y coordinates of the vertices of the recognized triangle. The points represent the coordinates of points used to create the perfectly drawn shape that is closest to the original input. They may not exactly match.

        :param points: The points of this AlternatePatternInner.
        :type points: List[PointDetailsPattern]
        """

        self._points = points

    @property
    def recognized_string(self):
        """Gets the recognized_string of this AlternatePatternInner.

        The recognized string from an inkWord or the name of a recognized shape in an inkDrawing object

        :return: The recognized_string of this AlternatePatternInner.
        :rtype: str
        """
        return self._recognized_string

    @recognized_string.setter
    def recognized_string(self, recognized_string):
        """Sets the recognized_string of this AlternatePatternInner.

        The recognized string from an inkWord or the name of a recognized shape in an inkDrawing object

        :param recognized_string: The recognized_string of this AlternatePatternInner.
        :type recognized_string: str
        """
        if recognized_string is None:
            raise ValueError("Invalid value for `recognized_string`, must not be `None`")

        self._recognized_string = recognized_string

    @property
    def rotation_angle(self):
        """Gets the rotation_angle of this AlternatePatternInner.

        The angular orientation of an object relative to the horizontal axis

        :return: The rotation_angle of this AlternatePatternInner.
        :rtype: float
        """
        return self._rotation_angle

    @rotation_angle.setter
    def rotation_angle(self, rotation_angle):
        """Sets the rotation_angle of this AlternatePatternInner.

        The angular orientation of an object relative to the horizontal axis

        :param rotation_angle: The rotation_angle of this AlternatePatternInner.
        :type rotation_angle: float
        """

        self._rotation_angle = rotation_angle
