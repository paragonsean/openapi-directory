/*
 * Ink Recognizer Client
 * The service is used to perform ink layout and recognition of written words and shapes. Ink strokes passed to the service are recognized and organized into recognition results in the response
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * The category of a recognition unit represents the type of content for that unit.
 */
@JsonAdapter(CategoryPattern.Adapter.class)
public enum CategoryPattern {
  
  ROOT("root"),
  
  WRITING_REGION("writingRegion"),
  
  PARAGRAPH("paragraph"),
  
  LINE("line"),
  
  INK_BULLET("inkBullet"),
  
  INK_DRAWING("inkDrawing"),
  
  INK_WORD("inkWord"),
  
  UNKNOWN("unknown");

  private String value;

  CategoryPattern(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static CategoryPattern fromValue(String value) {
    for (CategoryPattern b : CategoryPattern.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<CategoryPattern> {
    @Override
    public void write(final JsonWriter jsonWriter, final CategoryPattern enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public CategoryPattern read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return CategoryPattern.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    CategoryPattern.fromValue(value);
  }
}

