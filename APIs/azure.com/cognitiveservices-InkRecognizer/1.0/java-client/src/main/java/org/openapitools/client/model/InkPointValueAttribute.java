/*
 * Ink Recognizer Client
 * The service is used to perform ink layout and recognition of written words and shapes. Ink strokes passed to the service are recognized and organized into recognition results in the response
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A container for the attributes of a value contained in the ink point object.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:13:17.580278-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InkPointValueAttribute {
  public static final String SERIALIZED_NAME_LOGICAL_MAXIMUM = "logicalMaximum";
  @SerializedName(SERIALIZED_NAME_LOGICAL_MAXIMUM)
  private BigDecimal logicalMaximum;

  public static final String SERIALIZED_NAME_LOGICAL_MINIMUM = "logicalMinimum";
  @SerializedName(SERIALIZED_NAME_LOGICAL_MINIMUM)
  private BigDecimal logicalMinimum;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public InkPointValueAttribute() {
  }

  public InkPointValueAttribute logicalMaximum(BigDecimal logicalMaximum) {
    this.logicalMaximum = logicalMaximum;
    return this;
  }

  /**
   * The maximum value for the attribute
   * @return logicalMaximum
   */
  @javax.annotation.Nullable
  public BigDecimal getLogicalMaximum() {
    return logicalMaximum;
  }

  public void setLogicalMaximum(BigDecimal logicalMaximum) {
    this.logicalMaximum = logicalMaximum;
  }


  public InkPointValueAttribute logicalMinimum(BigDecimal logicalMinimum) {
    this.logicalMinimum = logicalMinimum;
    return this;
  }

  /**
   * The minimum value for the attribute
   * @return logicalMinimum
   */
  @javax.annotation.Nullable
  public BigDecimal getLogicalMinimum() {
    return logicalMinimum;
  }

  public void setLogicalMinimum(BigDecimal logicalMinimum) {
    this.logicalMinimum = logicalMinimum;
  }


  public InkPointValueAttribute name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the point attribute.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InkPointValueAttribute inkPointValueAttribute = (InkPointValueAttribute) o;
    return Objects.equals(this.logicalMaximum, inkPointValueAttribute.logicalMaximum) &&
        Objects.equals(this.logicalMinimum, inkPointValueAttribute.logicalMinimum) &&
        Objects.equals(this.name, inkPointValueAttribute.name);
  }

  @Override
  public int hashCode() {
    return Objects.hash(logicalMaximum, logicalMinimum, name);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InkPointValueAttribute {\n");
    sb.append("    logicalMaximum: ").append(toIndentedString(logicalMaximum)).append("\n");
    sb.append("    logicalMinimum: ").append(toIndentedString(logicalMinimum)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("logicalMaximum");
    openapiFields.add("logicalMinimum");
    openapiFields.add("name");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InkPointValueAttribute
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InkPointValueAttribute.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InkPointValueAttribute is not found in the empty JSON string", InkPointValueAttribute.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InkPointValueAttribute.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InkPointValueAttribute` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InkPointValueAttribute.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InkPointValueAttribute' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InkPointValueAttribute> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InkPointValueAttribute.class));

       return (TypeAdapter<T>) new TypeAdapter<InkPointValueAttribute>() {
           @Override
           public void write(JsonWriter out, InkPointValueAttribute value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InkPointValueAttribute read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InkPointValueAttribute given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InkPointValueAttribute
   * @throws IOException if the JSON string is invalid with respect to InkPointValueAttribute
   */
  public static InkPointValueAttribute fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InkPointValueAttribute.class);
  }

  /**
   * Convert an instance of InkPointValueAttribute to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

