/*
 * Ink Recognizer Client
 * The service is used to perform ink layout and recognition of written words and shapes. Ink strokes passed to the service are recognized and organized into recognition results in the response
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * The category should be used to determines the field to read the recognition result. Recognized Object represents the shape that was recognized for the node with category as inkDrawing. For handwriting related nodes, recognizedText contains the actual recognition result.
 */
@JsonAdapter(ShapePattern.Adapter.class)
public enum ShapePattern {
  
  DRAWING("drawing"),
  
  SQUARE("square"),
  
  RECTANGLE("rectangle"),
  
  CIRCLE("circle"),
  
  ELLIPSE("ellipse"),
  
  TRIANGLE("triangle"),
  
  ISOSCELES_TRIANGLE("isoscelesTriangle"),
  
  EQUILATERAL_TRIANGLE("equilateralTriangle"),
  
  RIGHT_TRIANGLE("rightTriangle"),
  
  QUADRILATERAL("quadrilateral"),
  
  DIAMOND("diamond"),
  
  TRAPEZOID("trapezoid"),
  
  PARALLELOGRAM("parallelogram"),
  
  PENTAGON("pentagon"),
  
  HEXAGON("hexagon"),
  
  BLOCK_ARROW("blockArrow"),
  
  HEART("heart"),
  
  STAR_SIMPLE("starSimple"),
  
  STAR_CROSSED("starCrossed"),
  
  CLOUD("cloud"),
  
  LINE("line"),
  
  CURVE("curve"),
  
  POLY_LINE("polyLine");

  private String value;

  ShapePattern(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static ShapePattern fromValue(String value) {
    for (ShapePattern b : ShapePattern.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<ShapePattern> {
    @Override
    public void write(final JsonWriter jsonWriter, final ShapePattern enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public ShapePattern read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return ShapePattern.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    ShapePattern.fromValue(value);
  }
}

