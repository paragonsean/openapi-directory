/*
 * Ink Recognizer Client
 * The service is used to perform ink layout and recognition of written words and shapes. Ink strokes passed to the service are recognized and organized into recognition results in the response
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AlternatePatternInner;
import org.openapitools.client.model.CategoryPattern;
import org.openapitools.client.model.ClassPattern;
import org.openapitools.client.model.PointDetailsPattern;
import org.openapitools.client.model.RecognitionUnitInnerBoundingRectangle;
import org.openapitools.client.model.ShapePattern;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This identifies the recognized entity
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:13:17.580278-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RecognitionUnitInner {
  public static final String SERIALIZED_NAME_ALTERNATES = "alternates";
  @SerializedName(SERIALIZED_NAME_ALTERNATES)
  private List<AlternatePatternInner> alternates = new ArrayList<>();

  public static final String SERIALIZED_NAME_BOUNDING_RECTANGLE = "boundingRectangle";
  @SerializedName(SERIALIZED_NAME_BOUNDING_RECTANGLE)
  private RecognitionUnitInnerBoundingRectangle boundingRectangle;

  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private CategoryPattern category;

  public static final String SERIALIZED_NAME_CENTER = "center";
  @SerializedName(SERIALIZED_NAME_CENTER)
  private PointDetailsPattern center;

  public static final String SERIALIZED_NAME_CHILD_IDS = "childIds";
  @SerializedName(SERIALIZED_NAME_CHILD_IDS)
  private List<Integer> childIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_PROPERTY_CLASS = "class";
  @SerializedName(SERIALIZED_NAME_PROPERTY_CLASS)
  private ClassPattern propertyClass;

  public static final String SERIALIZED_NAME_CONFIDENCE = "confidence";
  @SerializedName(SERIALIZED_NAME_CONFIDENCE)
  private BigDecimal confidence;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_PARENT_ID = "parentId";
  @SerializedName(SERIALIZED_NAME_PARENT_ID)
  private Integer parentId;

  public static final String SERIALIZED_NAME_POINTS = "points";
  @SerializedName(SERIALIZED_NAME_POINTS)
  private List<PointDetailsPattern> points = new ArrayList<>();

  public static final String SERIALIZED_NAME_RECOGNIZED_OBJECT = "recognizedObject";
  @SerializedName(SERIALIZED_NAME_RECOGNIZED_OBJECT)
  private ShapePattern recognizedObject;

  public static final String SERIALIZED_NAME_RECOGNIZED_TEXT = "recognizedText";
  @SerializedName(SERIALIZED_NAME_RECOGNIZED_TEXT)
  private String recognizedText;

  public static final String SERIALIZED_NAME_ROTATED_BOUNDING_RECTANGLE = "rotatedBoundingRectangle";
  @SerializedName(SERIALIZED_NAME_ROTATED_BOUNDING_RECTANGLE)
  private List<PointDetailsPattern> rotatedBoundingRectangle = new ArrayList<>();

  public static final String SERIALIZED_NAME_ROTATION_ANGLE = "rotationAngle";
  @SerializedName(SERIALIZED_NAME_ROTATION_ANGLE)
  private BigDecimal rotationAngle;

  public static final String SERIALIZED_NAME_STROKE_IDS = "strokeIds";
  @SerializedName(SERIALIZED_NAME_STROKE_IDS)
  private List<Integer> strokeIds = new ArrayList<>();

  public RecognitionUnitInner() {
  }

  public RecognitionUnitInner alternates(List<AlternatePatternInner> alternates) {
    this.alternates = alternates;
    return this;
  }

  public RecognitionUnitInner addAlternatesItem(AlternatePatternInner alternatesItem) {
    if (this.alternates == null) {
      this.alternates = new ArrayList<>();
    }
    this.alternates.add(alternatesItem);
    return this;
  }

  /**
   * The list of alternates for the core recognition result. In case of handwriting related recognition units, this list includes other words that are close possibilities to the results provided as &#39;recognizedText&#39;.
   * @return alternates
   */
  @javax.annotation.Nullable
  public List<AlternatePatternInner> getAlternates() {
    return alternates;
  }

  public void setAlternates(List<AlternatePatternInner> alternates) {
    this.alternates = alternates;
  }


  public RecognitionUnitInner boundingRectangle(RecognitionUnitInnerBoundingRectangle boundingRectangle) {
    this.boundingRectangle = boundingRectangle;
    return this;
  }

  /**
   * Get boundingRectangle
   * @return boundingRectangle
   */
  @javax.annotation.Nullable
  public RecognitionUnitInnerBoundingRectangle getBoundingRectangle() {
    return boundingRectangle;
  }

  public void setBoundingRectangle(RecognitionUnitInnerBoundingRectangle boundingRectangle) {
    this.boundingRectangle = boundingRectangle;
  }


  public RecognitionUnitInner category(CategoryPattern category) {
    this.category = category;
    return this;
  }

  /**
   * Get category
   * @return category
   */
  @javax.annotation.Nonnull
  public CategoryPattern getCategory() {
    return category;
  }

  public void setCategory(CategoryPattern category) {
    this.category = category;
  }


  public RecognitionUnitInner center(PointDetailsPattern center) {
    this.center = center;
    return this;
  }

  /**
   * Get center
   * @return center
   */
  @javax.annotation.Nullable
  public PointDetailsPattern getCenter() {
    return center;
  }

  public void setCenter(PointDetailsPattern center) {
    this.center = center;
  }


  public RecognitionUnitInner childIds(List<Integer> childIds) {
    this.childIds = childIds;
    return this;
  }

  public RecognitionUnitInner addChildIdsItem(Integer childIdsItem) {
    if (this.childIds == null) {
      this.childIds = new ArrayList<>();
    }
    this.childIds.add(childIdsItem);
    return this;
  }

  /**
   * An array of integers representing the identifier of each child of the current recognition unit.
   * @return childIds
   */
  @javax.annotation.Nullable
  public List<Integer> getChildIds() {
    return childIds;
  }

  public void setChildIds(List<Integer> childIds) {
    this.childIds = childIds;
  }


  public RecognitionUnitInner propertyClass(ClassPattern propertyClass) {
    this.propertyClass = propertyClass;
    return this;
  }

  /**
   * Get propertyClass
   * @return propertyClass
   */
  @javax.annotation.Nonnull
  public ClassPattern getPropertyClass() {
    return propertyClass;
  }

  public void setPropertyClass(ClassPattern propertyClass) {
    this.propertyClass = propertyClass;
  }


  public RecognitionUnitInner confidence(BigDecimal confidence) {
    this.confidence = confidence;
    return this;
  }

  /**
   * A number between 0 and 1 which indicates the confidence level in the result.
   * @return confidence
   */
  @javax.annotation.Nullable
  public BigDecimal getConfidence() {
    return confidence;
  }

  public void setConfidence(BigDecimal confidence) {
    this.confidence = confidence;
  }


  public RecognitionUnitInner id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * The identifier of the recognition unit. This id is used to indicate parent/child relationship between different recognition units.
   * @return id
   */
  @javax.annotation.Nonnull
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public RecognitionUnitInner parentId(Integer parentId) {
    this.parentId = parentId;
    return this;
  }

  /**
   * The id of the parent node in the tree structure of the recognition results. parent &#x3D; 0 indicates that there is no dedicated parent node for this unit.
   * @return parentId
   */
  @javax.annotation.Nonnull
  public Integer getParentId() {
    return parentId;
  }

  public void setParentId(Integer parentId) {
    this.parentId = parentId;
  }


  public RecognitionUnitInner points(List<PointDetailsPattern> points) {
    this.points = points;
    return this;
  }

  public RecognitionUnitInner addPointsItem(PointDetailsPattern pointsItem) {
    if (this.points == null) {
      this.points = new ArrayList<>();
    }
    this.points.add(pointsItem);
    return this;
  }

  /**
   * Array of point objects that represent points that are relevant to the type of recognition unit. For example, for a leaf node of inkDrawing category that represents a triangle, points would include the x, y coordinates of the vertices of the recognized triangle. The points represent the coordinates used to create the perfectly drawn shape that is closest to the original input. They may not exactly match.
   * @return points
   */
  @javax.annotation.Nullable
  public List<PointDetailsPattern> getPoints() {
    return points;
  }

  public void setPoints(List<PointDetailsPattern> points) {
    this.points = points;
  }


  public RecognitionUnitInner recognizedObject(ShapePattern recognizedObject) {
    this.recognizedObject = recognizedObject;
    return this;
  }

  /**
   * Get recognizedObject
   * @return recognizedObject
   */
  @javax.annotation.Nullable
  public ShapePattern getRecognizedObject() {
    return recognizedObject;
  }

  public void setRecognizedObject(ShapePattern recognizedObject) {
    this.recognizedObject = recognizedObject;
  }


  public RecognitionUnitInner recognizedText(String recognizedText) {
    this.recognizedText = recognizedText;
    return this;
  }

  /**
   * The string contains the text that was recognized. It can be an empty string if the recognizer cannot determine the text.
   * @return recognizedText
   */
  @javax.annotation.Nullable
  public String getRecognizedText() {
    return recognizedText;
  }

  public void setRecognizedText(String recognizedText) {
    this.recognizedText = recognizedText;
  }


  public RecognitionUnitInner rotatedBoundingRectangle(List<PointDetailsPattern> rotatedBoundingRectangle) {
    this.rotatedBoundingRectangle = rotatedBoundingRectangle;
    return this;
  }

  public RecognitionUnitInner addRotatedBoundingRectangleItem(PointDetailsPattern rotatedBoundingRectangleItem) {
    if (this.rotatedBoundingRectangle == null) {
      this.rotatedBoundingRectangle = new ArrayList<>();
    }
    this.rotatedBoundingRectangle.add(rotatedBoundingRectangleItem);
    return this;
  }

  /**
   * This is the rotated bounding rectangle that covers the entire recognized object along the angle of rotation of the object. Note that this is NOT the same as rotating the boundingRectangle by the rotation angle.
   * @return rotatedBoundingRectangle
   */
  @javax.annotation.Nullable
  public List<PointDetailsPattern> getRotatedBoundingRectangle() {
    return rotatedBoundingRectangle;
  }

  public void setRotatedBoundingRectangle(List<PointDetailsPattern> rotatedBoundingRectangle) {
    this.rotatedBoundingRectangle = rotatedBoundingRectangle;
  }


  public RecognitionUnitInner rotationAngle(BigDecimal rotationAngle) {
    this.rotationAngle = rotationAngle;
    return this;
  }

  /**
   * This is the angle at which the unit is rotated in degrees with respect to the positive X axis.
   * @return rotationAngle
   */
  @javax.annotation.Nullable
  public BigDecimal getRotationAngle() {
    return rotationAngle;
  }

  public void setRotationAngle(BigDecimal rotationAngle) {
    this.rotationAngle = rotationAngle;
  }


  public RecognitionUnitInner strokeIds(List<Integer> strokeIds) {
    this.strokeIds = strokeIds;
    return this;
  }

  public RecognitionUnitInner addStrokeIdsItem(Integer strokeIdsItem) {
    if (this.strokeIds == null) {
      this.strokeIds = new ArrayList<>();
    }
    this.strokeIds.add(strokeIdsItem);
    return this;
  }

  /**
   * This is an array of integers representing the list of stroke Identifiers from the input request body that belong to this recognition unit.
   * @return strokeIds
   */
  @javax.annotation.Nonnull
  public List<Integer> getStrokeIds() {
    return strokeIds;
  }

  public void setStrokeIds(List<Integer> strokeIds) {
    this.strokeIds = strokeIds;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RecognitionUnitInner recognitionUnitInner = (RecognitionUnitInner) o;
    return Objects.equals(this.alternates, recognitionUnitInner.alternates) &&
        Objects.equals(this.boundingRectangle, recognitionUnitInner.boundingRectangle) &&
        Objects.equals(this.category, recognitionUnitInner.category) &&
        Objects.equals(this.center, recognitionUnitInner.center) &&
        Objects.equals(this.childIds, recognitionUnitInner.childIds) &&
        Objects.equals(this.propertyClass, recognitionUnitInner.propertyClass) &&
        Objects.equals(this.confidence, recognitionUnitInner.confidence) &&
        Objects.equals(this.id, recognitionUnitInner.id) &&
        Objects.equals(this.parentId, recognitionUnitInner.parentId) &&
        Objects.equals(this.points, recognitionUnitInner.points) &&
        Objects.equals(this.recognizedObject, recognitionUnitInner.recognizedObject) &&
        Objects.equals(this.recognizedText, recognitionUnitInner.recognizedText) &&
        Objects.equals(this.rotatedBoundingRectangle, recognitionUnitInner.rotatedBoundingRectangle) &&
        Objects.equals(this.rotationAngle, recognitionUnitInner.rotationAngle) &&
        Objects.equals(this.strokeIds, recognitionUnitInner.strokeIds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(alternates, boundingRectangle, category, center, childIds, propertyClass, confidence, id, parentId, points, recognizedObject, recognizedText, rotatedBoundingRectangle, rotationAngle, strokeIds);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RecognitionUnitInner {\n");
    sb.append("    alternates: ").append(toIndentedString(alternates)).append("\n");
    sb.append("    boundingRectangle: ").append(toIndentedString(boundingRectangle)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    center: ").append(toIndentedString(center)).append("\n");
    sb.append("    childIds: ").append(toIndentedString(childIds)).append("\n");
    sb.append("    propertyClass: ").append(toIndentedString(propertyClass)).append("\n");
    sb.append("    confidence: ").append(toIndentedString(confidence)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    parentId: ").append(toIndentedString(parentId)).append("\n");
    sb.append("    points: ").append(toIndentedString(points)).append("\n");
    sb.append("    recognizedObject: ").append(toIndentedString(recognizedObject)).append("\n");
    sb.append("    recognizedText: ").append(toIndentedString(recognizedText)).append("\n");
    sb.append("    rotatedBoundingRectangle: ").append(toIndentedString(rotatedBoundingRectangle)).append("\n");
    sb.append("    rotationAngle: ").append(toIndentedString(rotationAngle)).append("\n");
    sb.append("    strokeIds: ").append(toIndentedString(strokeIds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("alternates");
    openapiFields.add("boundingRectangle");
    openapiFields.add("category");
    openapiFields.add("center");
    openapiFields.add("childIds");
    openapiFields.add("class");
    openapiFields.add("confidence");
    openapiFields.add("id");
    openapiFields.add("parentId");
    openapiFields.add("points");
    openapiFields.add("recognizedObject");
    openapiFields.add("recognizedText");
    openapiFields.add("rotatedBoundingRectangle");
    openapiFields.add("rotationAngle");
    openapiFields.add("strokeIds");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("category");
    openapiRequiredFields.add("class");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("parentId");
    openapiRequiredFields.add("strokeIds");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RecognitionUnitInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RecognitionUnitInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RecognitionUnitInner is not found in the empty JSON string", RecognitionUnitInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RecognitionUnitInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RecognitionUnitInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RecognitionUnitInner.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("alternates") != null && !jsonObj.get("alternates").isJsonNull()) {
        JsonArray jsonArrayalternates = jsonObj.getAsJsonArray("alternates");
        if (jsonArrayalternates != null) {
          // ensure the json data is an array
          if (!jsonObj.get("alternates").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `alternates` to be an array in the JSON string but got `%s`", jsonObj.get("alternates").toString()));
          }

          // validate the optional field `alternates` (array)
          for (int i = 0; i < jsonArrayalternates.size(); i++) {
            AlternatePatternInner.validateJsonElement(jsonArrayalternates.get(i));
          };
        }
      }
      // validate the optional field `boundingRectangle`
      if (jsonObj.get("boundingRectangle") != null && !jsonObj.get("boundingRectangle").isJsonNull()) {
        RecognitionUnitInnerBoundingRectangle.validateJsonElement(jsonObj.get("boundingRectangle"));
      }
      // validate the required field `category`
      CategoryPattern.validateJsonElement(jsonObj.get("category"));
      // validate the optional field `center`
      if (jsonObj.get("center") != null && !jsonObj.get("center").isJsonNull()) {
        PointDetailsPattern.validateJsonElement(jsonObj.get("center"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("childIds") != null && !jsonObj.get("childIds").isJsonNull() && !jsonObj.get("childIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `childIds` to be an array in the JSON string but got `%s`", jsonObj.get("childIds").toString()));
      }
      // validate the required field `class`
      ClassPattern.validateJsonElement(jsonObj.get("class"));
      if (jsonObj.get("points") != null && !jsonObj.get("points").isJsonNull()) {
        JsonArray jsonArraypoints = jsonObj.getAsJsonArray("points");
        if (jsonArraypoints != null) {
          // ensure the json data is an array
          if (!jsonObj.get("points").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `points` to be an array in the JSON string but got `%s`", jsonObj.get("points").toString()));
          }

          // validate the optional field `points` (array)
          for (int i = 0; i < jsonArraypoints.size(); i++) {
            PointDetailsPattern.validateJsonElement(jsonArraypoints.get(i));
          };
        }
      }
      // validate the optional field `recognizedObject`
      if (jsonObj.get("recognizedObject") != null && !jsonObj.get("recognizedObject").isJsonNull()) {
        ShapePattern.validateJsonElement(jsonObj.get("recognizedObject"));
      }
      if ((jsonObj.get("recognizedText") != null && !jsonObj.get("recognizedText").isJsonNull()) && !jsonObj.get("recognizedText").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recognizedText` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recognizedText").toString()));
      }
      if (jsonObj.get("rotatedBoundingRectangle") != null && !jsonObj.get("rotatedBoundingRectangle").isJsonNull()) {
        JsonArray jsonArrayrotatedBoundingRectangle = jsonObj.getAsJsonArray("rotatedBoundingRectangle");
        if (jsonArrayrotatedBoundingRectangle != null) {
          // ensure the json data is an array
          if (!jsonObj.get("rotatedBoundingRectangle").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `rotatedBoundingRectangle` to be an array in the JSON string but got `%s`", jsonObj.get("rotatedBoundingRectangle").toString()));
          }

          // validate the optional field `rotatedBoundingRectangle` (array)
          for (int i = 0; i < jsonArrayrotatedBoundingRectangle.size(); i++) {
            PointDetailsPattern.validateJsonElement(jsonArrayrotatedBoundingRectangle.get(i));
          };
        }
      }
      // ensure the required json array is present
      if (jsonObj.get("strokeIds") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("strokeIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `strokeIds` to be an array in the JSON string but got `%s`", jsonObj.get("strokeIds").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RecognitionUnitInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RecognitionUnitInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RecognitionUnitInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RecognitionUnitInner.class));

       return (TypeAdapter<T>) new TypeAdapter<RecognitionUnitInner>() {
           @Override
           public void write(JsonWriter out, RecognitionUnitInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RecognitionUnitInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RecognitionUnitInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RecognitionUnitInner
   * @throws IOException if the JSON string is invalid with respect to RecognitionUnitInner
   */
  public static RecognitionUnitInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RecognitionUnitInner.class);
  }

  /**
   * Convert an instance of RecognitionUnitInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

