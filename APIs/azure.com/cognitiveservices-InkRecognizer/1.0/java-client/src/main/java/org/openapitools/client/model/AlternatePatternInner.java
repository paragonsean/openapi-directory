/*
 * Ink Recognizer Client
 * The service is used to perform ink layout and recognition of written words and shapes. Ink strokes passed to the service are recognized and organized into recognition results in the response
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.LeafCategoryPattern;
import org.openapitools.client.model.PointDetailsPattern;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AlternatePatternInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:13:17.580278-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AlternatePatternInner {
  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private LeafCategoryPattern category;

  public static final String SERIALIZED_NAME_CONFIDENCE = "confidence";
  @SerializedName(SERIALIZED_NAME_CONFIDENCE)
  private BigDecimal confidence;

  public static final String SERIALIZED_NAME_POINTS = "points";
  @SerializedName(SERIALIZED_NAME_POINTS)
  private List<PointDetailsPattern> points = new ArrayList<>();

  public static final String SERIALIZED_NAME_RECOGNIZED_STRING = "recognizedString";
  @SerializedName(SERIALIZED_NAME_RECOGNIZED_STRING)
  private String recognizedString;

  public static final String SERIALIZED_NAME_ROTATION_ANGLE = "rotationAngle";
  @SerializedName(SERIALIZED_NAME_ROTATION_ANGLE)
  private BigDecimal rotationAngle;

  public AlternatePatternInner() {
  }

  public AlternatePatternInner category(LeafCategoryPattern category) {
    this.category = category;
    return this;
  }

  /**
   * Get category
   * @return category
   */
  @javax.annotation.Nonnull
  public LeafCategoryPattern getCategory() {
    return category;
  }

  public void setCategory(LeafCategoryPattern category) {
    this.category = category;
  }


  public AlternatePatternInner confidence(BigDecimal confidence) {
    this.confidence = confidence;
    return this;
  }

  /**
   * A number between 0 and 1 which indicates the confidence level in the result
   * @return confidence
   */
  @javax.annotation.Nullable
  public BigDecimal getConfidence() {
    return confidence;
  }

  public void setConfidence(BigDecimal confidence) {
    this.confidence = confidence;
  }


  public AlternatePatternInner points(List<PointDetailsPattern> points) {
    this.points = points;
    return this;
  }

  public AlternatePatternInner addPointsItem(PointDetailsPattern pointsItem) {
    if (this.points == null) {
      this.points = new ArrayList<>();
    }
    this.points.add(pointsItem);
    return this;
  }

  /**
   * Array of point objects that represent points that are relevant to the type of recognition unit. For example, for leaf node of inkDrawing category that represents a triangle, points would include the x,y coordinates of the vertices of the recognized triangle. The points represent the coordinates of points used to create the perfectly drawn shape that is closest to the original input. They may not exactly match.
   * @return points
   */
  @javax.annotation.Nullable
  public List<PointDetailsPattern> getPoints() {
    return points;
  }

  public void setPoints(List<PointDetailsPattern> points) {
    this.points = points;
  }


  public AlternatePatternInner recognizedString(String recognizedString) {
    this.recognizedString = recognizedString;
    return this;
  }

  /**
   * The recognized string from an inkWord or the name of a recognized shape in an inkDrawing object
   * @return recognizedString
   */
  @javax.annotation.Nonnull
  public String getRecognizedString() {
    return recognizedString;
  }

  public void setRecognizedString(String recognizedString) {
    this.recognizedString = recognizedString;
  }


  public AlternatePatternInner rotationAngle(BigDecimal rotationAngle) {
    this.rotationAngle = rotationAngle;
    return this;
  }

  /**
   * The angular orientation of an object relative to the horizontal axis
   * @return rotationAngle
   */
  @javax.annotation.Nullable
  public BigDecimal getRotationAngle() {
    return rotationAngle;
  }

  public void setRotationAngle(BigDecimal rotationAngle) {
    this.rotationAngle = rotationAngle;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AlternatePatternInner alternatePatternInner = (AlternatePatternInner) o;
    return Objects.equals(this.category, alternatePatternInner.category) &&
        Objects.equals(this.confidence, alternatePatternInner.confidence) &&
        Objects.equals(this.points, alternatePatternInner.points) &&
        Objects.equals(this.recognizedString, alternatePatternInner.recognizedString) &&
        Objects.equals(this.rotationAngle, alternatePatternInner.rotationAngle);
  }

  @Override
  public int hashCode() {
    return Objects.hash(category, confidence, points, recognizedString, rotationAngle);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AlternatePatternInner {\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    confidence: ").append(toIndentedString(confidence)).append("\n");
    sb.append("    points: ").append(toIndentedString(points)).append("\n");
    sb.append("    recognizedString: ").append(toIndentedString(recognizedString)).append("\n");
    sb.append("    rotationAngle: ").append(toIndentedString(rotationAngle)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("category");
    openapiFields.add("confidence");
    openapiFields.add("points");
    openapiFields.add("recognizedString");
    openapiFields.add("rotationAngle");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("category");
    openapiRequiredFields.add("recognizedString");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AlternatePatternInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AlternatePatternInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AlternatePatternInner is not found in the empty JSON string", AlternatePatternInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AlternatePatternInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AlternatePatternInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AlternatePatternInner.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `category`
      LeafCategoryPattern.validateJsonElement(jsonObj.get("category"));
      if (jsonObj.get("points") != null && !jsonObj.get("points").isJsonNull()) {
        JsonArray jsonArraypoints = jsonObj.getAsJsonArray("points");
        if (jsonArraypoints != null) {
          // ensure the json data is an array
          if (!jsonObj.get("points").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `points` to be an array in the JSON string but got `%s`", jsonObj.get("points").toString()));
          }

          // validate the optional field `points` (array)
          for (int i = 0; i < jsonArraypoints.size(); i++) {
            PointDetailsPattern.validateJsonElement(jsonArraypoints.get(i));
          };
        }
      }
      if (!jsonObj.get("recognizedString").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recognizedString` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recognizedString").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AlternatePatternInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AlternatePatternInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AlternatePatternInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AlternatePatternInner.class));

       return (TypeAdapter<T>) new TypeAdapter<AlternatePatternInner>() {
           @Override
           public void write(JsonWriter out, AlternatePatternInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AlternatePatternInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AlternatePatternInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AlternatePatternInner
   * @throws IOException if the JSON string is invalid with respect to AlternatePatternInner
   */
  public static AlternatePatternInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AlternatePatternInner.class);
  }

  /**
   * Convert an instance of AlternatePatternInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

