/*
 * Ink Recognizer Client
 * The service is used to perform ink layout and recognition of written words and shapes. Ink strokes passed to the service are recognized and organized into recognition results in the response
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * The category of recognition units that represent types that don&#39;t have children recognition units.
 */
@JsonAdapter(LeafCategoryPattern.Adapter.class)
public enum LeafCategoryPattern {
  
  INK_DRAWING("inkDrawing"),
  
  INK_BULLET("inkBullet"),
  
  INK_WORD("inkWord"),
  
  UNKNOWN("unknown");

  private String value;

  LeafCategoryPattern(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static LeafCategoryPattern fromValue(String value) {
    for (LeafCategoryPattern b : LeafCategoryPattern.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<LeafCategoryPattern> {
    @Override
    public void write(final JsonWriter jsonWriter, final LeafCategoryPattern enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public LeafCategoryPattern read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return LeafCategoryPattern.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    LeafCategoryPattern.fromValue(value);
  }
}

