/*
 * Ink Recognizer Client
 * The service is used to perform ink layout and recognition of written words and shapes. Ink strokes passed to the service are recognized and organized into recognition results in the response
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The bounding rectangle of the recognition unit represented by the coordinates of the top left corner (topX,topY) along with width and height of the rectangle. Note that this rectangle is not rotated. So for  rotated objects such as slanted handwriting, it will cover the entire object. The unit will be matched to the one specified in the original request (mm by default.) 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:13:17.580278-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RecognitionUnitInnerBoundingRectangle {
  public static final String SERIALIZED_NAME_HEIGHT = "height";
  @SerializedName(SERIALIZED_NAME_HEIGHT)
  private BigDecimal height;

  public static final String SERIALIZED_NAME_TOP_X = "topX";
  @SerializedName(SERIALIZED_NAME_TOP_X)
  private BigDecimal topX;

  public static final String SERIALIZED_NAME_TOP_Y = "topY";
  @SerializedName(SERIALIZED_NAME_TOP_Y)
  private BigDecimal topY;

  public static final String SERIALIZED_NAME_WIDTH = "width";
  @SerializedName(SERIALIZED_NAME_WIDTH)
  private BigDecimal width;

  public RecognitionUnitInnerBoundingRectangle() {
  }

  public RecognitionUnitInnerBoundingRectangle height(BigDecimal height) {
    this.height = height;
    return this;
  }

  /**
   * The is the height of the bounding rectangle
   * @return height
   */
  @javax.annotation.Nullable
  public BigDecimal getHeight() {
    return height;
  }

  public void setHeight(BigDecimal height) {
    this.height = height;
  }


  public RecognitionUnitInnerBoundingRectangle topX(BigDecimal topX) {
    this.topX = topX;
    return this;
  }

  /**
   * This is the top left x coordinate
   * @return topX
   */
  @javax.annotation.Nullable
  public BigDecimal getTopX() {
    return topX;
  }

  public void setTopX(BigDecimal topX) {
    this.topX = topX;
  }


  public RecognitionUnitInnerBoundingRectangle topY(BigDecimal topY) {
    this.topY = topY;
    return this;
  }

  /**
   * This is the top left y coordinate
   * @return topY
   */
  @javax.annotation.Nullable
  public BigDecimal getTopY() {
    return topY;
  }

  public void setTopY(BigDecimal topY) {
    this.topY = topY;
  }


  public RecognitionUnitInnerBoundingRectangle width(BigDecimal width) {
    this.width = width;
    return this;
  }

  /**
   * This is width of the bounding rectangle
   * @return width
   */
  @javax.annotation.Nullable
  public BigDecimal getWidth() {
    return width;
  }

  public void setWidth(BigDecimal width) {
    this.width = width;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RecognitionUnitInnerBoundingRectangle recognitionUnitInnerBoundingRectangle = (RecognitionUnitInnerBoundingRectangle) o;
    return Objects.equals(this.height, recognitionUnitInnerBoundingRectangle.height) &&
        Objects.equals(this.topX, recognitionUnitInnerBoundingRectangle.topX) &&
        Objects.equals(this.topY, recognitionUnitInnerBoundingRectangle.topY) &&
        Objects.equals(this.width, recognitionUnitInnerBoundingRectangle.width);
  }

  @Override
  public int hashCode() {
    return Objects.hash(height, topX, topY, width);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RecognitionUnitInnerBoundingRectangle {\n");
    sb.append("    height: ").append(toIndentedString(height)).append("\n");
    sb.append("    topX: ").append(toIndentedString(topX)).append("\n");
    sb.append("    topY: ").append(toIndentedString(topY)).append("\n");
    sb.append("    width: ").append(toIndentedString(width)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("height");
    openapiFields.add("topX");
    openapiFields.add("topY");
    openapiFields.add("width");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RecognitionUnitInnerBoundingRectangle
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RecognitionUnitInnerBoundingRectangle.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RecognitionUnitInnerBoundingRectangle is not found in the empty JSON string", RecognitionUnitInnerBoundingRectangle.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RecognitionUnitInnerBoundingRectangle.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RecognitionUnitInnerBoundingRectangle` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RecognitionUnitInnerBoundingRectangle.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RecognitionUnitInnerBoundingRectangle' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RecognitionUnitInnerBoundingRectangle> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RecognitionUnitInnerBoundingRectangle.class));

       return (TypeAdapter<T>) new TypeAdapter<RecognitionUnitInnerBoundingRectangle>() {
           @Override
           public void write(JsonWriter out, RecognitionUnitInnerBoundingRectangle value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RecognitionUnitInnerBoundingRectangle read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RecognitionUnitInnerBoundingRectangle given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RecognitionUnitInnerBoundingRectangle
   * @throws IOException if the JSON string is invalid with respect to RecognitionUnitInnerBoundingRectangle
   */
  public static RecognitionUnitInnerBoundingRectangle fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RecognitionUnitInnerBoundingRectangle.class);
  }

  /**
   * Convert an instance of RecognitionUnitInnerBoundingRectangle to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

