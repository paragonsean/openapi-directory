/*
 * Ink Recognizer Client
 * The service is used to perform ink layout and recognition of written words and shapes. Ink strokes passed to the service are recognized and organized into recognition results in the response
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.RecognitionUnitInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This shows the expected contents of a response from the service
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:13:17.580278-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AnalysisResponse {
  public static final String SERIALIZED_NAME_LANGUAGE = "language";
  @SerializedName(SERIALIZED_NAME_LANGUAGE)
  private String language;

  public static final String SERIALIZED_NAME_RECOGNITION_UNITS = "recognitionUnits";
  @SerializedName(SERIALIZED_NAME_RECOGNITION_UNITS)
  private List<RecognitionUnitInner> recognitionUnits = new ArrayList<>();

  /**
   * This is the physical unit of the ink strokes. It is up to the application developer to decide how to convert the device specific units to physical units before calling the service. The conversion factor can be different based on the type of the device used.
   */
  @JsonAdapter(UnitEnum.Adapter.class)
  public enum UnitEnum {
    MM("mm"),
    
    CM("cm"),
    
    IN("in");

    private String value;

    UnitEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static UnitEnum fromValue(String value) {
      for (UnitEnum b : UnitEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<UnitEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final UnitEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public UnitEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return UnitEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      UnitEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_UNIT = "unit";
  @SerializedName(SERIALIZED_NAME_UNIT)
  private UnitEnum unit;

  public static final String SERIALIZED_NAME_UNIT_MULTIPLE = "unitMultiple";
  @SerializedName(SERIALIZED_NAME_UNIT_MULTIPLE)
  private BigDecimal unitMultiple;

  public AnalysisResponse() {
  }

  public AnalysisResponse language(String language) {
    this.language = language;
    return this;
  }

  /**
   * This is the language used for recognizing handwriting from the ink strokes in the request.
   * @return language
   */
  @javax.annotation.Nullable
  public String getLanguage() {
    return language;
  }

  public void setLanguage(String language) {
    this.language = language;
  }


  public AnalysisResponse recognitionUnits(List<RecognitionUnitInner> recognitionUnits) {
    this.recognitionUnits = recognitionUnits;
    return this;
  }

  public AnalysisResponse addRecognitionUnitsItem(RecognitionUnitInner recognitionUnitsItem) {
    if (this.recognitionUnits == null) {
      this.recognitionUnits = new ArrayList<>();
    }
    this.recognitionUnits.add(recognitionUnitsItem);
    return this;
  }

  /**
   * The list of recognition units based on the analysis of the ink strokes.
   * @return recognitionUnits
   */
  @javax.annotation.Nonnull
  public List<RecognitionUnitInner> getRecognitionUnits() {
    return recognitionUnits;
  }

  public void setRecognitionUnits(List<RecognitionUnitInner> recognitionUnits) {
    this.recognitionUnits = recognitionUnits;
  }


  public AnalysisResponse unit(UnitEnum unit) {
    this.unit = unit;
    return this;
  }

  /**
   * This is the physical unit of the ink strokes. It is up to the application developer to decide how to convert the device specific units to physical units before calling the service. The conversion factor can be different based on the type of the device used.
   * @return unit
   */
  @javax.annotation.Nullable
  public UnitEnum getUnit() {
    return unit;
  }

  public void setUnit(UnitEnum unit) {
    this.unit = unit;
  }


  public AnalysisResponse unitMultiple(BigDecimal unitMultiple) {
    this.unitMultiple = unitMultiple;
    return this;
  }

  /**
   *  This is a scaling factor to be applied to the point coordinates when interpreting them in the physical units specified.
   * @return unitMultiple
   */
  @javax.annotation.Nullable
  public BigDecimal getUnitMultiple() {
    return unitMultiple;
  }

  public void setUnitMultiple(BigDecimal unitMultiple) {
    this.unitMultiple = unitMultiple;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AnalysisResponse analysisResponse = (AnalysisResponse) o;
    return Objects.equals(this.language, analysisResponse.language) &&
        Objects.equals(this.recognitionUnits, analysisResponse.recognitionUnits) &&
        Objects.equals(this.unit, analysisResponse.unit) &&
        Objects.equals(this.unitMultiple, analysisResponse.unitMultiple);
  }

  @Override
  public int hashCode() {
    return Objects.hash(language, recognitionUnits, unit, unitMultiple);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AnalysisResponse {\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("    recognitionUnits: ").append(toIndentedString(recognitionUnits)).append("\n");
    sb.append("    unit: ").append(toIndentedString(unit)).append("\n");
    sb.append("    unitMultiple: ").append(toIndentedString(unitMultiple)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("language");
    openapiFields.add("recognitionUnits");
    openapiFields.add("unit");
    openapiFields.add("unitMultiple");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("recognitionUnits");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AnalysisResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AnalysisResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AnalysisResponse is not found in the empty JSON string", AnalysisResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AnalysisResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AnalysisResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AnalysisResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("language") != null && !jsonObj.get("language").isJsonNull()) && !jsonObj.get("language").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `language` to be a primitive type in the JSON string but got `%s`", jsonObj.get("language").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("recognitionUnits").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `recognitionUnits` to be an array in the JSON string but got `%s`", jsonObj.get("recognitionUnits").toString()));
      }

      JsonArray jsonArrayrecognitionUnits = jsonObj.getAsJsonArray("recognitionUnits");
      // validate the required field `recognitionUnits` (array)
      for (int i = 0; i < jsonArrayrecognitionUnits.size(); i++) {
        RecognitionUnitInner.validateJsonElement(jsonArrayrecognitionUnits.get(i));
      };
      if ((jsonObj.get("unit") != null && !jsonObj.get("unit").isJsonNull()) && !jsonObj.get("unit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `unit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("unit").toString()));
      }
      // validate the optional field `unit`
      if (jsonObj.get("unit") != null && !jsonObj.get("unit").isJsonNull()) {
        UnitEnum.validateJsonElement(jsonObj.get("unit"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AnalysisResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AnalysisResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AnalysisResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AnalysisResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<AnalysisResponse>() {
           @Override
           public void write(JsonWriter out, AnalysisResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AnalysisResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AnalysisResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AnalysisResponse
   * @throws IOException if the JSON string is invalid with respect to AnalysisResponse
   */
  public static AnalysisResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AnalysisResponse.class);
  }

  /**
   * Convert an instance of AnalysisResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

