/*
 * Ink Recognizer Client
 * The service is used to perform ink layout and recognition of written words and shapes. Ink strokes passed to the service are recognized and organized into recognition results in the response
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This shows the components of the color in rgba format
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:13:17.580278-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DrawingAttributesPatternColor {
  public static final String SERIALIZED_NAME_A = "a";
  @SerializedName(SERIALIZED_NAME_A)
  private BigDecimal a;

  public static final String SERIALIZED_NAME_B = "b";
  @SerializedName(SERIALIZED_NAME_B)
  private BigDecimal b;

  public static final String SERIALIZED_NAME_G = "g";
  @SerializedName(SERIALIZED_NAME_G)
  private BigDecimal g;

  public static final String SERIALIZED_NAME_R = "r";
  @SerializedName(SERIALIZED_NAME_R)
  private BigDecimal r;

  public DrawingAttributesPatternColor() {
  }

  public DrawingAttributesPatternColor a(BigDecimal a) {
    this.a = a;
    return this;
  }

  /**
   * The alpha component of the color
   * @return a
   */
  @javax.annotation.Nullable
  public BigDecimal getA() {
    return a;
  }

  public void setA(BigDecimal a) {
    this.a = a;
  }


  public DrawingAttributesPatternColor b(BigDecimal b) {
    this.b = b;
    return this;
  }

  /**
   * The blue component of the color
   * @return b
   */
  @javax.annotation.Nullable
  public BigDecimal getB() {
    return b;
  }

  public void setB(BigDecimal b) {
    this.b = b;
  }


  public DrawingAttributesPatternColor g(BigDecimal g) {
    this.g = g;
    return this;
  }

  /**
   * The green component of the color
   * @return g
   */
  @javax.annotation.Nullable
  public BigDecimal getG() {
    return g;
  }

  public void setG(BigDecimal g) {
    this.g = g;
  }


  public DrawingAttributesPatternColor r(BigDecimal r) {
    this.r = r;
    return this;
  }

  /**
   * The red component of the color
   * @return r
   */
  @javax.annotation.Nullable
  public BigDecimal getR() {
    return r;
  }

  public void setR(BigDecimal r) {
    this.r = r;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DrawingAttributesPatternColor drawingAttributesPatternColor = (DrawingAttributesPatternColor) o;
    return Objects.equals(this.a, drawingAttributesPatternColor.a) &&
        Objects.equals(this.b, drawingAttributesPatternColor.b) &&
        Objects.equals(this.g, drawingAttributesPatternColor.g) &&
        Objects.equals(this.r, drawingAttributesPatternColor.r);
  }

  @Override
  public int hashCode() {
    return Objects.hash(a, b, g, r);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DrawingAttributesPatternColor {\n");
    sb.append("    a: ").append(toIndentedString(a)).append("\n");
    sb.append("    b: ").append(toIndentedString(b)).append("\n");
    sb.append("    g: ").append(toIndentedString(g)).append("\n");
    sb.append("    r: ").append(toIndentedString(r)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("a");
    openapiFields.add("b");
    openapiFields.add("g");
    openapiFields.add("r");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DrawingAttributesPatternColor
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DrawingAttributesPatternColor.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DrawingAttributesPatternColor is not found in the empty JSON string", DrawingAttributesPatternColor.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DrawingAttributesPatternColor.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DrawingAttributesPatternColor` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DrawingAttributesPatternColor.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DrawingAttributesPatternColor' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DrawingAttributesPatternColor> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DrawingAttributesPatternColor.class));

       return (TypeAdapter<T>) new TypeAdapter<DrawingAttributesPatternColor>() {
           @Override
           public void write(JsonWriter out, DrawingAttributesPatternColor value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DrawingAttributesPatternColor read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DrawingAttributesPatternColor given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DrawingAttributesPatternColor
   * @throws IOException if the JSON string is invalid with respect to DrawingAttributesPatternColor
   */
  public static DrawingAttributesPatternColor fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DrawingAttributesPatternColor.class);
  }

  /**
   * Convert an instance of DrawingAttributesPatternColor to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

