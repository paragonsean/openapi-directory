/**
 * Ink Recognizer Client
 * The service is used to perform ink layout and recognition of written words and shapes. Ink strokes passed to the service are recognized and organized into recognition results in the response
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import InkPointValueAttribute from './InkPointValueAttribute';
import Stroke from './Stroke';

/**
 * The AnalysisRequest model module.
 * @module model/AnalysisRequest
 * @version 1.0
 */
class AnalysisRequest {
    /**
     * Constructs a new <code>AnalysisRequest</code>.
     * This shows the expected contents of a request
     * @alias module:model/AnalysisRequest
     * @param language {String} The IETF BCP 47 language code (for ex. en-US, en-GB, hi-IN etc.) of the expected language for the handwritten content in the ink strokes. The response will include results from this language.
     * @param strokes {Array.<module:model/Stroke>} This is the array of strokes sent for recognition. Best results are produced when the order of strokes added in the array matches the order in which the user created them. Changing the stroke order may produce unexpected results.
     */
    constructor(language, strokes) { 
        
        AnalysisRequest.initialize(this, language, strokes);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, language, strokes) { 
        obj['language'] = language;
        obj['strokes'] = strokes;
    }

    /**
     * Constructs a <code>AnalysisRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AnalysisRequest} obj Optional instance to populate.
     * @return {module:model/AnalysisRequest} The populated <code>AnalysisRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AnalysisRequest();

            if (data.hasOwnProperty('applicationType')) {
                obj['applicationType'] = ApiClient.convertToType(data['applicationType'], 'String');
            }
            if (data.hasOwnProperty('inkPointValueAttributes')) {
                obj['inkPointValueAttributes'] = ApiClient.convertToType(data['inkPointValueAttributes'], [InkPointValueAttribute]);
            }
            if (data.hasOwnProperty('inputDeviceKind')) {
                obj['inputDeviceKind'] = ApiClient.convertToType(data['inputDeviceKind'], 'String');
            }
            if (data.hasOwnProperty('language')) {
                obj['language'] = ApiClient.convertToType(data['language'], 'String');
            }
            if (data.hasOwnProperty('strokes')) {
                obj['strokes'] = ApiClient.convertToType(data['strokes'], [Stroke]);
            }
            if (data.hasOwnProperty('unit')) {
                obj['unit'] = ApiClient.convertToType(data['unit'], 'String');
            }
            if (data.hasOwnProperty('unitMultiple')) {
                obj['unitMultiple'] = ApiClient.convertToType(data['unitMultiple'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AnalysisRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AnalysisRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AnalysisRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['applicationType'] && !(typeof data['applicationType'] === 'string' || data['applicationType'] instanceof String)) {
            throw new Error("Expected the field `applicationType` to be a primitive type in the JSON string but got " + data['applicationType']);
        }
        if (data['inkPointValueAttributes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['inkPointValueAttributes'])) {
                throw new Error("Expected the field `inkPointValueAttributes` to be an array in the JSON data but got " + data['inkPointValueAttributes']);
            }
            // validate the optional field `inkPointValueAttributes` (array)
            for (const item of data['inkPointValueAttributes']) {
                InkPointValueAttribute.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['inputDeviceKind'] && !(typeof data['inputDeviceKind'] === 'string' || data['inputDeviceKind'] instanceof String)) {
            throw new Error("Expected the field `inputDeviceKind` to be a primitive type in the JSON string but got " + data['inputDeviceKind']);
        }
        // ensure the json data is a string
        if (data['language'] && !(typeof data['language'] === 'string' || data['language'] instanceof String)) {
            throw new Error("Expected the field `language` to be a primitive type in the JSON string but got " + data['language']);
        }
        if (data['strokes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['strokes'])) {
                throw new Error("Expected the field `strokes` to be an array in the JSON data but got " + data['strokes']);
            }
            // validate the optional field `strokes` (array)
            for (const item of data['strokes']) {
                Stroke.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['unit'] && !(typeof data['unit'] === 'string' || data['unit'] instanceof String)) {
            throw new Error("Expected the field `unit` to be a primitive type in the JSON string but got " + data['unit']);
        }

        return true;
    }


}

AnalysisRequest.RequiredProperties = ["language", "strokes"];

/**
 * This describes the domain of the client application
 * @member {module:model/AnalysisRequest.ApplicationTypeEnum} applicationType
 */
AnalysisRequest.prototype['applicationType'] = undefined;

/**
 * @member {Array.<module:model/InkPointValueAttribute>} inkPointValueAttributes
 */
AnalysisRequest.prototype['inkPointValueAttributes'] = undefined;

/**
 * This identifies the kind of device used as the writing instrument
 * @member {module:model/AnalysisRequest.InputDeviceKindEnum} inputDeviceKind
 */
AnalysisRequest.prototype['inputDeviceKind'] = undefined;

/**
 * The IETF BCP 47 language code (for ex. en-US, en-GB, hi-IN etc.) of the expected language for the handwritten content in the ink strokes. The response will include results from this language.
 * @member {String} language
 */
AnalysisRequest.prototype['language'] = undefined;

/**
 * This is the array of strokes sent for recognition. Best results are produced when the order of strokes added in the array matches the order in which the user created them. Changing the stroke order may produce unexpected results.
 * @member {Array.<module:model/Stroke>} strokes
 */
AnalysisRequest.prototype['strokes'] = undefined;

/**
 * This is the physical unit of the ink strokes. It is up to the application developer to decide how to convert the device specific units to physical units before calling the service. The conversion factor can be different based on the type of the device used.
 * @member {module:model/AnalysisRequest.UnitEnum} unit
 */
AnalysisRequest.prototype['unit'] = undefined;

/**
 *  This is a scaling factor to be applied to the point coordinates when interpreting them in the physical units specified.
 * @member {Number} unitMultiple
 */
AnalysisRequest.prototype['unitMultiple'] = undefined;





/**
 * Allowed values for the <code>applicationType</code> property.
 * @enum {String}
 * @readonly
 */
AnalysisRequest['ApplicationTypeEnum'] = {

    /**
     * value: "drawing"
     * @const
     */
    "drawing": "drawing",

    /**
     * value: "writing"
     * @const
     */
    "writing": "writing",

    /**
     * value: "mixed"
     * @const
     */
    "mixed": "mixed"
};


/**
 * Allowed values for the <code>inputDeviceKind</code> property.
 * @enum {String}
 * @readonly
 */
AnalysisRequest['InputDeviceKindEnum'] = {

    /**
     * value: "digitizer"
     * @const
     */
    "digitizer": "digitizer",

    /**
     * value: "pen"
     * @const
     */
    "pen": "pen",

    /**
     * value: "lightPen"
     * @const
     */
    "lightPen": "lightPen",

    /**
     * value: "touchScreen"
     * @const
     */
    "touchScreen": "touchScreen",

    /**
     * value: "touchPad"
     * @const
     */
    "touchPad": "touchPad",

    /**
     * value: "whiteBoard"
     * @const
     */
    "whiteBoard": "whiteBoard",

    /**
     * value: "3dDigitizer"
     * @const
     */
    "3dDigitizer": "3dDigitizer",

    /**
     * value: "stereoPlotter"
     * @const
     */
    "stereoPlotter": "stereoPlotter",

    /**
     * value: "articulatedArm"
     * @const
     */
    "articulatedArm": "articulatedArm",

    /**
     * value: "armature"
     * @const
     */
    "armature": "armature"
};


/**
 * Allowed values for the <code>unit</code> property.
 * @enum {String}
 * @readonly
 */
AnalysisRequest['UnitEnum'] = {

    /**
     * value: "mm"
     * @const
     */
    "mm": "mm",

    /**
     * value: "cm"
     * @const
     */
    "cm": "cm",

    /**
     * value: "in"
     * @const
     */
    "in": "in"
};



export default AnalysisRequest;

