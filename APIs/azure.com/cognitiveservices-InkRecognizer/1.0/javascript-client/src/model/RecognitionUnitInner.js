/**
 * Ink Recognizer Client
 * The service is used to perform ink layout and recognition of written words and shapes. Ink strokes passed to the service are recognized and organized into recognition results in the response
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AlternatePatternInner from './AlternatePatternInner';
import CategoryPattern from './CategoryPattern';
import ClassPattern from './ClassPattern';
import PointDetailsPattern from './PointDetailsPattern';
import RecognitionUnitInnerBoundingRectangle from './RecognitionUnitInnerBoundingRectangle';
import ShapePattern from './ShapePattern';

/**
 * The RecognitionUnitInner model module.
 * @module model/RecognitionUnitInner
 * @version 1.0
 */
class RecognitionUnitInner {
    /**
     * Constructs a new <code>RecognitionUnitInner</code>.
     * This identifies the recognized entity
     * @alias module:model/RecognitionUnitInner
     * @param category {module:model/CategoryPattern} 
     * @param _class {module:model/ClassPattern} 
     * @param id {Number} The identifier of the recognition unit. This id is used to indicate parent/child relationship between different recognition units.
     * @param parentId {Number} The id of the parent node in the tree structure of the recognition results. parent = 0 indicates that there is no dedicated parent node for this unit.
     * @param strokeIds {Array.<Number>} This is an array of integers representing the list of stroke Identifiers from the input request body that belong to this recognition unit.
     */
    constructor(category, _class, id, parentId, strokeIds) { 
        
        RecognitionUnitInner.initialize(this, category, _class, id, parentId, strokeIds);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, category, _class, id, parentId, strokeIds) { 
        obj['category'] = category;
        obj['class'] = _class;
        obj['id'] = id;
        obj['parentId'] = parentId;
        obj['strokeIds'] = strokeIds;
    }

    /**
     * Constructs a <code>RecognitionUnitInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RecognitionUnitInner} obj Optional instance to populate.
     * @return {module:model/RecognitionUnitInner} The populated <code>RecognitionUnitInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RecognitionUnitInner();

            if (data.hasOwnProperty('alternates')) {
                obj['alternates'] = ApiClient.convertToType(data['alternates'], [AlternatePatternInner]);
            }
            if (data.hasOwnProperty('boundingRectangle')) {
                obj['boundingRectangle'] = RecognitionUnitInnerBoundingRectangle.constructFromObject(data['boundingRectangle']);
            }
            if (data.hasOwnProperty('category')) {
                obj['category'] = CategoryPattern.constructFromObject(data['category']);
            }
            if (data.hasOwnProperty('center')) {
                obj['center'] = PointDetailsPattern.constructFromObject(data['center']);
            }
            if (data.hasOwnProperty('childIds')) {
                obj['childIds'] = ApiClient.convertToType(data['childIds'], ['Number']);
            }
            if (data.hasOwnProperty('class')) {
                obj['class'] = ClassPattern.constructFromObject(data['class']);
            }
            if (data.hasOwnProperty('confidence')) {
                obj['confidence'] = ApiClient.convertToType(data['confidence'], 'Number');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('parentId')) {
                obj['parentId'] = ApiClient.convertToType(data['parentId'], 'Number');
            }
            if (data.hasOwnProperty('points')) {
                obj['points'] = ApiClient.convertToType(data['points'], [PointDetailsPattern]);
            }
            if (data.hasOwnProperty('recognizedObject')) {
                obj['recognizedObject'] = ShapePattern.constructFromObject(data['recognizedObject']);
            }
            if (data.hasOwnProperty('recognizedText')) {
                obj['recognizedText'] = ApiClient.convertToType(data['recognizedText'], 'String');
            }
            if (data.hasOwnProperty('rotatedBoundingRectangle')) {
                obj['rotatedBoundingRectangle'] = ApiClient.convertToType(data['rotatedBoundingRectangle'], [PointDetailsPattern]);
            }
            if (data.hasOwnProperty('rotationAngle')) {
                obj['rotationAngle'] = ApiClient.convertToType(data['rotationAngle'], 'Number');
            }
            if (data.hasOwnProperty('strokeIds')) {
                obj['strokeIds'] = ApiClient.convertToType(data['strokeIds'], ['Number']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RecognitionUnitInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RecognitionUnitInner</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of RecognitionUnitInner.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['alternates']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['alternates'])) {
                throw new Error("Expected the field `alternates` to be an array in the JSON data but got " + data['alternates']);
            }
            // validate the optional field `alternates` (array)
            for (const item of data['alternates']) {
                AlternatePatternInner.validateJSON(item);
            };
        }
        // validate the optional field `boundingRectangle`
        if (data['boundingRectangle']) { // data not null
          RecognitionUnitInnerBoundingRectangle.validateJSON(data['boundingRectangle']);
        }
        // validate the optional field `center`
        if (data['center']) { // data not null
          PointDetailsPattern.validateJSON(data['center']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['childIds'])) {
            throw new Error("Expected the field `childIds` to be an array in the JSON data but got " + data['childIds']);
        }
        if (data['points']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['points'])) {
                throw new Error("Expected the field `points` to be an array in the JSON data but got " + data['points']);
            }
            // validate the optional field `points` (array)
            for (const item of data['points']) {
                PointDetailsPattern.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['recognizedText'] && !(typeof data['recognizedText'] === 'string' || data['recognizedText'] instanceof String)) {
            throw new Error("Expected the field `recognizedText` to be a primitive type in the JSON string but got " + data['recognizedText']);
        }
        if (data['rotatedBoundingRectangle']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['rotatedBoundingRectangle'])) {
                throw new Error("Expected the field `rotatedBoundingRectangle` to be an array in the JSON data but got " + data['rotatedBoundingRectangle']);
            }
            // validate the optional field `rotatedBoundingRectangle` (array)
            for (const item of data['rotatedBoundingRectangle']) {
                PointDetailsPattern.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['strokeIds'])) {
            throw new Error("Expected the field `strokeIds` to be an array in the JSON data but got " + data['strokeIds']);
        }

        return true;
    }


}

RecognitionUnitInner.RequiredProperties = ["category", "class", "id", "parentId", "strokeIds"];

/**
 * The list of alternates for the core recognition result. In case of handwriting related recognition units, this list includes other words that are close possibilities to the results provided as 'recognizedText'.
 * @member {Array.<module:model/AlternatePatternInner>} alternates
 */
RecognitionUnitInner.prototype['alternates'] = undefined;

/**
 * @member {module:model/RecognitionUnitInnerBoundingRectangle} boundingRectangle
 */
RecognitionUnitInner.prototype['boundingRectangle'] = undefined;

/**
 * @member {module:model/CategoryPattern} category
 */
RecognitionUnitInner.prototype['category'] = undefined;

/**
 * @member {module:model/PointDetailsPattern} center
 */
RecognitionUnitInner.prototype['center'] = undefined;

/**
 * An array of integers representing the identifier of each child of the current recognition unit.
 * @member {Array.<Number>} childIds
 */
RecognitionUnitInner.prototype['childIds'] = undefined;

/**
 * @member {module:model/ClassPattern} class
 */
RecognitionUnitInner.prototype['class'] = undefined;

/**
 * A number between 0 and 1 which indicates the confidence level in the result.
 * @member {Number} confidence
 */
RecognitionUnitInner.prototype['confidence'] = undefined;

/**
 * The identifier of the recognition unit. This id is used to indicate parent/child relationship between different recognition units.
 * @member {Number} id
 */
RecognitionUnitInner.prototype['id'] = undefined;

/**
 * The id of the parent node in the tree structure of the recognition results. parent = 0 indicates that there is no dedicated parent node for this unit.
 * @member {Number} parentId
 */
RecognitionUnitInner.prototype['parentId'] = undefined;

/**
 * Array of point objects that represent points that are relevant to the type of recognition unit. For example, for a leaf node of inkDrawing category that represents a triangle, points would include the x, y coordinates of the vertices of the recognized triangle. The points represent the coordinates used to create the perfectly drawn shape that is closest to the original input. They may not exactly match.
 * @member {Array.<module:model/PointDetailsPattern>} points
 */
RecognitionUnitInner.prototype['points'] = undefined;

/**
 * @member {module:model/ShapePattern} recognizedObject
 */
RecognitionUnitInner.prototype['recognizedObject'] = undefined;

/**
 * The string contains the text that was recognized. It can be an empty string if the recognizer cannot determine the text.
 * @member {String} recognizedText
 */
RecognitionUnitInner.prototype['recognizedText'] = undefined;

/**
 * This is the rotated bounding rectangle that covers the entire recognized object along the angle of rotation of the object. Note that this is NOT the same as rotating the boundingRectangle by the rotation angle.
 * @member {Array.<module:model/PointDetailsPattern>} rotatedBoundingRectangle
 */
RecognitionUnitInner.prototype['rotatedBoundingRectangle'] = undefined;

/**
 * This is the angle at which the unit is rotated in degrees with respect to the positive X axis.
 * @member {Number} rotationAngle
 */
RecognitionUnitInner.prototype['rotationAngle'] = undefined;

/**
 * This is an array of integers representing the list of stroke Identifiers from the input request body that belong to this recognition unit.
 * @member {Array.<Number>} strokeIds
 */
RecognitionUnitInner.prototype['strokeIds'] = undefined;






export default RecognitionUnitInner;

