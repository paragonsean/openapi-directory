/**
 * Ink Recognizer Client
 * The service is used to perform ink layout and recognition of written words and shapes. Ink strokes passed to the service are recognized and organized into recognition results in the response
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import LeafCategoryPattern from './LeafCategoryPattern';
import PointDetailsPattern from './PointDetailsPattern';

/**
 * The AlternatePatternInner model module.
 * @module model/AlternatePatternInner
 * @version 1.0
 */
class AlternatePatternInner {
    /**
     * Constructs a new <code>AlternatePatternInner</code>.
     * @alias module:model/AlternatePatternInner
     * @param category {module:model/LeafCategoryPattern} 
     * @param recognizedString {String} The recognized string from an inkWord or the name of a recognized shape in an inkDrawing object
     */
    constructor(category, recognizedString) { 
        
        AlternatePatternInner.initialize(this, category, recognizedString);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, category, recognizedString) { 
        obj['category'] = category;
        obj['recognizedString'] = recognizedString;
    }

    /**
     * Constructs a <code>AlternatePatternInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AlternatePatternInner} obj Optional instance to populate.
     * @return {module:model/AlternatePatternInner} The populated <code>AlternatePatternInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AlternatePatternInner();

            if (data.hasOwnProperty('category')) {
                obj['category'] = LeafCategoryPattern.constructFromObject(data['category']);
            }
            if (data.hasOwnProperty('confidence')) {
                obj['confidence'] = ApiClient.convertToType(data['confidence'], 'Number');
            }
            if (data.hasOwnProperty('points')) {
                obj['points'] = ApiClient.convertToType(data['points'], [PointDetailsPattern]);
            }
            if (data.hasOwnProperty('recognizedString')) {
                obj['recognizedString'] = ApiClient.convertToType(data['recognizedString'], 'String');
            }
            if (data.hasOwnProperty('rotationAngle')) {
                obj['rotationAngle'] = ApiClient.convertToType(data['rotationAngle'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AlternatePatternInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AlternatePatternInner</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AlternatePatternInner.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['points']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['points'])) {
                throw new Error("Expected the field `points` to be an array in the JSON data but got " + data['points']);
            }
            // validate the optional field `points` (array)
            for (const item of data['points']) {
                PointDetailsPattern.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['recognizedString'] && !(typeof data['recognizedString'] === 'string' || data['recognizedString'] instanceof String)) {
            throw new Error("Expected the field `recognizedString` to be a primitive type in the JSON string but got " + data['recognizedString']);
        }

        return true;
    }


}

AlternatePatternInner.RequiredProperties = ["category", "recognizedString"];

/**
 * @member {module:model/LeafCategoryPattern} category
 */
AlternatePatternInner.prototype['category'] = undefined;

/**
 * A number between 0 and 1 which indicates the confidence level in the result
 * @member {Number} confidence
 */
AlternatePatternInner.prototype['confidence'] = undefined;

/**
 * Array of point objects that represent points that are relevant to the type of recognition unit. For example, for leaf node of inkDrawing category that represents a triangle, points would include the x,y coordinates of the vertices of the recognized triangle. The points represent the coordinates of points used to create the perfectly drawn shape that is closest to the original input. They may not exactly match.
 * @member {Array.<module:model/PointDetailsPattern>} points
 */
AlternatePatternInner.prototype['points'] = undefined;

/**
 * The recognized string from an inkWord or the name of a recognized shape in an inkDrawing object
 * @member {String} recognizedString
 */
AlternatePatternInner.prototype['recognizedString'] = undefined;

/**
 * The angular orientation of an object relative to the horizontal axis
 * @member {Number} rotationAngle
 */
AlternatePatternInner.prototype['rotationAngle'] = undefined;






export default AlternatePatternInner;

