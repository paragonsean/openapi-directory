/**
 * Ink Recognizer Client
 * The service is used to perform ink layout and recognition of written words and shapes. Ink strokes passed to the service are recognized and organized into recognition results in the response
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PointDetailsPattern model module.
 * @module model/PointDetailsPattern
 * @version 1.0
 */
class PointDetailsPattern {
    /**
     * Constructs a new <code>PointDetailsPattern</code>.
     * This holds all the properties of one point
     * @alias module:model/PointDetailsPattern
     * @param x {Number} This represents the x coordinate of the point
     * @param y {Number} This represents the y coordinate of the point
     */
    constructor(x, y) { 
        
        PointDetailsPattern.initialize(this, x, y);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, x, y) { 
        obj['x'] = x;
        obj['y'] = y;
    }

    /**
     * Constructs a <code>PointDetailsPattern</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PointDetailsPattern} obj Optional instance to populate.
     * @return {module:model/PointDetailsPattern} The populated <code>PointDetailsPattern</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PointDetailsPattern();

            if (data.hasOwnProperty('x')) {
                obj['x'] = ApiClient.convertToType(data['x'], 'Number');
            }
            if (data.hasOwnProperty('y')) {
                obj['y'] = ApiClient.convertToType(data['y'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PointDetailsPattern</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PointDetailsPattern</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PointDetailsPattern.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }

        return true;
    }


}

PointDetailsPattern.RequiredProperties = ["x", "y"];

/**
 * This represents the x coordinate of the point
 * @member {Number} x
 */
PointDetailsPattern.prototype['x'] = undefined;

/**
 * This represents the y coordinate of the point
 * @member {Number} y
 */
PointDetailsPattern.prototype['y'] = undefined;






export default PointDetailsPattern;

