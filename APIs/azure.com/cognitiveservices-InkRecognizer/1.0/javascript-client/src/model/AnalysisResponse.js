/**
 * Ink Recognizer Client
 * The service is used to perform ink layout and recognition of written words and shapes. Ink strokes passed to the service are recognized and organized into recognition results in the response
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import RecognitionUnitInner from './RecognitionUnitInner';

/**
 * The AnalysisResponse model module.
 * @module model/AnalysisResponse
 * @version 1.0
 */
class AnalysisResponse {
    /**
     * Constructs a new <code>AnalysisResponse</code>.
     * This shows the expected contents of a response from the service
     * @alias module:model/AnalysisResponse
     * @param recognitionUnits {Array.<module:model/RecognitionUnitInner>} The list of recognition units based on the analysis of the ink strokes.
     */
    constructor(recognitionUnits) { 
        
        AnalysisResponse.initialize(this, recognitionUnits);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, recognitionUnits) { 
        obj['recognitionUnits'] = recognitionUnits;
    }

    /**
     * Constructs a <code>AnalysisResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AnalysisResponse} obj Optional instance to populate.
     * @return {module:model/AnalysisResponse} The populated <code>AnalysisResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AnalysisResponse();

            if (data.hasOwnProperty('language')) {
                obj['language'] = ApiClient.convertToType(data['language'], 'String');
            }
            if (data.hasOwnProperty('recognitionUnits')) {
                obj['recognitionUnits'] = ApiClient.convertToType(data['recognitionUnits'], [RecognitionUnitInner]);
            }
            if (data.hasOwnProperty('unit')) {
                obj['unit'] = ApiClient.convertToType(data['unit'], 'String');
            }
            if (data.hasOwnProperty('unitMultiple')) {
                obj['unitMultiple'] = ApiClient.convertToType(data['unitMultiple'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AnalysisResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AnalysisResponse</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AnalysisResponse.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['language'] && !(typeof data['language'] === 'string' || data['language'] instanceof String)) {
            throw new Error("Expected the field `language` to be a primitive type in the JSON string but got " + data['language']);
        }
        if (data['recognitionUnits']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['recognitionUnits'])) {
                throw new Error("Expected the field `recognitionUnits` to be an array in the JSON data but got " + data['recognitionUnits']);
            }
            // validate the optional field `recognitionUnits` (array)
            for (const item of data['recognitionUnits']) {
                RecognitionUnitInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['unit'] && !(typeof data['unit'] === 'string' || data['unit'] instanceof String)) {
            throw new Error("Expected the field `unit` to be a primitive type in the JSON string but got " + data['unit']);
        }

        return true;
    }


}

AnalysisResponse.RequiredProperties = ["recognitionUnits"];

/**
 * This is the language used for recognizing handwriting from the ink strokes in the request.
 * @member {String} language
 */
AnalysisResponse.prototype['language'] = undefined;

/**
 * The list of recognition units based on the analysis of the ink strokes.
 * @member {Array.<module:model/RecognitionUnitInner>} recognitionUnits
 */
AnalysisResponse.prototype['recognitionUnits'] = undefined;

/**
 * This is the physical unit of the ink strokes. It is up to the application developer to decide how to convert the device specific units to physical units before calling the service. The conversion factor can be different based on the type of the device used.
 * @member {module:model/AnalysisResponse.UnitEnum} unit
 */
AnalysisResponse.prototype['unit'] = undefined;

/**
 *  This is a scaling factor to be applied to the point coordinates when interpreting them in the physical units specified.
 * @member {Number} unitMultiple
 */
AnalysisResponse.prototype['unitMultiple'] = undefined;





/**
 * Allowed values for the <code>unit</code> property.
 * @enum {String}
 * @readonly
 */
AnalysisResponse['UnitEnum'] = {

    /**
     * value: "mm"
     * @const
     */
    "mm": "mm",

    /**
     * value: "cm"
     * @const
     */
    "cm": "cm",

    /**
     * value: "in"
     * @const
     */
    "in": "in"
};



export default AnalysisResponse;

