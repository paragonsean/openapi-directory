/**
 * Ink Recognizer Client
 * The service is used to perform ink layout and recognition of written words and shapes. Ink strokes passed to the service are recognized and organized into recognition results in the response
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DrawingAttributesPatternColor from './DrawingAttributesPatternColor';

/**
 * The DrawingAttributesPattern model module.
 * @module model/DrawingAttributesPattern
 * @version 1.0
 */
class DrawingAttributesPattern {
    /**
     * Constructs a new <code>DrawingAttributesPattern</code>.
     * The properties to use when rendering ink
     * @alias module:model/DrawingAttributesPattern
     */
    constructor() { 
        
        DrawingAttributesPattern.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DrawingAttributesPattern</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DrawingAttributesPattern} obj Optional instance to populate.
     * @return {module:model/DrawingAttributesPattern} The populated <code>DrawingAttributesPattern</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DrawingAttributesPattern();

            if (data.hasOwnProperty('color')) {
                obj['color'] = DrawingAttributesPatternColor.constructFromObject(data['color']);
            }
            if (data.hasOwnProperty('fitToCurve')) {
                obj['fitToCurve'] = ApiClient.convertToType(data['fitToCurve'], 'Boolean');
            }
            if (data.hasOwnProperty('height')) {
                obj['height'] = ApiClient.convertToType(data['height'], 'Number');
            }
            if (data.hasOwnProperty('ignorePressure')) {
                obj['ignorePressure'] = ApiClient.convertToType(data['ignorePressure'], 'Boolean');
            }
            if (data.hasOwnProperty('rasterOp')) {
                obj['rasterOp'] = ApiClient.convertToType(data['rasterOp'], 'String');
            }
            if (data.hasOwnProperty('tip')) {
                obj['tip'] = ApiClient.convertToType(data['tip'], 'String');
            }
            if (data.hasOwnProperty('width')) {
                obj['width'] = ApiClient.convertToType(data['width'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DrawingAttributesPattern</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DrawingAttributesPattern</code>.
     */
    static validateJSON(data) {
        // validate the optional field `color`
        if (data['color']) { // data not null
          DrawingAttributesPatternColor.validateJSON(data['color']);
        }
        // ensure the json data is a string
        if (data['rasterOp'] && !(typeof data['rasterOp'] === 'string' || data['rasterOp'] instanceof String)) {
            throw new Error("Expected the field `rasterOp` to be a primitive type in the JSON string but got " + data['rasterOp']);
        }
        // ensure the json data is a string
        if (data['tip'] && !(typeof data['tip'] === 'string' || data['tip'] instanceof String)) {
            throw new Error("Expected the field `tip` to be a primitive type in the JSON string but got " + data['tip']);
        }

        return true;
    }


}



/**
 * @member {module:model/DrawingAttributesPatternColor} color
 */
DrawingAttributesPattern.prototype['color'] = undefined;

/**
 *  This indicates whether Bezier smoothing is used to render the stroke
 * @member {Boolean} fitToCurve
 */
DrawingAttributesPattern.prototype['fitToCurve'] = undefined;

/**
 * The height of the stylus used to draw the stroke
 * @member {Number} height
 */
DrawingAttributesPattern.prototype['height'] = undefined;

/**
 *  This indicates whether the thickness of a rendered Stroke changes according the amount of pressure applied.
 * @member {Boolean} ignorePressure
 */
DrawingAttributesPattern.prototype['ignorePressure'] = undefined;

/**
 * @member {module:model/DrawingAttributesPattern.RasterOpEnum} rasterOp
 */
DrawingAttributesPattern.prototype['rasterOp'] = undefined;

/**
 * This specifies the tip to be used to draw a stroke
 * @member {module:model/DrawingAttributesPattern.TipEnum} tip
 */
DrawingAttributesPattern.prototype['tip'] = undefined;

/**
 * The width of the stylus used to draw the stroke
 * @member {Number} width
 */
DrawingAttributesPattern.prototype['width'] = undefined;





/**
 * Allowed values for the <code>rasterOp</code> property.
 * @enum {String}
 * @readonly
 */
DrawingAttributesPattern['RasterOpEnum'] = {

    /**
     * value: "noOperation"
     * @const
     */
    "noOperation": "noOperation",

    /**
     * value: "copyPen"
     * @const
     */
    "copyPen": "copyPen",

    /**
     * value: "maskPen"
     * @const
     */
    "maskPen": "maskPen"
};


/**
 * Allowed values for the <code>tip</code> property.
 * @enum {String}
 * @readonly
 */
DrawingAttributesPattern['TipEnum'] = {

    /**
     * value: "ellipse"
     * @const
     */
    "ellipse": "ellipse",

    /**
     * value: "rectangle"
     * @const
     */
    "rectangle": "rectangle"
};



export default DrawingAttributesPattern;

