/**
 * Ink Recognizer Client
 * The service is used to perform ink layout and recognition of written words and shapes. Ink strokes passed to the service are recognized and organized into recognition results in the response
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The InkPoint model module.
 * @module model/InkPoint
 * @version 1.0
 */
class InkPoint {
    /**
     * Constructs a new <code>InkPoint</code>.
     * An object containing the properties of an point in the path of an ink stroke. The main properties are the x and y values. Other include tip pressure, x tilt etc. For the coordinate values, it is recommended to have a precision of 8 digits after the decimal to obtain most accurate recognition results. The origin (0,0) of the canvas is assumed to be at the top left corner of the canvas
     * @alias module:model/InkPoint
     * @param x {Number} The x coordinate of the pen location on the writing surface.
     * @param y {Number} The y coordinate of the pen location on the writing surface.
     */
    constructor(x, y) { 
        
        InkPoint.initialize(this, x, y);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, x, y) { 
        obj['x'] = x;
        obj['y'] = y;
    }

    /**
     * Constructs a <code>InkPoint</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InkPoint} obj Optional instance to populate.
     * @return {module:model/InkPoint} The populated <code>InkPoint</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InkPoint();

            if (data.hasOwnProperty('barrelPressure')) {
                obj['barrelPressure'] = ApiClient.convertToType(data['barrelPressure'], 'Number');
            }
            if (data.hasOwnProperty('barrelSwitch')) {
                obj['barrelSwitch'] = ApiClient.convertToType(data['barrelSwitch'], 'Boolean');
            }
            if (data.hasOwnProperty('eraser')) {
                obj['eraser'] = ApiClient.convertToType(data['eraser'], 'Boolean');
            }
            if (data.hasOwnProperty('height')) {
                obj['height'] = ApiClient.convertToType(data['height'], 'Number');
            }
            if (data.hasOwnProperty('inverted')) {
                obj['inverted'] = ApiClient.convertToType(data['inverted'], 'Boolean');
            }
            if (data.hasOwnProperty('secondaryTip')) {
                obj['secondaryTip'] = ApiClient.convertToType(data['secondaryTip'], 'Boolean');
            }
            if (data.hasOwnProperty('timestamp')) {
                obj['timestamp'] = ApiClient.convertToType(data['timestamp'], 'Number');
            }
            if (data.hasOwnProperty('tipPressure')) {
                obj['tipPressure'] = ApiClient.convertToType(data['tipPressure'], 'Number');
            }
            if (data.hasOwnProperty('tipSwitch')) {
                obj['tipSwitch'] = ApiClient.convertToType(data['tipSwitch'], 'Boolean');
            }
            if (data.hasOwnProperty('width')) {
                obj['width'] = ApiClient.convertToType(data['width'], 'Number');
            }
            if (data.hasOwnProperty('x')) {
                obj['x'] = ApiClient.convertToType(data['x'], 'Number');
            }
            if (data.hasOwnProperty('xTilt')) {
                obj['xTilt'] = ApiClient.convertToType(data['xTilt'], 'Number');
            }
            if (data.hasOwnProperty('y')) {
                obj['y'] = ApiClient.convertToType(data['y'], 'Number');
            }
            if (data.hasOwnProperty('yTilt')) {
                obj['yTilt'] = ApiClient.convertToType(data['yTilt'], 'Number');
            }
            if (data.hasOwnProperty('z')) {
                obj['z'] = ApiClient.convertToType(data['z'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>InkPoint</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>InkPoint</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of InkPoint.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }

        return true;
    }


}

InkPoint.RequiredProperties = ["x", "y"];

/**
 * The force exerted directly by the user on a transducer sensor, such as a pressure-sensitive button on the barrel of a stylus. This may not be used for recognition.
 * @member {Number} barrelPressure
 */
InkPoint.prototype['barrelPressure'] = undefined;

/**
 * A non-tip button located on the barrel of a stylus. Its function is typically mapped to a system secondary button. This may not be used for recognition.
 * @member {Boolean} barrelSwitch
 */
InkPoint.prototype['barrelSwitch'] = undefined;

/**
 * The control is used for erasing objects. It is typically located opposite the writing end of a stylus. This may not be used for recognition.
 * @member {Boolean} eraser
 */
InkPoint.prototype['eraser'] = undefined;

/**
 * The height of the tip of the writing instrument. This is used by touch screen devices to report the height of the finger contact on the writing surface. This may not be used for recognition.
 * @member {Number} height
 */
InkPoint.prototype['height'] = undefined;

/**
 * A value that indicates that the currently sensed position originates from the end of a stylus opposite the tip switch. This may not be used for recognition.
 * @member {Boolean} inverted
 */
InkPoint.prototype['inverted'] = undefined;

/**
 * A secondary switch used in conjunction with the tip switch to indicate pressure above a certain threshold applied with the stylus. This may not be used for recognition.
 * @member {Boolean} secondaryTip
 */
InkPoint.prototype['secondaryTip'] = undefined;

/**
 * The time relative to the absolute time the transducer last became active. This may not be used for recognition.
 * @member {Number} timestamp
 */
InkPoint.prototype['timestamp'] = undefined;

/**
 * The force exerted against the tablet surface by the transducer, typically a stylus. This may not be used for recognition.
 * @member {Number} tipPressure
 */
InkPoint.prototype['tipPressure'] = undefined;

/**
 * A switch located on the tip of a stylus indicating contact of the stylus with a surface. This may not be used for recognition.
 * @member {Boolean} tipSwitch
 */
InkPoint.prototype['tipSwitch'] = undefined;

/**
 * The width of the tip of the writing instrument. This is used by touch screen devices to report the width of the finger contact on the writing surface. This may not be used for recognition.
 * @member {Number} width
 */
InkPoint.prototype['width'] = undefined;

/**
 * The x coordinate of the pen location on the writing surface.
 * @member {Number} x
 */
InkPoint.prototype['x'] = undefined;

/**
 * The plane angle between the Y-Z plane and the plane containing the transducer axis and the Y axis. This may not be used for recognition.
 * @member {Number} xTilt
 */
InkPoint.prototype['xTilt'] = undefined;

/**
 * The y coordinate of the pen location on the writing surface.
 * @member {Number} y
 */
InkPoint.prototype['y'] = undefined;

/**
 * The angle between the X-Z and transducer-X planes. A positive Y Tilt is toward the user. This may not be used for recognition.
 * @member {Number} yTilt
 */
InkPoint.prototype['yTilt'] = undefined;

/**
 * The z coordinate of the pen location on the writing space. This may not be used for recognition.
 * @member {Number} z
 */
InkPoint.prototype['z'] = undefined;






export default InkPoint;

