/**
 * Ink Recognizer Client
 * The service is used to perform ink layout and recognition of written words and shapes. Ink strokes passed to the service are recognized and organized into recognition results in the response
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The InkPointValueAttribute model module.
 * @module model/InkPointValueAttribute
 * @version 1.0
 */
class InkPointValueAttribute {
    /**
     * Constructs a new <code>InkPointValueAttribute</code>.
     * A container for the attributes of a value contained in the ink point object.
     * @alias module:model/InkPointValueAttribute
     */
    constructor() { 
        
        InkPointValueAttribute.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>InkPointValueAttribute</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InkPointValueAttribute} obj Optional instance to populate.
     * @return {module:model/InkPointValueAttribute} The populated <code>InkPointValueAttribute</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InkPointValueAttribute();

            if (data.hasOwnProperty('logicalMaximum')) {
                obj['logicalMaximum'] = ApiClient.convertToType(data['logicalMaximum'], 'Number');
            }
            if (data.hasOwnProperty('logicalMinimum')) {
                obj['logicalMinimum'] = ApiClient.convertToType(data['logicalMinimum'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>InkPointValueAttribute</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>InkPointValueAttribute</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }

        return true;
    }


}



/**
 * The maximum value for the attribute
 * @member {Number} logicalMaximum
 */
InkPointValueAttribute.prototype['logicalMaximum'] = undefined;

/**
 * The minimum value for the attribute
 * @member {Number} logicalMinimum
 */
InkPointValueAttribute.prototype['logicalMinimum'] = undefined;

/**
 * The name of the point attribute.
 * @member {String} name
 */
InkPointValueAttribute.prototype['name'] = undefined;






export default InkPointValueAttribute;

