/**
 * Ink Recognizer Client
 * The service is used to perform ink layout and recognition of written words and shapes. Ink strokes passed to the service are recognized and organized into recognition results in the response
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DrawingAttributesPatternColor model module.
 * @module model/DrawingAttributesPatternColor
 * @version 1.0
 */
class DrawingAttributesPatternColor {
    /**
     * Constructs a new <code>DrawingAttributesPatternColor</code>.
     * This shows the components of the color in rgba format
     * @alias module:model/DrawingAttributesPatternColor
     */
    constructor() { 
        
        DrawingAttributesPatternColor.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DrawingAttributesPatternColor</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DrawingAttributesPatternColor} obj Optional instance to populate.
     * @return {module:model/DrawingAttributesPatternColor} The populated <code>DrawingAttributesPatternColor</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DrawingAttributesPatternColor();

            if (data.hasOwnProperty('a')) {
                obj['a'] = ApiClient.convertToType(data['a'], 'Number');
            }
            if (data.hasOwnProperty('b')) {
                obj['b'] = ApiClient.convertToType(data['b'], 'Number');
            }
            if (data.hasOwnProperty('g')) {
                obj['g'] = ApiClient.convertToType(data['g'], 'Number');
            }
            if (data.hasOwnProperty('r')) {
                obj['r'] = ApiClient.convertToType(data['r'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DrawingAttributesPatternColor</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DrawingAttributesPatternColor</code>.
     */
    static validateJSON(data) {

        return true;
    }


}



/**
 * The alpha component of the color
 * @member {Number} a
 */
DrawingAttributesPatternColor.prototype['a'] = undefined;

/**
 * The blue component of the color
 * @member {Number} b
 */
DrawingAttributesPatternColor.prototype['b'] = undefined;

/**
 * The green component of the color
 * @member {Number} g
 */
DrawingAttributesPatternColor.prototype['g'] = undefined;

/**
 * The red component of the color
 * @member {Number} r
 */
DrawingAttributesPatternColor.prototype['r'] = undefined;






export default DrawingAttributesPatternColor;

