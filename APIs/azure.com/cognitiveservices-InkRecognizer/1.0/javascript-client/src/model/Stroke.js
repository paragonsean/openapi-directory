/**
 * Ink Recognizer Client
 * The service is used to perform ink layout and recognition of written words and shapes. Ink strokes passed to the service are recognized and organized into recognition results in the response
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DrawingAttributesPattern from './DrawingAttributesPattern';
import InkPoint from './InkPoint';

/**
 * The Stroke model module.
 * @module model/Stroke
 * @version 1.0
 */
class Stroke {
    /**
     * Constructs a new <code>Stroke</code>.
     * @alias module:model/Stroke
     * @param id {Number} This is treated as a unique identifier for each stroke within a request. If the id is repeated within the same request, the service will return an error.
     * @param points {Array.<module:model/InkPoint>} 
     */
    constructor(id, points) { 
        
        Stroke.initialize(this, id, points);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, points) { 
        obj['id'] = id;
        obj['points'] = points;
    }

    /**
     * Constructs a <code>Stroke</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Stroke} obj Optional instance to populate.
     * @return {module:model/Stroke} The populated <code>Stroke</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Stroke();

            if (data.hasOwnProperty('drawingAttributes')) {
                obj['drawingAttributes'] = DrawingAttributesPattern.constructFromObject(data['drawingAttributes']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('language')) {
                obj['language'] = ApiClient.convertToType(data['language'], 'String');
            }
            if (data.hasOwnProperty('points')) {
                obj['points'] = ApiClient.convertToType(data['points'], [InkPoint]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Stroke</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Stroke</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Stroke.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `drawingAttributes`
        if (data['drawingAttributes']) { // data not null
          DrawingAttributesPattern.validateJSON(data['drawingAttributes']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // ensure the json data is a string
        if (data['language'] && !(typeof data['language'] === 'string' || data['language'] instanceof String)) {
            throw new Error("Expected the field `language` to be a primitive type in the JSON string but got " + data['language']);
        }
        if (data['points']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['points'])) {
                throw new Error("Expected the field `points` to be an array in the JSON data but got " + data['points']);
            }
            // validate the optional field `points` (array)
            for (const item of data['points']) {
                InkPoint.validateJSON(item);
            };
        }

        return true;
    }


}

Stroke.RequiredProperties = ["id", "points"];

/**
 * @member {module:model/DrawingAttributesPattern} drawingAttributes
 */
Stroke.prototype['drawingAttributes'] = undefined;

/**
 * This is treated as a unique identifier for each stroke within a request. If the id is repeated within the same request, the service will return an error.
 * @member {Number} id
 */
Stroke.prototype['id'] = undefined;

/**
 * This is an optional property which influences the decision about what the stroke kind is between inkWriting and inkDrawing. This property should be set ONLY if the type of user content is known ahead of time. Not setting this value implies the kind is not known ahead of time. Kind represents the type of content the stroke is a part of.
 * @member {module:model/Stroke.KindEnum} kind
 */
Stroke.prototype['kind'] = undefined;

/**
 * The IETF BCP 47 language code (for ex. en-US, en-GB, hi-IN etc.) of the expected language for the handwritten content in this stroke. The response will include results from this language.
 * @member {String} language
 */
Stroke.prototype['language'] = undefined;

/**
 * @member {Array.<module:model/InkPoint>} points
 */
Stroke.prototype['points'] = undefined;





/**
 * Allowed values for the <code>kind</code> property.
 * @enum {String}
 * @readonly
 */
Stroke['KindEnum'] = {

    /**
     * value: "inkDrawing"
     * @const
     */
    "inkDrawing": "inkDrawing",

    /**
     * value: "inkWriting"
     * @const
     */
    "inkWriting": "inkWriting"
};



export default Stroke;

