/**
 * Ink Recognizer Client
 * The service is used to perform ink layout and recognition of written words and shapes. Ink strokes passed to the service are recognized and organized into recognition results in the response
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AnalysisRequest from '../model/AnalysisRequest';
import AnalysisResponse from '../model/AnalysisResponse';
import ErrorModel from '../model/ErrorModel';

/**
* InkRecognizer service.
* @module api/InkRecognizerApi
* @version 1.0
*/
export default class InkRecognizerApi {

    /**
    * Constructs a new InkRecognizerApi. 
    * @alias module:api/InkRecognizerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the inkRecognizerRecognize operation.
     * @callback module:api/InkRecognizerApi~inkRecognizerRecognizeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AnalysisResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Ink Recognition operation is used to perform ink layout and recognition of written words and shapes. It allows passing the ink strokes to the service to get the recognition results in the response.
     * @param {module:model/AnalysisRequest} body The collection of stroke objects to send for analysis
     * @param {Object} opts Optional parameters
     * @param {String} [xMsClientRequestId] The request id used to uniquely identify each request during troubleshooting. This is an optional parameter useful for correlating logs and other artifacts.
     * @param {module:api/InkRecognizerApi~inkRecognizerRecognizeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AnalysisResponse}
     */
    inkRecognizerRecognize(body, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling inkRecognizerRecognize");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'x-ms-client-request-id': opts['xMsClientRequestId']
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AnalysisResponse;
      return this.apiClient.callApi(
        '/recognize', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
