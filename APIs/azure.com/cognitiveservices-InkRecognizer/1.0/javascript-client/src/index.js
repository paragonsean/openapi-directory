/**
 * Ink Recognizer Client
 * The service is used to perform ink layout and recognition of written words and shapes. Ink strokes passed to the service are recognized and organized into recognition results in the response
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import AlternatePatternInner from './model/AlternatePatternInner';
import AnalysisRequest from './model/AnalysisRequest';
import AnalysisResponse from './model/AnalysisResponse';
import CategoryPattern from './model/CategoryPattern';
import ClassPattern from './model/ClassPattern';
import ContainerCategoryPattern from './model/ContainerCategoryPattern';
import DrawingAttributesPattern from './model/DrawingAttributesPattern';
import DrawingAttributesPatternColor from './model/DrawingAttributesPatternColor';
import ErrorModel from './model/ErrorModel';
import ErrorModelDetailsInner from './model/ErrorModelDetailsInner';
import InkPoint from './model/InkPoint';
import InkPointValueAttribute from './model/InkPointValueAttribute';
import LeafCategoryPattern from './model/LeafCategoryPattern';
import PointDetailsPattern from './model/PointDetailsPattern';
import RecognitionUnitInner from './model/RecognitionUnitInner';
import RecognitionUnitInnerBoundingRectangle from './model/RecognitionUnitInnerBoundingRectangle';
import ShapePattern from './model/ShapePattern';
import Stroke from './model/Stroke';
import InkRecognizerApi from './api/InkRecognizerApi';


/**
* The service is used to perform ink layout and recognition of written words and shapes. Ink strokes passed to the service are recognized and organized into recognition results in the response.<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var InkRecognizerClient = require('index'); // See note below*.
* var xxxSvc = new InkRecognizerClient.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new InkRecognizerClient.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new InkRecognizerClient.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new InkRecognizerClient.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 1.0
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The AlternatePatternInner model constructor.
     * @property {module:model/AlternatePatternInner}
     */
    AlternatePatternInner,

    /**
     * The AnalysisRequest model constructor.
     * @property {module:model/AnalysisRequest}
     */
    AnalysisRequest,

    /**
     * The AnalysisResponse model constructor.
     * @property {module:model/AnalysisResponse}
     */
    AnalysisResponse,

    /**
     * The CategoryPattern model constructor.
     * @property {module:model/CategoryPattern}
     */
    CategoryPattern,

    /**
     * The ClassPattern model constructor.
     * @property {module:model/ClassPattern}
     */
    ClassPattern,

    /**
     * The ContainerCategoryPattern model constructor.
     * @property {module:model/ContainerCategoryPattern}
     */
    ContainerCategoryPattern,

    /**
     * The DrawingAttributesPattern model constructor.
     * @property {module:model/DrawingAttributesPattern}
     */
    DrawingAttributesPattern,

    /**
     * The DrawingAttributesPatternColor model constructor.
     * @property {module:model/DrawingAttributesPatternColor}
     */
    DrawingAttributesPatternColor,

    /**
     * The ErrorModel model constructor.
     * @property {module:model/ErrorModel}
     */
    ErrorModel,

    /**
     * The ErrorModelDetailsInner model constructor.
     * @property {module:model/ErrorModelDetailsInner}
     */
    ErrorModelDetailsInner,

    /**
     * The InkPoint model constructor.
     * @property {module:model/InkPoint}
     */
    InkPoint,

    /**
     * The InkPointValueAttribute model constructor.
     * @property {module:model/InkPointValueAttribute}
     */
    InkPointValueAttribute,

    /**
     * The LeafCategoryPattern model constructor.
     * @property {module:model/LeafCategoryPattern}
     */
    LeafCategoryPattern,

    /**
     * The PointDetailsPattern model constructor.
     * @property {module:model/PointDetailsPattern}
     */
    PointDetailsPattern,

    /**
     * The RecognitionUnitInner model constructor.
     * @property {module:model/RecognitionUnitInner}
     */
    RecognitionUnitInner,

    /**
     * The RecognitionUnitInnerBoundingRectangle model constructor.
     * @property {module:model/RecognitionUnitInnerBoundingRectangle}
     */
    RecognitionUnitInnerBoundingRectangle,

    /**
     * The ShapePattern model constructor.
     * @property {module:model/ShapePattern}
     */
    ShapePattern,

    /**
     * The Stroke model constructor.
     * @property {module:model/Stroke}
     */
    Stroke,

    /**
    * The InkRecognizerApi service constructor.
    * @property {module:api/InkRecognizerApi}
    */
    InkRecognizerApi
};
