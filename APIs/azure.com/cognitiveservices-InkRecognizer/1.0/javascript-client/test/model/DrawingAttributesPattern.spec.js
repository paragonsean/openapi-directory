/**
 * Ink Recognizer Client
 * The service is used to perform ink layout and recognition of written words and shapes. Ink strokes passed to the service are recognized and organized into recognition results in the response
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.InkRecognizerClient);
  }
}(this, function(expect, InkRecognizerClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new InkRecognizerClient.DrawingAttributesPattern();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DrawingAttributesPattern', function() {
    it('should create an instance of DrawingAttributesPattern', function() {
      // uncomment below and update the code to test DrawingAttributesPattern
      //var instance = new InkRecognizerClient.DrawingAttributesPattern();
      //expect(instance).to.be.a(InkRecognizerClient.DrawingAttributesPattern);
    });

    it('should have the property color (base name: "color")', function() {
      // uncomment below and update the code to test the property color
      //var instance = new InkRecognizerClient.DrawingAttributesPattern();
      //expect(instance).to.be();
    });

    it('should have the property fitToCurve (base name: "fitToCurve")', function() {
      // uncomment below and update the code to test the property fitToCurve
      //var instance = new InkRecognizerClient.DrawingAttributesPattern();
      //expect(instance).to.be();
    });

    it('should have the property height (base name: "height")', function() {
      // uncomment below and update the code to test the property height
      //var instance = new InkRecognizerClient.DrawingAttributesPattern();
      //expect(instance).to.be();
    });

    it('should have the property ignorePressure (base name: "ignorePressure")', function() {
      // uncomment below and update the code to test the property ignorePressure
      //var instance = new InkRecognizerClient.DrawingAttributesPattern();
      //expect(instance).to.be();
    });

    it('should have the property rasterOp (base name: "rasterOp")', function() {
      // uncomment below and update the code to test the property rasterOp
      //var instance = new InkRecognizerClient.DrawingAttributesPattern();
      //expect(instance).to.be();
    });

    it('should have the property tip (base name: "tip")', function() {
      // uncomment below and update the code to test the property tip
      //var instance = new InkRecognizerClient.DrawingAttributesPattern();
      //expect(instance).to.be();
    });

    it('should have the property width (base name: "width")', function() {
      // uncomment below and update the code to test the property width
      //var instance = new InkRecognizerClient.DrawingAttributesPattern();
      //expect(instance).to.be();
    });

  });

}));
