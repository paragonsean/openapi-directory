/**
 * Ink Recognizer Client
 * The service is used to perform ink layout and recognition of written words and shapes. Ink strokes passed to the service are recognized and organized into recognition results in the response
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.InkRecognizerClient);
  }
}(this, function(expect, InkRecognizerClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new InkRecognizerClient.RecognitionUnitInner();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('RecognitionUnitInner', function() {
    it('should create an instance of RecognitionUnitInner', function() {
      // uncomment below and update the code to test RecognitionUnitInner
      //var instance = new InkRecognizerClient.RecognitionUnitInner();
      //expect(instance).to.be.a(InkRecognizerClient.RecognitionUnitInner);
    });

    it('should have the property alternates (base name: "alternates")', function() {
      // uncomment below and update the code to test the property alternates
      //var instance = new InkRecognizerClient.RecognitionUnitInner();
      //expect(instance).to.be();
    });

    it('should have the property boundingRectangle (base name: "boundingRectangle")', function() {
      // uncomment below and update the code to test the property boundingRectangle
      //var instance = new InkRecognizerClient.RecognitionUnitInner();
      //expect(instance).to.be();
    });

    it('should have the property category (base name: "category")', function() {
      // uncomment below and update the code to test the property category
      //var instance = new InkRecognizerClient.RecognitionUnitInner();
      //expect(instance).to.be();
    });

    it('should have the property center (base name: "center")', function() {
      // uncomment below and update the code to test the property center
      //var instance = new InkRecognizerClient.RecognitionUnitInner();
      //expect(instance).to.be();
    });

    it('should have the property childIds (base name: "childIds")', function() {
      // uncomment below and update the code to test the property childIds
      //var instance = new InkRecognizerClient.RecognitionUnitInner();
      //expect(instance).to.be();
    });

    it('should have the property _class (base name: "class")', function() {
      // uncomment below and update the code to test the property _class
      //var instance = new InkRecognizerClient.RecognitionUnitInner();
      //expect(instance).to.be();
    });

    it('should have the property confidence (base name: "confidence")', function() {
      // uncomment below and update the code to test the property confidence
      //var instance = new InkRecognizerClient.RecognitionUnitInner();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new InkRecognizerClient.RecognitionUnitInner();
      //expect(instance).to.be();
    });

    it('should have the property parentId (base name: "parentId")', function() {
      // uncomment below and update the code to test the property parentId
      //var instance = new InkRecognizerClient.RecognitionUnitInner();
      //expect(instance).to.be();
    });

    it('should have the property points (base name: "points")', function() {
      // uncomment below and update the code to test the property points
      //var instance = new InkRecognizerClient.RecognitionUnitInner();
      //expect(instance).to.be();
    });

    it('should have the property recognizedObject (base name: "recognizedObject")', function() {
      // uncomment below and update the code to test the property recognizedObject
      //var instance = new InkRecognizerClient.RecognitionUnitInner();
      //expect(instance).to.be();
    });

    it('should have the property recognizedText (base name: "recognizedText")', function() {
      // uncomment below and update the code to test the property recognizedText
      //var instance = new InkRecognizerClient.RecognitionUnitInner();
      //expect(instance).to.be();
    });

    it('should have the property rotatedBoundingRectangle (base name: "rotatedBoundingRectangle")', function() {
      // uncomment below and update the code to test the property rotatedBoundingRectangle
      //var instance = new InkRecognizerClient.RecognitionUnitInner();
      //expect(instance).to.be();
    });

    it('should have the property rotationAngle (base name: "rotationAngle")', function() {
      // uncomment below and update the code to test the property rotationAngle
      //var instance = new InkRecognizerClient.RecognitionUnitInner();
      //expect(instance).to.be();
    });

    it('should have the property strokeIds (base name: "strokeIds")', function() {
      // uncomment below and update the code to test the property strokeIds
      //var instance = new InkRecognizerClient.RecognitionUnitInner();
      //expect(instance).to.be();
    });

  });

}));
