/**
 * Ink Recognizer Client
 * The service is used to perform ink layout and recognition of written words and shapes. Ink strokes passed to the service are recognized and organized into recognition results in the response
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.InkRecognizerClient);
  }
}(this, function(expect, InkRecognizerClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new InkRecognizerClient.InkPoint();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('InkPoint', function() {
    it('should create an instance of InkPoint', function() {
      // uncomment below and update the code to test InkPoint
      //var instance = new InkRecognizerClient.InkPoint();
      //expect(instance).to.be.a(InkRecognizerClient.InkPoint);
    });

    it('should have the property barrelPressure (base name: "barrelPressure")', function() {
      // uncomment below and update the code to test the property barrelPressure
      //var instance = new InkRecognizerClient.InkPoint();
      //expect(instance).to.be();
    });

    it('should have the property barrelSwitch (base name: "barrelSwitch")', function() {
      // uncomment below and update the code to test the property barrelSwitch
      //var instance = new InkRecognizerClient.InkPoint();
      //expect(instance).to.be();
    });

    it('should have the property eraser (base name: "eraser")', function() {
      // uncomment below and update the code to test the property eraser
      //var instance = new InkRecognizerClient.InkPoint();
      //expect(instance).to.be();
    });

    it('should have the property height (base name: "height")', function() {
      // uncomment below and update the code to test the property height
      //var instance = new InkRecognizerClient.InkPoint();
      //expect(instance).to.be();
    });

    it('should have the property inverted (base name: "inverted")', function() {
      // uncomment below and update the code to test the property inverted
      //var instance = new InkRecognizerClient.InkPoint();
      //expect(instance).to.be();
    });

    it('should have the property secondaryTip (base name: "secondaryTip")', function() {
      // uncomment below and update the code to test the property secondaryTip
      //var instance = new InkRecognizerClient.InkPoint();
      //expect(instance).to.be();
    });

    it('should have the property timestamp (base name: "timestamp")', function() {
      // uncomment below and update the code to test the property timestamp
      //var instance = new InkRecognizerClient.InkPoint();
      //expect(instance).to.be();
    });

    it('should have the property tipPressure (base name: "tipPressure")', function() {
      // uncomment below and update the code to test the property tipPressure
      //var instance = new InkRecognizerClient.InkPoint();
      //expect(instance).to.be();
    });

    it('should have the property tipSwitch (base name: "tipSwitch")', function() {
      // uncomment below and update the code to test the property tipSwitch
      //var instance = new InkRecognizerClient.InkPoint();
      //expect(instance).to.be();
    });

    it('should have the property width (base name: "width")', function() {
      // uncomment below and update the code to test the property width
      //var instance = new InkRecognizerClient.InkPoint();
      //expect(instance).to.be();
    });

    it('should have the property x (base name: "x")', function() {
      // uncomment below and update the code to test the property x
      //var instance = new InkRecognizerClient.InkPoint();
      //expect(instance).to.be();
    });

    it('should have the property xTilt (base name: "xTilt")', function() {
      // uncomment below and update the code to test the property xTilt
      //var instance = new InkRecognizerClient.InkPoint();
      //expect(instance).to.be();
    });

    it('should have the property y (base name: "y")', function() {
      // uncomment below and update the code to test the property y
      //var instance = new InkRecognizerClient.InkPoint();
      //expect(instance).to.be();
    });

    it('should have the property yTilt (base name: "yTilt")', function() {
      // uncomment below and update the code to test the property yTilt
      //var instance = new InkRecognizerClient.InkPoint();
      //expect(instance).to.be();
    });

    it('should have the property z (base name: "z")', function() {
      // uncomment below and update the code to test the property z
      //var instance = new InkRecognizerClient.InkPoint();
      //expect(instance).to.be();
    });

  });

}));
