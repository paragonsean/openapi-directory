/**
 * Ink Recognizer Client
 * The service is used to perform ink layout and recognition of written words and shapes. Ink strokes passed to the service are recognized and organized into recognition results in the response
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.InkRecognizerClient);
  }
}(this, function(expect, InkRecognizerClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new InkRecognizerClient.AlternatePatternInner();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('AlternatePatternInner', function() {
    it('should create an instance of AlternatePatternInner', function() {
      // uncomment below and update the code to test AlternatePatternInner
      //var instance = new InkRecognizerClient.AlternatePatternInner();
      //expect(instance).to.be.a(InkRecognizerClient.AlternatePatternInner);
    });

    it('should have the property category (base name: "category")', function() {
      // uncomment below and update the code to test the property category
      //var instance = new InkRecognizerClient.AlternatePatternInner();
      //expect(instance).to.be();
    });

    it('should have the property confidence (base name: "confidence")', function() {
      // uncomment below and update the code to test the property confidence
      //var instance = new InkRecognizerClient.AlternatePatternInner();
      //expect(instance).to.be();
    });

    it('should have the property points (base name: "points")', function() {
      // uncomment below and update the code to test the property points
      //var instance = new InkRecognizerClient.AlternatePatternInner();
      //expect(instance).to.be();
    });

    it('should have the property recognizedString (base name: "recognizedString")', function() {
      // uncomment below and update the code to test the property recognizedString
      //var instance = new InkRecognizerClient.AlternatePatternInner();
      //expect(instance).to.be();
    });

    it('should have the property rotationAngle (base name: "rotationAngle")', function() {
      // uncomment below and update the code to test the property rotationAngle
      //var instance = new InkRecognizerClient.AlternatePatternInner();
      //expect(instance).to.be();
    });

  });

}));
