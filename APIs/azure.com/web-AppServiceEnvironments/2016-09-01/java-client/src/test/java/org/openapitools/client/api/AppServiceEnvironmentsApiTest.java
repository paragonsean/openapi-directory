/*
 * AppServiceEnvironments API Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-09-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AddressResponse;
import org.openapitools.client.model.AppServiceEnvironmentCollection;
import org.openapitools.client.model.AppServiceEnvironmentPatchResource;
import org.openapitools.client.model.AppServiceEnvironmentResource;
import org.openapitools.client.model.AppServiceEnvironmentsListAppServicePlans200Response;
import org.openapitools.client.model.AppServiceEnvironmentsListMetrics200Response;
import org.openapitools.client.model.AppServiceEnvironmentsListMultiRolePoolInstanceMetricDefinitions200Response;
import org.openapitools.client.model.AppServiceEnvironmentsListOperations200ResponseInner;
import org.openapitools.client.model.AppServiceEnvironmentsListUsages200Response;
import org.openapitools.client.model.AppServiceEnvironmentsResume200Response;
import org.openapitools.client.model.HostingEnvironmentDiagnostics;
import org.openapitools.client.model.MetricDefinition;
import org.openapitools.client.model.SkuInfoCollection;
import org.openapitools.client.model.StampCapacityCollection;
import org.openapitools.client.model.UsageCollection;
import org.openapitools.client.model.WorkerPoolCollection;
import org.openapitools.client.model.WorkerPoolResource;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AppServiceEnvironmentsApi
 */
@Disabled
public class AppServiceEnvironmentsApiTest {

    private final AppServiceEnvironmentsApi api = new AppServiceEnvironmentsApi();

    /**
     * Create or update an App Service Environment.
     *
     * Create or update an App Service Environment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appServiceEnvironmentsCreateOrUpdateTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        AppServiceEnvironmentResource hostingEnvironmentEnvelope = null;
        AppServiceEnvironmentResource response = api.appServiceEnvironmentsCreateOrUpdate(resourceGroupName, name, subscriptionId, apiVersion, hostingEnvironmentEnvelope);
        // TODO: test validations
    }

    /**
     * Create or update a multi-role pool.
     *
     * Create or update a multi-role pool.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appServiceEnvironmentsCreateOrUpdateMultiRolePoolTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        WorkerPoolResource multiRolePoolEnvelope = null;
        WorkerPoolResource response = api.appServiceEnvironmentsCreateOrUpdateMultiRolePool(resourceGroupName, name, subscriptionId, apiVersion, multiRolePoolEnvelope);
        // TODO: test validations
    }

    /**
     * Create or update a worker pool.
     *
     * Create or update a worker pool.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appServiceEnvironmentsCreateOrUpdateWorkerPoolTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String workerPoolName = null;
        String subscriptionId = null;
        String apiVersion = null;
        WorkerPoolResource workerPoolEnvelope = null;
        WorkerPoolResource response = api.appServiceEnvironmentsCreateOrUpdateWorkerPool(resourceGroupName, name, workerPoolName, subscriptionId, apiVersion, workerPoolEnvelope);
        // TODO: test validations
    }

    /**
     * Delete an App Service Environment.
     *
     * Delete an App Service Environment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appServiceEnvironmentsDeleteTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        Boolean forceDelete = null;
        api.appServiceEnvironmentsDelete(resourceGroupName, name, subscriptionId, apiVersion, forceDelete);
        // TODO: test validations
    }

    /**
     * Get the properties of an App Service Environment.
     *
     * Get the properties of an App Service Environment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appServiceEnvironmentsGetTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        AppServiceEnvironmentResource response = api.appServiceEnvironmentsGet(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get a diagnostics item for an App Service Environment.
     *
     * Get a diagnostics item for an App Service Environment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appServiceEnvironmentsGetDiagnosticsItemTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String diagnosticsName = null;
        String subscriptionId = null;
        String apiVersion = null;
        HostingEnvironmentDiagnostics response = api.appServiceEnvironmentsGetDiagnosticsItem(resourceGroupName, name, diagnosticsName, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get properties of a multi-role pool.
     *
     * Get properties of a multi-role pool.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appServiceEnvironmentsGetMultiRolePoolTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        WorkerPoolResource response = api.appServiceEnvironmentsGetMultiRolePool(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get properties of a worker pool.
     *
     * Get properties of a worker pool.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appServiceEnvironmentsGetWorkerPoolTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String workerPoolName = null;
        String subscriptionId = null;
        String apiVersion = null;
        WorkerPoolResource response = api.appServiceEnvironmentsGetWorkerPool(resourceGroupName, name, workerPoolName, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get all App Service Environments for a subscription.
     *
     * Get all App Service Environments for a subscription.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appServiceEnvironmentsListTest() throws ApiException {
        String subscriptionId = null;
        String apiVersion = null;
        AppServiceEnvironmentCollection response = api.appServiceEnvironmentsList(subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get all App Service plans in an App Service Environment.
     *
     * Get all App Service plans in an App Service Environment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appServiceEnvironmentsListAppServicePlansTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        AppServiceEnvironmentsListAppServicePlans200Response response = api.appServiceEnvironmentsListAppServicePlans(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get all App Service Environments in a resource group.
     *
     * Get all App Service Environments in a resource group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appServiceEnvironmentsListByResourceGroupTest() throws ApiException {
        String resourceGroupName = null;
        String subscriptionId = null;
        String apiVersion = null;
        AppServiceEnvironmentCollection response = api.appServiceEnvironmentsListByResourceGroup(resourceGroupName, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get the used, available, and total worker capacity an App Service Environment.
     *
     * Get the used, available, and total worker capacity an App Service Environment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appServiceEnvironmentsListCapacitiesTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        StampCapacityCollection response = api.appServiceEnvironmentsListCapacities(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get diagnostic information for an App Service Environment.
     *
     * Get diagnostic information for an App Service Environment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appServiceEnvironmentsListDiagnosticsTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        List<HostingEnvironmentDiagnostics> response = api.appServiceEnvironmentsListDiagnostics(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get global metric definitions of an App Service Environment.
     *
     * Get global metric definitions of an App Service Environment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appServiceEnvironmentsListMetricDefinitionsTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        MetricDefinition response = api.appServiceEnvironmentsListMetricDefinitions(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get global metrics of an App Service Environment.
     *
     * Get global metrics of an App Service Environment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appServiceEnvironmentsListMetricsTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        Boolean details = null;
        String $filter = null;
        AppServiceEnvironmentsListMetrics200Response response = api.appServiceEnvironmentsListMetrics(resourceGroupName, name, subscriptionId, apiVersion, details, $filter);
        // TODO: test validations
    }

    /**
     * Get metric definitions for a multi-role pool of an App Service Environment.
     *
     * Get metric definitions for a multi-role pool of an App Service Environment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appServiceEnvironmentsListMultiRoleMetricDefinitionsTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        AppServiceEnvironmentsListMultiRolePoolInstanceMetricDefinitions200Response response = api.appServiceEnvironmentsListMultiRoleMetricDefinitions(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get metrics for a multi-role pool of an App Service Environment.
     *
     * Get metrics for a multi-role pool of an App Service Environment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appServiceEnvironmentsListMultiRoleMetricsTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        String startTime = null;
        String endTime = null;
        String timeGrain = null;
        Boolean details = null;
        String $filter = null;
        AppServiceEnvironmentsListMetrics200Response response = api.appServiceEnvironmentsListMultiRoleMetrics(resourceGroupName, name, subscriptionId, apiVersion, startTime, endTime, timeGrain, details, $filter);
        // TODO: test validations
    }

    /**
     * Get metric definitions for a specific instance of a multi-role pool of an App Service Environment.
     *
     * Get metric definitions for a specific instance of a multi-role pool of an App Service Environment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appServiceEnvironmentsListMultiRolePoolInstanceMetricDefinitionsTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String instance = null;
        String subscriptionId = null;
        String apiVersion = null;
        AppServiceEnvironmentsListMultiRolePoolInstanceMetricDefinitions200Response response = api.appServiceEnvironmentsListMultiRolePoolInstanceMetricDefinitions(resourceGroupName, name, instance, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get metrics for a specific instance of a multi-role pool of an App Service Environment.
     *
     * Get metrics for a specific instance of a multi-role pool of an App Service Environment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appServiceEnvironmentsListMultiRolePoolInstanceMetricsTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String instance = null;
        String subscriptionId = null;
        String apiVersion = null;
        Boolean details = null;
        AppServiceEnvironmentsListMetrics200Response response = api.appServiceEnvironmentsListMultiRolePoolInstanceMetrics(resourceGroupName, name, instance, subscriptionId, apiVersion, details);
        // TODO: test validations
    }

    /**
     * Get available SKUs for scaling a multi-role pool.
     *
     * Get available SKUs for scaling a multi-role pool.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appServiceEnvironmentsListMultiRolePoolSkusTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        SkuInfoCollection response = api.appServiceEnvironmentsListMultiRolePoolSkus(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get all multi-role pools.
     *
     * Get all multi-role pools.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appServiceEnvironmentsListMultiRolePoolsTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        WorkerPoolCollection response = api.appServiceEnvironmentsListMultiRolePools(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get usage metrics for a multi-role pool of an App Service Environment.
     *
     * Get usage metrics for a multi-role pool of an App Service Environment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appServiceEnvironmentsListMultiRoleUsagesTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        UsageCollection response = api.appServiceEnvironmentsListMultiRoleUsages(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * List all currently running operations on the App Service Environment.
     *
     * List all currently running operations on the App Service Environment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appServiceEnvironmentsListOperationsTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        List<AppServiceEnvironmentsListOperations200ResponseInner> response = api.appServiceEnvironmentsListOperations(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get global usage metrics of an App Service Environment.
     *
     * Get global usage metrics of an App Service Environment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appServiceEnvironmentsListUsagesTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        String $filter = null;
        AppServiceEnvironmentsListUsages200Response response = api.appServiceEnvironmentsListUsages(resourceGroupName, name, subscriptionId, apiVersion, $filter);
        // TODO: test validations
    }

    /**
     * Get IP addresses assigned to an App Service Environment.
     *
     * Get IP addresses assigned to an App Service Environment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appServiceEnvironmentsListVipsTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        AddressResponse response = api.appServiceEnvironmentsListVips(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get all apps in an App Service Environment.
     *
     * Get all apps in an App Service Environment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appServiceEnvironmentsListWebAppsTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        String propertiesToInclude = null;
        AppServiceEnvironmentsResume200Response response = api.appServiceEnvironmentsListWebApps(resourceGroupName, name, subscriptionId, apiVersion, propertiesToInclude);
        // TODO: test validations
    }

    /**
     * Get metric definitions for a worker pool of an App Service Environment.
     *
     * Get metric definitions for a worker pool of an App Service Environment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appServiceEnvironmentsListWebWorkerMetricDefinitionsTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String workerPoolName = null;
        String subscriptionId = null;
        String apiVersion = null;
        AppServiceEnvironmentsListMultiRolePoolInstanceMetricDefinitions200Response response = api.appServiceEnvironmentsListWebWorkerMetricDefinitions(resourceGroupName, name, workerPoolName, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get metrics for a worker pool of a AppServiceEnvironment (App Service Environment).
     *
     * Get metrics for a worker pool of a AppServiceEnvironment (App Service Environment).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appServiceEnvironmentsListWebWorkerMetricsTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String workerPoolName = null;
        String subscriptionId = null;
        String apiVersion = null;
        Boolean details = null;
        String $filter = null;
        AppServiceEnvironmentsListMetrics200Response response = api.appServiceEnvironmentsListWebWorkerMetrics(resourceGroupName, name, workerPoolName, subscriptionId, apiVersion, details, $filter);
        // TODO: test validations
    }

    /**
     * Get usage metrics for a worker pool of an App Service Environment.
     *
     * Get usage metrics for a worker pool of an App Service Environment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appServiceEnvironmentsListWebWorkerUsagesTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String workerPoolName = null;
        String subscriptionId = null;
        String apiVersion = null;
        UsageCollection response = api.appServiceEnvironmentsListWebWorkerUsages(resourceGroupName, name, workerPoolName, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get metric definitions for a specific instance of a worker pool of an App Service Environment.
     *
     * Get metric definitions for a specific instance of a worker pool of an App Service Environment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appServiceEnvironmentsListWorkerPoolInstanceMetricDefinitionsTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String workerPoolName = null;
        String instance = null;
        String subscriptionId = null;
        String apiVersion = null;
        AppServiceEnvironmentsListMultiRolePoolInstanceMetricDefinitions200Response response = api.appServiceEnvironmentsListWorkerPoolInstanceMetricDefinitions(resourceGroupName, name, workerPoolName, instance, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get metrics for a specific instance of a worker pool of an App Service Environment.
     *
     * Get metrics for a specific instance of a worker pool of an App Service Environment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appServiceEnvironmentsListWorkerPoolInstanceMetricsTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String workerPoolName = null;
        String instance = null;
        String subscriptionId = null;
        String apiVersion = null;
        Boolean details = null;
        String $filter = null;
        AppServiceEnvironmentsListMetrics200Response response = api.appServiceEnvironmentsListWorkerPoolInstanceMetrics(resourceGroupName, name, workerPoolName, instance, subscriptionId, apiVersion, details, $filter);
        // TODO: test validations
    }

    /**
     * Get available SKUs for scaling a worker pool.
     *
     * Get available SKUs for scaling a worker pool.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appServiceEnvironmentsListWorkerPoolSkusTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String workerPoolName = null;
        String subscriptionId = null;
        String apiVersion = null;
        SkuInfoCollection response = api.appServiceEnvironmentsListWorkerPoolSkus(resourceGroupName, name, workerPoolName, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get all worker pools of an App Service Environment.
     *
     * Get all worker pools of an App Service Environment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appServiceEnvironmentsListWorkerPoolsTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        WorkerPoolCollection response = api.appServiceEnvironmentsListWorkerPools(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Reboot all machines in an App Service Environment.
     *
     * Reboot all machines in an App Service Environment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appServiceEnvironmentsRebootTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        api.appServiceEnvironmentsReboot(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Resume an App Service Environment.
     *
     * Resume an App Service Environment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appServiceEnvironmentsResumeTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        AppServiceEnvironmentsResume200Response response = api.appServiceEnvironmentsResume(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Suspend an App Service Environment.
     *
     * Suspend an App Service Environment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appServiceEnvironmentsSuspendTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        AppServiceEnvironmentsResume200Response response = api.appServiceEnvironmentsSuspend(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Create or update an App Service Environment.
     *
     * Create or update an App Service Environment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appServiceEnvironmentsUpdateTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        AppServiceEnvironmentPatchResource hostingEnvironmentEnvelope = null;
        AppServiceEnvironmentResource response = api.appServiceEnvironmentsUpdate(resourceGroupName, name, subscriptionId, apiVersion, hostingEnvironmentEnvelope);
        // TODO: test validations
    }

    /**
     * Create or update a multi-role pool.
     *
     * Create or update a multi-role pool.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appServiceEnvironmentsUpdateMultiRolePoolTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        WorkerPoolResource multiRolePoolEnvelope = null;
        WorkerPoolResource response = api.appServiceEnvironmentsUpdateMultiRolePool(resourceGroupName, name, subscriptionId, apiVersion, multiRolePoolEnvelope);
        // TODO: test validations
    }

    /**
     * Create or update a worker pool.
     *
     * Create or update a worker pool.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appServiceEnvironmentsUpdateWorkerPoolTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String workerPoolName = null;
        String subscriptionId = null;
        String apiVersion = null;
        WorkerPoolResource workerPoolEnvelope = null;
        WorkerPoolResource response = api.appServiceEnvironmentsUpdateWorkerPool(resourceGroupName, name, workerPoolName, subscriptionId, apiVersion, workerPoolEnvelope);
        // TODO: test validations
    }

}
