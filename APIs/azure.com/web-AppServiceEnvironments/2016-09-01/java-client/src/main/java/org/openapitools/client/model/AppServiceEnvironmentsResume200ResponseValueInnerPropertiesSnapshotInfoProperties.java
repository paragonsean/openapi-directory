/*
 * AppServiceEnvironments API Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-09-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AppServiceEnvironmentsResume200ResponseValueInnerPropertiesSnapshotInfoPropertiesRecoveryTarget;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SnapshotRecoveryRequest resource specific properties
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:58:46.446518-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AppServiceEnvironmentsResume200ResponseValueInnerPropertiesSnapshotInfoProperties {
  public static final String SERIALIZED_NAME_IGNORE_CONFLICTING_HOST_NAMES = "ignoreConflictingHostNames";
  @SerializedName(SERIALIZED_NAME_IGNORE_CONFLICTING_HOST_NAMES)
  private Boolean ignoreConflictingHostNames;

  public static final String SERIALIZED_NAME_OVERWRITE = "overwrite";
  @SerializedName(SERIALIZED_NAME_OVERWRITE)
  private Boolean overwrite;

  public static final String SERIALIZED_NAME_RECOVER_CONFIGURATION = "recoverConfiguration";
  @SerializedName(SERIALIZED_NAME_RECOVER_CONFIGURATION)
  private Boolean recoverConfiguration;

  public static final String SERIALIZED_NAME_RECOVERY_TARGET = "recoveryTarget";
  @SerializedName(SERIALIZED_NAME_RECOVERY_TARGET)
  private AppServiceEnvironmentsResume200ResponseValueInnerPropertiesSnapshotInfoPropertiesRecoveryTarget recoveryTarget;

  public static final String SERIALIZED_NAME_SNAPSHOT_TIME = "snapshotTime";
  @SerializedName(SERIALIZED_NAME_SNAPSHOT_TIME)
  private String snapshotTime;

  public AppServiceEnvironmentsResume200ResponseValueInnerPropertiesSnapshotInfoProperties() {
  }

  public AppServiceEnvironmentsResume200ResponseValueInnerPropertiesSnapshotInfoProperties ignoreConflictingHostNames(Boolean ignoreConflictingHostNames) {
    this.ignoreConflictingHostNames = ignoreConflictingHostNames;
    return this;
  }

  /**
   * If true, custom hostname conflicts will be ignored when recovering to a target web app. This setting is only necessary when RecoverConfiguration is enabled.
   * @return ignoreConflictingHostNames
   */
  @javax.annotation.Nullable
  public Boolean getIgnoreConflictingHostNames() {
    return ignoreConflictingHostNames;
  }

  public void setIgnoreConflictingHostNames(Boolean ignoreConflictingHostNames) {
    this.ignoreConflictingHostNames = ignoreConflictingHostNames;
  }


  public AppServiceEnvironmentsResume200ResponseValueInnerPropertiesSnapshotInfoProperties overwrite(Boolean overwrite) {
    this.overwrite = overwrite;
    return this;
  }

  /**
   * If &lt;code&gt;true&lt;/code&gt; the recovery operation can overwrite source app; otherwise, &lt;code&gt;false&lt;/code&gt;.
   * @return overwrite
   */
  @javax.annotation.Nonnull
  public Boolean getOverwrite() {
    return overwrite;
  }

  public void setOverwrite(Boolean overwrite) {
    this.overwrite = overwrite;
  }


  public AppServiceEnvironmentsResume200ResponseValueInnerPropertiesSnapshotInfoProperties recoverConfiguration(Boolean recoverConfiguration) {
    this.recoverConfiguration = recoverConfiguration;
    return this;
  }

  /**
   * If true, site configuration, in addition to content, will be reverted.
   * @return recoverConfiguration
   */
  @javax.annotation.Nullable
  public Boolean getRecoverConfiguration() {
    return recoverConfiguration;
  }

  public void setRecoverConfiguration(Boolean recoverConfiguration) {
    this.recoverConfiguration = recoverConfiguration;
  }


  public AppServiceEnvironmentsResume200ResponseValueInnerPropertiesSnapshotInfoProperties recoveryTarget(AppServiceEnvironmentsResume200ResponseValueInnerPropertiesSnapshotInfoPropertiesRecoveryTarget recoveryTarget) {
    this.recoveryTarget = recoveryTarget;
    return this;
  }

  /**
   * Get recoveryTarget
   * @return recoveryTarget
   */
  @javax.annotation.Nullable
  public AppServiceEnvironmentsResume200ResponseValueInnerPropertiesSnapshotInfoPropertiesRecoveryTarget getRecoveryTarget() {
    return recoveryTarget;
  }

  public void setRecoveryTarget(AppServiceEnvironmentsResume200ResponseValueInnerPropertiesSnapshotInfoPropertiesRecoveryTarget recoveryTarget) {
    this.recoveryTarget = recoveryTarget;
  }


  public AppServiceEnvironmentsResume200ResponseValueInnerPropertiesSnapshotInfoProperties snapshotTime(String snapshotTime) {
    this.snapshotTime = snapshotTime;
    return this;
  }

  /**
   * Point in time in which the app recovery should be attempted, formatted as a DateTime string.
   * @return snapshotTime
   */
  @javax.annotation.Nullable
  public String getSnapshotTime() {
    return snapshotTime;
  }

  public void setSnapshotTime(String snapshotTime) {
    this.snapshotTime = snapshotTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AppServiceEnvironmentsResume200ResponseValueInnerPropertiesSnapshotInfoProperties appServiceEnvironmentsResume200ResponseValueInnerPropertiesSnapshotInfoProperties = (AppServiceEnvironmentsResume200ResponseValueInnerPropertiesSnapshotInfoProperties) o;
    return Objects.equals(this.ignoreConflictingHostNames, appServiceEnvironmentsResume200ResponseValueInnerPropertiesSnapshotInfoProperties.ignoreConflictingHostNames) &&
        Objects.equals(this.overwrite, appServiceEnvironmentsResume200ResponseValueInnerPropertiesSnapshotInfoProperties.overwrite) &&
        Objects.equals(this.recoverConfiguration, appServiceEnvironmentsResume200ResponseValueInnerPropertiesSnapshotInfoProperties.recoverConfiguration) &&
        Objects.equals(this.recoveryTarget, appServiceEnvironmentsResume200ResponseValueInnerPropertiesSnapshotInfoProperties.recoveryTarget) &&
        Objects.equals(this.snapshotTime, appServiceEnvironmentsResume200ResponseValueInnerPropertiesSnapshotInfoProperties.snapshotTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ignoreConflictingHostNames, overwrite, recoverConfiguration, recoveryTarget, snapshotTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AppServiceEnvironmentsResume200ResponseValueInnerPropertiesSnapshotInfoProperties {\n");
    sb.append("    ignoreConflictingHostNames: ").append(toIndentedString(ignoreConflictingHostNames)).append("\n");
    sb.append("    overwrite: ").append(toIndentedString(overwrite)).append("\n");
    sb.append("    recoverConfiguration: ").append(toIndentedString(recoverConfiguration)).append("\n");
    sb.append("    recoveryTarget: ").append(toIndentedString(recoveryTarget)).append("\n");
    sb.append("    snapshotTime: ").append(toIndentedString(snapshotTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ignoreConflictingHostNames");
    openapiFields.add("overwrite");
    openapiFields.add("recoverConfiguration");
    openapiFields.add("recoveryTarget");
    openapiFields.add("snapshotTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("overwrite");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AppServiceEnvironmentsResume200ResponseValueInnerPropertiesSnapshotInfoProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AppServiceEnvironmentsResume200ResponseValueInnerPropertiesSnapshotInfoProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AppServiceEnvironmentsResume200ResponseValueInnerPropertiesSnapshotInfoProperties is not found in the empty JSON string", AppServiceEnvironmentsResume200ResponseValueInnerPropertiesSnapshotInfoProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AppServiceEnvironmentsResume200ResponseValueInnerPropertiesSnapshotInfoProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AppServiceEnvironmentsResume200ResponseValueInnerPropertiesSnapshotInfoProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AppServiceEnvironmentsResume200ResponseValueInnerPropertiesSnapshotInfoProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `recoveryTarget`
      if (jsonObj.get("recoveryTarget") != null && !jsonObj.get("recoveryTarget").isJsonNull()) {
        AppServiceEnvironmentsResume200ResponseValueInnerPropertiesSnapshotInfoPropertiesRecoveryTarget.validateJsonElement(jsonObj.get("recoveryTarget"));
      }
      if ((jsonObj.get("snapshotTime") != null && !jsonObj.get("snapshotTime").isJsonNull()) && !jsonObj.get("snapshotTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `snapshotTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("snapshotTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AppServiceEnvironmentsResume200ResponseValueInnerPropertiesSnapshotInfoProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AppServiceEnvironmentsResume200ResponseValueInnerPropertiesSnapshotInfoProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AppServiceEnvironmentsResume200ResponseValueInnerPropertiesSnapshotInfoProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AppServiceEnvironmentsResume200ResponseValueInnerPropertiesSnapshotInfoProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<AppServiceEnvironmentsResume200ResponseValueInnerPropertiesSnapshotInfoProperties>() {
           @Override
           public void write(JsonWriter out, AppServiceEnvironmentsResume200ResponseValueInnerPropertiesSnapshotInfoProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AppServiceEnvironmentsResume200ResponseValueInnerPropertiesSnapshotInfoProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AppServiceEnvironmentsResume200ResponseValueInnerPropertiesSnapshotInfoProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AppServiceEnvironmentsResume200ResponseValueInnerPropertiesSnapshotInfoProperties
   * @throws IOException if the JSON string is invalid with respect to AppServiceEnvironmentsResume200ResponseValueInnerPropertiesSnapshotInfoProperties
   */
  public static AppServiceEnvironmentsResume200ResponseValueInnerPropertiesSnapshotInfoProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AppServiceEnvironmentsResume200ResponseValueInnerPropertiesSnapshotInfoProperties.class);
  }

  /**
   * Convert an instance of AppServiceEnvironmentsResume200ResponseValueInnerPropertiesSnapshotInfoProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

