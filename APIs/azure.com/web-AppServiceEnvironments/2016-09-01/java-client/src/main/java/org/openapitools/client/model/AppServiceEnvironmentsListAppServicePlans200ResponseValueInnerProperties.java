/*
 * AppServiceEnvironments API Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-09-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.AppServiceEnvironmentsResume200ResponseValueInnerPropertiesHostingEnvironmentProfile;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AppServicePlan resource specific properties
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:58:46.446518-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AppServiceEnvironmentsListAppServicePlans200ResponseValueInnerProperties {
  public static final String SERIALIZED_NAME_ADMIN_SITE_NAME = "adminSiteName";
  @SerializedName(SERIALIZED_NAME_ADMIN_SITE_NAME)
  private String adminSiteName;

  public static final String SERIALIZED_NAME_GEO_REGION = "geoRegion";
  @SerializedName(SERIALIZED_NAME_GEO_REGION)
  private String geoRegion;

  public static final String SERIALIZED_NAME_HOSTING_ENVIRONMENT_PROFILE = "hostingEnvironmentProfile";
  @SerializedName(SERIALIZED_NAME_HOSTING_ENVIRONMENT_PROFILE)
  private AppServiceEnvironmentsResume200ResponseValueInnerPropertiesHostingEnvironmentProfile hostingEnvironmentProfile;

  public static final String SERIALIZED_NAME_IS_SPOT = "isSpot";
  @SerializedName(SERIALIZED_NAME_IS_SPOT)
  private Boolean isSpot;

  public static final String SERIALIZED_NAME_MAXIMUM_NUMBER_OF_WORKERS = "maximumNumberOfWorkers";
  @SerializedName(SERIALIZED_NAME_MAXIMUM_NUMBER_OF_WORKERS)
  private Integer maximumNumberOfWorkers;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NUMBER_OF_SITES = "numberOfSites";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_SITES)
  private Integer numberOfSites;

  public static final String SERIALIZED_NAME_PER_SITE_SCALING = "perSiteScaling";
  @SerializedName(SERIALIZED_NAME_PER_SITE_SCALING)
  private Boolean perSiteScaling = false;

  /**
   * Provisioning state of the App Service Environment.
   */
  @JsonAdapter(ProvisioningStateEnum.Adapter.class)
  public enum ProvisioningStateEnum {
    SUCCEEDED("Succeeded"),
    
    FAILED("Failed"),
    
    CANCELED("Canceled"),
    
    IN_PROGRESS("InProgress"),
    
    DELETING("Deleting");

    private String value;

    ProvisioningStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProvisioningStateEnum fromValue(String value) {
      for (ProvisioningStateEnum b : ProvisioningStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProvisioningStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProvisioningStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProvisioningStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProvisioningStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProvisioningStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private ProvisioningStateEnum provisioningState;

  public static final String SERIALIZED_NAME_RESERVED = "reserved";
  @SerializedName(SERIALIZED_NAME_RESERVED)
  private Boolean reserved = false;

  public static final String SERIALIZED_NAME_RESOURCE_GROUP = "resourceGroup";
  @SerializedName(SERIALIZED_NAME_RESOURCE_GROUP)
  private String resourceGroup;

  public static final String SERIALIZED_NAME_SPOT_EXPIRATION_TIME = "spotExpirationTime";
  @SerializedName(SERIALIZED_NAME_SPOT_EXPIRATION_TIME)
  private OffsetDateTime spotExpirationTime;

  /**
   * App Service plan status.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    READY("Ready"),
    
    PENDING("Pending"),
    
    CREATING("Creating");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_SUBSCRIPTION = "subscription";
  @SerializedName(SERIALIZED_NAME_SUBSCRIPTION)
  private String subscription;

  public static final String SERIALIZED_NAME_TARGET_WORKER_COUNT = "targetWorkerCount";
  @SerializedName(SERIALIZED_NAME_TARGET_WORKER_COUNT)
  private Integer targetWorkerCount;

  public static final String SERIALIZED_NAME_TARGET_WORKER_SIZE_ID = "targetWorkerSizeId";
  @SerializedName(SERIALIZED_NAME_TARGET_WORKER_SIZE_ID)
  private Integer targetWorkerSizeId;

  public static final String SERIALIZED_NAME_WORKER_TIER_NAME = "workerTierName";
  @SerializedName(SERIALIZED_NAME_WORKER_TIER_NAME)
  private String workerTierName;

  public AppServiceEnvironmentsListAppServicePlans200ResponseValueInnerProperties() {
  }

  public AppServiceEnvironmentsListAppServicePlans200ResponseValueInnerProperties(
     String geoRegion, 
     Integer maximumNumberOfWorkers, 
     Integer numberOfSites, 
     ProvisioningStateEnum provisioningState, 
     String resourceGroup, 
     StatusEnum status, 
     String subscription
  ) {
    this();
    this.geoRegion = geoRegion;
    this.maximumNumberOfWorkers = maximumNumberOfWorkers;
    this.numberOfSites = numberOfSites;
    this.provisioningState = provisioningState;
    this.resourceGroup = resourceGroup;
    this.status = status;
    this.subscription = subscription;
  }

  public AppServiceEnvironmentsListAppServicePlans200ResponseValueInnerProperties adminSiteName(String adminSiteName) {
    this.adminSiteName = adminSiteName;
    return this;
  }

  /**
   * App Service plan administration site.
   * @return adminSiteName
   */
  @javax.annotation.Nullable
  public String getAdminSiteName() {
    return adminSiteName;
  }

  public void setAdminSiteName(String adminSiteName) {
    this.adminSiteName = adminSiteName;
  }


  /**
   * Geographical location for the App Service plan.
   * @return geoRegion
   */
  @javax.annotation.Nullable
  public String getGeoRegion() {
    return geoRegion;
  }



  public AppServiceEnvironmentsListAppServicePlans200ResponseValueInnerProperties hostingEnvironmentProfile(AppServiceEnvironmentsResume200ResponseValueInnerPropertiesHostingEnvironmentProfile hostingEnvironmentProfile) {
    this.hostingEnvironmentProfile = hostingEnvironmentProfile;
    return this;
  }

  /**
   * Get hostingEnvironmentProfile
   * @return hostingEnvironmentProfile
   */
  @javax.annotation.Nullable
  public AppServiceEnvironmentsResume200ResponseValueInnerPropertiesHostingEnvironmentProfile getHostingEnvironmentProfile() {
    return hostingEnvironmentProfile;
  }

  public void setHostingEnvironmentProfile(AppServiceEnvironmentsResume200ResponseValueInnerPropertiesHostingEnvironmentProfile hostingEnvironmentProfile) {
    this.hostingEnvironmentProfile = hostingEnvironmentProfile;
  }


  public AppServiceEnvironmentsListAppServicePlans200ResponseValueInnerProperties isSpot(Boolean isSpot) {
    this.isSpot = isSpot;
    return this;
  }

  /**
   * If &lt;code&gt;true&lt;/code&gt;, this App Service Plan owns spot instances.
   * @return isSpot
   */
  @javax.annotation.Nullable
  public Boolean getIsSpot() {
    return isSpot;
  }

  public void setIsSpot(Boolean isSpot) {
    this.isSpot = isSpot;
  }


  /**
   * Maximum number of instances that can be assigned to this App Service plan.
   * @return maximumNumberOfWorkers
   */
  @javax.annotation.Nullable
  public Integer getMaximumNumberOfWorkers() {
    return maximumNumberOfWorkers;
  }



  public AppServiceEnvironmentsListAppServicePlans200ResponseValueInnerProperties name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name for the App Service plan.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  /**
   * Number of apps assigned to this App Service plan.
   * @return numberOfSites
   */
  @javax.annotation.Nullable
  public Integer getNumberOfSites() {
    return numberOfSites;
  }



  public AppServiceEnvironmentsListAppServicePlans200ResponseValueInnerProperties perSiteScaling(Boolean perSiteScaling) {
    this.perSiteScaling = perSiteScaling;
    return this;
  }

  /**
   * If &lt;code&gt;true&lt;/code&gt;, apps assigned to this App Service plan can be scaled independently. If &lt;code&gt;false&lt;/code&gt;, apps assigned to this App Service plan will scale to all instances of the plan.
   * @return perSiteScaling
   */
  @javax.annotation.Nullable
  public Boolean getPerSiteScaling() {
    return perSiteScaling;
  }

  public void setPerSiteScaling(Boolean perSiteScaling) {
    this.perSiteScaling = perSiteScaling;
  }


  /**
   * Provisioning state of the App Service Environment.
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public ProvisioningStateEnum getProvisioningState() {
    return provisioningState;
  }



  public AppServiceEnvironmentsListAppServicePlans200ResponseValueInnerProperties reserved(Boolean reserved) {
    this.reserved = reserved;
    return this;
  }

  /**
   * If Linux app service plan &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt; otherwise.
   * @return reserved
   */
  @javax.annotation.Nullable
  public Boolean getReserved() {
    return reserved;
  }

  public void setReserved(Boolean reserved) {
    this.reserved = reserved;
  }


  /**
   * Resource group of the App Service plan.
   * @return resourceGroup
   */
  @javax.annotation.Nullable
  public String getResourceGroup() {
    return resourceGroup;
  }



  public AppServiceEnvironmentsListAppServicePlans200ResponseValueInnerProperties spotExpirationTime(OffsetDateTime spotExpirationTime) {
    this.spotExpirationTime = spotExpirationTime;
    return this;
  }

  /**
   * The time when the server farm expires. Valid only if it is a spot server farm.
   * @return spotExpirationTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getSpotExpirationTime() {
    return spotExpirationTime;
  }

  public void setSpotExpirationTime(OffsetDateTime spotExpirationTime) {
    this.spotExpirationTime = spotExpirationTime;
  }


  /**
   * App Service plan status.
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }



  /**
   * App Service plan subscription.
   * @return subscription
   */
  @javax.annotation.Nullable
  public String getSubscription() {
    return subscription;
  }



  public AppServiceEnvironmentsListAppServicePlans200ResponseValueInnerProperties targetWorkerCount(Integer targetWorkerCount) {
    this.targetWorkerCount = targetWorkerCount;
    return this;
  }

  /**
   * Scaling worker count.
   * @return targetWorkerCount
   */
  @javax.annotation.Nullable
  public Integer getTargetWorkerCount() {
    return targetWorkerCount;
  }

  public void setTargetWorkerCount(Integer targetWorkerCount) {
    this.targetWorkerCount = targetWorkerCount;
  }


  public AppServiceEnvironmentsListAppServicePlans200ResponseValueInnerProperties targetWorkerSizeId(Integer targetWorkerSizeId) {
    this.targetWorkerSizeId = targetWorkerSizeId;
    return this;
  }

  /**
   * Scaling worker size ID.
   * @return targetWorkerSizeId
   */
  @javax.annotation.Nullable
  public Integer getTargetWorkerSizeId() {
    return targetWorkerSizeId;
  }

  public void setTargetWorkerSizeId(Integer targetWorkerSizeId) {
    this.targetWorkerSizeId = targetWorkerSizeId;
  }


  public AppServiceEnvironmentsListAppServicePlans200ResponseValueInnerProperties workerTierName(String workerTierName) {
    this.workerTierName = workerTierName;
    return this;
  }

  /**
   * Target worker tier assigned to the App Service plan.
   * @return workerTierName
   */
  @javax.annotation.Nullable
  public String getWorkerTierName() {
    return workerTierName;
  }

  public void setWorkerTierName(String workerTierName) {
    this.workerTierName = workerTierName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AppServiceEnvironmentsListAppServicePlans200ResponseValueInnerProperties appServiceEnvironmentsListAppServicePlans200ResponseValueInnerProperties = (AppServiceEnvironmentsListAppServicePlans200ResponseValueInnerProperties) o;
    return Objects.equals(this.adminSiteName, appServiceEnvironmentsListAppServicePlans200ResponseValueInnerProperties.adminSiteName) &&
        Objects.equals(this.geoRegion, appServiceEnvironmentsListAppServicePlans200ResponseValueInnerProperties.geoRegion) &&
        Objects.equals(this.hostingEnvironmentProfile, appServiceEnvironmentsListAppServicePlans200ResponseValueInnerProperties.hostingEnvironmentProfile) &&
        Objects.equals(this.isSpot, appServiceEnvironmentsListAppServicePlans200ResponseValueInnerProperties.isSpot) &&
        Objects.equals(this.maximumNumberOfWorkers, appServiceEnvironmentsListAppServicePlans200ResponseValueInnerProperties.maximumNumberOfWorkers) &&
        Objects.equals(this.name, appServiceEnvironmentsListAppServicePlans200ResponseValueInnerProperties.name) &&
        Objects.equals(this.numberOfSites, appServiceEnvironmentsListAppServicePlans200ResponseValueInnerProperties.numberOfSites) &&
        Objects.equals(this.perSiteScaling, appServiceEnvironmentsListAppServicePlans200ResponseValueInnerProperties.perSiteScaling) &&
        Objects.equals(this.provisioningState, appServiceEnvironmentsListAppServicePlans200ResponseValueInnerProperties.provisioningState) &&
        Objects.equals(this.reserved, appServiceEnvironmentsListAppServicePlans200ResponseValueInnerProperties.reserved) &&
        Objects.equals(this.resourceGroup, appServiceEnvironmentsListAppServicePlans200ResponseValueInnerProperties.resourceGroup) &&
        Objects.equals(this.spotExpirationTime, appServiceEnvironmentsListAppServicePlans200ResponseValueInnerProperties.spotExpirationTime) &&
        Objects.equals(this.status, appServiceEnvironmentsListAppServicePlans200ResponseValueInnerProperties.status) &&
        Objects.equals(this.subscription, appServiceEnvironmentsListAppServicePlans200ResponseValueInnerProperties.subscription) &&
        Objects.equals(this.targetWorkerCount, appServiceEnvironmentsListAppServicePlans200ResponseValueInnerProperties.targetWorkerCount) &&
        Objects.equals(this.targetWorkerSizeId, appServiceEnvironmentsListAppServicePlans200ResponseValueInnerProperties.targetWorkerSizeId) &&
        Objects.equals(this.workerTierName, appServiceEnvironmentsListAppServicePlans200ResponseValueInnerProperties.workerTierName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(adminSiteName, geoRegion, hostingEnvironmentProfile, isSpot, maximumNumberOfWorkers, name, numberOfSites, perSiteScaling, provisioningState, reserved, resourceGroup, spotExpirationTime, status, subscription, targetWorkerCount, targetWorkerSizeId, workerTierName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AppServiceEnvironmentsListAppServicePlans200ResponseValueInnerProperties {\n");
    sb.append("    adminSiteName: ").append(toIndentedString(adminSiteName)).append("\n");
    sb.append("    geoRegion: ").append(toIndentedString(geoRegion)).append("\n");
    sb.append("    hostingEnvironmentProfile: ").append(toIndentedString(hostingEnvironmentProfile)).append("\n");
    sb.append("    isSpot: ").append(toIndentedString(isSpot)).append("\n");
    sb.append("    maximumNumberOfWorkers: ").append(toIndentedString(maximumNumberOfWorkers)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    numberOfSites: ").append(toIndentedString(numberOfSites)).append("\n");
    sb.append("    perSiteScaling: ").append(toIndentedString(perSiteScaling)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("    reserved: ").append(toIndentedString(reserved)).append("\n");
    sb.append("    resourceGroup: ").append(toIndentedString(resourceGroup)).append("\n");
    sb.append("    spotExpirationTime: ").append(toIndentedString(spotExpirationTime)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    subscription: ").append(toIndentedString(subscription)).append("\n");
    sb.append("    targetWorkerCount: ").append(toIndentedString(targetWorkerCount)).append("\n");
    sb.append("    targetWorkerSizeId: ").append(toIndentedString(targetWorkerSizeId)).append("\n");
    sb.append("    workerTierName: ").append(toIndentedString(workerTierName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("adminSiteName");
    openapiFields.add("geoRegion");
    openapiFields.add("hostingEnvironmentProfile");
    openapiFields.add("isSpot");
    openapiFields.add("maximumNumberOfWorkers");
    openapiFields.add("name");
    openapiFields.add("numberOfSites");
    openapiFields.add("perSiteScaling");
    openapiFields.add("provisioningState");
    openapiFields.add("reserved");
    openapiFields.add("resourceGroup");
    openapiFields.add("spotExpirationTime");
    openapiFields.add("status");
    openapiFields.add("subscription");
    openapiFields.add("targetWorkerCount");
    openapiFields.add("targetWorkerSizeId");
    openapiFields.add("workerTierName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AppServiceEnvironmentsListAppServicePlans200ResponseValueInnerProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AppServiceEnvironmentsListAppServicePlans200ResponseValueInnerProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AppServiceEnvironmentsListAppServicePlans200ResponseValueInnerProperties is not found in the empty JSON string", AppServiceEnvironmentsListAppServicePlans200ResponseValueInnerProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AppServiceEnvironmentsListAppServicePlans200ResponseValueInnerProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AppServiceEnvironmentsListAppServicePlans200ResponseValueInnerProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AppServiceEnvironmentsListAppServicePlans200ResponseValueInnerProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("adminSiteName") != null && !jsonObj.get("adminSiteName").isJsonNull()) && !jsonObj.get("adminSiteName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `adminSiteName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("adminSiteName").toString()));
      }
      if ((jsonObj.get("geoRegion") != null && !jsonObj.get("geoRegion").isJsonNull()) && !jsonObj.get("geoRegion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `geoRegion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("geoRegion").toString()));
      }
      // validate the optional field `hostingEnvironmentProfile`
      if (jsonObj.get("hostingEnvironmentProfile") != null && !jsonObj.get("hostingEnvironmentProfile").isJsonNull()) {
        AppServiceEnvironmentsResume200ResponseValueInnerPropertiesHostingEnvironmentProfile.validateJsonElement(jsonObj.get("hostingEnvironmentProfile"));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) && !jsonObj.get("provisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningState").toString()));
      }
      // validate the optional field `provisioningState`
      if (jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) {
        ProvisioningStateEnum.validateJsonElement(jsonObj.get("provisioningState"));
      }
      if ((jsonObj.get("resourceGroup") != null && !jsonObj.get("resourceGroup").isJsonNull()) && !jsonObj.get("resourceGroup").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceGroup` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourceGroup").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
      if ((jsonObj.get("subscription") != null && !jsonObj.get("subscription").isJsonNull()) && !jsonObj.get("subscription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subscription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subscription").toString()));
      }
      if ((jsonObj.get("workerTierName") != null && !jsonObj.get("workerTierName").isJsonNull()) && !jsonObj.get("workerTierName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `workerTierName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("workerTierName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AppServiceEnvironmentsListAppServicePlans200ResponseValueInnerProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AppServiceEnvironmentsListAppServicePlans200ResponseValueInnerProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AppServiceEnvironmentsListAppServicePlans200ResponseValueInnerProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AppServiceEnvironmentsListAppServicePlans200ResponseValueInnerProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<AppServiceEnvironmentsListAppServicePlans200ResponseValueInnerProperties>() {
           @Override
           public void write(JsonWriter out, AppServiceEnvironmentsListAppServicePlans200ResponseValueInnerProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AppServiceEnvironmentsListAppServicePlans200ResponseValueInnerProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AppServiceEnvironmentsListAppServicePlans200ResponseValueInnerProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AppServiceEnvironmentsListAppServicePlans200ResponseValueInnerProperties
   * @throws IOException if the JSON string is invalid with respect to AppServiceEnvironmentsListAppServicePlans200ResponseValueInnerProperties
   */
  public static AppServiceEnvironmentsListAppServicePlans200ResponseValueInnerProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AppServiceEnvironmentsListAppServicePlans200ResponseValueInnerProperties.class);
  }

  /**
   * Convert an instance of AppServiceEnvironmentsListAppServicePlans200ResponseValueInnerProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

