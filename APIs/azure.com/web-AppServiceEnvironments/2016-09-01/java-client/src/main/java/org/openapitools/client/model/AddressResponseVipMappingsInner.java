/*
 * AppServiceEnvironments API Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-09-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Virtual IP mapping.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:58:46.446518-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AddressResponseVipMappingsInner {
  public static final String SERIALIZED_NAME_IN_USE = "inUse";
  @SerializedName(SERIALIZED_NAME_IN_USE)
  private Boolean inUse;

  public static final String SERIALIZED_NAME_INTERNAL_HTTP_PORT = "internalHttpPort";
  @SerializedName(SERIALIZED_NAME_INTERNAL_HTTP_PORT)
  private Integer internalHttpPort;

  public static final String SERIALIZED_NAME_INTERNAL_HTTPS_PORT = "internalHttpsPort";
  @SerializedName(SERIALIZED_NAME_INTERNAL_HTTPS_PORT)
  private Integer internalHttpsPort;

  public static final String SERIALIZED_NAME_VIRTUAL_I_P = "virtualIP";
  @SerializedName(SERIALIZED_NAME_VIRTUAL_I_P)
  private String virtualIP;

  public AddressResponseVipMappingsInner() {
  }

  public AddressResponseVipMappingsInner inUse(Boolean inUse) {
    this.inUse = inUse;
    return this;
  }

  /**
   * Is virtual IP mapping in use.
   * @return inUse
   */
  @javax.annotation.Nullable
  public Boolean getInUse() {
    return inUse;
  }

  public void setInUse(Boolean inUse) {
    this.inUse = inUse;
  }


  public AddressResponseVipMappingsInner internalHttpPort(Integer internalHttpPort) {
    this.internalHttpPort = internalHttpPort;
    return this;
  }

  /**
   * Internal HTTP port.
   * @return internalHttpPort
   */
  @javax.annotation.Nullable
  public Integer getInternalHttpPort() {
    return internalHttpPort;
  }

  public void setInternalHttpPort(Integer internalHttpPort) {
    this.internalHttpPort = internalHttpPort;
  }


  public AddressResponseVipMappingsInner internalHttpsPort(Integer internalHttpsPort) {
    this.internalHttpsPort = internalHttpsPort;
    return this;
  }

  /**
   * Internal HTTPS port.
   * @return internalHttpsPort
   */
  @javax.annotation.Nullable
  public Integer getInternalHttpsPort() {
    return internalHttpsPort;
  }

  public void setInternalHttpsPort(Integer internalHttpsPort) {
    this.internalHttpsPort = internalHttpsPort;
  }


  public AddressResponseVipMappingsInner virtualIP(String virtualIP) {
    this.virtualIP = virtualIP;
    return this;
  }

  /**
   * Virtual IP address.
   * @return virtualIP
   */
  @javax.annotation.Nullable
  public String getVirtualIP() {
    return virtualIP;
  }

  public void setVirtualIP(String virtualIP) {
    this.virtualIP = virtualIP;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AddressResponseVipMappingsInner addressResponseVipMappingsInner = (AddressResponseVipMappingsInner) o;
    return Objects.equals(this.inUse, addressResponseVipMappingsInner.inUse) &&
        Objects.equals(this.internalHttpPort, addressResponseVipMappingsInner.internalHttpPort) &&
        Objects.equals(this.internalHttpsPort, addressResponseVipMappingsInner.internalHttpsPort) &&
        Objects.equals(this.virtualIP, addressResponseVipMappingsInner.virtualIP);
  }

  @Override
  public int hashCode() {
    return Objects.hash(inUse, internalHttpPort, internalHttpsPort, virtualIP);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AddressResponseVipMappingsInner {\n");
    sb.append("    inUse: ").append(toIndentedString(inUse)).append("\n");
    sb.append("    internalHttpPort: ").append(toIndentedString(internalHttpPort)).append("\n");
    sb.append("    internalHttpsPort: ").append(toIndentedString(internalHttpsPort)).append("\n");
    sb.append("    virtualIP: ").append(toIndentedString(virtualIP)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("inUse");
    openapiFields.add("internalHttpPort");
    openapiFields.add("internalHttpsPort");
    openapiFields.add("virtualIP");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AddressResponseVipMappingsInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AddressResponseVipMappingsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AddressResponseVipMappingsInner is not found in the empty JSON string", AddressResponseVipMappingsInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AddressResponseVipMappingsInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AddressResponseVipMappingsInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("virtualIP") != null && !jsonObj.get("virtualIP").isJsonNull()) && !jsonObj.get("virtualIP").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `virtualIP` to be a primitive type in the JSON string but got `%s`", jsonObj.get("virtualIP").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AddressResponseVipMappingsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AddressResponseVipMappingsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AddressResponseVipMappingsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AddressResponseVipMappingsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<AddressResponseVipMappingsInner>() {
           @Override
           public void write(JsonWriter out, AddressResponseVipMappingsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AddressResponseVipMappingsInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AddressResponseVipMappingsInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AddressResponseVipMappingsInner
   * @throws IOException if the JSON string is invalid with respect to AddressResponseVipMappingsInner
   */
  public static AddressResponseVipMappingsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AddressResponseVipMappingsInner.class);
  }

  /**
   * Convert an instance of AddressResponseVipMappingsInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

