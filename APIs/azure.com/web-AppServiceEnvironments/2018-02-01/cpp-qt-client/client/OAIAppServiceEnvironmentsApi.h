/**
 * AppServiceEnvironments API Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-02-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAppServiceEnvironmentsApi_H
#define OAI_OAIAppServiceEnvironmentsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAddressResponse.h"
#include "OAIAppServiceEnvironmentCollection.h"
#include "OAIAppServiceEnvironmentPatchResource.h"
#include "OAIAppServiceEnvironmentResource.h"
#include "OAIAppServiceEnvironments_ChangeVnet_200_response.h"
#include "OAIAppServiceEnvironments_ChangeVnet_request.h"
#include "OAIAppServiceEnvironments_ListAppServicePlans_200_response.h"
#include "OAIAppServiceEnvironments_ListMetrics_200_response.h"
#include "OAIAppServiceEnvironments_ListMultiRolePoolInstanceMetricDefinitions_200_response.h"
#include "OAIAppServiceEnvironments_ListOperations_200_response_inner.h"
#include "OAIAppServiceEnvironments_ListUsages_200_response.h"
#include "OAIAppServiceEnvironments_List_default_response.h"
#include "OAIHostingEnvironmentDiagnostics.h"
#include "OAIInboundEnvironmentEndpointCollection.h"
#include "OAIMetricDefinition.h"
#include "OAIOutboundEnvironmentEndpointCollection.h"
#include "OAISkuInfoCollection.h"
#include "OAIStampCapacityCollection.h"
#include "OAIUsageCollection.h"
#include "OAIWorkerPoolCollection.h"
#include "OAIWorkerPoolResource.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAppServiceEnvironmentsApi : public QObject {
    Q_OBJECT

public:
    OAIAppServiceEnvironmentsApi(const int timeOut = 0);
    ~OAIAppServiceEnvironmentsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  vnet_info OAIAppServiceEnvironments_ChangeVnet_request [required]
    */
    virtual void appServiceEnvironmentsChangeVnet(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version, const OAIAppServiceEnvironments_ChangeVnet_request &vnet_info);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  hosting_environment_envelope OAIAppServiceEnvironmentResource [required]
    */
    virtual void appServiceEnvironmentsCreateOrUpdate(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version, const OAIAppServiceEnvironmentResource &hosting_environment_envelope);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  multi_role_pool_envelope OAIWorkerPoolResource [required]
    */
    virtual void appServiceEnvironmentsCreateOrUpdateMultiRolePool(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version, const OAIWorkerPoolResource &multi_role_pool_envelope);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  worker_pool_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  worker_pool_envelope OAIWorkerPoolResource [required]
    */
    virtual void appServiceEnvironmentsCreateOrUpdateWorkerPool(const QString &resource_group_name, const QString &name, const QString &worker_pool_name, const QString &subscription_id, const QString &api_version, const OAIWorkerPoolResource &worker_pool_envelope);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  force_delete bool [optional]
    */
    virtual void appServiceEnvironmentsDelete(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version, const ::OpenAPI::OptionalParam<bool> &force_delete = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void appServiceEnvironmentsGet(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  diagnostics_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void appServiceEnvironmentsGetDiagnosticsItem(const QString &resource_group_name, const QString &name, const QString &diagnostics_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void appServiceEnvironmentsGetInboundNetworkDependenciesEndpoints(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void appServiceEnvironmentsGetMultiRolePool(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void appServiceEnvironmentsGetOutboundNetworkDependenciesEndpoints(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  worker_pool_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void appServiceEnvironmentsGetWorkerPool(const QString &resource_group_name, const QString &name, const QString &worker_pool_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void appServiceEnvironmentsList(const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void appServiceEnvironmentsListAppServicePlans(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void appServiceEnvironmentsListByResourceGroup(const QString &resource_group_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void appServiceEnvironmentsListCapacities(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void appServiceEnvironmentsListDiagnostics(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void appServiceEnvironmentsListMetricDefinitions(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  details bool [optional]
    * @param[in]  filter QString [optional]
    */
    virtual void appServiceEnvironmentsListMetrics(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version, const ::OpenAPI::OptionalParam<bool> &details = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void appServiceEnvironmentsListMultiRoleMetricDefinitions(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  start_time QString [optional]
    * @param[in]  end_time QString [optional]
    * @param[in]  time_grain QString [optional]
    * @param[in]  details bool [optional]
    * @param[in]  filter QString [optional]
    */
    virtual void appServiceEnvironmentsListMultiRoleMetrics(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &start_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &end_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &time_grain = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &details = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  instance QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void appServiceEnvironmentsListMultiRolePoolInstanceMetricDefinitions(const QString &resource_group_name, const QString &name, const QString &instance, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  instance QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  details bool [optional]
    */
    virtual void appServiceEnvironmentsListMultiRolePoolInstanceMetrics(const QString &resource_group_name, const QString &name, const QString &instance, const QString &subscription_id, const QString &api_version, const ::OpenAPI::OptionalParam<bool> &details = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void appServiceEnvironmentsListMultiRolePoolSkus(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void appServiceEnvironmentsListMultiRolePools(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void appServiceEnvironmentsListMultiRoleUsages(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void appServiceEnvironmentsListOperations(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [optional]
    */
    virtual void appServiceEnvironmentsListUsages(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void appServiceEnvironmentsListVips(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  properties_to_include QString [optional]
    */
    virtual void appServiceEnvironmentsListWebApps(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &properties_to_include = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  worker_pool_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void appServiceEnvironmentsListWebWorkerMetricDefinitions(const QString &resource_group_name, const QString &name, const QString &worker_pool_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  worker_pool_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  details bool [optional]
    * @param[in]  filter QString [optional]
    */
    virtual void appServiceEnvironmentsListWebWorkerMetrics(const QString &resource_group_name, const QString &name, const QString &worker_pool_name, const QString &subscription_id, const QString &api_version, const ::OpenAPI::OptionalParam<bool> &details = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  worker_pool_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void appServiceEnvironmentsListWebWorkerUsages(const QString &resource_group_name, const QString &name, const QString &worker_pool_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  worker_pool_name QString [required]
    * @param[in]  instance QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void appServiceEnvironmentsListWorkerPoolInstanceMetricDefinitions(const QString &resource_group_name, const QString &name, const QString &worker_pool_name, const QString &instance, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  worker_pool_name QString [required]
    * @param[in]  instance QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  details bool [optional]
    * @param[in]  filter QString [optional]
    */
    virtual void appServiceEnvironmentsListWorkerPoolInstanceMetrics(const QString &resource_group_name, const QString &name, const QString &worker_pool_name, const QString &instance, const QString &subscription_id, const QString &api_version, const ::OpenAPI::OptionalParam<bool> &details = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  worker_pool_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void appServiceEnvironmentsListWorkerPoolSkus(const QString &resource_group_name, const QString &name, const QString &worker_pool_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void appServiceEnvironmentsListWorkerPools(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void appServiceEnvironmentsReboot(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void appServiceEnvironmentsResume(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void appServiceEnvironmentsSuspend(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  hosting_environment_envelope OAIAppServiceEnvironmentPatchResource [required]
    */
    virtual void appServiceEnvironmentsUpdate(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version, const OAIAppServiceEnvironmentPatchResource &hosting_environment_envelope);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  multi_role_pool_envelope OAIWorkerPoolResource [required]
    */
    virtual void appServiceEnvironmentsUpdateMultiRolePool(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version, const OAIWorkerPoolResource &multi_role_pool_envelope);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  worker_pool_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  worker_pool_envelope OAIWorkerPoolResource [required]
    */
    virtual void appServiceEnvironmentsUpdateWorkerPool(const QString &resource_group_name, const QString &name, const QString &worker_pool_name, const QString &subscription_id, const QString &api_version, const OAIWorkerPoolResource &worker_pool_envelope);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void appServiceEnvironmentsChangeVnetCallback(OAIHttpRequestWorker *worker);
    void appServiceEnvironmentsCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void appServiceEnvironmentsCreateOrUpdateMultiRolePoolCallback(OAIHttpRequestWorker *worker);
    void appServiceEnvironmentsCreateOrUpdateWorkerPoolCallback(OAIHttpRequestWorker *worker);
    void appServiceEnvironmentsDeleteCallback(OAIHttpRequestWorker *worker);
    void appServiceEnvironmentsGetCallback(OAIHttpRequestWorker *worker);
    void appServiceEnvironmentsGetDiagnosticsItemCallback(OAIHttpRequestWorker *worker);
    void appServiceEnvironmentsGetInboundNetworkDependenciesEndpointsCallback(OAIHttpRequestWorker *worker);
    void appServiceEnvironmentsGetMultiRolePoolCallback(OAIHttpRequestWorker *worker);
    void appServiceEnvironmentsGetOutboundNetworkDependenciesEndpointsCallback(OAIHttpRequestWorker *worker);
    void appServiceEnvironmentsGetWorkerPoolCallback(OAIHttpRequestWorker *worker);
    void appServiceEnvironmentsListCallback(OAIHttpRequestWorker *worker);
    void appServiceEnvironmentsListAppServicePlansCallback(OAIHttpRequestWorker *worker);
    void appServiceEnvironmentsListByResourceGroupCallback(OAIHttpRequestWorker *worker);
    void appServiceEnvironmentsListCapacitiesCallback(OAIHttpRequestWorker *worker);
    void appServiceEnvironmentsListDiagnosticsCallback(OAIHttpRequestWorker *worker);
    void appServiceEnvironmentsListMetricDefinitionsCallback(OAIHttpRequestWorker *worker);
    void appServiceEnvironmentsListMetricsCallback(OAIHttpRequestWorker *worker);
    void appServiceEnvironmentsListMultiRoleMetricDefinitionsCallback(OAIHttpRequestWorker *worker);
    void appServiceEnvironmentsListMultiRoleMetricsCallback(OAIHttpRequestWorker *worker);
    void appServiceEnvironmentsListMultiRolePoolInstanceMetricDefinitionsCallback(OAIHttpRequestWorker *worker);
    void appServiceEnvironmentsListMultiRolePoolInstanceMetricsCallback(OAIHttpRequestWorker *worker);
    void appServiceEnvironmentsListMultiRolePoolSkusCallback(OAIHttpRequestWorker *worker);
    void appServiceEnvironmentsListMultiRolePoolsCallback(OAIHttpRequestWorker *worker);
    void appServiceEnvironmentsListMultiRoleUsagesCallback(OAIHttpRequestWorker *worker);
    void appServiceEnvironmentsListOperationsCallback(OAIHttpRequestWorker *worker);
    void appServiceEnvironmentsListUsagesCallback(OAIHttpRequestWorker *worker);
    void appServiceEnvironmentsListVipsCallback(OAIHttpRequestWorker *worker);
    void appServiceEnvironmentsListWebAppsCallback(OAIHttpRequestWorker *worker);
    void appServiceEnvironmentsListWebWorkerMetricDefinitionsCallback(OAIHttpRequestWorker *worker);
    void appServiceEnvironmentsListWebWorkerMetricsCallback(OAIHttpRequestWorker *worker);
    void appServiceEnvironmentsListWebWorkerUsagesCallback(OAIHttpRequestWorker *worker);
    void appServiceEnvironmentsListWorkerPoolInstanceMetricDefinitionsCallback(OAIHttpRequestWorker *worker);
    void appServiceEnvironmentsListWorkerPoolInstanceMetricsCallback(OAIHttpRequestWorker *worker);
    void appServiceEnvironmentsListWorkerPoolSkusCallback(OAIHttpRequestWorker *worker);
    void appServiceEnvironmentsListWorkerPoolsCallback(OAIHttpRequestWorker *worker);
    void appServiceEnvironmentsRebootCallback(OAIHttpRequestWorker *worker);
    void appServiceEnvironmentsResumeCallback(OAIHttpRequestWorker *worker);
    void appServiceEnvironmentsSuspendCallback(OAIHttpRequestWorker *worker);
    void appServiceEnvironmentsUpdateCallback(OAIHttpRequestWorker *worker);
    void appServiceEnvironmentsUpdateMultiRolePoolCallback(OAIHttpRequestWorker *worker);
    void appServiceEnvironmentsUpdateWorkerPoolCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void appServiceEnvironmentsChangeVnetSignal(OAIAppServiceEnvironments_ChangeVnet_200_response summary);
    void appServiceEnvironmentsCreateOrUpdateSignal(OAIAppServiceEnvironmentResource summary);
    void appServiceEnvironmentsCreateOrUpdateMultiRolePoolSignal(OAIWorkerPoolResource summary);
    void appServiceEnvironmentsCreateOrUpdateWorkerPoolSignal(OAIWorkerPoolResource summary);
    void appServiceEnvironmentsDeleteSignal();
    void appServiceEnvironmentsGetSignal(OAIAppServiceEnvironmentResource summary);
    void appServiceEnvironmentsGetDiagnosticsItemSignal(OAIHostingEnvironmentDiagnostics summary);
    void appServiceEnvironmentsGetInboundNetworkDependenciesEndpointsSignal(OAIInboundEnvironmentEndpointCollection summary);
    void appServiceEnvironmentsGetMultiRolePoolSignal(OAIWorkerPoolResource summary);
    void appServiceEnvironmentsGetOutboundNetworkDependenciesEndpointsSignal(OAIOutboundEnvironmentEndpointCollection summary);
    void appServiceEnvironmentsGetWorkerPoolSignal(OAIWorkerPoolResource summary);
    void appServiceEnvironmentsListSignal(OAIAppServiceEnvironmentCollection summary);
    void appServiceEnvironmentsListAppServicePlansSignal(OAIAppServiceEnvironments_ListAppServicePlans_200_response summary);
    void appServiceEnvironmentsListByResourceGroupSignal(OAIAppServiceEnvironmentCollection summary);
    void appServiceEnvironmentsListCapacitiesSignal(OAIStampCapacityCollection summary);
    void appServiceEnvironmentsListDiagnosticsSignal(QList<OAIHostingEnvironmentDiagnostics> summary);
    void appServiceEnvironmentsListMetricDefinitionsSignal(OAIMetricDefinition summary);
    void appServiceEnvironmentsListMetricsSignal(OAIAppServiceEnvironments_ListMetrics_200_response summary);
    void appServiceEnvironmentsListMultiRoleMetricDefinitionsSignal(OAIAppServiceEnvironments_ListMultiRolePoolInstanceMetricDefinitions_200_response summary);
    void appServiceEnvironmentsListMultiRoleMetricsSignal(OAIAppServiceEnvironments_ListMetrics_200_response summary);
    void appServiceEnvironmentsListMultiRolePoolInstanceMetricDefinitionsSignal(OAIAppServiceEnvironments_ListMultiRolePoolInstanceMetricDefinitions_200_response summary);
    void appServiceEnvironmentsListMultiRolePoolInstanceMetricsSignal(OAIAppServiceEnvironments_ListMetrics_200_response summary);
    void appServiceEnvironmentsListMultiRolePoolSkusSignal(OAISkuInfoCollection summary);
    void appServiceEnvironmentsListMultiRolePoolsSignal(OAIWorkerPoolCollection summary);
    void appServiceEnvironmentsListMultiRoleUsagesSignal(OAIUsageCollection summary);
    void appServiceEnvironmentsListOperationsSignal(QList<OAIAppServiceEnvironments_ListOperations_200_response_inner> summary);
    void appServiceEnvironmentsListUsagesSignal(OAIAppServiceEnvironments_ListUsages_200_response summary);
    void appServiceEnvironmentsListVipsSignal(OAIAddressResponse summary);
    void appServiceEnvironmentsListWebAppsSignal(OAIAppServiceEnvironments_ChangeVnet_200_response summary);
    void appServiceEnvironmentsListWebWorkerMetricDefinitionsSignal(OAIAppServiceEnvironments_ListMultiRolePoolInstanceMetricDefinitions_200_response summary);
    void appServiceEnvironmentsListWebWorkerMetricsSignal(OAIAppServiceEnvironments_ListMetrics_200_response summary);
    void appServiceEnvironmentsListWebWorkerUsagesSignal(OAIUsageCollection summary);
    void appServiceEnvironmentsListWorkerPoolInstanceMetricDefinitionsSignal(OAIAppServiceEnvironments_ListMultiRolePoolInstanceMetricDefinitions_200_response summary);
    void appServiceEnvironmentsListWorkerPoolInstanceMetricsSignal(OAIAppServiceEnvironments_ListMetrics_200_response summary);
    void appServiceEnvironmentsListWorkerPoolSkusSignal(OAISkuInfoCollection summary);
    void appServiceEnvironmentsListWorkerPoolsSignal(OAIWorkerPoolCollection summary);
    void appServiceEnvironmentsRebootSignal();
    void appServiceEnvironmentsResumeSignal(OAIAppServiceEnvironments_ChangeVnet_200_response summary);
    void appServiceEnvironmentsSuspendSignal(OAIAppServiceEnvironments_ChangeVnet_200_response summary);
    void appServiceEnvironmentsUpdateSignal(OAIAppServiceEnvironmentResource summary);
    void appServiceEnvironmentsUpdateMultiRolePoolSignal(OAIWorkerPoolResource summary);
    void appServiceEnvironmentsUpdateWorkerPoolSignal(OAIWorkerPoolResource summary);


    void appServiceEnvironmentsChangeVnetSignalFull(OAIHttpRequestWorker *worker, OAIAppServiceEnvironments_ChangeVnet_200_response summary);
    void appServiceEnvironmentsCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIAppServiceEnvironmentResource summary);
    void appServiceEnvironmentsCreateOrUpdateMultiRolePoolSignalFull(OAIHttpRequestWorker *worker, OAIWorkerPoolResource summary);
    void appServiceEnvironmentsCreateOrUpdateWorkerPoolSignalFull(OAIHttpRequestWorker *worker, OAIWorkerPoolResource summary);
    void appServiceEnvironmentsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void appServiceEnvironmentsGetSignalFull(OAIHttpRequestWorker *worker, OAIAppServiceEnvironmentResource summary);
    void appServiceEnvironmentsGetDiagnosticsItemSignalFull(OAIHttpRequestWorker *worker, OAIHostingEnvironmentDiagnostics summary);
    void appServiceEnvironmentsGetInboundNetworkDependenciesEndpointsSignalFull(OAIHttpRequestWorker *worker, OAIInboundEnvironmentEndpointCollection summary);
    void appServiceEnvironmentsGetMultiRolePoolSignalFull(OAIHttpRequestWorker *worker, OAIWorkerPoolResource summary);
    void appServiceEnvironmentsGetOutboundNetworkDependenciesEndpointsSignalFull(OAIHttpRequestWorker *worker, OAIOutboundEnvironmentEndpointCollection summary);
    void appServiceEnvironmentsGetWorkerPoolSignalFull(OAIHttpRequestWorker *worker, OAIWorkerPoolResource summary);
    void appServiceEnvironmentsListSignalFull(OAIHttpRequestWorker *worker, OAIAppServiceEnvironmentCollection summary);
    void appServiceEnvironmentsListAppServicePlansSignalFull(OAIHttpRequestWorker *worker, OAIAppServiceEnvironments_ListAppServicePlans_200_response summary);
    void appServiceEnvironmentsListByResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAIAppServiceEnvironmentCollection summary);
    void appServiceEnvironmentsListCapacitiesSignalFull(OAIHttpRequestWorker *worker, OAIStampCapacityCollection summary);
    void appServiceEnvironmentsListDiagnosticsSignalFull(OAIHttpRequestWorker *worker, QList<OAIHostingEnvironmentDiagnostics> summary);
    void appServiceEnvironmentsListMetricDefinitionsSignalFull(OAIHttpRequestWorker *worker, OAIMetricDefinition summary);
    void appServiceEnvironmentsListMetricsSignalFull(OAIHttpRequestWorker *worker, OAIAppServiceEnvironments_ListMetrics_200_response summary);
    void appServiceEnvironmentsListMultiRoleMetricDefinitionsSignalFull(OAIHttpRequestWorker *worker, OAIAppServiceEnvironments_ListMultiRolePoolInstanceMetricDefinitions_200_response summary);
    void appServiceEnvironmentsListMultiRoleMetricsSignalFull(OAIHttpRequestWorker *worker, OAIAppServiceEnvironments_ListMetrics_200_response summary);
    void appServiceEnvironmentsListMultiRolePoolInstanceMetricDefinitionsSignalFull(OAIHttpRequestWorker *worker, OAIAppServiceEnvironments_ListMultiRolePoolInstanceMetricDefinitions_200_response summary);
    void appServiceEnvironmentsListMultiRolePoolInstanceMetricsSignalFull(OAIHttpRequestWorker *worker, OAIAppServiceEnvironments_ListMetrics_200_response summary);
    void appServiceEnvironmentsListMultiRolePoolSkusSignalFull(OAIHttpRequestWorker *worker, OAISkuInfoCollection summary);
    void appServiceEnvironmentsListMultiRolePoolsSignalFull(OAIHttpRequestWorker *worker, OAIWorkerPoolCollection summary);
    void appServiceEnvironmentsListMultiRoleUsagesSignalFull(OAIHttpRequestWorker *worker, OAIUsageCollection summary);
    void appServiceEnvironmentsListOperationsSignalFull(OAIHttpRequestWorker *worker, QList<OAIAppServiceEnvironments_ListOperations_200_response_inner> summary);
    void appServiceEnvironmentsListUsagesSignalFull(OAIHttpRequestWorker *worker, OAIAppServiceEnvironments_ListUsages_200_response summary);
    void appServiceEnvironmentsListVipsSignalFull(OAIHttpRequestWorker *worker, OAIAddressResponse summary);
    void appServiceEnvironmentsListWebAppsSignalFull(OAIHttpRequestWorker *worker, OAIAppServiceEnvironments_ChangeVnet_200_response summary);
    void appServiceEnvironmentsListWebWorkerMetricDefinitionsSignalFull(OAIHttpRequestWorker *worker, OAIAppServiceEnvironments_ListMultiRolePoolInstanceMetricDefinitions_200_response summary);
    void appServiceEnvironmentsListWebWorkerMetricsSignalFull(OAIHttpRequestWorker *worker, OAIAppServiceEnvironments_ListMetrics_200_response summary);
    void appServiceEnvironmentsListWebWorkerUsagesSignalFull(OAIHttpRequestWorker *worker, OAIUsageCollection summary);
    void appServiceEnvironmentsListWorkerPoolInstanceMetricDefinitionsSignalFull(OAIHttpRequestWorker *worker, OAIAppServiceEnvironments_ListMultiRolePoolInstanceMetricDefinitions_200_response summary);
    void appServiceEnvironmentsListWorkerPoolInstanceMetricsSignalFull(OAIHttpRequestWorker *worker, OAIAppServiceEnvironments_ListMetrics_200_response summary);
    void appServiceEnvironmentsListWorkerPoolSkusSignalFull(OAIHttpRequestWorker *worker, OAISkuInfoCollection summary);
    void appServiceEnvironmentsListWorkerPoolsSignalFull(OAIHttpRequestWorker *worker, OAIWorkerPoolCollection summary);
    void appServiceEnvironmentsRebootSignalFull(OAIHttpRequestWorker *worker);
    void appServiceEnvironmentsResumeSignalFull(OAIHttpRequestWorker *worker, OAIAppServiceEnvironments_ChangeVnet_200_response summary);
    void appServiceEnvironmentsSuspendSignalFull(OAIHttpRequestWorker *worker, OAIAppServiceEnvironments_ChangeVnet_200_response summary);
    void appServiceEnvironmentsUpdateSignalFull(OAIHttpRequestWorker *worker, OAIAppServiceEnvironmentResource summary);
    void appServiceEnvironmentsUpdateMultiRolePoolSignalFull(OAIHttpRequestWorker *worker, OAIWorkerPoolResource summary);
    void appServiceEnvironmentsUpdateWorkerPoolSignalFull(OAIHttpRequestWorker *worker, OAIWorkerPoolResource summary);

    Q_DECL_DEPRECATED_X("Use appServiceEnvironmentsChangeVnetSignalError() instead")
    void appServiceEnvironmentsChangeVnetSignalE(OAIAppServiceEnvironments_ChangeVnet_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appServiceEnvironmentsChangeVnetSignalError(OAIAppServiceEnvironments_ChangeVnet_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServiceEnvironmentsCreateOrUpdateSignalError() instead")
    void appServiceEnvironmentsCreateOrUpdateSignalE(OAIAppServiceEnvironmentResource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appServiceEnvironmentsCreateOrUpdateSignalError(OAIAppServiceEnvironmentResource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServiceEnvironmentsCreateOrUpdateMultiRolePoolSignalError() instead")
    void appServiceEnvironmentsCreateOrUpdateMultiRolePoolSignalE(OAIWorkerPoolResource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appServiceEnvironmentsCreateOrUpdateMultiRolePoolSignalError(OAIWorkerPoolResource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServiceEnvironmentsCreateOrUpdateWorkerPoolSignalError() instead")
    void appServiceEnvironmentsCreateOrUpdateWorkerPoolSignalE(OAIWorkerPoolResource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appServiceEnvironmentsCreateOrUpdateWorkerPoolSignalError(OAIWorkerPoolResource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServiceEnvironmentsDeleteSignalError() instead")
    void appServiceEnvironmentsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void appServiceEnvironmentsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServiceEnvironmentsGetSignalError() instead")
    void appServiceEnvironmentsGetSignalE(OAIAppServiceEnvironmentResource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appServiceEnvironmentsGetSignalError(OAIAppServiceEnvironmentResource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServiceEnvironmentsGetDiagnosticsItemSignalError() instead")
    void appServiceEnvironmentsGetDiagnosticsItemSignalE(OAIHostingEnvironmentDiagnostics summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appServiceEnvironmentsGetDiagnosticsItemSignalError(OAIHostingEnvironmentDiagnostics summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServiceEnvironmentsGetInboundNetworkDependenciesEndpointsSignalError() instead")
    void appServiceEnvironmentsGetInboundNetworkDependenciesEndpointsSignalE(OAIInboundEnvironmentEndpointCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appServiceEnvironmentsGetInboundNetworkDependenciesEndpointsSignalError(OAIInboundEnvironmentEndpointCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServiceEnvironmentsGetMultiRolePoolSignalError() instead")
    void appServiceEnvironmentsGetMultiRolePoolSignalE(OAIWorkerPoolResource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appServiceEnvironmentsGetMultiRolePoolSignalError(OAIWorkerPoolResource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServiceEnvironmentsGetOutboundNetworkDependenciesEndpointsSignalError() instead")
    void appServiceEnvironmentsGetOutboundNetworkDependenciesEndpointsSignalE(OAIOutboundEnvironmentEndpointCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appServiceEnvironmentsGetOutboundNetworkDependenciesEndpointsSignalError(OAIOutboundEnvironmentEndpointCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServiceEnvironmentsGetWorkerPoolSignalError() instead")
    void appServiceEnvironmentsGetWorkerPoolSignalE(OAIWorkerPoolResource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appServiceEnvironmentsGetWorkerPoolSignalError(OAIWorkerPoolResource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServiceEnvironmentsListSignalError() instead")
    void appServiceEnvironmentsListSignalE(OAIAppServiceEnvironmentCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appServiceEnvironmentsListSignalError(OAIAppServiceEnvironmentCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServiceEnvironmentsListAppServicePlansSignalError() instead")
    void appServiceEnvironmentsListAppServicePlansSignalE(OAIAppServiceEnvironments_ListAppServicePlans_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appServiceEnvironmentsListAppServicePlansSignalError(OAIAppServiceEnvironments_ListAppServicePlans_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServiceEnvironmentsListByResourceGroupSignalError() instead")
    void appServiceEnvironmentsListByResourceGroupSignalE(OAIAppServiceEnvironmentCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appServiceEnvironmentsListByResourceGroupSignalError(OAIAppServiceEnvironmentCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServiceEnvironmentsListCapacitiesSignalError() instead")
    void appServiceEnvironmentsListCapacitiesSignalE(OAIStampCapacityCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appServiceEnvironmentsListCapacitiesSignalError(OAIStampCapacityCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServiceEnvironmentsListDiagnosticsSignalError() instead")
    void appServiceEnvironmentsListDiagnosticsSignalE(QList<OAIHostingEnvironmentDiagnostics> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appServiceEnvironmentsListDiagnosticsSignalError(QList<OAIHostingEnvironmentDiagnostics> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServiceEnvironmentsListMetricDefinitionsSignalError() instead")
    void appServiceEnvironmentsListMetricDefinitionsSignalE(OAIMetricDefinition summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appServiceEnvironmentsListMetricDefinitionsSignalError(OAIMetricDefinition summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServiceEnvironmentsListMetricsSignalError() instead")
    void appServiceEnvironmentsListMetricsSignalE(OAIAppServiceEnvironments_ListMetrics_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appServiceEnvironmentsListMetricsSignalError(OAIAppServiceEnvironments_ListMetrics_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServiceEnvironmentsListMultiRoleMetricDefinitionsSignalError() instead")
    void appServiceEnvironmentsListMultiRoleMetricDefinitionsSignalE(OAIAppServiceEnvironments_ListMultiRolePoolInstanceMetricDefinitions_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appServiceEnvironmentsListMultiRoleMetricDefinitionsSignalError(OAIAppServiceEnvironments_ListMultiRolePoolInstanceMetricDefinitions_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServiceEnvironmentsListMultiRoleMetricsSignalError() instead")
    void appServiceEnvironmentsListMultiRoleMetricsSignalE(OAIAppServiceEnvironments_ListMetrics_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appServiceEnvironmentsListMultiRoleMetricsSignalError(OAIAppServiceEnvironments_ListMetrics_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServiceEnvironmentsListMultiRolePoolInstanceMetricDefinitionsSignalError() instead")
    void appServiceEnvironmentsListMultiRolePoolInstanceMetricDefinitionsSignalE(OAIAppServiceEnvironments_ListMultiRolePoolInstanceMetricDefinitions_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appServiceEnvironmentsListMultiRolePoolInstanceMetricDefinitionsSignalError(OAIAppServiceEnvironments_ListMultiRolePoolInstanceMetricDefinitions_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServiceEnvironmentsListMultiRolePoolInstanceMetricsSignalError() instead")
    void appServiceEnvironmentsListMultiRolePoolInstanceMetricsSignalE(OAIAppServiceEnvironments_ListMetrics_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appServiceEnvironmentsListMultiRolePoolInstanceMetricsSignalError(OAIAppServiceEnvironments_ListMetrics_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServiceEnvironmentsListMultiRolePoolSkusSignalError() instead")
    void appServiceEnvironmentsListMultiRolePoolSkusSignalE(OAISkuInfoCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appServiceEnvironmentsListMultiRolePoolSkusSignalError(OAISkuInfoCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServiceEnvironmentsListMultiRolePoolsSignalError() instead")
    void appServiceEnvironmentsListMultiRolePoolsSignalE(OAIWorkerPoolCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appServiceEnvironmentsListMultiRolePoolsSignalError(OAIWorkerPoolCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServiceEnvironmentsListMultiRoleUsagesSignalError() instead")
    void appServiceEnvironmentsListMultiRoleUsagesSignalE(OAIUsageCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appServiceEnvironmentsListMultiRoleUsagesSignalError(OAIUsageCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServiceEnvironmentsListOperationsSignalError() instead")
    void appServiceEnvironmentsListOperationsSignalE(QList<OAIAppServiceEnvironments_ListOperations_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appServiceEnvironmentsListOperationsSignalError(QList<OAIAppServiceEnvironments_ListOperations_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServiceEnvironmentsListUsagesSignalError() instead")
    void appServiceEnvironmentsListUsagesSignalE(OAIAppServiceEnvironments_ListUsages_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appServiceEnvironmentsListUsagesSignalError(OAIAppServiceEnvironments_ListUsages_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServiceEnvironmentsListVipsSignalError() instead")
    void appServiceEnvironmentsListVipsSignalE(OAIAddressResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appServiceEnvironmentsListVipsSignalError(OAIAddressResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServiceEnvironmentsListWebAppsSignalError() instead")
    void appServiceEnvironmentsListWebAppsSignalE(OAIAppServiceEnvironments_ChangeVnet_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appServiceEnvironmentsListWebAppsSignalError(OAIAppServiceEnvironments_ChangeVnet_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServiceEnvironmentsListWebWorkerMetricDefinitionsSignalError() instead")
    void appServiceEnvironmentsListWebWorkerMetricDefinitionsSignalE(OAIAppServiceEnvironments_ListMultiRolePoolInstanceMetricDefinitions_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appServiceEnvironmentsListWebWorkerMetricDefinitionsSignalError(OAIAppServiceEnvironments_ListMultiRolePoolInstanceMetricDefinitions_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServiceEnvironmentsListWebWorkerMetricsSignalError() instead")
    void appServiceEnvironmentsListWebWorkerMetricsSignalE(OAIAppServiceEnvironments_ListMetrics_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appServiceEnvironmentsListWebWorkerMetricsSignalError(OAIAppServiceEnvironments_ListMetrics_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServiceEnvironmentsListWebWorkerUsagesSignalError() instead")
    void appServiceEnvironmentsListWebWorkerUsagesSignalE(OAIUsageCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appServiceEnvironmentsListWebWorkerUsagesSignalError(OAIUsageCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServiceEnvironmentsListWorkerPoolInstanceMetricDefinitionsSignalError() instead")
    void appServiceEnvironmentsListWorkerPoolInstanceMetricDefinitionsSignalE(OAIAppServiceEnvironments_ListMultiRolePoolInstanceMetricDefinitions_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appServiceEnvironmentsListWorkerPoolInstanceMetricDefinitionsSignalError(OAIAppServiceEnvironments_ListMultiRolePoolInstanceMetricDefinitions_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServiceEnvironmentsListWorkerPoolInstanceMetricsSignalError() instead")
    void appServiceEnvironmentsListWorkerPoolInstanceMetricsSignalE(OAIAppServiceEnvironments_ListMetrics_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appServiceEnvironmentsListWorkerPoolInstanceMetricsSignalError(OAIAppServiceEnvironments_ListMetrics_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServiceEnvironmentsListWorkerPoolSkusSignalError() instead")
    void appServiceEnvironmentsListWorkerPoolSkusSignalE(OAISkuInfoCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appServiceEnvironmentsListWorkerPoolSkusSignalError(OAISkuInfoCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServiceEnvironmentsListWorkerPoolsSignalError() instead")
    void appServiceEnvironmentsListWorkerPoolsSignalE(OAIWorkerPoolCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appServiceEnvironmentsListWorkerPoolsSignalError(OAIWorkerPoolCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServiceEnvironmentsRebootSignalError() instead")
    void appServiceEnvironmentsRebootSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void appServiceEnvironmentsRebootSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServiceEnvironmentsResumeSignalError() instead")
    void appServiceEnvironmentsResumeSignalE(OAIAppServiceEnvironments_ChangeVnet_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appServiceEnvironmentsResumeSignalError(OAIAppServiceEnvironments_ChangeVnet_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServiceEnvironmentsSuspendSignalError() instead")
    void appServiceEnvironmentsSuspendSignalE(OAIAppServiceEnvironments_ChangeVnet_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appServiceEnvironmentsSuspendSignalError(OAIAppServiceEnvironments_ChangeVnet_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServiceEnvironmentsUpdateSignalError() instead")
    void appServiceEnvironmentsUpdateSignalE(OAIAppServiceEnvironmentResource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appServiceEnvironmentsUpdateSignalError(OAIAppServiceEnvironmentResource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServiceEnvironmentsUpdateMultiRolePoolSignalError() instead")
    void appServiceEnvironmentsUpdateMultiRolePoolSignalE(OAIWorkerPoolResource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appServiceEnvironmentsUpdateMultiRolePoolSignalError(OAIWorkerPoolResource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServiceEnvironmentsUpdateWorkerPoolSignalError() instead")
    void appServiceEnvironmentsUpdateWorkerPoolSignalE(OAIWorkerPoolResource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appServiceEnvironmentsUpdateWorkerPoolSignalError(OAIWorkerPoolResource summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use appServiceEnvironmentsChangeVnetSignalErrorFull() instead")
    void appServiceEnvironmentsChangeVnetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appServiceEnvironmentsChangeVnetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServiceEnvironmentsCreateOrUpdateSignalErrorFull() instead")
    void appServiceEnvironmentsCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appServiceEnvironmentsCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServiceEnvironmentsCreateOrUpdateMultiRolePoolSignalErrorFull() instead")
    void appServiceEnvironmentsCreateOrUpdateMultiRolePoolSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appServiceEnvironmentsCreateOrUpdateMultiRolePoolSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServiceEnvironmentsCreateOrUpdateWorkerPoolSignalErrorFull() instead")
    void appServiceEnvironmentsCreateOrUpdateWorkerPoolSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appServiceEnvironmentsCreateOrUpdateWorkerPoolSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServiceEnvironmentsDeleteSignalErrorFull() instead")
    void appServiceEnvironmentsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appServiceEnvironmentsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServiceEnvironmentsGetSignalErrorFull() instead")
    void appServiceEnvironmentsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appServiceEnvironmentsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServiceEnvironmentsGetDiagnosticsItemSignalErrorFull() instead")
    void appServiceEnvironmentsGetDiagnosticsItemSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appServiceEnvironmentsGetDiagnosticsItemSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServiceEnvironmentsGetInboundNetworkDependenciesEndpointsSignalErrorFull() instead")
    void appServiceEnvironmentsGetInboundNetworkDependenciesEndpointsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appServiceEnvironmentsGetInboundNetworkDependenciesEndpointsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServiceEnvironmentsGetMultiRolePoolSignalErrorFull() instead")
    void appServiceEnvironmentsGetMultiRolePoolSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appServiceEnvironmentsGetMultiRolePoolSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServiceEnvironmentsGetOutboundNetworkDependenciesEndpointsSignalErrorFull() instead")
    void appServiceEnvironmentsGetOutboundNetworkDependenciesEndpointsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appServiceEnvironmentsGetOutboundNetworkDependenciesEndpointsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServiceEnvironmentsGetWorkerPoolSignalErrorFull() instead")
    void appServiceEnvironmentsGetWorkerPoolSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appServiceEnvironmentsGetWorkerPoolSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServiceEnvironmentsListSignalErrorFull() instead")
    void appServiceEnvironmentsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appServiceEnvironmentsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServiceEnvironmentsListAppServicePlansSignalErrorFull() instead")
    void appServiceEnvironmentsListAppServicePlansSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appServiceEnvironmentsListAppServicePlansSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServiceEnvironmentsListByResourceGroupSignalErrorFull() instead")
    void appServiceEnvironmentsListByResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appServiceEnvironmentsListByResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServiceEnvironmentsListCapacitiesSignalErrorFull() instead")
    void appServiceEnvironmentsListCapacitiesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appServiceEnvironmentsListCapacitiesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServiceEnvironmentsListDiagnosticsSignalErrorFull() instead")
    void appServiceEnvironmentsListDiagnosticsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appServiceEnvironmentsListDiagnosticsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServiceEnvironmentsListMetricDefinitionsSignalErrorFull() instead")
    void appServiceEnvironmentsListMetricDefinitionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appServiceEnvironmentsListMetricDefinitionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServiceEnvironmentsListMetricsSignalErrorFull() instead")
    void appServiceEnvironmentsListMetricsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appServiceEnvironmentsListMetricsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServiceEnvironmentsListMultiRoleMetricDefinitionsSignalErrorFull() instead")
    void appServiceEnvironmentsListMultiRoleMetricDefinitionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appServiceEnvironmentsListMultiRoleMetricDefinitionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServiceEnvironmentsListMultiRoleMetricsSignalErrorFull() instead")
    void appServiceEnvironmentsListMultiRoleMetricsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appServiceEnvironmentsListMultiRoleMetricsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServiceEnvironmentsListMultiRolePoolInstanceMetricDefinitionsSignalErrorFull() instead")
    void appServiceEnvironmentsListMultiRolePoolInstanceMetricDefinitionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appServiceEnvironmentsListMultiRolePoolInstanceMetricDefinitionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServiceEnvironmentsListMultiRolePoolInstanceMetricsSignalErrorFull() instead")
    void appServiceEnvironmentsListMultiRolePoolInstanceMetricsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appServiceEnvironmentsListMultiRolePoolInstanceMetricsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServiceEnvironmentsListMultiRolePoolSkusSignalErrorFull() instead")
    void appServiceEnvironmentsListMultiRolePoolSkusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appServiceEnvironmentsListMultiRolePoolSkusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServiceEnvironmentsListMultiRolePoolsSignalErrorFull() instead")
    void appServiceEnvironmentsListMultiRolePoolsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appServiceEnvironmentsListMultiRolePoolsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServiceEnvironmentsListMultiRoleUsagesSignalErrorFull() instead")
    void appServiceEnvironmentsListMultiRoleUsagesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appServiceEnvironmentsListMultiRoleUsagesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServiceEnvironmentsListOperationsSignalErrorFull() instead")
    void appServiceEnvironmentsListOperationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appServiceEnvironmentsListOperationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServiceEnvironmentsListUsagesSignalErrorFull() instead")
    void appServiceEnvironmentsListUsagesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appServiceEnvironmentsListUsagesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServiceEnvironmentsListVipsSignalErrorFull() instead")
    void appServiceEnvironmentsListVipsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appServiceEnvironmentsListVipsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServiceEnvironmentsListWebAppsSignalErrorFull() instead")
    void appServiceEnvironmentsListWebAppsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appServiceEnvironmentsListWebAppsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServiceEnvironmentsListWebWorkerMetricDefinitionsSignalErrorFull() instead")
    void appServiceEnvironmentsListWebWorkerMetricDefinitionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appServiceEnvironmentsListWebWorkerMetricDefinitionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServiceEnvironmentsListWebWorkerMetricsSignalErrorFull() instead")
    void appServiceEnvironmentsListWebWorkerMetricsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appServiceEnvironmentsListWebWorkerMetricsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServiceEnvironmentsListWebWorkerUsagesSignalErrorFull() instead")
    void appServiceEnvironmentsListWebWorkerUsagesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appServiceEnvironmentsListWebWorkerUsagesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServiceEnvironmentsListWorkerPoolInstanceMetricDefinitionsSignalErrorFull() instead")
    void appServiceEnvironmentsListWorkerPoolInstanceMetricDefinitionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appServiceEnvironmentsListWorkerPoolInstanceMetricDefinitionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServiceEnvironmentsListWorkerPoolInstanceMetricsSignalErrorFull() instead")
    void appServiceEnvironmentsListWorkerPoolInstanceMetricsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appServiceEnvironmentsListWorkerPoolInstanceMetricsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServiceEnvironmentsListWorkerPoolSkusSignalErrorFull() instead")
    void appServiceEnvironmentsListWorkerPoolSkusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appServiceEnvironmentsListWorkerPoolSkusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServiceEnvironmentsListWorkerPoolsSignalErrorFull() instead")
    void appServiceEnvironmentsListWorkerPoolsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appServiceEnvironmentsListWorkerPoolsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServiceEnvironmentsRebootSignalErrorFull() instead")
    void appServiceEnvironmentsRebootSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appServiceEnvironmentsRebootSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServiceEnvironmentsResumeSignalErrorFull() instead")
    void appServiceEnvironmentsResumeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appServiceEnvironmentsResumeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServiceEnvironmentsSuspendSignalErrorFull() instead")
    void appServiceEnvironmentsSuspendSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appServiceEnvironmentsSuspendSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServiceEnvironmentsUpdateSignalErrorFull() instead")
    void appServiceEnvironmentsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appServiceEnvironmentsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServiceEnvironmentsUpdateMultiRolePoolSignalErrorFull() instead")
    void appServiceEnvironmentsUpdateMultiRolePoolSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appServiceEnvironmentsUpdateMultiRolePoolSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServiceEnvironmentsUpdateWorkerPoolSignalErrorFull() instead")
    void appServiceEnvironmentsUpdateWorkerPoolSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appServiceEnvironmentsUpdateWorkerPoolSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
