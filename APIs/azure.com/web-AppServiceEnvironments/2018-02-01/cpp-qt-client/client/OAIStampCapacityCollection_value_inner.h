/**
 * AppServiceEnvironments API Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-02-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIStampCapacityCollection_value_inner.h
 *
 * Stamp capacity information.
 */

#ifndef OAIStampCapacityCollection_value_inner_H
#define OAIStampCapacityCollection_value_inner_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIStampCapacityCollection_value_inner : public OAIObject {
public:
    OAIStampCapacityCollection_value_inner();
    OAIStampCapacityCollection_value_inner(QString json);
    ~OAIStampCapacityCollection_value_inner() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint64 getAvailableCapacity() const;
    void setAvailableCapacity(const qint64 &available_capacity);
    bool is_available_capacity_Set() const;
    bool is_available_capacity_Valid() const;

    QString getComputeMode() const;
    void setComputeMode(const QString &compute_mode);
    bool is_compute_mode_Set() const;
    bool is_compute_mode_Valid() const;

    bool isExcludeFromCapacityAllocation() const;
    void setExcludeFromCapacityAllocation(const bool &exclude_from_capacity_allocation);
    bool is_exclude_from_capacity_allocation_Set() const;
    bool is_exclude_from_capacity_allocation_Valid() const;

    bool isIsApplicableForAllComputeModes() const;
    void setIsApplicableForAllComputeModes(const bool &is_applicable_for_all_compute_modes);
    bool is_is_applicable_for_all_compute_modes_Set() const;
    bool is_is_applicable_for_all_compute_modes_Valid() const;

    bool isIsLinux() const;
    void setIsLinux(const bool &is_linux);
    bool is_is_linux_Set() const;
    bool is_is_linux_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getSiteMode() const;
    void setSiteMode(const QString &site_mode);
    bool is_site_mode_Set() const;
    bool is_site_mode_Valid() const;

    qint64 getTotalCapacity() const;
    void setTotalCapacity(const qint64 &total_capacity);
    bool is_total_capacity_Set() const;
    bool is_total_capacity_Valid() const;

    QString getUnit() const;
    void setUnit(const QString &unit);
    bool is_unit_Set() const;
    bool is_unit_Valid() const;

    QString getWorkerSize() const;
    void setWorkerSize(const QString &worker_size);
    bool is_worker_size_Set() const;
    bool is_worker_size_Valid() const;

    qint32 getWorkerSizeId() const;
    void setWorkerSizeId(const qint32 &worker_size_id);
    bool is_worker_size_id_Set() const;
    bool is_worker_size_id_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint64 m_available_capacity;
    bool m_available_capacity_isSet;
    bool m_available_capacity_isValid;

    QString m_compute_mode;
    bool m_compute_mode_isSet;
    bool m_compute_mode_isValid;

    bool m_exclude_from_capacity_allocation;
    bool m_exclude_from_capacity_allocation_isSet;
    bool m_exclude_from_capacity_allocation_isValid;

    bool m_is_applicable_for_all_compute_modes;
    bool m_is_applicable_for_all_compute_modes_isSet;
    bool m_is_applicable_for_all_compute_modes_isValid;

    bool m_is_linux;
    bool m_is_linux_isSet;
    bool m_is_linux_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_site_mode;
    bool m_site_mode_isSet;
    bool m_site_mode_isValid;

    qint64 m_total_capacity;
    bool m_total_capacity_isSet;
    bool m_total_capacity_isValid;

    QString m_unit;
    bool m_unit_isSet;
    bool m_unit_isValid;

    QString m_worker_size;
    bool m_worker_size_isSet;
    bool m_worker_size_isValid;

    qint32 m_worker_size_id;
    bool m_worker_size_id_isSet;
    bool m_worker_size_id_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIStampCapacityCollection_value_inner)

#endif // OAIStampCapacityCollection_value_inner_H
