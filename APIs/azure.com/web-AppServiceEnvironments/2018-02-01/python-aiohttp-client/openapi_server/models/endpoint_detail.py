# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EndpointDetail(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ip_address: str=None, is_accessable: bool=None, latency: float=None, port: int=None):
        """EndpointDetail - a model defined in OpenAPI

        :param ip_address: The ip_address of this EndpointDetail.
        :param is_accessable: The is_accessable of this EndpointDetail.
        :param latency: The latency of this EndpointDetail.
        :param port: The port of this EndpointDetail.
        """
        self.openapi_types = {
            'ip_address': str,
            'is_accessable': bool,
            'latency': float,
            'port': int
        }

        self.attribute_map = {
            'ip_address': 'ipAddress',
            'is_accessable': 'isAccessable',
            'latency': 'latency',
            'port': 'port'
        }

        self._ip_address = ip_address
        self._is_accessable = is_accessable
        self._latency = latency
        self._port = port

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EndpointDetail':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EndpointDetail of this EndpointDetail.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ip_address(self):
        """Gets the ip_address of this EndpointDetail.

        An IP Address that Domain Name currently resolves to.

        :return: The ip_address of this EndpointDetail.
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this EndpointDetail.

        An IP Address that Domain Name currently resolves to.

        :param ip_address: The ip_address of this EndpointDetail.
        :type ip_address: str
        """

        self._ip_address = ip_address

    @property
    def is_accessable(self):
        """Gets the is_accessable of this EndpointDetail.

        Whether it is possible to create a TCP connection from the App Service Environment to this IpAddress at this Port.

        :return: The is_accessable of this EndpointDetail.
        :rtype: bool
        """
        return self._is_accessable

    @is_accessable.setter
    def is_accessable(self, is_accessable):
        """Sets the is_accessable of this EndpointDetail.

        Whether it is possible to create a TCP connection from the App Service Environment to this IpAddress at this Port.

        :param is_accessable: The is_accessable of this EndpointDetail.
        :type is_accessable: bool
        """

        self._is_accessable = is_accessable

    @property
    def latency(self):
        """Gets the latency of this EndpointDetail.

        The time in milliseconds it takes for a TCP connection to be created from the App Service Environment to this IpAddress at this Port.

        :return: The latency of this EndpointDetail.
        :rtype: float
        """
        return self._latency

    @latency.setter
    def latency(self, latency):
        """Sets the latency of this EndpointDetail.

        The time in milliseconds it takes for a TCP connection to be created from the App Service Environment to this IpAddress at this Port.

        :param latency: The latency of this EndpointDetail.
        :type latency: float
        """

        self._latency = latency

    @property
    def port(self):
        """Gets the port of this EndpointDetail.

        The port an endpoint is connected to.

        :return: The port of this EndpointDetail.
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this EndpointDetail.

        The port an endpoint is connected to.

        :param port: The port of this EndpointDetail.
        :type port: int
        """

        self._port = port
