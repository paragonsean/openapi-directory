/**
 * AppServiceEnvironments API Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AddressResponse from '../model/AddressResponse';
import AppServiceEnvironmentCollection from '../model/AppServiceEnvironmentCollection';
import AppServiceEnvironmentPatchResource from '../model/AppServiceEnvironmentPatchResource';
import AppServiceEnvironmentResource from '../model/AppServiceEnvironmentResource';
import AppServiceEnvironmentsChangeVnet200Response from '../model/AppServiceEnvironmentsChangeVnet200Response';
import AppServiceEnvironmentsChangeVnetRequest from '../model/AppServiceEnvironmentsChangeVnetRequest';
import AppServiceEnvironmentsListAppServicePlans200Response from '../model/AppServiceEnvironmentsListAppServicePlans200Response';
import AppServiceEnvironmentsListDefaultResponse from '../model/AppServiceEnvironmentsListDefaultResponse';
import AppServiceEnvironmentsListOperations200ResponseInner from '../model/AppServiceEnvironmentsListOperations200ResponseInner';
import AppServiceEnvironmentsListUsages200Response from '../model/AppServiceEnvironmentsListUsages200Response';
import HostingEnvironmentDiagnostics from '../model/HostingEnvironmentDiagnostics';
import InboundEnvironmentEndpointCollection from '../model/InboundEnvironmentEndpointCollection';
import OutboundEnvironmentEndpointCollection from '../model/OutboundEnvironmentEndpointCollection';
import ResourceMetricDefinitionCollection from '../model/ResourceMetricDefinitionCollection';
import SkuInfoCollection from '../model/SkuInfoCollection';
import StampCapacityCollection from '../model/StampCapacityCollection';
import UsageCollection from '../model/UsageCollection';
import WorkerPoolCollection from '../model/WorkerPoolCollection';
import WorkerPoolResource from '../model/WorkerPoolResource';

/**
* AppServiceEnvironments service.
* @module api/AppServiceEnvironmentsApi
* @version 2019-08-01
*/
export default class AppServiceEnvironmentsApi {

    /**
    * Constructs a new AppServiceEnvironmentsApi. 
    * @alias module:api/AppServiceEnvironmentsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the appServiceEnvironmentsChangeVnet operation.
     * @callback module:api/AppServiceEnvironmentsApi~appServiceEnvironmentsChangeVnetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppServiceEnvironmentsChangeVnet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Move an App Service Environment to a different VNET.
     * Description for Move an App Service Environment to a different VNET.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the App Service Environment.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:model/AppServiceEnvironmentsChangeVnetRequest} vnetInfo Details for the new virtual network.
     * @param {module:api/AppServiceEnvironmentsApi~appServiceEnvironmentsChangeVnetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppServiceEnvironmentsChangeVnet200Response}
     */
    appServiceEnvironmentsChangeVnet(resourceGroupName, name, subscriptionId, apiVersion, vnetInfo, callback) {
      let postBody = vnetInfo;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling appServiceEnvironmentsChangeVnet");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling appServiceEnvironmentsChangeVnet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling appServiceEnvironmentsChangeVnet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling appServiceEnvironmentsChangeVnet");
      }
      // verify the required parameter 'vnetInfo' is set
      if (vnetInfo === undefined || vnetInfo === null) {
        throw new Error("Missing the required parameter 'vnetInfo' when calling appServiceEnvironmentsChangeVnet");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AppServiceEnvironmentsChangeVnet200Response;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/changeVirtualNetwork', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appServiceEnvironmentsCreateOrUpdate operation.
     * @callback module:api/AppServiceEnvironmentsApi~appServiceEnvironmentsCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppServiceEnvironmentResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update an App Service Environment.
     * Description for Create or update an App Service Environment.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the App Service Environment.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:model/AppServiceEnvironmentResource} hostingEnvironmentEnvelope Configuration details of the App Service Environment.
     * @param {module:api/AppServiceEnvironmentsApi~appServiceEnvironmentsCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppServiceEnvironmentResource}
     */
    appServiceEnvironmentsCreateOrUpdate(resourceGroupName, name, subscriptionId, apiVersion, hostingEnvironmentEnvelope, callback) {
      let postBody = hostingEnvironmentEnvelope;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling appServiceEnvironmentsCreateOrUpdate");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling appServiceEnvironmentsCreateOrUpdate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling appServiceEnvironmentsCreateOrUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling appServiceEnvironmentsCreateOrUpdate");
      }
      // verify the required parameter 'hostingEnvironmentEnvelope' is set
      if (hostingEnvironmentEnvelope === undefined || hostingEnvironmentEnvelope === null) {
        throw new Error("Missing the required parameter 'hostingEnvironmentEnvelope' when calling appServiceEnvironmentsCreateOrUpdate");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AppServiceEnvironmentResource;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appServiceEnvironmentsCreateOrUpdateMultiRolePool operation.
     * @callback module:api/AppServiceEnvironmentsApi~appServiceEnvironmentsCreateOrUpdateMultiRolePoolCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WorkerPoolResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update a multi-role pool.
     * Description for Create or update a multi-role pool.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the App Service Environment.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:model/WorkerPoolResource} multiRolePoolEnvelope Properties of the multi-role pool.
     * @param {module:api/AppServiceEnvironmentsApi~appServiceEnvironmentsCreateOrUpdateMultiRolePoolCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WorkerPoolResource}
     */
    appServiceEnvironmentsCreateOrUpdateMultiRolePool(resourceGroupName, name, subscriptionId, apiVersion, multiRolePoolEnvelope, callback) {
      let postBody = multiRolePoolEnvelope;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling appServiceEnvironmentsCreateOrUpdateMultiRolePool");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling appServiceEnvironmentsCreateOrUpdateMultiRolePool");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling appServiceEnvironmentsCreateOrUpdateMultiRolePool");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling appServiceEnvironmentsCreateOrUpdateMultiRolePool");
      }
      // verify the required parameter 'multiRolePoolEnvelope' is set
      if (multiRolePoolEnvelope === undefined || multiRolePoolEnvelope === null) {
        throw new Error("Missing the required parameter 'multiRolePoolEnvelope' when calling appServiceEnvironmentsCreateOrUpdateMultiRolePool");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = WorkerPoolResource;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/multiRolePools/default', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appServiceEnvironmentsCreateOrUpdateWorkerPool operation.
     * @callback module:api/AppServiceEnvironmentsApi~appServiceEnvironmentsCreateOrUpdateWorkerPoolCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WorkerPoolResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update a worker pool.
     * Description for Create or update a worker pool.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the App Service Environment.
     * @param {String} workerPoolName Name of the worker pool.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:model/WorkerPoolResource} workerPoolEnvelope Properties of the worker pool.
     * @param {module:api/AppServiceEnvironmentsApi~appServiceEnvironmentsCreateOrUpdateWorkerPoolCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WorkerPoolResource}
     */
    appServiceEnvironmentsCreateOrUpdateWorkerPool(resourceGroupName, name, workerPoolName, subscriptionId, apiVersion, workerPoolEnvelope, callback) {
      let postBody = workerPoolEnvelope;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling appServiceEnvironmentsCreateOrUpdateWorkerPool");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling appServiceEnvironmentsCreateOrUpdateWorkerPool");
      }
      // verify the required parameter 'workerPoolName' is set
      if (workerPoolName === undefined || workerPoolName === null) {
        throw new Error("Missing the required parameter 'workerPoolName' when calling appServiceEnvironmentsCreateOrUpdateWorkerPool");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling appServiceEnvironmentsCreateOrUpdateWorkerPool");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling appServiceEnvironmentsCreateOrUpdateWorkerPool");
      }
      // verify the required parameter 'workerPoolEnvelope' is set
      if (workerPoolEnvelope === undefined || workerPoolEnvelope === null) {
        throw new Error("Missing the required parameter 'workerPoolEnvelope' when calling appServiceEnvironmentsCreateOrUpdateWorkerPool");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'workerPoolName': workerPoolName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = WorkerPoolResource;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/workerPools/{workerPoolName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appServiceEnvironmentsDelete operation.
     * @callback module:api/AppServiceEnvironmentsApi~appServiceEnvironmentsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an App Service Environment.
     * Description for Delete an App Service Environment.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the App Service Environment.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {Object} opts Optional parameters
     * @param {Boolean} [forceDelete] Specify <code>true</code> to force the deletion even if the App Service Environment contains resources. The default is <code>false</code>.
     * @param {module:api/AppServiceEnvironmentsApi~appServiceEnvironmentsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appServiceEnvironmentsDelete(resourceGroupName, name, subscriptionId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling appServiceEnvironmentsDelete");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling appServiceEnvironmentsDelete");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling appServiceEnvironmentsDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling appServiceEnvironmentsDelete");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'forceDelete': opts['forceDelete'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appServiceEnvironmentsGet operation.
     * @callback module:api/AppServiceEnvironmentsApi~appServiceEnvironmentsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppServiceEnvironmentResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the properties of an App Service Environment.
     * Description for Get the properties of an App Service Environment.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the App Service Environment.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/AppServiceEnvironmentsApi~appServiceEnvironmentsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppServiceEnvironmentResource}
     */
    appServiceEnvironmentsGet(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling appServiceEnvironmentsGet");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling appServiceEnvironmentsGet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling appServiceEnvironmentsGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling appServiceEnvironmentsGet");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppServiceEnvironmentResource;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appServiceEnvironmentsGetDiagnosticsItem operation.
     * @callback module:api/AppServiceEnvironmentsApi~appServiceEnvironmentsGetDiagnosticsItemCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HostingEnvironmentDiagnostics} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a diagnostics item for an App Service Environment.
     * Description for Get a diagnostics item for an App Service Environment.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the App Service Environment.
     * @param {String} diagnosticsName Name of the diagnostics item.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/AppServiceEnvironmentsApi~appServiceEnvironmentsGetDiagnosticsItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HostingEnvironmentDiagnostics}
     */
    appServiceEnvironmentsGetDiagnosticsItem(resourceGroupName, name, diagnosticsName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling appServiceEnvironmentsGetDiagnosticsItem");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling appServiceEnvironmentsGetDiagnosticsItem");
      }
      // verify the required parameter 'diagnosticsName' is set
      if (diagnosticsName === undefined || diagnosticsName === null) {
        throw new Error("Missing the required parameter 'diagnosticsName' when calling appServiceEnvironmentsGetDiagnosticsItem");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling appServiceEnvironmentsGetDiagnosticsItem");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling appServiceEnvironmentsGetDiagnosticsItem");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'diagnosticsName': diagnosticsName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = HostingEnvironmentDiagnostics;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/diagnostics/{diagnosticsName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appServiceEnvironmentsGetInboundNetworkDependenciesEndpoints operation.
     * @callback module:api/AppServiceEnvironmentsApi~appServiceEnvironmentsGetInboundNetworkDependenciesEndpointsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InboundEnvironmentEndpointCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the network endpoints of all inbound dependencies of an App Service Environment.
     * Description for Get the network endpoints of all inbound dependencies of an App Service Environment.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the App Service Environment.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/AppServiceEnvironmentsApi~appServiceEnvironmentsGetInboundNetworkDependenciesEndpointsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InboundEnvironmentEndpointCollection}
     */
    appServiceEnvironmentsGetInboundNetworkDependenciesEndpoints(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling appServiceEnvironmentsGetInboundNetworkDependenciesEndpoints");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling appServiceEnvironmentsGetInboundNetworkDependenciesEndpoints");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling appServiceEnvironmentsGetInboundNetworkDependenciesEndpoints");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling appServiceEnvironmentsGetInboundNetworkDependenciesEndpoints");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InboundEnvironmentEndpointCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/inboundNetworkDependenciesEndpoints', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appServiceEnvironmentsGetMultiRolePool operation.
     * @callback module:api/AppServiceEnvironmentsApi~appServiceEnvironmentsGetMultiRolePoolCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WorkerPoolResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get properties of a multi-role pool.
     * Description for Get properties of a multi-role pool.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the App Service Environment.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/AppServiceEnvironmentsApi~appServiceEnvironmentsGetMultiRolePoolCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WorkerPoolResource}
     */
    appServiceEnvironmentsGetMultiRolePool(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling appServiceEnvironmentsGetMultiRolePool");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling appServiceEnvironmentsGetMultiRolePool");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling appServiceEnvironmentsGetMultiRolePool");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling appServiceEnvironmentsGetMultiRolePool");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WorkerPoolResource;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/multiRolePools/default', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appServiceEnvironmentsGetOutboundNetworkDependenciesEndpoints operation.
     * @callback module:api/AppServiceEnvironmentsApi~appServiceEnvironmentsGetOutboundNetworkDependenciesEndpointsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OutboundEnvironmentEndpointCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the network endpoints of all outbound dependencies of an App Service Environment.
     * Description for Get the network endpoints of all outbound dependencies of an App Service Environment.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the App Service Environment.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/AppServiceEnvironmentsApi~appServiceEnvironmentsGetOutboundNetworkDependenciesEndpointsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OutboundEnvironmentEndpointCollection}
     */
    appServiceEnvironmentsGetOutboundNetworkDependenciesEndpoints(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling appServiceEnvironmentsGetOutboundNetworkDependenciesEndpoints");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling appServiceEnvironmentsGetOutboundNetworkDependenciesEndpoints");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling appServiceEnvironmentsGetOutboundNetworkDependenciesEndpoints");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling appServiceEnvironmentsGetOutboundNetworkDependenciesEndpoints");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OutboundEnvironmentEndpointCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/outboundNetworkDependenciesEndpoints', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appServiceEnvironmentsGetVipInfo operation.
     * @callback module:api/AppServiceEnvironmentsApi~appServiceEnvironmentsGetVipInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AddressResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get IP addresses assigned to an App Service Environment.
     * Description for Get IP addresses assigned to an App Service Environment.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the App Service Environment.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/AppServiceEnvironmentsApi~appServiceEnvironmentsGetVipInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AddressResponse}
     */
    appServiceEnvironmentsGetVipInfo(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling appServiceEnvironmentsGetVipInfo");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling appServiceEnvironmentsGetVipInfo");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling appServiceEnvironmentsGetVipInfo");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling appServiceEnvironmentsGetVipInfo");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AddressResponse;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/capacities/virtualip', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appServiceEnvironmentsGetWorkerPool operation.
     * @callback module:api/AppServiceEnvironmentsApi~appServiceEnvironmentsGetWorkerPoolCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WorkerPoolResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get properties of a worker pool.
     * Description for Get properties of a worker pool.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the App Service Environment.
     * @param {String} workerPoolName Name of the worker pool.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/AppServiceEnvironmentsApi~appServiceEnvironmentsGetWorkerPoolCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WorkerPoolResource}
     */
    appServiceEnvironmentsGetWorkerPool(resourceGroupName, name, workerPoolName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling appServiceEnvironmentsGetWorkerPool");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling appServiceEnvironmentsGetWorkerPool");
      }
      // verify the required parameter 'workerPoolName' is set
      if (workerPoolName === undefined || workerPoolName === null) {
        throw new Error("Missing the required parameter 'workerPoolName' when calling appServiceEnvironmentsGetWorkerPool");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling appServiceEnvironmentsGetWorkerPool");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling appServiceEnvironmentsGetWorkerPool");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'workerPoolName': workerPoolName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WorkerPoolResource;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/workerPools/{workerPoolName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appServiceEnvironmentsList operation.
     * @callback module:api/AppServiceEnvironmentsApi~appServiceEnvironmentsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppServiceEnvironmentCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all App Service Environments for a subscription.
     * Description for Get all App Service Environments for a subscription.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/AppServiceEnvironmentsApi~appServiceEnvironmentsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppServiceEnvironmentCollection}
     */
    appServiceEnvironmentsList(subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling appServiceEnvironmentsList");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling appServiceEnvironmentsList");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppServiceEnvironmentCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Web/hostingEnvironments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appServiceEnvironmentsListAppServicePlans operation.
     * @callback module:api/AppServiceEnvironmentsApi~appServiceEnvironmentsListAppServicePlansCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppServiceEnvironmentsListAppServicePlans200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all App Service plans in an App Service Environment.
     * Description for Get all App Service plans in an App Service Environment.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the App Service Environment.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/AppServiceEnvironmentsApi~appServiceEnvironmentsListAppServicePlansCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppServiceEnvironmentsListAppServicePlans200Response}
     */
    appServiceEnvironmentsListAppServicePlans(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling appServiceEnvironmentsListAppServicePlans");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling appServiceEnvironmentsListAppServicePlans");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling appServiceEnvironmentsListAppServicePlans");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling appServiceEnvironmentsListAppServicePlans");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppServiceEnvironmentsListAppServicePlans200Response;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/serverfarms', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appServiceEnvironmentsListByResourceGroup operation.
     * @callback module:api/AppServiceEnvironmentsApi~appServiceEnvironmentsListByResourceGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppServiceEnvironmentCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all App Service Environments in a resource group.
     * Description for Get all App Service Environments in a resource group.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/AppServiceEnvironmentsApi~appServiceEnvironmentsListByResourceGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppServiceEnvironmentCollection}
     */
    appServiceEnvironmentsListByResourceGroup(resourceGroupName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling appServiceEnvironmentsListByResourceGroup");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling appServiceEnvironmentsListByResourceGroup");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling appServiceEnvironmentsListByResourceGroup");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppServiceEnvironmentCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appServiceEnvironmentsListCapacities operation.
     * @callback module:api/AppServiceEnvironmentsApi~appServiceEnvironmentsListCapacitiesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StampCapacityCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the used, available, and total worker capacity an App Service Environment.
     * Description for Get the used, available, and total worker capacity an App Service Environment.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the App Service Environment.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/AppServiceEnvironmentsApi~appServiceEnvironmentsListCapacitiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StampCapacityCollection}
     */
    appServiceEnvironmentsListCapacities(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling appServiceEnvironmentsListCapacities");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling appServiceEnvironmentsListCapacities");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling appServiceEnvironmentsListCapacities");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling appServiceEnvironmentsListCapacities");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = StampCapacityCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/capacities/compute', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appServiceEnvironmentsListDiagnostics operation.
     * @callback module:api/AppServiceEnvironmentsApi~appServiceEnvironmentsListDiagnosticsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/HostingEnvironmentDiagnostics>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get diagnostic information for an App Service Environment.
     * Description for Get diagnostic information for an App Service Environment.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the App Service Environment.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/AppServiceEnvironmentsApi~appServiceEnvironmentsListDiagnosticsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/HostingEnvironmentDiagnostics>}
     */
    appServiceEnvironmentsListDiagnostics(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling appServiceEnvironmentsListDiagnostics");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling appServiceEnvironmentsListDiagnostics");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling appServiceEnvironmentsListDiagnostics");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling appServiceEnvironmentsListDiagnostics");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [HostingEnvironmentDiagnostics];
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/diagnostics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appServiceEnvironmentsListMultiRoleMetricDefinitions operation.
     * @callback module:api/AppServiceEnvironmentsApi~appServiceEnvironmentsListMultiRoleMetricDefinitionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResourceMetricDefinitionCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get metric definitions for a multi-role pool of an App Service Environment.
     * Description for Get metric definitions for a multi-role pool of an App Service Environment.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the App Service Environment.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/AppServiceEnvironmentsApi~appServiceEnvironmentsListMultiRoleMetricDefinitionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResourceMetricDefinitionCollection}
     */
    appServiceEnvironmentsListMultiRoleMetricDefinitions(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling appServiceEnvironmentsListMultiRoleMetricDefinitions");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling appServiceEnvironmentsListMultiRoleMetricDefinitions");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling appServiceEnvironmentsListMultiRoleMetricDefinitions");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling appServiceEnvironmentsListMultiRoleMetricDefinitions");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResourceMetricDefinitionCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/multiRolePools/default/metricdefinitions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appServiceEnvironmentsListMultiRolePoolInstanceMetricDefinitions operation.
     * @callback module:api/AppServiceEnvironmentsApi~appServiceEnvironmentsListMultiRolePoolInstanceMetricDefinitionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResourceMetricDefinitionCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get metric definitions for a specific instance of a multi-role pool of an App Service Environment.
     * Description for Get metric definitions for a specific instance of a multi-role pool of an App Service Environment.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the App Service Environment.
     * @param {String} instance Name of the instance in the multi-role pool.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/AppServiceEnvironmentsApi~appServiceEnvironmentsListMultiRolePoolInstanceMetricDefinitionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResourceMetricDefinitionCollection}
     */
    appServiceEnvironmentsListMultiRolePoolInstanceMetricDefinitions(resourceGroupName, name, instance, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling appServiceEnvironmentsListMultiRolePoolInstanceMetricDefinitions");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling appServiceEnvironmentsListMultiRolePoolInstanceMetricDefinitions");
      }
      // verify the required parameter 'instance' is set
      if (instance === undefined || instance === null) {
        throw new Error("Missing the required parameter 'instance' when calling appServiceEnvironmentsListMultiRolePoolInstanceMetricDefinitions");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling appServiceEnvironmentsListMultiRolePoolInstanceMetricDefinitions");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling appServiceEnvironmentsListMultiRolePoolInstanceMetricDefinitions");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'instance': instance,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResourceMetricDefinitionCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/multiRolePools/default/instances/{instance}/metricdefinitions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appServiceEnvironmentsListMultiRolePoolSkus operation.
     * @callback module:api/AppServiceEnvironmentsApi~appServiceEnvironmentsListMultiRolePoolSkusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SkuInfoCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get available SKUs for scaling a multi-role pool.
     * Description for Get available SKUs for scaling a multi-role pool.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the App Service Environment.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/AppServiceEnvironmentsApi~appServiceEnvironmentsListMultiRolePoolSkusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SkuInfoCollection}
     */
    appServiceEnvironmentsListMultiRolePoolSkus(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling appServiceEnvironmentsListMultiRolePoolSkus");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling appServiceEnvironmentsListMultiRolePoolSkus");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling appServiceEnvironmentsListMultiRolePoolSkus");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling appServiceEnvironmentsListMultiRolePoolSkus");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SkuInfoCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/multiRolePools/default/skus', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appServiceEnvironmentsListMultiRolePools operation.
     * @callback module:api/AppServiceEnvironmentsApi~appServiceEnvironmentsListMultiRolePoolsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WorkerPoolCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all multi-role pools.
     * Description for Get all multi-role pools.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the App Service Environment.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/AppServiceEnvironmentsApi~appServiceEnvironmentsListMultiRolePoolsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WorkerPoolCollection}
     */
    appServiceEnvironmentsListMultiRolePools(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling appServiceEnvironmentsListMultiRolePools");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling appServiceEnvironmentsListMultiRolePools");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling appServiceEnvironmentsListMultiRolePools");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling appServiceEnvironmentsListMultiRolePools");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WorkerPoolCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/multiRolePools', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appServiceEnvironmentsListMultiRoleUsages operation.
     * @callback module:api/AppServiceEnvironmentsApi~appServiceEnvironmentsListMultiRoleUsagesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UsageCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get usage metrics for a multi-role pool of an App Service Environment.
     * Description for Get usage metrics for a multi-role pool of an App Service Environment.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the App Service Environment.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/AppServiceEnvironmentsApi~appServiceEnvironmentsListMultiRoleUsagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UsageCollection}
     */
    appServiceEnvironmentsListMultiRoleUsages(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling appServiceEnvironmentsListMultiRoleUsages");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling appServiceEnvironmentsListMultiRoleUsages");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling appServiceEnvironmentsListMultiRoleUsages");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling appServiceEnvironmentsListMultiRoleUsages");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UsageCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/multiRolePools/default/usages', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appServiceEnvironmentsListOperations operation.
     * @callback module:api/AppServiceEnvironmentsApi~appServiceEnvironmentsListOperationsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AppServiceEnvironmentsListOperations200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all currently running operations on the App Service Environment.
     * Description for List all currently running operations on the App Service Environment.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the App Service Environment.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/AppServiceEnvironmentsApi~appServiceEnvironmentsListOperationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AppServiceEnvironmentsListOperations200ResponseInner>}
     */
    appServiceEnvironmentsListOperations(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling appServiceEnvironmentsListOperations");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling appServiceEnvironmentsListOperations");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling appServiceEnvironmentsListOperations");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling appServiceEnvironmentsListOperations");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [AppServiceEnvironmentsListOperations200ResponseInner];
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/operations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appServiceEnvironmentsListUsages operation.
     * @callback module:api/AppServiceEnvironmentsApi~appServiceEnvironmentsListUsagesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppServiceEnvironmentsListUsages200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get global usage metrics of an App Service Environment.
     * Description for Get global usage metrics of an App Service Environment.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the App Service Environment.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {Object} opts Optional parameters
     * @param {String} [filter] Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq 2014-01-01T00:00:00Z and endTime eq 2014-12-31T23:59:59Z and timeGrain eq duration'[Hour|Minute|Day]'.
     * @param {module:api/AppServiceEnvironmentsApi~appServiceEnvironmentsListUsagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppServiceEnvironmentsListUsages200Response}
     */
    appServiceEnvironmentsListUsages(resourceGroupName, name, subscriptionId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling appServiceEnvironmentsListUsages");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling appServiceEnvironmentsListUsages");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling appServiceEnvironmentsListUsages");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling appServiceEnvironmentsListUsages");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        '$filter': opts['filter'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppServiceEnvironmentsListUsages200Response;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/usages', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appServiceEnvironmentsListWebApps operation.
     * @callback module:api/AppServiceEnvironmentsApi~appServiceEnvironmentsListWebAppsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppServiceEnvironmentsChangeVnet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all apps in an App Service Environment.
     * Description for Get all apps in an App Service Environment.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the App Service Environment.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {Object} opts Optional parameters
     * @param {String} [propertiesToInclude] Comma separated list of app properties to include.
     * @param {module:api/AppServiceEnvironmentsApi~appServiceEnvironmentsListWebAppsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppServiceEnvironmentsChangeVnet200Response}
     */
    appServiceEnvironmentsListWebApps(resourceGroupName, name, subscriptionId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling appServiceEnvironmentsListWebApps");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling appServiceEnvironmentsListWebApps");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling appServiceEnvironmentsListWebApps");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling appServiceEnvironmentsListWebApps");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'propertiesToInclude': opts['propertiesToInclude'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppServiceEnvironmentsChangeVnet200Response;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/sites', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appServiceEnvironmentsListWebWorkerMetricDefinitions operation.
     * @callback module:api/AppServiceEnvironmentsApi~appServiceEnvironmentsListWebWorkerMetricDefinitionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResourceMetricDefinitionCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get metric definitions for a worker pool of an App Service Environment.
     * Description for Get metric definitions for a worker pool of an App Service Environment.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the App Service Environment.
     * @param {String} workerPoolName Name of the worker pool.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/AppServiceEnvironmentsApi~appServiceEnvironmentsListWebWorkerMetricDefinitionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResourceMetricDefinitionCollection}
     */
    appServiceEnvironmentsListWebWorkerMetricDefinitions(resourceGroupName, name, workerPoolName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling appServiceEnvironmentsListWebWorkerMetricDefinitions");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling appServiceEnvironmentsListWebWorkerMetricDefinitions");
      }
      // verify the required parameter 'workerPoolName' is set
      if (workerPoolName === undefined || workerPoolName === null) {
        throw new Error("Missing the required parameter 'workerPoolName' when calling appServiceEnvironmentsListWebWorkerMetricDefinitions");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling appServiceEnvironmentsListWebWorkerMetricDefinitions");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling appServiceEnvironmentsListWebWorkerMetricDefinitions");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'workerPoolName': workerPoolName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResourceMetricDefinitionCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/workerPools/{workerPoolName}/metricdefinitions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appServiceEnvironmentsListWebWorkerUsages operation.
     * @callback module:api/AppServiceEnvironmentsApi~appServiceEnvironmentsListWebWorkerUsagesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UsageCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get usage metrics for a worker pool of an App Service Environment.
     * Description for Get usage metrics for a worker pool of an App Service Environment.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the App Service Environment.
     * @param {String} workerPoolName Name of the worker pool.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/AppServiceEnvironmentsApi~appServiceEnvironmentsListWebWorkerUsagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UsageCollection}
     */
    appServiceEnvironmentsListWebWorkerUsages(resourceGroupName, name, workerPoolName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling appServiceEnvironmentsListWebWorkerUsages");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling appServiceEnvironmentsListWebWorkerUsages");
      }
      // verify the required parameter 'workerPoolName' is set
      if (workerPoolName === undefined || workerPoolName === null) {
        throw new Error("Missing the required parameter 'workerPoolName' when calling appServiceEnvironmentsListWebWorkerUsages");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling appServiceEnvironmentsListWebWorkerUsages");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling appServiceEnvironmentsListWebWorkerUsages");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'workerPoolName': workerPoolName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UsageCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/workerPools/{workerPoolName}/usages', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appServiceEnvironmentsListWorkerPoolInstanceMetricDefinitions operation.
     * @callback module:api/AppServiceEnvironmentsApi~appServiceEnvironmentsListWorkerPoolInstanceMetricDefinitionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResourceMetricDefinitionCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get metric definitions for a specific instance of a worker pool of an App Service Environment.
     * Description for Get metric definitions for a specific instance of a worker pool of an App Service Environment.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the App Service Environment.
     * @param {String} workerPoolName Name of the worker pool.
     * @param {String} instance Name of the instance in the worker pool.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/AppServiceEnvironmentsApi~appServiceEnvironmentsListWorkerPoolInstanceMetricDefinitionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResourceMetricDefinitionCollection}
     */
    appServiceEnvironmentsListWorkerPoolInstanceMetricDefinitions(resourceGroupName, name, workerPoolName, instance, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling appServiceEnvironmentsListWorkerPoolInstanceMetricDefinitions");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling appServiceEnvironmentsListWorkerPoolInstanceMetricDefinitions");
      }
      // verify the required parameter 'workerPoolName' is set
      if (workerPoolName === undefined || workerPoolName === null) {
        throw new Error("Missing the required parameter 'workerPoolName' when calling appServiceEnvironmentsListWorkerPoolInstanceMetricDefinitions");
      }
      // verify the required parameter 'instance' is set
      if (instance === undefined || instance === null) {
        throw new Error("Missing the required parameter 'instance' when calling appServiceEnvironmentsListWorkerPoolInstanceMetricDefinitions");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling appServiceEnvironmentsListWorkerPoolInstanceMetricDefinitions");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling appServiceEnvironmentsListWorkerPoolInstanceMetricDefinitions");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'workerPoolName': workerPoolName,
        'instance': instance,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResourceMetricDefinitionCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/workerPools/{workerPoolName}/instances/{instance}/metricdefinitions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appServiceEnvironmentsListWorkerPoolSkus operation.
     * @callback module:api/AppServiceEnvironmentsApi~appServiceEnvironmentsListWorkerPoolSkusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SkuInfoCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get available SKUs for scaling a worker pool.
     * Description for Get available SKUs for scaling a worker pool.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the App Service Environment.
     * @param {String} workerPoolName Name of the worker pool.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/AppServiceEnvironmentsApi~appServiceEnvironmentsListWorkerPoolSkusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SkuInfoCollection}
     */
    appServiceEnvironmentsListWorkerPoolSkus(resourceGroupName, name, workerPoolName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling appServiceEnvironmentsListWorkerPoolSkus");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling appServiceEnvironmentsListWorkerPoolSkus");
      }
      // verify the required parameter 'workerPoolName' is set
      if (workerPoolName === undefined || workerPoolName === null) {
        throw new Error("Missing the required parameter 'workerPoolName' when calling appServiceEnvironmentsListWorkerPoolSkus");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling appServiceEnvironmentsListWorkerPoolSkus");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling appServiceEnvironmentsListWorkerPoolSkus");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'workerPoolName': workerPoolName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SkuInfoCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/workerPools/{workerPoolName}/skus', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appServiceEnvironmentsListWorkerPools operation.
     * @callback module:api/AppServiceEnvironmentsApi~appServiceEnvironmentsListWorkerPoolsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WorkerPoolCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all worker pools of an App Service Environment.
     * Description for Get all worker pools of an App Service Environment.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the App Service Environment.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/AppServiceEnvironmentsApi~appServiceEnvironmentsListWorkerPoolsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WorkerPoolCollection}
     */
    appServiceEnvironmentsListWorkerPools(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling appServiceEnvironmentsListWorkerPools");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling appServiceEnvironmentsListWorkerPools");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling appServiceEnvironmentsListWorkerPools");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling appServiceEnvironmentsListWorkerPools");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WorkerPoolCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/workerPools', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appServiceEnvironmentsReboot operation.
     * @callback module:api/AppServiceEnvironmentsApi~appServiceEnvironmentsRebootCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reboot all machines in an App Service Environment.
     * Description for Reboot all machines in an App Service Environment.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the App Service Environment.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/AppServiceEnvironmentsApi~appServiceEnvironmentsRebootCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appServiceEnvironmentsReboot(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling appServiceEnvironmentsReboot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling appServiceEnvironmentsReboot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling appServiceEnvironmentsReboot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling appServiceEnvironmentsReboot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/reboot', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appServiceEnvironmentsResume operation.
     * @callback module:api/AppServiceEnvironmentsApi~appServiceEnvironmentsResumeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppServiceEnvironmentsChangeVnet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Resume an App Service Environment.
     * Description for Resume an App Service Environment.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the App Service Environment.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/AppServiceEnvironmentsApi~appServiceEnvironmentsResumeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppServiceEnvironmentsChangeVnet200Response}
     */
    appServiceEnvironmentsResume(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling appServiceEnvironmentsResume");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling appServiceEnvironmentsResume");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling appServiceEnvironmentsResume");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling appServiceEnvironmentsResume");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppServiceEnvironmentsChangeVnet200Response;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/resume', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appServiceEnvironmentsSuspend operation.
     * @callback module:api/AppServiceEnvironmentsApi~appServiceEnvironmentsSuspendCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppServiceEnvironmentsChangeVnet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Suspend an App Service Environment.
     * Description for Suspend an App Service Environment.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the App Service Environment.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/AppServiceEnvironmentsApi~appServiceEnvironmentsSuspendCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppServiceEnvironmentsChangeVnet200Response}
     */
    appServiceEnvironmentsSuspend(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling appServiceEnvironmentsSuspend");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling appServiceEnvironmentsSuspend");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling appServiceEnvironmentsSuspend");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling appServiceEnvironmentsSuspend");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppServiceEnvironmentsChangeVnet200Response;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/suspend', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appServiceEnvironmentsUpdate operation.
     * @callback module:api/AppServiceEnvironmentsApi~appServiceEnvironmentsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppServiceEnvironmentResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update an App Service Environment.
     * Description for Create or update an App Service Environment.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the App Service Environment.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:model/AppServiceEnvironmentPatchResource} hostingEnvironmentEnvelope Configuration details of the App Service Environment.
     * @param {module:api/AppServiceEnvironmentsApi~appServiceEnvironmentsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppServiceEnvironmentResource}
     */
    appServiceEnvironmentsUpdate(resourceGroupName, name, subscriptionId, apiVersion, hostingEnvironmentEnvelope, callback) {
      let postBody = hostingEnvironmentEnvelope;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling appServiceEnvironmentsUpdate");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling appServiceEnvironmentsUpdate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling appServiceEnvironmentsUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling appServiceEnvironmentsUpdate");
      }
      // verify the required parameter 'hostingEnvironmentEnvelope' is set
      if (hostingEnvironmentEnvelope === undefined || hostingEnvironmentEnvelope === null) {
        throw new Error("Missing the required parameter 'hostingEnvironmentEnvelope' when calling appServiceEnvironmentsUpdate");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AppServiceEnvironmentResource;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appServiceEnvironmentsUpdateMultiRolePool operation.
     * @callback module:api/AppServiceEnvironmentsApi~appServiceEnvironmentsUpdateMultiRolePoolCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WorkerPoolResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update a multi-role pool.
     * Description for Create or update a multi-role pool.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the App Service Environment.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:model/WorkerPoolResource} multiRolePoolEnvelope Properties of the multi-role pool.
     * @param {module:api/AppServiceEnvironmentsApi~appServiceEnvironmentsUpdateMultiRolePoolCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WorkerPoolResource}
     */
    appServiceEnvironmentsUpdateMultiRolePool(resourceGroupName, name, subscriptionId, apiVersion, multiRolePoolEnvelope, callback) {
      let postBody = multiRolePoolEnvelope;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling appServiceEnvironmentsUpdateMultiRolePool");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling appServiceEnvironmentsUpdateMultiRolePool");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling appServiceEnvironmentsUpdateMultiRolePool");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling appServiceEnvironmentsUpdateMultiRolePool");
      }
      // verify the required parameter 'multiRolePoolEnvelope' is set
      if (multiRolePoolEnvelope === undefined || multiRolePoolEnvelope === null) {
        throw new Error("Missing the required parameter 'multiRolePoolEnvelope' when calling appServiceEnvironmentsUpdateMultiRolePool");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = WorkerPoolResource;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/multiRolePools/default', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appServiceEnvironmentsUpdateWorkerPool operation.
     * @callback module:api/AppServiceEnvironmentsApi~appServiceEnvironmentsUpdateWorkerPoolCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WorkerPoolResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update a worker pool.
     * Description for Create or update a worker pool.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the App Service Environment.
     * @param {String} workerPoolName Name of the worker pool.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:model/WorkerPoolResource} workerPoolEnvelope Properties of the worker pool.
     * @param {module:api/AppServiceEnvironmentsApi~appServiceEnvironmentsUpdateWorkerPoolCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WorkerPoolResource}
     */
    appServiceEnvironmentsUpdateWorkerPool(resourceGroupName, name, workerPoolName, subscriptionId, apiVersion, workerPoolEnvelope, callback) {
      let postBody = workerPoolEnvelope;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling appServiceEnvironmentsUpdateWorkerPool");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling appServiceEnvironmentsUpdateWorkerPool");
      }
      // verify the required parameter 'workerPoolName' is set
      if (workerPoolName === undefined || workerPoolName === null) {
        throw new Error("Missing the required parameter 'workerPoolName' when calling appServiceEnvironmentsUpdateWorkerPool");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling appServiceEnvironmentsUpdateWorkerPool");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling appServiceEnvironmentsUpdateWorkerPool");
      }
      // verify the required parameter 'workerPoolEnvelope' is set
      if (workerPoolEnvelope === undefined || workerPoolEnvelope === null) {
        throw new Error("Missing the required parameter 'workerPoolEnvelope' when calling appServiceEnvironmentsUpdateWorkerPool");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'workerPoolName': workerPoolName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = WorkerPoolResource;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/workerPools/{workerPoolName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
