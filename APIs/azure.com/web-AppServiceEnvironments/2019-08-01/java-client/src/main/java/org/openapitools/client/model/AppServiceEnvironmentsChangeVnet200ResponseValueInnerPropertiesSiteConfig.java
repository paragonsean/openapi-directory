/*
 * AppServiceEnvironments API Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfigApiDefinition;
import org.openapitools.client.model.AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfigApiManagementConfig;
import org.openapitools.client.model.AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfigAppSettingsInner;
import org.openapitools.client.model.AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfigAutoHealRules;
import org.openapitools.client.model.AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfigConnectionStringsInner;
import org.openapitools.client.model.AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfigCors;
import org.openapitools.client.model.AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfigExperiments;
import org.openapitools.client.model.AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfigHandlerMappingsInner;
import org.openapitools.client.model.AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfigIpSecurityRestrictionsInner;
import org.openapitools.client.model.AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfigLimits;
import org.openapitools.client.model.AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfigMachineKey;
import org.openapitools.client.model.AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfigPush;
import org.openapitools.client.model.AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfigVirtualApplicationsInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Configuration of an App Service app.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:58:51.419617-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig {
  public static final String SERIALIZED_NAME_ALWAYS_ON = "alwaysOn";
  @SerializedName(SERIALIZED_NAME_ALWAYS_ON)
  private Boolean alwaysOn;

  public static final String SERIALIZED_NAME_API_DEFINITION = "apiDefinition";
  @SerializedName(SERIALIZED_NAME_API_DEFINITION)
  private AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfigApiDefinition apiDefinition;

  public static final String SERIALIZED_NAME_API_MANAGEMENT_CONFIG = "apiManagementConfig";
  @SerializedName(SERIALIZED_NAME_API_MANAGEMENT_CONFIG)
  private AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfigApiManagementConfig apiManagementConfig;

  public static final String SERIALIZED_NAME_APP_COMMAND_LINE = "appCommandLine";
  @SerializedName(SERIALIZED_NAME_APP_COMMAND_LINE)
  private String appCommandLine;

  public static final String SERIALIZED_NAME_APP_SETTINGS = "appSettings";
  @SerializedName(SERIALIZED_NAME_APP_SETTINGS)
  private List<AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfigAppSettingsInner> appSettings = new ArrayList<>();

  public static final String SERIALIZED_NAME_AUTO_HEAL_ENABLED = "autoHealEnabled";
  @SerializedName(SERIALIZED_NAME_AUTO_HEAL_ENABLED)
  private Boolean autoHealEnabled;

  public static final String SERIALIZED_NAME_AUTO_HEAL_RULES = "autoHealRules";
  @SerializedName(SERIALIZED_NAME_AUTO_HEAL_RULES)
  private AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfigAutoHealRules autoHealRules;

  public static final String SERIALIZED_NAME_AUTO_SWAP_SLOT_NAME = "autoSwapSlotName";
  @SerializedName(SERIALIZED_NAME_AUTO_SWAP_SLOT_NAME)
  private String autoSwapSlotName;

  public static final String SERIALIZED_NAME_CONNECTION_STRINGS = "connectionStrings";
  @SerializedName(SERIALIZED_NAME_CONNECTION_STRINGS)
  private List<AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfigConnectionStringsInner> connectionStrings = new ArrayList<>();

  public static final String SERIALIZED_NAME_CORS = "cors";
  @SerializedName(SERIALIZED_NAME_CORS)
  private AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfigCors cors;

  public static final String SERIALIZED_NAME_DEFAULT_DOCUMENTS = "defaultDocuments";
  @SerializedName(SERIALIZED_NAME_DEFAULT_DOCUMENTS)
  private List<String> defaultDocuments = new ArrayList<>();

  public static final String SERIALIZED_NAME_DETAILED_ERROR_LOGGING_ENABLED = "detailedErrorLoggingEnabled";
  @SerializedName(SERIALIZED_NAME_DETAILED_ERROR_LOGGING_ENABLED)
  private Boolean detailedErrorLoggingEnabled;

  public static final String SERIALIZED_NAME_DOCUMENT_ROOT = "documentRoot";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_ROOT)
  private String documentRoot;

  public static final String SERIALIZED_NAME_EXPERIMENTS = "experiments";
  @SerializedName(SERIALIZED_NAME_EXPERIMENTS)
  private AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfigExperiments experiments;

  /**
   * State of FTP / FTPS service
   */
  @JsonAdapter(FtpsStateEnum.Adapter.class)
  public enum FtpsStateEnum {
    ALL_ALLOWED("AllAllowed"),
    
    FTPS_ONLY("FtpsOnly"),
    
    DISABLED("Disabled");

    private String value;

    FtpsStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FtpsStateEnum fromValue(String value) {
      for (FtpsStateEnum b : FtpsStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FtpsStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FtpsStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FtpsStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FtpsStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FtpsStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FTPS_STATE = "ftpsState";
  @SerializedName(SERIALIZED_NAME_FTPS_STATE)
  private FtpsStateEnum ftpsState;

  public static final String SERIALIZED_NAME_HANDLER_MAPPINGS = "handlerMappings";
  @SerializedName(SERIALIZED_NAME_HANDLER_MAPPINGS)
  private List<AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfigHandlerMappingsInner> handlerMappings = new ArrayList<>();

  public static final String SERIALIZED_NAME_HEALTH_CHECK_PATH = "healthCheckPath";
  @SerializedName(SERIALIZED_NAME_HEALTH_CHECK_PATH)
  private String healthCheckPath;

  public static final String SERIALIZED_NAME_HTTP20_ENABLED = "http20Enabled";
  @SerializedName(SERIALIZED_NAME_HTTP20_ENABLED)
  private Boolean http20Enabled = true;

  public static final String SERIALIZED_NAME_HTTP_LOGGING_ENABLED = "httpLoggingEnabled";
  @SerializedName(SERIALIZED_NAME_HTTP_LOGGING_ENABLED)
  private Boolean httpLoggingEnabled;

  public static final String SERIALIZED_NAME_IP_SECURITY_RESTRICTIONS = "ipSecurityRestrictions";
  @SerializedName(SERIALIZED_NAME_IP_SECURITY_RESTRICTIONS)
  private List<AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfigIpSecurityRestrictionsInner> ipSecurityRestrictions = new ArrayList<>();

  public static final String SERIALIZED_NAME_JAVA_CONTAINER = "javaContainer";
  @SerializedName(SERIALIZED_NAME_JAVA_CONTAINER)
  private String javaContainer;

  public static final String SERIALIZED_NAME_JAVA_CONTAINER_VERSION = "javaContainerVersion";
  @SerializedName(SERIALIZED_NAME_JAVA_CONTAINER_VERSION)
  private String javaContainerVersion;

  public static final String SERIALIZED_NAME_JAVA_VERSION = "javaVersion";
  @SerializedName(SERIALIZED_NAME_JAVA_VERSION)
  private String javaVersion;

  public static final String SERIALIZED_NAME_LIMITS = "limits";
  @SerializedName(SERIALIZED_NAME_LIMITS)
  private AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfigLimits limits;

  public static final String SERIALIZED_NAME_LINUX_FX_VERSION = "linuxFxVersion";
  @SerializedName(SERIALIZED_NAME_LINUX_FX_VERSION)
  private String linuxFxVersion;

  /**
   * Site load balancing.
   */
  @JsonAdapter(LoadBalancingEnum.Adapter.class)
  public enum LoadBalancingEnum {
    WEIGHTED_ROUND_ROBIN("WeightedRoundRobin"),
    
    LEAST_REQUESTS("LeastRequests"),
    
    LEAST_RESPONSE_TIME("LeastResponseTime"),
    
    WEIGHTED_TOTAL_TRAFFIC("WeightedTotalTraffic"),
    
    REQUEST_HASH("RequestHash");

    private String value;

    LoadBalancingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LoadBalancingEnum fromValue(String value) {
      for (LoadBalancingEnum b : LoadBalancingEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LoadBalancingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LoadBalancingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LoadBalancingEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LoadBalancingEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LoadBalancingEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LOAD_BALANCING = "loadBalancing";
  @SerializedName(SERIALIZED_NAME_LOAD_BALANCING)
  private LoadBalancingEnum loadBalancing;

  public static final String SERIALIZED_NAME_LOCAL_MY_SQL_ENABLED = "localMySqlEnabled";
  @SerializedName(SERIALIZED_NAME_LOCAL_MY_SQL_ENABLED)
  private Boolean localMySqlEnabled = false;

  public static final String SERIALIZED_NAME_LOGS_DIRECTORY_SIZE_LIMIT = "logsDirectorySizeLimit";
  @SerializedName(SERIALIZED_NAME_LOGS_DIRECTORY_SIZE_LIMIT)
  private Integer logsDirectorySizeLimit;

  public static final String SERIALIZED_NAME_MACHINE_KEY = "machineKey";
  @SerializedName(SERIALIZED_NAME_MACHINE_KEY)
  private AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfigMachineKey machineKey;

  /**
   * Managed pipeline mode.
   */
  @JsonAdapter(ManagedPipelineModeEnum.Adapter.class)
  public enum ManagedPipelineModeEnum {
    INTEGRATED("Integrated"),
    
    CLASSIC("Classic");

    private String value;

    ManagedPipelineModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ManagedPipelineModeEnum fromValue(String value) {
      for (ManagedPipelineModeEnum b : ManagedPipelineModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ManagedPipelineModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ManagedPipelineModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ManagedPipelineModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ManagedPipelineModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ManagedPipelineModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MANAGED_PIPELINE_MODE = "managedPipelineMode";
  @SerializedName(SERIALIZED_NAME_MANAGED_PIPELINE_MODE)
  private ManagedPipelineModeEnum managedPipelineMode;

  public static final String SERIALIZED_NAME_MANAGED_SERVICE_IDENTITY_ID = "managedServiceIdentityId";
  @SerializedName(SERIALIZED_NAME_MANAGED_SERVICE_IDENTITY_ID)
  private Integer managedServiceIdentityId;

  /**
   * MinTlsVersion: configures the minimum version of TLS required for SSL requests
   */
  @JsonAdapter(MinTlsVersionEnum.Adapter.class)
  public enum MinTlsVersionEnum {
    _0("1.0"),
    
    _1("1.1"),
    
    _2("1.2");

    private String value;

    MinTlsVersionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MinTlsVersionEnum fromValue(String value) {
      for (MinTlsVersionEnum b : MinTlsVersionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MinTlsVersionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MinTlsVersionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MinTlsVersionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MinTlsVersionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MinTlsVersionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MIN_TLS_VERSION = "minTlsVersion";
  @SerializedName(SERIALIZED_NAME_MIN_TLS_VERSION)
  private MinTlsVersionEnum minTlsVersion;

  public static final String SERIALIZED_NAME_NET_FRAMEWORK_VERSION = "netFrameworkVersion";
  @SerializedName(SERIALIZED_NAME_NET_FRAMEWORK_VERSION)
  private String netFrameworkVersion = "v4.6";

  public static final String SERIALIZED_NAME_NODE_VERSION = "nodeVersion";
  @SerializedName(SERIALIZED_NAME_NODE_VERSION)
  private String nodeVersion;

  public static final String SERIALIZED_NAME_NUMBER_OF_WORKERS = "numberOfWorkers";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_WORKERS)
  private Integer numberOfWorkers;

  public static final String SERIALIZED_NAME_PHP_VERSION = "phpVersion";
  @SerializedName(SERIALIZED_NAME_PHP_VERSION)
  private String phpVersion;

  public static final String SERIALIZED_NAME_PRE_WARMED_INSTANCE_COUNT = "preWarmedInstanceCount";
  @SerializedName(SERIALIZED_NAME_PRE_WARMED_INSTANCE_COUNT)
  private Integer preWarmedInstanceCount;

  public static final String SERIALIZED_NAME_PUBLISHING_USERNAME = "publishingUsername";
  @SerializedName(SERIALIZED_NAME_PUBLISHING_USERNAME)
  private String publishingUsername;

  public static final String SERIALIZED_NAME_PUSH = "push";
  @SerializedName(SERIALIZED_NAME_PUSH)
  private AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfigPush push;

  public static final String SERIALIZED_NAME_PYTHON_VERSION = "pythonVersion";
  @SerializedName(SERIALIZED_NAME_PYTHON_VERSION)
  private String pythonVersion;

  public static final String SERIALIZED_NAME_REMOTE_DEBUGGING_ENABLED = "remoteDebuggingEnabled";
  @SerializedName(SERIALIZED_NAME_REMOTE_DEBUGGING_ENABLED)
  private Boolean remoteDebuggingEnabled;

  public static final String SERIALIZED_NAME_REMOTE_DEBUGGING_VERSION = "remoteDebuggingVersion";
  @SerializedName(SERIALIZED_NAME_REMOTE_DEBUGGING_VERSION)
  private String remoteDebuggingVersion;

  public static final String SERIALIZED_NAME_REQUEST_TRACING_ENABLED = "requestTracingEnabled";
  @SerializedName(SERIALIZED_NAME_REQUEST_TRACING_ENABLED)
  private Boolean requestTracingEnabled;

  public static final String SERIALIZED_NAME_REQUEST_TRACING_EXPIRATION_TIME = "requestTracingExpirationTime";
  @SerializedName(SERIALIZED_NAME_REQUEST_TRACING_EXPIRATION_TIME)
  private OffsetDateTime requestTracingExpirationTime;

  public static final String SERIALIZED_NAME_SCM_IP_SECURITY_RESTRICTIONS = "scmIpSecurityRestrictions";
  @SerializedName(SERIALIZED_NAME_SCM_IP_SECURITY_RESTRICTIONS)
  private List<AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfigIpSecurityRestrictionsInner> scmIpSecurityRestrictions = new ArrayList<>();

  public static final String SERIALIZED_NAME_SCM_IP_SECURITY_RESTRICTIONS_USE_MAIN = "scmIpSecurityRestrictionsUseMain";
  @SerializedName(SERIALIZED_NAME_SCM_IP_SECURITY_RESTRICTIONS_USE_MAIN)
  private Boolean scmIpSecurityRestrictionsUseMain;

  /**
   * SCM type.
   */
  @JsonAdapter(ScmTypeEnum.Adapter.class)
  public enum ScmTypeEnum {
    NONE("None"),
    
    DROPBOX("Dropbox"),
    
    TFS("Tfs"),
    
    LOCAL_GIT("LocalGit"),
    
    GIT_HUB("GitHub"),
    
    CODE_PLEX_GIT("CodePlexGit"),
    
    CODE_PLEX_HG("CodePlexHg"),
    
    BITBUCKET_GIT("BitbucketGit"),
    
    BITBUCKET_HG("BitbucketHg"),
    
    EXTERNAL_GIT("ExternalGit"),
    
    EXTERNAL_HG("ExternalHg"),
    
    ONE_DRIVE("OneDrive"),
    
    VSO("VSO"),
    
    VSTSRM("VSTSRM");

    private String value;

    ScmTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ScmTypeEnum fromValue(String value) {
      for (ScmTypeEnum b : ScmTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ScmTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ScmTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ScmTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ScmTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ScmTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SCM_TYPE = "scmType";
  @SerializedName(SERIALIZED_NAME_SCM_TYPE)
  private ScmTypeEnum scmType;

  public static final String SERIALIZED_NAME_TRACING_OPTIONS = "tracingOptions";
  @SerializedName(SERIALIZED_NAME_TRACING_OPTIONS)
  private String tracingOptions;

  public static final String SERIALIZED_NAME_USE32_BIT_WORKER_PROCESS = "use32BitWorkerProcess";
  @SerializedName(SERIALIZED_NAME_USE32_BIT_WORKER_PROCESS)
  private Boolean use32BitWorkerProcess;

  public static final String SERIALIZED_NAME_VIRTUAL_APPLICATIONS = "virtualApplications";
  @SerializedName(SERIALIZED_NAME_VIRTUAL_APPLICATIONS)
  private List<AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfigVirtualApplicationsInner> virtualApplications = new ArrayList<>();

  public static final String SERIALIZED_NAME_VNET_NAME = "vnetName";
  @SerializedName(SERIALIZED_NAME_VNET_NAME)
  private String vnetName;

  public static final String SERIALIZED_NAME_WEB_SOCKETS_ENABLED = "webSocketsEnabled";
  @SerializedName(SERIALIZED_NAME_WEB_SOCKETS_ENABLED)
  private Boolean webSocketsEnabled;

  public static final String SERIALIZED_NAME_WINDOWS_FX_VERSION = "windowsFxVersion";
  @SerializedName(SERIALIZED_NAME_WINDOWS_FX_VERSION)
  private String windowsFxVersion;

  public static final String SERIALIZED_NAME_X_MANAGED_SERVICE_IDENTITY_ID = "xManagedServiceIdentityId";
  @SerializedName(SERIALIZED_NAME_X_MANAGED_SERVICE_IDENTITY_ID)
  private Integer xManagedServiceIdentityId;

  public AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig() {
  }

  public AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig alwaysOn(Boolean alwaysOn) {
    this.alwaysOn = alwaysOn;
    return this;
  }

  /**
   * &lt;code&gt;true&lt;/code&gt; if Always On is enabled; otherwise, &lt;code&gt;false&lt;/code&gt;.
   * @return alwaysOn
   */
  @javax.annotation.Nullable
  public Boolean getAlwaysOn() {
    return alwaysOn;
  }

  public void setAlwaysOn(Boolean alwaysOn) {
    this.alwaysOn = alwaysOn;
  }


  public AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig apiDefinition(AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfigApiDefinition apiDefinition) {
    this.apiDefinition = apiDefinition;
    return this;
  }

  /**
   * Get apiDefinition
   * @return apiDefinition
   */
  @javax.annotation.Nullable
  public AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfigApiDefinition getApiDefinition() {
    return apiDefinition;
  }

  public void setApiDefinition(AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfigApiDefinition apiDefinition) {
    this.apiDefinition = apiDefinition;
  }


  public AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig apiManagementConfig(AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfigApiManagementConfig apiManagementConfig) {
    this.apiManagementConfig = apiManagementConfig;
    return this;
  }

  /**
   * Get apiManagementConfig
   * @return apiManagementConfig
   */
  @javax.annotation.Nullable
  public AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfigApiManagementConfig getApiManagementConfig() {
    return apiManagementConfig;
  }

  public void setApiManagementConfig(AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfigApiManagementConfig apiManagementConfig) {
    this.apiManagementConfig = apiManagementConfig;
  }


  public AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig appCommandLine(String appCommandLine) {
    this.appCommandLine = appCommandLine;
    return this;
  }

  /**
   * App command line to launch.
   * @return appCommandLine
   */
  @javax.annotation.Nullable
  public String getAppCommandLine() {
    return appCommandLine;
  }

  public void setAppCommandLine(String appCommandLine) {
    this.appCommandLine = appCommandLine;
  }


  public AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig appSettings(List<AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfigAppSettingsInner> appSettings) {
    this.appSettings = appSettings;
    return this;
  }

  public AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig addAppSettingsItem(AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfigAppSettingsInner appSettingsItem) {
    if (this.appSettings == null) {
      this.appSettings = new ArrayList<>();
    }
    this.appSettings.add(appSettingsItem);
    return this;
  }

  /**
   * Application settings.
   * @return appSettings
   */
  @javax.annotation.Nullable
  public List<AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfigAppSettingsInner> getAppSettings() {
    return appSettings;
  }

  public void setAppSettings(List<AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfigAppSettingsInner> appSettings) {
    this.appSettings = appSettings;
  }


  public AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig autoHealEnabled(Boolean autoHealEnabled) {
    this.autoHealEnabled = autoHealEnabled;
    return this;
  }

  /**
   * &lt;code&gt;true&lt;/code&gt; if Auto Heal is enabled; otherwise, &lt;code&gt;false&lt;/code&gt;.
   * @return autoHealEnabled
   */
  @javax.annotation.Nullable
  public Boolean getAutoHealEnabled() {
    return autoHealEnabled;
  }

  public void setAutoHealEnabled(Boolean autoHealEnabled) {
    this.autoHealEnabled = autoHealEnabled;
  }


  public AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig autoHealRules(AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfigAutoHealRules autoHealRules) {
    this.autoHealRules = autoHealRules;
    return this;
  }

  /**
   * Get autoHealRules
   * @return autoHealRules
   */
  @javax.annotation.Nullable
  public AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfigAutoHealRules getAutoHealRules() {
    return autoHealRules;
  }

  public void setAutoHealRules(AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfigAutoHealRules autoHealRules) {
    this.autoHealRules = autoHealRules;
  }


  public AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig autoSwapSlotName(String autoSwapSlotName) {
    this.autoSwapSlotName = autoSwapSlotName;
    return this;
  }

  /**
   * Auto-swap slot name.
   * @return autoSwapSlotName
   */
  @javax.annotation.Nullable
  public String getAutoSwapSlotName() {
    return autoSwapSlotName;
  }

  public void setAutoSwapSlotName(String autoSwapSlotName) {
    this.autoSwapSlotName = autoSwapSlotName;
  }


  public AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig connectionStrings(List<AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfigConnectionStringsInner> connectionStrings) {
    this.connectionStrings = connectionStrings;
    return this;
  }

  public AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig addConnectionStringsItem(AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfigConnectionStringsInner connectionStringsItem) {
    if (this.connectionStrings == null) {
      this.connectionStrings = new ArrayList<>();
    }
    this.connectionStrings.add(connectionStringsItem);
    return this;
  }

  /**
   * Connection strings.
   * @return connectionStrings
   */
  @javax.annotation.Nullable
  public List<AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfigConnectionStringsInner> getConnectionStrings() {
    return connectionStrings;
  }

  public void setConnectionStrings(List<AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfigConnectionStringsInner> connectionStrings) {
    this.connectionStrings = connectionStrings;
  }


  public AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig cors(AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfigCors cors) {
    this.cors = cors;
    return this;
  }

  /**
   * Get cors
   * @return cors
   */
  @javax.annotation.Nullable
  public AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfigCors getCors() {
    return cors;
  }

  public void setCors(AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfigCors cors) {
    this.cors = cors;
  }


  public AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig defaultDocuments(List<String> defaultDocuments) {
    this.defaultDocuments = defaultDocuments;
    return this;
  }

  public AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig addDefaultDocumentsItem(String defaultDocumentsItem) {
    if (this.defaultDocuments == null) {
      this.defaultDocuments = new ArrayList<>();
    }
    this.defaultDocuments.add(defaultDocumentsItem);
    return this;
  }

  /**
   * Default documents.
   * @return defaultDocuments
   */
  @javax.annotation.Nullable
  public List<String> getDefaultDocuments() {
    return defaultDocuments;
  }

  public void setDefaultDocuments(List<String> defaultDocuments) {
    this.defaultDocuments = defaultDocuments;
  }


  public AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig detailedErrorLoggingEnabled(Boolean detailedErrorLoggingEnabled) {
    this.detailedErrorLoggingEnabled = detailedErrorLoggingEnabled;
    return this;
  }

  /**
   * &lt;code&gt;true&lt;/code&gt; if detailed error logging is enabled; otherwise, &lt;code&gt;false&lt;/code&gt;.
   * @return detailedErrorLoggingEnabled
   */
  @javax.annotation.Nullable
  public Boolean getDetailedErrorLoggingEnabled() {
    return detailedErrorLoggingEnabled;
  }

  public void setDetailedErrorLoggingEnabled(Boolean detailedErrorLoggingEnabled) {
    this.detailedErrorLoggingEnabled = detailedErrorLoggingEnabled;
  }


  public AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig documentRoot(String documentRoot) {
    this.documentRoot = documentRoot;
    return this;
  }

  /**
   * Document root.
   * @return documentRoot
   */
  @javax.annotation.Nullable
  public String getDocumentRoot() {
    return documentRoot;
  }

  public void setDocumentRoot(String documentRoot) {
    this.documentRoot = documentRoot;
  }


  public AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig experiments(AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfigExperiments experiments) {
    this.experiments = experiments;
    return this;
  }

  /**
   * Get experiments
   * @return experiments
   */
  @javax.annotation.Nullable
  public AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfigExperiments getExperiments() {
    return experiments;
  }

  public void setExperiments(AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfigExperiments experiments) {
    this.experiments = experiments;
  }


  public AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig ftpsState(FtpsStateEnum ftpsState) {
    this.ftpsState = ftpsState;
    return this;
  }

  /**
   * State of FTP / FTPS service
   * @return ftpsState
   */
  @javax.annotation.Nullable
  public FtpsStateEnum getFtpsState() {
    return ftpsState;
  }

  public void setFtpsState(FtpsStateEnum ftpsState) {
    this.ftpsState = ftpsState;
  }


  public AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig handlerMappings(List<AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfigHandlerMappingsInner> handlerMappings) {
    this.handlerMappings = handlerMappings;
    return this;
  }

  public AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig addHandlerMappingsItem(AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfigHandlerMappingsInner handlerMappingsItem) {
    if (this.handlerMappings == null) {
      this.handlerMappings = new ArrayList<>();
    }
    this.handlerMappings.add(handlerMappingsItem);
    return this;
  }

  /**
   * Handler mappings.
   * @return handlerMappings
   */
  @javax.annotation.Nullable
  public List<AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfigHandlerMappingsInner> getHandlerMappings() {
    return handlerMappings;
  }

  public void setHandlerMappings(List<AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfigHandlerMappingsInner> handlerMappings) {
    this.handlerMappings = handlerMappings;
  }


  public AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig healthCheckPath(String healthCheckPath) {
    this.healthCheckPath = healthCheckPath;
    return this;
  }

  /**
   * Health check path
   * @return healthCheckPath
   */
  @javax.annotation.Nullable
  public String getHealthCheckPath() {
    return healthCheckPath;
  }

  public void setHealthCheckPath(String healthCheckPath) {
    this.healthCheckPath = healthCheckPath;
  }


  public AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig http20Enabled(Boolean http20Enabled) {
    this.http20Enabled = http20Enabled;
    return this;
  }

  /**
   * Http20Enabled: configures a web site to allow clients to connect over http2.0
   * @return http20Enabled
   */
  @javax.annotation.Nullable
  public Boolean getHttp20Enabled() {
    return http20Enabled;
  }

  public void setHttp20Enabled(Boolean http20Enabled) {
    this.http20Enabled = http20Enabled;
  }


  public AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig httpLoggingEnabled(Boolean httpLoggingEnabled) {
    this.httpLoggingEnabled = httpLoggingEnabled;
    return this;
  }

  /**
   * &lt;code&gt;true&lt;/code&gt; if HTTP logging is enabled; otherwise, &lt;code&gt;false&lt;/code&gt;.
   * @return httpLoggingEnabled
   */
  @javax.annotation.Nullable
  public Boolean getHttpLoggingEnabled() {
    return httpLoggingEnabled;
  }

  public void setHttpLoggingEnabled(Boolean httpLoggingEnabled) {
    this.httpLoggingEnabled = httpLoggingEnabled;
  }


  public AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig ipSecurityRestrictions(List<AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfigIpSecurityRestrictionsInner> ipSecurityRestrictions) {
    this.ipSecurityRestrictions = ipSecurityRestrictions;
    return this;
  }

  public AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig addIpSecurityRestrictionsItem(AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfigIpSecurityRestrictionsInner ipSecurityRestrictionsItem) {
    if (this.ipSecurityRestrictions == null) {
      this.ipSecurityRestrictions = new ArrayList<>();
    }
    this.ipSecurityRestrictions.add(ipSecurityRestrictionsItem);
    return this;
  }

  /**
   * IP security restrictions for main.
   * @return ipSecurityRestrictions
   */
  @javax.annotation.Nullable
  public List<AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfigIpSecurityRestrictionsInner> getIpSecurityRestrictions() {
    return ipSecurityRestrictions;
  }

  public void setIpSecurityRestrictions(List<AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfigIpSecurityRestrictionsInner> ipSecurityRestrictions) {
    this.ipSecurityRestrictions = ipSecurityRestrictions;
  }


  public AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig javaContainer(String javaContainer) {
    this.javaContainer = javaContainer;
    return this;
  }

  /**
   * Java container.
   * @return javaContainer
   */
  @javax.annotation.Nullable
  public String getJavaContainer() {
    return javaContainer;
  }

  public void setJavaContainer(String javaContainer) {
    this.javaContainer = javaContainer;
  }


  public AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig javaContainerVersion(String javaContainerVersion) {
    this.javaContainerVersion = javaContainerVersion;
    return this;
  }

  /**
   * Java container version.
   * @return javaContainerVersion
   */
  @javax.annotation.Nullable
  public String getJavaContainerVersion() {
    return javaContainerVersion;
  }

  public void setJavaContainerVersion(String javaContainerVersion) {
    this.javaContainerVersion = javaContainerVersion;
  }


  public AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig javaVersion(String javaVersion) {
    this.javaVersion = javaVersion;
    return this;
  }

  /**
   * Java version.
   * @return javaVersion
   */
  @javax.annotation.Nullable
  public String getJavaVersion() {
    return javaVersion;
  }

  public void setJavaVersion(String javaVersion) {
    this.javaVersion = javaVersion;
  }


  public AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig limits(AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfigLimits limits) {
    this.limits = limits;
    return this;
  }

  /**
   * Get limits
   * @return limits
   */
  @javax.annotation.Nullable
  public AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfigLimits getLimits() {
    return limits;
  }

  public void setLimits(AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfigLimits limits) {
    this.limits = limits;
  }


  public AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig linuxFxVersion(String linuxFxVersion) {
    this.linuxFxVersion = linuxFxVersion;
    return this;
  }

  /**
   * Linux App Framework and version
   * @return linuxFxVersion
   */
  @javax.annotation.Nullable
  public String getLinuxFxVersion() {
    return linuxFxVersion;
  }

  public void setLinuxFxVersion(String linuxFxVersion) {
    this.linuxFxVersion = linuxFxVersion;
  }


  public AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig loadBalancing(LoadBalancingEnum loadBalancing) {
    this.loadBalancing = loadBalancing;
    return this;
  }

  /**
   * Site load balancing.
   * @return loadBalancing
   */
  @javax.annotation.Nullable
  public LoadBalancingEnum getLoadBalancing() {
    return loadBalancing;
  }

  public void setLoadBalancing(LoadBalancingEnum loadBalancing) {
    this.loadBalancing = loadBalancing;
  }


  public AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig localMySqlEnabled(Boolean localMySqlEnabled) {
    this.localMySqlEnabled = localMySqlEnabled;
    return this;
  }

  /**
   * &lt;code&gt;true&lt;/code&gt; to enable local MySQL; otherwise, &lt;code&gt;false&lt;/code&gt;.
   * @return localMySqlEnabled
   */
  @javax.annotation.Nullable
  public Boolean getLocalMySqlEnabled() {
    return localMySqlEnabled;
  }

  public void setLocalMySqlEnabled(Boolean localMySqlEnabled) {
    this.localMySqlEnabled = localMySqlEnabled;
  }


  public AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig logsDirectorySizeLimit(Integer logsDirectorySizeLimit) {
    this.logsDirectorySizeLimit = logsDirectorySizeLimit;
    return this;
  }

  /**
   * HTTP logs directory size limit.
   * @return logsDirectorySizeLimit
   */
  @javax.annotation.Nullable
  public Integer getLogsDirectorySizeLimit() {
    return logsDirectorySizeLimit;
  }

  public void setLogsDirectorySizeLimit(Integer logsDirectorySizeLimit) {
    this.logsDirectorySizeLimit = logsDirectorySizeLimit;
  }


  public AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig machineKey(AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfigMachineKey machineKey) {
    this.machineKey = machineKey;
    return this;
  }

  /**
   * Get machineKey
   * @return machineKey
   */
  @javax.annotation.Nullable
  public AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfigMachineKey getMachineKey() {
    return machineKey;
  }

  public void setMachineKey(AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfigMachineKey machineKey) {
    this.machineKey = machineKey;
  }


  public AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig managedPipelineMode(ManagedPipelineModeEnum managedPipelineMode) {
    this.managedPipelineMode = managedPipelineMode;
    return this;
  }

  /**
   * Managed pipeline mode.
   * @return managedPipelineMode
   */
  @javax.annotation.Nullable
  public ManagedPipelineModeEnum getManagedPipelineMode() {
    return managedPipelineMode;
  }

  public void setManagedPipelineMode(ManagedPipelineModeEnum managedPipelineMode) {
    this.managedPipelineMode = managedPipelineMode;
  }


  public AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig managedServiceIdentityId(Integer managedServiceIdentityId) {
    this.managedServiceIdentityId = managedServiceIdentityId;
    return this;
  }

  /**
   * Managed Service Identity Id
   * @return managedServiceIdentityId
   */
  @javax.annotation.Nullable
  public Integer getManagedServiceIdentityId() {
    return managedServiceIdentityId;
  }

  public void setManagedServiceIdentityId(Integer managedServiceIdentityId) {
    this.managedServiceIdentityId = managedServiceIdentityId;
  }


  public AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig minTlsVersion(MinTlsVersionEnum minTlsVersion) {
    this.minTlsVersion = minTlsVersion;
    return this;
  }

  /**
   * MinTlsVersion: configures the minimum version of TLS required for SSL requests
   * @return minTlsVersion
   */
  @javax.annotation.Nullable
  public MinTlsVersionEnum getMinTlsVersion() {
    return minTlsVersion;
  }

  public void setMinTlsVersion(MinTlsVersionEnum minTlsVersion) {
    this.minTlsVersion = minTlsVersion;
  }


  public AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig netFrameworkVersion(String netFrameworkVersion) {
    this.netFrameworkVersion = netFrameworkVersion;
    return this;
  }

  /**
   * .NET Framework version.
   * @return netFrameworkVersion
   */
  @javax.annotation.Nullable
  public String getNetFrameworkVersion() {
    return netFrameworkVersion;
  }

  public void setNetFrameworkVersion(String netFrameworkVersion) {
    this.netFrameworkVersion = netFrameworkVersion;
  }


  public AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig nodeVersion(String nodeVersion) {
    this.nodeVersion = nodeVersion;
    return this;
  }

  /**
   * Version of Node.js.
   * @return nodeVersion
   */
  @javax.annotation.Nullable
  public String getNodeVersion() {
    return nodeVersion;
  }

  public void setNodeVersion(String nodeVersion) {
    this.nodeVersion = nodeVersion;
  }


  public AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig numberOfWorkers(Integer numberOfWorkers) {
    this.numberOfWorkers = numberOfWorkers;
    return this;
  }

  /**
   * Number of workers.
   * @return numberOfWorkers
   */
  @javax.annotation.Nullable
  public Integer getNumberOfWorkers() {
    return numberOfWorkers;
  }

  public void setNumberOfWorkers(Integer numberOfWorkers) {
    this.numberOfWorkers = numberOfWorkers;
  }


  public AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig phpVersion(String phpVersion) {
    this.phpVersion = phpVersion;
    return this;
  }

  /**
   * Version of PHP.
   * @return phpVersion
   */
  @javax.annotation.Nullable
  public String getPhpVersion() {
    return phpVersion;
  }

  public void setPhpVersion(String phpVersion) {
    this.phpVersion = phpVersion;
  }


  public AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig preWarmedInstanceCount(Integer preWarmedInstanceCount) {
    this.preWarmedInstanceCount = preWarmedInstanceCount;
    return this;
  }

  /**
   * Number of preWarmed instances. This setting only applies to the Consumption and Elastic Plans
   * minimum: 0
   * maximum: 10
   * @return preWarmedInstanceCount
   */
  @javax.annotation.Nullable
  public Integer getPreWarmedInstanceCount() {
    return preWarmedInstanceCount;
  }

  public void setPreWarmedInstanceCount(Integer preWarmedInstanceCount) {
    this.preWarmedInstanceCount = preWarmedInstanceCount;
  }


  public AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig publishingUsername(String publishingUsername) {
    this.publishingUsername = publishingUsername;
    return this;
  }

  /**
   * Publishing user name.
   * @return publishingUsername
   */
  @javax.annotation.Nullable
  public String getPublishingUsername() {
    return publishingUsername;
  }

  public void setPublishingUsername(String publishingUsername) {
    this.publishingUsername = publishingUsername;
  }


  public AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig push(AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfigPush push) {
    this.push = push;
    return this;
  }

  /**
   * Get push
   * @return push
   */
  @javax.annotation.Nullable
  public AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfigPush getPush() {
    return push;
  }

  public void setPush(AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfigPush push) {
    this.push = push;
  }


  public AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig pythonVersion(String pythonVersion) {
    this.pythonVersion = pythonVersion;
    return this;
  }

  /**
   * Version of Python.
   * @return pythonVersion
   */
  @javax.annotation.Nullable
  public String getPythonVersion() {
    return pythonVersion;
  }

  public void setPythonVersion(String pythonVersion) {
    this.pythonVersion = pythonVersion;
  }


  public AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig remoteDebuggingEnabled(Boolean remoteDebuggingEnabled) {
    this.remoteDebuggingEnabled = remoteDebuggingEnabled;
    return this;
  }

  /**
   * &lt;code&gt;true&lt;/code&gt; if remote debugging is enabled; otherwise, &lt;code&gt;false&lt;/code&gt;.
   * @return remoteDebuggingEnabled
   */
  @javax.annotation.Nullable
  public Boolean getRemoteDebuggingEnabled() {
    return remoteDebuggingEnabled;
  }

  public void setRemoteDebuggingEnabled(Boolean remoteDebuggingEnabled) {
    this.remoteDebuggingEnabled = remoteDebuggingEnabled;
  }


  public AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig remoteDebuggingVersion(String remoteDebuggingVersion) {
    this.remoteDebuggingVersion = remoteDebuggingVersion;
    return this;
  }

  /**
   * Remote debugging version.
   * @return remoteDebuggingVersion
   */
  @javax.annotation.Nullable
  public String getRemoteDebuggingVersion() {
    return remoteDebuggingVersion;
  }

  public void setRemoteDebuggingVersion(String remoteDebuggingVersion) {
    this.remoteDebuggingVersion = remoteDebuggingVersion;
  }


  public AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig requestTracingEnabled(Boolean requestTracingEnabled) {
    this.requestTracingEnabled = requestTracingEnabled;
    return this;
  }

  /**
   * &lt;code&gt;true&lt;/code&gt; if request tracing is enabled; otherwise, &lt;code&gt;false&lt;/code&gt;.
   * @return requestTracingEnabled
   */
  @javax.annotation.Nullable
  public Boolean getRequestTracingEnabled() {
    return requestTracingEnabled;
  }

  public void setRequestTracingEnabled(Boolean requestTracingEnabled) {
    this.requestTracingEnabled = requestTracingEnabled;
  }


  public AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig requestTracingExpirationTime(OffsetDateTime requestTracingExpirationTime) {
    this.requestTracingExpirationTime = requestTracingExpirationTime;
    return this;
  }

  /**
   * Request tracing expiration time.
   * @return requestTracingExpirationTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getRequestTracingExpirationTime() {
    return requestTracingExpirationTime;
  }

  public void setRequestTracingExpirationTime(OffsetDateTime requestTracingExpirationTime) {
    this.requestTracingExpirationTime = requestTracingExpirationTime;
  }


  public AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig scmIpSecurityRestrictions(List<AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfigIpSecurityRestrictionsInner> scmIpSecurityRestrictions) {
    this.scmIpSecurityRestrictions = scmIpSecurityRestrictions;
    return this;
  }

  public AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig addScmIpSecurityRestrictionsItem(AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfigIpSecurityRestrictionsInner scmIpSecurityRestrictionsItem) {
    if (this.scmIpSecurityRestrictions == null) {
      this.scmIpSecurityRestrictions = new ArrayList<>();
    }
    this.scmIpSecurityRestrictions.add(scmIpSecurityRestrictionsItem);
    return this;
  }

  /**
   * IP security restrictions for scm.
   * @return scmIpSecurityRestrictions
   */
  @javax.annotation.Nullable
  public List<AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfigIpSecurityRestrictionsInner> getScmIpSecurityRestrictions() {
    return scmIpSecurityRestrictions;
  }

  public void setScmIpSecurityRestrictions(List<AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfigIpSecurityRestrictionsInner> scmIpSecurityRestrictions) {
    this.scmIpSecurityRestrictions = scmIpSecurityRestrictions;
  }


  public AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig scmIpSecurityRestrictionsUseMain(Boolean scmIpSecurityRestrictionsUseMain) {
    this.scmIpSecurityRestrictionsUseMain = scmIpSecurityRestrictionsUseMain;
    return this;
  }

  /**
   * IP security restrictions for scm to use main.
   * @return scmIpSecurityRestrictionsUseMain
   */
  @javax.annotation.Nullable
  public Boolean getScmIpSecurityRestrictionsUseMain() {
    return scmIpSecurityRestrictionsUseMain;
  }

  public void setScmIpSecurityRestrictionsUseMain(Boolean scmIpSecurityRestrictionsUseMain) {
    this.scmIpSecurityRestrictionsUseMain = scmIpSecurityRestrictionsUseMain;
  }


  public AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig scmType(ScmTypeEnum scmType) {
    this.scmType = scmType;
    return this;
  }

  /**
   * SCM type.
   * @return scmType
   */
  @javax.annotation.Nullable
  public ScmTypeEnum getScmType() {
    return scmType;
  }

  public void setScmType(ScmTypeEnum scmType) {
    this.scmType = scmType;
  }


  public AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig tracingOptions(String tracingOptions) {
    this.tracingOptions = tracingOptions;
    return this;
  }

  /**
   * Tracing options.
   * @return tracingOptions
   */
  @javax.annotation.Nullable
  public String getTracingOptions() {
    return tracingOptions;
  }

  public void setTracingOptions(String tracingOptions) {
    this.tracingOptions = tracingOptions;
  }


  public AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig use32BitWorkerProcess(Boolean use32BitWorkerProcess) {
    this.use32BitWorkerProcess = use32BitWorkerProcess;
    return this;
  }

  /**
   * &lt;code&gt;true&lt;/code&gt; to use 32-bit worker process; otherwise, &lt;code&gt;false&lt;/code&gt;.
   * @return use32BitWorkerProcess
   */
  @javax.annotation.Nullable
  public Boolean getUse32BitWorkerProcess() {
    return use32BitWorkerProcess;
  }

  public void setUse32BitWorkerProcess(Boolean use32BitWorkerProcess) {
    this.use32BitWorkerProcess = use32BitWorkerProcess;
  }


  public AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig virtualApplications(List<AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfigVirtualApplicationsInner> virtualApplications) {
    this.virtualApplications = virtualApplications;
    return this;
  }

  public AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig addVirtualApplicationsItem(AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfigVirtualApplicationsInner virtualApplicationsItem) {
    if (this.virtualApplications == null) {
      this.virtualApplications = new ArrayList<>();
    }
    this.virtualApplications.add(virtualApplicationsItem);
    return this;
  }

  /**
   * Virtual applications.
   * @return virtualApplications
   */
  @javax.annotation.Nullable
  public List<AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfigVirtualApplicationsInner> getVirtualApplications() {
    return virtualApplications;
  }

  public void setVirtualApplications(List<AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfigVirtualApplicationsInner> virtualApplications) {
    this.virtualApplications = virtualApplications;
  }


  public AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig vnetName(String vnetName) {
    this.vnetName = vnetName;
    return this;
  }

  /**
   * Virtual Network name.
   * @return vnetName
   */
  @javax.annotation.Nullable
  public String getVnetName() {
    return vnetName;
  }

  public void setVnetName(String vnetName) {
    this.vnetName = vnetName;
  }


  public AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig webSocketsEnabled(Boolean webSocketsEnabled) {
    this.webSocketsEnabled = webSocketsEnabled;
    return this;
  }

  /**
   * &lt;code&gt;true&lt;/code&gt; if WebSocket is enabled; otherwise, &lt;code&gt;false&lt;/code&gt;.
   * @return webSocketsEnabled
   */
  @javax.annotation.Nullable
  public Boolean getWebSocketsEnabled() {
    return webSocketsEnabled;
  }

  public void setWebSocketsEnabled(Boolean webSocketsEnabled) {
    this.webSocketsEnabled = webSocketsEnabled;
  }


  public AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig windowsFxVersion(String windowsFxVersion) {
    this.windowsFxVersion = windowsFxVersion;
    return this;
  }

  /**
   * Xenon App Framework and version
   * @return windowsFxVersion
   */
  @javax.annotation.Nullable
  public String getWindowsFxVersion() {
    return windowsFxVersion;
  }

  public void setWindowsFxVersion(String windowsFxVersion) {
    this.windowsFxVersion = windowsFxVersion;
  }


  public AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig xManagedServiceIdentityId(Integer xManagedServiceIdentityId) {
    this.xManagedServiceIdentityId = xManagedServiceIdentityId;
    return this;
  }

  /**
   * Explicit Managed Service Identity Id
   * @return xManagedServiceIdentityId
   */
  @javax.annotation.Nullable
  public Integer getxManagedServiceIdentityId() {
    return xManagedServiceIdentityId;
  }

  public void setxManagedServiceIdentityId(Integer xManagedServiceIdentityId) {
    this.xManagedServiceIdentityId = xManagedServiceIdentityId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig appServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig = (AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig) o;
    return Objects.equals(this.alwaysOn, appServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig.alwaysOn) &&
        Objects.equals(this.apiDefinition, appServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig.apiDefinition) &&
        Objects.equals(this.apiManagementConfig, appServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig.apiManagementConfig) &&
        Objects.equals(this.appCommandLine, appServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig.appCommandLine) &&
        Objects.equals(this.appSettings, appServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig.appSettings) &&
        Objects.equals(this.autoHealEnabled, appServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig.autoHealEnabled) &&
        Objects.equals(this.autoHealRules, appServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig.autoHealRules) &&
        Objects.equals(this.autoSwapSlotName, appServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig.autoSwapSlotName) &&
        Objects.equals(this.connectionStrings, appServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig.connectionStrings) &&
        Objects.equals(this.cors, appServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig.cors) &&
        Objects.equals(this.defaultDocuments, appServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig.defaultDocuments) &&
        Objects.equals(this.detailedErrorLoggingEnabled, appServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig.detailedErrorLoggingEnabled) &&
        Objects.equals(this.documentRoot, appServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig.documentRoot) &&
        Objects.equals(this.experiments, appServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig.experiments) &&
        Objects.equals(this.ftpsState, appServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig.ftpsState) &&
        Objects.equals(this.handlerMappings, appServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig.handlerMappings) &&
        Objects.equals(this.healthCheckPath, appServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig.healthCheckPath) &&
        Objects.equals(this.http20Enabled, appServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig.http20Enabled) &&
        Objects.equals(this.httpLoggingEnabled, appServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig.httpLoggingEnabled) &&
        Objects.equals(this.ipSecurityRestrictions, appServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig.ipSecurityRestrictions) &&
        Objects.equals(this.javaContainer, appServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig.javaContainer) &&
        Objects.equals(this.javaContainerVersion, appServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig.javaContainerVersion) &&
        Objects.equals(this.javaVersion, appServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig.javaVersion) &&
        Objects.equals(this.limits, appServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig.limits) &&
        Objects.equals(this.linuxFxVersion, appServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig.linuxFxVersion) &&
        Objects.equals(this.loadBalancing, appServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig.loadBalancing) &&
        Objects.equals(this.localMySqlEnabled, appServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig.localMySqlEnabled) &&
        Objects.equals(this.logsDirectorySizeLimit, appServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig.logsDirectorySizeLimit) &&
        Objects.equals(this.machineKey, appServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig.machineKey) &&
        Objects.equals(this.managedPipelineMode, appServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig.managedPipelineMode) &&
        Objects.equals(this.managedServiceIdentityId, appServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig.managedServiceIdentityId) &&
        Objects.equals(this.minTlsVersion, appServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig.minTlsVersion) &&
        Objects.equals(this.netFrameworkVersion, appServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig.netFrameworkVersion) &&
        Objects.equals(this.nodeVersion, appServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig.nodeVersion) &&
        Objects.equals(this.numberOfWorkers, appServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig.numberOfWorkers) &&
        Objects.equals(this.phpVersion, appServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig.phpVersion) &&
        Objects.equals(this.preWarmedInstanceCount, appServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig.preWarmedInstanceCount) &&
        Objects.equals(this.publishingUsername, appServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig.publishingUsername) &&
        Objects.equals(this.push, appServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig.push) &&
        Objects.equals(this.pythonVersion, appServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig.pythonVersion) &&
        Objects.equals(this.remoteDebuggingEnabled, appServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig.remoteDebuggingEnabled) &&
        Objects.equals(this.remoteDebuggingVersion, appServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig.remoteDebuggingVersion) &&
        Objects.equals(this.requestTracingEnabled, appServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig.requestTracingEnabled) &&
        Objects.equals(this.requestTracingExpirationTime, appServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig.requestTracingExpirationTime) &&
        Objects.equals(this.scmIpSecurityRestrictions, appServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig.scmIpSecurityRestrictions) &&
        Objects.equals(this.scmIpSecurityRestrictionsUseMain, appServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig.scmIpSecurityRestrictionsUseMain) &&
        Objects.equals(this.scmType, appServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig.scmType) &&
        Objects.equals(this.tracingOptions, appServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig.tracingOptions) &&
        Objects.equals(this.use32BitWorkerProcess, appServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig.use32BitWorkerProcess) &&
        Objects.equals(this.virtualApplications, appServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig.virtualApplications) &&
        Objects.equals(this.vnetName, appServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig.vnetName) &&
        Objects.equals(this.webSocketsEnabled, appServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig.webSocketsEnabled) &&
        Objects.equals(this.windowsFxVersion, appServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig.windowsFxVersion) &&
        Objects.equals(this.xManagedServiceIdentityId, appServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig.xManagedServiceIdentityId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(alwaysOn, apiDefinition, apiManagementConfig, appCommandLine, appSettings, autoHealEnabled, autoHealRules, autoSwapSlotName, connectionStrings, cors, defaultDocuments, detailedErrorLoggingEnabled, documentRoot, experiments, ftpsState, handlerMappings, healthCheckPath, http20Enabled, httpLoggingEnabled, ipSecurityRestrictions, javaContainer, javaContainerVersion, javaVersion, limits, linuxFxVersion, loadBalancing, localMySqlEnabled, logsDirectorySizeLimit, machineKey, managedPipelineMode, managedServiceIdentityId, minTlsVersion, netFrameworkVersion, nodeVersion, numberOfWorkers, phpVersion, preWarmedInstanceCount, publishingUsername, push, pythonVersion, remoteDebuggingEnabled, remoteDebuggingVersion, requestTracingEnabled, requestTracingExpirationTime, scmIpSecurityRestrictions, scmIpSecurityRestrictionsUseMain, scmType, tracingOptions, use32BitWorkerProcess, virtualApplications, vnetName, webSocketsEnabled, windowsFxVersion, xManagedServiceIdentityId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig {\n");
    sb.append("    alwaysOn: ").append(toIndentedString(alwaysOn)).append("\n");
    sb.append("    apiDefinition: ").append(toIndentedString(apiDefinition)).append("\n");
    sb.append("    apiManagementConfig: ").append(toIndentedString(apiManagementConfig)).append("\n");
    sb.append("    appCommandLine: ").append(toIndentedString(appCommandLine)).append("\n");
    sb.append("    appSettings: ").append(toIndentedString(appSettings)).append("\n");
    sb.append("    autoHealEnabled: ").append(toIndentedString(autoHealEnabled)).append("\n");
    sb.append("    autoHealRules: ").append(toIndentedString(autoHealRules)).append("\n");
    sb.append("    autoSwapSlotName: ").append(toIndentedString(autoSwapSlotName)).append("\n");
    sb.append("    connectionStrings: ").append(toIndentedString(connectionStrings)).append("\n");
    sb.append("    cors: ").append(toIndentedString(cors)).append("\n");
    sb.append("    defaultDocuments: ").append(toIndentedString(defaultDocuments)).append("\n");
    sb.append("    detailedErrorLoggingEnabled: ").append(toIndentedString(detailedErrorLoggingEnabled)).append("\n");
    sb.append("    documentRoot: ").append(toIndentedString(documentRoot)).append("\n");
    sb.append("    experiments: ").append(toIndentedString(experiments)).append("\n");
    sb.append("    ftpsState: ").append(toIndentedString(ftpsState)).append("\n");
    sb.append("    handlerMappings: ").append(toIndentedString(handlerMappings)).append("\n");
    sb.append("    healthCheckPath: ").append(toIndentedString(healthCheckPath)).append("\n");
    sb.append("    http20Enabled: ").append(toIndentedString(http20Enabled)).append("\n");
    sb.append("    httpLoggingEnabled: ").append(toIndentedString(httpLoggingEnabled)).append("\n");
    sb.append("    ipSecurityRestrictions: ").append(toIndentedString(ipSecurityRestrictions)).append("\n");
    sb.append("    javaContainer: ").append(toIndentedString(javaContainer)).append("\n");
    sb.append("    javaContainerVersion: ").append(toIndentedString(javaContainerVersion)).append("\n");
    sb.append("    javaVersion: ").append(toIndentedString(javaVersion)).append("\n");
    sb.append("    limits: ").append(toIndentedString(limits)).append("\n");
    sb.append("    linuxFxVersion: ").append(toIndentedString(linuxFxVersion)).append("\n");
    sb.append("    loadBalancing: ").append(toIndentedString(loadBalancing)).append("\n");
    sb.append("    localMySqlEnabled: ").append(toIndentedString(localMySqlEnabled)).append("\n");
    sb.append("    logsDirectorySizeLimit: ").append(toIndentedString(logsDirectorySizeLimit)).append("\n");
    sb.append("    machineKey: ").append(toIndentedString(machineKey)).append("\n");
    sb.append("    managedPipelineMode: ").append(toIndentedString(managedPipelineMode)).append("\n");
    sb.append("    managedServiceIdentityId: ").append(toIndentedString(managedServiceIdentityId)).append("\n");
    sb.append("    minTlsVersion: ").append(toIndentedString(minTlsVersion)).append("\n");
    sb.append("    netFrameworkVersion: ").append(toIndentedString(netFrameworkVersion)).append("\n");
    sb.append("    nodeVersion: ").append(toIndentedString(nodeVersion)).append("\n");
    sb.append("    numberOfWorkers: ").append(toIndentedString(numberOfWorkers)).append("\n");
    sb.append("    phpVersion: ").append(toIndentedString(phpVersion)).append("\n");
    sb.append("    preWarmedInstanceCount: ").append(toIndentedString(preWarmedInstanceCount)).append("\n");
    sb.append("    publishingUsername: ").append(toIndentedString(publishingUsername)).append("\n");
    sb.append("    push: ").append(toIndentedString(push)).append("\n");
    sb.append("    pythonVersion: ").append(toIndentedString(pythonVersion)).append("\n");
    sb.append("    remoteDebuggingEnabled: ").append(toIndentedString(remoteDebuggingEnabled)).append("\n");
    sb.append("    remoteDebuggingVersion: ").append(toIndentedString(remoteDebuggingVersion)).append("\n");
    sb.append("    requestTracingEnabled: ").append(toIndentedString(requestTracingEnabled)).append("\n");
    sb.append("    requestTracingExpirationTime: ").append(toIndentedString(requestTracingExpirationTime)).append("\n");
    sb.append("    scmIpSecurityRestrictions: ").append(toIndentedString(scmIpSecurityRestrictions)).append("\n");
    sb.append("    scmIpSecurityRestrictionsUseMain: ").append(toIndentedString(scmIpSecurityRestrictionsUseMain)).append("\n");
    sb.append("    scmType: ").append(toIndentedString(scmType)).append("\n");
    sb.append("    tracingOptions: ").append(toIndentedString(tracingOptions)).append("\n");
    sb.append("    use32BitWorkerProcess: ").append(toIndentedString(use32BitWorkerProcess)).append("\n");
    sb.append("    virtualApplications: ").append(toIndentedString(virtualApplications)).append("\n");
    sb.append("    vnetName: ").append(toIndentedString(vnetName)).append("\n");
    sb.append("    webSocketsEnabled: ").append(toIndentedString(webSocketsEnabled)).append("\n");
    sb.append("    windowsFxVersion: ").append(toIndentedString(windowsFxVersion)).append("\n");
    sb.append("    xManagedServiceIdentityId: ").append(toIndentedString(xManagedServiceIdentityId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("alwaysOn");
    openapiFields.add("apiDefinition");
    openapiFields.add("apiManagementConfig");
    openapiFields.add("appCommandLine");
    openapiFields.add("appSettings");
    openapiFields.add("autoHealEnabled");
    openapiFields.add("autoHealRules");
    openapiFields.add("autoSwapSlotName");
    openapiFields.add("connectionStrings");
    openapiFields.add("cors");
    openapiFields.add("defaultDocuments");
    openapiFields.add("detailedErrorLoggingEnabled");
    openapiFields.add("documentRoot");
    openapiFields.add("experiments");
    openapiFields.add("ftpsState");
    openapiFields.add("handlerMappings");
    openapiFields.add("healthCheckPath");
    openapiFields.add("http20Enabled");
    openapiFields.add("httpLoggingEnabled");
    openapiFields.add("ipSecurityRestrictions");
    openapiFields.add("javaContainer");
    openapiFields.add("javaContainerVersion");
    openapiFields.add("javaVersion");
    openapiFields.add("limits");
    openapiFields.add("linuxFxVersion");
    openapiFields.add("loadBalancing");
    openapiFields.add("localMySqlEnabled");
    openapiFields.add("logsDirectorySizeLimit");
    openapiFields.add("machineKey");
    openapiFields.add("managedPipelineMode");
    openapiFields.add("managedServiceIdentityId");
    openapiFields.add("minTlsVersion");
    openapiFields.add("netFrameworkVersion");
    openapiFields.add("nodeVersion");
    openapiFields.add("numberOfWorkers");
    openapiFields.add("phpVersion");
    openapiFields.add("preWarmedInstanceCount");
    openapiFields.add("publishingUsername");
    openapiFields.add("push");
    openapiFields.add("pythonVersion");
    openapiFields.add("remoteDebuggingEnabled");
    openapiFields.add("remoteDebuggingVersion");
    openapiFields.add("requestTracingEnabled");
    openapiFields.add("requestTracingExpirationTime");
    openapiFields.add("scmIpSecurityRestrictions");
    openapiFields.add("scmIpSecurityRestrictionsUseMain");
    openapiFields.add("scmType");
    openapiFields.add("tracingOptions");
    openapiFields.add("use32BitWorkerProcess");
    openapiFields.add("virtualApplications");
    openapiFields.add("vnetName");
    openapiFields.add("webSocketsEnabled");
    openapiFields.add("windowsFxVersion");
    openapiFields.add("xManagedServiceIdentityId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig is not found in the empty JSON string", AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `apiDefinition`
      if (jsonObj.get("apiDefinition") != null && !jsonObj.get("apiDefinition").isJsonNull()) {
        AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfigApiDefinition.validateJsonElement(jsonObj.get("apiDefinition"));
      }
      // validate the optional field `apiManagementConfig`
      if (jsonObj.get("apiManagementConfig") != null && !jsonObj.get("apiManagementConfig").isJsonNull()) {
        AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfigApiManagementConfig.validateJsonElement(jsonObj.get("apiManagementConfig"));
      }
      if ((jsonObj.get("appCommandLine") != null && !jsonObj.get("appCommandLine").isJsonNull()) && !jsonObj.get("appCommandLine").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `appCommandLine` to be a primitive type in the JSON string but got `%s`", jsonObj.get("appCommandLine").toString()));
      }
      if (jsonObj.get("appSettings") != null && !jsonObj.get("appSettings").isJsonNull()) {
        JsonArray jsonArrayappSettings = jsonObj.getAsJsonArray("appSettings");
        if (jsonArrayappSettings != null) {
          // ensure the json data is an array
          if (!jsonObj.get("appSettings").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `appSettings` to be an array in the JSON string but got `%s`", jsonObj.get("appSettings").toString()));
          }

          // validate the optional field `appSettings` (array)
          for (int i = 0; i < jsonArrayappSettings.size(); i++) {
            AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfigAppSettingsInner.validateJsonElement(jsonArrayappSettings.get(i));
          };
        }
      }
      // validate the optional field `autoHealRules`
      if (jsonObj.get("autoHealRules") != null && !jsonObj.get("autoHealRules").isJsonNull()) {
        AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfigAutoHealRules.validateJsonElement(jsonObj.get("autoHealRules"));
      }
      if ((jsonObj.get("autoSwapSlotName") != null && !jsonObj.get("autoSwapSlotName").isJsonNull()) && !jsonObj.get("autoSwapSlotName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `autoSwapSlotName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("autoSwapSlotName").toString()));
      }
      if (jsonObj.get("connectionStrings") != null && !jsonObj.get("connectionStrings").isJsonNull()) {
        JsonArray jsonArrayconnectionStrings = jsonObj.getAsJsonArray("connectionStrings");
        if (jsonArrayconnectionStrings != null) {
          // ensure the json data is an array
          if (!jsonObj.get("connectionStrings").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `connectionStrings` to be an array in the JSON string but got `%s`", jsonObj.get("connectionStrings").toString()));
          }

          // validate the optional field `connectionStrings` (array)
          for (int i = 0; i < jsonArrayconnectionStrings.size(); i++) {
            AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfigConnectionStringsInner.validateJsonElement(jsonArrayconnectionStrings.get(i));
          };
        }
      }
      // validate the optional field `cors`
      if (jsonObj.get("cors") != null && !jsonObj.get("cors").isJsonNull()) {
        AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfigCors.validateJsonElement(jsonObj.get("cors"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("defaultDocuments") != null && !jsonObj.get("defaultDocuments").isJsonNull() && !jsonObj.get("defaultDocuments").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `defaultDocuments` to be an array in the JSON string but got `%s`", jsonObj.get("defaultDocuments").toString()));
      }
      if ((jsonObj.get("documentRoot") != null && !jsonObj.get("documentRoot").isJsonNull()) && !jsonObj.get("documentRoot").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `documentRoot` to be a primitive type in the JSON string but got `%s`", jsonObj.get("documentRoot").toString()));
      }
      // validate the optional field `experiments`
      if (jsonObj.get("experiments") != null && !jsonObj.get("experiments").isJsonNull()) {
        AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfigExperiments.validateJsonElement(jsonObj.get("experiments"));
      }
      if ((jsonObj.get("ftpsState") != null && !jsonObj.get("ftpsState").isJsonNull()) && !jsonObj.get("ftpsState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ftpsState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ftpsState").toString()));
      }
      // validate the optional field `ftpsState`
      if (jsonObj.get("ftpsState") != null && !jsonObj.get("ftpsState").isJsonNull()) {
        FtpsStateEnum.validateJsonElement(jsonObj.get("ftpsState"));
      }
      if (jsonObj.get("handlerMappings") != null && !jsonObj.get("handlerMappings").isJsonNull()) {
        JsonArray jsonArrayhandlerMappings = jsonObj.getAsJsonArray("handlerMappings");
        if (jsonArrayhandlerMappings != null) {
          // ensure the json data is an array
          if (!jsonObj.get("handlerMappings").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `handlerMappings` to be an array in the JSON string but got `%s`", jsonObj.get("handlerMappings").toString()));
          }

          // validate the optional field `handlerMappings` (array)
          for (int i = 0; i < jsonArrayhandlerMappings.size(); i++) {
            AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfigHandlerMappingsInner.validateJsonElement(jsonArrayhandlerMappings.get(i));
          };
        }
      }
      if ((jsonObj.get("healthCheckPath") != null && !jsonObj.get("healthCheckPath").isJsonNull()) && !jsonObj.get("healthCheckPath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `healthCheckPath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("healthCheckPath").toString()));
      }
      if (jsonObj.get("ipSecurityRestrictions") != null && !jsonObj.get("ipSecurityRestrictions").isJsonNull()) {
        JsonArray jsonArrayipSecurityRestrictions = jsonObj.getAsJsonArray("ipSecurityRestrictions");
        if (jsonArrayipSecurityRestrictions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ipSecurityRestrictions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ipSecurityRestrictions` to be an array in the JSON string but got `%s`", jsonObj.get("ipSecurityRestrictions").toString()));
          }

          // validate the optional field `ipSecurityRestrictions` (array)
          for (int i = 0; i < jsonArrayipSecurityRestrictions.size(); i++) {
            AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfigIpSecurityRestrictionsInner.validateJsonElement(jsonArrayipSecurityRestrictions.get(i));
          };
        }
      }
      if ((jsonObj.get("javaContainer") != null && !jsonObj.get("javaContainer").isJsonNull()) && !jsonObj.get("javaContainer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `javaContainer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("javaContainer").toString()));
      }
      if ((jsonObj.get("javaContainerVersion") != null && !jsonObj.get("javaContainerVersion").isJsonNull()) && !jsonObj.get("javaContainerVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `javaContainerVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("javaContainerVersion").toString()));
      }
      if ((jsonObj.get("javaVersion") != null && !jsonObj.get("javaVersion").isJsonNull()) && !jsonObj.get("javaVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `javaVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("javaVersion").toString()));
      }
      // validate the optional field `limits`
      if (jsonObj.get("limits") != null && !jsonObj.get("limits").isJsonNull()) {
        AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfigLimits.validateJsonElement(jsonObj.get("limits"));
      }
      if ((jsonObj.get("linuxFxVersion") != null && !jsonObj.get("linuxFxVersion").isJsonNull()) && !jsonObj.get("linuxFxVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `linuxFxVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("linuxFxVersion").toString()));
      }
      if ((jsonObj.get("loadBalancing") != null && !jsonObj.get("loadBalancing").isJsonNull()) && !jsonObj.get("loadBalancing").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `loadBalancing` to be a primitive type in the JSON string but got `%s`", jsonObj.get("loadBalancing").toString()));
      }
      // validate the optional field `loadBalancing`
      if (jsonObj.get("loadBalancing") != null && !jsonObj.get("loadBalancing").isJsonNull()) {
        LoadBalancingEnum.validateJsonElement(jsonObj.get("loadBalancing"));
      }
      // validate the optional field `machineKey`
      if (jsonObj.get("machineKey") != null && !jsonObj.get("machineKey").isJsonNull()) {
        AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfigMachineKey.validateJsonElement(jsonObj.get("machineKey"));
      }
      if ((jsonObj.get("managedPipelineMode") != null && !jsonObj.get("managedPipelineMode").isJsonNull()) && !jsonObj.get("managedPipelineMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `managedPipelineMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("managedPipelineMode").toString()));
      }
      // validate the optional field `managedPipelineMode`
      if (jsonObj.get("managedPipelineMode") != null && !jsonObj.get("managedPipelineMode").isJsonNull()) {
        ManagedPipelineModeEnum.validateJsonElement(jsonObj.get("managedPipelineMode"));
      }
      if ((jsonObj.get("minTlsVersion") != null && !jsonObj.get("minTlsVersion").isJsonNull()) && !jsonObj.get("minTlsVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `minTlsVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("minTlsVersion").toString()));
      }
      // validate the optional field `minTlsVersion`
      if (jsonObj.get("minTlsVersion") != null && !jsonObj.get("minTlsVersion").isJsonNull()) {
        MinTlsVersionEnum.validateJsonElement(jsonObj.get("minTlsVersion"));
      }
      if ((jsonObj.get("netFrameworkVersion") != null && !jsonObj.get("netFrameworkVersion").isJsonNull()) && !jsonObj.get("netFrameworkVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `netFrameworkVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("netFrameworkVersion").toString()));
      }
      if ((jsonObj.get("nodeVersion") != null && !jsonObj.get("nodeVersion").isJsonNull()) && !jsonObj.get("nodeVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nodeVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nodeVersion").toString()));
      }
      if ((jsonObj.get("phpVersion") != null && !jsonObj.get("phpVersion").isJsonNull()) && !jsonObj.get("phpVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phpVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phpVersion").toString()));
      }
      if ((jsonObj.get("publishingUsername") != null && !jsonObj.get("publishingUsername").isJsonNull()) && !jsonObj.get("publishingUsername").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `publishingUsername` to be a primitive type in the JSON string but got `%s`", jsonObj.get("publishingUsername").toString()));
      }
      // validate the optional field `push`
      if (jsonObj.get("push") != null && !jsonObj.get("push").isJsonNull()) {
        AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfigPush.validateJsonElement(jsonObj.get("push"));
      }
      if ((jsonObj.get("pythonVersion") != null && !jsonObj.get("pythonVersion").isJsonNull()) && !jsonObj.get("pythonVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pythonVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pythonVersion").toString()));
      }
      if ((jsonObj.get("remoteDebuggingVersion") != null && !jsonObj.get("remoteDebuggingVersion").isJsonNull()) && !jsonObj.get("remoteDebuggingVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `remoteDebuggingVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("remoteDebuggingVersion").toString()));
      }
      if (jsonObj.get("scmIpSecurityRestrictions") != null && !jsonObj.get("scmIpSecurityRestrictions").isJsonNull()) {
        JsonArray jsonArrayscmIpSecurityRestrictions = jsonObj.getAsJsonArray("scmIpSecurityRestrictions");
        if (jsonArrayscmIpSecurityRestrictions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("scmIpSecurityRestrictions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `scmIpSecurityRestrictions` to be an array in the JSON string but got `%s`", jsonObj.get("scmIpSecurityRestrictions").toString()));
          }

          // validate the optional field `scmIpSecurityRestrictions` (array)
          for (int i = 0; i < jsonArrayscmIpSecurityRestrictions.size(); i++) {
            AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfigIpSecurityRestrictionsInner.validateJsonElement(jsonArrayscmIpSecurityRestrictions.get(i));
          };
        }
      }
      if ((jsonObj.get("scmType") != null && !jsonObj.get("scmType").isJsonNull()) && !jsonObj.get("scmType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scmType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scmType").toString()));
      }
      // validate the optional field `scmType`
      if (jsonObj.get("scmType") != null && !jsonObj.get("scmType").isJsonNull()) {
        ScmTypeEnum.validateJsonElement(jsonObj.get("scmType"));
      }
      if ((jsonObj.get("tracingOptions") != null && !jsonObj.get("tracingOptions").isJsonNull()) && !jsonObj.get("tracingOptions").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tracingOptions` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tracingOptions").toString()));
      }
      if (jsonObj.get("virtualApplications") != null && !jsonObj.get("virtualApplications").isJsonNull()) {
        JsonArray jsonArrayvirtualApplications = jsonObj.getAsJsonArray("virtualApplications");
        if (jsonArrayvirtualApplications != null) {
          // ensure the json data is an array
          if (!jsonObj.get("virtualApplications").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `virtualApplications` to be an array in the JSON string but got `%s`", jsonObj.get("virtualApplications").toString()));
          }

          // validate the optional field `virtualApplications` (array)
          for (int i = 0; i < jsonArrayvirtualApplications.size(); i++) {
            AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfigVirtualApplicationsInner.validateJsonElement(jsonArrayvirtualApplications.get(i));
          };
        }
      }
      if ((jsonObj.get("vnetName") != null && !jsonObj.get("vnetName").isJsonNull()) && !jsonObj.get("vnetName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vnetName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vnetName").toString()));
      }
      if ((jsonObj.get("windowsFxVersion") != null && !jsonObj.get("windowsFxVersion").isJsonNull()) && !jsonObj.get("windowsFxVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `windowsFxVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("windowsFxVersion").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig>() {
           @Override
           public void write(JsonWriter out, AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig
   * @throws IOException if the JSON string is invalid with respect to AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig
   */
  public static AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig.class);
  }

  /**
   * Convert an instance of AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

