/*
 * AppServiceEnvironments API Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesCloningInfo;
import org.openapitools.client.model.AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesHostNameSslStatesInner;
import org.openapitools.client.model.AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesHostingEnvironmentProfile;
import org.openapitools.client.model.AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig;
import org.openapitools.client.model.AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSlotSwapStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Site resource specific properties
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:58:51.419617-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AppServiceEnvironmentsChangeVnet200ResponseValueInnerProperties {
  /**
   * Management information availability state for the app.
   */
  @JsonAdapter(AvailabilityStateEnum.Adapter.class)
  public enum AvailabilityStateEnum {
    NORMAL("Normal"),
    
    LIMITED("Limited"),
    
    DISASTER_RECOVERY_MODE("DisasterRecoveryMode");

    private String value;

    AvailabilityStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AvailabilityStateEnum fromValue(String value) {
      for (AvailabilityStateEnum b : AvailabilityStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AvailabilityStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AvailabilityStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AvailabilityStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AvailabilityStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AvailabilityStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AVAILABILITY_STATE = "availabilityState";
  @SerializedName(SERIALIZED_NAME_AVAILABILITY_STATE)
  private AvailabilityStateEnum availabilityState;

  public static final String SERIALIZED_NAME_CLIENT_AFFINITY_ENABLED = "clientAffinityEnabled";
  @SerializedName(SERIALIZED_NAME_CLIENT_AFFINITY_ENABLED)
  private Boolean clientAffinityEnabled;

  public static final String SERIALIZED_NAME_CLIENT_CERT_ENABLED = "clientCertEnabled";
  @SerializedName(SERIALIZED_NAME_CLIENT_CERT_ENABLED)
  private Boolean clientCertEnabled;

  public static final String SERIALIZED_NAME_CLIENT_CERT_EXCLUSION_PATHS = "clientCertExclusionPaths";
  @SerializedName(SERIALIZED_NAME_CLIENT_CERT_EXCLUSION_PATHS)
  private String clientCertExclusionPaths;

  public static final String SERIALIZED_NAME_CLONING_INFO = "cloningInfo";
  @SerializedName(SERIALIZED_NAME_CLONING_INFO)
  private AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesCloningInfo cloningInfo;

  public static final String SERIALIZED_NAME_CONTAINER_SIZE = "containerSize";
  @SerializedName(SERIALIZED_NAME_CONTAINER_SIZE)
  private Integer containerSize;

  public static final String SERIALIZED_NAME_DAILY_MEMORY_TIME_QUOTA = "dailyMemoryTimeQuota";
  @SerializedName(SERIALIZED_NAME_DAILY_MEMORY_TIME_QUOTA)
  private Integer dailyMemoryTimeQuota;

  public static final String SERIALIZED_NAME_DEFAULT_HOST_NAME = "defaultHostName";
  @SerializedName(SERIALIZED_NAME_DEFAULT_HOST_NAME)
  private String defaultHostName;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_ENABLED_HOST_NAMES = "enabledHostNames";
  @SerializedName(SERIALIZED_NAME_ENABLED_HOST_NAMES)
  private List<String> enabledHostNames = new ArrayList<>();

  public static final String SERIALIZED_NAME_HOST_NAME_SSL_STATES = "hostNameSslStates";
  @SerializedName(SERIALIZED_NAME_HOST_NAME_SSL_STATES)
  private List<AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesHostNameSslStatesInner> hostNameSslStates = new ArrayList<>();

  public static final String SERIALIZED_NAME_HOST_NAMES = "hostNames";
  @SerializedName(SERIALIZED_NAME_HOST_NAMES)
  private List<String> hostNames = new ArrayList<>();

  public static final String SERIALIZED_NAME_HOST_NAMES_DISABLED = "hostNamesDisabled";
  @SerializedName(SERIALIZED_NAME_HOST_NAMES_DISABLED)
  private Boolean hostNamesDisabled;

  public static final String SERIALIZED_NAME_HOSTING_ENVIRONMENT_PROFILE = "hostingEnvironmentProfile";
  @SerializedName(SERIALIZED_NAME_HOSTING_ENVIRONMENT_PROFILE)
  private AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesHostingEnvironmentProfile hostingEnvironmentProfile;

  public static final String SERIALIZED_NAME_HTTPS_ONLY = "httpsOnly";
  @SerializedName(SERIALIZED_NAME_HTTPS_ONLY)
  private Boolean httpsOnly;

  public static final String SERIALIZED_NAME_HYPER_V = "hyperV";
  @SerializedName(SERIALIZED_NAME_HYPER_V)
  private Boolean hyperV = false;

  public static final String SERIALIZED_NAME_IN_PROGRESS_OPERATION_ID = "inProgressOperationId";
  @SerializedName(SERIALIZED_NAME_IN_PROGRESS_OPERATION_ID)
  private UUID inProgressOperationId;

  public static final String SERIALIZED_NAME_IS_DEFAULT_CONTAINER = "isDefaultContainer";
  @SerializedName(SERIALIZED_NAME_IS_DEFAULT_CONTAINER)
  private Boolean isDefaultContainer;

  public static final String SERIALIZED_NAME_IS_XENON = "isXenon";
  @SerializedName(SERIALIZED_NAME_IS_XENON)
  private Boolean isXenon = false;

  public static final String SERIALIZED_NAME_LAST_MODIFIED_TIME_UTC = "lastModifiedTimeUtc";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED_TIME_UTC)
  private OffsetDateTime lastModifiedTimeUtc;

  public static final String SERIALIZED_NAME_MAX_NUMBER_OF_WORKERS = "maxNumberOfWorkers";
  @SerializedName(SERIALIZED_NAME_MAX_NUMBER_OF_WORKERS)
  private Integer maxNumberOfWorkers;

  public static final String SERIALIZED_NAME_OUTBOUND_IP_ADDRESSES = "outboundIpAddresses";
  @SerializedName(SERIALIZED_NAME_OUTBOUND_IP_ADDRESSES)
  private String outboundIpAddresses;

  public static final String SERIALIZED_NAME_POSSIBLE_OUTBOUND_IP_ADDRESSES = "possibleOutboundIpAddresses";
  @SerializedName(SERIALIZED_NAME_POSSIBLE_OUTBOUND_IP_ADDRESSES)
  private String possibleOutboundIpAddresses;

  /**
   * Site redundancy mode
   */
  @JsonAdapter(RedundancyModeEnum.Adapter.class)
  public enum RedundancyModeEnum {
    NONE("None"),
    
    MANUAL("Manual"),
    
    FAILOVER("Failover"),
    
    ACTIVE_ACTIVE("ActiveActive"),
    
    GEO_REDUNDANT("GeoRedundant");

    private String value;

    RedundancyModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RedundancyModeEnum fromValue(String value) {
      for (RedundancyModeEnum b : RedundancyModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RedundancyModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RedundancyModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RedundancyModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RedundancyModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RedundancyModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_REDUNDANCY_MODE = "redundancyMode";
  @SerializedName(SERIALIZED_NAME_REDUNDANCY_MODE)
  private RedundancyModeEnum redundancyMode;

  public static final String SERIALIZED_NAME_REPOSITORY_SITE_NAME = "repositorySiteName";
  @SerializedName(SERIALIZED_NAME_REPOSITORY_SITE_NAME)
  private String repositorySiteName;

  public static final String SERIALIZED_NAME_RESERVED = "reserved";
  @SerializedName(SERIALIZED_NAME_RESERVED)
  private Boolean reserved = false;

  public static final String SERIALIZED_NAME_RESOURCE_GROUP = "resourceGroup";
  @SerializedName(SERIALIZED_NAME_RESOURCE_GROUP)
  private String resourceGroup;

  public static final String SERIALIZED_NAME_SCM_SITE_ALSO_STOPPED = "scmSiteAlsoStopped";
  @SerializedName(SERIALIZED_NAME_SCM_SITE_ALSO_STOPPED)
  private Boolean scmSiteAlsoStopped = false;

  public static final String SERIALIZED_NAME_SERVER_FARM_ID = "serverFarmId";
  @SerializedName(SERIALIZED_NAME_SERVER_FARM_ID)
  private String serverFarmId;

  public static final String SERIALIZED_NAME_SITE_CONFIG = "siteConfig";
  @SerializedName(SERIALIZED_NAME_SITE_CONFIG)
  private AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig siteConfig;

  public static final String SERIALIZED_NAME_SLOT_SWAP_STATUS = "slotSwapStatus";
  @SerializedName(SERIALIZED_NAME_SLOT_SWAP_STATUS)
  private AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSlotSwapStatus slotSwapStatus;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public static final String SERIALIZED_NAME_SUSPENDED_TILL = "suspendedTill";
  @SerializedName(SERIALIZED_NAME_SUSPENDED_TILL)
  private OffsetDateTime suspendedTill;

  public static final String SERIALIZED_NAME_TARGET_SWAP_SLOT = "targetSwapSlot";
  @SerializedName(SERIALIZED_NAME_TARGET_SWAP_SLOT)
  private String targetSwapSlot;

  public static final String SERIALIZED_NAME_TRAFFIC_MANAGER_HOST_NAMES = "trafficManagerHostNames";
  @SerializedName(SERIALIZED_NAME_TRAFFIC_MANAGER_HOST_NAMES)
  private List<String> trafficManagerHostNames = new ArrayList<>();

  /**
   * State indicating whether the app has exceeded its quota usage. Read-only.
   */
  @JsonAdapter(UsageStateEnum.Adapter.class)
  public enum UsageStateEnum {
    NORMAL("Normal"),
    
    EXCEEDED("Exceeded");

    private String value;

    UsageStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static UsageStateEnum fromValue(String value) {
      for (UsageStateEnum b : UsageStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<UsageStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final UsageStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public UsageStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return UsageStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      UsageStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_USAGE_STATE = "usageState";
  @SerializedName(SERIALIZED_NAME_USAGE_STATE)
  private UsageStateEnum usageState;

  public AppServiceEnvironmentsChangeVnet200ResponseValueInnerProperties() {
  }

  public AppServiceEnvironmentsChangeVnet200ResponseValueInnerProperties(
     AvailabilityStateEnum availabilityState, 
     String defaultHostName, 
     List<String> enabledHostNames, 
     List<String> hostNames, 
     UUID inProgressOperationId, 
     Boolean isDefaultContainer, 
     OffsetDateTime lastModifiedTimeUtc, 
     Integer maxNumberOfWorkers, 
     String outboundIpAddresses, 
     String possibleOutboundIpAddresses, 
     String repositorySiteName, 
     String resourceGroup, 
     String state, 
     OffsetDateTime suspendedTill, 
     String targetSwapSlot, 
     List<String> trafficManagerHostNames, 
     UsageStateEnum usageState
  ) {
    this();
    this.availabilityState = availabilityState;
    this.defaultHostName = defaultHostName;
    this.enabledHostNames = enabledHostNames;
    this.hostNames = hostNames;
    this.inProgressOperationId = inProgressOperationId;
    this.isDefaultContainer = isDefaultContainer;
    this.lastModifiedTimeUtc = lastModifiedTimeUtc;
    this.maxNumberOfWorkers = maxNumberOfWorkers;
    this.outboundIpAddresses = outboundIpAddresses;
    this.possibleOutboundIpAddresses = possibleOutboundIpAddresses;
    this.repositorySiteName = repositorySiteName;
    this.resourceGroup = resourceGroup;
    this.state = state;
    this.suspendedTill = suspendedTill;
    this.targetSwapSlot = targetSwapSlot;
    this.trafficManagerHostNames = trafficManagerHostNames;
    this.usageState = usageState;
  }

  /**
   * Management information availability state for the app.
   * @return availabilityState
   */
  @javax.annotation.Nullable
  public AvailabilityStateEnum getAvailabilityState() {
    return availabilityState;
  }



  public AppServiceEnvironmentsChangeVnet200ResponseValueInnerProperties clientAffinityEnabled(Boolean clientAffinityEnabled) {
    this.clientAffinityEnabled = clientAffinityEnabled;
    return this;
  }

  /**
   * &lt;code&gt;true&lt;/code&gt; to enable client affinity; &lt;code&gt;false&lt;/code&gt; to stop sending session affinity cookies, which route client requests in the same session to the same instance. Default is &lt;code&gt;true&lt;/code&gt;.
   * @return clientAffinityEnabled
   */
  @javax.annotation.Nullable
  public Boolean getClientAffinityEnabled() {
    return clientAffinityEnabled;
  }

  public void setClientAffinityEnabled(Boolean clientAffinityEnabled) {
    this.clientAffinityEnabled = clientAffinityEnabled;
  }


  public AppServiceEnvironmentsChangeVnet200ResponseValueInnerProperties clientCertEnabled(Boolean clientCertEnabled) {
    this.clientCertEnabled = clientCertEnabled;
    return this;
  }

  /**
   * &lt;code&gt;true&lt;/code&gt; to enable client certificate authentication (TLS mutual authentication); otherwise, &lt;code&gt;false&lt;/code&gt;. Default is &lt;code&gt;false&lt;/code&gt;.
   * @return clientCertEnabled
   */
  @javax.annotation.Nullable
  public Boolean getClientCertEnabled() {
    return clientCertEnabled;
  }

  public void setClientCertEnabled(Boolean clientCertEnabled) {
    this.clientCertEnabled = clientCertEnabled;
  }


  public AppServiceEnvironmentsChangeVnet200ResponseValueInnerProperties clientCertExclusionPaths(String clientCertExclusionPaths) {
    this.clientCertExclusionPaths = clientCertExclusionPaths;
    return this;
  }

  /**
   * client certificate authentication comma-separated exclusion paths
   * @return clientCertExclusionPaths
   */
  @javax.annotation.Nullable
  public String getClientCertExclusionPaths() {
    return clientCertExclusionPaths;
  }

  public void setClientCertExclusionPaths(String clientCertExclusionPaths) {
    this.clientCertExclusionPaths = clientCertExclusionPaths;
  }


  public AppServiceEnvironmentsChangeVnet200ResponseValueInnerProperties cloningInfo(AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesCloningInfo cloningInfo) {
    this.cloningInfo = cloningInfo;
    return this;
  }

  /**
   * Get cloningInfo
   * @return cloningInfo
   */
  @javax.annotation.Nullable
  public AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesCloningInfo getCloningInfo() {
    return cloningInfo;
  }

  public void setCloningInfo(AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesCloningInfo cloningInfo) {
    this.cloningInfo = cloningInfo;
  }


  public AppServiceEnvironmentsChangeVnet200ResponseValueInnerProperties containerSize(Integer containerSize) {
    this.containerSize = containerSize;
    return this;
  }

  /**
   * Size of the function container.
   * @return containerSize
   */
  @javax.annotation.Nullable
  public Integer getContainerSize() {
    return containerSize;
  }

  public void setContainerSize(Integer containerSize) {
    this.containerSize = containerSize;
  }


  public AppServiceEnvironmentsChangeVnet200ResponseValueInnerProperties dailyMemoryTimeQuota(Integer dailyMemoryTimeQuota) {
    this.dailyMemoryTimeQuota = dailyMemoryTimeQuota;
    return this;
  }

  /**
   * Maximum allowed daily memory-time quota (applicable on dynamic apps only).
   * @return dailyMemoryTimeQuota
   */
  @javax.annotation.Nullable
  public Integer getDailyMemoryTimeQuota() {
    return dailyMemoryTimeQuota;
  }

  public void setDailyMemoryTimeQuota(Integer dailyMemoryTimeQuota) {
    this.dailyMemoryTimeQuota = dailyMemoryTimeQuota;
  }


  /**
   * Default hostname of the app. Read-only.
   * @return defaultHostName
   */
  @javax.annotation.Nullable
  public String getDefaultHostName() {
    return defaultHostName;
  }



  public AppServiceEnvironmentsChangeVnet200ResponseValueInnerProperties enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  /**
   * &lt;code&gt;true&lt;/code&gt; if the app is enabled; otherwise, &lt;code&gt;false&lt;/code&gt;. Setting this value to false disables the app (takes the app offline).
   * @return enabled
   */
  @javax.annotation.Nullable
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  /**
   * Enabled hostnames for the app.Hostnames need to be assigned (see HostNames) AND enabled. Otherwise, the app is not served on those hostnames.
   * @return enabledHostNames
   */
  @javax.annotation.Nullable
  public List<String> getEnabledHostNames() {
    return enabledHostNames;
  }



  public AppServiceEnvironmentsChangeVnet200ResponseValueInnerProperties hostNameSslStates(List<AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesHostNameSslStatesInner> hostNameSslStates) {
    this.hostNameSslStates = hostNameSslStates;
    return this;
  }

  public AppServiceEnvironmentsChangeVnet200ResponseValueInnerProperties addHostNameSslStatesItem(AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesHostNameSslStatesInner hostNameSslStatesItem) {
    if (this.hostNameSslStates == null) {
      this.hostNameSslStates = new ArrayList<>();
    }
    this.hostNameSslStates.add(hostNameSslStatesItem);
    return this;
  }

  /**
   * Hostname SSL states are used to manage the SSL bindings for app&#39;s hostnames.
   * @return hostNameSslStates
   */
  @javax.annotation.Nullable
  public List<AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesHostNameSslStatesInner> getHostNameSslStates() {
    return hostNameSslStates;
  }

  public void setHostNameSslStates(List<AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesHostNameSslStatesInner> hostNameSslStates) {
    this.hostNameSslStates = hostNameSslStates;
  }


  /**
   * Hostnames associated with the app.
   * @return hostNames
   */
  @javax.annotation.Nullable
  public List<String> getHostNames() {
    return hostNames;
  }



  public AppServiceEnvironmentsChangeVnet200ResponseValueInnerProperties hostNamesDisabled(Boolean hostNamesDisabled) {
    this.hostNamesDisabled = hostNamesDisabled;
    return this;
  }

  /**
   * &lt;code&gt;true&lt;/code&gt; to disable the public hostnames of the app; otherwise, &lt;code&gt;false&lt;/code&gt;.  If &lt;code&gt;true&lt;/code&gt;, the app is only accessible via API management process.
   * @return hostNamesDisabled
   */
  @javax.annotation.Nullable
  public Boolean getHostNamesDisabled() {
    return hostNamesDisabled;
  }

  public void setHostNamesDisabled(Boolean hostNamesDisabled) {
    this.hostNamesDisabled = hostNamesDisabled;
  }


  public AppServiceEnvironmentsChangeVnet200ResponseValueInnerProperties hostingEnvironmentProfile(AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesHostingEnvironmentProfile hostingEnvironmentProfile) {
    this.hostingEnvironmentProfile = hostingEnvironmentProfile;
    return this;
  }

  /**
   * Get hostingEnvironmentProfile
   * @return hostingEnvironmentProfile
   */
  @javax.annotation.Nullable
  public AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesHostingEnvironmentProfile getHostingEnvironmentProfile() {
    return hostingEnvironmentProfile;
  }

  public void setHostingEnvironmentProfile(AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesHostingEnvironmentProfile hostingEnvironmentProfile) {
    this.hostingEnvironmentProfile = hostingEnvironmentProfile;
  }


  public AppServiceEnvironmentsChangeVnet200ResponseValueInnerProperties httpsOnly(Boolean httpsOnly) {
    this.httpsOnly = httpsOnly;
    return this;
  }

  /**
   * HttpsOnly: configures a web site to accept only https requests. Issues redirect for http requests
   * @return httpsOnly
   */
  @javax.annotation.Nullable
  public Boolean getHttpsOnly() {
    return httpsOnly;
  }

  public void setHttpsOnly(Boolean httpsOnly) {
    this.httpsOnly = httpsOnly;
  }


  public AppServiceEnvironmentsChangeVnet200ResponseValueInnerProperties hyperV(Boolean hyperV) {
    this.hyperV = hyperV;
    return this;
  }

  /**
   * Hyper-V sandbox.
   * @return hyperV
   */
  @javax.annotation.Nullable
  public Boolean getHyperV() {
    return hyperV;
  }

  public void setHyperV(Boolean hyperV) {
    this.hyperV = hyperV;
  }


  /**
   * Specifies an operation id if this site has a pending operation.
   * @return inProgressOperationId
   */
  @javax.annotation.Nullable
  public UUID getInProgressOperationId() {
    return inProgressOperationId;
  }



  /**
   * &lt;code&gt;true&lt;/code&gt; if the app is a default container; otherwise, &lt;code&gt;false&lt;/code&gt;.
   * @return isDefaultContainer
   */
  @javax.annotation.Nullable
  public Boolean getIsDefaultContainer() {
    return isDefaultContainer;
  }



  public AppServiceEnvironmentsChangeVnet200ResponseValueInnerProperties isXenon(Boolean isXenon) {
    this.isXenon = isXenon;
    return this;
  }

  /**
   * Obsolete: Hyper-V sandbox.
   * @return isXenon
   */
  @javax.annotation.Nullable
  public Boolean getIsXenon() {
    return isXenon;
  }

  public void setIsXenon(Boolean isXenon) {
    this.isXenon = isXenon;
  }


  /**
   * Last time the app was modified, in UTC. Read-only.
   * @return lastModifiedTimeUtc
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastModifiedTimeUtc() {
    return lastModifiedTimeUtc;
  }



  /**
   * Maximum number of workers. This only applies to Functions container.
   * @return maxNumberOfWorkers
   */
  @javax.annotation.Nullable
  public Integer getMaxNumberOfWorkers() {
    return maxNumberOfWorkers;
  }



  /**
   * List of IP addresses that the app uses for outbound connections (e.g. database access). Includes VIPs from tenants that site can be hosted with current settings. Read-only.
   * @return outboundIpAddresses
   */
  @javax.annotation.Nullable
  public String getOutboundIpAddresses() {
    return outboundIpAddresses;
  }



  /**
   * List of IP addresses that the app uses for outbound connections (e.g. database access). Includes VIPs from all tenants except dataComponent. Read-only.
   * @return possibleOutboundIpAddresses
   */
  @javax.annotation.Nullable
  public String getPossibleOutboundIpAddresses() {
    return possibleOutboundIpAddresses;
  }



  public AppServiceEnvironmentsChangeVnet200ResponseValueInnerProperties redundancyMode(RedundancyModeEnum redundancyMode) {
    this.redundancyMode = redundancyMode;
    return this;
  }

  /**
   * Site redundancy mode
   * @return redundancyMode
   */
  @javax.annotation.Nullable
  public RedundancyModeEnum getRedundancyMode() {
    return redundancyMode;
  }

  public void setRedundancyMode(RedundancyModeEnum redundancyMode) {
    this.redundancyMode = redundancyMode;
  }


  /**
   * Name of the repository site.
   * @return repositorySiteName
   */
  @javax.annotation.Nullable
  public String getRepositorySiteName() {
    return repositorySiteName;
  }



  public AppServiceEnvironmentsChangeVnet200ResponseValueInnerProperties reserved(Boolean reserved) {
    this.reserved = reserved;
    return this;
  }

  /**
   * &lt;code&gt;true&lt;/code&gt; if reserved; otherwise, &lt;code&gt;false&lt;/code&gt;.
   * @return reserved
   */
  @javax.annotation.Nullable
  public Boolean getReserved() {
    return reserved;
  }

  public void setReserved(Boolean reserved) {
    this.reserved = reserved;
  }


  /**
   * Name of the resource group the app belongs to. Read-only.
   * @return resourceGroup
   */
  @javax.annotation.Nullable
  public String getResourceGroup() {
    return resourceGroup;
  }



  public AppServiceEnvironmentsChangeVnet200ResponseValueInnerProperties scmSiteAlsoStopped(Boolean scmSiteAlsoStopped) {
    this.scmSiteAlsoStopped = scmSiteAlsoStopped;
    return this;
  }

  /**
   * &lt;code&gt;true&lt;/code&gt; to stop SCM (KUDU) site when the app is stopped; otherwise, &lt;code&gt;false&lt;/code&gt;. The default is &lt;code&gt;false&lt;/code&gt;.
   * @return scmSiteAlsoStopped
   */
  @javax.annotation.Nullable
  public Boolean getScmSiteAlsoStopped() {
    return scmSiteAlsoStopped;
  }

  public void setScmSiteAlsoStopped(Boolean scmSiteAlsoStopped) {
    this.scmSiteAlsoStopped = scmSiteAlsoStopped;
  }


  public AppServiceEnvironmentsChangeVnet200ResponseValueInnerProperties serverFarmId(String serverFarmId) {
    this.serverFarmId = serverFarmId;
    return this;
  }

  /**
   * Resource ID of the associated App Service plan, formatted as: \&quot;/subscriptions/{subscriptionID}/resourceGroups/{groupName}/providers/Microsoft.Web/serverfarms/{appServicePlanName}\&quot;.
   * @return serverFarmId
   */
  @javax.annotation.Nullable
  public String getServerFarmId() {
    return serverFarmId;
  }

  public void setServerFarmId(String serverFarmId) {
    this.serverFarmId = serverFarmId;
  }


  public AppServiceEnvironmentsChangeVnet200ResponseValueInnerProperties siteConfig(AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig siteConfig) {
    this.siteConfig = siteConfig;
    return this;
  }

  /**
   * Get siteConfig
   * @return siteConfig
   */
  @javax.annotation.Nullable
  public AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig getSiteConfig() {
    return siteConfig;
  }

  public void setSiteConfig(AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig siteConfig) {
    this.siteConfig = siteConfig;
  }


  public AppServiceEnvironmentsChangeVnet200ResponseValueInnerProperties slotSwapStatus(AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSlotSwapStatus slotSwapStatus) {
    this.slotSwapStatus = slotSwapStatus;
    return this;
  }

  /**
   * Get slotSwapStatus
   * @return slotSwapStatus
   */
  @javax.annotation.Nullable
  public AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSlotSwapStatus getSlotSwapStatus() {
    return slotSwapStatus;
  }

  public void setSlotSwapStatus(AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSlotSwapStatus slotSwapStatus) {
    this.slotSwapStatus = slotSwapStatus;
  }


  /**
   * Current state of the app.
   * @return state
   */
  @javax.annotation.Nullable
  public String getState() {
    return state;
  }



  /**
   * App suspended till in case memory-time quota is exceeded.
   * @return suspendedTill
   */
  @javax.annotation.Nullable
  public OffsetDateTime getSuspendedTill() {
    return suspendedTill;
  }



  /**
   * Specifies which deployment slot this app will swap into. Read-only.
   * @return targetSwapSlot
   */
  @javax.annotation.Nullable
  public String getTargetSwapSlot() {
    return targetSwapSlot;
  }



  /**
   * Azure Traffic Manager hostnames associated with the app. Read-only.
   * @return trafficManagerHostNames
   */
  @javax.annotation.Nullable
  public List<String> getTrafficManagerHostNames() {
    return trafficManagerHostNames;
  }



  /**
   * State indicating whether the app has exceeded its quota usage. Read-only.
   * @return usageState
   */
  @javax.annotation.Nullable
  public UsageStateEnum getUsageState() {
    return usageState;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AppServiceEnvironmentsChangeVnet200ResponseValueInnerProperties appServiceEnvironmentsChangeVnet200ResponseValueInnerProperties = (AppServiceEnvironmentsChangeVnet200ResponseValueInnerProperties) o;
    return Objects.equals(this.availabilityState, appServiceEnvironmentsChangeVnet200ResponseValueInnerProperties.availabilityState) &&
        Objects.equals(this.clientAffinityEnabled, appServiceEnvironmentsChangeVnet200ResponseValueInnerProperties.clientAffinityEnabled) &&
        Objects.equals(this.clientCertEnabled, appServiceEnvironmentsChangeVnet200ResponseValueInnerProperties.clientCertEnabled) &&
        Objects.equals(this.clientCertExclusionPaths, appServiceEnvironmentsChangeVnet200ResponseValueInnerProperties.clientCertExclusionPaths) &&
        Objects.equals(this.cloningInfo, appServiceEnvironmentsChangeVnet200ResponseValueInnerProperties.cloningInfo) &&
        Objects.equals(this.containerSize, appServiceEnvironmentsChangeVnet200ResponseValueInnerProperties.containerSize) &&
        Objects.equals(this.dailyMemoryTimeQuota, appServiceEnvironmentsChangeVnet200ResponseValueInnerProperties.dailyMemoryTimeQuota) &&
        Objects.equals(this.defaultHostName, appServiceEnvironmentsChangeVnet200ResponseValueInnerProperties.defaultHostName) &&
        Objects.equals(this.enabled, appServiceEnvironmentsChangeVnet200ResponseValueInnerProperties.enabled) &&
        Objects.equals(this.enabledHostNames, appServiceEnvironmentsChangeVnet200ResponseValueInnerProperties.enabledHostNames) &&
        Objects.equals(this.hostNameSslStates, appServiceEnvironmentsChangeVnet200ResponseValueInnerProperties.hostNameSslStates) &&
        Objects.equals(this.hostNames, appServiceEnvironmentsChangeVnet200ResponseValueInnerProperties.hostNames) &&
        Objects.equals(this.hostNamesDisabled, appServiceEnvironmentsChangeVnet200ResponseValueInnerProperties.hostNamesDisabled) &&
        Objects.equals(this.hostingEnvironmentProfile, appServiceEnvironmentsChangeVnet200ResponseValueInnerProperties.hostingEnvironmentProfile) &&
        Objects.equals(this.httpsOnly, appServiceEnvironmentsChangeVnet200ResponseValueInnerProperties.httpsOnly) &&
        Objects.equals(this.hyperV, appServiceEnvironmentsChangeVnet200ResponseValueInnerProperties.hyperV) &&
        Objects.equals(this.inProgressOperationId, appServiceEnvironmentsChangeVnet200ResponseValueInnerProperties.inProgressOperationId) &&
        Objects.equals(this.isDefaultContainer, appServiceEnvironmentsChangeVnet200ResponseValueInnerProperties.isDefaultContainer) &&
        Objects.equals(this.isXenon, appServiceEnvironmentsChangeVnet200ResponseValueInnerProperties.isXenon) &&
        Objects.equals(this.lastModifiedTimeUtc, appServiceEnvironmentsChangeVnet200ResponseValueInnerProperties.lastModifiedTimeUtc) &&
        Objects.equals(this.maxNumberOfWorkers, appServiceEnvironmentsChangeVnet200ResponseValueInnerProperties.maxNumberOfWorkers) &&
        Objects.equals(this.outboundIpAddresses, appServiceEnvironmentsChangeVnet200ResponseValueInnerProperties.outboundIpAddresses) &&
        Objects.equals(this.possibleOutboundIpAddresses, appServiceEnvironmentsChangeVnet200ResponseValueInnerProperties.possibleOutboundIpAddresses) &&
        Objects.equals(this.redundancyMode, appServiceEnvironmentsChangeVnet200ResponseValueInnerProperties.redundancyMode) &&
        Objects.equals(this.repositorySiteName, appServiceEnvironmentsChangeVnet200ResponseValueInnerProperties.repositorySiteName) &&
        Objects.equals(this.reserved, appServiceEnvironmentsChangeVnet200ResponseValueInnerProperties.reserved) &&
        Objects.equals(this.resourceGroup, appServiceEnvironmentsChangeVnet200ResponseValueInnerProperties.resourceGroup) &&
        Objects.equals(this.scmSiteAlsoStopped, appServiceEnvironmentsChangeVnet200ResponseValueInnerProperties.scmSiteAlsoStopped) &&
        Objects.equals(this.serverFarmId, appServiceEnvironmentsChangeVnet200ResponseValueInnerProperties.serverFarmId) &&
        Objects.equals(this.siteConfig, appServiceEnvironmentsChangeVnet200ResponseValueInnerProperties.siteConfig) &&
        Objects.equals(this.slotSwapStatus, appServiceEnvironmentsChangeVnet200ResponseValueInnerProperties.slotSwapStatus) &&
        Objects.equals(this.state, appServiceEnvironmentsChangeVnet200ResponseValueInnerProperties.state) &&
        Objects.equals(this.suspendedTill, appServiceEnvironmentsChangeVnet200ResponseValueInnerProperties.suspendedTill) &&
        Objects.equals(this.targetSwapSlot, appServiceEnvironmentsChangeVnet200ResponseValueInnerProperties.targetSwapSlot) &&
        Objects.equals(this.trafficManagerHostNames, appServiceEnvironmentsChangeVnet200ResponseValueInnerProperties.trafficManagerHostNames) &&
        Objects.equals(this.usageState, appServiceEnvironmentsChangeVnet200ResponseValueInnerProperties.usageState);
  }

  @Override
  public int hashCode() {
    return Objects.hash(availabilityState, clientAffinityEnabled, clientCertEnabled, clientCertExclusionPaths, cloningInfo, containerSize, dailyMemoryTimeQuota, defaultHostName, enabled, enabledHostNames, hostNameSslStates, hostNames, hostNamesDisabled, hostingEnvironmentProfile, httpsOnly, hyperV, inProgressOperationId, isDefaultContainer, isXenon, lastModifiedTimeUtc, maxNumberOfWorkers, outboundIpAddresses, possibleOutboundIpAddresses, redundancyMode, repositorySiteName, reserved, resourceGroup, scmSiteAlsoStopped, serverFarmId, siteConfig, slotSwapStatus, state, suspendedTill, targetSwapSlot, trafficManagerHostNames, usageState);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AppServiceEnvironmentsChangeVnet200ResponseValueInnerProperties {\n");
    sb.append("    availabilityState: ").append(toIndentedString(availabilityState)).append("\n");
    sb.append("    clientAffinityEnabled: ").append(toIndentedString(clientAffinityEnabled)).append("\n");
    sb.append("    clientCertEnabled: ").append(toIndentedString(clientCertEnabled)).append("\n");
    sb.append("    clientCertExclusionPaths: ").append(toIndentedString(clientCertExclusionPaths)).append("\n");
    sb.append("    cloningInfo: ").append(toIndentedString(cloningInfo)).append("\n");
    sb.append("    containerSize: ").append(toIndentedString(containerSize)).append("\n");
    sb.append("    dailyMemoryTimeQuota: ").append(toIndentedString(dailyMemoryTimeQuota)).append("\n");
    sb.append("    defaultHostName: ").append(toIndentedString(defaultHostName)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    enabledHostNames: ").append(toIndentedString(enabledHostNames)).append("\n");
    sb.append("    hostNameSslStates: ").append(toIndentedString(hostNameSslStates)).append("\n");
    sb.append("    hostNames: ").append(toIndentedString(hostNames)).append("\n");
    sb.append("    hostNamesDisabled: ").append(toIndentedString(hostNamesDisabled)).append("\n");
    sb.append("    hostingEnvironmentProfile: ").append(toIndentedString(hostingEnvironmentProfile)).append("\n");
    sb.append("    httpsOnly: ").append(toIndentedString(httpsOnly)).append("\n");
    sb.append("    hyperV: ").append(toIndentedString(hyperV)).append("\n");
    sb.append("    inProgressOperationId: ").append(toIndentedString(inProgressOperationId)).append("\n");
    sb.append("    isDefaultContainer: ").append(toIndentedString(isDefaultContainer)).append("\n");
    sb.append("    isXenon: ").append(toIndentedString(isXenon)).append("\n");
    sb.append("    lastModifiedTimeUtc: ").append(toIndentedString(lastModifiedTimeUtc)).append("\n");
    sb.append("    maxNumberOfWorkers: ").append(toIndentedString(maxNumberOfWorkers)).append("\n");
    sb.append("    outboundIpAddresses: ").append(toIndentedString(outboundIpAddresses)).append("\n");
    sb.append("    possibleOutboundIpAddresses: ").append(toIndentedString(possibleOutboundIpAddresses)).append("\n");
    sb.append("    redundancyMode: ").append(toIndentedString(redundancyMode)).append("\n");
    sb.append("    repositorySiteName: ").append(toIndentedString(repositorySiteName)).append("\n");
    sb.append("    reserved: ").append(toIndentedString(reserved)).append("\n");
    sb.append("    resourceGroup: ").append(toIndentedString(resourceGroup)).append("\n");
    sb.append("    scmSiteAlsoStopped: ").append(toIndentedString(scmSiteAlsoStopped)).append("\n");
    sb.append("    serverFarmId: ").append(toIndentedString(serverFarmId)).append("\n");
    sb.append("    siteConfig: ").append(toIndentedString(siteConfig)).append("\n");
    sb.append("    slotSwapStatus: ").append(toIndentedString(slotSwapStatus)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    suspendedTill: ").append(toIndentedString(suspendedTill)).append("\n");
    sb.append("    targetSwapSlot: ").append(toIndentedString(targetSwapSlot)).append("\n");
    sb.append("    trafficManagerHostNames: ").append(toIndentedString(trafficManagerHostNames)).append("\n");
    sb.append("    usageState: ").append(toIndentedString(usageState)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("availabilityState");
    openapiFields.add("clientAffinityEnabled");
    openapiFields.add("clientCertEnabled");
    openapiFields.add("clientCertExclusionPaths");
    openapiFields.add("cloningInfo");
    openapiFields.add("containerSize");
    openapiFields.add("dailyMemoryTimeQuota");
    openapiFields.add("defaultHostName");
    openapiFields.add("enabled");
    openapiFields.add("enabledHostNames");
    openapiFields.add("hostNameSslStates");
    openapiFields.add("hostNames");
    openapiFields.add("hostNamesDisabled");
    openapiFields.add("hostingEnvironmentProfile");
    openapiFields.add("httpsOnly");
    openapiFields.add("hyperV");
    openapiFields.add("inProgressOperationId");
    openapiFields.add("isDefaultContainer");
    openapiFields.add("isXenon");
    openapiFields.add("lastModifiedTimeUtc");
    openapiFields.add("maxNumberOfWorkers");
    openapiFields.add("outboundIpAddresses");
    openapiFields.add("possibleOutboundIpAddresses");
    openapiFields.add("redundancyMode");
    openapiFields.add("repositorySiteName");
    openapiFields.add("reserved");
    openapiFields.add("resourceGroup");
    openapiFields.add("scmSiteAlsoStopped");
    openapiFields.add("serverFarmId");
    openapiFields.add("siteConfig");
    openapiFields.add("slotSwapStatus");
    openapiFields.add("state");
    openapiFields.add("suspendedTill");
    openapiFields.add("targetSwapSlot");
    openapiFields.add("trafficManagerHostNames");
    openapiFields.add("usageState");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AppServiceEnvironmentsChangeVnet200ResponseValueInnerProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AppServiceEnvironmentsChangeVnet200ResponseValueInnerProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AppServiceEnvironmentsChangeVnet200ResponseValueInnerProperties is not found in the empty JSON string", AppServiceEnvironmentsChangeVnet200ResponseValueInnerProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AppServiceEnvironmentsChangeVnet200ResponseValueInnerProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AppServiceEnvironmentsChangeVnet200ResponseValueInnerProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("availabilityState") != null && !jsonObj.get("availabilityState").isJsonNull()) && !jsonObj.get("availabilityState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `availabilityState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("availabilityState").toString()));
      }
      // validate the optional field `availabilityState`
      if (jsonObj.get("availabilityState") != null && !jsonObj.get("availabilityState").isJsonNull()) {
        AvailabilityStateEnum.validateJsonElement(jsonObj.get("availabilityState"));
      }
      if ((jsonObj.get("clientCertExclusionPaths") != null && !jsonObj.get("clientCertExclusionPaths").isJsonNull()) && !jsonObj.get("clientCertExclusionPaths").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientCertExclusionPaths` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientCertExclusionPaths").toString()));
      }
      // validate the optional field `cloningInfo`
      if (jsonObj.get("cloningInfo") != null && !jsonObj.get("cloningInfo").isJsonNull()) {
        AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesCloningInfo.validateJsonElement(jsonObj.get("cloningInfo"));
      }
      if ((jsonObj.get("defaultHostName") != null && !jsonObj.get("defaultHostName").isJsonNull()) && !jsonObj.get("defaultHostName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `defaultHostName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("defaultHostName").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("enabledHostNames") != null && !jsonObj.get("enabledHostNames").isJsonNull() && !jsonObj.get("enabledHostNames").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `enabledHostNames` to be an array in the JSON string but got `%s`", jsonObj.get("enabledHostNames").toString()));
      }
      if (jsonObj.get("hostNameSslStates") != null && !jsonObj.get("hostNameSslStates").isJsonNull()) {
        JsonArray jsonArrayhostNameSslStates = jsonObj.getAsJsonArray("hostNameSslStates");
        if (jsonArrayhostNameSslStates != null) {
          // ensure the json data is an array
          if (!jsonObj.get("hostNameSslStates").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `hostNameSslStates` to be an array in the JSON string but got `%s`", jsonObj.get("hostNameSslStates").toString()));
          }

          // validate the optional field `hostNameSslStates` (array)
          for (int i = 0; i < jsonArrayhostNameSslStates.size(); i++) {
            AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesHostNameSslStatesInner.validateJsonElement(jsonArrayhostNameSslStates.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("hostNames") != null && !jsonObj.get("hostNames").isJsonNull() && !jsonObj.get("hostNames").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `hostNames` to be an array in the JSON string but got `%s`", jsonObj.get("hostNames").toString()));
      }
      // validate the optional field `hostingEnvironmentProfile`
      if (jsonObj.get("hostingEnvironmentProfile") != null && !jsonObj.get("hostingEnvironmentProfile").isJsonNull()) {
        AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesHostingEnvironmentProfile.validateJsonElement(jsonObj.get("hostingEnvironmentProfile"));
      }
      if ((jsonObj.get("inProgressOperationId") != null && !jsonObj.get("inProgressOperationId").isJsonNull()) && !jsonObj.get("inProgressOperationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `inProgressOperationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("inProgressOperationId").toString()));
      }
      if ((jsonObj.get("outboundIpAddresses") != null && !jsonObj.get("outboundIpAddresses").isJsonNull()) && !jsonObj.get("outboundIpAddresses").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `outboundIpAddresses` to be a primitive type in the JSON string but got `%s`", jsonObj.get("outboundIpAddresses").toString()));
      }
      if ((jsonObj.get("possibleOutboundIpAddresses") != null && !jsonObj.get("possibleOutboundIpAddresses").isJsonNull()) && !jsonObj.get("possibleOutboundIpAddresses").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `possibleOutboundIpAddresses` to be a primitive type in the JSON string but got `%s`", jsonObj.get("possibleOutboundIpAddresses").toString()));
      }
      if ((jsonObj.get("redundancyMode") != null && !jsonObj.get("redundancyMode").isJsonNull()) && !jsonObj.get("redundancyMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `redundancyMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("redundancyMode").toString()));
      }
      // validate the optional field `redundancyMode`
      if (jsonObj.get("redundancyMode") != null && !jsonObj.get("redundancyMode").isJsonNull()) {
        RedundancyModeEnum.validateJsonElement(jsonObj.get("redundancyMode"));
      }
      if ((jsonObj.get("repositorySiteName") != null && !jsonObj.get("repositorySiteName").isJsonNull()) && !jsonObj.get("repositorySiteName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `repositorySiteName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("repositorySiteName").toString()));
      }
      if ((jsonObj.get("resourceGroup") != null && !jsonObj.get("resourceGroup").isJsonNull()) && !jsonObj.get("resourceGroup").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceGroup` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourceGroup").toString()));
      }
      if ((jsonObj.get("serverFarmId") != null && !jsonObj.get("serverFarmId").isJsonNull()) && !jsonObj.get("serverFarmId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serverFarmId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serverFarmId").toString()));
      }
      // validate the optional field `siteConfig`
      if (jsonObj.get("siteConfig") != null && !jsonObj.get("siteConfig").isJsonNull()) {
        AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSiteConfig.validateJsonElement(jsonObj.get("siteConfig"));
      }
      // validate the optional field `slotSwapStatus`
      if (jsonObj.get("slotSwapStatus") != null && !jsonObj.get("slotSwapStatus").isJsonNull()) {
        AppServiceEnvironmentsChangeVnet200ResponseValueInnerPropertiesSlotSwapStatus.validateJsonElement(jsonObj.get("slotSwapStatus"));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      if ((jsonObj.get("targetSwapSlot") != null && !jsonObj.get("targetSwapSlot").isJsonNull()) && !jsonObj.get("targetSwapSlot").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetSwapSlot` to be a primitive type in the JSON string but got `%s`", jsonObj.get("targetSwapSlot").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("trafficManagerHostNames") != null && !jsonObj.get("trafficManagerHostNames").isJsonNull() && !jsonObj.get("trafficManagerHostNames").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `trafficManagerHostNames` to be an array in the JSON string but got `%s`", jsonObj.get("trafficManagerHostNames").toString()));
      }
      if ((jsonObj.get("usageState") != null && !jsonObj.get("usageState").isJsonNull()) && !jsonObj.get("usageState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `usageState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("usageState").toString()));
      }
      // validate the optional field `usageState`
      if (jsonObj.get("usageState") != null && !jsonObj.get("usageState").isJsonNull()) {
        UsageStateEnum.validateJsonElement(jsonObj.get("usageState"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AppServiceEnvironmentsChangeVnet200ResponseValueInnerProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AppServiceEnvironmentsChangeVnet200ResponseValueInnerProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AppServiceEnvironmentsChangeVnet200ResponseValueInnerProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AppServiceEnvironmentsChangeVnet200ResponseValueInnerProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<AppServiceEnvironmentsChangeVnet200ResponseValueInnerProperties>() {
           @Override
           public void write(JsonWriter out, AppServiceEnvironmentsChangeVnet200ResponseValueInnerProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AppServiceEnvironmentsChangeVnet200ResponseValueInnerProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AppServiceEnvironmentsChangeVnet200ResponseValueInnerProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AppServiceEnvironmentsChangeVnet200ResponseValueInnerProperties
   * @throws IOException if the JSON string is invalid with respect to AppServiceEnvironmentsChangeVnet200ResponseValueInnerProperties
   */
  public static AppServiceEnvironmentsChangeVnet200ResponseValueInnerProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AppServiceEnvironmentsChangeVnet200ResponseValueInnerProperties.class);
  }

  /**
   * Convert an instance of AppServiceEnvironmentsChangeVnet200ResponseValueInnerProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

