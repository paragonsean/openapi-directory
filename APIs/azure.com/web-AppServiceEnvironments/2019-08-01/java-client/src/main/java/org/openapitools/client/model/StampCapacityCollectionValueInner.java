/*
 * AppServiceEnvironments API Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Stamp capacity information.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:58:51.419617-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StampCapacityCollectionValueInner {
  public static final String SERIALIZED_NAME_AVAILABLE_CAPACITY = "availableCapacity";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_CAPACITY)
  private Long availableCapacity;

  /**
   * Shared/dedicated workers.
   */
  @JsonAdapter(ComputeModeEnum.Adapter.class)
  public enum ComputeModeEnum {
    SHARED("Shared"),
    
    DEDICATED("Dedicated"),
    
    DYNAMIC("Dynamic");

    private String value;

    ComputeModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ComputeModeEnum fromValue(String value) {
      for (ComputeModeEnum b : ComputeModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ComputeModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ComputeModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ComputeModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ComputeModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ComputeModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_COMPUTE_MODE = "computeMode";
  @SerializedName(SERIALIZED_NAME_COMPUTE_MODE)
  private ComputeModeEnum computeMode;

  public static final String SERIALIZED_NAME_EXCLUDE_FROM_CAPACITY_ALLOCATION = "excludeFromCapacityAllocation";
  @SerializedName(SERIALIZED_NAME_EXCLUDE_FROM_CAPACITY_ALLOCATION)
  private Boolean excludeFromCapacityAllocation;

  public static final String SERIALIZED_NAME_IS_APPLICABLE_FOR_ALL_COMPUTE_MODES = "isApplicableForAllComputeModes";
  @SerializedName(SERIALIZED_NAME_IS_APPLICABLE_FOR_ALL_COMPUTE_MODES)
  private Boolean isApplicableForAllComputeModes;

  public static final String SERIALIZED_NAME_IS_LINUX = "isLinux";
  @SerializedName(SERIALIZED_NAME_IS_LINUX)
  private Boolean isLinux;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SITE_MODE = "siteMode";
  @SerializedName(SERIALIZED_NAME_SITE_MODE)
  private String siteMode;

  public static final String SERIALIZED_NAME_TOTAL_CAPACITY = "totalCapacity";
  @SerializedName(SERIALIZED_NAME_TOTAL_CAPACITY)
  private Long totalCapacity;

  public static final String SERIALIZED_NAME_UNIT = "unit";
  @SerializedName(SERIALIZED_NAME_UNIT)
  private String unit;

  /**
   * Size of the machines.
   */
  @JsonAdapter(WorkerSizeEnum.Adapter.class)
  public enum WorkerSizeEnum {
    SMALL("Small"),
    
    MEDIUM("Medium"),
    
    LARGE("Large"),
    
    D1("D1"),
    
    D2("D2"),
    
    D3("D3"),
    
    NESTED_SMALL("NestedSmall"),
    
    DEFAULT("Default");

    private String value;

    WorkerSizeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static WorkerSizeEnum fromValue(String value) {
      for (WorkerSizeEnum b : WorkerSizeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<WorkerSizeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final WorkerSizeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public WorkerSizeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return WorkerSizeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      WorkerSizeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_WORKER_SIZE = "workerSize";
  @SerializedName(SERIALIZED_NAME_WORKER_SIZE)
  private WorkerSizeEnum workerSize;

  public static final String SERIALIZED_NAME_WORKER_SIZE_ID = "workerSizeId";
  @SerializedName(SERIALIZED_NAME_WORKER_SIZE_ID)
  private Integer workerSizeId;

  public StampCapacityCollectionValueInner() {
  }

  public StampCapacityCollectionValueInner availableCapacity(Long availableCapacity) {
    this.availableCapacity = availableCapacity;
    return this;
  }

  /**
   * Available capacity (# of machines, bytes of storage etc...).
   * @return availableCapacity
   */
  @javax.annotation.Nullable
  public Long getAvailableCapacity() {
    return availableCapacity;
  }

  public void setAvailableCapacity(Long availableCapacity) {
    this.availableCapacity = availableCapacity;
  }


  public StampCapacityCollectionValueInner computeMode(ComputeModeEnum computeMode) {
    this.computeMode = computeMode;
    return this;
  }

  /**
   * Shared/dedicated workers.
   * @return computeMode
   */
  @javax.annotation.Nullable
  public ComputeModeEnum getComputeMode() {
    return computeMode;
  }

  public void setComputeMode(ComputeModeEnum computeMode) {
    this.computeMode = computeMode;
  }


  public StampCapacityCollectionValueInner excludeFromCapacityAllocation(Boolean excludeFromCapacityAllocation) {
    this.excludeFromCapacityAllocation = excludeFromCapacityAllocation;
    return this;
  }

  /**
   * If &lt;code&gt;true&lt;/code&gt;, it includes basic apps. Basic apps are not used for capacity allocation.
   * @return excludeFromCapacityAllocation
   */
  @javax.annotation.Nullable
  public Boolean getExcludeFromCapacityAllocation() {
    return excludeFromCapacityAllocation;
  }

  public void setExcludeFromCapacityAllocation(Boolean excludeFromCapacityAllocation) {
    this.excludeFromCapacityAllocation = excludeFromCapacityAllocation;
  }


  public StampCapacityCollectionValueInner isApplicableForAllComputeModes(Boolean isApplicableForAllComputeModes) {
    this.isApplicableForAllComputeModes = isApplicableForAllComputeModes;
    return this;
  }

  /**
   * &lt;code&gt;true&lt;/code&gt; if capacity is applicable for all apps; otherwise, &lt;code&gt;false&lt;/code&gt;.
   * @return isApplicableForAllComputeModes
   */
  @javax.annotation.Nullable
  public Boolean getIsApplicableForAllComputeModes() {
    return isApplicableForAllComputeModes;
  }

  public void setIsApplicableForAllComputeModes(Boolean isApplicableForAllComputeModes) {
    this.isApplicableForAllComputeModes = isApplicableForAllComputeModes;
  }


  public StampCapacityCollectionValueInner isLinux(Boolean isLinux) {
    this.isLinux = isLinux;
    return this;
  }

  /**
   * Is this a linux stamp capacity
   * @return isLinux
   */
  @javax.annotation.Nullable
  public Boolean getIsLinux() {
    return isLinux;
  }

  public void setIsLinux(Boolean isLinux) {
    this.isLinux = isLinux;
  }


  public StampCapacityCollectionValueInner name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of the stamp.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public StampCapacityCollectionValueInner siteMode(String siteMode) {
    this.siteMode = siteMode;
    return this;
  }

  /**
   * Shared or Dedicated.
   * @return siteMode
   */
  @javax.annotation.Nullable
  public String getSiteMode() {
    return siteMode;
  }

  public void setSiteMode(String siteMode) {
    this.siteMode = siteMode;
  }


  public StampCapacityCollectionValueInner totalCapacity(Long totalCapacity) {
    this.totalCapacity = totalCapacity;
    return this;
  }

  /**
   * Total capacity (# of machines, bytes of storage etc...).
   * @return totalCapacity
   */
  @javax.annotation.Nullable
  public Long getTotalCapacity() {
    return totalCapacity;
  }

  public void setTotalCapacity(Long totalCapacity) {
    this.totalCapacity = totalCapacity;
  }


  public StampCapacityCollectionValueInner unit(String unit) {
    this.unit = unit;
    return this;
  }

  /**
   * Name of the unit.
   * @return unit
   */
  @javax.annotation.Nullable
  public String getUnit() {
    return unit;
  }

  public void setUnit(String unit) {
    this.unit = unit;
  }


  public StampCapacityCollectionValueInner workerSize(WorkerSizeEnum workerSize) {
    this.workerSize = workerSize;
    return this;
  }

  /**
   * Size of the machines.
   * @return workerSize
   */
  @javax.annotation.Nullable
  public WorkerSizeEnum getWorkerSize() {
    return workerSize;
  }

  public void setWorkerSize(WorkerSizeEnum workerSize) {
    this.workerSize = workerSize;
  }


  public StampCapacityCollectionValueInner workerSizeId(Integer workerSizeId) {
    this.workerSizeId = workerSizeId;
    return this;
  }

  /**
   * Size ID of machines:  0 - Small 1 - Medium 2 - Large
   * @return workerSizeId
   */
  @javax.annotation.Nullable
  public Integer getWorkerSizeId() {
    return workerSizeId;
  }

  public void setWorkerSizeId(Integer workerSizeId) {
    this.workerSizeId = workerSizeId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StampCapacityCollectionValueInner stampCapacityCollectionValueInner = (StampCapacityCollectionValueInner) o;
    return Objects.equals(this.availableCapacity, stampCapacityCollectionValueInner.availableCapacity) &&
        Objects.equals(this.computeMode, stampCapacityCollectionValueInner.computeMode) &&
        Objects.equals(this.excludeFromCapacityAllocation, stampCapacityCollectionValueInner.excludeFromCapacityAllocation) &&
        Objects.equals(this.isApplicableForAllComputeModes, stampCapacityCollectionValueInner.isApplicableForAllComputeModes) &&
        Objects.equals(this.isLinux, stampCapacityCollectionValueInner.isLinux) &&
        Objects.equals(this.name, stampCapacityCollectionValueInner.name) &&
        Objects.equals(this.siteMode, stampCapacityCollectionValueInner.siteMode) &&
        Objects.equals(this.totalCapacity, stampCapacityCollectionValueInner.totalCapacity) &&
        Objects.equals(this.unit, stampCapacityCollectionValueInner.unit) &&
        Objects.equals(this.workerSize, stampCapacityCollectionValueInner.workerSize) &&
        Objects.equals(this.workerSizeId, stampCapacityCollectionValueInner.workerSizeId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(availableCapacity, computeMode, excludeFromCapacityAllocation, isApplicableForAllComputeModes, isLinux, name, siteMode, totalCapacity, unit, workerSize, workerSizeId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StampCapacityCollectionValueInner {\n");
    sb.append("    availableCapacity: ").append(toIndentedString(availableCapacity)).append("\n");
    sb.append("    computeMode: ").append(toIndentedString(computeMode)).append("\n");
    sb.append("    excludeFromCapacityAllocation: ").append(toIndentedString(excludeFromCapacityAllocation)).append("\n");
    sb.append("    isApplicableForAllComputeModes: ").append(toIndentedString(isApplicableForAllComputeModes)).append("\n");
    sb.append("    isLinux: ").append(toIndentedString(isLinux)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    siteMode: ").append(toIndentedString(siteMode)).append("\n");
    sb.append("    totalCapacity: ").append(toIndentedString(totalCapacity)).append("\n");
    sb.append("    unit: ").append(toIndentedString(unit)).append("\n");
    sb.append("    workerSize: ").append(toIndentedString(workerSize)).append("\n");
    sb.append("    workerSizeId: ").append(toIndentedString(workerSizeId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("availableCapacity");
    openapiFields.add("computeMode");
    openapiFields.add("excludeFromCapacityAllocation");
    openapiFields.add("isApplicableForAllComputeModes");
    openapiFields.add("isLinux");
    openapiFields.add("name");
    openapiFields.add("siteMode");
    openapiFields.add("totalCapacity");
    openapiFields.add("unit");
    openapiFields.add("workerSize");
    openapiFields.add("workerSizeId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StampCapacityCollectionValueInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StampCapacityCollectionValueInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StampCapacityCollectionValueInner is not found in the empty JSON string", StampCapacityCollectionValueInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StampCapacityCollectionValueInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StampCapacityCollectionValueInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("computeMode") != null && !jsonObj.get("computeMode").isJsonNull()) && !jsonObj.get("computeMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `computeMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("computeMode").toString()));
      }
      // validate the optional field `computeMode`
      if (jsonObj.get("computeMode") != null && !jsonObj.get("computeMode").isJsonNull()) {
        ComputeModeEnum.validateJsonElement(jsonObj.get("computeMode"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("siteMode") != null && !jsonObj.get("siteMode").isJsonNull()) && !jsonObj.get("siteMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `siteMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("siteMode").toString()));
      }
      if ((jsonObj.get("unit") != null && !jsonObj.get("unit").isJsonNull()) && !jsonObj.get("unit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `unit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("unit").toString()));
      }
      if ((jsonObj.get("workerSize") != null && !jsonObj.get("workerSize").isJsonNull()) && !jsonObj.get("workerSize").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `workerSize` to be a primitive type in the JSON string but got `%s`", jsonObj.get("workerSize").toString()));
      }
      // validate the optional field `workerSize`
      if (jsonObj.get("workerSize") != null && !jsonObj.get("workerSize").isJsonNull()) {
        WorkerSizeEnum.validateJsonElement(jsonObj.get("workerSize"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StampCapacityCollectionValueInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StampCapacityCollectionValueInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StampCapacityCollectionValueInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StampCapacityCollectionValueInner.class));

       return (TypeAdapter<T>) new TypeAdapter<StampCapacityCollectionValueInner>() {
           @Override
           public void write(JsonWriter out, StampCapacityCollectionValueInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StampCapacityCollectionValueInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StampCapacityCollectionValueInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StampCapacityCollectionValueInner
   * @throws IOException if the JSON string is invalid with respect to StampCapacityCollectionValueInner
   */
  public static StampCapacityCollectionValueInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StampCapacityCollectionValueInner.class);
  }

  /**
   * Convert an instance of StampCapacityCollectionValueInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

