/*
 * AppServiceEnvironments API Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AddressResponse;
import org.openapitools.client.model.AppServiceEnvironmentCollection;
import org.openapitools.client.model.AppServiceEnvironmentPatchResource;
import org.openapitools.client.model.AppServiceEnvironmentResource;
import org.openapitools.client.model.AppServiceEnvironmentsChangeVnet200Response;
import org.openapitools.client.model.AppServiceEnvironmentsChangeVnetRequest;
import org.openapitools.client.model.AppServiceEnvironmentsListAppServicePlans200Response;
import org.openapitools.client.model.AppServiceEnvironmentsListDefaultResponse;
import org.openapitools.client.model.AppServiceEnvironmentsListOperations200ResponseInner;
import org.openapitools.client.model.AppServiceEnvironmentsListUsages200Response;
import org.openapitools.client.model.HostingEnvironmentDiagnostics;
import org.openapitools.client.model.InboundEnvironmentEndpointCollection;
import org.openapitools.client.model.OutboundEnvironmentEndpointCollection;
import org.openapitools.client.model.ResourceMetricDefinitionCollection;
import org.openapitools.client.model.SkuInfoCollection;
import org.openapitools.client.model.StampCapacityCollection;
import org.openapitools.client.model.UsageCollection;
import org.openapitools.client.model.WorkerPoolCollection;
import org.openapitools.client.model.WorkerPoolResource;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AppServiceEnvironmentsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AppServiceEnvironmentsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AppServiceEnvironmentsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for appServiceEnvironmentsChangeVnet
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service Environment. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param vnetInfo Details for the new virtual network. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Operation is in progress. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServiceEnvironmentsChangeVnetCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, AppServiceEnvironmentsChangeVnetRequest vnetInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = vnetInfo;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/changeVirtualNetwork"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appServiceEnvironmentsChangeVnetValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, AppServiceEnvironmentsChangeVnetRequest vnetInfo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling appServiceEnvironmentsChangeVnet(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling appServiceEnvironmentsChangeVnet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling appServiceEnvironmentsChangeVnet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling appServiceEnvironmentsChangeVnet(Async)");
        }

        // verify the required parameter 'vnetInfo' is set
        if (vnetInfo == null) {
            throw new ApiException("Missing the required parameter 'vnetInfo' when calling appServiceEnvironmentsChangeVnet(Async)");
        }

        return appServiceEnvironmentsChangeVnetCall(resourceGroupName, name, subscriptionId, apiVersion, vnetInfo, _callback);

    }

    /**
     * Move an App Service Environment to a different VNET.
     * Description for Move an App Service Environment to a different VNET.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service Environment. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param vnetInfo Details for the new virtual network. (required)
     * @return AppServiceEnvironmentsChangeVnet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Operation is in progress. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public AppServiceEnvironmentsChangeVnet200Response appServiceEnvironmentsChangeVnet(String resourceGroupName, String name, String subscriptionId, String apiVersion, AppServiceEnvironmentsChangeVnetRequest vnetInfo) throws ApiException {
        ApiResponse<AppServiceEnvironmentsChangeVnet200Response> localVarResp = appServiceEnvironmentsChangeVnetWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion, vnetInfo);
        return localVarResp.getData();
    }

    /**
     * Move an App Service Environment to a different VNET.
     * Description for Move an App Service Environment to a different VNET.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service Environment. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param vnetInfo Details for the new virtual network. (required)
     * @return ApiResponse&lt;AppServiceEnvironmentsChangeVnet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Operation is in progress. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppServiceEnvironmentsChangeVnet200Response> appServiceEnvironmentsChangeVnetWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion, AppServiceEnvironmentsChangeVnetRequest vnetInfo) throws ApiException {
        okhttp3.Call localVarCall = appServiceEnvironmentsChangeVnetValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, vnetInfo, null);
        Type localVarReturnType = new TypeToken<AppServiceEnvironmentsChangeVnet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Move an App Service Environment to a different VNET. (asynchronously)
     * Description for Move an App Service Environment to a different VNET.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service Environment. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param vnetInfo Details for the new virtual network. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Operation is in progress. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServiceEnvironmentsChangeVnetAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, AppServiceEnvironmentsChangeVnetRequest vnetInfo, final ApiCallback<AppServiceEnvironmentsChangeVnet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = appServiceEnvironmentsChangeVnetValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, vnetInfo, _callback);
        Type localVarReturnType = new TypeToken<AppServiceEnvironmentsChangeVnet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appServiceEnvironmentsCreateOrUpdate
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service Environment. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param hostingEnvironmentEnvelope Configuration details of the App Service Environment. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Operation is in progress. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServiceEnvironmentsCreateOrUpdateCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, AppServiceEnvironmentResource hostingEnvironmentEnvelope, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = hostingEnvironmentEnvelope;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appServiceEnvironmentsCreateOrUpdateValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, AppServiceEnvironmentResource hostingEnvironmentEnvelope, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling appServiceEnvironmentsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling appServiceEnvironmentsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling appServiceEnvironmentsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling appServiceEnvironmentsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'hostingEnvironmentEnvelope' is set
        if (hostingEnvironmentEnvelope == null) {
            throw new ApiException("Missing the required parameter 'hostingEnvironmentEnvelope' when calling appServiceEnvironmentsCreateOrUpdate(Async)");
        }

        return appServiceEnvironmentsCreateOrUpdateCall(resourceGroupName, name, subscriptionId, apiVersion, hostingEnvironmentEnvelope, _callback);

    }

    /**
     * Create or update an App Service Environment.
     * Description for Create or update an App Service Environment.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service Environment. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param hostingEnvironmentEnvelope Configuration details of the App Service Environment. (required)
     * @return AppServiceEnvironmentResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Operation is in progress. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public AppServiceEnvironmentResource appServiceEnvironmentsCreateOrUpdate(String resourceGroupName, String name, String subscriptionId, String apiVersion, AppServiceEnvironmentResource hostingEnvironmentEnvelope) throws ApiException {
        ApiResponse<AppServiceEnvironmentResource> localVarResp = appServiceEnvironmentsCreateOrUpdateWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion, hostingEnvironmentEnvelope);
        return localVarResp.getData();
    }

    /**
     * Create or update an App Service Environment.
     * Description for Create or update an App Service Environment.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service Environment. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param hostingEnvironmentEnvelope Configuration details of the App Service Environment. (required)
     * @return ApiResponse&lt;AppServiceEnvironmentResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Operation is in progress. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppServiceEnvironmentResource> appServiceEnvironmentsCreateOrUpdateWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion, AppServiceEnvironmentResource hostingEnvironmentEnvelope) throws ApiException {
        okhttp3.Call localVarCall = appServiceEnvironmentsCreateOrUpdateValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, hostingEnvironmentEnvelope, null);
        Type localVarReturnType = new TypeToken<AppServiceEnvironmentResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create or update an App Service Environment. (asynchronously)
     * Description for Create or update an App Service Environment.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service Environment. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param hostingEnvironmentEnvelope Configuration details of the App Service Environment. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Operation is in progress. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServiceEnvironmentsCreateOrUpdateAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, AppServiceEnvironmentResource hostingEnvironmentEnvelope, final ApiCallback<AppServiceEnvironmentResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = appServiceEnvironmentsCreateOrUpdateValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, hostingEnvironmentEnvelope, _callback);
        Type localVarReturnType = new TypeToken<AppServiceEnvironmentResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appServiceEnvironmentsCreateOrUpdateMultiRolePool
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service Environment. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param multiRolePoolEnvelope Properties of the multi-role pool. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Operation is in progress. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServiceEnvironmentsCreateOrUpdateMultiRolePoolCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, WorkerPoolResource multiRolePoolEnvelope, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = multiRolePoolEnvelope;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/multiRolePools/default"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appServiceEnvironmentsCreateOrUpdateMultiRolePoolValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, WorkerPoolResource multiRolePoolEnvelope, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling appServiceEnvironmentsCreateOrUpdateMultiRolePool(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling appServiceEnvironmentsCreateOrUpdateMultiRolePool(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling appServiceEnvironmentsCreateOrUpdateMultiRolePool(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling appServiceEnvironmentsCreateOrUpdateMultiRolePool(Async)");
        }

        // verify the required parameter 'multiRolePoolEnvelope' is set
        if (multiRolePoolEnvelope == null) {
            throw new ApiException("Missing the required parameter 'multiRolePoolEnvelope' when calling appServiceEnvironmentsCreateOrUpdateMultiRolePool(Async)");
        }

        return appServiceEnvironmentsCreateOrUpdateMultiRolePoolCall(resourceGroupName, name, subscriptionId, apiVersion, multiRolePoolEnvelope, _callback);

    }

    /**
     * Create or update a multi-role pool.
     * Description for Create or update a multi-role pool.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service Environment. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param multiRolePoolEnvelope Properties of the multi-role pool. (required)
     * @return WorkerPoolResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Operation is in progress. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public WorkerPoolResource appServiceEnvironmentsCreateOrUpdateMultiRolePool(String resourceGroupName, String name, String subscriptionId, String apiVersion, WorkerPoolResource multiRolePoolEnvelope) throws ApiException {
        ApiResponse<WorkerPoolResource> localVarResp = appServiceEnvironmentsCreateOrUpdateMultiRolePoolWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion, multiRolePoolEnvelope);
        return localVarResp.getData();
    }

    /**
     * Create or update a multi-role pool.
     * Description for Create or update a multi-role pool.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service Environment. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param multiRolePoolEnvelope Properties of the multi-role pool. (required)
     * @return ApiResponse&lt;WorkerPoolResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Operation is in progress. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WorkerPoolResource> appServiceEnvironmentsCreateOrUpdateMultiRolePoolWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion, WorkerPoolResource multiRolePoolEnvelope) throws ApiException {
        okhttp3.Call localVarCall = appServiceEnvironmentsCreateOrUpdateMultiRolePoolValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, multiRolePoolEnvelope, null);
        Type localVarReturnType = new TypeToken<WorkerPoolResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create or update a multi-role pool. (asynchronously)
     * Description for Create or update a multi-role pool.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service Environment. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param multiRolePoolEnvelope Properties of the multi-role pool. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Operation is in progress. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServiceEnvironmentsCreateOrUpdateMultiRolePoolAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, WorkerPoolResource multiRolePoolEnvelope, final ApiCallback<WorkerPoolResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = appServiceEnvironmentsCreateOrUpdateMultiRolePoolValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, multiRolePoolEnvelope, _callback);
        Type localVarReturnType = new TypeToken<WorkerPoolResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appServiceEnvironmentsCreateOrUpdateWorkerPool
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service Environment. (required)
     * @param workerPoolName Name of the worker pool. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param workerPoolEnvelope Properties of the worker pool. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Operation is in progress. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServiceEnvironmentsCreateOrUpdateWorkerPoolCall(String resourceGroupName, String name, String workerPoolName, String subscriptionId, String apiVersion, WorkerPoolResource workerPoolEnvelope, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = workerPoolEnvelope;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/workerPools/{workerPoolName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "workerPoolName" + "}", localVarApiClient.escapeString(workerPoolName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appServiceEnvironmentsCreateOrUpdateWorkerPoolValidateBeforeCall(String resourceGroupName, String name, String workerPoolName, String subscriptionId, String apiVersion, WorkerPoolResource workerPoolEnvelope, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling appServiceEnvironmentsCreateOrUpdateWorkerPool(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling appServiceEnvironmentsCreateOrUpdateWorkerPool(Async)");
        }

        // verify the required parameter 'workerPoolName' is set
        if (workerPoolName == null) {
            throw new ApiException("Missing the required parameter 'workerPoolName' when calling appServiceEnvironmentsCreateOrUpdateWorkerPool(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling appServiceEnvironmentsCreateOrUpdateWorkerPool(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling appServiceEnvironmentsCreateOrUpdateWorkerPool(Async)");
        }

        // verify the required parameter 'workerPoolEnvelope' is set
        if (workerPoolEnvelope == null) {
            throw new ApiException("Missing the required parameter 'workerPoolEnvelope' when calling appServiceEnvironmentsCreateOrUpdateWorkerPool(Async)");
        }

        return appServiceEnvironmentsCreateOrUpdateWorkerPoolCall(resourceGroupName, name, workerPoolName, subscriptionId, apiVersion, workerPoolEnvelope, _callback);

    }

    /**
     * Create or update a worker pool.
     * Description for Create or update a worker pool.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service Environment. (required)
     * @param workerPoolName Name of the worker pool. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param workerPoolEnvelope Properties of the worker pool. (required)
     * @return WorkerPoolResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Operation is in progress. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public WorkerPoolResource appServiceEnvironmentsCreateOrUpdateWorkerPool(String resourceGroupName, String name, String workerPoolName, String subscriptionId, String apiVersion, WorkerPoolResource workerPoolEnvelope) throws ApiException {
        ApiResponse<WorkerPoolResource> localVarResp = appServiceEnvironmentsCreateOrUpdateWorkerPoolWithHttpInfo(resourceGroupName, name, workerPoolName, subscriptionId, apiVersion, workerPoolEnvelope);
        return localVarResp.getData();
    }

    /**
     * Create or update a worker pool.
     * Description for Create or update a worker pool.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service Environment. (required)
     * @param workerPoolName Name of the worker pool. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param workerPoolEnvelope Properties of the worker pool. (required)
     * @return ApiResponse&lt;WorkerPoolResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Operation is in progress. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WorkerPoolResource> appServiceEnvironmentsCreateOrUpdateWorkerPoolWithHttpInfo(String resourceGroupName, String name, String workerPoolName, String subscriptionId, String apiVersion, WorkerPoolResource workerPoolEnvelope) throws ApiException {
        okhttp3.Call localVarCall = appServiceEnvironmentsCreateOrUpdateWorkerPoolValidateBeforeCall(resourceGroupName, name, workerPoolName, subscriptionId, apiVersion, workerPoolEnvelope, null);
        Type localVarReturnType = new TypeToken<WorkerPoolResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create or update a worker pool. (asynchronously)
     * Description for Create or update a worker pool.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service Environment. (required)
     * @param workerPoolName Name of the worker pool. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param workerPoolEnvelope Properties of the worker pool. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Operation is in progress. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServiceEnvironmentsCreateOrUpdateWorkerPoolAsync(String resourceGroupName, String name, String workerPoolName, String subscriptionId, String apiVersion, WorkerPoolResource workerPoolEnvelope, final ApiCallback<WorkerPoolResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = appServiceEnvironmentsCreateOrUpdateWorkerPoolValidateBeforeCall(resourceGroupName, name, workerPoolName, subscriptionId, apiVersion, workerPoolEnvelope, _callback);
        Type localVarReturnType = new TypeToken<WorkerPoolResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appServiceEnvironmentsDelete
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service Environment. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param forceDelete Specify &lt;code&gt;true&lt;/code&gt; to force the deletion even if the App Service Environment contains resources. The default is &lt;code&gt;false&lt;/code&gt;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Operation is in progress. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> App Service Environment does not exist </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServiceEnvironmentsDeleteCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, Boolean forceDelete, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (forceDelete != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("forceDelete", forceDelete));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appServiceEnvironmentsDeleteValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, Boolean forceDelete, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling appServiceEnvironmentsDelete(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling appServiceEnvironmentsDelete(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling appServiceEnvironmentsDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling appServiceEnvironmentsDelete(Async)");
        }

        return appServiceEnvironmentsDeleteCall(resourceGroupName, name, subscriptionId, apiVersion, forceDelete, _callback);

    }

    /**
     * Delete an App Service Environment.
     * Description for Delete an App Service Environment.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service Environment. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param forceDelete Specify &lt;code&gt;true&lt;/code&gt; to force the deletion even if the App Service Environment contains resources. The default is &lt;code&gt;false&lt;/code&gt;. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Operation is in progress. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> App Service Environment does not exist </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public void appServiceEnvironmentsDelete(String resourceGroupName, String name, String subscriptionId, String apiVersion, Boolean forceDelete) throws ApiException {
        appServiceEnvironmentsDeleteWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion, forceDelete);
    }

    /**
     * Delete an App Service Environment.
     * Description for Delete an App Service Environment.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service Environment. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param forceDelete Specify &lt;code&gt;true&lt;/code&gt; to force the deletion even if the App Service Environment contains resources. The default is &lt;code&gt;false&lt;/code&gt;. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Operation is in progress. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> App Service Environment does not exist </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> appServiceEnvironmentsDeleteWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion, Boolean forceDelete) throws ApiException {
        okhttp3.Call localVarCall = appServiceEnvironmentsDeleteValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, forceDelete, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete an App Service Environment. (asynchronously)
     * Description for Delete an App Service Environment.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service Environment. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param forceDelete Specify &lt;code&gt;true&lt;/code&gt; to force the deletion even if the App Service Environment contains resources. The default is &lt;code&gt;false&lt;/code&gt;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Operation is in progress. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> App Service Environment does not exist </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServiceEnvironmentsDeleteAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, Boolean forceDelete, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = appServiceEnvironmentsDeleteValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, forceDelete, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for appServiceEnvironmentsGet
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service Environment. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServiceEnvironmentsGetCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appServiceEnvironmentsGetValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling appServiceEnvironmentsGet(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling appServiceEnvironmentsGet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling appServiceEnvironmentsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling appServiceEnvironmentsGet(Async)");
        }

        return appServiceEnvironmentsGetCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * Get the properties of an App Service Environment.
     * Description for Get the properties of an App Service Environment.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service Environment. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return AppServiceEnvironmentResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public AppServiceEnvironmentResource appServiceEnvironmentsGet(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<AppServiceEnvironmentResource> localVarResp = appServiceEnvironmentsGetWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get the properties of an App Service Environment.
     * Description for Get the properties of an App Service Environment.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service Environment. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;AppServiceEnvironmentResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppServiceEnvironmentResource> appServiceEnvironmentsGetWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = appServiceEnvironmentsGetValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<AppServiceEnvironmentResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the properties of an App Service Environment. (asynchronously)
     * Description for Get the properties of an App Service Environment.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service Environment. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServiceEnvironmentsGetAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback<AppServiceEnvironmentResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = appServiceEnvironmentsGetValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<AppServiceEnvironmentResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appServiceEnvironmentsGetDiagnosticsItem
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service Environment. (required)
     * @param diagnosticsName Name of the diagnostics item. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServiceEnvironmentsGetDiagnosticsItemCall(String resourceGroupName, String name, String diagnosticsName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/diagnostics/{diagnosticsName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "diagnosticsName" + "}", localVarApiClient.escapeString(diagnosticsName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appServiceEnvironmentsGetDiagnosticsItemValidateBeforeCall(String resourceGroupName, String name, String diagnosticsName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling appServiceEnvironmentsGetDiagnosticsItem(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling appServiceEnvironmentsGetDiagnosticsItem(Async)");
        }

        // verify the required parameter 'diagnosticsName' is set
        if (diagnosticsName == null) {
            throw new ApiException("Missing the required parameter 'diagnosticsName' when calling appServiceEnvironmentsGetDiagnosticsItem(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling appServiceEnvironmentsGetDiagnosticsItem(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling appServiceEnvironmentsGetDiagnosticsItem(Async)");
        }

        return appServiceEnvironmentsGetDiagnosticsItemCall(resourceGroupName, name, diagnosticsName, subscriptionId, apiVersion, _callback);

    }

    /**
     * Get a diagnostics item for an App Service Environment.
     * Description for Get a diagnostics item for an App Service Environment.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service Environment. (required)
     * @param diagnosticsName Name of the diagnostics item. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return HostingEnvironmentDiagnostics
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public HostingEnvironmentDiagnostics appServiceEnvironmentsGetDiagnosticsItem(String resourceGroupName, String name, String diagnosticsName, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<HostingEnvironmentDiagnostics> localVarResp = appServiceEnvironmentsGetDiagnosticsItemWithHttpInfo(resourceGroupName, name, diagnosticsName, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get a diagnostics item for an App Service Environment.
     * Description for Get a diagnostics item for an App Service Environment.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service Environment. (required)
     * @param diagnosticsName Name of the diagnostics item. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;HostingEnvironmentDiagnostics&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HostingEnvironmentDiagnostics> appServiceEnvironmentsGetDiagnosticsItemWithHttpInfo(String resourceGroupName, String name, String diagnosticsName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = appServiceEnvironmentsGetDiagnosticsItemValidateBeforeCall(resourceGroupName, name, diagnosticsName, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<HostingEnvironmentDiagnostics>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a diagnostics item for an App Service Environment. (asynchronously)
     * Description for Get a diagnostics item for an App Service Environment.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service Environment. (required)
     * @param diagnosticsName Name of the diagnostics item. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServiceEnvironmentsGetDiagnosticsItemAsync(String resourceGroupName, String name, String diagnosticsName, String subscriptionId, String apiVersion, final ApiCallback<HostingEnvironmentDiagnostics> _callback) throws ApiException {

        okhttp3.Call localVarCall = appServiceEnvironmentsGetDiagnosticsItemValidateBeforeCall(resourceGroupName, name, diagnosticsName, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<HostingEnvironmentDiagnostics>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appServiceEnvironmentsGetInboundNetworkDependenciesEndpoints
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service Environment. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServiceEnvironmentsGetInboundNetworkDependenciesEndpointsCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/inboundNetworkDependenciesEndpoints"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appServiceEnvironmentsGetInboundNetworkDependenciesEndpointsValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling appServiceEnvironmentsGetInboundNetworkDependenciesEndpoints(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling appServiceEnvironmentsGetInboundNetworkDependenciesEndpoints(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling appServiceEnvironmentsGetInboundNetworkDependenciesEndpoints(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling appServiceEnvironmentsGetInboundNetworkDependenciesEndpoints(Async)");
        }

        return appServiceEnvironmentsGetInboundNetworkDependenciesEndpointsCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * Get the network endpoints of all inbound dependencies of an App Service Environment.
     * Description for Get the network endpoints of all inbound dependencies of an App Service Environment.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service Environment. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return InboundEnvironmentEndpointCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public InboundEnvironmentEndpointCollection appServiceEnvironmentsGetInboundNetworkDependenciesEndpoints(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<InboundEnvironmentEndpointCollection> localVarResp = appServiceEnvironmentsGetInboundNetworkDependenciesEndpointsWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get the network endpoints of all inbound dependencies of an App Service Environment.
     * Description for Get the network endpoints of all inbound dependencies of an App Service Environment.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service Environment. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;InboundEnvironmentEndpointCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InboundEnvironmentEndpointCollection> appServiceEnvironmentsGetInboundNetworkDependenciesEndpointsWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = appServiceEnvironmentsGetInboundNetworkDependenciesEndpointsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<InboundEnvironmentEndpointCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the network endpoints of all inbound dependencies of an App Service Environment. (asynchronously)
     * Description for Get the network endpoints of all inbound dependencies of an App Service Environment.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service Environment. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServiceEnvironmentsGetInboundNetworkDependenciesEndpointsAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback<InboundEnvironmentEndpointCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = appServiceEnvironmentsGetInboundNetworkDependenciesEndpointsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<InboundEnvironmentEndpointCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appServiceEnvironmentsGetMultiRolePool
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service Environment. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServiceEnvironmentsGetMultiRolePoolCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/multiRolePools/default"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appServiceEnvironmentsGetMultiRolePoolValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling appServiceEnvironmentsGetMultiRolePool(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling appServiceEnvironmentsGetMultiRolePool(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling appServiceEnvironmentsGetMultiRolePool(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling appServiceEnvironmentsGetMultiRolePool(Async)");
        }

        return appServiceEnvironmentsGetMultiRolePoolCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * Get properties of a multi-role pool.
     * Description for Get properties of a multi-role pool.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service Environment. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return WorkerPoolResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public WorkerPoolResource appServiceEnvironmentsGetMultiRolePool(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<WorkerPoolResource> localVarResp = appServiceEnvironmentsGetMultiRolePoolWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get properties of a multi-role pool.
     * Description for Get properties of a multi-role pool.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service Environment. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;WorkerPoolResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WorkerPoolResource> appServiceEnvironmentsGetMultiRolePoolWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = appServiceEnvironmentsGetMultiRolePoolValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<WorkerPoolResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get properties of a multi-role pool. (asynchronously)
     * Description for Get properties of a multi-role pool.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service Environment. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServiceEnvironmentsGetMultiRolePoolAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback<WorkerPoolResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = appServiceEnvironmentsGetMultiRolePoolValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<WorkerPoolResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appServiceEnvironmentsGetOutboundNetworkDependenciesEndpoints
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service Environment. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServiceEnvironmentsGetOutboundNetworkDependenciesEndpointsCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/outboundNetworkDependenciesEndpoints"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appServiceEnvironmentsGetOutboundNetworkDependenciesEndpointsValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling appServiceEnvironmentsGetOutboundNetworkDependenciesEndpoints(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling appServiceEnvironmentsGetOutboundNetworkDependenciesEndpoints(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling appServiceEnvironmentsGetOutboundNetworkDependenciesEndpoints(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling appServiceEnvironmentsGetOutboundNetworkDependenciesEndpoints(Async)");
        }

        return appServiceEnvironmentsGetOutboundNetworkDependenciesEndpointsCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * Get the network endpoints of all outbound dependencies of an App Service Environment.
     * Description for Get the network endpoints of all outbound dependencies of an App Service Environment.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service Environment. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return OutboundEnvironmentEndpointCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public OutboundEnvironmentEndpointCollection appServiceEnvironmentsGetOutboundNetworkDependenciesEndpoints(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<OutboundEnvironmentEndpointCollection> localVarResp = appServiceEnvironmentsGetOutboundNetworkDependenciesEndpointsWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get the network endpoints of all outbound dependencies of an App Service Environment.
     * Description for Get the network endpoints of all outbound dependencies of an App Service Environment.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service Environment. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;OutboundEnvironmentEndpointCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OutboundEnvironmentEndpointCollection> appServiceEnvironmentsGetOutboundNetworkDependenciesEndpointsWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = appServiceEnvironmentsGetOutboundNetworkDependenciesEndpointsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<OutboundEnvironmentEndpointCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the network endpoints of all outbound dependencies of an App Service Environment. (asynchronously)
     * Description for Get the network endpoints of all outbound dependencies of an App Service Environment.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service Environment. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServiceEnvironmentsGetOutboundNetworkDependenciesEndpointsAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback<OutboundEnvironmentEndpointCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = appServiceEnvironmentsGetOutboundNetworkDependenciesEndpointsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<OutboundEnvironmentEndpointCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appServiceEnvironmentsGetVipInfo
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service Environment. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServiceEnvironmentsGetVipInfoCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/capacities/virtualip"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appServiceEnvironmentsGetVipInfoValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling appServiceEnvironmentsGetVipInfo(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling appServiceEnvironmentsGetVipInfo(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling appServiceEnvironmentsGetVipInfo(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling appServiceEnvironmentsGetVipInfo(Async)");
        }

        return appServiceEnvironmentsGetVipInfoCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * Get IP addresses assigned to an App Service Environment.
     * Description for Get IP addresses assigned to an App Service Environment.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service Environment. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return AddressResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public AddressResponse appServiceEnvironmentsGetVipInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<AddressResponse> localVarResp = appServiceEnvironmentsGetVipInfoWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get IP addresses assigned to an App Service Environment.
     * Description for Get IP addresses assigned to an App Service Environment.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service Environment. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;AddressResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AddressResponse> appServiceEnvironmentsGetVipInfoWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = appServiceEnvironmentsGetVipInfoValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<AddressResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get IP addresses assigned to an App Service Environment. (asynchronously)
     * Description for Get IP addresses assigned to an App Service Environment.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service Environment. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServiceEnvironmentsGetVipInfoAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback<AddressResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = appServiceEnvironmentsGetVipInfoValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<AddressResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appServiceEnvironmentsGetWorkerPool
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service Environment. (required)
     * @param workerPoolName Name of the worker pool. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServiceEnvironmentsGetWorkerPoolCall(String resourceGroupName, String name, String workerPoolName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/workerPools/{workerPoolName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "workerPoolName" + "}", localVarApiClient.escapeString(workerPoolName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appServiceEnvironmentsGetWorkerPoolValidateBeforeCall(String resourceGroupName, String name, String workerPoolName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling appServiceEnvironmentsGetWorkerPool(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling appServiceEnvironmentsGetWorkerPool(Async)");
        }

        // verify the required parameter 'workerPoolName' is set
        if (workerPoolName == null) {
            throw new ApiException("Missing the required parameter 'workerPoolName' when calling appServiceEnvironmentsGetWorkerPool(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling appServiceEnvironmentsGetWorkerPool(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling appServiceEnvironmentsGetWorkerPool(Async)");
        }

        return appServiceEnvironmentsGetWorkerPoolCall(resourceGroupName, name, workerPoolName, subscriptionId, apiVersion, _callback);

    }

    /**
     * Get properties of a worker pool.
     * Description for Get properties of a worker pool.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service Environment. (required)
     * @param workerPoolName Name of the worker pool. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return WorkerPoolResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public WorkerPoolResource appServiceEnvironmentsGetWorkerPool(String resourceGroupName, String name, String workerPoolName, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<WorkerPoolResource> localVarResp = appServiceEnvironmentsGetWorkerPoolWithHttpInfo(resourceGroupName, name, workerPoolName, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get properties of a worker pool.
     * Description for Get properties of a worker pool.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service Environment. (required)
     * @param workerPoolName Name of the worker pool. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;WorkerPoolResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WorkerPoolResource> appServiceEnvironmentsGetWorkerPoolWithHttpInfo(String resourceGroupName, String name, String workerPoolName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = appServiceEnvironmentsGetWorkerPoolValidateBeforeCall(resourceGroupName, name, workerPoolName, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<WorkerPoolResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get properties of a worker pool. (asynchronously)
     * Description for Get properties of a worker pool.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service Environment. (required)
     * @param workerPoolName Name of the worker pool. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServiceEnvironmentsGetWorkerPoolAsync(String resourceGroupName, String name, String workerPoolName, String subscriptionId, String apiVersion, final ApiCallback<WorkerPoolResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = appServiceEnvironmentsGetWorkerPoolValidateBeforeCall(resourceGroupName, name, workerPoolName, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<WorkerPoolResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appServiceEnvironmentsList
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServiceEnvironmentsListCall(String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.Web/hostingEnvironments"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appServiceEnvironmentsListValidateBeforeCall(String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling appServiceEnvironmentsList(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling appServiceEnvironmentsList(Async)");
        }

        return appServiceEnvironmentsListCall(subscriptionId, apiVersion, _callback);

    }

    /**
     * Get all App Service Environments for a subscription.
     * Description for Get all App Service Environments for a subscription.
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return AppServiceEnvironmentCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public AppServiceEnvironmentCollection appServiceEnvironmentsList(String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<AppServiceEnvironmentCollection> localVarResp = appServiceEnvironmentsListWithHttpInfo(subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get all App Service Environments for a subscription.
     * Description for Get all App Service Environments for a subscription.
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;AppServiceEnvironmentCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppServiceEnvironmentCollection> appServiceEnvironmentsListWithHttpInfo(String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = appServiceEnvironmentsListValidateBeforeCall(subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<AppServiceEnvironmentCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all App Service Environments for a subscription. (asynchronously)
     * Description for Get all App Service Environments for a subscription.
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServiceEnvironmentsListAsync(String subscriptionId, String apiVersion, final ApiCallback<AppServiceEnvironmentCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = appServiceEnvironmentsListValidateBeforeCall(subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<AppServiceEnvironmentCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appServiceEnvironmentsListAppServicePlans
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service Environment. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServiceEnvironmentsListAppServicePlansCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/serverfarms"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appServiceEnvironmentsListAppServicePlansValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling appServiceEnvironmentsListAppServicePlans(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling appServiceEnvironmentsListAppServicePlans(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling appServiceEnvironmentsListAppServicePlans(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling appServiceEnvironmentsListAppServicePlans(Async)");
        }

        return appServiceEnvironmentsListAppServicePlansCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * Get all App Service plans in an App Service Environment.
     * Description for Get all App Service plans in an App Service Environment.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service Environment. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return AppServiceEnvironmentsListAppServicePlans200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public AppServiceEnvironmentsListAppServicePlans200Response appServiceEnvironmentsListAppServicePlans(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<AppServiceEnvironmentsListAppServicePlans200Response> localVarResp = appServiceEnvironmentsListAppServicePlansWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get all App Service plans in an App Service Environment.
     * Description for Get all App Service plans in an App Service Environment.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service Environment. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;AppServiceEnvironmentsListAppServicePlans200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppServiceEnvironmentsListAppServicePlans200Response> appServiceEnvironmentsListAppServicePlansWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = appServiceEnvironmentsListAppServicePlansValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<AppServiceEnvironmentsListAppServicePlans200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all App Service plans in an App Service Environment. (asynchronously)
     * Description for Get all App Service plans in an App Service Environment.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service Environment. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServiceEnvironmentsListAppServicePlansAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback<AppServiceEnvironmentsListAppServicePlans200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = appServiceEnvironmentsListAppServicePlansValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<AppServiceEnvironmentsListAppServicePlans200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appServiceEnvironmentsListByResourceGroup
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServiceEnvironmentsListByResourceGroupCall(String resourceGroupName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appServiceEnvironmentsListByResourceGroupValidateBeforeCall(String resourceGroupName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling appServiceEnvironmentsListByResourceGroup(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling appServiceEnvironmentsListByResourceGroup(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling appServiceEnvironmentsListByResourceGroup(Async)");
        }

        return appServiceEnvironmentsListByResourceGroupCall(resourceGroupName, subscriptionId, apiVersion, _callback);

    }

    /**
     * Get all App Service Environments in a resource group.
     * Description for Get all App Service Environments in a resource group.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return AppServiceEnvironmentCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public AppServiceEnvironmentCollection appServiceEnvironmentsListByResourceGroup(String resourceGroupName, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<AppServiceEnvironmentCollection> localVarResp = appServiceEnvironmentsListByResourceGroupWithHttpInfo(resourceGroupName, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get all App Service Environments in a resource group.
     * Description for Get all App Service Environments in a resource group.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;AppServiceEnvironmentCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppServiceEnvironmentCollection> appServiceEnvironmentsListByResourceGroupWithHttpInfo(String resourceGroupName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = appServiceEnvironmentsListByResourceGroupValidateBeforeCall(resourceGroupName, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<AppServiceEnvironmentCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all App Service Environments in a resource group. (asynchronously)
     * Description for Get all App Service Environments in a resource group.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServiceEnvironmentsListByResourceGroupAsync(String resourceGroupName, String subscriptionId, String apiVersion, final ApiCallback<AppServiceEnvironmentCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = appServiceEnvironmentsListByResourceGroupValidateBeforeCall(resourceGroupName, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<AppServiceEnvironmentCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appServiceEnvironmentsListCapacities
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service Environment. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServiceEnvironmentsListCapacitiesCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/capacities/compute"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appServiceEnvironmentsListCapacitiesValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling appServiceEnvironmentsListCapacities(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling appServiceEnvironmentsListCapacities(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling appServiceEnvironmentsListCapacities(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling appServiceEnvironmentsListCapacities(Async)");
        }

        return appServiceEnvironmentsListCapacitiesCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * Get the used, available, and total worker capacity an App Service Environment.
     * Description for Get the used, available, and total worker capacity an App Service Environment.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service Environment. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return StampCapacityCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public StampCapacityCollection appServiceEnvironmentsListCapacities(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<StampCapacityCollection> localVarResp = appServiceEnvironmentsListCapacitiesWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get the used, available, and total worker capacity an App Service Environment.
     * Description for Get the used, available, and total worker capacity an App Service Environment.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service Environment. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;StampCapacityCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StampCapacityCollection> appServiceEnvironmentsListCapacitiesWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = appServiceEnvironmentsListCapacitiesValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<StampCapacityCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the used, available, and total worker capacity an App Service Environment. (asynchronously)
     * Description for Get the used, available, and total worker capacity an App Service Environment.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service Environment. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServiceEnvironmentsListCapacitiesAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback<StampCapacityCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = appServiceEnvironmentsListCapacitiesValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<StampCapacityCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appServiceEnvironmentsListDiagnostics
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service Environment. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServiceEnvironmentsListDiagnosticsCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/diagnostics"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appServiceEnvironmentsListDiagnosticsValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling appServiceEnvironmentsListDiagnostics(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling appServiceEnvironmentsListDiagnostics(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling appServiceEnvironmentsListDiagnostics(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling appServiceEnvironmentsListDiagnostics(Async)");
        }

        return appServiceEnvironmentsListDiagnosticsCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * Get diagnostic information for an App Service Environment.
     * Description for Get diagnostic information for an App Service Environment.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service Environment. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return List&lt;HostingEnvironmentDiagnostics&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public List<HostingEnvironmentDiagnostics> appServiceEnvironmentsListDiagnostics(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<List<HostingEnvironmentDiagnostics>> localVarResp = appServiceEnvironmentsListDiagnosticsWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get diagnostic information for an App Service Environment.
     * Description for Get diagnostic information for an App Service Environment.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service Environment. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;List&lt;HostingEnvironmentDiagnostics&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<HostingEnvironmentDiagnostics>> appServiceEnvironmentsListDiagnosticsWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = appServiceEnvironmentsListDiagnosticsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<List<HostingEnvironmentDiagnostics>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get diagnostic information for an App Service Environment. (asynchronously)
     * Description for Get diagnostic information for an App Service Environment.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service Environment. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServiceEnvironmentsListDiagnosticsAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback<List<HostingEnvironmentDiagnostics>> _callback) throws ApiException {

        okhttp3.Call localVarCall = appServiceEnvironmentsListDiagnosticsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<List<HostingEnvironmentDiagnostics>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appServiceEnvironmentsListMultiRoleMetricDefinitions
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service Environment. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServiceEnvironmentsListMultiRoleMetricDefinitionsCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/multiRolePools/default/metricdefinitions"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appServiceEnvironmentsListMultiRoleMetricDefinitionsValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling appServiceEnvironmentsListMultiRoleMetricDefinitions(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling appServiceEnvironmentsListMultiRoleMetricDefinitions(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling appServiceEnvironmentsListMultiRoleMetricDefinitions(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling appServiceEnvironmentsListMultiRoleMetricDefinitions(Async)");
        }

        return appServiceEnvironmentsListMultiRoleMetricDefinitionsCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * Get metric definitions for a multi-role pool of an App Service Environment.
     * Description for Get metric definitions for a multi-role pool of an App Service Environment.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service Environment. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ResourceMetricDefinitionCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ResourceMetricDefinitionCollection appServiceEnvironmentsListMultiRoleMetricDefinitions(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<ResourceMetricDefinitionCollection> localVarResp = appServiceEnvironmentsListMultiRoleMetricDefinitionsWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get metric definitions for a multi-role pool of an App Service Environment.
     * Description for Get metric definitions for a multi-role pool of an App Service Environment.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service Environment. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;ResourceMetricDefinitionCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResourceMetricDefinitionCollection> appServiceEnvironmentsListMultiRoleMetricDefinitionsWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = appServiceEnvironmentsListMultiRoleMetricDefinitionsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<ResourceMetricDefinitionCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get metric definitions for a multi-role pool of an App Service Environment. (asynchronously)
     * Description for Get metric definitions for a multi-role pool of an App Service Environment.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service Environment. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServiceEnvironmentsListMultiRoleMetricDefinitionsAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback<ResourceMetricDefinitionCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = appServiceEnvironmentsListMultiRoleMetricDefinitionsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ResourceMetricDefinitionCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appServiceEnvironmentsListMultiRolePoolInstanceMetricDefinitions
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service Environment. (required)
     * @param instance Name of the instance in the multi-role pool. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServiceEnvironmentsListMultiRolePoolInstanceMetricDefinitionsCall(String resourceGroupName, String name, String instance, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/multiRolePools/default/instances/{instance}/metricdefinitions"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "instance" + "}", localVarApiClient.escapeString(instance.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appServiceEnvironmentsListMultiRolePoolInstanceMetricDefinitionsValidateBeforeCall(String resourceGroupName, String name, String instance, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling appServiceEnvironmentsListMultiRolePoolInstanceMetricDefinitions(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling appServiceEnvironmentsListMultiRolePoolInstanceMetricDefinitions(Async)");
        }

        // verify the required parameter 'instance' is set
        if (instance == null) {
            throw new ApiException("Missing the required parameter 'instance' when calling appServiceEnvironmentsListMultiRolePoolInstanceMetricDefinitions(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling appServiceEnvironmentsListMultiRolePoolInstanceMetricDefinitions(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling appServiceEnvironmentsListMultiRolePoolInstanceMetricDefinitions(Async)");
        }

        return appServiceEnvironmentsListMultiRolePoolInstanceMetricDefinitionsCall(resourceGroupName, name, instance, subscriptionId, apiVersion, _callback);

    }

    /**
     * Get metric definitions for a specific instance of a multi-role pool of an App Service Environment.
     * Description for Get metric definitions for a specific instance of a multi-role pool of an App Service Environment.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service Environment. (required)
     * @param instance Name of the instance in the multi-role pool. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ResourceMetricDefinitionCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ResourceMetricDefinitionCollection appServiceEnvironmentsListMultiRolePoolInstanceMetricDefinitions(String resourceGroupName, String name, String instance, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<ResourceMetricDefinitionCollection> localVarResp = appServiceEnvironmentsListMultiRolePoolInstanceMetricDefinitionsWithHttpInfo(resourceGroupName, name, instance, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get metric definitions for a specific instance of a multi-role pool of an App Service Environment.
     * Description for Get metric definitions for a specific instance of a multi-role pool of an App Service Environment.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service Environment. (required)
     * @param instance Name of the instance in the multi-role pool. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;ResourceMetricDefinitionCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResourceMetricDefinitionCollection> appServiceEnvironmentsListMultiRolePoolInstanceMetricDefinitionsWithHttpInfo(String resourceGroupName, String name, String instance, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = appServiceEnvironmentsListMultiRolePoolInstanceMetricDefinitionsValidateBeforeCall(resourceGroupName, name, instance, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<ResourceMetricDefinitionCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get metric definitions for a specific instance of a multi-role pool of an App Service Environment. (asynchronously)
     * Description for Get metric definitions for a specific instance of a multi-role pool of an App Service Environment.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service Environment. (required)
     * @param instance Name of the instance in the multi-role pool. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServiceEnvironmentsListMultiRolePoolInstanceMetricDefinitionsAsync(String resourceGroupName, String name, String instance, String subscriptionId, String apiVersion, final ApiCallback<ResourceMetricDefinitionCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = appServiceEnvironmentsListMultiRolePoolInstanceMetricDefinitionsValidateBeforeCall(resourceGroupName, name, instance, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ResourceMetricDefinitionCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appServiceEnvironmentsListMultiRolePoolSkus
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service Environment. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServiceEnvironmentsListMultiRolePoolSkusCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/multiRolePools/default/skus"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appServiceEnvironmentsListMultiRolePoolSkusValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling appServiceEnvironmentsListMultiRolePoolSkus(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling appServiceEnvironmentsListMultiRolePoolSkus(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling appServiceEnvironmentsListMultiRolePoolSkus(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling appServiceEnvironmentsListMultiRolePoolSkus(Async)");
        }

        return appServiceEnvironmentsListMultiRolePoolSkusCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * Get available SKUs for scaling a multi-role pool.
     * Description for Get available SKUs for scaling a multi-role pool.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service Environment. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return SkuInfoCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public SkuInfoCollection appServiceEnvironmentsListMultiRolePoolSkus(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<SkuInfoCollection> localVarResp = appServiceEnvironmentsListMultiRolePoolSkusWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get available SKUs for scaling a multi-role pool.
     * Description for Get available SKUs for scaling a multi-role pool.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service Environment. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;SkuInfoCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SkuInfoCollection> appServiceEnvironmentsListMultiRolePoolSkusWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = appServiceEnvironmentsListMultiRolePoolSkusValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<SkuInfoCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get available SKUs for scaling a multi-role pool. (asynchronously)
     * Description for Get available SKUs for scaling a multi-role pool.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service Environment. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServiceEnvironmentsListMultiRolePoolSkusAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback<SkuInfoCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = appServiceEnvironmentsListMultiRolePoolSkusValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<SkuInfoCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appServiceEnvironmentsListMultiRolePools
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service Environment. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServiceEnvironmentsListMultiRolePoolsCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/multiRolePools"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appServiceEnvironmentsListMultiRolePoolsValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling appServiceEnvironmentsListMultiRolePools(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling appServiceEnvironmentsListMultiRolePools(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling appServiceEnvironmentsListMultiRolePools(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling appServiceEnvironmentsListMultiRolePools(Async)");
        }

        return appServiceEnvironmentsListMultiRolePoolsCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * Get all multi-role pools.
     * Description for Get all multi-role pools.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service Environment. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return WorkerPoolCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public WorkerPoolCollection appServiceEnvironmentsListMultiRolePools(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<WorkerPoolCollection> localVarResp = appServiceEnvironmentsListMultiRolePoolsWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get all multi-role pools.
     * Description for Get all multi-role pools.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service Environment. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;WorkerPoolCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WorkerPoolCollection> appServiceEnvironmentsListMultiRolePoolsWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = appServiceEnvironmentsListMultiRolePoolsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<WorkerPoolCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all multi-role pools. (asynchronously)
     * Description for Get all multi-role pools.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service Environment. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServiceEnvironmentsListMultiRolePoolsAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback<WorkerPoolCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = appServiceEnvironmentsListMultiRolePoolsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<WorkerPoolCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appServiceEnvironmentsListMultiRoleUsages
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service Environment. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServiceEnvironmentsListMultiRoleUsagesCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/multiRolePools/default/usages"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appServiceEnvironmentsListMultiRoleUsagesValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling appServiceEnvironmentsListMultiRoleUsages(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling appServiceEnvironmentsListMultiRoleUsages(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling appServiceEnvironmentsListMultiRoleUsages(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling appServiceEnvironmentsListMultiRoleUsages(Async)");
        }

        return appServiceEnvironmentsListMultiRoleUsagesCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * Get usage metrics for a multi-role pool of an App Service Environment.
     * Description for Get usage metrics for a multi-role pool of an App Service Environment.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service Environment. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return UsageCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public UsageCollection appServiceEnvironmentsListMultiRoleUsages(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<UsageCollection> localVarResp = appServiceEnvironmentsListMultiRoleUsagesWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get usage metrics for a multi-role pool of an App Service Environment.
     * Description for Get usage metrics for a multi-role pool of an App Service Environment.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service Environment. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;UsageCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UsageCollection> appServiceEnvironmentsListMultiRoleUsagesWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = appServiceEnvironmentsListMultiRoleUsagesValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<UsageCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get usage metrics for a multi-role pool of an App Service Environment. (asynchronously)
     * Description for Get usage metrics for a multi-role pool of an App Service Environment.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service Environment. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServiceEnvironmentsListMultiRoleUsagesAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback<UsageCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = appServiceEnvironmentsListMultiRoleUsagesValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<UsageCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appServiceEnvironmentsListOperations
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service Environment. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServiceEnvironmentsListOperationsCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/operations"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appServiceEnvironmentsListOperationsValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling appServiceEnvironmentsListOperations(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling appServiceEnvironmentsListOperations(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling appServiceEnvironmentsListOperations(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling appServiceEnvironmentsListOperations(Async)");
        }

        return appServiceEnvironmentsListOperationsCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * List all currently running operations on the App Service Environment.
     * Description for List all currently running operations on the App Service Environment.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service Environment. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return List&lt;AppServiceEnvironmentsListOperations200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public List<AppServiceEnvironmentsListOperations200ResponseInner> appServiceEnvironmentsListOperations(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<List<AppServiceEnvironmentsListOperations200ResponseInner>> localVarResp = appServiceEnvironmentsListOperationsWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * List all currently running operations on the App Service Environment.
     * Description for List all currently running operations on the App Service Environment.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service Environment. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;List&lt;AppServiceEnvironmentsListOperations200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<AppServiceEnvironmentsListOperations200ResponseInner>> appServiceEnvironmentsListOperationsWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = appServiceEnvironmentsListOperationsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<List<AppServiceEnvironmentsListOperations200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all currently running operations on the App Service Environment. (asynchronously)
     * Description for List all currently running operations on the App Service Environment.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service Environment. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServiceEnvironmentsListOperationsAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback<List<AppServiceEnvironmentsListOperations200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = appServiceEnvironmentsListOperationsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<List<AppServiceEnvironmentsListOperations200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appServiceEnvironmentsListUsages
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service Environment. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param $filter Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter&#x3D;(name.value eq &#39;Metric1&#39; or name.value eq &#39;Metric2&#39;) and startTime eq 2014-01-01T00:00:00Z and endTime eq 2014-12-31T23:59:59Z and timeGrain eq duration&#39;[Hour|Minute|Day]&#39;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServiceEnvironmentsListUsagesCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, String $filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/usages"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appServiceEnvironmentsListUsagesValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, String $filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling appServiceEnvironmentsListUsages(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling appServiceEnvironmentsListUsages(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling appServiceEnvironmentsListUsages(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling appServiceEnvironmentsListUsages(Async)");
        }

        return appServiceEnvironmentsListUsagesCall(resourceGroupName, name, subscriptionId, apiVersion, $filter, _callback);

    }

    /**
     * Get global usage metrics of an App Service Environment.
     * Description for Get global usage metrics of an App Service Environment.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service Environment. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param $filter Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter&#x3D;(name.value eq &#39;Metric1&#39; or name.value eq &#39;Metric2&#39;) and startTime eq 2014-01-01T00:00:00Z and endTime eq 2014-12-31T23:59:59Z and timeGrain eq duration&#39;[Hour|Minute|Day]&#39;. (optional)
     * @return AppServiceEnvironmentsListUsages200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public AppServiceEnvironmentsListUsages200Response appServiceEnvironmentsListUsages(String resourceGroupName, String name, String subscriptionId, String apiVersion, String $filter) throws ApiException {
        ApiResponse<AppServiceEnvironmentsListUsages200Response> localVarResp = appServiceEnvironmentsListUsagesWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion, $filter);
        return localVarResp.getData();
    }

    /**
     * Get global usage metrics of an App Service Environment.
     * Description for Get global usage metrics of an App Service Environment.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service Environment. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param $filter Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter&#x3D;(name.value eq &#39;Metric1&#39; or name.value eq &#39;Metric2&#39;) and startTime eq 2014-01-01T00:00:00Z and endTime eq 2014-12-31T23:59:59Z and timeGrain eq duration&#39;[Hour|Minute|Day]&#39;. (optional)
     * @return ApiResponse&lt;AppServiceEnvironmentsListUsages200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppServiceEnvironmentsListUsages200Response> appServiceEnvironmentsListUsagesWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion, String $filter) throws ApiException {
        okhttp3.Call localVarCall = appServiceEnvironmentsListUsagesValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, $filter, null);
        Type localVarReturnType = new TypeToken<AppServiceEnvironmentsListUsages200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get global usage metrics of an App Service Environment. (asynchronously)
     * Description for Get global usage metrics of an App Service Environment.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service Environment. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param $filter Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter&#x3D;(name.value eq &#39;Metric1&#39; or name.value eq &#39;Metric2&#39;) and startTime eq 2014-01-01T00:00:00Z and endTime eq 2014-12-31T23:59:59Z and timeGrain eq duration&#39;[Hour|Minute|Day]&#39;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServiceEnvironmentsListUsagesAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, String $filter, final ApiCallback<AppServiceEnvironmentsListUsages200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = appServiceEnvironmentsListUsagesValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, $filter, _callback);
        Type localVarReturnType = new TypeToken<AppServiceEnvironmentsListUsages200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appServiceEnvironmentsListWebApps
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service Environment. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param propertiesToInclude Comma separated list of app properties to include. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServiceEnvironmentsListWebAppsCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, String propertiesToInclude, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/sites"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (propertiesToInclude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("propertiesToInclude", propertiesToInclude));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appServiceEnvironmentsListWebAppsValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, String propertiesToInclude, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling appServiceEnvironmentsListWebApps(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling appServiceEnvironmentsListWebApps(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling appServiceEnvironmentsListWebApps(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling appServiceEnvironmentsListWebApps(Async)");
        }

        return appServiceEnvironmentsListWebAppsCall(resourceGroupName, name, subscriptionId, apiVersion, propertiesToInclude, _callback);

    }

    /**
     * Get all apps in an App Service Environment.
     * Description for Get all apps in an App Service Environment.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service Environment. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param propertiesToInclude Comma separated list of app properties to include. (optional)
     * @return AppServiceEnvironmentsChangeVnet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public AppServiceEnvironmentsChangeVnet200Response appServiceEnvironmentsListWebApps(String resourceGroupName, String name, String subscriptionId, String apiVersion, String propertiesToInclude) throws ApiException {
        ApiResponse<AppServiceEnvironmentsChangeVnet200Response> localVarResp = appServiceEnvironmentsListWebAppsWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion, propertiesToInclude);
        return localVarResp.getData();
    }

    /**
     * Get all apps in an App Service Environment.
     * Description for Get all apps in an App Service Environment.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service Environment. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param propertiesToInclude Comma separated list of app properties to include. (optional)
     * @return ApiResponse&lt;AppServiceEnvironmentsChangeVnet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppServiceEnvironmentsChangeVnet200Response> appServiceEnvironmentsListWebAppsWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion, String propertiesToInclude) throws ApiException {
        okhttp3.Call localVarCall = appServiceEnvironmentsListWebAppsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, propertiesToInclude, null);
        Type localVarReturnType = new TypeToken<AppServiceEnvironmentsChangeVnet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all apps in an App Service Environment. (asynchronously)
     * Description for Get all apps in an App Service Environment.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service Environment. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param propertiesToInclude Comma separated list of app properties to include. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServiceEnvironmentsListWebAppsAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, String propertiesToInclude, final ApiCallback<AppServiceEnvironmentsChangeVnet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = appServiceEnvironmentsListWebAppsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, propertiesToInclude, _callback);
        Type localVarReturnType = new TypeToken<AppServiceEnvironmentsChangeVnet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appServiceEnvironmentsListWebWorkerMetricDefinitions
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service Environment. (required)
     * @param workerPoolName Name of the worker pool. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServiceEnvironmentsListWebWorkerMetricDefinitionsCall(String resourceGroupName, String name, String workerPoolName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/workerPools/{workerPoolName}/metricdefinitions"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "workerPoolName" + "}", localVarApiClient.escapeString(workerPoolName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appServiceEnvironmentsListWebWorkerMetricDefinitionsValidateBeforeCall(String resourceGroupName, String name, String workerPoolName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling appServiceEnvironmentsListWebWorkerMetricDefinitions(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling appServiceEnvironmentsListWebWorkerMetricDefinitions(Async)");
        }

        // verify the required parameter 'workerPoolName' is set
        if (workerPoolName == null) {
            throw new ApiException("Missing the required parameter 'workerPoolName' when calling appServiceEnvironmentsListWebWorkerMetricDefinitions(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling appServiceEnvironmentsListWebWorkerMetricDefinitions(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling appServiceEnvironmentsListWebWorkerMetricDefinitions(Async)");
        }

        return appServiceEnvironmentsListWebWorkerMetricDefinitionsCall(resourceGroupName, name, workerPoolName, subscriptionId, apiVersion, _callback);

    }

    /**
     * Get metric definitions for a worker pool of an App Service Environment.
     * Description for Get metric definitions for a worker pool of an App Service Environment.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service Environment. (required)
     * @param workerPoolName Name of the worker pool. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ResourceMetricDefinitionCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ResourceMetricDefinitionCollection appServiceEnvironmentsListWebWorkerMetricDefinitions(String resourceGroupName, String name, String workerPoolName, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<ResourceMetricDefinitionCollection> localVarResp = appServiceEnvironmentsListWebWorkerMetricDefinitionsWithHttpInfo(resourceGroupName, name, workerPoolName, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get metric definitions for a worker pool of an App Service Environment.
     * Description for Get metric definitions for a worker pool of an App Service Environment.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service Environment. (required)
     * @param workerPoolName Name of the worker pool. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;ResourceMetricDefinitionCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResourceMetricDefinitionCollection> appServiceEnvironmentsListWebWorkerMetricDefinitionsWithHttpInfo(String resourceGroupName, String name, String workerPoolName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = appServiceEnvironmentsListWebWorkerMetricDefinitionsValidateBeforeCall(resourceGroupName, name, workerPoolName, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<ResourceMetricDefinitionCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get metric definitions for a worker pool of an App Service Environment. (asynchronously)
     * Description for Get metric definitions for a worker pool of an App Service Environment.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service Environment. (required)
     * @param workerPoolName Name of the worker pool. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServiceEnvironmentsListWebWorkerMetricDefinitionsAsync(String resourceGroupName, String name, String workerPoolName, String subscriptionId, String apiVersion, final ApiCallback<ResourceMetricDefinitionCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = appServiceEnvironmentsListWebWorkerMetricDefinitionsValidateBeforeCall(resourceGroupName, name, workerPoolName, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ResourceMetricDefinitionCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appServiceEnvironmentsListWebWorkerUsages
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service Environment. (required)
     * @param workerPoolName Name of the worker pool. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServiceEnvironmentsListWebWorkerUsagesCall(String resourceGroupName, String name, String workerPoolName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/workerPools/{workerPoolName}/usages"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "workerPoolName" + "}", localVarApiClient.escapeString(workerPoolName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appServiceEnvironmentsListWebWorkerUsagesValidateBeforeCall(String resourceGroupName, String name, String workerPoolName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling appServiceEnvironmentsListWebWorkerUsages(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling appServiceEnvironmentsListWebWorkerUsages(Async)");
        }

        // verify the required parameter 'workerPoolName' is set
        if (workerPoolName == null) {
            throw new ApiException("Missing the required parameter 'workerPoolName' when calling appServiceEnvironmentsListWebWorkerUsages(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling appServiceEnvironmentsListWebWorkerUsages(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling appServiceEnvironmentsListWebWorkerUsages(Async)");
        }

        return appServiceEnvironmentsListWebWorkerUsagesCall(resourceGroupName, name, workerPoolName, subscriptionId, apiVersion, _callback);

    }

    /**
     * Get usage metrics for a worker pool of an App Service Environment.
     * Description for Get usage metrics for a worker pool of an App Service Environment.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service Environment. (required)
     * @param workerPoolName Name of the worker pool. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return UsageCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public UsageCollection appServiceEnvironmentsListWebWorkerUsages(String resourceGroupName, String name, String workerPoolName, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<UsageCollection> localVarResp = appServiceEnvironmentsListWebWorkerUsagesWithHttpInfo(resourceGroupName, name, workerPoolName, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get usage metrics for a worker pool of an App Service Environment.
     * Description for Get usage metrics for a worker pool of an App Service Environment.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service Environment. (required)
     * @param workerPoolName Name of the worker pool. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;UsageCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UsageCollection> appServiceEnvironmentsListWebWorkerUsagesWithHttpInfo(String resourceGroupName, String name, String workerPoolName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = appServiceEnvironmentsListWebWorkerUsagesValidateBeforeCall(resourceGroupName, name, workerPoolName, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<UsageCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get usage metrics for a worker pool of an App Service Environment. (asynchronously)
     * Description for Get usage metrics for a worker pool of an App Service Environment.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service Environment. (required)
     * @param workerPoolName Name of the worker pool. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServiceEnvironmentsListWebWorkerUsagesAsync(String resourceGroupName, String name, String workerPoolName, String subscriptionId, String apiVersion, final ApiCallback<UsageCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = appServiceEnvironmentsListWebWorkerUsagesValidateBeforeCall(resourceGroupName, name, workerPoolName, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<UsageCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appServiceEnvironmentsListWorkerPoolInstanceMetricDefinitions
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service Environment. (required)
     * @param workerPoolName Name of the worker pool. (required)
     * @param instance Name of the instance in the worker pool. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServiceEnvironmentsListWorkerPoolInstanceMetricDefinitionsCall(String resourceGroupName, String name, String workerPoolName, String instance, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/workerPools/{workerPoolName}/instances/{instance}/metricdefinitions"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "workerPoolName" + "}", localVarApiClient.escapeString(workerPoolName.toString()))
            .replace("{" + "instance" + "}", localVarApiClient.escapeString(instance.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appServiceEnvironmentsListWorkerPoolInstanceMetricDefinitionsValidateBeforeCall(String resourceGroupName, String name, String workerPoolName, String instance, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling appServiceEnvironmentsListWorkerPoolInstanceMetricDefinitions(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling appServiceEnvironmentsListWorkerPoolInstanceMetricDefinitions(Async)");
        }

        // verify the required parameter 'workerPoolName' is set
        if (workerPoolName == null) {
            throw new ApiException("Missing the required parameter 'workerPoolName' when calling appServiceEnvironmentsListWorkerPoolInstanceMetricDefinitions(Async)");
        }

        // verify the required parameter 'instance' is set
        if (instance == null) {
            throw new ApiException("Missing the required parameter 'instance' when calling appServiceEnvironmentsListWorkerPoolInstanceMetricDefinitions(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling appServiceEnvironmentsListWorkerPoolInstanceMetricDefinitions(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling appServiceEnvironmentsListWorkerPoolInstanceMetricDefinitions(Async)");
        }

        return appServiceEnvironmentsListWorkerPoolInstanceMetricDefinitionsCall(resourceGroupName, name, workerPoolName, instance, subscriptionId, apiVersion, _callback);

    }

    /**
     * Get metric definitions for a specific instance of a worker pool of an App Service Environment.
     * Description for Get metric definitions for a specific instance of a worker pool of an App Service Environment.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service Environment. (required)
     * @param workerPoolName Name of the worker pool. (required)
     * @param instance Name of the instance in the worker pool. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ResourceMetricDefinitionCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ResourceMetricDefinitionCollection appServiceEnvironmentsListWorkerPoolInstanceMetricDefinitions(String resourceGroupName, String name, String workerPoolName, String instance, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<ResourceMetricDefinitionCollection> localVarResp = appServiceEnvironmentsListWorkerPoolInstanceMetricDefinitionsWithHttpInfo(resourceGroupName, name, workerPoolName, instance, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get metric definitions for a specific instance of a worker pool of an App Service Environment.
     * Description for Get metric definitions for a specific instance of a worker pool of an App Service Environment.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service Environment. (required)
     * @param workerPoolName Name of the worker pool. (required)
     * @param instance Name of the instance in the worker pool. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;ResourceMetricDefinitionCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResourceMetricDefinitionCollection> appServiceEnvironmentsListWorkerPoolInstanceMetricDefinitionsWithHttpInfo(String resourceGroupName, String name, String workerPoolName, String instance, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = appServiceEnvironmentsListWorkerPoolInstanceMetricDefinitionsValidateBeforeCall(resourceGroupName, name, workerPoolName, instance, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<ResourceMetricDefinitionCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get metric definitions for a specific instance of a worker pool of an App Service Environment. (asynchronously)
     * Description for Get metric definitions for a specific instance of a worker pool of an App Service Environment.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service Environment. (required)
     * @param workerPoolName Name of the worker pool. (required)
     * @param instance Name of the instance in the worker pool. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServiceEnvironmentsListWorkerPoolInstanceMetricDefinitionsAsync(String resourceGroupName, String name, String workerPoolName, String instance, String subscriptionId, String apiVersion, final ApiCallback<ResourceMetricDefinitionCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = appServiceEnvironmentsListWorkerPoolInstanceMetricDefinitionsValidateBeforeCall(resourceGroupName, name, workerPoolName, instance, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ResourceMetricDefinitionCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appServiceEnvironmentsListWorkerPoolSkus
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service Environment. (required)
     * @param workerPoolName Name of the worker pool. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServiceEnvironmentsListWorkerPoolSkusCall(String resourceGroupName, String name, String workerPoolName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/workerPools/{workerPoolName}/skus"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "workerPoolName" + "}", localVarApiClient.escapeString(workerPoolName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appServiceEnvironmentsListWorkerPoolSkusValidateBeforeCall(String resourceGroupName, String name, String workerPoolName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling appServiceEnvironmentsListWorkerPoolSkus(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling appServiceEnvironmentsListWorkerPoolSkus(Async)");
        }

        // verify the required parameter 'workerPoolName' is set
        if (workerPoolName == null) {
            throw new ApiException("Missing the required parameter 'workerPoolName' when calling appServiceEnvironmentsListWorkerPoolSkus(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling appServiceEnvironmentsListWorkerPoolSkus(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling appServiceEnvironmentsListWorkerPoolSkus(Async)");
        }

        return appServiceEnvironmentsListWorkerPoolSkusCall(resourceGroupName, name, workerPoolName, subscriptionId, apiVersion, _callback);

    }

    /**
     * Get available SKUs for scaling a worker pool.
     * Description for Get available SKUs for scaling a worker pool.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service Environment. (required)
     * @param workerPoolName Name of the worker pool. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return SkuInfoCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public SkuInfoCollection appServiceEnvironmentsListWorkerPoolSkus(String resourceGroupName, String name, String workerPoolName, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<SkuInfoCollection> localVarResp = appServiceEnvironmentsListWorkerPoolSkusWithHttpInfo(resourceGroupName, name, workerPoolName, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get available SKUs for scaling a worker pool.
     * Description for Get available SKUs for scaling a worker pool.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service Environment. (required)
     * @param workerPoolName Name of the worker pool. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;SkuInfoCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SkuInfoCollection> appServiceEnvironmentsListWorkerPoolSkusWithHttpInfo(String resourceGroupName, String name, String workerPoolName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = appServiceEnvironmentsListWorkerPoolSkusValidateBeforeCall(resourceGroupName, name, workerPoolName, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<SkuInfoCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get available SKUs for scaling a worker pool. (asynchronously)
     * Description for Get available SKUs for scaling a worker pool.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service Environment. (required)
     * @param workerPoolName Name of the worker pool. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServiceEnvironmentsListWorkerPoolSkusAsync(String resourceGroupName, String name, String workerPoolName, String subscriptionId, String apiVersion, final ApiCallback<SkuInfoCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = appServiceEnvironmentsListWorkerPoolSkusValidateBeforeCall(resourceGroupName, name, workerPoolName, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<SkuInfoCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appServiceEnvironmentsListWorkerPools
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service Environment. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServiceEnvironmentsListWorkerPoolsCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/workerPools"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appServiceEnvironmentsListWorkerPoolsValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling appServiceEnvironmentsListWorkerPools(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling appServiceEnvironmentsListWorkerPools(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling appServiceEnvironmentsListWorkerPools(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling appServiceEnvironmentsListWorkerPools(Async)");
        }

        return appServiceEnvironmentsListWorkerPoolsCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * Get all worker pools of an App Service Environment.
     * Description for Get all worker pools of an App Service Environment.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service Environment. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return WorkerPoolCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public WorkerPoolCollection appServiceEnvironmentsListWorkerPools(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<WorkerPoolCollection> localVarResp = appServiceEnvironmentsListWorkerPoolsWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get all worker pools of an App Service Environment.
     * Description for Get all worker pools of an App Service Environment.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service Environment. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;WorkerPoolCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WorkerPoolCollection> appServiceEnvironmentsListWorkerPoolsWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = appServiceEnvironmentsListWorkerPoolsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<WorkerPoolCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all worker pools of an App Service Environment. (asynchronously)
     * Description for Get all worker pools of an App Service Environment.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service Environment. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServiceEnvironmentsListWorkerPoolsAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback<WorkerPoolCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = appServiceEnvironmentsListWorkerPoolsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<WorkerPoolCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appServiceEnvironmentsReboot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service Environment. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Asynchronous operation in progress. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServiceEnvironmentsRebootCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/reboot"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appServiceEnvironmentsRebootValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling appServiceEnvironmentsReboot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling appServiceEnvironmentsReboot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling appServiceEnvironmentsReboot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling appServiceEnvironmentsReboot(Async)");
        }

        return appServiceEnvironmentsRebootCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * Reboot all machines in an App Service Environment.
     * Description for Reboot all machines in an App Service Environment.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service Environment. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Asynchronous operation in progress. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public void appServiceEnvironmentsReboot(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        appServiceEnvironmentsRebootWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion);
    }

    /**
     * Reboot all machines in an App Service Environment.
     * Description for Reboot all machines in an App Service Environment.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service Environment. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Asynchronous operation in progress. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> appServiceEnvironmentsRebootWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = appServiceEnvironmentsRebootValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Reboot all machines in an App Service Environment. (asynchronously)
     * Description for Reboot all machines in an App Service Environment.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service Environment. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Asynchronous operation in progress. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServiceEnvironmentsRebootAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = appServiceEnvironmentsRebootValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for appServiceEnvironmentsResume
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service Environment. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Operation is in progress. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServiceEnvironmentsResumeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/resume"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appServiceEnvironmentsResumeValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling appServiceEnvironmentsResume(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling appServiceEnvironmentsResume(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling appServiceEnvironmentsResume(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling appServiceEnvironmentsResume(Async)");
        }

        return appServiceEnvironmentsResumeCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * Resume an App Service Environment.
     * Description for Resume an App Service Environment.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service Environment. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return AppServiceEnvironmentsChangeVnet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Operation is in progress. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public AppServiceEnvironmentsChangeVnet200Response appServiceEnvironmentsResume(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<AppServiceEnvironmentsChangeVnet200Response> localVarResp = appServiceEnvironmentsResumeWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Resume an App Service Environment.
     * Description for Resume an App Service Environment.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service Environment. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;AppServiceEnvironmentsChangeVnet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Operation is in progress. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppServiceEnvironmentsChangeVnet200Response> appServiceEnvironmentsResumeWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = appServiceEnvironmentsResumeValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<AppServiceEnvironmentsChangeVnet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Resume an App Service Environment. (asynchronously)
     * Description for Resume an App Service Environment.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service Environment. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Operation is in progress. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServiceEnvironmentsResumeAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback<AppServiceEnvironmentsChangeVnet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = appServiceEnvironmentsResumeValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<AppServiceEnvironmentsChangeVnet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appServiceEnvironmentsSuspend
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service Environment. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Operation is in progress. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServiceEnvironmentsSuspendCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/suspend"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appServiceEnvironmentsSuspendValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling appServiceEnvironmentsSuspend(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling appServiceEnvironmentsSuspend(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling appServiceEnvironmentsSuspend(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling appServiceEnvironmentsSuspend(Async)");
        }

        return appServiceEnvironmentsSuspendCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * Suspend an App Service Environment.
     * Description for Suspend an App Service Environment.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service Environment. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return AppServiceEnvironmentsChangeVnet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Operation is in progress. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public AppServiceEnvironmentsChangeVnet200Response appServiceEnvironmentsSuspend(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<AppServiceEnvironmentsChangeVnet200Response> localVarResp = appServiceEnvironmentsSuspendWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Suspend an App Service Environment.
     * Description for Suspend an App Service Environment.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service Environment. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;AppServiceEnvironmentsChangeVnet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Operation is in progress. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppServiceEnvironmentsChangeVnet200Response> appServiceEnvironmentsSuspendWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = appServiceEnvironmentsSuspendValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<AppServiceEnvironmentsChangeVnet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Suspend an App Service Environment. (asynchronously)
     * Description for Suspend an App Service Environment.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service Environment. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Operation is in progress. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServiceEnvironmentsSuspendAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback<AppServiceEnvironmentsChangeVnet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = appServiceEnvironmentsSuspendValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<AppServiceEnvironmentsChangeVnet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appServiceEnvironmentsUpdate
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service Environment. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param hostingEnvironmentEnvelope Configuration details of the App Service Environment. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Operation is in progress. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServiceEnvironmentsUpdateCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, AppServiceEnvironmentPatchResource hostingEnvironmentEnvelope, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = hostingEnvironmentEnvelope;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appServiceEnvironmentsUpdateValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, AppServiceEnvironmentPatchResource hostingEnvironmentEnvelope, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling appServiceEnvironmentsUpdate(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling appServiceEnvironmentsUpdate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling appServiceEnvironmentsUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling appServiceEnvironmentsUpdate(Async)");
        }

        // verify the required parameter 'hostingEnvironmentEnvelope' is set
        if (hostingEnvironmentEnvelope == null) {
            throw new ApiException("Missing the required parameter 'hostingEnvironmentEnvelope' when calling appServiceEnvironmentsUpdate(Async)");
        }

        return appServiceEnvironmentsUpdateCall(resourceGroupName, name, subscriptionId, apiVersion, hostingEnvironmentEnvelope, _callback);

    }

    /**
     * Create or update an App Service Environment.
     * Description for Create or update an App Service Environment.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service Environment. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param hostingEnvironmentEnvelope Configuration details of the App Service Environment. (required)
     * @return AppServiceEnvironmentResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Operation is in progress. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public AppServiceEnvironmentResource appServiceEnvironmentsUpdate(String resourceGroupName, String name, String subscriptionId, String apiVersion, AppServiceEnvironmentPatchResource hostingEnvironmentEnvelope) throws ApiException {
        ApiResponse<AppServiceEnvironmentResource> localVarResp = appServiceEnvironmentsUpdateWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion, hostingEnvironmentEnvelope);
        return localVarResp.getData();
    }

    /**
     * Create or update an App Service Environment.
     * Description for Create or update an App Service Environment.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service Environment. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param hostingEnvironmentEnvelope Configuration details of the App Service Environment. (required)
     * @return ApiResponse&lt;AppServiceEnvironmentResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Operation is in progress. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppServiceEnvironmentResource> appServiceEnvironmentsUpdateWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion, AppServiceEnvironmentPatchResource hostingEnvironmentEnvelope) throws ApiException {
        okhttp3.Call localVarCall = appServiceEnvironmentsUpdateValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, hostingEnvironmentEnvelope, null);
        Type localVarReturnType = new TypeToken<AppServiceEnvironmentResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create or update an App Service Environment. (asynchronously)
     * Description for Create or update an App Service Environment.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service Environment. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param hostingEnvironmentEnvelope Configuration details of the App Service Environment. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Operation is in progress. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServiceEnvironmentsUpdateAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, AppServiceEnvironmentPatchResource hostingEnvironmentEnvelope, final ApiCallback<AppServiceEnvironmentResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = appServiceEnvironmentsUpdateValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, hostingEnvironmentEnvelope, _callback);
        Type localVarReturnType = new TypeToken<AppServiceEnvironmentResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appServiceEnvironmentsUpdateMultiRolePool
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service Environment. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param multiRolePoolEnvelope Properties of the multi-role pool. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Operation is in progress. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServiceEnvironmentsUpdateMultiRolePoolCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, WorkerPoolResource multiRolePoolEnvelope, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = multiRolePoolEnvelope;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/multiRolePools/default"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appServiceEnvironmentsUpdateMultiRolePoolValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, WorkerPoolResource multiRolePoolEnvelope, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling appServiceEnvironmentsUpdateMultiRolePool(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling appServiceEnvironmentsUpdateMultiRolePool(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling appServiceEnvironmentsUpdateMultiRolePool(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling appServiceEnvironmentsUpdateMultiRolePool(Async)");
        }

        // verify the required parameter 'multiRolePoolEnvelope' is set
        if (multiRolePoolEnvelope == null) {
            throw new ApiException("Missing the required parameter 'multiRolePoolEnvelope' when calling appServiceEnvironmentsUpdateMultiRolePool(Async)");
        }

        return appServiceEnvironmentsUpdateMultiRolePoolCall(resourceGroupName, name, subscriptionId, apiVersion, multiRolePoolEnvelope, _callback);

    }

    /**
     * Create or update a multi-role pool.
     * Description for Create or update a multi-role pool.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service Environment. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param multiRolePoolEnvelope Properties of the multi-role pool. (required)
     * @return WorkerPoolResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Operation is in progress. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public WorkerPoolResource appServiceEnvironmentsUpdateMultiRolePool(String resourceGroupName, String name, String subscriptionId, String apiVersion, WorkerPoolResource multiRolePoolEnvelope) throws ApiException {
        ApiResponse<WorkerPoolResource> localVarResp = appServiceEnvironmentsUpdateMultiRolePoolWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion, multiRolePoolEnvelope);
        return localVarResp.getData();
    }

    /**
     * Create or update a multi-role pool.
     * Description for Create or update a multi-role pool.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service Environment. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param multiRolePoolEnvelope Properties of the multi-role pool. (required)
     * @return ApiResponse&lt;WorkerPoolResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Operation is in progress. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WorkerPoolResource> appServiceEnvironmentsUpdateMultiRolePoolWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion, WorkerPoolResource multiRolePoolEnvelope) throws ApiException {
        okhttp3.Call localVarCall = appServiceEnvironmentsUpdateMultiRolePoolValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, multiRolePoolEnvelope, null);
        Type localVarReturnType = new TypeToken<WorkerPoolResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create or update a multi-role pool. (asynchronously)
     * Description for Create or update a multi-role pool.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service Environment. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param multiRolePoolEnvelope Properties of the multi-role pool. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Operation is in progress. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServiceEnvironmentsUpdateMultiRolePoolAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, WorkerPoolResource multiRolePoolEnvelope, final ApiCallback<WorkerPoolResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = appServiceEnvironmentsUpdateMultiRolePoolValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, multiRolePoolEnvelope, _callback);
        Type localVarReturnType = new TypeToken<WorkerPoolResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appServiceEnvironmentsUpdateWorkerPool
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service Environment. (required)
     * @param workerPoolName Name of the worker pool. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param workerPoolEnvelope Properties of the worker pool. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Operation is in progress. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServiceEnvironmentsUpdateWorkerPoolCall(String resourceGroupName, String name, String workerPoolName, String subscriptionId, String apiVersion, WorkerPoolResource workerPoolEnvelope, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = workerPoolEnvelope;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/workerPools/{workerPoolName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "workerPoolName" + "}", localVarApiClient.escapeString(workerPoolName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appServiceEnvironmentsUpdateWorkerPoolValidateBeforeCall(String resourceGroupName, String name, String workerPoolName, String subscriptionId, String apiVersion, WorkerPoolResource workerPoolEnvelope, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling appServiceEnvironmentsUpdateWorkerPool(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling appServiceEnvironmentsUpdateWorkerPool(Async)");
        }

        // verify the required parameter 'workerPoolName' is set
        if (workerPoolName == null) {
            throw new ApiException("Missing the required parameter 'workerPoolName' when calling appServiceEnvironmentsUpdateWorkerPool(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling appServiceEnvironmentsUpdateWorkerPool(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling appServiceEnvironmentsUpdateWorkerPool(Async)");
        }

        // verify the required parameter 'workerPoolEnvelope' is set
        if (workerPoolEnvelope == null) {
            throw new ApiException("Missing the required parameter 'workerPoolEnvelope' when calling appServiceEnvironmentsUpdateWorkerPool(Async)");
        }

        return appServiceEnvironmentsUpdateWorkerPoolCall(resourceGroupName, name, workerPoolName, subscriptionId, apiVersion, workerPoolEnvelope, _callback);

    }

    /**
     * Create or update a worker pool.
     * Description for Create or update a worker pool.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service Environment. (required)
     * @param workerPoolName Name of the worker pool. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param workerPoolEnvelope Properties of the worker pool. (required)
     * @return WorkerPoolResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Operation is in progress. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public WorkerPoolResource appServiceEnvironmentsUpdateWorkerPool(String resourceGroupName, String name, String workerPoolName, String subscriptionId, String apiVersion, WorkerPoolResource workerPoolEnvelope) throws ApiException {
        ApiResponse<WorkerPoolResource> localVarResp = appServiceEnvironmentsUpdateWorkerPoolWithHttpInfo(resourceGroupName, name, workerPoolName, subscriptionId, apiVersion, workerPoolEnvelope);
        return localVarResp.getData();
    }

    /**
     * Create or update a worker pool.
     * Description for Create or update a worker pool.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service Environment. (required)
     * @param workerPoolName Name of the worker pool. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param workerPoolEnvelope Properties of the worker pool. (required)
     * @return ApiResponse&lt;WorkerPoolResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Operation is in progress. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WorkerPoolResource> appServiceEnvironmentsUpdateWorkerPoolWithHttpInfo(String resourceGroupName, String name, String workerPoolName, String subscriptionId, String apiVersion, WorkerPoolResource workerPoolEnvelope) throws ApiException {
        okhttp3.Call localVarCall = appServiceEnvironmentsUpdateWorkerPoolValidateBeforeCall(resourceGroupName, name, workerPoolName, subscriptionId, apiVersion, workerPoolEnvelope, null);
        Type localVarReturnType = new TypeToken<WorkerPoolResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create or update a worker pool. (asynchronously)
     * Description for Create or update a worker pool.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service Environment. (required)
     * @param workerPoolName Name of the worker pool. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param workerPoolEnvelope Properties of the worker pool. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Operation is in progress. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServiceEnvironmentsUpdateWorkerPoolAsync(String resourceGroupName, String name, String workerPoolName, String subscriptionId, String apiVersion, WorkerPoolResource workerPoolEnvelope, final ApiCallback<WorkerPoolResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = appServiceEnvironmentsUpdateWorkerPoolValidateBeforeCall(resourceGroupName, name, workerPoolName, subscriptionId, apiVersion, workerPoolEnvelope, _callback);
        Type localVarReturnType = new TypeToken<WorkerPoolResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
