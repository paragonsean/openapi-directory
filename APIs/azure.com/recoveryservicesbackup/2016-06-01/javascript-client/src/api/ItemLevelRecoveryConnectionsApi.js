/**
 * RecoveryServicesBackupClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ILRRequestResource from '../model/ILRRequestResource';

/**
* ItemLevelRecoveryConnections service.
* @module api/ItemLevelRecoveryConnectionsApi
* @version 2016-06-01
*/
export default class ItemLevelRecoveryConnectionsApi {

    /**
    * Constructs a new ItemLevelRecoveryConnectionsApi. 
    * @alias module:api/ItemLevelRecoveryConnectionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the itemLevelRecoveryConnectionsProvision operation.
     * @callback module:api/ItemLevelRecoveryConnectionsApi~itemLevelRecoveryConnectionsProvisionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Provisions a script which invokes an iSCSI connection to the backup data. Executing this script opens File Explorer which displays the recoverable files and folders. This is an asynchronous operation. To get the provisioning status, call GetProtectedItemOperationResult API.
     * @param {String} apiVersion Client API version.
     * @param {String} vaultName The name of the Recovery Services vault.
     * @param {String} resourceGroupName The name of the resource group associated with the Recovery Services vault.
     * @param {String} subscriptionId The subscription ID.
     * @param {String} fabricName The fabric name associated with the backup items.
     * @param {String} containerName The container name associated with the backup items.
     * @param {String} protectedItemName The name of the backup item whose files or folders are to be restored.
     * @param {String} recoveryPointId The recovery point ID for backup data. The iSCSI connection will be provisioned for this backup data.
     * @param {module:model/ILRRequestResource} resourceILRRequest The resource Item Level Recovery (ILR) request.
     * @param {module:api/ItemLevelRecoveryConnectionsApi~itemLevelRecoveryConnectionsProvisionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    itemLevelRecoveryConnectionsProvision(apiVersion, vaultName, resourceGroupName, subscriptionId, fabricName, containerName, protectedItemName, recoveryPointId, resourceILRRequest, callback) {
      let postBody = resourceILRRequest;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling itemLevelRecoveryConnectionsProvision");
      }
      // verify the required parameter 'vaultName' is set
      if (vaultName === undefined || vaultName === null) {
        throw new Error("Missing the required parameter 'vaultName' when calling itemLevelRecoveryConnectionsProvision");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling itemLevelRecoveryConnectionsProvision");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling itemLevelRecoveryConnectionsProvision");
      }
      // verify the required parameter 'fabricName' is set
      if (fabricName === undefined || fabricName === null) {
        throw new Error("Missing the required parameter 'fabricName' when calling itemLevelRecoveryConnectionsProvision");
      }
      // verify the required parameter 'containerName' is set
      if (containerName === undefined || containerName === null) {
        throw new Error("Missing the required parameter 'containerName' when calling itemLevelRecoveryConnectionsProvision");
      }
      // verify the required parameter 'protectedItemName' is set
      if (protectedItemName === undefined || protectedItemName === null) {
        throw new Error("Missing the required parameter 'protectedItemName' when calling itemLevelRecoveryConnectionsProvision");
      }
      // verify the required parameter 'recoveryPointId' is set
      if (recoveryPointId === undefined || recoveryPointId === null) {
        throw new Error("Missing the required parameter 'recoveryPointId' when calling itemLevelRecoveryConnectionsProvision");
      }
      // verify the required parameter 'resourceILRRequest' is set
      if (resourceILRRequest === undefined || resourceILRRequest === null) {
        throw new Error("Missing the required parameter 'resourceILRRequest' when calling itemLevelRecoveryConnectionsProvision");
      }

      let pathParams = {
        'vaultName': vaultName,
        'resourceGroupName': resourceGroupName,
        'subscriptionId': subscriptionId,
        'fabricName': fabricName,
        'containerName': containerName,
        'protectedItemName': protectedItemName,
        'recoveryPointId': recoveryPointId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/backupFabrics/{fabricName}/protectionContainers/{containerName}/protectedItems/{protectedItemName}/recoveryPoints/{recoveryPointId}/provisionInstantItemRecovery', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the itemLevelRecoveryConnectionsRevoke operation.
     * @callback module:api/ItemLevelRecoveryConnectionsApi~itemLevelRecoveryConnectionsRevokeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Revokes an iSCSI connection which can be used to download a script. Executing this script opens a file explorer displaying all recoverable files and folders. This is an asynchronous operation.
     * @param {String} apiVersion Client API version.
     * @param {String} vaultName The name of the Recovery Services vault.
     * @param {String} resourceGroupName The name of the resource group associated with the Recovery Services vault.
     * @param {String} subscriptionId The subscription ID.
     * @param {String} fabricName The fabric name associated with the backup items. The value allowed is Azure.
     * @param {String} containerName The container name associated with the backup items.
     * @param {String} protectedItemName The name of the backup items whose files or folders will be restored.
     * @param {String} recoveryPointId The string that identifies the recovery point. The iSCSI connection will be revoked for this protected data.
     * @param {module:api/ItemLevelRecoveryConnectionsApi~itemLevelRecoveryConnectionsRevokeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    itemLevelRecoveryConnectionsRevoke(apiVersion, vaultName, resourceGroupName, subscriptionId, fabricName, containerName, protectedItemName, recoveryPointId, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling itemLevelRecoveryConnectionsRevoke");
      }
      // verify the required parameter 'vaultName' is set
      if (vaultName === undefined || vaultName === null) {
        throw new Error("Missing the required parameter 'vaultName' when calling itemLevelRecoveryConnectionsRevoke");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling itemLevelRecoveryConnectionsRevoke");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling itemLevelRecoveryConnectionsRevoke");
      }
      // verify the required parameter 'fabricName' is set
      if (fabricName === undefined || fabricName === null) {
        throw new Error("Missing the required parameter 'fabricName' when calling itemLevelRecoveryConnectionsRevoke");
      }
      // verify the required parameter 'containerName' is set
      if (containerName === undefined || containerName === null) {
        throw new Error("Missing the required parameter 'containerName' when calling itemLevelRecoveryConnectionsRevoke");
      }
      // verify the required parameter 'protectedItemName' is set
      if (protectedItemName === undefined || protectedItemName === null) {
        throw new Error("Missing the required parameter 'protectedItemName' when calling itemLevelRecoveryConnectionsRevoke");
      }
      // verify the required parameter 'recoveryPointId' is set
      if (recoveryPointId === undefined || recoveryPointId === null) {
        throw new Error("Missing the required parameter 'recoveryPointId' when calling itemLevelRecoveryConnectionsRevoke");
      }

      let pathParams = {
        'vaultName': vaultName,
        'resourceGroupName': resourceGroupName,
        'subscriptionId': subscriptionId,
        'fabricName': fabricName,
        'containerName': containerName,
        'protectedItemName': protectedItemName,
        'recoveryPointId': recoveryPointId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/backupFabrics/{fabricName}/protectionContainers/{containerName}/protectedItems/{protectedItemName}/recoveryPoints/{recoveryPointId}/revokeInstantItemRecovery', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
