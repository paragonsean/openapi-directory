/**
 * RecoveryServicesBackupClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ProtectionPolicyResource from '../model/ProtectionPolicyResource';
import ProtectionPolicyResourceList from '../model/ProtectionPolicyResourceList';

/**
* ProtectionPolicies service.
* @module api/ProtectionPoliciesApi
* @version 2016-06-01
*/
export default class ProtectionPoliciesApi {

    /**
    * Constructs a new ProtectionPoliciesApi. 
    * @alias module:api/ProtectionPoliciesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the protectionPoliciesCreateOrUpdate operation.
     * @callback module:api/ProtectionPoliciesApi~protectionPoliciesCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProtectionPolicyResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates or modifies a backup policy. This is an asynchronous operation. Use the GetPolicyOperationResult API to Get the operation status.
     * @param {String} apiVersion Client API version.
     * @param {String} vaultName The name of the Recovery Services vault.
     * @param {String} resourceGroupName The name of the resource group associated with the Recovery Services vault.
     * @param {String} subscriptionId The subscription ID.
     * @param {String} policyName The backup policy to be created.
     * @param {module:model/ProtectionPolicyResource} resourceProtectionPolicy The resource backup policy.
     * @param {module:api/ProtectionPoliciesApi~protectionPoliciesCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProtectionPolicyResource}
     */
    protectionPoliciesCreateOrUpdate(apiVersion, vaultName, resourceGroupName, subscriptionId, policyName, resourceProtectionPolicy, callback) {
      let postBody = resourceProtectionPolicy;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling protectionPoliciesCreateOrUpdate");
      }
      // verify the required parameter 'vaultName' is set
      if (vaultName === undefined || vaultName === null) {
        throw new Error("Missing the required parameter 'vaultName' when calling protectionPoliciesCreateOrUpdate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling protectionPoliciesCreateOrUpdate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling protectionPoliciesCreateOrUpdate");
      }
      // verify the required parameter 'policyName' is set
      if (policyName === undefined || policyName === null) {
        throw new Error("Missing the required parameter 'policyName' when calling protectionPoliciesCreateOrUpdate");
      }
      // verify the required parameter 'resourceProtectionPolicy' is set
      if (resourceProtectionPolicy === undefined || resourceProtectionPolicy === null) {
        throw new Error("Missing the required parameter 'resourceProtectionPolicy' when calling protectionPoliciesCreateOrUpdate");
      }

      let pathParams = {
        'vaultName': vaultName,
        'resourceGroupName': resourceGroupName,
        'subscriptionId': subscriptionId,
        'policyName': policyName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProtectionPolicyResource;
      return this.apiClient.callApi(
        '/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/backupPolicies/{policyName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the protectionPoliciesDelete operation.
     * @callback module:api/ProtectionPoliciesApi~protectionPoliciesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the specified backup policy from your Recovery Services vault. This is an asynchronous operation. Use the GetPolicyOperationResult API to Get the operation status.
     * @param {String} apiVersion Client API version.
     * @param {String} vaultName The name of the Recovery Services vault.
     * @param {String} resourceGroupName The name of the resource group associated with the Recovery Services vault.
     * @param {String} subscriptionId The subscription ID.
     * @param {String} policyName The name of the backup policy to be deleted.
     * @param {module:api/ProtectionPoliciesApi~protectionPoliciesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    protectionPoliciesDelete(apiVersion, vaultName, resourceGroupName, subscriptionId, policyName, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling protectionPoliciesDelete");
      }
      // verify the required parameter 'vaultName' is set
      if (vaultName === undefined || vaultName === null) {
        throw new Error("Missing the required parameter 'vaultName' when calling protectionPoliciesDelete");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling protectionPoliciesDelete");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling protectionPoliciesDelete");
      }
      // verify the required parameter 'policyName' is set
      if (policyName === undefined || policyName === null) {
        throw new Error("Missing the required parameter 'policyName' when calling protectionPoliciesDelete");
      }

      let pathParams = {
        'vaultName': vaultName,
        'resourceGroupName': resourceGroupName,
        'subscriptionId': subscriptionId,
        'policyName': policyName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/backupPolicies/{policyName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the protectionPoliciesGet operation.
     * @callback module:api/ProtectionPoliciesApi~protectionPoliciesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProtectionPolicyResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the details of the backup policy associated with the Recovery Services vault. This is an asynchronous operation. Use the GetPolicyOperationResult API to Get the operation status.
     * @param {String} apiVersion Client API version.
     * @param {String} vaultName The name of the Recovery Services vault.
     * @param {String} resourceGroupName The name of the resource group associated with the Recovery Services vault.
     * @param {String} subscriptionId The subscription ID.
     * @param {String} policyName The backup policy name used in this GET operation.
     * @param {module:api/ProtectionPoliciesApi~protectionPoliciesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProtectionPolicyResource}
     */
    protectionPoliciesGet(apiVersion, vaultName, resourceGroupName, subscriptionId, policyName, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling protectionPoliciesGet");
      }
      // verify the required parameter 'vaultName' is set
      if (vaultName === undefined || vaultName === null) {
        throw new Error("Missing the required parameter 'vaultName' when calling protectionPoliciesGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling protectionPoliciesGet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling protectionPoliciesGet");
      }
      // verify the required parameter 'policyName' is set
      if (policyName === undefined || policyName === null) {
        throw new Error("Missing the required parameter 'policyName' when calling protectionPoliciesGet");
      }

      let pathParams = {
        'vaultName': vaultName,
        'resourceGroupName': resourceGroupName,
        'subscriptionId': subscriptionId,
        'policyName': policyName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProtectionPolicyResource;
      return this.apiClient.callApi(
        '/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/backupPolicies/{policyName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the protectionPoliciesList operation.
     * @callback module:api/ProtectionPoliciesApi~protectionPoliciesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProtectionPolicyResourceList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the backup policies associated with the Recovery Services vault. The API provides parameters to Get scoped results.
     * @param {String} apiVersion Client API version.
     * @param {String} vaultName The name of the Recovery Services vault.
     * @param {String} resourceGroupName The name of the resource group associated with the Recovery Services vault.
     * @param {String} subscriptionId The subscription ID.
     * @param {Object} opts Optional parameters
     * @param {String} [filter] The following equation can be used to filter the list of backup policies. backupManagementType eq {AzureIaasVM, MAB, DPM, AzureBackupServer, AzureSql}.
     * @param {module:api/ProtectionPoliciesApi~protectionPoliciesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProtectionPolicyResourceList}
     */
    protectionPoliciesList(apiVersion, vaultName, resourceGroupName, subscriptionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling protectionPoliciesList");
      }
      // verify the required parameter 'vaultName' is set
      if (vaultName === undefined || vaultName === null) {
        throw new Error("Missing the required parameter 'vaultName' when calling protectionPoliciesList");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling protectionPoliciesList");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling protectionPoliciesList");
      }

      let pathParams = {
        'vaultName': vaultName,
        'resourceGroupName': resourceGroupName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion,
        '$filter': opts['filter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProtectionPolicyResourceList;
      return this.apiClient.callApi(
        '/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/backupPolicies', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
