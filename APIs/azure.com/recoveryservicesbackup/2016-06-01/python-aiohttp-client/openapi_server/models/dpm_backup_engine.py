# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.backup_engine_base import BackupEngineBase
from openapi_server import util


class DpmBackupEngine(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, backup_engine_id: str=None, backup_engine_type: str=None, backup_management_type: str=None, can_re_register: bool=None, friendly_name: str=None, health_status: str=None, registration_status: str=None):
        """DpmBackupEngine - a model defined in OpenAPI

        :param backup_engine_id: The backup_engine_id of this DpmBackupEngine.
        :param backup_engine_type: The backup_engine_type of this DpmBackupEngine.
        :param backup_management_type: The backup_management_type of this DpmBackupEngine.
        :param can_re_register: The can_re_register of this DpmBackupEngine.
        :param friendly_name: The friendly_name of this DpmBackupEngine.
        :param health_status: The health_status of this DpmBackupEngine.
        :param registration_status: The registration_status of this DpmBackupEngine.
        """
        self.openapi_types = {
            'backup_engine_id': str,
            'backup_engine_type': str,
            'backup_management_type': str,
            'can_re_register': bool,
            'friendly_name': str,
            'health_status': str,
            'registration_status': str
        }

        self.attribute_map = {
            'backup_engine_id': 'backupEngineId',
            'backup_engine_type': 'backupEngineType',
            'backup_management_type': 'backupManagementType',
            'can_re_register': 'canReRegister',
            'friendly_name': 'friendlyName',
            'health_status': 'healthStatus',
            'registration_status': 'registrationStatus'
        }

        self._backup_engine_id = backup_engine_id
        self._backup_engine_type = backup_engine_type
        self._backup_management_type = backup_management_type
        self._can_re_register = can_re_register
        self._friendly_name = friendly_name
        self._health_status = health_status
        self._registration_status = registration_status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DpmBackupEngine':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DpmBackupEngine of this DpmBackupEngine.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def backup_engine_id(self):
        """Gets the backup_engine_id of this DpmBackupEngine.

        The ID of the backup engine.

        :return: The backup_engine_id of this DpmBackupEngine.
        :rtype: str
        """
        return self._backup_engine_id

    @backup_engine_id.setter
    def backup_engine_id(self, backup_engine_id):
        """Sets the backup_engine_id of this DpmBackupEngine.

        The ID of the backup engine.

        :param backup_engine_id: The backup_engine_id of this DpmBackupEngine.
        :type backup_engine_id: str
        """

        self._backup_engine_id = backup_engine_id

    @property
    def backup_engine_type(self):
        """Gets the backup_engine_type of this DpmBackupEngine.

        The type of the backup engine.

        :return: The backup_engine_type of this DpmBackupEngine.
        :rtype: str
        """
        return self._backup_engine_type

    @backup_engine_type.setter
    def backup_engine_type(self, backup_engine_type):
        """Sets the backup_engine_type of this DpmBackupEngine.

        The type of the backup engine.

        :param backup_engine_type: The backup_engine_type of this DpmBackupEngine.
        :type backup_engine_type: str
        """

        self._backup_engine_type = backup_engine_type

    @property
    def backup_management_type(self):
        """Gets the backup_management_type of this DpmBackupEngine.

        The type of backup management associated with the backup engine.

        :return: The backup_management_type of this DpmBackupEngine.
        :rtype: str
        """
        return self._backup_management_type

    @backup_management_type.setter
    def backup_management_type(self, backup_management_type):
        """Sets the backup_management_type of this DpmBackupEngine.

        The type of backup management associated with the backup engine.

        :param backup_management_type: The backup_management_type of this DpmBackupEngine.
        :type backup_management_type: str
        """
        allowed_values = ["Invalid", "AzureIaasVM", "MAB", "DPM", "AzureBackupServer", "AzureSql"]  # noqa: E501
        if backup_management_type not in allowed_values:
            raise ValueError(
                "Invalid value for `backup_management_type` ({0}), must be one of {1}"
                .format(backup_management_type, allowed_values)
            )

        self._backup_management_type = backup_management_type

    @property
    def can_re_register(self):
        """Gets the can_re_register of this DpmBackupEngine.

        The flag indicating whether the backup engine be registered again, once the engine has been initially registered.

        :return: The can_re_register of this DpmBackupEngine.
        :rtype: bool
        """
        return self._can_re_register

    @can_re_register.setter
    def can_re_register(self, can_re_register):
        """Sets the can_re_register of this DpmBackupEngine.

        The flag indicating whether the backup engine be registered again, once the engine has been initially registered.

        :param can_re_register: The can_re_register of this DpmBackupEngine.
        :type can_re_register: bool
        """

        self._can_re_register = can_re_register

    @property
    def friendly_name(self):
        """Gets the friendly_name of this DpmBackupEngine.

        The friendly name of the backup engine.

        :return: The friendly_name of this DpmBackupEngine.
        :rtype: str
        """
        return self._friendly_name

    @friendly_name.setter
    def friendly_name(self, friendly_name):
        """Sets the friendly_name of this DpmBackupEngine.

        The friendly name of the backup engine.

        :param friendly_name: The friendly_name of this DpmBackupEngine.
        :type friendly_name: str
        """

        self._friendly_name = friendly_name

    @property
    def health_status(self):
        """Gets the health_status of this DpmBackupEngine.

        The backup status of the backup engine.

        :return: The health_status of this DpmBackupEngine.
        :rtype: str
        """
        return self._health_status

    @health_status.setter
    def health_status(self, health_status):
        """Sets the health_status of this DpmBackupEngine.

        The backup status of the backup engine.

        :param health_status: The health_status of this DpmBackupEngine.
        :type health_status: str
        """

        self._health_status = health_status

    @property
    def registration_status(self):
        """Gets the registration_status of this DpmBackupEngine.

        The status of the backup engine registration with the Recovery Services vault.

        :return: The registration_status of this DpmBackupEngine.
        :rtype: str
        """
        return self._registration_status

    @registration_status.setter
    def registration_status(self, registration_status):
        """Sets the registration_status of this DpmBackupEngine.

        The status of the backup engine registration with the Recovery Services vault.

        :param registration_status: The registration_status of this DpmBackupEngine.
        :type registration_status: str
        """

        self._registration_status = registration_status
