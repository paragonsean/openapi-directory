# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class OperationWorkerResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, headers: Dict[str, List[str]]=None, status_code: str=None):
        """OperationWorkerResponse - a model defined in OpenAPI

        :param headers: The headers of this OperationWorkerResponse.
        :param status_code: The status_code of this OperationWorkerResponse.
        """
        self.openapi_types = {
            'headers': Dict[str, List[str]],
            'status_code': str
        }

        self.attribute_map = {
            'headers': 'Headers',
            'status_code': 'statusCode'
        }

        self._headers = headers
        self._status_code = status_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OperationWorkerResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OperationWorkerResponse of this OperationWorkerResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def headers(self):
        """Gets the headers of this OperationWorkerResponse.

        The HTTP headers associated with this operation.

        :return: The headers of this OperationWorkerResponse.
        :rtype: Dict[str, List[str]]
        """
        return self._headers

    @headers.setter
    def headers(self, headers):
        """Sets the headers of this OperationWorkerResponse.

        The HTTP headers associated with this operation.

        :param headers: The headers of this OperationWorkerResponse.
        :type headers: Dict[str, List[str]]
        """

        self._headers = headers

    @property
    def status_code(self):
        """Gets the status_code of this OperationWorkerResponse.

        The HTTP status code of the operation.

        :return: The status_code of this OperationWorkerResponse.
        :rtype: str
        """
        return self._status_code

    @status_code.setter
    def status_code(self, status_code):
        """Sets the status_code of this OperationWorkerResponse.

        The HTTP status code of the operation.

        :param status_code: The status_code of this OperationWorkerResponse.
        :type status_code: str
        """
        allowed_values = ["Continue", "SwitchingProtocols", "OK", "Created", "Accepted", "NonAuthoritativeInformation", "NoContent", "ResetContent", "PartialContent", "MultipleChoices", "Ambiguous", "MovedPermanently", "Moved", "Found", "Redirect", "SeeOther", "RedirectMethod", "NotModified", "UseProxy", "Unused", "TemporaryRedirect", "RedirectKeepVerb", "BadRequest", "Unauthorized", "PaymentRequired", "Forbidden", "NotFound", "MethodNotAllowed", "NotAcceptable", "ProxyAuthenticationRequired", "RequestTimeout", "Conflict", "Gone", "LengthRequired", "PreconditionFailed", "RequestEntityTooLarge", "RequestUriTooLong", "UnsupportedMediaType", "RequestedRangeNotSatisfiable", "ExpectationFailed", "UpgradeRequired", "InternalServerError", "NotImplemented", "BadGateway", "ServiceUnavailable", "GatewayTimeout", "HttpVersionNotSupported"]  # noqa: E501
        if status_code not in allowed_values:
            raise ValueError(
                "Invalid value for `status_code` ({0}), must be one of {1}"
                .format(status_code, allowed_values)
            )

        self._status_code = status_code
