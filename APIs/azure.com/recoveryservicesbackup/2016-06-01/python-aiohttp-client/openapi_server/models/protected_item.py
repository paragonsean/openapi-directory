# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ProtectedItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, backup_management_type: str=None, last_recovery_point: datetime=None, policy_id: str=None, protected_item_type: str=None, source_resource_id: str=None, workload_type: str=None):
        """ProtectedItem - a model defined in OpenAPI

        :param backup_management_type: The backup_management_type of this ProtectedItem.
        :param last_recovery_point: The last_recovery_point of this ProtectedItem.
        :param policy_id: The policy_id of this ProtectedItem.
        :param protected_item_type: The protected_item_type of this ProtectedItem.
        :param source_resource_id: The source_resource_id of this ProtectedItem.
        :param workload_type: The workload_type of this ProtectedItem.
        """
        self.openapi_types = {
            'backup_management_type': str,
            'last_recovery_point': datetime,
            'policy_id': str,
            'protected_item_type': str,
            'source_resource_id': str,
            'workload_type': str
        }

        self.attribute_map = {
            'backup_management_type': 'backupManagementType',
            'last_recovery_point': 'lastRecoveryPoint',
            'policy_id': 'policyId',
            'protected_item_type': 'protectedItemType',
            'source_resource_id': 'sourceResourceId',
            'workload_type': 'workloadType'
        }

        self._backup_management_type = backup_management_type
        self._last_recovery_point = last_recovery_point
        self._policy_id = policy_id
        self._protected_item_type = protected_item_type
        self._source_resource_id = source_resource_id
        self._workload_type = workload_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProtectedItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProtectedItem of this ProtectedItem.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def backup_management_type(self):
        """Gets the backup_management_type of this ProtectedItem.

        The backup management type associated with the backup item.

        :return: The backup_management_type of this ProtectedItem.
        :rtype: str
        """
        return self._backup_management_type

    @backup_management_type.setter
    def backup_management_type(self, backup_management_type):
        """Sets the backup_management_type of this ProtectedItem.

        The backup management type associated with the backup item.

        :param backup_management_type: The backup_management_type of this ProtectedItem.
        :type backup_management_type: str
        """
        allowed_values = ["Invalid", "AzureIaasVM", "MAB", "DPM", "AzureBackupServer", "AzureSql"]  # noqa: E501
        if backup_management_type not in allowed_values:
            raise ValueError(
                "Invalid value for `backup_management_type` ({0}), must be one of {1}"
                .format(backup_management_type, allowed_values)
            )

        self._backup_management_type = backup_management_type

    @property
    def last_recovery_point(self):
        """Gets the last_recovery_point of this ProtectedItem.

        The timestamp when the most recent backup copy was created for this backup item.

        :return: The last_recovery_point of this ProtectedItem.
        :rtype: datetime
        """
        return self._last_recovery_point

    @last_recovery_point.setter
    def last_recovery_point(self, last_recovery_point):
        """Sets the last_recovery_point of this ProtectedItem.

        The timestamp when the most recent backup copy was created for this backup item.

        :param last_recovery_point: The last_recovery_point of this ProtectedItem.
        :type last_recovery_point: datetime
        """

        self._last_recovery_point = last_recovery_point

    @property
    def policy_id(self):
        """Gets the policy_id of this ProtectedItem.

        The ID of the backup policy associated with this backup item.

        :return: The policy_id of this ProtectedItem.
        :rtype: str
        """
        return self._policy_id

    @policy_id.setter
    def policy_id(self, policy_id):
        """Sets the policy_id of this ProtectedItem.

        The ID of the backup policy associated with this backup item.

        :param policy_id: The policy_id of this ProtectedItem.
        :type policy_id: str
        """

        self._policy_id = policy_id

    @property
    def protected_item_type(self):
        """Gets the protected_item_type of this ProtectedItem.

        The backup item type.

        :return: The protected_item_type of this ProtectedItem.
        :rtype: str
        """
        return self._protected_item_type

    @protected_item_type.setter
    def protected_item_type(self, protected_item_type):
        """Sets the protected_item_type of this ProtectedItem.

        The backup item type.

        :param protected_item_type: The protected_item_type of this ProtectedItem.
        :type protected_item_type: str
        """

        self._protected_item_type = protected_item_type

    @property
    def source_resource_id(self):
        """Gets the source_resource_id of this ProtectedItem.

        The ID of the resource to be backed up.

        :return: The source_resource_id of this ProtectedItem.
        :rtype: str
        """
        return self._source_resource_id

    @source_resource_id.setter
    def source_resource_id(self, source_resource_id):
        """Sets the source_resource_id of this ProtectedItem.

        The ID of the resource to be backed up.

        :param source_resource_id: The source_resource_id of this ProtectedItem.
        :type source_resource_id: str
        """

        self._source_resource_id = source_resource_id

    @property
    def workload_type(self):
        """Gets the workload_type of this ProtectedItem.

        The workload type for this item.

        :return: The workload_type of this ProtectedItem.
        :rtype: str
        """
        return self._workload_type

    @workload_type.setter
    def workload_type(self, workload_type):
        """Sets the workload_type of this ProtectedItem.

        The workload type for this item.

        :param workload_type: The workload_type of this ProtectedItem.
        :type workload_type: str
        """
        allowed_values = ["Invalid", "VM", "FileFolder", "AzureSqlDb", "SQLDB", "Exchange", "Sharepoint", "DPMUnknown"]  # noqa: E501
        if workload_type not in allowed_values:
            raise ValueError(
                "Invalid value for `workload_type` ({0}), must be one of {1}"
                .format(workload_type, allowed_values)
            )

        self._workload_type = workload_type
