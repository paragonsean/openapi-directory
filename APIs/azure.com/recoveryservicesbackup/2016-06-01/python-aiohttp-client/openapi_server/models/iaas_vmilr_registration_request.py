# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.ilr_request import ILRRequest
from openapi_server import util


class IaasVMILRRegistrationRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, initiator_name: str=None, recovery_point_id: str=None, renew_existing_registration: bool=None, virtual_machine_id: str=None, object_type: str=None):
        """IaasVMILRRegistrationRequest - a model defined in OpenAPI

        :param initiator_name: The initiator_name of this IaasVMILRRegistrationRequest.
        :param recovery_point_id: The recovery_point_id of this IaasVMILRRegistrationRequest.
        :param renew_existing_registration: The renew_existing_registration of this IaasVMILRRegistrationRequest.
        :param virtual_machine_id: The virtual_machine_id of this IaasVMILRRegistrationRequest.
        :param object_type: The object_type of this IaasVMILRRegistrationRequest.
        """
        self.openapi_types = {
            'initiator_name': str,
            'recovery_point_id': str,
            'renew_existing_registration': bool,
            'virtual_machine_id': str,
            'object_type': str
        }

        self.attribute_map = {
            'initiator_name': 'initiatorName',
            'recovery_point_id': 'recoveryPointId',
            'renew_existing_registration': 'renewExistingRegistration',
            'virtual_machine_id': 'virtualMachineId',
            'object_type': 'objectType'
        }

        self._initiator_name = initiator_name
        self._recovery_point_id = recovery_point_id
        self._renew_existing_registration = renew_existing_registration
        self._virtual_machine_id = virtual_machine_id
        self._object_type = object_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IaasVMILRRegistrationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IaasVMILRRegistrationRequest of this IaasVMILRRegistrationRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def initiator_name(self):
        """Gets the initiator_name of this IaasVMILRRegistrationRequest.

        The iSCSI initiator name.

        :return: The initiator_name of this IaasVMILRRegistrationRequest.
        :rtype: str
        """
        return self._initiator_name

    @initiator_name.setter
    def initiator_name(self, initiator_name):
        """Sets the initiator_name of this IaasVMILRRegistrationRequest.

        The iSCSI initiator name.

        :param initiator_name: The initiator_name of this IaasVMILRRegistrationRequest.
        :type initiator_name: str
        """

        self._initiator_name = initiator_name

    @property
    def recovery_point_id(self):
        """Gets the recovery_point_id of this IaasVMILRRegistrationRequest.

        The ID of the IaaS VM recovery point used to restore the files or folders.

        :return: The recovery_point_id of this IaasVMILRRegistrationRequest.
        :rtype: str
        """
        return self._recovery_point_id

    @recovery_point_id.setter
    def recovery_point_id(self, recovery_point_id):
        """Sets the recovery_point_id of this IaasVMILRRegistrationRequest.

        The ID of the IaaS VM recovery point used to restore the files or folders.

        :param recovery_point_id: The recovery_point_id of this IaasVMILRRegistrationRequest.
        :type recovery_point_id: str
        """

        self._recovery_point_id = recovery_point_id

    @property
    def renew_existing_registration(self):
        """Gets the renew_existing_registration of this IaasVMILRRegistrationRequest.

        Whether to renew the existing registration with the iSCSI server.

        :return: The renew_existing_registration of this IaasVMILRRegistrationRequest.
        :rtype: bool
        """
        return self._renew_existing_registration

    @renew_existing_registration.setter
    def renew_existing_registration(self, renew_existing_registration):
        """Sets the renew_existing_registration of this IaasVMILRRegistrationRequest.

        Whether to renew the existing registration with the iSCSI server.

        :param renew_existing_registration: The renew_existing_registration of this IaasVMILRRegistrationRequest.
        :type renew_existing_registration: bool
        """

        self._renew_existing_registration = renew_existing_registration

    @property
    def virtual_machine_id(self):
        """Gets the virtual_machine_id of this IaasVMILRRegistrationRequest.

        The fully qualified Resource Manager ID of the VM used to restore the files or folders.

        :return: The virtual_machine_id of this IaasVMILRRegistrationRequest.
        :rtype: str
        """
        return self._virtual_machine_id

    @virtual_machine_id.setter
    def virtual_machine_id(self, virtual_machine_id):
        """Sets the virtual_machine_id of this IaasVMILRRegistrationRequest.

        The fully qualified Resource Manager ID of the VM used to restore the files or folders.

        :param virtual_machine_id: The virtual_machine_id of this IaasVMILRRegistrationRequest.
        :type virtual_machine_id: str
        """

        self._virtual_machine_id = virtual_machine_id

    @property
    def object_type(self):
        """Gets the object_type of this IaasVMILRRegistrationRequest.

        This property is used as the discriminator for deciding the specific types in the polymorphic chain of types.

        :return: The object_type of this IaasVMILRRegistrationRequest.
        :rtype: str
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """Sets the object_type of this IaasVMILRRegistrationRequest.

        This property is used as the discriminator for deciding the specific types in the polymorphic chain of types.

        :param object_type: The object_type of this IaasVMILRRegistrationRequest.
        :type object_type: str
        """

        self._object_type = object_type
