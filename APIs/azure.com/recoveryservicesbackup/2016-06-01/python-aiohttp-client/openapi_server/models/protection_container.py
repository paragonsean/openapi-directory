# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ProtectionContainer(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, backup_management_type: str=None, container_type: str=None, friendly_name: str=None, health_status: str=None, protectable_object_type: str=None, registration_status: str=None):
        """ProtectionContainer - a model defined in OpenAPI

        :param backup_management_type: The backup_management_type of this ProtectionContainer.
        :param container_type: The container_type of this ProtectionContainer.
        :param friendly_name: The friendly_name of this ProtectionContainer.
        :param health_status: The health_status of this ProtectionContainer.
        :param protectable_object_type: The protectable_object_type of this ProtectionContainer.
        :param registration_status: The registration_status of this ProtectionContainer.
        """
        self.openapi_types = {
            'backup_management_type': str,
            'container_type': str,
            'friendly_name': str,
            'health_status': str,
            'protectable_object_type': str,
            'registration_status': str
        }

        self.attribute_map = {
            'backup_management_type': 'backupManagementType',
            'container_type': 'containerType',
            'friendly_name': 'friendlyName',
            'health_status': 'healthStatus',
            'protectable_object_type': 'protectableObjectType',
            'registration_status': 'registrationStatus'
        }

        self._backup_management_type = backup_management_type
        self._container_type = container_type
        self._friendly_name = friendly_name
        self._health_status = health_status
        self._protectable_object_type = protectable_object_type
        self._registration_status = registration_status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProtectionContainer':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProtectionContainer of this ProtectionContainer.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def backup_management_type(self):
        """Gets the backup_management_type of this ProtectionContainer.

        The backup management type for the container.

        :return: The backup_management_type of this ProtectionContainer.
        :rtype: str
        """
        return self._backup_management_type

    @backup_management_type.setter
    def backup_management_type(self, backup_management_type):
        """Sets the backup_management_type of this ProtectionContainer.

        The backup management type for the container.

        :param backup_management_type: The backup_management_type of this ProtectionContainer.
        :type backup_management_type: str
        """
        allowed_values = ["Invalid", "AzureIaasVM", "MAB", "DPM", "AzureBackupServer", "AzureSql"]  # noqa: E501
        if backup_management_type not in allowed_values:
            raise ValueError(
                "Invalid value for `backup_management_type` ({0}), must be one of {1}"
                .format(backup_management_type, allowed_values)
            )

        self._backup_management_type = backup_management_type

    @property
    def container_type(self):
        """Gets the container_type of this ProtectionContainer.

        The type assigned to the container. The values to use for each of these properties are:<br/> 1. Compute Azure VM is Microsoft.Compute/virtualMachines<br/> 2. Classic Compute Azure VM is Microsoft.ClassicCompute/virtualMachines<br/> 3. Windows machines (like Azure Backup Server and DPM) is Windows<br/> 4. Azure SQL instance is AzureSqlContainer.

        :return: The container_type of this ProtectionContainer.
        :rtype: str
        """
        return self._container_type

    @container_type.setter
    def container_type(self, container_type):
        """Sets the container_type of this ProtectionContainer.

        The type assigned to the container. The values to use for each of these properties are:<br/> 1. Compute Azure VM is Microsoft.Compute/virtualMachines<br/> 2. Classic Compute Azure VM is Microsoft.ClassicCompute/virtualMachines<br/> 3. Windows machines (like Azure Backup Server and DPM) is Windows<br/> 4. Azure SQL instance is AzureSqlContainer.

        :param container_type: The container_type of this ProtectionContainer.
        :type container_type: str
        """

        self._container_type = container_type

    @property
    def friendly_name(self):
        """Gets the friendly_name of this ProtectionContainer.

        Friendly name of the container.

        :return: The friendly_name of this ProtectionContainer.
        :rtype: str
        """
        return self._friendly_name

    @friendly_name.setter
    def friendly_name(self, friendly_name):
        """Sets the friendly_name of this ProtectionContainer.

        Friendly name of the container.

        :param friendly_name: The friendly_name of this ProtectionContainer.
        :type friendly_name: str
        """

        self._friendly_name = friendly_name

    @property
    def health_status(self):
        """Gets the health_status of this ProtectionContainer.

        The status of the container's health.

        :return: The health_status of this ProtectionContainer.
        :rtype: str
        """
        return self._health_status

    @health_status.setter
    def health_status(self, health_status):
        """Sets the health_status of this ProtectionContainer.

        The status of the container's health.

        :param health_status: The health_status of this ProtectionContainer.
        :type health_status: str
        """

        self._health_status = health_status

    @property
    def protectable_object_type(self):
        """Gets the protectable_object_type of this ProtectionContainer.

        The protectable object type associated with the container.

        :return: The protectable_object_type of this ProtectionContainer.
        :rtype: str
        """
        return self._protectable_object_type

    @protectable_object_type.setter
    def protectable_object_type(self, protectable_object_type):
        """Sets the protectable_object_type of this ProtectionContainer.

        The protectable object type associated with the container.

        :param protectable_object_type: The protectable_object_type of this ProtectionContainer.
        :type protectable_object_type: str
        """

        self._protectable_object_type = protectable_object_type

    @property
    def registration_status(self):
        """Gets the registration_status of this ProtectionContainer.

        The container's registration status with the Recovery Services vault.

        :return: The registration_status of this ProtectionContainer.
        :rtype: str
        """
        return self._registration_status

    @registration_status.setter
    def registration_status(self, registration_status):
        """Sets the registration_status of this ProtectionContainer.

        The container's registration status with the Recovery Services vault.

        :param registration_status: The registration_status of this ProtectionContainer.
        :type registration_status: str
        """

        self._registration_status = registration_status
