/**
 * RecoveryServicesBackupClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIaasVMRecoveryPoint.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIaasVMRecoveryPoint::OAIIaasVMRecoveryPoint(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIaasVMRecoveryPoint::OAIIaasVMRecoveryPoint() {
    this->initializeModel();
}

OAIIaasVMRecoveryPoint::~OAIIaasVMRecoveryPoint() {}

void OAIIaasVMRecoveryPoint::initializeModel() {

    m_is_instant_ilr_session_active_isSet = false;
    m_is_instant_ilr_session_active_isValid = false;

    m_is_source_vm_encrypted_isSet = false;
    m_is_source_vm_encrypted_isValid = false;

    m_key_and_secret_isSet = false;
    m_key_and_secret_isValid = false;

    m_recovery_point_additional_info_isSet = false;
    m_recovery_point_additional_info_isValid = false;

    m_recovery_point_time_isSet = false;
    m_recovery_point_time_isValid = false;

    m_recovery_point_type_isSet = false;
    m_recovery_point_type_isValid = false;

    m_source_vm_storage_type_isSet = false;
    m_source_vm_storage_type_isValid = false;

    m_object_type_isSet = false;
    m_object_type_isValid = false;
}

void OAIIaasVMRecoveryPoint::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIaasVMRecoveryPoint::fromJsonObject(QJsonObject json) {

    m_is_instant_ilr_session_active_isValid = ::OpenAPI::fromJsonValue(m_is_instant_ilr_session_active, json[QString("isInstantILRSessionActive")]);
    m_is_instant_ilr_session_active_isSet = !json[QString("isInstantILRSessionActive")].isNull() && m_is_instant_ilr_session_active_isValid;

    m_is_source_vm_encrypted_isValid = ::OpenAPI::fromJsonValue(m_is_source_vm_encrypted, json[QString("isSourceVMEncrypted")]);
    m_is_source_vm_encrypted_isSet = !json[QString("isSourceVMEncrypted")].isNull() && m_is_source_vm_encrypted_isValid;

    m_key_and_secret_isValid = ::OpenAPI::fromJsonValue(m_key_and_secret, json[QString("keyAndSecret")]);
    m_key_and_secret_isSet = !json[QString("keyAndSecret")].isNull() && m_key_and_secret_isValid;

    m_recovery_point_additional_info_isValid = ::OpenAPI::fromJsonValue(m_recovery_point_additional_info, json[QString("recoveryPointAdditionalInfo")]);
    m_recovery_point_additional_info_isSet = !json[QString("recoveryPointAdditionalInfo")].isNull() && m_recovery_point_additional_info_isValid;

    m_recovery_point_time_isValid = ::OpenAPI::fromJsonValue(m_recovery_point_time, json[QString("recoveryPointTime")]);
    m_recovery_point_time_isSet = !json[QString("recoveryPointTime")].isNull() && m_recovery_point_time_isValid;

    m_recovery_point_type_isValid = ::OpenAPI::fromJsonValue(m_recovery_point_type, json[QString("recoveryPointType")]);
    m_recovery_point_type_isSet = !json[QString("recoveryPointType")].isNull() && m_recovery_point_type_isValid;

    m_source_vm_storage_type_isValid = ::OpenAPI::fromJsonValue(m_source_vm_storage_type, json[QString("sourceVMStorageType")]);
    m_source_vm_storage_type_isSet = !json[QString("sourceVMStorageType")].isNull() && m_source_vm_storage_type_isValid;

    m_object_type_isValid = ::OpenAPI::fromJsonValue(m_object_type, json[QString("objectType")]);
    m_object_type_isSet = !json[QString("objectType")].isNull() && m_object_type_isValid;
}

QString OAIIaasVMRecoveryPoint::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIaasVMRecoveryPoint::asJsonObject() const {
    QJsonObject obj;
    if (m_is_instant_ilr_session_active_isSet) {
        obj.insert(QString("isInstantILRSessionActive"), ::OpenAPI::toJsonValue(m_is_instant_ilr_session_active));
    }
    if (m_is_source_vm_encrypted_isSet) {
        obj.insert(QString("isSourceVMEncrypted"), ::OpenAPI::toJsonValue(m_is_source_vm_encrypted));
    }
    if (m_key_and_secret.isSet()) {
        obj.insert(QString("keyAndSecret"), ::OpenAPI::toJsonValue(m_key_and_secret));
    }
    if (m_recovery_point_additional_info_isSet) {
        obj.insert(QString("recoveryPointAdditionalInfo"), ::OpenAPI::toJsonValue(m_recovery_point_additional_info));
    }
    if (m_recovery_point_time_isSet) {
        obj.insert(QString("recoveryPointTime"), ::OpenAPI::toJsonValue(m_recovery_point_time));
    }
    if (m_recovery_point_type_isSet) {
        obj.insert(QString("recoveryPointType"), ::OpenAPI::toJsonValue(m_recovery_point_type));
    }
    if (m_source_vm_storage_type_isSet) {
        obj.insert(QString("sourceVMStorageType"), ::OpenAPI::toJsonValue(m_source_vm_storage_type));
    }
    if (m_object_type_isSet) {
        obj.insert(QString("objectType"), ::OpenAPI::toJsonValue(m_object_type));
    }
    return obj;
}

bool OAIIaasVMRecoveryPoint::isIsInstantIlrSessionActive() const {
    return m_is_instant_ilr_session_active;
}
void OAIIaasVMRecoveryPoint::setIsInstantIlrSessionActive(const bool &is_instant_ilr_session_active) {
    m_is_instant_ilr_session_active = is_instant_ilr_session_active;
    m_is_instant_ilr_session_active_isSet = true;
}

bool OAIIaasVMRecoveryPoint::is_is_instant_ilr_session_active_Set() const{
    return m_is_instant_ilr_session_active_isSet;
}

bool OAIIaasVMRecoveryPoint::is_is_instant_ilr_session_active_Valid() const{
    return m_is_instant_ilr_session_active_isValid;
}

bool OAIIaasVMRecoveryPoint::isIsSourceVmEncrypted() const {
    return m_is_source_vm_encrypted;
}
void OAIIaasVMRecoveryPoint::setIsSourceVmEncrypted(const bool &is_source_vm_encrypted) {
    m_is_source_vm_encrypted = is_source_vm_encrypted;
    m_is_source_vm_encrypted_isSet = true;
}

bool OAIIaasVMRecoveryPoint::is_is_source_vm_encrypted_Set() const{
    return m_is_source_vm_encrypted_isSet;
}

bool OAIIaasVMRecoveryPoint::is_is_source_vm_encrypted_Valid() const{
    return m_is_source_vm_encrypted_isValid;
}

OAIKeyAndSecretDetails OAIIaasVMRecoveryPoint::getKeyAndSecret() const {
    return m_key_and_secret;
}
void OAIIaasVMRecoveryPoint::setKeyAndSecret(const OAIKeyAndSecretDetails &key_and_secret) {
    m_key_and_secret = key_and_secret;
    m_key_and_secret_isSet = true;
}

bool OAIIaasVMRecoveryPoint::is_key_and_secret_Set() const{
    return m_key_and_secret_isSet;
}

bool OAIIaasVMRecoveryPoint::is_key_and_secret_Valid() const{
    return m_key_and_secret_isValid;
}

QString OAIIaasVMRecoveryPoint::getRecoveryPointAdditionalInfo() const {
    return m_recovery_point_additional_info;
}
void OAIIaasVMRecoveryPoint::setRecoveryPointAdditionalInfo(const QString &recovery_point_additional_info) {
    m_recovery_point_additional_info = recovery_point_additional_info;
    m_recovery_point_additional_info_isSet = true;
}

bool OAIIaasVMRecoveryPoint::is_recovery_point_additional_info_Set() const{
    return m_recovery_point_additional_info_isSet;
}

bool OAIIaasVMRecoveryPoint::is_recovery_point_additional_info_Valid() const{
    return m_recovery_point_additional_info_isValid;
}

QDateTime OAIIaasVMRecoveryPoint::getRecoveryPointTime() const {
    return m_recovery_point_time;
}
void OAIIaasVMRecoveryPoint::setRecoveryPointTime(const QDateTime &recovery_point_time) {
    m_recovery_point_time = recovery_point_time;
    m_recovery_point_time_isSet = true;
}

bool OAIIaasVMRecoveryPoint::is_recovery_point_time_Set() const{
    return m_recovery_point_time_isSet;
}

bool OAIIaasVMRecoveryPoint::is_recovery_point_time_Valid() const{
    return m_recovery_point_time_isValid;
}

QString OAIIaasVMRecoveryPoint::getRecoveryPointType() const {
    return m_recovery_point_type;
}
void OAIIaasVMRecoveryPoint::setRecoveryPointType(const QString &recovery_point_type) {
    m_recovery_point_type = recovery_point_type;
    m_recovery_point_type_isSet = true;
}

bool OAIIaasVMRecoveryPoint::is_recovery_point_type_Set() const{
    return m_recovery_point_type_isSet;
}

bool OAIIaasVMRecoveryPoint::is_recovery_point_type_Valid() const{
    return m_recovery_point_type_isValid;
}

QString OAIIaasVMRecoveryPoint::getSourceVmStorageType() const {
    return m_source_vm_storage_type;
}
void OAIIaasVMRecoveryPoint::setSourceVmStorageType(const QString &source_vm_storage_type) {
    m_source_vm_storage_type = source_vm_storage_type;
    m_source_vm_storage_type_isSet = true;
}

bool OAIIaasVMRecoveryPoint::is_source_vm_storage_type_Set() const{
    return m_source_vm_storage_type_isSet;
}

bool OAIIaasVMRecoveryPoint::is_source_vm_storage_type_Valid() const{
    return m_source_vm_storage_type_isValid;
}

QString OAIIaasVMRecoveryPoint::getObjectType() const {
    return m_object_type;
}
void OAIIaasVMRecoveryPoint::setObjectType(const QString &object_type) {
    m_object_type = object_type;
    m_object_type_isSet = true;
}

bool OAIIaasVMRecoveryPoint::is_object_type_Set() const{
    return m_object_type_isSet;
}

bool OAIIaasVMRecoveryPoint::is_object_type_Valid() const{
    return m_object_type_isValid;
}

bool OAIIaasVMRecoveryPoint::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_is_instant_ilr_session_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_source_vm_encrypted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_and_secret.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_recovery_point_additional_info_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recovery_point_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recovery_point_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_vm_storage_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIaasVMRecoveryPoint::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
