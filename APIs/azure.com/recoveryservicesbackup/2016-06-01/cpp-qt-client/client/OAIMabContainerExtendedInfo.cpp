/**
 * RecoveryServicesBackupClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMabContainerExtendedInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMabContainerExtendedInfo::OAIMabContainerExtendedInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMabContainerExtendedInfo::OAIMabContainerExtendedInfo() {
    this->initializeModel();
}

OAIMabContainerExtendedInfo::~OAIMabContainerExtendedInfo() {}

void OAIMabContainerExtendedInfo::initializeModel() {

    m_backup_item_type_isSet = false;
    m_backup_item_type_isValid = false;

    m_backup_items_isSet = false;
    m_backup_items_isValid = false;

    m_last_backup_status_isSet = false;
    m_last_backup_status_isValid = false;

    m_last_refreshed_at_isSet = false;
    m_last_refreshed_at_isValid = false;

    m_policy_name_isSet = false;
    m_policy_name_isValid = false;
}

void OAIMabContainerExtendedInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMabContainerExtendedInfo::fromJsonObject(QJsonObject json) {

    m_backup_item_type_isValid = ::OpenAPI::fromJsonValue(m_backup_item_type, json[QString("backupItemType")]);
    m_backup_item_type_isSet = !json[QString("backupItemType")].isNull() && m_backup_item_type_isValid;

    m_backup_items_isValid = ::OpenAPI::fromJsonValue(m_backup_items, json[QString("backupItems")]);
    m_backup_items_isSet = !json[QString("backupItems")].isNull() && m_backup_items_isValid;

    m_last_backup_status_isValid = ::OpenAPI::fromJsonValue(m_last_backup_status, json[QString("lastBackupStatus")]);
    m_last_backup_status_isSet = !json[QString("lastBackupStatus")].isNull() && m_last_backup_status_isValid;

    m_last_refreshed_at_isValid = ::OpenAPI::fromJsonValue(m_last_refreshed_at, json[QString("lastRefreshedAt")]);
    m_last_refreshed_at_isSet = !json[QString("lastRefreshedAt")].isNull() && m_last_refreshed_at_isValid;

    m_policy_name_isValid = ::OpenAPI::fromJsonValue(m_policy_name, json[QString("policyName")]);
    m_policy_name_isSet = !json[QString("policyName")].isNull() && m_policy_name_isValid;
}

QString OAIMabContainerExtendedInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMabContainerExtendedInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_backup_item_type_isSet) {
        obj.insert(QString("backupItemType"), ::OpenAPI::toJsonValue(m_backup_item_type));
    }
    if (m_backup_items.size() > 0) {
        obj.insert(QString("backupItems"), ::OpenAPI::toJsonValue(m_backup_items));
    }
    if (m_last_backup_status_isSet) {
        obj.insert(QString("lastBackupStatus"), ::OpenAPI::toJsonValue(m_last_backup_status));
    }
    if (m_last_refreshed_at_isSet) {
        obj.insert(QString("lastRefreshedAt"), ::OpenAPI::toJsonValue(m_last_refreshed_at));
    }
    if (m_policy_name_isSet) {
        obj.insert(QString("policyName"), ::OpenAPI::toJsonValue(m_policy_name));
    }
    return obj;
}

QString OAIMabContainerExtendedInfo::getBackupItemType() const {
    return m_backup_item_type;
}
void OAIMabContainerExtendedInfo::setBackupItemType(const QString &backup_item_type) {
    m_backup_item_type = backup_item_type;
    m_backup_item_type_isSet = true;
}

bool OAIMabContainerExtendedInfo::is_backup_item_type_Set() const{
    return m_backup_item_type_isSet;
}

bool OAIMabContainerExtendedInfo::is_backup_item_type_Valid() const{
    return m_backup_item_type_isValid;
}

QList<QString> OAIMabContainerExtendedInfo::getBackupItems() const {
    return m_backup_items;
}
void OAIMabContainerExtendedInfo::setBackupItems(const QList<QString> &backup_items) {
    m_backup_items = backup_items;
    m_backup_items_isSet = true;
}

bool OAIMabContainerExtendedInfo::is_backup_items_Set() const{
    return m_backup_items_isSet;
}

bool OAIMabContainerExtendedInfo::is_backup_items_Valid() const{
    return m_backup_items_isValid;
}

QString OAIMabContainerExtendedInfo::getLastBackupStatus() const {
    return m_last_backup_status;
}
void OAIMabContainerExtendedInfo::setLastBackupStatus(const QString &last_backup_status) {
    m_last_backup_status = last_backup_status;
    m_last_backup_status_isSet = true;
}

bool OAIMabContainerExtendedInfo::is_last_backup_status_Set() const{
    return m_last_backup_status_isSet;
}

bool OAIMabContainerExtendedInfo::is_last_backup_status_Valid() const{
    return m_last_backup_status_isValid;
}

QDateTime OAIMabContainerExtendedInfo::getLastRefreshedAt() const {
    return m_last_refreshed_at;
}
void OAIMabContainerExtendedInfo::setLastRefreshedAt(const QDateTime &last_refreshed_at) {
    m_last_refreshed_at = last_refreshed_at;
    m_last_refreshed_at_isSet = true;
}

bool OAIMabContainerExtendedInfo::is_last_refreshed_at_Set() const{
    return m_last_refreshed_at_isSet;
}

bool OAIMabContainerExtendedInfo::is_last_refreshed_at_Valid() const{
    return m_last_refreshed_at_isValid;
}

QString OAIMabContainerExtendedInfo::getPolicyName() const {
    return m_policy_name;
}
void OAIMabContainerExtendedInfo::setPolicyName(const QString &policy_name) {
    m_policy_name = policy_name;
    m_policy_name_isSet = true;
}

bool OAIMabContainerExtendedInfo::is_policy_name_Set() const{
    return m_policy_name_isSet;
}

bool OAIMabContainerExtendedInfo::is_policy_name_Valid() const{
    return m_policy_name_isValid;
}

bool OAIMabContainerExtendedInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_backup_item_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_backup_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_backup_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_refreshed_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMabContainerExtendedInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
