/**
 * RecoveryServicesBackupClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProtectedItemQueryObject.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProtectedItemQueryObject::OAIProtectedItemQueryObject(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProtectedItemQueryObject::OAIProtectedItemQueryObject() {
    this->initializeModel();
}

OAIProtectedItemQueryObject::~OAIProtectedItemQueryObject() {}

void OAIProtectedItemQueryObject::initializeModel() {

    m_backup_management_type_isSet = false;
    m_backup_management_type_isValid = false;

    m_container_name_isSet = false;
    m_container_name_isValid = false;

    m_item_type_isSet = false;
    m_item_type_isValid = false;

    m_policy_name_isSet = false;
    m_policy_name_isValid = false;
}

void OAIProtectedItemQueryObject::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProtectedItemQueryObject::fromJsonObject(QJsonObject json) {

    m_backup_management_type_isValid = ::OpenAPI::fromJsonValue(m_backup_management_type, json[QString("backupManagementType")]);
    m_backup_management_type_isSet = !json[QString("backupManagementType")].isNull() && m_backup_management_type_isValid;

    m_container_name_isValid = ::OpenAPI::fromJsonValue(m_container_name, json[QString("containerName")]);
    m_container_name_isSet = !json[QString("containerName")].isNull() && m_container_name_isValid;

    m_item_type_isValid = ::OpenAPI::fromJsonValue(m_item_type, json[QString("itemType")]);
    m_item_type_isSet = !json[QString("itemType")].isNull() && m_item_type_isValid;

    m_policy_name_isValid = ::OpenAPI::fromJsonValue(m_policy_name, json[QString("policyName")]);
    m_policy_name_isSet = !json[QString("policyName")].isNull() && m_policy_name_isValid;
}

QString OAIProtectedItemQueryObject::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProtectedItemQueryObject::asJsonObject() const {
    QJsonObject obj;
    if (m_backup_management_type_isSet) {
        obj.insert(QString("backupManagementType"), ::OpenAPI::toJsonValue(m_backup_management_type));
    }
    if (m_container_name_isSet) {
        obj.insert(QString("containerName"), ::OpenAPI::toJsonValue(m_container_name));
    }
    if (m_item_type_isSet) {
        obj.insert(QString("itemType"), ::OpenAPI::toJsonValue(m_item_type));
    }
    if (m_policy_name_isSet) {
        obj.insert(QString("policyName"), ::OpenAPI::toJsonValue(m_policy_name));
    }
    return obj;
}

QString OAIProtectedItemQueryObject::getBackupManagementType() const {
    return m_backup_management_type;
}
void OAIProtectedItemQueryObject::setBackupManagementType(const QString &backup_management_type) {
    m_backup_management_type = backup_management_type;
    m_backup_management_type_isSet = true;
}

bool OAIProtectedItemQueryObject::is_backup_management_type_Set() const{
    return m_backup_management_type_isSet;
}

bool OAIProtectedItemQueryObject::is_backup_management_type_Valid() const{
    return m_backup_management_type_isValid;
}

QString OAIProtectedItemQueryObject::getContainerName() const {
    return m_container_name;
}
void OAIProtectedItemQueryObject::setContainerName(const QString &container_name) {
    m_container_name = container_name;
    m_container_name_isSet = true;
}

bool OAIProtectedItemQueryObject::is_container_name_Set() const{
    return m_container_name_isSet;
}

bool OAIProtectedItemQueryObject::is_container_name_Valid() const{
    return m_container_name_isValid;
}

QString OAIProtectedItemQueryObject::getItemType() const {
    return m_item_type;
}
void OAIProtectedItemQueryObject::setItemType(const QString &item_type) {
    m_item_type = item_type;
    m_item_type_isSet = true;
}

bool OAIProtectedItemQueryObject::is_item_type_Set() const{
    return m_item_type_isSet;
}

bool OAIProtectedItemQueryObject::is_item_type_Valid() const{
    return m_item_type_isValid;
}

QString OAIProtectedItemQueryObject::getPolicyName() const {
    return m_policy_name;
}
void OAIProtectedItemQueryObject::setPolicyName(const QString &policy_name) {
    m_policy_name = policy_name;
    m_policy_name_isSet = true;
}

bool OAIProtectedItemQueryObject::is_policy_name_Set() const{
    return m_policy_name_isSet;
}

bool OAIProtectedItemQueryObject::is_policy_name_Valid() const{
    return m_policy_name_isValid;
}

bool OAIProtectedItemQueryObject::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_backup_management_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_container_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProtectedItemQueryObject::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
