/**
 * RecoveryServicesBackupClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMabFileFolderProtectedItem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMabFileFolderProtectedItem::OAIMabFileFolderProtectedItem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMabFileFolderProtectedItem::OAIMabFileFolderProtectedItem() {
    this->initializeModel();
}

OAIMabFileFolderProtectedItem::~OAIMabFileFolderProtectedItem() {}

void OAIMabFileFolderProtectedItem::initializeModel() {

    m_computer_name_isSet = false;
    m_computer_name_isValid = false;

    m_extended_info_isSet = false;
    m_extended_info_isValid = false;

    m_friendly_name_isSet = false;
    m_friendly_name_isValid = false;

    m_is_scheduled_for_deferred_delete_isSet = false;
    m_is_scheduled_for_deferred_delete_isValid = false;

    m_last_backup_status_isSet = false;
    m_last_backup_status_isValid = false;

    m_protection_state_isSet = false;
    m_protection_state_isValid = false;

    m_backup_management_type_isSet = false;
    m_backup_management_type_isValid = false;

    m_last_recovery_point_isSet = false;
    m_last_recovery_point_isValid = false;

    m_policy_id_isSet = false;
    m_policy_id_isValid = false;

    m_protected_item_type_isSet = false;
    m_protected_item_type_isValid = false;

    m_source_resource_id_isSet = false;
    m_source_resource_id_isValid = false;

    m_workload_type_isSet = false;
    m_workload_type_isValid = false;
}

void OAIMabFileFolderProtectedItem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMabFileFolderProtectedItem::fromJsonObject(QJsonObject json) {

    m_computer_name_isValid = ::OpenAPI::fromJsonValue(m_computer_name, json[QString("computerName")]);
    m_computer_name_isSet = !json[QString("computerName")].isNull() && m_computer_name_isValid;

    m_extended_info_isValid = ::OpenAPI::fromJsonValue(m_extended_info, json[QString("extendedInfo")]);
    m_extended_info_isSet = !json[QString("extendedInfo")].isNull() && m_extended_info_isValid;

    m_friendly_name_isValid = ::OpenAPI::fromJsonValue(m_friendly_name, json[QString("friendlyName")]);
    m_friendly_name_isSet = !json[QString("friendlyName")].isNull() && m_friendly_name_isValid;

    m_is_scheduled_for_deferred_delete_isValid = ::OpenAPI::fromJsonValue(m_is_scheduled_for_deferred_delete, json[QString("isScheduledForDeferredDelete")]);
    m_is_scheduled_for_deferred_delete_isSet = !json[QString("isScheduledForDeferredDelete")].isNull() && m_is_scheduled_for_deferred_delete_isValid;

    m_last_backup_status_isValid = ::OpenAPI::fromJsonValue(m_last_backup_status, json[QString("lastBackupStatus")]);
    m_last_backup_status_isSet = !json[QString("lastBackupStatus")].isNull() && m_last_backup_status_isValid;

    m_protection_state_isValid = ::OpenAPI::fromJsonValue(m_protection_state, json[QString("protectionState")]);
    m_protection_state_isSet = !json[QString("protectionState")].isNull() && m_protection_state_isValid;

    m_backup_management_type_isValid = ::OpenAPI::fromJsonValue(m_backup_management_type, json[QString("backupManagementType")]);
    m_backup_management_type_isSet = !json[QString("backupManagementType")].isNull() && m_backup_management_type_isValid;

    m_last_recovery_point_isValid = ::OpenAPI::fromJsonValue(m_last_recovery_point, json[QString("lastRecoveryPoint")]);
    m_last_recovery_point_isSet = !json[QString("lastRecoveryPoint")].isNull() && m_last_recovery_point_isValid;

    m_policy_id_isValid = ::OpenAPI::fromJsonValue(m_policy_id, json[QString("policyId")]);
    m_policy_id_isSet = !json[QString("policyId")].isNull() && m_policy_id_isValid;

    m_protected_item_type_isValid = ::OpenAPI::fromJsonValue(m_protected_item_type, json[QString("protectedItemType")]);
    m_protected_item_type_isSet = !json[QString("protectedItemType")].isNull() && m_protected_item_type_isValid;

    m_source_resource_id_isValid = ::OpenAPI::fromJsonValue(m_source_resource_id, json[QString("sourceResourceId")]);
    m_source_resource_id_isSet = !json[QString("sourceResourceId")].isNull() && m_source_resource_id_isValid;

    m_workload_type_isValid = ::OpenAPI::fromJsonValue(m_workload_type, json[QString("workloadType")]);
    m_workload_type_isSet = !json[QString("workloadType")].isNull() && m_workload_type_isValid;
}

QString OAIMabFileFolderProtectedItem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMabFileFolderProtectedItem::asJsonObject() const {
    QJsonObject obj;
    if (m_computer_name_isSet) {
        obj.insert(QString("computerName"), ::OpenAPI::toJsonValue(m_computer_name));
    }
    if (m_extended_info.isSet()) {
        obj.insert(QString("extendedInfo"), ::OpenAPI::toJsonValue(m_extended_info));
    }
    if (m_friendly_name_isSet) {
        obj.insert(QString("friendlyName"), ::OpenAPI::toJsonValue(m_friendly_name));
    }
    if (m_is_scheduled_for_deferred_delete_isSet) {
        obj.insert(QString("isScheduledForDeferredDelete"), ::OpenAPI::toJsonValue(m_is_scheduled_for_deferred_delete));
    }
    if (m_last_backup_status_isSet) {
        obj.insert(QString("lastBackupStatus"), ::OpenAPI::toJsonValue(m_last_backup_status));
    }
    if (m_protection_state_isSet) {
        obj.insert(QString("protectionState"), ::OpenAPI::toJsonValue(m_protection_state));
    }
    if (m_backup_management_type_isSet) {
        obj.insert(QString("backupManagementType"), ::OpenAPI::toJsonValue(m_backup_management_type));
    }
    if (m_last_recovery_point_isSet) {
        obj.insert(QString("lastRecoveryPoint"), ::OpenAPI::toJsonValue(m_last_recovery_point));
    }
    if (m_policy_id_isSet) {
        obj.insert(QString("policyId"), ::OpenAPI::toJsonValue(m_policy_id));
    }
    if (m_protected_item_type_isSet) {
        obj.insert(QString("protectedItemType"), ::OpenAPI::toJsonValue(m_protected_item_type));
    }
    if (m_source_resource_id_isSet) {
        obj.insert(QString("sourceResourceId"), ::OpenAPI::toJsonValue(m_source_resource_id));
    }
    if (m_workload_type_isSet) {
        obj.insert(QString("workloadType"), ::OpenAPI::toJsonValue(m_workload_type));
    }
    return obj;
}

QString OAIMabFileFolderProtectedItem::getComputerName() const {
    return m_computer_name;
}
void OAIMabFileFolderProtectedItem::setComputerName(const QString &computer_name) {
    m_computer_name = computer_name;
    m_computer_name_isSet = true;
}

bool OAIMabFileFolderProtectedItem::is_computer_name_Set() const{
    return m_computer_name_isSet;
}

bool OAIMabFileFolderProtectedItem::is_computer_name_Valid() const{
    return m_computer_name_isValid;
}

OAIMabFileFolderProtectedItemExtendedInfo OAIMabFileFolderProtectedItem::getExtendedInfo() const {
    return m_extended_info;
}
void OAIMabFileFolderProtectedItem::setExtendedInfo(const OAIMabFileFolderProtectedItemExtendedInfo &extended_info) {
    m_extended_info = extended_info;
    m_extended_info_isSet = true;
}

bool OAIMabFileFolderProtectedItem::is_extended_info_Set() const{
    return m_extended_info_isSet;
}

bool OAIMabFileFolderProtectedItem::is_extended_info_Valid() const{
    return m_extended_info_isValid;
}

QString OAIMabFileFolderProtectedItem::getFriendlyName() const {
    return m_friendly_name;
}
void OAIMabFileFolderProtectedItem::setFriendlyName(const QString &friendly_name) {
    m_friendly_name = friendly_name;
    m_friendly_name_isSet = true;
}

bool OAIMabFileFolderProtectedItem::is_friendly_name_Set() const{
    return m_friendly_name_isSet;
}

bool OAIMabFileFolderProtectedItem::is_friendly_name_Valid() const{
    return m_friendly_name_isValid;
}

bool OAIMabFileFolderProtectedItem::isIsScheduledForDeferredDelete() const {
    return m_is_scheduled_for_deferred_delete;
}
void OAIMabFileFolderProtectedItem::setIsScheduledForDeferredDelete(const bool &is_scheduled_for_deferred_delete) {
    m_is_scheduled_for_deferred_delete = is_scheduled_for_deferred_delete;
    m_is_scheduled_for_deferred_delete_isSet = true;
}

bool OAIMabFileFolderProtectedItem::is_is_scheduled_for_deferred_delete_Set() const{
    return m_is_scheduled_for_deferred_delete_isSet;
}

bool OAIMabFileFolderProtectedItem::is_is_scheduled_for_deferred_delete_Valid() const{
    return m_is_scheduled_for_deferred_delete_isValid;
}

QString OAIMabFileFolderProtectedItem::getLastBackupStatus() const {
    return m_last_backup_status;
}
void OAIMabFileFolderProtectedItem::setLastBackupStatus(const QString &last_backup_status) {
    m_last_backup_status = last_backup_status;
    m_last_backup_status_isSet = true;
}

bool OAIMabFileFolderProtectedItem::is_last_backup_status_Set() const{
    return m_last_backup_status_isSet;
}

bool OAIMabFileFolderProtectedItem::is_last_backup_status_Valid() const{
    return m_last_backup_status_isValid;
}

QString OAIMabFileFolderProtectedItem::getProtectionState() const {
    return m_protection_state;
}
void OAIMabFileFolderProtectedItem::setProtectionState(const QString &protection_state) {
    m_protection_state = protection_state;
    m_protection_state_isSet = true;
}

bool OAIMabFileFolderProtectedItem::is_protection_state_Set() const{
    return m_protection_state_isSet;
}

bool OAIMabFileFolderProtectedItem::is_protection_state_Valid() const{
    return m_protection_state_isValid;
}

QString OAIMabFileFolderProtectedItem::getBackupManagementType() const {
    return m_backup_management_type;
}
void OAIMabFileFolderProtectedItem::setBackupManagementType(const QString &backup_management_type) {
    m_backup_management_type = backup_management_type;
    m_backup_management_type_isSet = true;
}

bool OAIMabFileFolderProtectedItem::is_backup_management_type_Set() const{
    return m_backup_management_type_isSet;
}

bool OAIMabFileFolderProtectedItem::is_backup_management_type_Valid() const{
    return m_backup_management_type_isValid;
}

QDateTime OAIMabFileFolderProtectedItem::getLastRecoveryPoint() const {
    return m_last_recovery_point;
}
void OAIMabFileFolderProtectedItem::setLastRecoveryPoint(const QDateTime &last_recovery_point) {
    m_last_recovery_point = last_recovery_point;
    m_last_recovery_point_isSet = true;
}

bool OAIMabFileFolderProtectedItem::is_last_recovery_point_Set() const{
    return m_last_recovery_point_isSet;
}

bool OAIMabFileFolderProtectedItem::is_last_recovery_point_Valid() const{
    return m_last_recovery_point_isValid;
}

QString OAIMabFileFolderProtectedItem::getPolicyId() const {
    return m_policy_id;
}
void OAIMabFileFolderProtectedItem::setPolicyId(const QString &policy_id) {
    m_policy_id = policy_id;
    m_policy_id_isSet = true;
}

bool OAIMabFileFolderProtectedItem::is_policy_id_Set() const{
    return m_policy_id_isSet;
}

bool OAIMabFileFolderProtectedItem::is_policy_id_Valid() const{
    return m_policy_id_isValid;
}

QString OAIMabFileFolderProtectedItem::getProtectedItemType() const {
    return m_protected_item_type;
}
void OAIMabFileFolderProtectedItem::setProtectedItemType(const QString &protected_item_type) {
    m_protected_item_type = protected_item_type;
    m_protected_item_type_isSet = true;
}

bool OAIMabFileFolderProtectedItem::is_protected_item_type_Set() const{
    return m_protected_item_type_isSet;
}

bool OAIMabFileFolderProtectedItem::is_protected_item_type_Valid() const{
    return m_protected_item_type_isValid;
}

QString OAIMabFileFolderProtectedItem::getSourceResourceId() const {
    return m_source_resource_id;
}
void OAIMabFileFolderProtectedItem::setSourceResourceId(const QString &source_resource_id) {
    m_source_resource_id = source_resource_id;
    m_source_resource_id_isSet = true;
}

bool OAIMabFileFolderProtectedItem::is_source_resource_id_Set() const{
    return m_source_resource_id_isSet;
}

bool OAIMabFileFolderProtectedItem::is_source_resource_id_Valid() const{
    return m_source_resource_id_isValid;
}

QString OAIMabFileFolderProtectedItem::getWorkloadType() const {
    return m_workload_type;
}
void OAIMabFileFolderProtectedItem::setWorkloadType(const QString &workload_type) {
    m_workload_type = workload_type;
    m_workload_type_isSet = true;
}

bool OAIMabFileFolderProtectedItem::is_workload_type_Set() const{
    return m_workload_type_isSet;
}

bool OAIMabFileFolderProtectedItem::is_workload_type_Valid() const{
    return m_workload_type_isValid;
}

bool OAIMabFileFolderProtectedItem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_computer_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extended_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_friendly_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_scheduled_for_deferred_delete_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_backup_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protection_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_backup_management_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_recovery_point_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protected_item_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_workload_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMabFileFolderProtectedItem::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
