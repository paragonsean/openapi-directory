/**
 * RecoveryServicesBackupClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAzureIaaSComputeVMProtectableItem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAzureIaaSComputeVMProtectableItem::OAIAzureIaaSComputeVMProtectableItem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAzureIaaSComputeVMProtectableItem::OAIAzureIaaSComputeVMProtectableItem() {
    this->initializeModel();
}

OAIAzureIaaSComputeVMProtectableItem::~OAIAzureIaaSComputeVMProtectableItem() {}

void OAIAzureIaaSComputeVMProtectableItem::initializeModel() {

    m_virtual_machine_id_isSet = false;
    m_virtual_machine_id_isValid = false;

    m_backup_management_type_isSet = false;
    m_backup_management_type_isValid = false;

    m_friendly_name_isSet = false;
    m_friendly_name_isValid = false;

    m_protectable_item_type_isSet = false;
    m_protectable_item_type_isValid = false;

    m_protection_state_isSet = false;
    m_protection_state_isValid = false;
}

void OAIAzureIaaSComputeVMProtectableItem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAzureIaaSComputeVMProtectableItem::fromJsonObject(QJsonObject json) {

    m_virtual_machine_id_isValid = ::OpenAPI::fromJsonValue(m_virtual_machine_id, json[QString("virtualMachineId")]);
    m_virtual_machine_id_isSet = !json[QString("virtualMachineId")].isNull() && m_virtual_machine_id_isValid;

    m_backup_management_type_isValid = ::OpenAPI::fromJsonValue(m_backup_management_type, json[QString("backupManagementType")]);
    m_backup_management_type_isSet = !json[QString("backupManagementType")].isNull() && m_backup_management_type_isValid;

    m_friendly_name_isValid = ::OpenAPI::fromJsonValue(m_friendly_name, json[QString("friendlyName")]);
    m_friendly_name_isSet = !json[QString("friendlyName")].isNull() && m_friendly_name_isValid;

    m_protectable_item_type_isValid = ::OpenAPI::fromJsonValue(m_protectable_item_type, json[QString("protectableItemType")]);
    m_protectable_item_type_isSet = !json[QString("protectableItemType")].isNull() && m_protectable_item_type_isValid;

    m_protection_state_isValid = ::OpenAPI::fromJsonValue(m_protection_state, json[QString("protectionState")]);
    m_protection_state_isSet = !json[QString("protectionState")].isNull() && m_protection_state_isValid;
}

QString OAIAzureIaaSComputeVMProtectableItem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAzureIaaSComputeVMProtectableItem::asJsonObject() const {
    QJsonObject obj;
    if (m_virtual_machine_id_isSet) {
        obj.insert(QString("virtualMachineId"), ::OpenAPI::toJsonValue(m_virtual_machine_id));
    }
    if (m_backup_management_type_isSet) {
        obj.insert(QString("backupManagementType"), ::OpenAPI::toJsonValue(m_backup_management_type));
    }
    if (m_friendly_name_isSet) {
        obj.insert(QString("friendlyName"), ::OpenAPI::toJsonValue(m_friendly_name));
    }
    if (m_protectable_item_type_isSet) {
        obj.insert(QString("protectableItemType"), ::OpenAPI::toJsonValue(m_protectable_item_type));
    }
    if (m_protection_state_isSet) {
        obj.insert(QString("protectionState"), ::OpenAPI::toJsonValue(m_protection_state));
    }
    return obj;
}

QString OAIAzureIaaSComputeVMProtectableItem::getVirtualMachineId() const {
    return m_virtual_machine_id;
}
void OAIAzureIaaSComputeVMProtectableItem::setVirtualMachineId(const QString &virtual_machine_id) {
    m_virtual_machine_id = virtual_machine_id;
    m_virtual_machine_id_isSet = true;
}

bool OAIAzureIaaSComputeVMProtectableItem::is_virtual_machine_id_Set() const{
    return m_virtual_machine_id_isSet;
}

bool OAIAzureIaaSComputeVMProtectableItem::is_virtual_machine_id_Valid() const{
    return m_virtual_machine_id_isValid;
}

QString OAIAzureIaaSComputeVMProtectableItem::getBackupManagementType() const {
    return m_backup_management_type;
}
void OAIAzureIaaSComputeVMProtectableItem::setBackupManagementType(const QString &backup_management_type) {
    m_backup_management_type = backup_management_type;
    m_backup_management_type_isSet = true;
}

bool OAIAzureIaaSComputeVMProtectableItem::is_backup_management_type_Set() const{
    return m_backup_management_type_isSet;
}

bool OAIAzureIaaSComputeVMProtectableItem::is_backup_management_type_Valid() const{
    return m_backup_management_type_isValid;
}

QString OAIAzureIaaSComputeVMProtectableItem::getFriendlyName() const {
    return m_friendly_name;
}
void OAIAzureIaaSComputeVMProtectableItem::setFriendlyName(const QString &friendly_name) {
    m_friendly_name = friendly_name;
    m_friendly_name_isSet = true;
}

bool OAIAzureIaaSComputeVMProtectableItem::is_friendly_name_Set() const{
    return m_friendly_name_isSet;
}

bool OAIAzureIaaSComputeVMProtectableItem::is_friendly_name_Valid() const{
    return m_friendly_name_isValid;
}

QString OAIAzureIaaSComputeVMProtectableItem::getProtectableItemType() const {
    return m_protectable_item_type;
}
void OAIAzureIaaSComputeVMProtectableItem::setProtectableItemType(const QString &protectable_item_type) {
    m_protectable_item_type = protectable_item_type;
    m_protectable_item_type_isSet = true;
}

bool OAIAzureIaaSComputeVMProtectableItem::is_protectable_item_type_Set() const{
    return m_protectable_item_type_isSet;
}

bool OAIAzureIaaSComputeVMProtectableItem::is_protectable_item_type_Valid() const{
    return m_protectable_item_type_isValid;
}

QString OAIAzureIaaSComputeVMProtectableItem::getProtectionState() const {
    return m_protection_state;
}
void OAIAzureIaaSComputeVMProtectableItem::setProtectionState(const QString &protection_state) {
    m_protection_state = protection_state;
    m_protection_state_isSet = true;
}

bool OAIAzureIaaSComputeVMProtectableItem::is_protection_state_Set() const{
    return m_protection_state_isSet;
}

bool OAIAzureIaaSComputeVMProtectableItem::is_protection_state_Valid() const{
    return m_protection_state_isValid;
}

bool OAIAzureIaaSComputeVMProtectableItem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_virtual_machine_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_backup_management_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_friendly_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protectable_item_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protection_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAzureIaaSComputeVMProtectableItem::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
