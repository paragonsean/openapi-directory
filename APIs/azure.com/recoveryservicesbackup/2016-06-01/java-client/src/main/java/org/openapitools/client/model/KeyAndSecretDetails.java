/*
 * RecoveryServicesBackupClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.BEKDetails;
import org.openapitools.client.model.KEKDetails;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * BEK stands for Bitlocker Encryption Key.   KEK stands for Key Encryption Key. KEK is the encryption key used to protect the Secret for the BEK    If the VM is encrypted, then the service stores the following details :    1. Secret(BEK) - Url + Backup Data + vaultID.              2. Key(KEK) - Url + Backup Data + vaultID.     It is possible for the BEK and KEK to have different vaultIDs.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:23:21.567091-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class KeyAndSecretDetails {
  public static final String SERIALIZED_NAME_BEK_DETAILS = "bekDetails";
  @SerializedName(SERIALIZED_NAME_BEK_DETAILS)
  private BEKDetails bekDetails;

  public static final String SERIALIZED_NAME_KEK_DETAILS = "kekDetails";
  @SerializedName(SERIALIZED_NAME_KEK_DETAILS)
  private KEKDetails kekDetails;

  public KeyAndSecretDetails() {
  }

  public KeyAndSecretDetails bekDetails(BEKDetails bekDetails) {
    this.bekDetails = bekDetails;
    return this;
  }

  /**
   * Get bekDetails
   * @return bekDetails
   */
  @javax.annotation.Nullable
  public BEKDetails getBekDetails() {
    return bekDetails;
  }

  public void setBekDetails(BEKDetails bekDetails) {
    this.bekDetails = bekDetails;
  }


  public KeyAndSecretDetails kekDetails(KEKDetails kekDetails) {
    this.kekDetails = kekDetails;
    return this;
  }

  /**
   * Get kekDetails
   * @return kekDetails
   */
  @javax.annotation.Nullable
  public KEKDetails getKekDetails() {
    return kekDetails;
  }

  public void setKekDetails(KEKDetails kekDetails) {
    this.kekDetails = kekDetails;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    KeyAndSecretDetails keyAndSecretDetails = (KeyAndSecretDetails) o;
    return Objects.equals(this.bekDetails, keyAndSecretDetails.bekDetails) &&
        Objects.equals(this.kekDetails, keyAndSecretDetails.kekDetails);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bekDetails, kekDetails);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class KeyAndSecretDetails {\n");
    sb.append("    bekDetails: ").append(toIndentedString(bekDetails)).append("\n");
    sb.append("    kekDetails: ").append(toIndentedString(kekDetails)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bekDetails");
    openapiFields.add("kekDetails");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to KeyAndSecretDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!KeyAndSecretDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in KeyAndSecretDetails is not found in the empty JSON string", KeyAndSecretDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!KeyAndSecretDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `KeyAndSecretDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `bekDetails`
      if (jsonObj.get("bekDetails") != null && !jsonObj.get("bekDetails").isJsonNull()) {
        BEKDetails.validateJsonElement(jsonObj.get("bekDetails"));
      }
      // validate the optional field `kekDetails`
      if (jsonObj.get("kekDetails") != null && !jsonObj.get("kekDetails").isJsonNull()) {
        KEKDetails.validateJsonElement(jsonObj.get("kekDetails"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!KeyAndSecretDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'KeyAndSecretDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<KeyAndSecretDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(KeyAndSecretDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<KeyAndSecretDetails>() {
           @Override
           public void write(JsonWriter out, KeyAndSecretDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public KeyAndSecretDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of KeyAndSecretDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of KeyAndSecretDetails
   * @throws IOException if the JSON string is invalid with respect to KeyAndSecretDetails
   */
  public static KeyAndSecretDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, KeyAndSecretDetails.class);
  }

  /**
   * Convert an instance of KeyAndSecretDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

