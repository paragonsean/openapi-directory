/*
 * RecoveryServicesBackupClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ProtectedItemResource;
import org.openapitools.client.model.ProtectedItemResourceList;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ProtectedItemsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ProtectedItemsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ProtectedItemsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for protectedItemsCreateOrUpdate
     * @param apiVersion Client API version. (required)
     * @param vaultName The name of the Recovery Services vault. (required)
     * @param resourceGroupName The name of the resource group associated with the Recovery Services vault. (required)
     * @param subscriptionId The subscription ID. (required)
     * @param fabricName The fabric name associated with the backup item. (required)
     * @param containerName The container name associated with the backup item. (required)
     * @param protectedItemName The name of the backup item. (required)
     * @param resourceProtectedItem The resource backup item. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protectedItemsCreateOrUpdateCall(String apiVersion, String vaultName, String resourceGroupName, String subscriptionId, String fabricName, String containerName, String protectedItemName, ProtectedItemResource resourceProtectedItem, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = resourceProtectedItem;

        // create path and map variables
        String localVarPath = "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/backupFabrics/{fabricName}/protectionContainers/{containerName}/protectedItems/{protectedItemName}"
            .replace("{" + "vaultName" + "}", localVarApiClient.escapeString(vaultName.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "fabricName" + "}", localVarApiClient.escapeString(fabricName.toString()))
            .replace("{" + "containerName" + "}", localVarApiClient.escapeString(containerName.toString()))
            .replace("{" + "protectedItemName" + "}", localVarApiClient.escapeString(protectedItemName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call protectedItemsCreateOrUpdateValidateBeforeCall(String apiVersion, String vaultName, String resourceGroupName, String subscriptionId, String fabricName, String containerName, String protectedItemName, ProtectedItemResource resourceProtectedItem, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling protectedItemsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'vaultName' is set
        if (vaultName == null) {
            throw new ApiException("Missing the required parameter 'vaultName' when calling protectedItemsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling protectedItemsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling protectedItemsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'fabricName' is set
        if (fabricName == null) {
            throw new ApiException("Missing the required parameter 'fabricName' when calling protectedItemsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'containerName' is set
        if (containerName == null) {
            throw new ApiException("Missing the required parameter 'containerName' when calling protectedItemsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'protectedItemName' is set
        if (protectedItemName == null) {
            throw new ApiException("Missing the required parameter 'protectedItemName' when calling protectedItemsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'resourceProtectedItem' is set
        if (resourceProtectedItem == null) {
            throw new ApiException("Missing the required parameter 'resourceProtectedItem' when calling protectedItemsCreateOrUpdate(Async)");
        }

        return protectedItemsCreateOrUpdateCall(apiVersion, vaultName, resourceGroupName, subscriptionId, fabricName, containerName, protectedItemName, resourceProtectedItem, _callback);

    }

    /**
     * 
     * This operation enables an item to be backed up, or modifies the existing backup policy information for an item that has been backed up. This is an asynchronous operation. To learn the status of the operation, call the GetItemOperationResult API.
     * @param apiVersion Client API version. (required)
     * @param vaultName The name of the Recovery Services vault. (required)
     * @param resourceGroupName The name of the resource group associated with the Recovery Services vault. (required)
     * @param subscriptionId The subscription ID. (required)
     * @param fabricName The fabric name associated with the backup item. (required)
     * @param containerName The container name associated with the backup item. (required)
     * @param protectedItemName The name of the backup item. (required)
     * @param resourceProtectedItem The resource backup item. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted. </td><td>  -  </td></tr>
     </table>
     */
    public void protectedItemsCreateOrUpdate(String apiVersion, String vaultName, String resourceGroupName, String subscriptionId, String fabricName, String containerName, String protectedItemName, ProtectedItemResource resourceProtectedItem) throws ApiException {
        protectedItemsCreateOrUpdateWithHttpInfo(apiVersion, vaultName, resourceGroupName, subscriptionId, fabricName, containerName, protectedItemName, resourceProtectedItem);
    }

    /**
     * 
     * This operation enables an item to be backed up, or modifies the existing backup policy information for an item that has been backed up. This is an asynchronous operation. To learn the status of the operation, call the GetItemOperationResult API.
     * @param apiVersion Client API version. (required)
     * @param vaultName The name of the Recovery Services vault. (required)
     * @param resourceGroupName The name of the resource group associated with the Recovery Services vault. (required)
     * @param subscriptionId The subscription ID. (required)
     * @param fabricName The fabric name associated with the backup item. (required)
     * @param containerName The container name associated with the backup item. (required)
     * @param protectedItemName The name of the backup item. (required)
     * @param resourceProtectedItem The resource backup item. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> protectedItemsCreateOrUpdateWithHttpInfo(String apiVersion, String vaultName, String resourceGroupName, String subscriptionId, String fabricName, String containerName, String protectedItemName, ProtectedItemResource resourceProtectedItem) throws ApiException {
        okhttp3.Call localVarCall = protectedItemsCreateOrUpdateValidateBeforeCall(apiVersion, vaultName, resourceGroupName, subscriptionId, fabricName, containerName, protectedItemName, resourceProtectedItem, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * This operation enables an item to be backed up, or modifies the existing backup policy information for an item that has been backed up. This is an asynchronous operation. To learn the status of the operation, call the GetItemOperationResult API.
     * @param apiVersion Client API version. (required)
     * @param vaultName The name of the Recovery Services vault. (required)
     * @param resourceGroupName The name of the resource group associated with the Recovery Services vault. (required)
     * @param subscriptionId The subscription ID. (required)
     * @param fabricName The fabric name associated with the backup item. (required)
     * @param containerName The container name associated with the backup item. (required)
     * @param protectedItemName The name of the backup item. (required)
     * @param resourceProtectedItem The resource backup item. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protectedItemsCreateOrUpdateAsync(String apiVersion, String vaultName, String resourceGroupName, String subscriptionId, String fabricName, String containerName, String protectedItemName, ProtectedItemResource resourceProtectedItem, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = protectedItemsCreateOrUpdateValidateBeforeCall(apiVersion, vaultName, resourceGroupName, subscriptionId, fabricName, containerName, protectedItemName, resourceProtectedItem, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for protectedItemsDelete
     * @param apiVersion Client API version. (required)
     * @param vaultName The name of the Recovery Services vault. (required)
     * @param resourceGroupName The name of the resource group associated with the Recovery Services vault. (required)
     * @param subscriptionId The subscription ID. (required)
     * @param fabricName  The fabric name associated with the backup item. (required)
     * @param containerName The container name associated with the backup item. (required)
     * @param protectedItemName The backup item to be deleted. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No content. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protectedItemsDeleteCall(String apiVersion, String vaultName, String resourceGroupName, String subscriptionId, String fabricName, String containerName, String protectedItemName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/backupFabrics/{fabricName}/protectionContainers/{containerName}/protectedItems/{protectedItemName}"
            .replace("{" + "vaultName" + "}", localVarApiClient.escapeString(vaultName.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "fabricName" + "}", localVarApiClient.escapeString(fabricName.toString()))
            .replace("{" + "containerName" + "}", localVarApiClient.escapeString(containerName.toString()))
            .replace("{" + "protectedItemName" + "}", localVarApiClient.escapeString(protectedItemName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call protectedItemsDeleteValidateBeforeCall(String apiVersion, String vaultName, String resourceGroupName, String subscriptionId, String fabricName, String containerName, String protectedItemName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling protectedItemsDelete(Async)");
        }

        // verify the required parameter 'vaultName' is set
        if (vaultName == null) {
            throw new ApiException("Missing the required parameter 'vaultName' when calling protectedItemsDelete(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling protectedItemsDelete(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling protectedItemsDelete(Async)");
        }

        // verify the required parameter 'fabricName' is set
        if (fabricName == null) {
            throw new ApiException("Missing the required parameter 'fabricName' when calling protectedItemsDelete(Async)");
        }

        // verify the required parameter 'containerName' is set
        if (containerName == null) {
            throw new ApiException("Missing the required parameter 'containerName' when calling protectedItemsDelete(Async)");
        }

        // verify the required parameter 'protectedItemName' is set
        if (protectedItemName == null) {
            throw new ApiException("Missing the required parameter 'protectedItemName' when calling protectedItemsDelete(Async)");
        }

        return protectedItemsDeleteCall(apiVersion, vaultName, resourceGroupName, subscriptionId, fabricName, containerName, protectedItemName, _callback);

    }

    /**
     * 
     * Used to disable the backup job for an item within a container. This is an asynchronous operation. To learn the status of the request, call the GetItemOperationResult API.
     * @param apiVersion Client API version. (required)
     * @param vaultName The name of the Recovery Services vault. (required)
     * @param resourceGroupName The name of the resource group associated with the Recovery Services vault. (required)
     * @param subscriptionId The subscription ID. (required)
     * @param fabricName  The fabric name associated with the backup item. (required)
     * @param containerName The container name associated with the backup item. (required)
     * @param protectedItemName The backup item to be deleted. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No content. </td><td>  -  </td></tr>
     </table>
     */
    public void protectedItemsDelete(String apiVersion, String vaultName, String resourceGroupName, String subscriptionId, String fabricName, String containerName, String protectedItemName) throws ApiException {
        protectedItemsDeleteWithHttpInfo(apiVersion, vaultName, resourceGroupName, subscriptionId, fabricName, containerName, protectedItemName);
    }

    /**
     * 
     * Used to disable the backup job for an item within a container. This is an asynchronous operation. To learn the status of the request, call the GetItemOperationResult API.
     * @param apiVersion Client API version. (required)
     * @param vaultName The name of the Recovery Services vault. (required)
     * @param resourceGroupName The name of the resource group associated with the Recovery Services vault. (required)
     * @param subscriptionId The subscription ID. (required)
     * @param fabricName  The fabric name associated with the backup item. (required)
     * @param containerName The container name associated with the backup item. (required)
     * @param protectedItemName The backup item to be deleted. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No content. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> protectedItemsDeleteWithHttpInfo(String apiVersion, String vaultName, String resourceGroupName, String subscriptionId, String fabricName, String containerName, String protectedItemName) throws ApiException {
        okhttp3.Call localVarCall = protectedItemsDeleteValidateBeforeCall(apiVersion, vaultName, resourceGroupName, subscriptionId, fabricName, containerName, protectedItemName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Used to disable the backup job for an item within a container. This is an asynchronous operation. To learn the status of the request, call the GetItemOperationResult API.
     * @param apiVersion Client API version. (required)
     * @param vaultName The name of the Recovery Services vault. (required)
     * @param resourceGroupName The name of the resource group associated with the Recovery Services vault. (required)
     * @param subscriptionId The subscription ID. (required)
     * @param fabricName  The fabric name associated with the backup item. (required)
     * @param containerName The container name associated with the backup item. (required)
     * @param protectedItemName The backup item to be deleted. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No content. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protectedItemsDeleteAsync(String apiVersion, String vaultName, String resourceGroupName, String subscriptionId, String fabricName, String containerName, String protectedItemName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = protectedItemsDeleteValidateBeforeCall(apiVersion, vaultName, resourceGroupName, subscriptionId, fabricName, containerName, protectedItemName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for protectedItemsGet
     * @param apiVersion Client API version. (required)
     * @param vaultName The name of the Recovery Services vault. (required)
     * @param resourceGroupName The name of the resource group associated with the Recovery Services vault. (required)
     * @param subscriptionId The subscription ID. (required)
     * @param fabricName The fabric name associated with the backup item. (required)
     * @param containerName The container name associated with the backup item. (required)
     * @param protectedItemName The backup item name used in this GET operation. (required)
     * @param $filter expand eq {extendedInfo}. This filter enables you to choose (or filter) specific items in the list of backup items. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protectedItemsGetCall(String apiVersion, String vaultName, String resourceGroupName, String subscriptionId, String fabricName, String containerName, String protectedItemName, String $filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/backupFabrics/{fabricName}/protectionContainers/{containerName}/protectedItems/{protectedItemName}"
            .replace("{" + "vaultName" + "}", localVarApiClient.escapeString(vaultName.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "fabricName" + "}", localVarApiClient.escapeString(fabricName.toString()))
            .replace("{" + "containerName" + "}", localVarApiClient.escapeString(containerName.toString()))
            .replace("{" + "protectedItemName" + "}", localVarApiClient.escapeString(protectedItemName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call protectedItemsGetValidateBeforeCall(String apiVersion, String vaultName, String resourceGroupName, String subscriptionId, String fabricName, String containerName, String protectedItemName, String $filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling protectedItemsGet(Async)");
        }

        // verify the required parameter 'vaultName' is set
        if (vaultName == null) {
            throw new ApiException("Missing the required parameter 'vaultName' when calling protectedItemsGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling protectedItemsGet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling protectedItemsGet(Async)");
        }

        // verify the required parameter 'fabricName' is set
        if (fabricName == null) {
            throw new ApiException("Missing the required parameter 'fabricName' when calling protectedItemsGet(Async)");
        }

        // verify the required parameter 'containerName' is set
        if (containerName == null) {
            throw new ApiException("Missing the required parameter 'containerName' when calling protectedItemsGet(Async)");
        }

        // verify the required parameter 'protectedItemName' is set
        if (protectedItemName == null) {
            throw new ApiException("Missing the required parameter 'protectedItemName' when calling protectedItemsGet(Async)");
        }

        return protectedItemsGetCall(apiVersion, vaultName, resourceGroupName, subscriptionId, fabricName, containerName, protectedItemName, $filter, _callback);

    }

    /**
     * 
     * Provides the details of the backup item. This is an asynchronous operation. To know the status of the operation, call the GetItemOperationResult API.
     * @param apiVersion Client API version. (required)
     * @param vaultName The name of the Recovery Services vault. (required)
     * @param resourceGroupName The name of the resource group associated with the Recovery Services vault. (required)
     * @param subscriptionId The subscription ID. (required)
     * @param fabricName The fabric name associated with the backup item. (required)
     * @param containerName The container name associated with the backup item. (required)
     * @param protectedItemName The backup item name used in this GET operation. (required)
     * @param $filter expand eq {extendedInfo}. This filter enables you to choose (or filter) specific items in the list of backup items. (optional)
     * @return ProtectedItemResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
     </table>
     */
    public ProtectedItemResource protectedItemsGet(String apiVersion, String vaultName, String resourceGroupName, String subscriptionId, String fabricName, String containerName, String protectedItemName, String $filter) throws ApiException {
        ApiResponse<ProtectedItemResource> localVarResp = protectedItemsGetWithHttpInfo(apiVersion, vaultName, resourceGroupName, subscriptionId, fabricName, containerName, protectedItemName, $filter);
        return localVarResp.getData();
    }

    /**
     * 
     * Provides the details of the backup item. This is an asynchronous operation. To know the status of the operation, call the GetItemOperationResult API.
     * @param apiVersion Client API version. (required)
     * @param vaultName The name of the Recovery Services vault. (required)
     * @param resourceGroupName The name of the resource group associated with the Recovery Services vault. (required)
     * @param subscriptionId The subscription ID. (required)
     * @param fabricName The fabric name associated with the backup item. (required)
     * @param containerName The container name associated with the backup item. (required)
     * @param protectedItemName The backup item name used in this GET operation. (required)
     * @param $filter expand eq {extendedInfo}. This filter enables you to choose (or filter) specific items in the list of backup items. (optional)
     * @return ApiResponse&lt;ProtectedItemResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProtectedItemResource> protectedItemsGetWithHttpInfo(String apiVersion, String vaultName, String resourceGroupName, String subscriptionId, String fabricName, String containerName, String protectedItemName, String $filter) throws ApiException {
        okhttp3.Call localVarCall = protectedItemsGetValidateBeforeCall(apiVersion, vaultName, resourceGroupName, subscriptionId, fabricName, containerName, protectedItemName, $filter, null);
        Type localVarReturnType = new TypeToken<ProtectedItemResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Provides the details of the backup item. This is an asynchronous operation. To know the status of the operation, call the GetItemOperationResult API.
     * @param apiVersion Client API version. (required)
     * @param vaultName The name of the Recovery Services vault. (required)
     * @param resourceGroupName The name of the resource group associated with the Recovery Services vault. (required)
     * @param subscriptionId The subscription ID. (required)
     * @param fabricName The fabric name associated with the backup item. (required)
     * @param containerName The container name associated with the backup item. (required)
     * @param protectedItemName The backup item name used in this GET operation. (required)
     * @param $filter expand eq {extendedInfo}. This filter enables you to choose (or filter) specific items in the list of backup items. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protectedItemsGetAsync(String apiVersion, String vaultName, String resourceGroupName, String subscriptionId, String fabricName, String containerName, String protectedItemName, String $filter, final ApiCallback<ProtectedItemResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = protectedItemsGetValidateBeforeCall(apiVersion, vaultName, resourceGroupName, subscriptionId, fabricName, containerName, protectedItemName, $filter, _callback);
        Type localVarReturnType = new TypeToken<ProtectedItemResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for protectedItemsList
     * @param apiVersion Client API version. (required)
     * @param vaultName The name of the Recovery Services vault. (required)
     * @param resourceGroupName The name of the resource group associated with the Recovery Services vault. (required)
     * @param subscriptionId The subscription ID. (required)
     * @param $filter  itemType eq { VM , FileFolder , AzureSqlDb , SQLDB , Exchange , Sharepoint , DPMUnknown } and providerType eq { AzureIaasVM, MAB, DPM, AzureBackupServer, AzureSql } and policyName eq {policyName} and containerName eq {containername} and backupManagementType eq { AzureIaasVM, MAB, DPM, AzureBackupServer, AzureSql }. (optional)
     * @param $skipToken  The Skip Token filter. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protectedItemsListCall(String apiVersion, String vaultName, String resourceGroupName, String subscriptionId, String $filter, String $skipToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/backupProtectedItems"
            .replace("{" + "vaultName" + "}", localVarApiClient.escapeString(vaultName.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if ($skipToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$skipToken", $skipToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call protectedItemsListValidateBeforeCall(String apiVersion, String vaultName, String resourceGroupName, String subscriptionId, String $filter, String $skipToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling protectedItemsList(Async)");
        }

        // verify the required parameter 'vaultName' is set
        if (vaultName == null) {
            throw new ApiException("Missing the required parameter 'vaultName' when calling protectedItemsList(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling protectedItemsList(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling protectedItemsList(Async)");
        }

        return protectedItemsListCall(apiVersion, vaultName, resourceGroupName, subscriptionId, $filter, $skipToken, _callback);

    }

    /**
     * 
     * Provides a pageable list of all items in a subscription, that can be protected.
     * @param apiVersion Client API version. (required)
     * @param vaultName The name of the Recovery Services vault. (required)
     * @param resourceGroupName The name of the resource group associated with the Recovery Services vault. (required)
     * @param subscriptionId The subscription ID. (required)
     * @param $filter  itemType eq { VM , FileFolder , AzureSqlDb , SQLDB , Exchange , Sharepoint , DPMUnknown } and providerType eq { AzureIaasVM, MAB, DPM, AzureBackupServer, AzureSql } and policyName eq {policyName} and containerName eq {containername} and backupManagementType eq { AzureIaasVM, MAB, DPM, AzureBackupServer, AzureSql }. (optional)
     * @param $skipToken  The Skip Token filter. (optional)
     * @return ProtectedItemResourceList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
     </table>
     */
    public ProtectedItemResourceList protectedItemsList(String apiVersion, String vaultName, String resourceGroupName, String subscriptionId, String $filter, String $skipToken) throws ApiException {
        ApiResponse<ProtectedItemResourceList> localVarResp = protectedItemsListWithHttpInfo(apiVersion, vaultName, resourceGroupName, subscriptionId, $filter, $skipToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Provides a pageable list of all items in a subscription, that can be protected.
     * @param apiVersion Client API version. (required)
     * @param vaultName The name of the Recovery Services vault. (required)
     * @param resourceGroupName The name of the resource group associated with the Recovery Services vault. (required)
     * @param subscriptionId The subscription ID. (required)
     * @param $filter  itemType eq { VM , FileFolder , AzureSqlDb , SQLDB , Exchange , Sharepoint , DPMUnknown } and providerType eq { AzureIaasVM, MAB, DPM, AzureBackupServer, AzureSql } and policyName eq {policyName} and containerName eq {containername} and backupManagementType eq { AzureIaasVM, MAB, DPM, AzureBackupServer, AzureSql }. (optional)
     * @param $skipToken  The Skip Token filter. (optional)
     * @return ApiResponse&lt;ProtectedItemResourceList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProtectedItemResourceList> protectedItemsListWithHttpInfo(String apiVersion, String vaultName, String resourceGroupName, String subscriptionId, String $filter, String $skipToken) throws ApiException {
        okhttp3.Call localVarCall = protectedItemsListValidateBeforeCall(apiVersion, vaultName, resourceGroupName, subscriptionId, $filter, $skipToken, null);
        Type localVarReturnType = new TypeToken<ProtectedItemResourceList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Provides a pageable list of all items in a subscription, that can be protected.
     * @param apiVersion Client API version. (required)
     * @param vaultName The name of the Recovery Services vault. (required)
     * @param resourceGroupName The name of the resource group associated with the Recovery Services vault. (required)
     * @param subscriptionId The subscription ID. (required)
     * @param $filter  itemType eq { VM , FileFolder , AzureSqlDb , SQLDB , Exchange , Sharepoint , DPMUnknown } and providerType eq { AzureIaasVM, MAB, DPM, AzureBackupServer, AzureSql } and policyName eq {policyName} and containerName eq {containername} and backupManagementType eq { AzureIaasVM, MAB, DPM, AzureBackupServer, AzureSql }. (optional)
     * @param $skipToken  The Skip Token filter. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protectedItemsListAsync(String apiVersion, String vaultName, String resourceGroupName, String subscriptionId, String $filter, String $skipToken, final ApiCallback<ProtectedItemResourceList> _callback) throws ApiException {

        okhttp3.Call localVarCall = protectedItemsListValidateBeforeCall(apiVersion, vaultName, resourceGroupName, subscriptionId, $filter, $skipToken, _callback);
        Type localVarReturnType = new TypeToken<ProtectedItemResourceList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
