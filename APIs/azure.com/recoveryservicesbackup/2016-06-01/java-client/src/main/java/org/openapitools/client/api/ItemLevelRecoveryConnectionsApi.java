/*
 * RecoveryServicesBackupClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ILRRequestResource;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ItemLevelRecoveryConnectionsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ItemLevelRecoveryConnectionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ItemLevelRecoveryConnectionsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for itemLevelRecoveryConnectionsProvision
     * @param apiVersion Client API version. (required)
     * @param vaultName The name of the Recovery Services vault. (required)
     * @param resourceGroupName The name of the resource group associated with the Recovery Services vault. (required)
     * @param subscriptionId The subscription ID. (required)
     * @param fabricName The fabric name associated with the backup items. (required)
     * @param containerName The container name associated with the backup items. (required)
     * @param protectedItemName The name of the backup item whose files or folders are to be restored. (required)
     * @param recoveryPointId The recovery point ID for backup data. The iSCSI connection will be provisioned for this backup data. (required)
     * @param resourceILRRequest The resource Item Level Recovery (ILR) request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call itemLevelRecoveryConnectionsProvisionCall(String apiVersion, String vaultName, String resourceGroupName, String subscriptionId, String fabricName, String containerName, String protectedItemName, String recoveryPointId, ILRRequestResource resourceILRRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = resourceILRRequest;

        // create path and map variables
        String localVarPath = "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/backupFabrics/{fabricName}/protectionContainers/{containerName}/protectedItems/{protectedItemName}/recoveryPoints/{recoveryPointId}/provisionInstantItemRecovery"
            .replace("{" + "vaultName" + "}", localVarApiClient.escapeString(vaultName.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "fabricName" + "}", localVarApiClient.escapeString(fabricName.toString()))
            .replace("{" + "containerName" + "}", localVarApiClient.escapeString(containerName.toString()))
            .replace("{" + "protectedItemName" + "}", localVarApiClient.escapeString(protectedItemName.toString()))
            .replace("{" + "recoveryPointId" + "}", localVarApiClient.escapeString(recoveryPointId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call itemLevelRecoveryConnectionsProvisionValidateBeforeCall(String apiVersion, String vaultName, String resourceGroupName, String subscriptionId, String fabricName, String containerName, String protectedItemName, String recoveryPointId, ILRRequestResource resourceILRRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling itemLevelRecoveryConnectionsProvision(Async)");
        }

        // verify the required parameter 'vaultName' is set
        if (vaultName == null) {
            throw new ApiException("Missing the required parameter 'vaultName' when calling itemLevelRecoveryConnectionsProvision(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling itemLevelRecoveryConnectionsProvision(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling itemLevelRecoveryConnectionsProvision(Async)");
        }

        // verify the required parameter 'fabricName' is set
        if (fabricName == null) {
            throw new ApiException("Missing the required parameter 'fabricName' when calling itemLevelRecoveryConnectionsProvision(Async)");
        }

        // verify the required parameter 'containerName' is set
        if (containerName == null) {
            throw new ApiException("Missing the required parameter 'containerName' when calling itemLevelRecoveryConnectionsProvision(Async)");
        }

        // verify the required parameter 'protectedItemName' is set
        if (protectedItemName == null) {
            throw new ApiException("Missing the required parameter 'protectedItemName' when calling itemLevelRecoveryConnectionsProvision(Async)");
        }

        // verify the required parameter 'recoveryPointId' is set
        if (recoveryPointId == null) {
            throw new ApiException("Missing the required parameter 'recoveryPointId' when calling itemLevelRecoveryConnectionsProvision(Async)");
        }

        // verify the required parameter 'resourceILRRequest' is set
        if (resourceILRRequest == null) {
            throw new ApiException("Missing the required parameter 'resourceILRRequest' when calling itemLevelRecoveryConnectionsProvision(Async)");
        }

        return itemLevelRecoveryConnectionsProvisionCall(apiVersion, vaultName, resourceGroupName, subscriptionId, fabricName, containerName, protectedItemName, recoveryPointId, resourceILRRequest, _callback);

    }

    /**
     * 
     * Provisions a script which invokes an iSCSI connection to the backup data. Executing this script opens File Explorer which displays the recoverable files and folders. This is an asynchronous operation. To get the provisioning status, call GetProtectedItemOperationResult API.
     * @param apiVersion Client API version. (required)
     * @param vaultName The name of the Recovery Services vault. (required)
     * @param resourceGroupName The name of the resource group associated with the Recovery Services vault. (required)
     * @param subscriptionId The subscription ID. (required)
     * @param fabricName The fabric name associated with the backup items. (required)
     * @param containerName The container name associated with the backup items. (required)
     * @param protectedItemName The name of the backup item whose files or folders are to be restored. (required)
     * @param recoveryPointId The recovery point ID for backup data. The iSCSI connection will be provisioned for this backup data. (required)
     * @param resourceILRRequest The resource Item Level Recovery (ILR) request. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted. </td><td>  -  </td></tr>
     </table>
     */
    public void itemLevelRecoveryConnectionsProvision(String apiVersion, String vaultName, String resourceGroupName, String subscriptionId, String fabricName, String containerName, String protectedItemName, String recoveryPointId, ILRRequestResource resourceILRRequest) throws ApiException {
        itemLevelRecoveryConnectionsProvisionWithHttpInfo(apiVersion, vaultName, resourceGroupName, subscriptionId, fabricName, containerName, protectedItemName, recoveryPointId, resourceILRRequest);
    }

    /**
     * 
     * Provisions a script which invokes an iSCSI connection to the backup data. Executing this script opens File Explorer which displays the recoverable files and folders. This is an asynchronous operation. To get the provisioning status, call GetProtectedItemOperationResult API.
     * @param apiVersion Client API version. (required)
     * @param vaultName The name of the Recovery Services vault. (required)
     * @param resourceGroupName The name of the resource group associated with the Recovery Services vault. (required)
     * @param subscriptionId The subscription ID. (required)
     * @param fabricName The fabric name associated with the backup items. (required)
     * @param containerName The container name associated with the backup items. (required)
     * @param protectedItemName The name of the backup item whose files or folders are to be restored. (required)
     * @param recoveryPointId The recovery point ID for backup data. The iSCSI connection will be provisioned for this backup data. (required)
     * @param resourceILRRequest The resource Item Level Recovery (ILR) request. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> itemLevelRecoveryConnectionsProvisionWithHttpInfo(String apiVersion, String vaultName, String resourceGroupName, String subscriptionId, String fabricName, String containerName, String protectedItemName, String recoveryPointId, ILRRequestResource resourceILRRequest) throws ApiException {
        okhttp3.Call localVarCall = itemLevelRecoveryConnectionsProvisionValidateBeforeCall(apiVersion, vaultName, resourceGroupName, subscriptionId, fabricName, containerName, protectedItemName, recoveryPointId, resourceILRRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Provisions a script which invokes an iSCSI connection to the backup data. Executing this script opens File Explorer which displays the recoverable files and folders. This is an asynchronous operation. To get the provisioning status, call GetProtectedItemOperationResult API.
     * @param apiVersion Client API version. (required)
     * @param vaultName The name of the Recovery Services vault. (required)
     * @param resourceGroupName The name of the resource group associated with the Recovery Services vault. (required)
     * @param subscriptionId The subscription ID. (required)
     * @param fabricName The fabric name associated with the backup items. (required)
     * @param containerName The container name associated with the backup items. (required)
     * @param protectedItemName The name of the backup item whose files or folders are to be restored. (required)
     * @param recoveryPointId The recovery point ID for backup data. The iSCSI connection will be provisioned for this backup data. (required)
     * @param resourceILRRequest The resource Item Level Recovery (ILR) request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call itemLevelRecoveryConnectionsProvisionAsync(String apiVersion, String vaultName, String resourceGroupName, String subscriptionId, String fabricName, String containerName, String protectedItemName, String recoveryPointId, ILRRequestResource resourceILRRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = itemLevelRecoveryConnectionsProvisionValidateBeforeCall(apiVersion, vaultName, resourceGroupName, subscriptionId, fabricName, containerName, protectedItemName, recoveryPointId, resourceILRRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for itemLevelRecoveryConnectionsRevoke
     * @param apiVersion Client API version. (required)
     * @param vaultName The name of the Recovery Services vault. (required)
     * @param resourceGroupName The name of the resource group associated with the Recovery Services vault. (required)
     * @param subscriptionId The subscription ID. (required)
     * @param fabricName The fabric name associated with the backup items. The value allowed is Azure. (required)
     * @param containerName The container name associated with the backup items. (required)
     * @param protectedItemName The name of the backup items whose files or folders will be restored. (required)
     * @param recoveryPointId The string that identifies the recovery point. The iSCSI connection will be revoked for this protected data. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The revocation was accepted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call itemLevelRecoveryConnectionsRevokeCall(String apiVersion, String vaultName, String resourceGroupName, String subscriptionId, String fabricName, String containerName, String protectedItemName, String recoveryPointId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/backupFabrics/{fabricName}/protectionContainers/{containerName}/protectedItems/{protectedItemName}/recoveryPoints/{recoveryPointId}/revokeInstantItemRecovery"
            .replace("{" + "vaultName" + "}", localVarApiClient.escapeString(vaultName.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "fabricName" + "}", localVarApiClient.escapeString(fabricName.toString()))
            .replace("{" + "containerName" + "}", localVarApiClient.escapeString(containerName.toString()))
            .replace("{" + "protectedItemName" + "}", localVarApiClient.escapeString(protectedItemName.toString()))
            .replace("{" + "recoveryPointId" + "}", localVarApiClient.escapeString(recoveryPointId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call itemLevelRecoveryConnectionsRevokeValidateBeforeCall(String apiVersion, String vaultName, String resourceGroupName, String subscriptionId, String fabricName, String containerName, String protectedItemName, String recoveryPointId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling itemLevelRecoveryConnectionsRevoke(Async)");
        }

        // verify the required parameter 'vaultName' is set
        if (vaultName == null) {
            throw new ApiException("Missing the required parameter 'vaultName' when calling itemLevelRecoveryConnectionsRevoke(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling itemLevelRecoveryConnectionsRevoke(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling itemLevelRecoveryConnectionsRevoke(Async)");
        }

        // verify the required parameter 'fabricName' is set
        if (fabricName == null) {
            throw new ApiException("Missing the required parameter 'fabricName' when calling itemLevelRecoveryConnectionsRevoke(Async)");
        }

        // verify the required parameter 'containerName' is set
        if (containerName == null) {
            throw new ApiException("Missing the required parameter 'containerName' when calling itemLevelRecoveryConnectionsRevoke(Async)");
        }

        // verify the required parameter 'protectedItemName' is set
        if (protectedItemName == null) {
            throw new ApiException("Missing the required parameter 'protectedItemName' when calling itemLevelRecoveryConnectionsRevoke(Async)");
        }

        // verify the required parameter 'recoveryPointId' is set
        if (recoveryPointId == null) {
            throw new ApiException("Missing the required parameter 'recoveryPointId' when calling itemLevelRecoveryConnectionsRevoke(Async)");
        }

        return itemLevelRecoveryConnectionsRevokeCall(apiVersion, vaultName, resourceGroupName, subscriptionId, fabricName, containerName, protectedItemName, recoveryPointId, _callback);

    }

    /**
     * 
     * Revokes an iSCSI connection which can be used to download a script. Executing this script opens a file explorer displaying all recoverable files and folders. This is an asynchronous operation.
     * @param apiVersion Client API version. (required)
     * @param vaultName The name of the Recovery Services vault. (required)
     * @param resourceGroupName The name of the resource group associated with the Recovery Services vault. (required)
     * @param subscriptionId The subscription ID. (required)
     * @param fabricName The fabric name associated with the backup items. The value allowed is Azure. (required)
     * @param containerName The container name associated with the backup items. (required)
     * @param protectedItemName The name of the backup items whose files or folders will be restored. (required)
     * @param recoveryPointId The string that identifies the recovery point. The iSCSI connection will be revoked for this protected data. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The revocation was accepted. </td><td>  -  </td></tr>
     </table>
     */
    public void itemLevelRecoveryConnectionsRevoke(String apiVersion, String vaultName, String resourceGroupName, String subscriptionId, String fabricName, String containerName, String protectedItemName, String recoveryPointId) throws ApiException {
        itemLevelRecoveryConnectionsRevokeWithHttpInfo(apiVersion, vaultName, resourceGroupName, subscriptionId, fabricName, containerName, protectedItemName, recoveryPointId);
    }

    /**
     * 
     * Revokes an iSCSI connection which can be used to download a script. Executing this script opens a file explorer displaying all recoverable files and folders. This is an asynchronous operation.
     * @param apiVersion Client API version. (required)
     * @param vaultName The name of the Recovery Services vault. (required)
     * @param resourceGroupName The name of the resource group associated with the Recovery Services vault. (required)
     * @param subscriptionId The subscription ID. (required)
     * @param fabricName The fabric name associated with the backup items. The value allowed is Azure. (required)
     * @param containerName The container name associated with the backup items. (required)
     * @param protectedItemName The name of the backup items whose files or folders will be restored. (required)
     * @param recoveryPointId The string that identifies the recovery point. The iSCSI connection will be revoked for this protected data. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The revocation was accepted. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> itemLevelRecoveryConnectionsRevokeWithHttpInfo(String apiVersion, String vaultName, String resourceGroupName, String subscriptionId, String fabricName, String containerName, String protectedItemName, String recoveryPointId) throws ApiException {
        okhttp3.Call localVarCall = itemLevelRecoveryConnectionsRevokeValidateBeforeCall(apiVersion, vaultName, resourceGroupName, subscriptionId, fabricName, containerName, protectedItemName, recoveryPointId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Revokes an iSCSI connection which can be used to download a script. Executing this script opens a file explorer displaying all recoverable files and folders. This is an asynchronous operation.
     * @param apiVersion Client API version. (required)
     * @param vaultName The name of the Recovery Services vault. (required)
     * @param resourceGroupName The name of the resource group associated with the Recovery Services vault. (required)
     * @param subscriptionId The subscription ID. (required)
     * @param fabricName The fabric name associated with the backup items. The value allowed is Azure. (required)
     * @param containerName The container name associated with the backup items. (required)
     * @param protectedItemName The name of the backup items whose files or folders will be restored. (required)
     * @param recoveryPointId The string that identifies the recovery point. The iSCSI connection will be revoked for this protected data. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The revocation was accepted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call itemLevelRecoveryConnectionsRevokeAsync(String apiVersion, String vaultName, String resourceGroupName, String subscriptionId, String fabricName, String containerName, String protectedItemName, String recoveryPointId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = itemLevelRecoveryConnectionsRevokeValidateBeforeCall(apiVersion, vaultName, resourceGroupName, subscriptionId, fabricName, containerName, protectedItemName, recoveryPointId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
