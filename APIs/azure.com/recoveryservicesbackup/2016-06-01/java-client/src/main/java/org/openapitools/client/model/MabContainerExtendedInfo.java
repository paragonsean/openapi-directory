/*
 * RecoveryServicesBackupClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Additional information for the container.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:23:21.567091-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MabContainerExtendedInfo {
  /**
   * The type of backup items associated with this container.
   */
  @JsonAdapter(BackupItemTypeEnum.Adapter.class)
  public enum BackupItemTypeEnum {
    INVALID("Invalid"),
    
    VM("VM"),
    
    FILE_FOLDER("FileFolder"),
    
    AZURE_SQL_DB("AzureSqlDb"),
    
    SQLDB("SQLDB"),
    
    EXCHANGE("Exchange"),
    
    SHAREPOINT("Sharepoint"),
    
    DPM_UNKNOWN("DPMUnknown");

    private String value;

    BackupItemTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BackupItemTypeEnum fromValue(String value) {
      for (BackupItemTypeEnum b : BackupItemTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BackupItemTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BackupItemTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BackupItemTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BackupItemTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      BackupItemTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_BACKUP_ITEM_TYPE = "backupItemType";
  @SerializedName(SERIALIZED_NAME_BACKUP_ITEM_TYPE)
  private BackupItemTypeEnum backupItemType;

  public static final String SERIALIZED_NAME_BACKUP_ITEMS = "backupItems";
  @SerializedName(SERIALIZED_NAME_BACKUP_ITEMS)
  private List<String> backupItems = new ArrayList<>();

  public static final String SERIALIZED_NAME_LAST_BACKUP_STATUS = "lastBackupStatus";
  @SerializedName(SERIALIZED_NAME_LAST_BACKUP_STATUS)
  private String lastBackupStatus;

  public static final String SERIALIZED_NAME_LAST_REFRESHED_AT = "lastRefreshedAt";
  @SerializedName(SERIALIZED_NAME_LAST_REFRESHED_AT)
  private OffsetDateTime lastRefreshedAt;

  public static final String SERIALIZED_NAME_POLICY_NAME = "policyName";
  @SerializedName(SERIALIZED_NAME_POLICY_NAME)
  private String policyName;

  public MabContainerExtendedInfo() {
  }

  public MabContainerExtendedInfo backupItemType(BackupItemTypeEnum backupItemType) {
    this.backupItemType = backupItemType;
    return this;
  }

  /**
   * The type of backup items associated with this container.
   * @return backupItemType
   */
  @javax.annotation.Nullable
  public BackupItemTypeEnum getBackupItemType() {
    return backupItemType;
  }

  public void setBackupItemType(BackupItemTypeEnum backupItemType) {
    this.backupItemType = backupItemType;
  }


  public MabContainerExtendedInfo backupItems(List<String> backupItems) {
    this.backupItems = backupItems;
    return this;
  }

  public MabContainerExtendedInfo addBackupItemsItem(String backupItemsItem) {
    if (this.backupItems == null) {
      this.backupItems = new ArrayList<>();
    }
    this.backupItems.add(backupItemsItem);
    return this;
  }

  /**
   * The list of backup items associated with this container.
   * @return backupItems
   */
  @javax.annotation.Nullable
  public List<String> getBackupItems() {
    return backupItems;
  }

  public void setBackupItems(List<String> backupItems) {
    this.backupItems = backupItems;
  }


  public MabContainerExtendedInfo lastBackupStatus(String lastBackupStatus) {
    this.lastBackupStatus = lastBackupStatus;
    return this;
  }

  /**
   * The latest backup status of this container.
   * @return lastBackupStatus
   */
  @javax.annotation.Nullable
  public String getLastBackupStatus() {
    return lastBackupStatus;
  }

  public void setLastBackupStatus(String lastBackupStatus) {
    this.lastBackupStatus = lastBackupStatus;
  }


  public MabContainerExtendedInfo lastRefreshedAt(OffsetDateTime lastRefreshedAt) {
    this.lastRefreshedAt = lastRefreshedAt;
    return this;
  }

  /**
   * The time stamp when this container was refreshed.
   * @return lastRefreshedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastRefreshedAt() {
    return lastRefreshedAt;
  }

  public void setLastRefreshedAt(OffsetDateTime lastRefreshedAt) {
    this.lastRefreshedAt = lastRefreshedAt;
  }


  public MabContainerExtendedInfo policyName(String policyName) {
    this.policyName = policyName;
    return this;
  }

  /**
   * The backup policy associated with this container.
   * @return policyName
   */
  @javax.annotation.Nullable
  public String getPolicyName() {
    return policyName;
  }

  public void setPolicyName(String policyName) {
    this.policyName = policyName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MabContainerExtendedInfo mabContainerExtendedInfo = (MabContainerExtendedInfo) o;
    return Objects.equals(this.backupItemType, mabContainerExtendedInfo.backupItemType) &&
        Objects.equals(this.backupItems, mabContainerExtendedInfo.backupItems) &&
        Objects.equals(this.lastBackupStatus, mabContainerExtendedInfo.lastBackupStatus) &&
        Objects.equals(this.lastRefreshedAt, mabContainerExtendedInfo.lastRefreshedAt) &&
        Objects.equals(this.policyName, mabContainerExtendedInfo.policyName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(backupItemType, backupItems, lastBackupStatus, lastRefreshedAt, policyName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MabContainerExtendedInfo {\n");
    sb.append("    backupItemType: ").append(toIndentedString(backupItemType)).append("\n");
    sb.append("    backupItems: ").append(toIndentedString(backupItems)).append("\n");
    sb.append("    lastBackupStatus: ").append(toIndentedString(lastBackupStatus)).append("\n");
    sb.append("    lastRefreshedAt: ").append(toIndentedString(lastRefreshedAt)).append("\n");
    sb.append("    policyName: ").append(toIndentedString(policyName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("backupItemType");
    openapiFields.add("backupItems");
    openapiFields.add("lastBackupStatus");
    openapiFields.add("lastRefreshedAt");
    openapiFields.add("policyName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MabContainerExtendedInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MabContainerExtendedInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MabContainerExtendedInfo is not found in the empty JSON string", MabContainerExtendedInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MabContainerExtendedInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MabContainerExtendedInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("backupItemType") != null && !jsonObj.get("backupItemType").isJsonNull()) && !jsonObj.get("backupItemType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `backupItemType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("backupItemType").toString()));
      }
      // validate the optional field `backupItemType`
      if (jsonObj.get("backupItemType") != null && !jsonObj.get("backupItemType").isJsonNull()) {
        BackupItemTypeEnum.validateJsonElement(jsonObj.get("backupItemType"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("backupItems") != null && !jsonObj.get("backupItems").isJsonNull() && !jsonObj.get("backupItems").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `backupItems` to be an array in the JSON string but got `%s`", jsonObj.get("backupItems").toString()));
      }
      if ((jsonObj.get("lastBackupStatus") != null && !jsonObj.get("lastBackupStatus").isJsonNull()) && !jsonObj.get("lastBackupStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastBackupStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastBackupStatus").toString()));
      }
      if ((jsonObj.get("policyName") != null && !jsonObj.get("policyName").isJsonNull()) && !jsonObj.get("policyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `policyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("policyName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MabContainerExtendedInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MabContainerExtendedInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MabContainerExtendedInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MabContainerExtendedInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<MabContainerExtendedInfo>() {
           @Override
           public void write(JsonWriter out, MabContainerExtendedInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MabContainerExtendedInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MabContainerExtendedInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MabContainerExtendedInfo
   * @throws IOException if the JSON string is invalid with respect to MabContainerExtendedInfo
   */
  public static MabContainerExtendedInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MabContainerExtendedInfo.class);
  }

  /**
   * Convert an instance of MabContainerExtendedInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

