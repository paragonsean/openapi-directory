/*
 * RecoveryServicesBackupClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Defines workload-agnostic properties for a job.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:23:21.567091-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Job {
  public static final String SERIALIZED_NAME_ACTIVITY_ID = "activityId";
  @SerializedName(SERIALIZED_NAME_ACTIVITY_ID)
  private String activityId;

  /**
   * The backup management type for the current job.
   */
  @JsonAdapter(BackupManagementTypeEnum.Adapter.class)
  public enum BackupManagementTypeEnum {
    INVALID("Invalid"),
    
    AZURE_IAAS_VM("AzureIaasVM"),
    
    MAB("MAB"),
    
    DPM("DPM"),
    
    AZURE_BACKUP_SERVER("AzureBackupServer"),
    
    AZURE_SQL("AzureSql");

    private String value;

    BackupManagementTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BackupManagementTypeEnum fromValue(String value) {
      for (BackupManagementTypeEnum b : BackupManagementTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BackupManagementTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BackupManagementTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BackupManagementTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BackupManagementTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      BackupManagementTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_BACKUP_MANAGEMENT_TYPE = "backupManagementType";
  @SerializedName(SERIALIZED_NAME_BACKUP_MANAGEMENT_TYPE)
  private BackupManagementTypeEnum backupManagementType;

  public static final String SERIALIZED_NAME_END_TIME = "endTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private OffsetDateTime endTime;

  public static final String SERIALIZED_NAME_ENTITY_FRIENDLY_NAME = "entityFriendlyName";
  @SerializedName(SERIALIZED_NAME_ENTITY_FRIENDLY_NAME)
  private String entityFriendlyName;

  public static final String SERIALIZED_NAME_JOB_TYPE = "jobType";
  @SerializedName(SERIALIZED_NAME_JOB_TYPE)
  protected String jobType;

  public static final String SERIALIZED_NAME_OPERATION = "operation";
  @SerializedName(SERIALIZED_NAME_OPERATION)
  private String operation;

  public static final String SERIALIZED_NAME_START_TIME = "startTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private OffsetDateTime startTime;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public Job() {
    this.jobType = this.getClass().getSimpleName();
  }

  public Job activityId(String activityId) {
    this.activityId = activityId;
    return this;
  }

  /**
   * ActivityId of job.
   * @return activityId
   */
  @javax.annotation.Nullable
  public String getActivityId() {
    return activityId;
  }

  public void setActivityId(String activityId) {
    this.activityId = activityId;
  }


  public Job backupManagementType(BackupManagementTypeEnum backupManagementType) {
    this.backupManagementType = backupManagementType;
    return this;
  }

  /**
   * The backup management type for the current job.
   * @return backupManagementType
   */
  @javax.annotation.Nullable
  public BackupManagementTypeEnum getBackupManagementType() {
    return backupManagementType;
  }

  public void setBackupManagementType(BackupManagementTypeEnum backupManagementType) {
    this.backupManagementType = backupManagementType;
  }


  public Job endTime(OffsetDateTime endTime) {
    this.endTime = endTime;
    return this;
  }

  /**
   * The end time.
   * @return endTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEndTime() {
    return endTime;
  }

  public void setEndTime(OffsetDateTime endTime) {
    this.endTime = endTime;
  }


  public Job entityFriendlyName(String entityFriendlyName) {
    this.entityFriendlyName = entityFriendlyName;
    return this;
  }

  /**
   * The friendly name of the entity on which the current job is executing.
   * @return entityFriendlyName
   */
  @javax.annotation.Nullable
  public String getEntityFriendlyName() {
    return entityFriendlyName;
  }

  public void setEntityFriendlyName(String entityFriendlyName) {
    this.entityFriendlyName = entityFriendlyName;
  }


  public Job jobType(String jobType) {
    this.jobType = jobType;
    return this;
  }

  /**
   * This property is the discriminator for deciding between the specific types in the polymorphic chain of types.
   * @return jobType
   */
  @javax.annotation.Nullable
  public String getJobType() {
    return jobType;
  }

  public void setJobType(String jobType) {
    this.jobType = jobType;
  }


  public Job operation(String operation) {
    this.operation = operation;
    return this;
  }

  /**
   * The operation name.
   * @return operation
   */
  @javax.annotation.Nullable
  public String getOperation() {
    return operation;
  }

  public void setOperation(String operation) {
    this.operation = operation;
  }


  public Job startTime(OffsetDateTime startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * The start time.
   * @return startTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartTime() {
    return startTime;
  }

  public void setStartTime(OffsetDateTime startTime) {
    this.startTime = startTime;
  }


  public Job status(String status) {
    this.status = status;
    return this;
  }

  /**
   * The job status.
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Job job = (Job) o;
    return Objects.equals(this.activityId, job.activityId) &&
        Objects.equals(this.backupManagementType, job.backupManagementType) &&
        Objects.equals(this.endTime, job.endTime) &&
        Objects.equals(this.entityFriendlyName, job.entityFriendlyName) &&
        Objects.equals(this.jobType, job.jobType) &&
        Objects.equals(this.operation, job.operation) &&
        Objects.equals(this.startTime, job.startTime) &&
        Objects.equals(this.status, job.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activityId, backupManagementType, endTime, entityFriendlyName, jobType, operation, startTime, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Job {\n");
    sb.append("    activityId: ").append(toIndentedString(activityId)).append("\n");
    sb.append("    backupManagementType: ").append(toIndentedString(backupManagementType)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    entityFriendlyName: ").append(toIndentedString(entityFriendlyName)).append("\n");
    sb.append("    jobType: ").append(toIndentedString(jobType)).append("\n");
    sb.append("    operation: ").append(toIndentedString(operation)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("activityId");
    openapiFields.add("backupManagementType");
    openapiFields.add("endTime");
    openapiFields.add("entityFriendlyName");
    openapiFields.add("jobType");
    openapiFields.add("operation");
    openapiFields.add("startTime");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Job
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Job.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Job is not found in the empty JSON string", Job.openapiRequiredFields.toString()));
        }
      }

      String discriminatorValue = jsonElement.getAsJsonObject().get("jobType").getAsString();
      switch (discriminatorValue) {
        case "AzureIaaSVMJob":
          AzureIaaSVMJob.validateJsonElement(jsonElement);
          break;
        case "DpmJob":
          DpmJob.validateJsonElement(jsonElement);
          break;
        case "MabJob":
          MabJob.validateJsonElement(jsonElement);
          break;
        default:
          throw new IllegalArgumentException(String.format("The value of the `jobType` field `%s` does not match any key defined in the discriminator's mapping.", discriminatorValue));
      }
  }


  /**
   * Create an instance of Job given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Job
   * @throws IOException if the JSON string is invalid with respect to Job
   */
  public static Job fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Job.class);
  }

  /**
   * Convert an instance of Job to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

