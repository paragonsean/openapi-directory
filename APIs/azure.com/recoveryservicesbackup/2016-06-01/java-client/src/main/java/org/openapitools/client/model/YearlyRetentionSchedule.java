/*
 * RecoveryServicesBackupClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DailyRetentionFormat;
import org.openapitools.client.model.RetentionDuration;
import org.openapitools.client.model.WeeklyRetentionFormat;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Yearly retention schedule.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:23:21.567091-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class YearlyRetentionSchedule {
  /**
   * Gets or Sets monthsOfYear
   */
  @JsonAdapter(MonthsOfYearEnum.Adapter.class)
  public enum MonthsOfYearEnum {
    INVALID("Invalid"),
    
    JANUARY("January"),
    
    FEBRUARY("February"),
    
    MARCH("March"),
    
    APRIL("April"),
    
    MAY("May"),
    
    JUNE("June"),
    
    JULY("July"),
    
    AUGUST("August"),
    
    SEPTEMBER("September"),
    
    OCTOBER("October"),
    
    NOVEMBER("November"),
    
    DECEMBER("December");

    private String value;

    MonthsOfYearEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MonthsOfYearEnum fromValue(String value) {
      for (MonthsOfYearEnum b : MonthsOfYearEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MonthsOfYearEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MonthsOfYearEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MonthsOfYearEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MonthsOfYearEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MonthsOfYearEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MONTHS_OF_YEAR = "monthsOfYear";
  @SerializedName(SERIALIZED_NAME_MONTHS_OF_YEAR)
  private List<MonthsOfYearEnum> monthsOfYear = new ArrayList<>();

  public static final String SERIALIZED_NAME_RETENTION_DURATION = "retentionDuration";
  @SerializedName(SERIALIZED_NAME_RETENTION_DURATION)
  private RetentionDuration retentionDuration;

  public static final String SERIALIZED_NAME_RETENTION_SCHEDULE_DAILY = "retentionScheduleDaily";
  @SerializedName(SERIALIZED_NAME_RETENTION_SCHEDULE_DAILY)
  private DailyRetentionFormat retentionScheduleDaily;

  /**
   * Retention schedule format for the yearly retention policy.
   */
  @JsonAdapter(RetentionScheduleFormatTypeEnum.Adapter.class)
  public enum RetentionScheduleFormatTypeEnum {
    INVALID("Invalid"),
    
    DAILY("Daily"),
    
    WEEKLY("Weekly");

    private String value;

    RetentionScheduleFormatTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RetentionScheduleFormatTypeEnum fromValue(String value) {
      for (RetentionScheduleFormatTypeEnum b : RetentionScheduleFormatTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RetentionScheduleFormatTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RetentionScheduleFormatTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RetentionScheduleFormatTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RetentionScheduleFormatTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RetentionScheduleFormatTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RETENTION_SCHEDULE_FORMAT_TYPE = "retentionScheduleFormatType";
  @SerializedName(SERIALIZED_NAME_RETENTION_SCHEDULE_FORMAT_TYPE)
  private RetentionScheduleFormatTypeEnum retentionScheduleFormatType;

  public static final String SERIALIZED_NAME_RETENTION_SCHEDULE_WEEKLY = "retentionScheduleWeekly";
  @SerializedName(SERIALIZED_NAME_RETENTION_SCHEDULE_WEEKLY)
  private WeeklyRetentionFormat retentionScheduleWeekly;

  public static final String SERIALIZED_NAME_RETENTION_TIMES = "retentionTimes";
  @SerializedName(SERIALIZED_NAME_RETENTION_TIMES)
  private List<OffsetDateTime> retentionTimes = new ArrayList<>();

  public YearlyRetentionSchedule() {
  }

  public YearlyRetentionSchedule monthsOfYear(List<MonthsOfYearEnum> monthsOfYear) {
    this.monthsOfYear = monthsOfYear;
    return this;
  }

  public YearlyRetentionSchedule addMonthsOfYearItem(MonthsOfYearEnum monthsOfYearItem) {
    if (this.monthsOfYear == null) {
      this.monthsOfYear = new ArrayList<>();
    }
    this.monthsOfYear.add(monthsOfYearItem);
    return this;
  }

  /**
   * List of the months of year for the yearly retention policy.
   * @return monthsOfYear
   */
  @javax.annotation.Nullable
  public List<MonthsOfYearEnum> getMonthsOfYear() {
    return monthsOfYear;
  }

  public void setMonthsOfYear(List<MonthsOfYearEnum> monthsOfYear) {
    this.monthsOfYear = monthsOfYear;
  }


  public YearlyRetentionSchedule retentionDuration(RetentionDuration retentionDuration) {
    this.retentionDuration = retentionDuration;
    return this;
  }

  /**
   * Get retentionDuration
   * @return retentionDuration
   */
  @javax.annotation.Nullable
  public RetentionDuration getRetentionDuration() {
    return retentionDuration;
  }

  public void setRetentionDuration(RetentionDuration retentionDuration) {
    this.retentionDuration = retentionDuration;
  }


  public YearlyRetentionSchedule retentionScheduleDaily(DailyRetentionFormat retentionScheduleDaily) {
    this.retentionScheduleDaily = retentionScheduleDaily;
    return this;
  }

  /**
   * Get retentionScheduleDaily
   * @return retentionScheduleDaily
   */
  @javax.annotation.Nullable
  public DailyRetentionFormat getRetentionScheduleDaily() {
    return retentionScheduleDaily;
  }

  public void setRetentionScheduleDaily(DailyRetentionFormat retentionScheduleDaily) {
    this.retentionScheduleDaily = retentionScheduleDaily;
  }


  public YearlyRetentionSchedule retentionScheduleFormatType(RetentionScheduleFormatTypeEnum retentionScheduleFormatType) {
    this.retentionScheduleFormatType = retentionScheduleFormatType;
    return this;
  }

  /**
   * Retention schedule format for the yearly retention policy.
   * @return retentionScheduleFormatType
   */
  @javax.annotation.Nullable
  public RetentionScheduleFormatTypeEnum getRetentionScheduleFormatType() {
    return retentionScheduleFormatType;
  }

  public void setRetentionScheduleFormatType(RetentionScheduleFormatTypeEnum retentionScheduleFormatType) {
    this.retentionScheduleFormatType = retentionScheduleFormatType;
  }


  public YearlyRetentionSchedule retentionScheduleWeekly(WeeklyRetentionFormat retentionScheduleWeekly) {
    this.retentionScheduleWeekly = retentionScheduleWeekly;
    return this;
  }

  /**
   * Get retentionScheduleWeekly
   * @return retentionScheduleWeekly
   */
  @javax.annotation.Nullable
  public WeeklyRetentionFormat getRetentionScheduleWeekly() {
    return retentionScheduleWeekly;
  }

  public void setRetentionScheduleWeekly(WeeklyRetentionFormat retentionScheduleWeekly) {
    this.retentionScheduleWeekly = retentionScheduleWeekly;
  }


  public YearlyRetentionSchedule retentionTimes(List<OffsetDateTime> retentionTimes) {
    this.retentionTimes = retentionTimes;
    return this;
  }

  public YearlyRetentionSchedule addRetentionTimesItem(OffsetDateTime retentionTimesItem) {
    if (this.retentionTimes == null) {
      this.retentionTimes = new ArrayList<>();
    }
    this.retentionTimes.add(retentionTimesItem);
    return this;
  }

  /**
   * Retention times for the retention policy.
   * @return retentionTimes
   */
  @javax.annotation.Nullable
  public List<OffsetDateTime> getRetentionTimes() {
    return retentionTimes;
  }

  public void setRetentionTimes(List<OffsetDateTime> retentionTimes) {
    this.retentionTimes = retentionTimes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    YearlyRetentionSchedule yearlyRetentionSchedule = (YearlyRetentionSchedule) o;
    return Objects.equals(this.monthsOfYear, yearlyRetentionSchedule.monthsOfYear) &&
        Objects.equals(this.retentionDuration, yearlyRetentionSchedule.retentionDuration) &&
        Objects.equals(this.retentionScheduleDaily, yearlyRetentionSchedule.retentionScheduleDaily) &&
        Objects.equals(this.retentionScheduleFormatType, yearlyRetentionSchedule.retentionScheduleFormatType) &&
        Objects.equals(this.retentionScheduleWeekly, yearlyRetentionSchedule.retentionScheduleWeekly) &&
        Objects.equals(this.retentionTimes, yearlyRetentionSchedule.retentionTimes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(monthsOfYear, retentionDuration, retentionScheduleDaily, retentionScheduleFormatType, retentionScheduleWeekly, retentionTimes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class YearlyRetentionSchedule {\n");
    sb.append("    monthsOfYear: ").append(toIndentedString(monthsOfYear)).append("\n");
    sb.append("    retentionDuration: ").append(toIndentedString(retentionDuration)).append("\n");
    sb.append("    retentionScheduleDaily: ").append(toIndentedString(retentionScheduleDaily)).append("\n");
    sb.append("    retentionScheduleFormatType: ").append(toIndentedString(retentionScheduleFormatType)).append("\n");
    sb.append("    retentionScheduleWeekly: ").append(toIndentedString(retentionScheduleWeekly)).append("\n");
    sb.append("    retentionTimes: ").append(toIndentedString(retentionTimes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("monthsOfYear");
    openapiFields.add("retentionDuration");
    openapiFields.add("retentionScheduleDaily");
    openapiFields.add("retentionScheduleFormatType");
    openapiFields.add("retentionScheduleWeekly");
    openapiFields.add("retentionTimes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to YearlyRetentionSchedule
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!YearlyRetentionSchedule.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in YearlyRetentionSchedule is not found in the empty JSON string", YearlyRetentionSchedule.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!YearlyRetentionSchedule.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `YearlyRetentionSchedule` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("monthsOfYear") != null && !jsonObj.get("monthsOfYear").isJsonNull() && !jsonObj.get("monthsOfYear").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `monthsOfYear` to be an array in the JSON string but got `%s`", jsonObj.get("monthsOfYear").toString()));
      }
      // validate the optional field `retentionDuration`
      if (jsonObj.get("retentionDuration") != null && !jsonObj.get("retentionDuration").isJsonNull()) {
        RetentionDuration.validateJsonElement(jsonObj.get("retentionDuration"));
      }
      // validate the optional field `retentionScheduleDaily`
      if (jsonObj.get("retentionScheduleDaily") != null && !jsonObj.get("retentionScheduleDaily").isJsonNull()) {
        DailyRetentionFormat.validateJsonElement(jsonObj.get("retentionScheduleDaily"));
      }
      if ((jsonObj.get("retentionScheduleFormatType") != null && !jsonObj.get("retentionScheduleFormatType").isJsonNull()) && !jsonObj.get("retentionScheduleFormatType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `retentionScheduleFormatType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("retentionScheduleFormatType").toString()));
      }
      // validate the optional field `retentionScheduleFormatType`
      if (jsonObj.get("retentionScheduleFormatType") != null && !jsonObj.get("retentionScheduleFormatType").isJsonNull()) {
        RetentionScheduleFormatTypeEnum.validateJsonElement(jsonObj.get("retentionScheduleFormatType"));
      }
      // validate the optional field `retentionScheduleWeekly`
      if (jsonObj.get("retentionScheduleWeekly") != null && !jsonObj.get("retentionScheduleWeekly").isJsonNull()) {
        WeeklyRetentionFormat.validateJsonElement(jsonObj.get("retentionScheduleWeekly"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("retentionTimes") != null && !jsonObj.get("retentionTimes").isJsonNull() && !jsonObj.get("retentionTimes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `retentionTimes` to be an array in the JSON string but got `%s`", jsonObj.get("retentionTimes").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!YearlyRetentionSchedule.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'YearlyRetentionSchedule' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<YearlyRetentionSchedule> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(YearlyRetentionSchedule.class));

       return (TypeAdapter<T>) new TypeAdapter<YearlyRetentionSchedule>() {
           @Override
           public void write(JsonWriter out, YearlyRetentionSchedule value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public YearlyRetentionSchedule read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of YearlyRetentionSchedule given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of YearlyRetentionSchedule
   * @throws IOException if the JSON string is invalid with respect to YearlyRetentionSchedule
   */
  public static YearlyRetentionSchedule fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, YearlyRetentionSchedule.class);
  }

  /**
   * Convert an instance of YearlyRetentionSchedule to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

