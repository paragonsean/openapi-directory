/*
 * RecoveryServicesBackupClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ProtectionPolicyResource;
import org.openapitools.client.model.ProtectionPolicyResourceList;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ProtectionPoliciesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ProtectionPoliciesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ProtectionPoliciesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for protectionPoliciesCreateOrUpdate
     * @param apiVersion Client API version. (required)
     * @param vaultName The name of the Recovery Services vault. (required)
     * @param resourceGroupName The name of the resource group associated with the Recovery Services vault. (required)
     * @param subscriptionId The subscription ID. (required)
     * @param policyName The backup policy to be created. (required)
     * @param resourceProtectionPolicy The resource backup policy. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protectionPoliciesCreateOrUpdateCall(String apiVersion, String vaultName, String resourceGroupName, String subscriptionId, String policyName, ProtectionPolicyResource resourceProtectionPolicy, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = resourceProtectionPolicy;

        // create path and map variables
        String localVarPath = "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/backupPolicies/{policyName}"
            .replace("{" + "vaultName" + "}", localVarApiClient.escapeString(vaultName.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "policyName" + "}", localVarApiClient.escapeString(policyName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call protectionPoliciesCreateOrUpdateValidateBeforeCall(String apiVersion, String vaultName, String resourceGroupName, String subscriptionId, String policyName, ProtectionPolicyResource resourceProtectionPolicy, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling protectionPoliciesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'vaultName' is set
        if (vaultName == null) {
            throw new ApiException("Missing the required parameter 'vaultName' when calling protectionPoliciesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling protectionPoliciesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling protectionPoliciesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'policyName' is set
        if (policyName == null) {
            throw new ApiException("Missing the required parameter 'policyName' when calling protectionPoliciesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'resourceProtectionPolicy' is set
        if (resourceProtectionPolicy == null) {
            throw new ApiException("Missing the required parameter 'resourceProtectionPolicy' when calling protectionPoliciesCreateOrUpdate(Async)");
        }

        return protectionPoliciesCreateOrUpdateCall(apiVersion, vaultName, resourceGroupName, subscriptionId, policyName, resourceProtectionPolicy, _callback);

    }

    /**
     * 
     * Creates or modifies a backup policy. This is an asynchronous operation. Use the GetPolicyOperationResult API to Get the operation status.
     * @param apiVersion Client API version. (required)
     * @param vaultName The name of the Recovery Services vault. (required)
     * @param resourceGroupName The name of the resource group associated with the Recovery Services vault. (required)
     * @param subscriptionId The subscription ID. (required)
     * @param policyName The backup policy to be created. (required)
     * @param resourceProtectionPolicy The resource backup policy. (required)
     * @return ProtectionPolicyResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. </td><td>  -  </td></tr>
     </table>
     */
    public ProtectionPolicyResource protectionPoliciesCreateOrUpdate(String apiVersion, String vaultName, String resourceGroupName, String subscriptionId, String policyName, ProtectionPolicyResource resourceProtectionPolicy) throws ApiException {
        ApiResponse<ProtectionPolicyResource> localVarResp = protectionPoliciesCreateOrUpdateWithHttpInfo(apiVersion, vaultName, resourceGroupName, subscriptionId, policyName, resourceProtectionPolicy);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates or modifies a backup policy. This is an asynchronous operation. Use the GetPolicyOperationResult API to Get the operation status.
     * @param apiVersion Client API version. (required)
     * @param vaultName The name of the Recovery Services vault. (required)
     * @param resourceGroupName The name of the resource group associated with the Recovery Services vault. (required)
     * @param subscriptionId The subscription ID. (required)
     * @param policyName The backup policy to be created. (required)
     * @param resourceProtectionPolicy The resource backup policy. (required)
     * @return ApiResponse&lt;ProtectionPolicyResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProtectionPolicyResource> protectionPoliciesCreateOrUpdateWithHttpInfo(String apiVersion, String vaultName, String resourceGroupName, String subscriptionId, String policyName, ProtectionPolicyResource resourceProtectionPolicy) throws ApiException {
        okhttp3.Call localVarCall = protectionPoliciesCreateOrUpdateValidateBeforeCall(apiVersion, vaultName, resourceGroupName, subscriptionId, policyName, resourceProtectionPolicy, null);
        Type localVarReturnType = new TypeToken<ProtectionPolicyResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates or modifies a backup policy. This is an asynchronous operation. Use the GetPolicyOperationResult API to Get the operation status.
     * @param apiVersion Client API version. (required)
     * @param vaultName The name of the Recovery Services vault. (required)
     * @param resourceGroupName The name of the resource group associated with the Recovery Services vault. (required)
     * @param subscriptionId The subscription ID. (required)
     * @param policyName The backup policy to be created. (required)
     * @param resourceProtectionPolicy The resource backup policy. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protectionPoliciesCreateOrUpdateAsync(String apiVersion, String vaultName, String resourceGroupName, String subscriptionId, String policyName, ProtectionPolicyResource resourceProtectionPolicy, final ApiCallback<ProtectionPolicyResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = protectionPoliciesCreateOrUpdateValidateBeforeCall(apiVersion, vaultName, resourceGroupName, subscriptionId, policyName, resourceProtectionPolicy, _callback);
        Type localVarReturnType = new TypeToken<ProtectionPolicyResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for protectionPoliciesDelete
     * @param apiVersion Client API version. (required)
     * @param vaultName The name of the Recovery Services vault. (required)
     * @param resourceGroupName The name of the resource group associated with the Recovery Services vault. (required)
     * @param subscriptionId The subscription ID. (required)
     * @param policyName The name of the backup policy to be deleted. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No content. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protectionPoliciesDeleteCall(String apiVersion, String vaultName, String resourceGroupName, String subscriptionId, String policyName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/backupPolicies/{policyName}"
            .replace("{" + "vaultName" + "}", localVarApiClient.escapeString(vaultName.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "policyName" + "}", localVarApiClient.escapeString(policyName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call protectionPoliciesDeleteValidateBeforeCall(String apiVersion, String vaultName, String resourceGroupName, String subscriptionId, String policyName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling protectionPoliciesDelete(Async)");
        }

        // verify the required parameter 'vaultName' is set
        if (vaultName == null) {
            throw new ApiException("Missing the required parameter 'vaultName' when calling protectionPoliciesDelete(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling protectionPoliciesDelete(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling protectionPoliciesDelete(Async)");
        }

        // verify the required parameter 'policyName' is set
        if (policyName == null) {
            throw new ApiException("Missing the required parameter 'policyName' when calling protectionPoliciesDelete(Async)");
        }

        return protectionPoliciesDeleteCall(apiVersion, vaultName, resourceGroupName, subscriptionId, policyName, _callback);

    }

    /**
     * 
     * Deletes the specified backup policy from your Recovery Services vault. This is an asynchronous operation. Use the GetPolicyOperationResult API to Get the operation status.
     * @param apiVersion Client API version. (required)
     * @param vaultName The name of the Recovery Services vault. (required)
     * @param resourceGroupName The name of the resource group associated with the Recovery Services vault. (required)
     * @param subscriptionId The subscription ID. (required)
     * @param policyName The name of the backup policy to be deleted. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No content. </td><td>  -  </td></tr>
     </table>
     */
    public void protectionPoliciesDelete(String apiVersion, String vaultName, String resourceGroupName, String subscriptionId, String policyName) throws ApiException {
        protectionPoliciesDeleteWithHttpInfo(apiVersion, vaultName, resourceGroupName, subscriptionId, policyName);
    }

    /**
     * 
     * Deletes the specified backup policy from your Recovery Services vault. This is an asynchronous operation. Use the GetPolicyOperationResult API to Get the operation status.
     * @param apiVersion Client API version. (required)
     * @param vaultName The name of the Recovery Services vault. (required)
     * @param resourceGroupName The name of the resource group associated with the Recovery Services vault. (required)
     * @param subscriptionId The subscription ID. (required)
     * @param policyName The name of the backup policy to be deleted. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No content. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> protectionPoliciesDeleteWithHttpInfo(String apiVersion, String vaultName, String resourceGroupName, String subscriptionId, String policyName) throws ApiException {
        okhttp3.Call localVarCall = protectionPoliciesDeleteValidateBeforeCall(apiVersion, vaultName, resourceGroupName, subscriptionId, policyName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes the specified backup policy from your Recovery Services vault. This is an asynchronous operation. Use the GetPolicyOperationResult API to Get the operation status.
     * @param apiVersion Client API version. (required)
     * @param vaultName The name of the Recovery Services vault. (required)
     * @param resourceGroupName The name of the resource group associated with the Recovery Services vault. (required)
     * @param subscriptionId The subscription ID. (required)
     * @param policyName The name of the backup policy to be deleted. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No content. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protectionPoliciesDeleteAsync(String apiVersion, String vaultName, String resourceGroupName, String subscriptionId, String policyName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = protectionPoliciesDeleteValidateBeforeCall(apiVersion, vaultName, resourceGroupName, subscriptionId, policyName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for protectionPoliciesGet
     * @param apiVersion Client API version. (required)
     * @param vaultName The name of the Recovery Services vault. (required)
     * @param resourceGroupName The name of the resource group associated with the Recovery Services vault. (required)
     * @param subscriptionId The subscription ID. (required)
     * @param policyName The backup policy name used in this GET operation. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protectionPoliciesGetCall(String apiVersion, String vaultName, String resourceGroupName, String subscriptionId, String policyName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/backupPolicies/{policyName}"
            .replace("{" + "vaultName" + "}", localVarApiClient.escapeString(vaultName.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "policyName" + "}", localVarApiClient.escapeString(policyName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call protectionPoliciesGetValidateBeforeCall(String apiVersion, String vaultName, String resourceGroupName, String subscriptionId, String policyName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling protectionPoliciesGet(Async)");
        }

        // verify the required parameter 'vaultName' is set
        if (vaultName == null) {
            throw new ApiException("Missing the required parameter 'vaultName' when calling protectionPoliciesGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling protectionPoliciesGet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling protectionPoliciesGet(Async)");
        }

        // verify the required parameter 'policyName' is set
        if (policyName == null) {
            throw new ApiException("Missing the required parameter 'policyName' when calling protectionPoliciesGet(Async)");
        }

        return protectionPoliciesGetCall(apiVersion, vaultName, resourceGroupName, subscriptionId, policyName, _callback);

    }

    /**
     * 
     * Gets the details of the backup policy associated with the Recovery Services vault. This is an asynchronous operation. Use the GetPolicyOperationResult API to Get the operation status.
     * @param apiVersion Client API version. (required)
     * @param vaultName The name of the Recovery Services vault. (required)
     * @param resourceGroupName The name of the resource group associated with the Recovery Services vault. (required)
     * @param subscriptionId The subscription ID. (required)
     * @param policyName The backup policy name used in this GET operation. (required)
     * @return ProtectionPolicyResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
     </table>
     */
    public ProtectionPolicyResource protectionPoliciesGet(String apiVersion, String vaultName, String resourceGroupName, String subscriptionId, String policyName) throws ApiException {
        ApiResponse<ProtectionPolicyResource> localVarResp = protectionPoliciesGetWithHttpInfo(apiVersion, vaultName, resourceGroupName, subscriptionId, policyName);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the details of the backup policy associated with the Recovery Services vault. This is an asynchronous operation. Use the GetPolicyOperationResult API to Get the operation status.
     * @param apiVersion Client API version. (required)
     * @param vaultName The name of the Recovery Services vault. (required)
     * @param resourceGroupName The name of the resource group associated with the Recovery Services vault. (required)
     * @param subscriptionId The subscription ID. (required)
     * @param policyName The backup policy name used in this GET operation. (required)
     * @return ApiResponse&lt;ProtectionPolicyResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProtectionPolicyResource> protectionPoliciesGetWithHttpInfo(String apiVersion, String vaultName, String resourceGroupName, String subscriptionId, String policyName) throws ApiException {
        okhttp3.Call localVarCall = protectionPoliciesGetValidateBeforeCall(apiVersion, vaultName, resourceGroupName, subscriptionId, policyName, null);
        Type localVarReturnType = new TypeToken<ProtectionPolicyResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the details of the backup policy associated with the Recovery Services vault. This is an asynchronous operation. Use the GetPolicyOperationResult API to Get the operation status.
     * @param apiVersion Client API version. (required)
     * @param vaultName The name of the Recovery Services vault. (required)
     * @param resourceGroupName The name of the resource group associated with the Recovery Services vault. (required)
     * @param subscriptionId The subscription ID. (required)
     * @param policyName The backup policy name used in this GET operation. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protectionPoliciesGetAsync(String apiVersion, String vaultName, String resourceGroupName, String subscriptionId, String policyName, final ApiCallback<ProtectionPolicyResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = protectionPoliciesGetValidateBeforeCall(apiVersion, vaultName, resourceGroupName, subscriptionId, policyName, _callback);
        Type localVarReturnType = new TypeToken<ProtectionPolicyResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for protectionPoliciesList
     * @param apiVersion Client API version. (required)
     * @param vaultName The name of the Recovery Services vault. (required)
     * @param resourceGroupName The name of the resource group associated with the Recovery Services vault. (required)
     * @param subscriptionId The subscription ID. (required)
     * @param $filter The following equation can be used to filter the list of backup policies. backupManagementType eq {AzureIaasVM, MAB, DPM, AzureBackupServer, AzureSql}. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protectionPoliciesListCall(String apiVersion, String vaultName, String resourceGroupName, String subscriptionId, String $filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/backupPolicies"
            .replace("{" + "vaultName" + "}", localVarApiClient.escapeString(vaultName.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call protectionPoliciesListValidateBeforeCall(String apiVersion, String vaultName, String resourceGroupName, String subscriptionId, String $filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling protectionPoliciesList(Async)");
        }

        // verify the required parameter 'vaultName' is set
        if (vaultName == null) {
            throw new ApiException("Missing the required parameter 'vaultName' when calling protectionPoliciesList(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling protectionPoliciesList(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling protectionPoliciesList(Async)");
        }

        return protectionPoliciesListCall(apiVersion, vaultName, resourceGroupName, subscriptionId, $filter, _callback);

    }

    /**
     * 
     * Lists the backup policies associated with the Recovery Services vault. The API provides parameters to Get scoped results.
     * @param apiVersion Client API version. (required)
     * @param vaultName The name of the Recovery Services vault. (required)
     * @param resourceGroupName The name of the resource group associated with the Recovery Services vault. (required)
     * @param subscriptionId The subscription ID. (required)
     * @param $filter The following equation can be used to filter the list of backup policies. backupManagementType eq {AzureIaasVM, MAB, DPM, AzureBackupServer, AzureSql}. (optional)
     * @return ProtectionPolicyResourceList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
     </table>
     */
    public ProtectionPolicyResourceList protectionPoliciesList(String apiVersion, String vaultName, String resourceGroupName, String subscriptionId, String $filter) throws ApiException {
        ApiResponse<ProtectionPolicyResourceList> localVarResp = protectionPoliciesListWithHttpInfo(apiVersion, vaultName, resourceGroupName, subscriptionId, $filter);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists the backup policies associated with the Recovery Services vault. The API provides parameters to Get scoped results.
     * @param apiVersion Client API version. (required)
     * @param vaultName The name of the Recovery Services vault. (required)
     * @param resourceGroupName The name of the resource group associated with the Recovery Services vault. (required)
     * @param subscriptionId The subscription ID. (required)
     * @param $filter The following equation can be used to filter the list of backup policies. backupManagementType eq {AzureIaasVM, MAB, DPM, AzureBackupServer, AzureSql}. (optional)
     * @return ApiResponse&lt;ProtectionPolicyResourceList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProtectionPolicyResourceList> protectionPoliciesListWithHttpInfo(String apiVersion, String vaultName, String resourceGroupName, String subscriptionId, String $filter) throws ApiException {
        okhttp3.Call localVarCall = protectionPoliciesListValidateBeforeCall(apiVersion, vaultName, resourceGroupName, subscriptionId, $filter, null);
        Type localVarReturnType = new TypeToken<ProtectionPolicyResourceList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists the backup policies associated with the Recovery Services vault. The API provides parameters to Get scoped results.
     * @param apiVersion Client API version. (required)
     * @param vaultName The name of the Recovery Services vault. (required)
     * @param resourceGroupName The name of the resource group associated with the Recovery Services vault. (required)
     * @param subscriptionId The subscription ID. (required)
     * @param $filter The following equation can be used to filter the list of backup policies. backupManagementType eq {AzureIaasVM, MAB, DPM, AzureBackupServer, AzureSql}. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protectionPoliciesListAsync(String apiVersion, String vaultName, String resourceGroupName, String subscriptionId, String $filter, final ApiCallback<ProtectionPolicyResourceList> _callback) throws ApiException {

        okhttp3.Call localVarCall = protectionPoliciesListValidateBeforeCall(apiVersion, vaultName, resourceGroupName, subscriptionId, $filter, _callback);
        Type localVarReturnType = new TypeToken<ProtectionPolicyResourceList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
