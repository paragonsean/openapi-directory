/*
 * RecoveryServicesBackupClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.SchedulePolicy;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Simple policy schedule.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:23:21.567091-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SimpleSchedulePolicy extends SchedulePolicy {
  /**
   * Gets or Sets scheduleRunDays
   */
  @JsonAdapter(ScheduleRunDaysEnum.Adapter.class)
  public enum ScheduleRunDaysEnum {
    SUNDAY("Sunday"),
    
    MONDAY("Monday"),
    
    TUESDAY("Tuesday"),
    
    WEDNESDAY("Wednesday"),
    
    THURSDAY("Thursday"),
    
    FRIDAY("Friday"),
    
    SATURDAY("Saturday");

    private String value;

    ScheduleRunDaysEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ScheduleRunDaysEnum fromValue(String value) {
      for (ScheduleRunDaysEnum b : ScheduleRunDaysEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ScheduleRunDaysEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ScheduleRunDaysEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ScheduleRunDaysEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ScheduleRunDaysEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ScheduleRunDaysEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SCHEDULE_RUN_DAYS = "scheduleRunDays";
  @SerializedName(SERIALIZED_NAME_SCHEDULE_RUN_DAYS)
  private List<ScheduleRunDaysEnum> scheduleRunDays = new ArrayList<>();

  /**
   * Defines the frequency interval (daily or weekly) for the schedule policy.
   */
  @JsonAdapter(ScheduleRunFrequencyEnum.Adapter.class)
  public enum ScheduleRunFrequencyEnum {
    INVALID("Invalid"),
    
    DAILY("Daily"),
    
    WEEKLY("Weekly");

    private String value;

    ScheduleRunFrequencyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ScheduleRunFrequencyEnum fromValue(String value) {
      for (ScheduleRunFrequencyEnum b : ScheduleRunFrequencyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ScheduleRunFrequencyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ScheduleRunFrequencyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ScheduleRunFrequencyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ScheduleRunFrequencyEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ScheduleRunFrequencyEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SCHEDULE_RUN_FREQUENCY = "scheduleRunFrequency";
  @SerializedName(SERIALIZED_NAME_SCHEDULE_RUN_FREQUENCY)
  private ScheduleRunFrequencyEnum scheduleRunFrequency;

  public static final String SERIALIZED_NAME_SCHEDULE_RUN_TIMES = "scheduleRunTimes";
  @SerializedName(SERIALIZED_NAME_SCHEDULE_RUN_TIMES)
  private List<OffsetDateTime> scheduleRunTimes = new ArrayList<>();

  public static final String SERIALIZED_NAME_SCHEDULE_WEEKLY_FREQUENCY = "scheduleWeeklyFrequency";
  @SerializedName(SERIALIZED_NAME_SCHEDULE_WEEKLY_FREQUENCY)
  private Integer scheduleWeeklyFrequency;

  public SimpleSchedulePolicy() {
    this.schedulePolicyType = this.getClass().getSimpleName();
  }

  public SimpleSchedulePolicy scheduleRunDays(List<ScheduleRunDaysEnum> scheduleRunDays) {
    this.scheduleRunDays = scheduleRunDays;
    return this;
  }

  public SimpleSchedulePolicy addScheduleRunDaysItem(ScheduleRunDaysEnum scheduleRunDaysItem) {
    if (this.scheduleRunDays == null) {
      this.scheduleRunDays = new ArrayList<>();
    }
    this.scheduleRunDays.add(scheduleRunDaysItem);
    return this;
  }

  /**
   * This list is the days of the week when the schedule runs.
   * @return scheduleRunDays
   */
  @javax.annotation.Nullable
  public List<ScheduleRunDaysEnum> getScheduleRunDays() {
    return scheduleRunDays;
  }

  public void setScheduleRunDays(List<ScheduleRunDaysEnum> scheduleRunDays) {
    this.scheduleRunDays = scheduleRunDays;
  }


  public SimpleSchedulePolicy scheduleRunFrequency(ScheduleRunFrequencyEnum scheduleRunFrequency) {
    this.scheduleRunFrequency = scheduleRunFrequency;
    return this;
  }

  /**
   * Defines the frequency interval (daily or weekly) for the schedule policy.
   * @return scheduleRunFrequency
   */
  @javax.annotation.Nullable
  public ScheduleRunFrequencyEnum getScheduleRunFrequency() {
    return scheduleRunFrequency;
  }

  public void setScheduleRunFrequency(ScheduleRunFrequencyEnum scheduleRunFrequency) {
    this.scheduleRunFrequency = scheduleRunFrequency;
  }


  public SimpleSchedulePolicy scheduleRunTimes(List<OffsetDateTime> scheduleRunTimes) {
    this.scheduleRunTimes = scheduleRunTimes;
    return this;
  }

  public SimpleSchedulePolicy addScheduleRunTimesItem(OffsetDateTime scheduleRunTimesItem) {
    if (this.scheduleRunTimes == null) {
      this.scheduleRunTimes = new ArrayList<>();
    }
    this.scheduleRunTimes.add(scheduleRunTimesItem);
    return this;
  }

  /**
   * List of times, during a day, when the schedule runs.
   * @return scheduleRunTimes
   */
  @javax.annotation.Nullable
  public List<OffsetDateTime> getScheduleRunTimes() {
    return scheduleRunTimes;
  }

  public void setScheduleRunTimes(List<OffsetDateTime> scheduleRunTimes) {
    this.scheduleRunTimes = scheduleRunTimes;
  }


  public SimpleSchedulePolicy scheduleWeeklyFrequency(Integer scheduleWeeklyFrequency) {
    this.scheduleWeeklyFrequency = scheduleWeeklyFrequency;
    return this;
  }

  /**
   * The number of times per week the schedule runs.
   * @return scheduleWeeklyFrequency
   */
  @javax.annotation.Nullable
  public Integer getScheduleWeeklyFrequency() {
    return scheduleWeeklyFrequency;
  }

  public void setScheduleWeeklyFrequency(Integer scheduleWeeklyFrequency) {
    this.scheduleWeeklyFrequency = scheduleWeeklyFrequency;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SimpleSchedulePolicy simpleSchedulePolicy = (SimpleSchedulePolicy) o;
    return Objects.equals(this.scheduleRunDays, simpleSchedulePolicy.scheduleRunDays) &&
        Objects.equals(this.scheduleRunFrequency, simpleSchedulePolicy.scheduleRunFrequency) &&
        Objects.equals(this.scheduleRunTimes, simpleSchedulePolicy.scheduleRunTimes) &&
        Objects.equals(this.scheduleWeeklyFrequency, simpleSchedulePolicy.scheduleWeeklyFrequency) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(scheduleRunDays, scheduleRunFrequency, scheduleRunTimes, scheduleWeeklyFrequency, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SimpleSchedulePolicy {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    scheduleRunDays: ").append(toIndentedString(scheduleRunDays)).append("\n");
    sb.append("    scheduleRunFrequency: ").append(toIndentedString(scheduleRunFrequency)).append("\n");
    sb.append("    scheduleRunTimes: ").append(toIndentedString(scheduleRunTimes)).append("\n");
    sb.append("    scheduleWeeklyFrequency: ").append(toIndentedString(scheduleWeeklyFrequency)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("schedulePolicyType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SimpleSchedulePolicy
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SimpleSchedulePolicy.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SimpleSchedulePolicy is not found in the empty JSON string", SimpleSchedulePolicy.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SimpleSchedulePolicy.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SimpleSchedulePolicy` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SimpleSchedulePolicy.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SimpleSchedulePolicy' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SimpleSchedulePolicy> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SimpleSchedulePolicy.class));

       return (TypeAdapter<T>) new TypeAdapter<SimpleSchedulePolicy>() {
           @Override
           public void write(JsonWriter out, SimpleSchedulePolicy value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SimpleSchedulePolicy read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SimpleSchedulePolicy given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SimpleSchedulePolicy
   * @throws IOException if the JSON string is invalid with respect to SimpleSchedulePolicy
   */
  public static SimpleSchedulePolicy fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SimpleSchedulePolicy.class);
  }

  /**
   * Convert an instance of SimpleSchedulePolicy to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

