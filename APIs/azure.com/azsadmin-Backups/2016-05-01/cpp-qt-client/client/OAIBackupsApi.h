/**
 * BackupManagementClient
 * The Admin Backup Management Client.
 *
 * The version of the OpenAPI document: 2016-05-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIBackupsApi_H
#define OAI_OAIBackupsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBackup.h"
#include "OAIBackupList.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIBackupsApi : public QObject {
    Q_OBJECT

public:
    OAIBackupsApi(const int timeOut = 0);
    ~OAIBackupsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  location QString [required]
    * @param[in]  backup QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void backupsGet(const QString &subscription_id, const QString &resource_group_name, const QString &location, const QString &backup, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  location QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void backupsList(const QString &subscription_id, const QString &resource_group_name, const QString &location, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  location QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  backup QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void backupsRestore(const QString &subscription_id, const QString &location, const QString &resource_group_name, const QString &backup, const QString &api_version);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void backupsGetCallback(OAIHttpRequestWorker *worker);
    void backupsListCallback(OAIHttpRequestWorker *worker);
    void backupsRestoreCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void backupsGetSignal(OAIBackup summary);
    void backupsListSignal(OAIBackupList summary);
    void backupsRestoreSignal();


    void backupsGetSignalFull(OAIHttpRequestWorker *worker, OAIBackup summary);
    void backupsListSignalFull(OAIHttpRequestWorker *worker, OAIBackupList summary);
    void backupsRestoreSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use backupsGetSignalError() instead")
    void backupsGetSignalE(OAIBackup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void backupsGetSignalError(OAIBackup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use backupsListSignalError() instead")
    void backupsListSignalE(OAIBackupList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void backupsListSignalError(OAIBackupList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use backupsRestoreSignalError() instead")
    void backupsRestoreSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void backupsRestoreSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use backupsGetSignalErrorFull() instead")
    void backupsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void backupsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use backupsListSignalErrorFull() instead")
    void backupsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void backupsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use backupsRestoreSignalErrorFull() instead")
    void backupsRestoreSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void backupsRestoreSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
