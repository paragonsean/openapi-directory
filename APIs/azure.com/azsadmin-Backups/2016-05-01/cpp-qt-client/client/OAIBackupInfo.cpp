/**
 * BackupManagementClient
 * The Admin Backup Management Client.
 *
 * The version of the OpenAPI document: 2016-05-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBackupInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBackupInfo::OAIBackupInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBackupInfo::OAIBackupInfo() {
    this->initializeModel();
}

OAIBackupInfo::~OAIBackupInfo() {}

void OAIBackupInfo::initializeModel() {

    m_backup_data_version_isSet = false;
    m_backup_data_version_isValid = false;

    m_backup_id_isSet = false;
    m_backup_id_isValid = false;

    m_created_date_time_isSet = false;
    m_created_date_time_isValid = false;

    m_deployment_id_isSet = false;
    m_deployment_id_isValid = false;

    m_oem_version_isSet = false;
    m_oem_version_isValid = false;

    m_role_status_isSet = false;
    m_role_status_isValid = false;

    m_stamp_version_isSet = false;
    m_stamp_version_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_time_taken_to_create_isSet = false;
    m_time_taken_to_create_isValid = false;
}

void OAIBackupInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBackupInfo::fromJsonObject(QJsonObject json) {

    m_backup_data_version_isValid = ::OpenAPI::fromJsonValue(m_backup_data_version, json[QString("backupDataVersion")]);
    m_backup_data_version_isSet = !json[QString("backupDataVersion")].isNull() && m_backup_data_version_isValid;

    m_backup_id_isValid = ::OpenAPI::fromJsonValue(m_backup_id, json[QString("backupId")]);
    m_backup_id_isSet = !json[QString("backupId")].isNull() && m_backup_id_isValid;

    m_created_date_time_isValid = ::OpenAPI::fromJsonValue(m_created_date_time, json[QString("createdDateTime")]);
    m_created_date_time_isSet = !json[QString("createdDateTime")].isNull() && m_created_date_time_isValid;

    m_deployment_id_isValid = ::OpenAPI::fromJsonValue(m_deployment_id, json[QString("deploymentID")]);
    m_deployment_id_isSet = !json[QString("deploymentID")].isNull() && m_deployment_id_isValid;

    m_oem_version_isValid = ::OpenAPI::fromJsonValue(m_oem_version, json[QString("oemVersion")]);
    m_oem_version_isSet = !json[QString("oemVersion")].isNull() && m_oem_version_isValid;

    m_role_status_isValid = ::OpenAPI::fromJsonValue(m_role_status, json[QString("roleStatus")]);
    m_role_status_isSet = !json[QString("roleStatus")].isNull() && m_role_status_isValid;

    m_stamp_version_isValid = ::OpenAPI::fromJsonValue(m_stamp_version, json[QString("stampVersion")]);
    m_stamp_version_isSet = !json[QString("stampVersion")].isNull() && m_stamp_version_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_time_taken_to_create_isValid = ::OpenAPI::fromJsonValue(m_time_taken_to_create, json[QString("timeTakenToCreate")]);
    m_time_taken_to_create_isSet = !json[QString("timeTakenToCreate")].isNull() && m_time_taken_to_create_isValid;
}

QString OAIBackupInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBackupInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_backup_data_version_isSet) {
        obj.insert(QString("backupDataVersion"), ::OpenAPI::toJsonValue(m_backup_data_version));
    }
    if (m_backup_id_isSet) {
        obj.insert(QString("backupId"), ::OpenAPI::toJsonValue(m_backup_id));
    }
    if (m_created_date_time_isSet) {
        obj.insert(QString("createdDateTime"), ::OpenAPI::toJsonValue(m_created_date_time));
    }
    if (m_deployment_id_isSet) {
        obj.insert(QString("deploymentID"), ::OpenAPI::toJsonValue(m_deployment_id));
    }
    if (m_oem_version_isSet) {
        obj.insert(QString("oemVersion"), ::OpenAPI::toJsonValue(m_oem_version));
    }
    if (m_role_status.size() > 0) {
        obj.insert(QString("roleStatus"), ::OpenAPI::toJsonValue(m_role_status));
    }
    if (m_stamp_version_isSet) {
        obj.insert(QString("stampVersion"), ::OpenAPI::toJsonValue(m_stamp_version));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_time_taken_to_create_isSet) {
        obj.insert(QString("timeTakenToCreate"), ::OpenAPI::toJsonValue(m_time_taken_to_create));
    }
    return obj;
}

QString OAIBackupInfo::getBackupDataVersion() const {
    return m_backup_data_version;
}
void OAIBackupInfo::setBackupDataVersion(const QString &backup_data_version) {
    m_backup_data_version = backup_data_version;
    m_backup_data_version_isSet = true;
}

bool OAIBackupInfo::is_backup_data_version_Set() const{
    return m_backup_data_version_isSet;
}

bool OAIBackupInfo::is_backup_data_version_Valid() const{
    return m_backup_data_version_isValid;
}

QString OAIBackupInfo::getBackupId() const {
    return m_backup_id;
}
void OAIBackupInfo::setBackupId(const QString &backup_id) {
    m_backup_id = backup_id;
    m_backup_id_isSet = true;
}

bool OAIBackupInfo::is_backup_id_Set() const{
    return m_backup_id_isSet;
}

bool OAIBackupInfo::is_backup_id_Valid() const{
    return m_backup_id_isValid;
}

QDateTime OAIBackupInfo::getCreatedDateTime() const {
    return m_created_date_time;
}
void OAIBackupInfo::setCreatedDateTime(const QDateTime &created_date_time) {
    m_created_date_time = created_date_time;
    m_created_date_time_isSet = true;
}

bool OAIBackupInfo::is_created_date_time_Set() const{
    return m_created_date_time_isSet;
}

bool OAIBackupInfo::is_created_date_time_Valid() const{
    return m_created_date_time_isValid;
}

QString OAIBackupInfo::getDeploymentId() const {
    return m_deployment_id;
}
void OAIBackupInfo::setDeploymentId(const QString &deployment_id) {
    m_deployment_id = deployment_id;
    m_deployment_id_isSet = true;
}

bool OAIBackupInfo::is_deployment_id_Set() const{
    return m_deployment_id_isSet;
}

bool OAIBackupInfo::is_deployment_id_Valid() const{
    return m_deployment_id_isValid;
}

QString OAIBackupInfo::getOemVersion() const {
    return m_oem_version;
}
void OAIBackupInfo::setOemVersion(const QString &oem_version) {
    m_oem_version = oem_version;
    m_oem_version_isSet = true;
}

bool OAIBackupInfo::is_oem_version_Set() const{
    return m_oem_version_isSet;
}

bool OAIBackupInfo::is_oem_version_Valid() const{
    return m_oem_version_isValid;
}

QList<OAIRoleOperationStatus> OAIBackupInfo::getRoleStatus() const {
    return m_role_status;
}
void OAIBackupInfo::setRoleStatus(const QList<OAIRoleOperationStatus> &role_status) {
    m_role_status = role_status;
    m_role_status_isSet = true;
}

bool OAIBackupInfo::is_role_status_Set() const{
    return m_role_status_isSet;
}

bool OAIBackupInfo::is_role_status_Valid() const{
    return m_role_status_isValid;
}

QString OAIBackupInfo::getStampVersion() const {
    return m_stamp_version;
}
void OAIBackupInfo::setStampVersion(const QString &stamp_version) {
    m_stamp_version = stamp_version;
    m_stamp_version_isSet = true;
}

bool OAIBackupInfo::is_stamp_version_Set() const{
    return m_stamp_version_isSet;
}

bool OAIBackupInfo::is_stamp_version_Valid() const{
    return m_stamp_version_isValid;
}

OAIOperationStatus OAIBackupInfo::getStatus() const {
    return m_status;
}
void OAIBackupInfo::setStatus(const OAIOperationStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIBackupInfo::is_status_Set() const{
    return m_status_isSet;
}

bool OAIBackupInfo::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIBackupInfo::getTimeTakenToCreate() const {
    return m_time_taken_to_create;
}
void OAIBackupInfo::setTimeTakenToCreate(const QString &time_taken_to_create) {
    m_time_taken_to_create = time_taken_to_create;
    m_time_taken_to_create_isSet = true;
}

bool OAIBackupInfo::is_time_taken_to_create_Set() const{
    return m_time_taken_to_create_isSet;
}

bool OAIBackupInfo::is_time_taken_to_create_Valid() const{
    return m_time_taken_to_create_isValid;
}

bool OAIBackupInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_backup_data_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_backup_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deployment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_oem_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_status.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_stamp_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_taken_to_create_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBackupInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
