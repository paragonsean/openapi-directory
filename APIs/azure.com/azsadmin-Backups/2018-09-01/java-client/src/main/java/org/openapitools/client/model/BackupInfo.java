/*
 * BackupManagementClient
 * The Admin Backup Management Client.
 *
 * The version of the OpenAPI document: 2018-09-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.OperationStatus;
import org.openapitools.client.model.RoleOperationStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Holds information for a backup.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:45:52.161167-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BackupInfo {
  public static final String SERIALIZED_NAME_BACKUP_DATA_VERSION = "backupDataVersion";
  @SerializedName(SERIALIZED_NAME_BACKUP_DATA_VERSION)
  private String backupDataVersion;

  public static final String SERIALIZED_NAME_CREATED_DATE_TIME = "createdDateTime";
  @SerializedName(SERIALIZED_NAME_CREATED_DATE_TIME)
  private OffsetDateTime createdDateTime;

  public static final String SERIALIZED_NAME_DEPLOYMENT_I_D = "deploymentID";
  @SerializedName(SERIALIZED_NAME_DEPLOYMENT_I_D)
  private String deploymentID;

  public static final String SERIALIZED_NAME_ENCRYPTION_CERT_THUMBPRINT = "encryptionCertThumbprint";
  @SerializedName(SERIALIZED_NAME_ENCRYPTION_CERT_THUMBPRINT)
  private String encryptionCertThumbprint;

  public static final String SERIALIZED_NAME_IS_CLOUD_RECOVERY_READY = "isCloudRecoveryReady";
  @SerializedName(SERIALIZED_NAME_IS_CLOUD_RECOVERY_READY)
  private Boolean isCloudRecoveryReady;

  public static final String SERIALIZED_NAME_OEM_VERSION = "oemVersion";
  @SerializedName(SERIALIZED_NAME_OEM_VERSION)
  private String oemVersion;

  public static final String SERIALIZED_NAME_ROLE_STATUS = "roleStatus";
  @SerializedName(SERIALIZED_NAME_ROLE_STATUS)
  private List<RoleOperationStatus> roleStatus = new ArrayList<>();

  public static final String SERIALIZED_NAME_STAMP_VERSION = "stampVersion";
  @SerializedName(SERIALIZED_NAME_STAMP_VERSION)
  private String stampVersion;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private OperationStatus status;

  public static final String SERIALIZED_NAME_TIME_TAKEN_TO_CREATE = "timeTakenToCreate";
  @SerializedName(SERIALIZED_NAME_TIME_TAKEN_TO_CREATE)
  private String timeTakenToCreate;

  public BackupInfo() {
  }

  public BackupInfo(
     String backupDataVersion, 
     OffsetDateTime createdDateTime, 
     String deploymentID, 
     String encryptionCertThumbprint, 
     Boolean isCloudRecoveryReady, 
     String oemVersion, 
     String stampVersion, 
     String timeTakenToCreate
  ) {
    this();
    this.backupDataVersion = backupDataVersion;
    this.createdDateTime = createdDateTime;
    this.deploymentID = deploymentID;
    this.encryptionCertThumbprint = encryptionCertThumbprint;
    this.isCloudRecoveryReady = isCloudRecoveryReady;
    this.oemVersion = oemVersion;
    this.stampVersion = stampVersion;
    this.timeTakenToCreate = timeTakenToCreate;
  }

  /**
   * Version of the backup data.
   * @return backupDataVersion
   */
  @javax.annotation.Nullable
  public String getBackupDataVersion() {
    return backupDataVersion;
  }



  /**
   * Creation time of the backup.
   * @return createdDateTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedDateTime() {
    return createdDateTime;
  }



  /**
   * Deployment Id of the stamp.
   * @return deploymentID
   */
  @javax.annotation.Nullable
  public String getDeploymentID() {
    return deploymentID;
  }



  /**
   * The thumbprint of the certificate used to encrypt the backup encryption key.
   * @return encryptionCertThumbprint
   */
  @javax.annotation.Nullable
  public String getEncryptionCertThumbprint() {
    return encryptionCertThumbprint;
  }



  /**
   * True if the backup can be used for cloud recovery scenario.
   * @return isCloudRecoveryReady
   */
  @javax.annotation.Nullable
  public Boolean getIsCloudRecoveryReady() {
    return isCloudRecoveryReady;
  }



  /**
   * OEM version.
   * @return oemVersion
   */
  @javax.annotation.Nullable
  public String getOemVersion() {
    return oemVersion;
  }



  public BackupInfo roleStatus(List<RoleOperationStatus> roleStatus) {
    this.roleStatus = roleStatus;
    return this;
  }

  public BackupInfo addRoleStatusItem(RoleOperationStatus roleStatusItem) {
    if (this.roleStatus == null) {
      this.roleStatus = new ArrayList<>();
    }
    this.roleStatus.add(roleStatusItem);
    return this;
  }

  /**
   * object
   * @return roleStatus
   */
  @javax.annotation.Nullable
  public List<RoleOperationStatus> getRoleStatus() {
    return roleStatus;
  }

  public void setRoleStatus(List<RoleOperationStatus> roleStatus) {
    this.roleStatus = roleStatus;
  }


  /**
   * Azure Stack stamp version of the backup.
   * @return stampVersion
   */
  @javax.annotation.Nullable
  public String getStampVersion() {
    return stampVersion;
  }



  public BackupInfo status(OperationStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public OperationStatus getStatus() {
    return status;
  }

  public void setStatus(OperationStatus status) {
    this.status = status;
  }


  /**
   * Duration to create the backup.
   * @return timeTakenToCreate
   */
  @javax.annotation.Nullable
  public String getTimeTakenToCreate() {
    return timeTakenToCreate;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BackupInfo backupInfo = (BackupInfo) o;
    return Objects.equals(this.backupDataVersion, backupInfo.backupDataVersion) &&
        Objects.equals(this.createdDateTime, backupInfo.createdDateTime) &&
        Objects.equals(this.deploymentID, backupInfo.deploymentID) &&
        Objects.equals(this.encryptionCertThumbprint, backupInfo.encryptionCertThumbprint) &&
        Objects.equals(this.isCloudRecoveryReady, backupInfo.isCloudRecoveryReady) &&
        Objects.equals(this.oemVersion, backupInfo.oemVersion) &&
        Objects.equals(this.roleStatus, backupInfo.roleStatus) &&
        Objects.equals(this.stampVersion, backupInfo.stampVersion) &&
        Objects.equals(this.status, backupInfo.status) &&
        Objects.equals(this.timeTakenToCreate, backupInfo.timeTakenToCreate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(backupDataVersion, createdDateTime, deploymentID, encryptionCertThumbprint, isCloudRecoveryReady, oemVersion, roleStatus, stampVersion, status, timeTakenToCreate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BackupInfo {\n");
    sb.append("    backupDataVersion: ").append(toIndentedString(backupDataVersion)).append("\n");
    sb.append("    createdDateTime: ").append(toIndentedString(createdDateTime)).append("\n");
    sb.append("    deploymentID: ").append(toIndentedString(deploymentID)).append("\n");
    sb.append("    encryptionCertThumbprint: ").append(toIndentedString(encryptionCertThumbprint)).append("\n");
    sb.append("    isCloudRecoveryReady: ").append(toIndentedString(isCloudRecoveryReady)).append("\n");
    sb.append("    oemVersion: ").append(toIndentedString(oemVersion)).append("\n");
    sb.append("    roleStatus: ").append(toIndentedString(roleStatus)).append("\n");
    sb.append("    stampVersion: ").append(toIndentedString(stampVersion)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    timeTakenToCreate: ").append(toIndentedString(timeTakenToCreate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("backupDataVersion");
    openapiFields.add("createdDateTime");
    openapiFields.add("deploymentID");
    openapiFields.add("encryptionCertThumbprint");
    openapiFields.add("isCloudRecoveryReady");
    openapiFields.add("oemVersion");
    openapiFields.add("roleStatus");
    openapiFields.add("stampVersion");
    openapiFields.add("status");
    openapiFields.add("timeTakenToCreate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BackupInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BackupInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BackupInfo is not found in the empty JSON string", BackupInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BackupInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BackupInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("backupDataVersion") != null && !jsonObj.get("backupDataVersion").isJsonNull()) && !jsonObj.get("backupDataVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `backupDataVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("backupDataVersion").toString()));
      }
      if ((jsonObj.get("deploymentID") != null && !jsonObj.get("deploymentID").isJsonNull()) && !jsonObj.get("deploymentID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deploymentID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deploymentID").toString()));
      }
      if ((jsonObj.get("encryptionCertThumbprint") != null && !jsonObj.get("encryptionCertThumbprint").isJsonNull()) && !jsonObj.get("encryptionCertThumbprint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `encryptionCertThumbprint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("encryptionCertThumbprint").toString()));
      }
      if ((jsonObj.get("oemVersion") != null && !jsonObj.get("oemVersion").isJsonNull()) && !jsonObj.get("oemVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `oemVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("oemVersion").toString()));
      }
      if (jsonObj.get("roleStatus") != null && !jsonObj.get("roleStatus").isJsonNull()) {
        JsonArray jsonArrayroleStatus = jsonObj.getAsJsonArray("roleStatus");
        if (jsonArrayroleStatus != null) {
          // ensure the json data is an array
          if (!jsonObj.get("roleStatus").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `roleStatus` to be an array in the JSON string but got `%s`", jsonObj.get("roleStatus").toString()));
          }

          // validate the optional field `roleStatus` (array)
          for (int i = 0; i < jsonArrayroleStatus.size(); i++) {
            RoleOperationStatus.validateJsonElement(jsonArrayroleStatus.get(i));
          };
        }
      }
      if ((jsonObj.get("stampVersion") != null && !jsonObj.get("stampVersion").isJsonNull()) && !jsonObj.get("stampVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stampVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stampVersion").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        OperationStatus.validateJsonElement(jsonObj.get("status"));
      }
      if ((jsonObj.get("timeTakenToCreate") != null && !jsonObj.get("timeTakenToCreate").isJsonNull()) && !jsonObj.get("timeTakenToCreate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeTakenToCreate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timeTakenToCreate").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BackupInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BackupInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BackupInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BackupInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<BackupInfo>() {
           @Override
           public void write(JsonWriter out, BackupInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BackupInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BackupInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BackupInfo
   * @throws IOException if the JSON string is invalid with respect to BackupInfo
   */
  public static BackupInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BackupInfo.class);
  }

  /**
   * Convert an instance of BackupInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

