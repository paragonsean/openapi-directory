# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.recipients_contract_properties import RecipientsContractProperties
from openapi_server import util


class NotificationContractProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, recipients: RecipientsContractProperties=None, title: str=None):
        """NotificationContractProperties - a model defined in OpenAPI

        :param description: The description of this NotificationContractProperties.
        :param recipients: The recipients of this NotificationContractProperties.
        :param title: The title of this NotificationContractProperties.
        """
        self.openapi_types = {
            'description': str,
            'recipients': RecipientsContractProperties,
            'title': str
        }

        self.attribute_map = {
            'description': 'description',
            'recipients': 'recipients',
            'title': 'title'
        }

        self._description = description
        self._recipients = recipients
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NotificationContractProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NotificationContractProperties of this NotificationContractProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this NotificationContractProperties.

        Description of the Notification.

        :return: The description of this NotificationContractProperties.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this NotificationContractProperties.

        Description of the Notification.

        :param description: The description of this NotificationContractProperties.
        :type description: str
        """

        self._description = description

    @property
    def recipients(self):
        """Gets the recipients of this NotificationContractProperties.


        :return: The recipients of this NotificationContractProperties.
        :rtype: RecipientsContractProperties
        """
        return self._recipients

    @recipients.setter
    def recipients(self, recipients):
        """Sets the recipients of this NotificationContractProperties.


        :param recipients: The recipients of this NotificationContractProperties.
        :type recipients: RecipientsContractProperties
        """

        self._recipients = recipients

    @property
    def title(self):
        """Gets the title of this NotificationContractProperties.

        Title of the Notification.

        :return: The title of this NotificationContractProperties.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this NotificationContractProperties.

        Title of the Notification.

        :param title: The title of this NotificationContractProperties.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")
        if title is not None and len(title) > 1000:
            raise ValueError("Invalid value for `title`, length must be less than or equal to `1000`")
        if title is not None and len(title) < 1:
            raise ValueError("Invalid value for `title`, length must be greater than or equal to `1`")

        self._title = title
