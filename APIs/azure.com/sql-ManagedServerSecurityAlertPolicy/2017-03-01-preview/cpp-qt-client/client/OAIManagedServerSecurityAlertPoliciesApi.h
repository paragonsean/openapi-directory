/**
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2017-03-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIManagedServerSecurityAlertPoliciesApi_H
#define OAI_OAIManagedServerSecurityAlertPoliciesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIManagedServerSecurityAlertPolicy.h"
#include "OAIManagedServerSecurityAlertPolicyListResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIManagedServerSecurityAlertPoliciesApi : public QObject {
    Q_OBJECT

public:
    OAIManagedServerSecurityAlertPoliciesApi(const int timeOut = 0);
    ~OAIManagedServerSecurityAlertPoliciesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  managed_instance_name QString [required]
    * @param[in]  security_alert_policy_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAIManagedServerSecurityAlertPolicy [required]
    */
    virtual void managedServerSecurityAlertPoliciesCreateOrUpdate(const QString &resource_group_name, const QString &managed_instance_name, const QString &security_alert_policy_name, const QString &subscription_id, const QString &api_version, const OAIManagedServerSecurityAlertPolicy &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  managed_instance_name QString [required]
    * @param[in]  security_alert_policy_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void managedServerSecurityAlertPoliciesGet(const QString &resource_group_name, const QString &managed_instance_name, const QString &security_alert_policy_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  managed_instance_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void managedServerSecurityAlertPoliciesListByInstance(const QString &resource_group_name, const QString &managed_instance_name, const QString &subscription_id, const QString &api_version);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void managedServerSecurityAlertPoliciesCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void managedServerSecurityAlertPoliciesGetCallback(OAIHttpRequestWorker *worker);
    void managedServerSecurityAlertPoliciesListByInstanceCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void managedServerSecurityAlertPoliciesCreateOrUpdateSignal(OAIManagedServerSecurityAlertPolicy summary);
    void managedServerSecurityAlertPoliciesGetSignal(OAIManagedServerSecurityAlertPolicy summary);
    void managedServerSecurityAlertPoliciesListByInstanceSignal(OAIManagedServerSecurityAlertPolicyListResult summary);


    void managedServerSecurityAlertPoliciesCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIManagedServerSecurityAlertPolicy summary);
    void managedServerSecurityAlertPoliciesGetSignalFull(OAIHttpRequestWorker *worker, OAIManagedServerSecurityAlertPolicy summary);
    void managedServerSecurityAlertPoliciesListByInstanceSignalFull(OAIHttpRequestWorker *worker, OAIManagedServerSecurityAlertPolicyListResult summary);

    Q_DECL_DEPRECATED_X("Use managedServerSecurityAlertPoliciesCreateOrUpdateSignalError() instead")
    void managedServerSecurityAlertPoliciesCreateOrUpdateSignalE(OAIManagedServerSecurityAlertPolicy summary, QNetworkReply::NetworkError error_type, QString error_str);
    void managedServerSecurityAlertPoliciesCreateOrUpdateSignalError(OAIManagedServerSecurityAlertPolicy summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use managedServerSecurityAlertPoliciesGetSignalError() instead")
    void managedServerSecurityAlertPoliciesGetSignalE(OAIManagedServerSecurityAlertPolicy summary, QNetworkReply::NetworkError error_type, QString error_str);
    void managedServerSecurityAlertPoliciesGetSignalError(OAIManagedServerSecurityAlertPolicy summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use managedServerSecurityAlertPoliciesListByInstanceSignalError() instead")
    void managedServerSecurityAlertPoliciesListByInstanceSignalE(OAIManagedServerSecurityAlertPolicyListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void managedServerSecurityAlertPoliciesListByInstanceSignalError(OAIManagedServerSecurityAlertPolicyListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use managedServerSecurityAlertPoliciesCreateOrUpdateSignalErrorFull() instead")
    void managedServerSecurityAlertPoliciesCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void managedServerSecurityAlertPoliciesCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use managedServerSecurityAlertPoliciesGetSignalErrorFull() instead")
    void managedServerSecurityAlertPoliciesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void managedServerSecurityAlertPoliciesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use managedServerSecurityAlertPoliciesListByInstanceSignalErrorFull() instead")
    void managedServerSecurityAlertPoliciesListByInstanceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void managedServerSecurityAlertPoliciesListByInstanceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
