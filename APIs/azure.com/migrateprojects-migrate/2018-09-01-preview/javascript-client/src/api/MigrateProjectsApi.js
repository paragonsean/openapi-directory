/**
 * Azure Migrate Hub
 * Migrate your workloads to Azure.
 *
 * The version of the OpenAPI document: 2018-09-01-preview
 * Contact: azuremigratehub@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import MigrateProject from '../model/MigrateProject';
import RefreshSummaryInput from '../model/RefreshSummaryInput';
import RefreshSummaryResult from '../model/RefreshSummaryResult';
import RegisterToolInput from '../model/RegisterToolInput';
import RegistrationResult from '../model/RegistrationResult';

/**
* MigrateProjects service.
* @module api/MigrateProjectsApi
* @version 2018-09-01-preview
*/
export default class MigrateProjectsApi {

    /**
    * Constructs a new MigrateProjectsApi. 
    * @alias module:api/MigrateProjectsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the migrateProjectsDeleteMigrateProject operation.
     * @callback module:api/MigrateProjectsApi~migrateProjectsDeleteMigrateProjectCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the migrate project
     * Delete the migrate project. Deleting non-existent project is a no-operation.
     * @param {String} subscriptionId Azure Subscription Id in which migrate project was created.
     * @param {String} resourceGroupName Name of the Azure Resource Group that migrate project is part of.
     * @param {String} migrateProjectName Name of the Azure Migrate project.
     * @param {module:model/String} apiVersion Standard request header. Used by service to identify API version used by client.
     * @param {Object} opts Optional parameters
     * @param {String} [acceptLanguage] Standard request header. Used by service to respond to client in appropriate language.
     * @param {module:api/MigrateProjectsApi~migrateProjectsDeleteMigrateProjectCallback} callback The callback function, accepting three arguments: error, data, response
     */
    migrateProjectsDeleteMigrateProject(subscriptionId, resourceGroupName, migrateProjectName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling migrateProjectsDeleteMigrateProject");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling migrateProjectsDeleteMigrateProject");
      }
      // verify the required parameter 'migrateProjectName' is set
      if (migrateProjectName === undefined || migrateProjectName === null) {
        throw new Error("Missing the required parameter 'migrateProjectName' when calling migrateProjectsDeleteMigrateProject");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling migrateProjectsDeleteMigrateProject");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'migrateProjectName': migrateProjectName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/migrateProjects/{migrateProjectName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the migrateProjectsGetMigrateProject operation.
     * @callback module:api/MigrateProjectsApi~migrateProjectsGetMigrateProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MigrateProject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Method to get a migrate project.
     * @param {String} subscriptionId Azure Subscription Id in which migrate project was created.
     * @param {String} resourceGroupName Name of the Azure Resource Group that migrate project is part of.
     * @param {String} migrateProjectName Name of the Azure Migrate project.
     * @param {module:model/String} apiVersion Standard request header. Used by service to identify API version used by client.
     * @param {module:api/MigrateProjectsApi~migrateProjectsGetMigrateProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MigrateProject}
     */
    migrateProjectsGetMigrateProject(subscriptionId, resourceGroupName, migrateProjectName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling migrateProjectsGetMigrateProject");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling migrateProjectsGetMigrateProject");
      }
      // verify the required parameter 'migrateProjectName' is set
      if (migrateProjectName === undefined || migrateProjectName === null) {
        throw new Error("Missing the required parameter 'migrateProjectName' when calling migrateProjectsGetMigrateProject");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling migrateProjectsGetMigrateProject");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'migrateProjectName': migrateProjectName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MigrateProject;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/migrateProjects/{migrateProjectName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the migrateProjectsPatchMigrateProject operation.
     * @callback module:api/MigrateProjectsApi~migrateProjectsPatchMigrateProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MigrateProject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update migrate project.
     * Update a migrate project with specified name. Supports partial updates, for example only tags can be provided.
     * @param {String} subscriptionId Azure Subscription Id in which migrate project was created.
     * @param {String} resourceGroupName Name of the Azure Resource Group that migrate project is part of.
     * @param {String} migrateProjectName Name of the Azure Migrate project.
     * @param {module:model/String} apiVersion Standard request header. Used by service to identify API version used by client.
     * @param {module:model/MigrateProject} body Body with migrate project details.
     * @param {Object} opts Optional parameters
     * @param {String} [acceptLanguage] Standard request header. Used by service to respond to client in appropriate language.
     * @param {module:api/MigrateProjectsApi~migrateProjectsPatchMigrateProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MigrateProject}
     */
    migrateProjectsPatchMigrateProject(subscriptionId, resourceGroupName, migrateProjectName, apiVersion, body, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling migrateProjectsPatchMigrateProject");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling migrateProjectsPatchMigrateProject");
      }
      // verify the required parameter 'migrateProjectName' is set
      if (migrateProjectName === undefined || migrateProjectName === null) {
        throw new Error("Missing the required parameter 'migrateProjectName' when calling migrateProjectsPatchMigrateProject");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling migrateProjectsPatchMigrateProject");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling migrateProjectsPatchMigrateProject");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'migrateProjectName': migrateProjectName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = MigrateProject;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/migrateProjects/{migrateProjectName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the migrateProjectsPutMigrateProject operation.
     * @callback module:api/MigrateProjectsApi~migrateProjectsPutMigrateProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MigrateProject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Method to create or update a migrate project.
     * @param {String} subscriptionId Azure Subscription Id in which migrate project was created.
     * @param {String} resourceGroupName Name of the Azure Resource Group that migrate project is part of.
     * @param {String} migrateProjectName Name of the Azure Migrate project.
     * @param {module:model/String} apiVersion Standard request header. Used by service to identify API version used by client.
     * @param {module:model/MigrateProject} body Body with migrate project details.
     * @param {Object} opts Optional parameters
     * @param {String} [acceptLanguage] Standard request header. Used by service to respond to client in appropriate language.
     * @param {module:api/MigrateProjectsApi~migrateProjectsPutMigrateProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MigrateProject}
     */
    migrateProjectsPutMigrateProject(subscriptionId, resourceGroupName, migrateProjectName, apiVersion, body, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling migrateProjectsPutMigrateProject");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling migrateProjectsPutMigrateProject");
      }
      // verify the required parameter 'migrateProjectName' is set
      if (migrateProjectName === undefined || migrateProjectName === null) {
        throw new Error("Missing the required parameter 'migrateProjectName' when calling migrateProjectsPutMigrateProject");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling migrateProjectsPutMigrateProject");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling migrateProjectsPutMigrateProject");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'migrateProjectName': migrateProjectName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = MigrateProject;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/migrateProjects/{migrateProjectName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the migrateProjectsRefreshMigrateProjectSummary operation.
     * @callback module:api/MigrateProjectsApi~migrateProjectsRefreshMigrateProjectSummaryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RefreshSummaryResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Refresh the summary of the migrate project.
     * @param {String} subscriptionId Azure Subscription Id in which migrate project was created.
     * @param {String} resourceGroupName Name of the Azure Resource Group that migrate project is part of.
     * @param {String} migrateProjectName Name of the Azure Migrate project.
     * @param {module:model/String} apiVersion Standard request header. Used by service to identify API version used by client.
     * @param {module:model/RefreshSummaryInput} input The goal input which needs to be refreshed.
     * @param {module:api/MigrateProjectsApi~migrateProjectsRefreshMigrateProjectSummaryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RefreshSummaryResult}
     */
    migrateProjectsRefreshMigrateProjectSummary(subscriptionId, resourceGroupName, migrateProjectName, apiVersion, input, callback) {
      let postBody = input;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling migrateProjectsRefreshMigrateProjectSummary");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling migrateProjectsRefreshMigrateProjectSummary");
      }
      // verify the required parameter 'migrateProjectName' is set
      if (migrateProjectName === undefined || migrateProjectName === null) {
        throw new Error("Missing the required parameter 'migrateProjectName' when calling migrateProjectsRefreshMigrateProjectSummary");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling migrateProjectsRefreshMigrateProjectSummary");
      }
      // verify the required parameter 'input' is set
      if (input === undefined || input === null) {
        throw new Error("Missing the required parameter 'input' when calling migrateProjectsRefreshMigrateProjectSummary");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'migrateProjectName': migrateProjectName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RefreshSummaryResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/migrateProjects/{migrateProjectName}/refreshSummary', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the migrateProjectsRegisterTool operation.
     * @callback module:api/MigrateProjectsApi~migrateProjectsRegisterToolCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RegistrationResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Registers a tool with the migrate project.
     * @param {String} subscriptionId Azure Subscription Id in which migrate project was created.
     * @param {String} resourceGroupName Name of the Azure Resource Group that migrate project is part of.
     * @param {String} migrateProjectName Name of the Azure Migrate project.
     * @param {module:model/String} apiVersion Standard request header. Used by service to identify API version used by client.
     * @param {module:model/RegisterToolInput} input Input containing the name of the tool to be registered.
     * @param {Object} opts Optional parameters
     * @param {String} [acceptLanguage] Standard request header. Used by service to respond to client in appropriate language.
     * @param {module:api/MigrateProjectsApi~migrateProjectsRegisterToolCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RegistrationResult}
     */
    migrateProjectsRegisterTool(subscriptionId, resourceGroupName, migrateProjectName, apiVersion, input, opts, callback) {
      opts = opts || {};
      let postBody = input;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling migrateProjectsRegisterTool");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling migrateProjectsRegisterTool");
      }
      // verify the required parameter 'migrateProjectName' is set
      if (migrateProjectName === undefined || migrateProjectName === null) {
        throw new Error("Missing the required parameter 'migrateProjectName' when calling migrateProjectsRegisterTool");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling migrateProjectsRegisterTool");
      }
      // verify the required parameter 'input' is set
      if (input === undefined || input === null) {
        throw new Error("Missing the required parameter 'input' when calling migrateProjectsRegisterTool");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'migrateProjectName': migrateProjectName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RegistrationResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/migrateProjects/{migrateProjectName}/registerTool', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
