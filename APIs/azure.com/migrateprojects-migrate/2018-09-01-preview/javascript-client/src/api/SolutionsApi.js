/**
 * Azure Migrate Hub
 * Migrate your workloads to Azure.
 *
 * The version of the OpenAPI document: 2018-09-01-preview
 * Contact: azuremigratehub@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Solution from '../model/Solution';
import SolutionConfig from '../model/SolutionConfig';
import SolutionsCollection from '../model/SolutionsCollection';

/**
* Solutions service.
* @module api/SolutionsApi
* @version 2018-09-01-preview
*/
export default class SolutionsApi {

    /**
    * Constructs a new SolutionsApi. 
    * @alias module:api/SolutionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the solutionsCleanupSolutionData operation.
     * @callback module:api/SolutionsApi~solutionsCleanupSolutionDataCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cleanup the solution data in the migrate project.
     * @param {String} subscriptionId Azure Subscription Id in which migrate project was created.
     * @param {String} resourceGroupName Name of the Azure Resource Group that migrate project is part of.
     * @param {String} migrateProjectName Name of the Azure Migrate project.
     * @param {String} solutionName Unique name of a migration solution within a migrate project.
     * @param {module:model/String} apiVersion Standard request header. Used by service to identify API version used by client.
     * @param {module:api/SolutionsApi~solutionsCleanupSolutionDataCallback} callback The callback function, accepting three arguments: error, data, response
     */
    solutionsCleanupSolutionData(subscriptionId, resourceGroupName, migrateProjectName, solutionName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling solutionsCleanupSolutionData");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling solutionsCleanupSolutionData");
      }
      // verify the required parameter 'migrateProjectName' is set
      if (migrateProjectName === undefined || migrateProjectName === null) {
        throw new Error("Missing the required parameter 'migrateProjectName' when calling solutionsCleanupSolutionData");
      }
      // verify the required parameter 'solutionName' is set
      if (solutionName === undefined || solutionName === null) {
        throw new Error("Missing the required parameter 'solutionName' when calling solutionsCleanupSolutionData");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling solutionsCleanupSolutionData");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'migrateProjectName': migrateProjectName,
        'solutionName': solutionName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/migrateProjects/{migrateProjectName}/solutions/{solutionName}/cleanupData', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the solutionsDeleteSolution operation.
     * @callback module:api/SolutionsApi~solutionsDeleteSolutionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the solution
     * Delete the solution. Deleting non-existent project is a no-operation.
     * @param {String} subscriptionId Azure Subscription Id in which migrate project was created.
     * @param {String} resourceGroupName Name of the Azure Resource Group that migrate project is part of.
     * @param {String} migrateProjectName Name of the Azure Migrate project.
     * @param {String} solutionName Unique name of a migration solution within a migrate project.
     * @param {module:model/String} apiVersion Standard request header. Used by service to identify API version used by client.
     * @param {Object} opts Optional parameters
     * @param {String} [acceptLanguage] Standard request header. Used by service to respond to client in appropriate language.
     * @param {module:api/SolutionsApi~solutionsDeleteSolutionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    solutionsDeleteSolution(subscriptionId, resourceGroupName, migrateProjectName, solutionName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling solutionsDeleteSolution");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling solutionsDeleteSolution");
      }
      // verify the required parameter 'migrateProjectName' is set
      if (migrateProjectName === undefined || migrateProjectName === null) {
        throw new Error("Missing the required parameter 'migrateProjectName' when calling solutionsDeleteSolution");
      }
      // verify the required parameter 'solutionName' is set
      if (solutionName === undefined || solutionName === null) {
        throw new Error("Missing the required parameter 'solutionName' when calling solutionsDeleteSolution");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling solutionsDeleteSolution");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'migrateProjectName': migrateProjectName,
        'solutionName': solutionName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/migrateProjects/{migrateProjectName}/solutions/{solutionName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the solutionsEnumerateSolutions operation.
     * @callback module:api/SolutionsApi~solutionsEnumerateSolutionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SolutionsCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the list of solutions in the migrate project.
     * @param {String} subscriptionId Azure Subscription Id in which migrate project was created.
     * @param {String} resourceGroupName Name of the Azure Resource Group that migrate project is part of.
     * @param {String} migrateProjectName Name of the Azure Migrate project.
     * @param {module:model/String} apiVersion Standard request header. Used by service to identify API version used by client.
     * @param {module:api/SolutionsApi~solutionsEnumerateSolutionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SolutionsCollection}
     */
    solutionsEnumerateSolutions(subscriptionId, resourceGroupName, migrateProjectName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling solutionsEnumerateSolutions");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling solutionsEnumerateSolutions");
      }
      // verify the required parameter 'migrateProjectName' is set
      if (migrateProjectName === undefined || migrateProjectName === null) {
        throw new Error("Missing the required parameter 'migrateProjectName' when calling solutionsEnumerateSolutions");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling solutionsEnumerateSolutions");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'migrateProjectName': migrateProjectName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SolutionsCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/migrateProjects/{migrateProjectName}/solutions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the solutionsGetConfig operation.
     * @callback module:api/SolutionsApi~solutionsGetConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SolutionConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the config for the solution in the migrate project.
     * @param {String} subscriptionId Azure Subscription Id in which migrate project was created.
     * @param {String} resourceGroupName Name of the Azure Resource Group that migrate project is part of.
     * @param {String} migrateProjectName Name of the Azure Migrate project.
     * @param {String} solutionName Unique name of a migration solution within a migrate project.
     * @param {module:model/String} apiVersion Standard request header. Used by service to identify API version used by client.
     * @param {module:api/SolutionsApi~solutionsGetConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SolutionConfig}
     */
    solutionsGetConfig(subscriptionId, resourceGroupName, migrateProjectName, solutionName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling solutionsGetConfig");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling solutionsGetConfig");
      }
      // verify the required parameter 'migrateProjectName' is set
      if (migrateProjectName === undefined || migrateProjectName === null) {
        throw new Error("Missing the required parameter 'migrateProjectName' when calling solutionsGetConfig");
      }
      // verify the required parameter 'solutionName' is set
      if (solutionName === undefined || solutionName === null) {
        throw new Error("Missing the required parameter 'solutionName' when calling solutionsGetConfig");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling solutionsGetConfig");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'migrateProjectName': migrateProjectName,
        'solutionName': solutionName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SolutionConfig;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/migrateProjects/{migrateProjectName}/solutions/{solutionName}/getConfig', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the solutionsGetSolution operation.
     * @callback module:api/SolutionsApi~solutionsGetSolutionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Solution} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a solution in the migrate project.
     * @param {String} subscriptionId Azure Subscription Id in which migrate project was created.
     * @param {String} resourceGroupName Name of the Azure Resource Group that migrate project is part of.
     * @param {String} migrateProjectName Name of the Azure Migrate project.
     * @param {String} solutionName Unique name of a migration solution within a migrate project.
     * @param {module:model/String} apiVersion Standard request header. Used by service to identify API version used by client.
     * @param {module:api/SolutionsApi~solutionsGetSolutionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Solution}
     */
    solutionsGetSolution(subscriptionId, resourceGroupName, migrateProjectName, solutionName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling solutionsGetSolution");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling solutionsGetSolution");
      }
      // verify the required parameter 'migrateProjectName' is set
      if (migrateProjectName === undefined || migrateProjectName === null) {
        throw new Error("Missing the required parameter 'migrateProjectName' when calling solutionsGetSolution");
      }
      // verify the required parameter 'solutionName' is set
      if (solutionName === undefined || solutionName === null) {
        throw new Error("Missing the required parameter 'solutionName' when calling solutionsGetSolution");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling solutionsGetSolution");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'migrateProjectName': migrateProjectName,
        'solutionName': solutionName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Solution;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/migrateProjects/{migrateProjectName}/solutions/{solutionName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the solutionsPatchSolution operation.
     * @callback module:api/SolutionsApi~solutionsPatchSolutionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Solution} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update solution.
     * Update a solution with specified name. Supports partial updates, for example only tags can be provided.
     * @param {String} subscriptionId Azure Subscription Id in which migrate project was created.
     * @param {String} resourceGroupName Name of the Azure Resource Group that migrate project is part of.
     * @param {String} migrateProjectName Name of the Azure Migrate project.
     * @param {String} solutionName Unique name of a migration solution within a migrate project.
     * @param {module:model/String} apiVersion Standard request header. Used by service to identify API version used by client.
     * @param {module:model/Solution} solutionInput The input for the solution.
     * @param {module:api/SolutionsApi~solutionsPatchSolutionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Solution}
     */
    solutionsPatchSolution(subscriptionId, resourceGroupName, migrateProjectName, solutionName, apiVersion, solutionInput, callback) {
      let postBody = solutionInput;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling solutionsPatchSolution");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling solutionsPatchSolution");
      }
      // verify the required parameter 'migrateProjectName' is set
      if (migrateProjectName === undefined || migrateProjectName === null) {
        throw new Error("Missing the required parameter 'migrateProjectName' when calling solutionsPatchSolution");
      }
      // verify the required parameter 'solutionName' is set
      if (solutionName === undefined || solutionName === null) {
        throw new Error("Missing the required parameter 'solutionName' when calling solutionsPatchSolution");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling solutionsPatchSolution");
      }
      // verify the required parameter 'solutionInput' is set
      if (solutionInput === undefined || solutionInput === null) {
        throw new Error("Missing the required parameter 'solutionInput' when calling solutionsPatchSolution");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'migrateProjectName': migrateProjectName,
        'solutionName': solutionName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Solution;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/migrateProjects/{migrateProjectName}/solutions/{solutionName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the solutionsPutSolution operation.
     * @callback module:api/SolutionsApi~solutionsPutSolutionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Solution} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a solution in the migrate project.
     * @param {String} subscriptionId Azure Subscription Id in which migrate project was created.
     * @param {String} resourceGroupName Name of the Azure Resource Group that migrate project is part of.
     * @param {String} migrateProjectName Name of the Azure Migrate project.
     * @param {String} solutionName Unique name of a migration solution within a migrate project.
     * @param {module:model/String} apiVersion Standard request header. Used by service to identify API version used by client.
     * @param {module:model/Solution} solutionInput The input for the solution.
     * @param {module:api/SolutionsApi~solutionsPutSolutionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Solution}
     */
    solutionsPutSolution(subscriptionId, resourceGroupName, migrateProjectName, solutionName, apiVersion, solutionInput, callback) {
      let postBody = solutionInput;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling solutionsPutSolution");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling solutionsPutSolution");
      }
      // verify the required parameter 'migrateProjectName' is set
      if (migrateProjectName === undefined || migrateProjectName === null) {
        throw new Error("Missing the required parameter 'migrateProjectName' when calling solutionsPutSolution");
      }
      // verify the required parameter 'solutionName' is set
      if (solutionName === undefined || solutionName === null) {
        throw new Error("Missing the required parameter 'solutionName' when calling solutionsPutSolution");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling solutionsPutSolution");
      }
      // verify the required parameter 'solutionInput' is set
      if (solutionInput === undefined || solutionInput === null) {
        throw new Error("Missing the required parameter 'solutionInput' when calling solutionsPutSolution");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'migrateProjectName': migrateProjectName,
        'solutionName': solutionName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Solution;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/migrateProjects/{migrateProjectName}/solutions/{solutionName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
