/**
 * Azure Migrate Hub
 * Migrate your workloads to Azure.
 *
 * The version of the OpenAPI document: 2018-09-01-preview
 * Contact: azuremigratehub@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The IEdmPathExpression model module.
 * @module model/IEdmPathExpression
 * @version 2018-09-01-preview
 */
class IEdmPathExpression {
    /**
     * Constructs a new <code>IEdmPathExpression</code>.
     * @alias module:model/IEdmPathExpression
     */
    constructor() { 
        
        IEdmPathExpression.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>IEdmPathExpression</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IEdmPathExpression} obj Optional instance to populate.
     * @return {module:model/IEdmPathExpression} The populated <code>IEdmPathExpression</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IEdmPathExpression();

            if (data.hasOwnProperty('expressionKind')) {
                obj['expressionKind'] = ApiClient.convertToType(data['expressionKind'], 'String');
            }
            if (data.hasOwnProperty('path')) {
                obj['path'] = ApiClient.convertToType(data['path'], 'String');
            }
            if (data.hasOwnProperty('pathSegments')) {
                obj['pathSegments'] = ApiClient.convertToType(data['pathSegments'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>IEdmPathExpression</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>IEdmPathExpression</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['expressionKind'] && !(typeof data['expressionKind'] === 'string' || data['expressionKind'] instanceof String)) {
            throw new Error("Expected the field `expressionKind` to be a primitive type in the JSON string but got " + data['expressionKind']);
        }
        // ensure the json data is a string
        if (data['path'] && !(typeof data['path'] === 'string' || data['path'] instanceof String)) {
            throw new Error("Expected the field `path` to be a primitive type in the JSON string but got " + data['path']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['pathSegments'])) {
            throw new Error("Expected the field `pathSegments` to be an array in the JSON data but got " + data['pathSegments']);
        }

        return true;
    }


}



/**
 * @member {module:model/IEdmPathExpression.ExpressionKindEnum} expressionKind
 */
IEdmPathExpression.prototype['expressionKind'] = undefined;

/**
 * @member {String} path
 */
IEdmPathExpression.prototype['path'] = undefined;

/**
 * @member {Array.<String>} pathSegments
 */
IEdmPathExpression.prototype['pathSegments'] = undefined;





/**
 * Allowed values for the <code>expressionKind</code> property.
 * @enum {String}
 * @readonly
 */
IEdmPathExpression['ExpressionKindEnum'] = {

    /**
     * value: "None"
     * @const
     */
    "None": "None",

    /**
     * value: "BinaryConstant"
     * @const
     */
    "BinaryConstant": "BinaryConstant",

    /**
     * value: "BooleanConstant"
     * @const
     */
    "BooleanConstant": "BooleanConstant",

    /**
     * value: "DateTimeOffsetConstant"
     * @const
     */
    "DateTimeOffsetConstant": "DateTimeOffsetConstant",

    /**
     * value: "DecimalConstant"
     * @const
     */
    "DecimalConstant": "DecimalConstant",

    /**
     * value: "FloatingConstant"
     * @const
     */
    "FloatingConstant": "FloatingConstant",

    /**
     * value: "GuidConstant"
     * @const
     */
    "GuidConstant": "GuidConstant",

    /**
     * value: "IntegerConstant"
     * @const
     */
    "IntegerConstant": "IntegerConstant",

    /**
     * value: "StringConstant"
     * @const
     */
    "StringConstant": "StringConstant",

    /**
     * value: "DurationConstant"
     * @const
     */
    "DurationConstant": "DurationConstant",

    /**
     * value: "Null"
     * @const
     */
    "Null": "Null",

    /**
     * value: "Record"
     * @const
     */
    "Record": "Record",

    /**
     * value: "Collection"
     * @const
     */
    "Collection": "Collection",

    /**
     * value: "Path"
     * @const
     */
    "Path": "Path",

    /**
     * value: "If"
     * @const
     */
    "If": "If",

    /**
     * value: "Cast"
     * @const
     */
    "Cast": "Cast",

    /**
     * value: "IsType"
     * @const
     */
    "IsType": "IsType",

    /**
     * value: "FunctionApplication"
     * @const
     */
    "FunctionApplication": "FunctionApplication",

    /**
     * value: "LabeledExpressionReference"
     * @const
     */
    "LabeledExpressionReference": "LabeledExpressionReference",

    /**
     * value: "Labeled"
     * @const
     */
    "Labeled": "Labeled",

    /**
     * value: "PropertyPath"
     * @const
     */
    "PropertyPath": "PropertyPath",

    /**
     * value: "NavigationPropertyPath"
     * @const
     */
    "NavigationPropertyPath": "NavigationPropertyPath",

    /**
     * value: "DateConstant"
     * @const
     */
    "DateConstant": "DateConstant",

    /**
     * value: "TimeOfDayConstant"
     * @const
     */
    "TimeOfDayConstant": "TimeOfDayConstant",

    /**
     * value: "EnumMember"
     * @const
     */
    "EnumMember": "EnumMember",

    /**
     * value: "AnnotationPath"
     * @const
     */
    "AnnotationPath": "AnnotationPath"
};



export default IEdmPathExpression;

