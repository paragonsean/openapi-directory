/**
 * Azure Migrate Hub
 * Migrate your workloads to Azure.
 *
 * The version of the OpenAPI document: 2018-09-01-preview
 * Contact: azuremigratehub@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import IEdmStructuredType from './IEdmStructuredType';
import IEdmTypeReference from './IEdmTypeReference';

/**
 * The IEdmStructuralProperty model module.
 * @module model/IEdmStructuralProperty
 * @version 2018-09-01-preview
 */
class IEdmStructuralProperty {
    /**
     * Constructs a new <code>IEdmStructuralProperty</code>.
     * @alias module:model/IEdmStructuralProperty
     */
    constructor() { 
        
        IEdmStructuralProperty.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>IEdmStructuralProperty</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IEdmStructuralProperty} obj Optional instance to populate.
     * @return {module:model/IEdmStructuralProperty} The populated <code>IEdmStructuralProperty</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IEdmStructuralProperty();

            if (data.hasOwnProperty('declaringType')) {
                obj['declaringType'] = IEdmStructuredType.constructFromObject(data['declaringType']);
            }
            if (data.hasOwnProperty('defaultValueString')) {
                obj['defaultValueString'] = ApiClient.convertToType(data['defaultValueString'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('propertyKind')) {
                obj['propertyKind'] = ApiClient.convertToType(data['propertyKind'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = IEdmTypeReference.constructFromObject(data['type']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>IEdmStructuralProperty</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>IEdmStructuralProperty</code>.
     */
    static validateJSON(data) {
        // validate the optional field `declaringType`
        if (data['declaringType']) { // data not null
          IEdmStructuredType.validateJSON(data['declaringType']);
        }
        // ensure the json data is a string
        if (data['defaultValueString'] && !(typeof data['defaultValueString'] === 'string' || data['defaultValueString'] instanceof String)) {
            throw new Error("Expected the field `defaultValueString` to be a primitive type in the JSON string but got " + data['defaultValueString']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['propertyKind'] && !(typeof data['propertyKind'] === 'string' || data['propertyKind'] instanceof String)) {
            throw new Error("Expected the field `propertyKind` to be a primitive type in the JSON string but got " + data['propertyKind']);
        }
        // validate the optional field `type`
        if (data['type']) { // data not null
          IEdmTypeReference.validateJSON(data['type']);
        }

        return true;
    }


}



/**
 * @member {module:model/IEdmStructuredType} declaringType
 */
IEdmStructuralProperty.prototype['declaringType'] = undefined;

/**
 * @member {String} defaultValueString
 */
IEdmStructuralProperty.prototype['defaultValueString'] = undefined;

/**
 * @member {String} name
 */
IEdmStructuralProperty.prototype['name'] = undefined;

/**
 * @member {module:model/IEdmStructuralProperty.PropertyKindEnum} propertyKind
 */
IEdmStructuralProperty.prototype['propertyKind'] = undefined;

/**
 * @member {module:model/IEdmTypeReference} type
 */
IEdmStructuralProperty.prototype['type'] = undefined;





/**
 * Allowed values for the <code>propertyKind</code> property.
 * @enum {String}
 * @readonly
 */
IEdmStructuralProperty['PropertyKindEnum'] = {

    /**
     * value: "None"
     * @const
     */
    "None": "None",

    /**
     * value: "Structural"
     * @const
     */
    "Structural": "Structural",

    /**
     * value: "Navigation"
     * @const
     */
    "Navigation": "Navigation"
};



export default IEdmStructuralProperty;

