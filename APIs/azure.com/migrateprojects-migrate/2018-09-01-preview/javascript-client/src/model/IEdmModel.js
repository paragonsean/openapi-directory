/**
 * Azure Migrate Hub
 * Migrate your workloads to Azure.
 *
 * The version of the OpenAPI document: 2018-09-01-preview
 * Contact: azuremigratehub@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import IEdmEntityContainer from './IEdmEntityContainer';
import IEdmSchemaElement from './IEdmSchemaElement';
import IEdmVocabularyAnnotation from './IEdmVocabularyAnnotation';

/**
 * The IEdmModel model module.
 * @module model/IEdmModel
 * @version 2018-09-01-preview
 */
class IEdmModel {
    /**
     * Constructs a new <code>IEdmModel</code>.
     * @alias module:model/IEdmModel
     */
    constructor() { 
        
        IEdmModel.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>IEdmModel</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IEdmModel} obj Optional instance to populate.
     * @return {module:model/IEdmModel} The populated <code>IEdmModel</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IEdmModel();

            if (data.hasOwnProperty('declaredNamespaces')) {
                obj['declaredNamespaces'] = ApiClient.convertToType(data['declaredNamespaces'], ['String']);
            }
            if (data.hasOwnProperty('directValueAnnotationsManager')) {
                obj['directValueAnnotationsManager'] = ApiClient.convertToType(data['directValueAnnotationsManager'], Object);
            }
            if (data.hasOwnProperty('entityContainer')) {
                obj['entityContainer'] = IEdmEntityContainer.constructFromObject(data['entityContainer']);
            }
            if (data.hasOwnProperty('referencedModels')) {
                obj['referencedModels'] = ApiClient.convertToType(data['referencedModels'], [IEdmModel]);
            }
            if (data.hasOwnProperty('schemaElements')) {
                obj['schemaElements'] = ApiClient.convertToType(data['schemaElements'], [IEdmSchemaElement]);
            }
            if (data.hasOwnProperty('vocabularyAnnotations')) {
                obj['vocabularyAnnotations'] = ApiClient.convertToType(data['vocabularyAnnotations'], [IEdmVocabularyAnnotation]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>IEdmModel</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>IEdmModel</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['declaredNamespaces'])) {
            throw new Error("Expected the field `declaredNamespaces` to be an array in the JSON data but got " + data['declaredNamespaces']);
        }
        // validate the optional field `entityContainer`
        if (data['entityContainer']) { // data not null
          IEdmEntityContainer.validateJSON(data['entityContainer']);
        }
        if (data['referencedModels']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['referencedModels'])) {
                throw new Error("Expected the field `referencedModels` to be an array in the JSON data but got " + data['referencedModels']);
            }
            // validate the optional field `referencedModels` (array)
            for (const item of data['referencedModels']) {
                IEdmModel.validateJSON(item);
            };
        }
        if (data['schemaElements']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['schemaElements'])) {
                throw new Error("Expected the field `schemaElements` to be an array in the JSON data but got " + data['schemaElements']);
            }
            // validate the optional field `schemaElements` (array)
            for (const item of data['schemaElements']) {
                IEdmSchemaElement.validateJSON(item);
            };
        }
        if (data['vocabularyAnnotations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['vocabularyAnnotations'])) {
                throw new Error("Expected the field `vocabularyAnnotations` to be an array in the JSON data but got " + data['vocabularyAnnotations']);
            }
            // validate the optional field `vocabularyAnnotations` (array)
            for (const item of data['vocabularyAnnotations']) {
                IEdmVocabularyAnnotation.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {Array.<String>} declaredNamespaces
 */
IEdmModel.prototype['declaredNamespaces'] = undefined;

/**
 * @member {Object} directValueAnnotationsManager
 */
IEdmModel.prototype['directValueAnnotationsManager'] = undefined;

/**
 * @member {module:model/IEdmEntityContainer} entityContainer
 */
IEdmModel.prototype['entityContainer'] = undefined;

/**
 * @member {Array.<module:model/IEdmModel>} referencedModels
 */
IEdmModel.prototype['referencedModels'] = undefined;

/**
 * @member {Array.<module:model/IEdmSchemaElement>} schemaElements
 */
IEdmModel.prototype['schemaElements'] = undefined;

/**
 * @member {Array.<module:model/IEdmVocabularyAnnotation>} vocabularyAnnotations
 */
IEdmModel.prototype['vocabularyAnnotations'] = undefined;






export default IEdmModel;

