/**
 * Azure Migrate Hub
 * Migrate your workloads to Azure.
 *
 * The version of the OpenAPI document: 2018-09-01-preview
 * Contact: azuremigratehub@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DatabaseAssessmentDetails model module.
 * @module model/DatabaseAssessmentDetails
 * @version 2018-09-01-preview
 */
class DatabaseAssessmentDetails {
    /**
     * Constructs a new <code>DatabaseAssessmentDetails</code>.
     * Assessment properties that can be shared by various publishers.
     * @alias module:model/DatabaseAssessmentDetails
     */
    constructor() { 
        
        DatabaseAssessmentDetails.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DatabaseAssessmentDetails</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DatabaseAssessmentDetails} obj Optional instance to populate.
     * @return {module:model/DatabaseAssessmentDetails} The populated <code>DatabaseAssessmentDetails</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DatabaseAssessmentDetails();

            if (data.hasOwnProperty('assessmentId')) {
                obj['assessmentId'] = ApiClient.convertToType(data['assessmentId'], 'String');
            }
            if (data.hasOwnProperty('assessmentTargetType')) {
                obj['assessmentTargetType'] = ApiClient.convertToType(data['assessmentTargetType'], 'String');
            }
            if (data.hasOwnProperty('breakingChangesCount')) {
                obj['breakingChangesCount'] = ApiClient.convertToType(data['breakingChangesCount'], 'Number');
            }
            if (data.hasOwnProperty('compatibilityLevel')) {
                obj['compatibilityLevel'] = ApiClient.convertToType(data['compatibilityLevel'], 'String');
            }
            if (data.hasOwnProperty('databaseName')) {
                obj['databaseName'] = ApiClient.convertToType(data['databaseName'], 'String');
            }
            if (data.hasOwnProperty('databaseSizeInMB')) {
                obj['databaseSizeInMB'] = ApiClient.convertToType(data['databaseSizeInMB'], 'String');
            }
            if (data.hasOwnProperty('enqueueTime')) {
                obj['enqueueTime'] = ApiClient.convertToType(data['enqueueTime'], 'String');
            }
            if (data.hasOwnProperty('extendedInfo')) {
                obj['extendedInfo'] = ApiClient.convertToType(data['extendedInfo'], {'String': 'String'});
            }
            if (data.hasOwnProperty('instanceId')) {
                obj['instanceId'] = ApiClient.convertToType(data['instanceId'], 'String');
            }
            if (data.hasOwnProperty('isReadyForMigration')) {
                obj['isReadyForMigration'] = ApiClient.convertToType(data['isReadyForMigration'], 'Boolean');
            }
            if (data.hasOwnProperty('lastAssessedTime')) {
                obj['lastAssessedTime'] = ApiClient.convertToType(data['lastAssessedTime'], 'Date');
            }
            if (data.hasOwnProperty('lastUpdatedTime')) {
                obj['lastUpdatedTime'] = ApiClient.convertToType(data['lastUpdatedTime'], 'Date');
            }
            if (data.hasOwnProperty('migrationBlockersCount')) {
                obj['migrationBlockersCount'] = ApiClient.convertToType(data['migrationBlockersCount'], 'Number');
            }
            if (data.hasOwnProperty('solutionName')) {
                obj['solutionName'] = ApiClient.convertToType(data['solutionName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DatabaseAssessmentDetails</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DatabaseAssessmentDetails</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['assessmentId'] && !(typeof data['assessmentId'] === 'string' || data['assessmentId'] instanceof String)) {
            throw new Error("Expected the field `assessmentId` to be a primitive type in the JSON string but got " + data['assessmentId']);
        }
        // ensure the json data is a string
        if (data['assessmentTargetType'] && !(typeof data['assessmentTargetType'] === 'string' || data['assessmentTargetType'] instanceof String)) {
            throw new Error("Expected the field `assessmentTargetType` to be a primitive type in the JSON string but got " + data['assessmentTargetType']);
        }
        // ensure the json data is a string
        if (data['compatibilityLevel'] && !(typeof data['compatibilityLevel'] === 'string' || data['compatibilityLevel'] instanceof String)) {
            throw new Error("Expected the field `compatibilityLevel` to be a primitive type in the JSON string but got " + data['compatibilityLevel']);
        }
        // ensure the json data is a string
        if (data['databaseName'] && !(typeof data['databaseName'] === 'string' || data['databaseName'] instanceof String)) {
            throw new Error("Expected the field `databaseName` to be a primitive type in the JSON string but got " + data['databaseName']);
        }
        // ensure the json data is a string
        if (data['databaseSizeInMB'] && !(typeof data['databaseSizeInMB'] === 'string' || data['databaseSizeInMB'] instanceof String)) {
            throw new Error("Expected the field `databaseSizeInMB` to be a primitive type in the JSON string but got " + data['databaseSizeInMB']);
        }
        // ensure the json data is a string
        if (data['enqueueTime'] && !(typeof data['enqueueTime'] === 'string' || data['enqueueTime'] instanceof String)) {
            throw new Error("Expected the field `enqueueTime` to be a primitive type in the JSON string but got " + data['enqueueTime']);
        }
        // ensure the json data is a string
        if (data['instanceId'] && !(typeof data['instanceId'] === 'string' || data['instanceId'] instanceof String)) {
            throw new Error("Expected the field `instanceId` to be a primitive type in the JSON string but got " + data['instanceId']);
        }
        // ensure the json data is a string
        if (data['solutionName'] && !(typeof data['solutionName'] === 'string' || data['solutionName'] instanceof String)) {
            throw new Error("Expected the field `solutionName` to be a primitive type in the JSON string but got " + data['solutionName']);
        }

        return true;
    }


}



/**
 * Gets or sets the database assessment scope/Id.
 * @member {String} assessmentId
 */
DatabaseAssessmentDetails.prototype['assessmentId'] = undefined;

/**
 * Gets or sets the assessed target database type.
 * @member {String} assessmentTargetType
 */
DatabaseAssessmentDetails.prototype['assessmentTargetType'] = undefined;

/**
 * Gets or sets the number of breaking changes found.
 * @member {Number} breakingChangesCount
 */
DatabaseAssessmentDetails.prototype['breakingChangesCount'] = undefined;

/**
 * Gets or sets the compatibility level of the database.
 * @member {String} compatibilityLevel
 */
DatabaseAssessmentDetails.prototype['compatibilityLevel'] = undefined;

/**
 * Gets or sets the database name.
 * @member {String} databaseName
 */
DatabaseAssessmentDetails.prototype['databaseName'] = undefined;

/**
 * Gets or sets the database size.
 * @member {String} databaseSizeInMB
 */
DatabaseAssessmentDetails.prototype['databaseSizeInMB'] = undefined;

/**
 * Gets or sets the time the message was enqueued.
 * @member {String} enqueueTime
 */
DatabaseAssessmentDetails.prototype['enqueueTime'] = undefined;

/**
 * Gets or sets the extended properties of the database.
 * @member {Object.<String, String>} extendedInfo
 */
DatabaseAssessmentDetails.prototype['extendedInfo'] = undefined;

/**
 * Gets or sets the database server instance Id.
 * @member {String} instanceId
 */
DatabaseAssessmentDetails.prototype['instanceId'] = undefined;

/**
 * Gets or sets a value indicating whether the database is ready for migration.
 * @member {Boolean} isReadyForMigration
 */
DatabaseAssessmentDetails.prototype['isReadyForMigration'] = undefined;

/**
 * Gets or sets the time when the database was last assessed.
 * @member {Date} lastAssessedTime
 */
DatabaseAssessmentDetails.prototype['lastAssessedTime'] = undefined;

/**
 * Gets or sets the time of the last modification of the database details.
 * @member {Date} lastUpdatedTime
 */
DatabaseAssessmentDetails.prototype['lastUpdatedTime'] = undefined;

/**
 * Gets or sets the number of blocking changes found.
 * @member {Number} migrationBlockersCount
 */
DatabaseAssessmentDetails.prototype['migrationBlockersCount'] = undefined;

/**
 * Gets or sets the name of the solution that sent the data.
 * @member {String} solutionName
 */
DatabaseAssessmentDetails.prototype['solutionName'] = undefined;






export default DatabaseAssessmentDetails;

