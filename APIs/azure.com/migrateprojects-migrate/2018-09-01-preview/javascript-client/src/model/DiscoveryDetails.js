/**
 * Azure Migrate Hub
 * Migrate your workloads to Azure.
 *
 * The version of the OpenAPI document: 2018-09-01-preview
 * Contact: azuremigratehub@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DiscoveryDetails model module.
 * @module model/DiscoveryDetails
 * @version 2018-09-01-preview
 */
class DiscoveryDetails {
    /**
     * Constructs a new <code>DiscoveryDetails</code>.
     * Discovery properties that can be published by various ISVs.
     * @alias module:model/DiscoveryDetails
     */
    constructor() { 
        
        DiscoveryDetails.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DiscoveryDetails</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DiscoveryDetails} obj Optional instance to populate.
     * @return {module:model/DiscoveryDetails} The populated <code>DiscoveryDetails</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DiscoveryDetails();

            if (data.hasOwnProperty('biosId')) {
                obj['biosId'] = ApiClient.convertToType(data['biosId'], 'String');
            }
            if (data.hasOwnProperty('enqueueTime')) {
                obj['enqueueTime'] = ApiClient.convertToType(data['enqueueTime'], 'String');
            }
            if (data.hasOwnProperty('extendedInfo')) {
                obj['extendedInfo'] = ApiClient.convertToType(data['extendedInfo'], {'String': 'String'});
            }
            if (data.hasOwnProperty('fabricType')) {
                obj['fabricType'] = ApiClient.convertToType(data['fabricType'], 'String');
            }
            if (data.hasOwnProperty('fqdn')) {
                obj['fqdn'] = ApiClient.convertToType(data['fqdn'], 'String');
            }
            if (data.hasOwnProperty('ipAddresses')) {
                obj['ipAddresses'] = ApiClient.convertToType(data['ipAddresses'], ['String']);
            }
            if (data.hasOwnProperty('lastUpdatedTime')) {
                obj['lastUpdatedTime'] = ApiClient.convertToType(data['lastUpdatedTime'], 'Date');
            }
            if (data.hasOwnProperty('macAddresses')) {
                obj['macAddresses'] = ApiClient.convertToType(data['macAddresses'], ['String']);
            }
            if (data.hasOwnProperty('machineId')) {
                obj['machineId'] = ApiClient.convertToType(data['machineId'], 'String');
            }
            if (data.hasOwnProperty('machineManagerId')) {
                obj['machineManagerId'] = ApiClient.convertToType(data['machineManagerId'], 'String');
            }
            if (data.hasOwnProperty('machineName')) {
                obj['machineName'] = ApiClient.convertToType(data['machineName'], 'String');
            }
            if (data.hasOwnProperty('osName')) {
                obj['osName'] = ApiClient.convertToType(data['osName'], 'String');
            }
            if (data.hasOwnProperty('osType')) {
                obj['osType'] = ApiClient.convertToType(data['osType'], 'String');
            }
            if (data.hasOwnProperty('osVersion')) {
                obj['osVersion'] = ApiClient.convertToType(data['osVersion'], 'String');
            }
            if (data.hasOwnProperty('solutionName')) {
                obj['solutionName'] = ApiClient.convertToType(data['solutionName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DiscoveryDetails</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DiscoveryDetails</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['biosId'] && !(typeof data['biosId'] === 'string' || data['biosId'] instanceof String)) {
            throw new Error("Expected the field `biosId` to be a primitive type in the JSON string but got " + data['biosId']);
        }
        // ensure the json data is a string
        if (data['enqueueTime'] && !(typeof data['enqueueTime'] === 'string' || data['enqueueTime'] instanceof String)) {
            throw new Error("Expected the field `enqueueTime` to be a primitive type in the JSON string but got " + data['enqueueTime']);
        }
        // ensure the json data is a string
        if (data['fabricType'] && !(typeof data['fabricType'] === 'string' || data['fabricType'] instanceof String)) {
            throw new Error("Expected the field `fabricType` to be a primitive type in the JSON string but got " + data['fabricType']);
        }
        // ensure the json data is a string
        if (data['fqdn'] && !(typeof data['fqdn'] === 'string' || data['fqdn'] instanceof String)) {
            throw new Error("Expected the field `fqdn` to be a primitive type in the JSON string but got " + data['fqdn']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['ipAddresses'])) {
            throw new Error("Expected the field `ipAddresses` to be an array in the JSON data but got " + data['ipAddresses']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['macAddresses'])) {
            throw new Error("Expected the field `macAddresses` to be an array in the JSON data but got " + data['macAddresses']);
        }
        // ensure the json data is a string
        if (data['machineId'] && !(typeof data['machineId'] === 'string' || data['machineId'] instanceof String)) {
            throw new Error("Expected the field `machineId` to be a primitive type in the JSON string but got " + data['machineId']);
        }
        // ensure the json data is a string
        if (data['machineManagerId'] && !(typeof data['machineManagerId'] === 'string' || data['machineManagerId'] instanceof String)) {
            throw new Error("Expected the field `machineManagerId` to be a primitive type in the JSON string but got " + data['machineManagerId']);
        }
        // ensure the json data is a string
        if (data['machineName'] && !(typeof data['machineName'] === 'string' || data['machineName'] instanceof String)) {
            throw new Error("Expected the field `machineName` to be a primitive type in the JSON string but got " + data['machineName']);
        }
        // ensure the json data is a string
        if (data['osName'] && !(typeof data['osName'] === 'string' || data['osName'] instanceof String)) {
            throw new Error("Expected the field `osName` to be a primitive type in the JSON string but got " + data['osName']);
        }
        // ensure the json data is a string
        if (data['osType'] && !(typeof data['osType'] === 'string' || data['osType'] instanceof String)) {
            throw new Error("Expected the field `osType` to be a primitive type in the JSON string but got " + data['osType']);
        }
        // ensure the json data is a string
        if (data['osVersion'] && !(typeof data['osVersion'] === 'string' || data['osVersion'] instanceof String)) {
            throw new Error("Expected the field `osVersion` to be a primitive type in the JSON string but got " + data['osVersion']);
        }
        // ensure the json data is a string
        if (data['solutionName'] && !(typeof data['solutionName'] === 'string' || data['solutionName'] instanceof String)) {
            throw new Error("Expected the field `solutionName` to be a primitive type in the JSON string but got " + data['solutionName']);
        }

        return true;
    }


}



/**
 * Gets or sets the BIOS ID of the machine.
 * @member {String} biosId
 */
DiscoveryDetails.prototype['biosId'] = undefined;

/**
 * Gets or sets the time the message was enqueued.
 * @member {String} enqueueTime
 */
DiscoveryDetails.prototype['enqueueTime'] = undefined;

/**
 * Gets or sets the ISV specific extended information.
 * @member {Object.<String, String>} extendedInfo
 */
DiscoveryDetails.prototype['extendedInfo'] = undefined;

/**
 * Gets or sets the fabric type.
 * @member {String} fabricType
 */
DiscoveryDetails.prototype['fabricType'] = undefined;

/**
 * Gets or sets the FQDN of the machine.
 * @member {String} fqdn
 */
DiscoveryDetails.prototype['fqdn'] = undefined;

/**
 * Gets or sets the list of IP addresses of the machine. IP addresses could be IP V4 or IP V6.
 * @member {Array.<String>} ipAddresses
 */
DiscoveryDetails.prototype['ipAddresses'] = undefined;

/**
 * Gets or sets the time of the last modification of the machine details.
 * @member {Date} lastUpdatedTime
 */
DiscoveryDetails.prototype['lastUpdatedTime'] = undefined;

/**
 * Gets or sets the list of MAC addresses of the machine.
 * @member {Array.<String>} macAddresses
 */
DiscoveryDetails.prototype['macAddresses'] = undefined;

/**
 * Gets or sets the unique identifier of the machine.
 * @member {String} machineId
 */
DiscoveryDetails.prototype['machineId'] = undefined;

/**
 * Gets or sets the unique identifier of the virtual machine manager(vCenter/VMM).
 * @member {String} machineManagerId
 */
DiscoveryDetails.prototype['machineManagerId'] = undefined;

/**
 * Gets or sets the name of the machine.
 * @member {String} machineName
 */
DiscoveryDetails.prototype['machineName'] = undefined;

/**
 * Gets or sets the OS name.
 * @member {String} osName
 */
DiscoveryDetails.prototype['osName'] = undefined;

/**
 * Gets or sets the OS type.
 * @member {String} osType
 */
DiscoveryDetails.prototype['osType'] = undefined;

/**
 * Gets or sets the OS version.
 * @member {String} osVersion
 */
DiscoveryDetails.prototype['osVersion'] = undefined;

/**
 * Gets or sets the name of the solution that sent the data.
 * @member {String} solutionName
 */
DiscoveryDetails.prototype['solutionName'] = undefined;






export default DiscoveryDetails;

