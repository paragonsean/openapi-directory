/**
 * Azure Migrate Hub
 * Migrate your workloads to Azure.
 *
 * The version of the OpenAPI document: 2018-09-01-preview
 * Contact: azuremigratehub@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The MigrateEventProperties model module.
 * @module model/MigrateEventProperties
 * @version 2018-09-01-preview
 */
class MigrateEventProperties {
    /**
     * Constructs a new <code>MigrateEventProperties</code>.
     * Properties of the error resource.
     * @alias module:model/MigrateEventProperties
     */
    constructor() { 
        
        MigrateEventProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>MigrateEventProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MigrateEventProperties} obj Optional instance to populate.
     * @return {module:model/MigrateEventProperties} The populated <code>MigrateEventProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MigrateEventProperties();

            if (data.hasOwnProperty('clientRequestId')) {
                obj['clientRequestId'] = ApiClient.convertToType(data['clientRequestId'], 'String');
            }
            if (data.hasOwnProperty('errorCode')) {
                obj['errorCode'] = ApiClient.convertToType(data['errorCode'], 'String');
            }
            if (data.hasOwnProperty('errorMessage')) {
                obj['errorMessage'] = ApiClient.convertToType(data['errorMessage'], 'String');
            }
            if (data.hasOwnProperty('instanceType')) {
                obj['instanceType'] = ApiClient.convertToType(data['instanceType'], 'String');
            }
            if (data.hasOwnProperty('possibleCauses')) {
                obj['possibleCauses'] = ApiClient.convertToType(data['possibleCauses'], 'String');
            }
            if (data.hasOwnProperty('recommendation')) {
                obj['recommendation'] = ApiClient.convertToType(data['recommendation'], 'String');
            }
            if (data.hasOwnProperty('solution')) {
                obj['solution'] = ApiClient.convertToType(data['solution'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MigrateEventProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MigrateEventProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['clientRequestId'] && !(typeof data['clientRequestId'] === 'string' || data['clientRequestId'] instanceof String)) {
            throw new Error("Expected the field `clientRequestId` to be a primitive type in the JSON string but got " + data['clientRequestId']);
        }
        // ensure the json data is a string
        if (data['errorCode'] && !(typeof data['errorCode'] === 'string' || data['errorCode'] instanceof String)) {
            throw new Error("Expected the field `errorCode` to be a primitive type in the JSON string but got " + data['errorCode']);
        }
        // ensure the json data is a string
        if (data['errorMessage'] && !(typeof data['errorMessage'] === 'string' || data['errorMessage'] instanceof String)) {
            throw new Error("Expected the field `errorMessage` to be a primitive type in the JSON string but got " + data['errorMessage']);
        }
        // ensure the json data is a string
        if (data['instanceType'] && !(typeof data['instanceType'] === 'string' || data['instanceType'] instanceof String)) {
            throw new Error("Expected the field `instanceType` to be a primitive type in the JSON string but got " + data['instanceType']);
        }
        // ensure the json data is a string
        if (data['possibleCauses'] && !(typeof data['possibleCauses'] === 'string' || data['possibleCauses'] instanceof String)) {
            throw new Error("Expected the field `possibleCauses` to be a primitive type in the JSON string but got " + data['possibleCauses']);
        }
        // ensure the json data is a string
        if (data['recommendation'] && !(typeof data['recommendation'] === 'string' || data['recommendation'] instanceof String)) {
            throw new Error("Expected the field `recommendation` to be a primitive type in the JSON string but got " + data['recommendation']);
        }
        // ensure the json data is a string
        if (data['solution'] && !(typeof data['solution'] === 'string' || data['solution'] instanceof String)) {
            throw new Error("Expected the field `solution` to be a primitive type in the JSON string but got " + data['solution']);
        }

        return true;
    }


}



/**
 * Gets or sets the client request Id of the payload for which the event is being reported.
 * @member {String} clientRequestId
 */
MigrateEventProperties.prototype['clientRequestId'] = undefined;

/**
 * Gets or sets the error code.
 * @member {String} errorCode
 */
MigrateEventProperties.prototype['errorCode'] = undefined;

/**
 * Gets or sets the error message.
 * @member {String} errorMessage
 */
MigrateEventProperties.prototype['errorMessage'] = undefined;

/**
 * Gets the Instance type.
 * @member {String} instanceType
 */
MigrateEventProperties.prototype['instanceType'] = undefined;

/**
 * Gets or sets the possible causes for the error.
 * @member {String} possibleCauses
 */
MigrateEventProperties.prototype['possibleCauses'] = undefined;

/**
 * Gets or sets the recommendation for the error.
 * @member {String} recommendation
 */
MigrateEventProperties.prototype['recommendation'] = undefined;

/**
 * Gets or sets the solution for which the error is being reported.
 * @member {String} solution
 */
MigrateEventProperties.prototype['solution'] = undefined;






export default MigrateEventProperties;

