/**
 * Azure Migrate Hub
 * Migrate your workloads to Azure.
 *
 * The version of the OpenAPI document: 2018-09-01-preview
 * Contact: azuremigratehub@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import IEdmTypeReference from './IEdmTypeReference';

/**
 * The SingleValueNode model module.
 * @module model/SingleValueNode
 * @version 2018-09-01-preview
 */
class SingleValueNode {
    /**
     * Constructs a new <code>SingleValueNode</code>.
     * @alias module:model/SingleValueNode
     */
    constructor() { 
        
        SingleValueNode.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SingleValueNode</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SingleValueNode} obj Optional instance to populate.
     * @return {module:model/SingleValueNode} The populated <code>SingleValueNode</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SingleValueNode();

            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('typeReference')) {
                obj['typeReference'] = IEdmTypeReference.constructFromObject(data['typeReference']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SingleValueNode</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SingleValueNode</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // validate the optional field `typeReference`
        if (data['typeReference']) { // data not null
          IEdmTypeReference.validateJSON(data['typeReference']);
        }

        return true;
    }


}



/**
 * @member {module:model/SingleValueNode.KindEnum} kind
 */
SingleValueNode.prototype['kind'] = undefined;

/**
 * @member {module:model/IEdmTypeReference} typeReference
 */
SingleValueNode.prototype['typeReference'] = undefined;





/**
 * Allowed values for the <code>kind</code> property.
 * @enum {String}
 * @readonly
 */
SingleValueNode['KindEnum'] = {

    /**
     * value: "None"
     * @const
     */
    "None": "None",

    /**
     * value: "Constant"
     * @const
     */
    "Constant": "Constant",

    /**
     * value: "Convert"
     * @const
     */
    "Convert": "Convert",

    /**
     * value: "NonResourceRangeVariableReference"
     * @const
     */
    "NonResourceRangeVariableReference": "NonResourceRangeVariableReference",

    /**
     * value: "BinaryOperator"
     * @const
     */
    "BinaryOperator": "BinaryOperator",

    /**
     * value: "UnaryOperator"
     * @const
     */
    "UnaryOperator": "UnaryOperator",

    /**
     * value: "SingleValuePropertyAccess"
     * @const
     */
    "SingleValuePropertyAccess": "SingleValuePropertyAccess",

    /**
     * value: "CollectionPropertyAccess"
     * @const
     */
    "CollectionPropertyAccess": "CollectionPropertyAccess",

    /**
     * value: "SingleValueFunctionCall"
     * @const
     */
    "SingleValueFunctionCall": "SingleValueFunctionCall",

    /**
     * value: "Any"
     * @const
     */
    "Any": "Any",

    /**
     * value: "CollectionNavigationNode"
     * @const
     */
    "CollectionNavigationNode": "CollectionNavigationNode",

    /**
     * value: "SingleNavigationNode"
     * @const
     */
    "SingleNavigationNode": "SingleNavigationNode",

    /**
     * value: "SingleValueOpenPropertyAccess"
     * @const
     */
    "SingleValueOpenPropertyAccess": "SingleValueOpenPropertyAccess",

    /**
     * value: "SingleResourceCast"
     * @const
     */
    "SingleResourceCast": "SingleResourceCast",

    /**
     * value: "All"
     * @const
     */
    "All": "All",

    /**
     * value: "CollectionResourceCast"
     * @const
     */
    "CollectionResourceCast": "CollectionResourceCast",

    /**
     * value: "ResourceRangeVariableReference"
     * @const
     */
    "ResourceRangeVariableReference": "ResourceRangeVariableReference",

    /**
     * value: "SingleResourceFunctionCall"
     * @const
     */
    "SingleResourceFunctionCall": "SingleResourceFunctionCall",

    /**
     * value: "CollectionFunctionCall"
     * @const
     */
    "CollectionFunctionCall": "CollectionFunctionCall",

    /**
     * value: "CollectionResourceFunctionCall"
     * @const
     */
    "CollectionResourceFunctionCall": "CollectionResourceFunctionCall",

    /**
     * value: "NamedFunctionParameter"
     * @const
     */
    "NamedFunctionParameter": "NamedFunctionParameter",

    /**
     * value: "ParameterAlias"
     * @const
     */
    "ParameterAlias": "ParameterAlias",

    /**
     * value: "EntitySet"
     * @const
     */
    "EntitySet": "EntitySet",

    /**
     * value: "KeyLookup"
     * @const
     */
    "KeyLookup": "KeyLookup",

    /**
     * value: "SearchTerm"
     * @const
     */
    "SearchTerm": "SearchTerm",

    /**
     * value: "CollectionOpenPropertyAccess"
     * @const
     */
    "CollectionOpenPropertyAccess": "CollectionOpenPropertyAccess",

    /**
     * value: "CollectionComplexNode"
     * @const
     */
    "CollectionComplexNode": "CollectionComplexNode",

    /**
     * value: "SingleComplexNode"
     * @const
     */
    "SingleComplexNode": "SingleComplexNode",

    /**
     * value: "Count"
     * @const
     */
    "Count": "Count",

    /**
     * value: "SingleValueCast"
     * @const
     */
    "SingleValueCast": "SingleValueCast",

    /**
     * value: "CollectionPropertyNode"
     * @const
     */
    "CollectionPropertyNode": "CollectionPropertyNode",

    /**
     * value: "AggregatedCollectionPropertyNode"
     * @const
     */
    "AggregatedCollectionPropertyNode": "AggregatedCollectionPropertyNode",

    /**
     * value: "In"
     * @const
     */
    "In": "In",

    /**
     * value: "CollectionConstant"
     * @const
     */
    "CollectionConstant": "CollectionConstant"
};



export default SingleValueNode;

