/**
 * Azure Migrate Hub
 * Migrate your workloads to Azure.
 *
 * The version of the OpenAPI document: 2018-09-01-preview
 * Contact: azuremigratehub@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SolutionDetails from './SolutionDetails';
import SolutionSummary from './SolutionSummary';

/**
 * The SolutionProperties model module.
 * @module model/SolutionProperties
 * @version 2018-09-01-preview
 */
class SolutionProperties {
    /**
     * Constructs a new <code>SolutionProperties</code>.
     * Class for solution properties.
     * @alias module:model/SolutionProperties
     */
    constructor() { 
        
        SolutionProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SolutionProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SolutionProperties} obj Optional instance to populate.
     * @return {module:model/SolutionProperties} The populated <code>SolutionProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SolutionProperties();

            if (data.hasOwnProperty('cleanupState')) {
                obj['cleanupState'] = ApiClient.convertToType(data['cleanupState'], 'String');
            }
            if (data.hasOwnProperty('details')) {
                obj['details'] = SolutionDetails.constructFromObject(data['details']);
            }
            if (data.hasOwnProperty('goal')) {
                obj['goal'] = ApiClient.convertToType(data['goal'], 'String');
            }
            if (data.hasOwnProperty('purpose')) {
                obj['purpose'] = ApiClient.convertToType(data['purpose'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('summary')) {
                obj['summary'] = SolutionSummary.constructFromObject(data['summary']);
            }
            if (data.hasOwnProperty('tool')) {
                obj['tool'] = ApiClient.convertToType(data['tool'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SolutionProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SolutionProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['cleanupState'] && !(typeof data['cleanupState'] === 'string' || data['cleanupState'] instanceof String)) {
            throw new Error("Expected the field `cleanupState` to be a primitive type in the JSON string but got " + data['cleanupState']);
        }
        // validate the optional field `details`
        if (data['details']) { // data not null
          SolutionDetails.validateJSON(data['details']);
        }
        // ensure the json data is a string
        if (data['goal'] && !(typeof data['goal'] === 'string' || data['goal'] instanceof String)) {
            throw new Error("Expected the field `goal` to be a primitive type in the JSON string but got " + data['goal']);
        }
        // ensure the json data is a string
        if (data['purpose'] && !(typeof data['purpose'] === 'string' || data['purpose'] instanceof String)) {
            throw new Error("Expected the field `purpose` to be a primitive type in the JSON string but got " + data['purpose']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // validate the optional field `summary`
        if (data['summary']) { // data not null
          SolutionSummary.validateJSON(data['summary']);
        }
        // ensure the json data is a string
        if (data['tool'] && !(typeof data['tool'] === 'string' || data['tool'] instanceof String)) {
            throw new Error("Expected the field `tool` to be a primitive type in the JSON string but got " + data['tool']);
        }

        return true;
    }


}



/**
 * Gets or sets the cleanup state of the solution.
 * @member {module:model/SolutionProperties.CleanupStateEnum} cleanupState
 */
SolutionProperties.prototype['cleanupState'] = undefined;

/**
 * @member {module:model/SolutionDetails} details
 */
SolutionProperties.prototype['details'] = undefined;

/**
 * Gets or sets the goal of the solution.
 * @member {module:model/SolutionProperties.GoalEnum} goal
 */
SolutionProperties.prototype['goal'] = undefined;

/**
 * Gets or sets the purpose of the solution.
 * @member {module:model/SolutionProperties.PurposeEnum} purpose
 */
SolutionProperties.prototype['purpose'] = undefined;

/**
 * Gets or sets the current status of the solution.
 * @member {module:model/SolutionProperties.StatusEnum} status
 */
SolutionProperties.prototype['status'] = undefined;

/**
 * @member {module:model/SolutionSummary} summary
 */
SolutionProperties.prototype['summary'] = undefined;

/**
 * Gets or sets the tool being used in the solution.
 * @member {module:model/SolutionProperties.ToolEnum} tool
 */
SolutionProperties.prototype['tool'] = undefined;





/**
 * Allowed values for the <code>cleanupState</code> property.
 * @enum {String}
 * @readonly
 */
SolutionProperties['CleanupStateEnum'] = {

    /**
     * value: "None"
     * @const
     */
    "None": "None",

    /**
     * value: "Started"
     * @const
     */
    "Started": "Started",

    /**
     * value: "InProgress"
     * @const
     */
    "InProgress": "InProgress",

    /**
     * value: "Completed"
     * @const
     */
    "Completed": "Completed",

    /**
     * value: "Failed"
     * @const
     */
    "Failed": "Failed"
};


/**
 * Allowed values for the <code>goal</code> property.
 * @enum {String}
 * @readonly
 */
SolutionProperties['GoalEnum'] = {

    /**
     * value: "Servers"
     * @const
     */
    "Servers": "Servers",

    /**
     * value: "Databases"
     * @const
     */
    "Databases": "Databases"
};


/**
 * Allowed values for the <code>purpose</code> property.
 * @enum {String}
 * @readonly
 */
SolutionProperties['PurposeEnum'] = {

    /**
     * value: "Discovery"
     * @const
     */
    "Discovery": "Discovery",

    /**
     * value: "Assessment"
     * @const
     */
    "Assessment": "Assessment",

    /**
     * value: "Migration"
     * @const
     */
    "Migration": "Migration"
};


/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
SolutionProperties['StatusEnum'] = {

    /**
     * value: "Inactive"
     * @const
     */
    "Inactive": "Inactive",

    /**
     * value: "Active"
     * @const
     */
    "Active": "Active"
};


/**
 * Allowed values for the <code>tool</code> property.
 * @enum {String}
 * @readonly
 */
SolutionProperties['ToolEnum'] = {

    /**
     * value: "ServerDiscovery"
     * @const
     */
    "ServerDiscovery": "ServerDiscovery",

    /**
     * value: "ServerAssessment"
     * @const
     */
    "ServerAssessment": "ServerAssessment",

    /**
     * value: "ServerMigration"
     * @const
     */
    "ServerMigration": "ServerMigration",

    /**
     * value: "Cloudamize"
     * @const
     */
    "Cloudamize": "Cloudamize",

    /**
     * value: "Turbonomic"
     * @const
     */
    "Turbonomic": "Turbonomic",

    /**
     * value: "Zerto"
     * @const
     */
    "Zerto": "Zerto",

    /**
     * value: "CorentTech"
     * @const
     */
    "CorentTech": "CorentTech",

    /**
     * value: "ServerAssessmentV1"
     * @const
     */
    "ServerAssessmentV1": "ServerAssessmentV1",

    /**
     * value: "ServerMigration_Replication"
     * @const
     */
    "ServerMigration_Replication": "ServerMigration_Replication",

    /**
     * value: "Carbonite"
     * @const
     */
    "Carbonite": "Carbonite",

    /**
     * value: "DataMigrationAssistant"
     * @const
     */
    "DataMigrationAssistant": "DataMigrationAssistant",

    /**
     * value: "DatabaseMigrationService"
     * @const
     */
    "DatabaseMigrationService": "DatabaseMigrationService"
};



export default SolutionProperties;

