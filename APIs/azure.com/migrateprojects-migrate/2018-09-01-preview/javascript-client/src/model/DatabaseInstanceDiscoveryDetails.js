/**
 * Azure Migrate Hub
 * Migrate your workloads to Azure.
 *
 * The version of the OpenAPI document: 2018-09-01-preview
 * Contact: azuremigratehub@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DatabaseInstanceDiscoveryDetails model module.
 * @module model/DatabaseInstanceDiscoveryDetails
 * @version 2018-09-01-preview
 */
class DatabaseInstanceDiscoveryDetails {
    /**
     * Constructs a new <code>DatabaseInstanceDiscoveryDetails</code>.
     * Discovery properties that can be shared by various publishers.
     * @alias module:model/DatabaseInstanceDiscoveryDetails
     */
    constructor() { 
        
        DatabaseInstanceDiscoveryDetails.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DatabaseInstanceDiscoveryDetails</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DatabaseInstanceDiscoveryDetails} obj Optional instance to populate.
     * @return {module:model/DatabaseInstanceDiscoveryDetails} The populated <code>DatabaseInstanceDiscoveryDetails</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DatabaseInstanceDiscoveryDetails();

            if (data.hasOwnProperty('enqueueTime')) {
                obj['enqueueTime'] = ApiClient.convertToType(data['enqueueTime'], 'String');
            }
            if (data.hasOwnProperty('extendedInfo')) {
                obj['extendedInfo'] = ApiClient.convertToType(data['extendedInfo'], {'String': 'String'});
            }
            if (data.hasOwnProperty('hostName')) {
                obj['hostName'] = ApiClient.convertToType(data['hostName'], 'String');
            }
            if (data.hasOwnProperty('instanceId')) {
                obj['instanceId'] = ApiClient.convertToType(data['instanceId'], 'String');
            }
            if (data.hasOwnProperty('instanceName')) {
                obj['instanceName'] = ApiClient.convertToType(data['instanceName'], 'String');
            }
            if (data.hasOwnProperty('instanceType')) {
                obj['instanceType'] = ApiClient.convertToType(data['instanceType'], 'String');
            }
            if (data.hasOwnProperty('instanceVersion')) {
                obj['instanceVersion'] = ApiClient.convertToType(data['instanceVersion'], 'String');
            }
            if (data.hasOwnProperty('ipAddress')) {
                obj['ipAddress'] = ApiClient.convertToType(data['ipAddress'], 'String');
            }
            if (data.hasOwnProperty('lastUpdatedTime')) {
                obj['lastUpdatedTime'] = ApiClient.convertToType(data['lastUpdatedTime'], 'Date');
            }
            if (data.hasOwnProperty('portNumber')) {
                obj['portNumber'] = ApiClient.convertToType(data['portNumber'], 'Number');
            }
            if (data.hasOwnProperty('solutionName')) {
                obj['solutionName'] = ApiClient.convertToType(data['solutionName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DatabaseInstanceDiscoveryDetails</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DatabaseInstanceDiscoveryDetails</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['enqueueTime'] && !(typeof data['enqueueTime'] === 'string' || data['enqueueTime'] instanceof String)) {
            throw new Error("Expected the field `enqueueTime` to be a primitive type in the JSON string but got " + data['enqueueTime']);
        }
        // ensure the json data is a string
        if (data['hostName'] && !(typeof data['hostName'] === 'string' || data['hostName'] instanceof String)) {
            throw new Error("Expected the field `hostName` to be a primitive type in the JSON string but got " + data['hostName']);
        }
        // ensure the json data is a string
        if (data['instanceId'] && !(typeof data['instanceId'] === 'string' || data['instanceId'] instanceof String)) {
            throw new Error("Expected the field `instanceId` to be a primitive type in the JSON string but got " + data['instanceId']);
        }
        // ensure the json data is a string
        if (data['instanceName'] && !(typeof data['instanceName'] === 'string' || data['instanceName'] instanceof String)) {
            throw new Error("Expected the field `instanceName` to be a primitive type in the JSON string but got " + data['instanceName']);
        }
        // ensure the json data is a string
        if (data['instanceType'] && !(typeof data['instanceType'] === 'string' || data['instanceType'] instanceof String)) {
            throw new Error("Expected the field `instanceType` to be a primitive type in the JSON string but got " + data['instanceType']);
        }
        // ensure the json data is a string
        if (data['instanceVersion'] && !(typeof data['instanceVersion'] === 'string' || data['instanceVersion'] instanceof String)) {
            throw new Error("Expected the field `instanceVersion` to be a primitive type in the JSON string but got " + data['instanceVersion']);
        }
        // ensure the json data is a string
        if (data['ipAddress'] && !(typeof data['ipAddress'] === 'string' || data['ipAddress'] instanceof String)) {
            throw new Error("Expected the field `ipAddress` to be a primitive type in the JSON string but got " + data['ipAddress']);
        }
        // ensure the json data is a string
        if (data['solutionName'] && !(typeof data['solutionName'] === 'string' || data['solutionName'] instanceof String)) {
            throw new Error("Expected the field `solutionName` to be a primitive type in the JSON string but got " + data['solutionName']);
        }

        return true;
    }


}



/**
 * Gets or sets the time the message was enqueued.
 * @member {String} enqueueTime
 */
DatabaseInstanceDiscoveryDetails.prototype['enqueueTime'] = undefined;

/**
 * Gets or sets the extended properties of the database server.
 * @member {Object.<String, String>} extendedInfo
 */
DatabaseInstanceDiscoveryDetails.prototype['extendedInfo'] = undefined;

/**
 * Gets or sets the host name of the database server.
 * @member {String} hostName
 */
DatabaseInstanceDiscoveryDetails.prototype['hostName'] = undefined;

/**
 * Gets or sets the database instance Id.
 * @member {String} instanceId
 */
DatabaseInstanceDiscoveryDetails.prototype['instanceId'] = undefined;

/**
 * Gets or sets the database instance name.
 * @member {String} instanceName
 */
DatabaseInstanceDiscoveryDetails.prototype['instanceName'] = undefined;

/**
 * Gets or sets the database instance type.
 * @member {String} instanceType
 */
DatabaseInstanceDiscoveryDetails.prototype['instanceType'] = undefined;

/**
 * Gets or sets the database instance version.
 * @member {String} instanceVersion
 */
DatabaseInstanceDiscoveryDetails.prototype['instanceVersion'] = undefined;

/**
 * Gets or sets the IP addresses of the database server. IP addresses could be IP V4 or IP V6.
 * @member {String} ipAddress
 */
DatabaseInstanceDiscoveryDetails.prototype['ipAddress'] = undefined;

/**
 * Gets or sets the time of the last modification of the database instance details.
 * @member {Date} lastUpdatedTime
 */
DatabaseInstanceDiscoveryDetails.prototype['lastUpdatedTime'] = undefined;

/**
 * Gets or sets the port number of the database server.
 * @member {Number} portNumber
 */
DatabaseInstanceDiscoveryDetails.prototype['portNumber'] = undefined;

/**
 * Gets or sets the name of the solution that sent the data.
 * @member {String} solutionName
 */
DatabaseInstanceDiscoveryDetails.prototype['solutionName'] = undefined;






export default DatabaseInstanceDiscoveryDetails;

