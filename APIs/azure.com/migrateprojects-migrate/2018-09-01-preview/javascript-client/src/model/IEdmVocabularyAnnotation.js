/**
 * Azure Migrate Hub
 * Migrate your workloads to Azure.
 *
 * The version of the OpenAPI document: 2018-09-01-preview
 * Contact: azuremigratehub@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import IEdmExpression from './IEdmExpression';
import IEdmTerm from './IEdmTerm';

/**
 * The IEdmVocabularyAnnotation model module.
 * @module model/IEdmVocabularyAnnotation
 * @version 2018-09-01-preview
 */
class IEdmVocabularyAnnotation {
    /**
     * Constructs a new <code>IEdmVocabularyAnnotation</code>.
     * @alias module:model/IEdmVocabularyAnnotation
     */
    constructor() { 
        
        IEdmVocabularyAnnotation.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>IEdmVocabularyAnnotation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IEdmVocabularyAnnotation} obj Optional instance to populate.
     * @return {module:model/IEdmVocabularyAnnotation} The populated <code>IEdmVocabularyAnnotation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IEdmVocabularyAnnotation();

            if (data.hasOwnProperty('qualifier')) {
                obj['qualifier'] = ApiClient.convertToType(data['qualifier'], 'String');
            }
            if (data.hasOwnProperty('target')) {
                obj['target'] = ApiClient.convertToType(data['target'], Object);
            }
            if (data.hasOwnProperty('term')) {
                obj['term'] = IEdmTerm.constructFromObject(data['term']);
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = IEdmExpression.constructFromObject(data['value']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>IEdmVocabularyAnnotation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>IEdmVocabularyAnnotation</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['qualifier'] && !(typeof data['qualifier'] === 'string' || data['qualifier'] instanceof String)) {
            throw new Error("Expected the field `qualifier` to be a primitive type in the JSON string but got " + data['qualifier']);
        }
        // validate the optional field `term`
        if (data['term']) { // data not null
          IEdmTerm.validateJSON(data['term']);
        }
        // validate the optional field `value`
        if (data['value']) { // data not null
          IEdmExpression.validateJSON(data['value']);
        }

        return true;
    }


}



/**
 * @member {String} qualifier
 */
IEdmVocabularyAnnotation.prototype['qualifier'] = undefined;

/**
 * @member {Object} target
 */
IEdmVocabularyAnnotation.prototype['target'] = undefined;

/**
 * @member {module:model/IEdmTerm} term
 */
IEdmVocabularyAnnotation.prototype['term'] = undefined;

/**
 * @member {module:model/IEdmExpression} value
 */
IEdmVocabularyAnnotation.prototype['value'] = undefined;






export default IEdmVocabularyAnnotation;

