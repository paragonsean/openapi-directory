/**
 * Azure Migrate Hub
 * Migrate your workloads to Azure.
 *
 * The version of the OpenAPI document: 2018-09-01-preview
 * Contact: azuremigratehub@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The RegisterToolInput model module.
 * @module model/RegisterToolInput
 * @version 2018-09-01-preview
 */
class RegisterToolInput {
    /**
     * Constructs a new <code>RegisterToolInput</code>.
     * Class representing the register tool input.
     * @alias module:model/RegisterToolInput
     */
    constructor() { 
        
        RegisterToolInput.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RegisterToolInput</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RegisterToolInput} obj Optional instance to populate.
     * @return {module:model/RegisterToolInput} The populated <code>RegisterToolInput</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RegisterToolInput();

            if (data.hasOwnProperty('tool')) {
                obj['tool'] = ApiClient.convertToType(data['tool'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RegisterToolInput</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RegisterToolInput</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['tool'] && !(typeof data['tool'] === 'string' || data['tool'] instanceof String)) {
            throw new Error("Expected the field `tool` to be a primitive type in the JSON string but got " + data['tool']);
        }

        return true;
    }


}



/**
 * Gets or sets the tool to be registered.
 * @member {module:model/RegisterToolInput.ToolEnum} tool
 */
RegisterToolInput.prototype['tool'] = undefined;





/**
 * Allowed values for the <code>tool</code> property.
 * @enum {String}
 * @readonly
 */
RegisterToolInput['ToolEnum'] = {

    /**
     * value: "ServerDiscovery"
     * @const
     */
    "ServerDiscovery": "ServerDiscovery",

    /**
     * value: "ServerAssessment"
     * @const
     */
    "ServerAssessment": "ServerAssessment",

    /**
     * value: "ServerMigration"
     * @const
     */
    "ServerMigration": "ServerMigration",

    /**
     * value: "Cloudamize"
     * @const
     */
    "Cloudamize": "Cloudamize",

    /**
     * value: "Turbonomic"
     * @const
     */
    "Turbonomic": "Turbonomic",

    /**
     * value: "Zerto"
     * @const
     */
    "Zerto": "Zerto",

    /**
     * value: "CorentTech"
     * @const
     */
    "CorentTech": "CorentTech",

    /**
     * value: "ServerAssessmentV1"
     * @const
     */
    "ServerAssessmentV1": "ServerAssessmentV1",

    /**
     * value: "ServerMigration_Replication"
     * @const
     */
    "ServerMigration_Replication": "ServerMigration_Replication",

    /**
     * value: "Carbonite"
     * @const
     */
    "Carbonite": "Carbonite",

    /**
     * value: "DataMigrationAssistant"
     * @const
     */
    "DataMigrationAssistant": "DataMigrationAssistant",

    /**
     * value: "DatabaseMigrationService"
     * @const
     */
    "DatabaseMigrationService": "DatabaseMigrationService"
};



export default RegisterToolInput;

