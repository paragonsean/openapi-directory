/**
 * Azure Migrate Hub
 * Migrate your workloads to Azure.
 *
 * The version of the OpenAPI document: 2018-09-01-preview
 * Contact: azuremigratehub@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMachineMigrateEventProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMachineMigrateEventProperties::OAIMachineMigrateEventProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMachineMigrateEventProperties::OAIMachineMigrateEventProperties() {
    this->initializeModel();
}

OAIMachineMigrateEventProperties::~OAIMachineMigrateEventProperties() {}

void OAIMachineMigrateEventProperties::initializeModel() {

    m_machine_isSet = false;
    m_machine_isValid = false;

    m_client_request_id_isSet = false;
    m_client_request_id_isValid = false;

    m_error_code_isSet = false;
    m_error_code_isValid = false;

    m_error_message_isSet = false;
    m_error_message_isValid = false;

    m_instance_type_isSet = false;
    m_instance_type_isValid = false;

    m_possible_causes_isSet = false;
    m_possible_causes_isValid = false;

    m_recommendation_isSet = false;
    m_recommendation_isValid = false;

    m_solution_isSet = false;
    m_solution_isValid = false;
}

void OAIMachineMigrateEventProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMachineMigrateEventProperties::fromJsonObject(QJsonObject json) {

    m_machine_isValid = ::OpenAPI::fromJsonValue(m_machine, json[QString("machine")]);
    m_machine_isSet = !json[QString("machine")].isNull() && m_machine_isValid;

    m_client_request_id_isValid = ::OpenAPI::fromJsonValue(m_client_request_id, json[QString("clientRequestId")]);
    m_client_request_id_isSet = !json[QString("clientRequestId")].isNull() && m_client_request_id_isValid;

    m_error_code_isValid = ::OpenAPI::fromJsonValue(m_error_code, json[QString("errorCode")]);
    m_error_code_isSet = !json[QString("errorCode")].isNull() && m_error_code_isValid;

    m_error_message_isValid = ::OpenAPI::fromJsonValue(m_error_message, json[QString("errorMessage")]);
    m_error_message_isSet = !json[QString("errorMessage")].isNull() && m_error_message_isValid;

    m_instance_type_isValid = ::OpenAPI::fromJsonValue(m_instance_type, json[QString("instanceType")]);
    m_instance_type_isSet = !json[QString("instanceType")].isNull() && m_instance_type_isValid;

    m_possible_causes_isValid = ::OpenAPI::fromJsonValue(m_possible_causes, json[QString("possibleCauses")]);
    m_possible_causes_isSet = !json[QString("possibleCauses")].isNull() && m_possible_causes_isValid;

    m_recommendation_isValid = ::OpenAPI::fromJsonValue(m_recommendation, json[QString("recommendation")]);
    m_recommendation_isSet = !json[QString("recommendation")].isNull() && m_recommendation_isValid;

    m_solution_isValid = ::OpenAPI::fromJsonValue(m_solution, json[QString("solution")]);
    m_solution_isSet = !json[QString("solution")].isNull() && m_solution_isValid;
}

QString OAIMachineMigrateEventProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMachineMigrateEventProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_machine_isSet) {
        obj.insert(QString("machine"), ::OpenAPI::toJsonValue(m_machine));
    }
    if (m_client_request_id_isSet) {
        obj.insert(QString("clientRequestId"), ::OpenAPI::toJsonValue(m_client_request_id));
    }
    if (m_error_code_isSet) {
        obj.insert(QString("errorCode"), ::OpenAPI::toJsonValue(m_error_code));
    }
    if (m_error_message_isSet) {
        obj.insert(QString("errorMessage"), ::OpenAPI::toJsonValue(m_error_message));
    }
    if (m_instance_type_isSet) {
        obj.insert(QString("instanceType"), ::OpenAPI::toJsonValue(m_instance_type));
    }
    if (m_possible_causes_isSet) {
        obj.insert(QString("possibleCauses"), ::OpenAPI::toJsonValue(m_possible_causes));
    }
    if (m_recommendation_isSet) {
        obj.insert(QString("recommendation"), ::OpenAPI::toJsonValue(m_recommendation));
    }
    if (m_solution_isSet) {
        obj.insert(QString("solution"), ::OpenAPI::toJsonValue(m_solution));
    }
    return obj;
}

QString OAIMachineMigrateEventProperties::getMachine() const {
    return m_machine;
}
void OAIMachineMigrateEventProperties::setMachine(const QString &machine) {
    m_machine = machine;
    m_machine_isSet = true;
}

bool OAIMachineMigrateEventProperties::is_machine_Set() const{
    return m_machine_isSet;
}

bool OAIMachineMigrateEventProperties::is_machine_Valid() const{
    return m_machine_isValid;
}

QString OAIMachineMigrateEventProperties::getClientRequestId() const {
    return m_client_request_id;
}
void OAIMachineMigrateEventProperties::setClientRequestId(const QString &client_request_id) {
    m_client_request_id = client_request_id;
    m_client_request_id_isSet = true;
}

bool OAIMachineMigrateEventProperties::is_client_request_id_Set() const{
    return m_client_request_id_isSet;
}

bool OAIMachineMigrateEventProperties::is_client_request_id_Valid() const{
    return m_client_request_id_isValid;
}

QString OAIMachineMigrateEventProperties::getErrorCode() const {
    return m_error_code;
}
void OAIMachineMigrateEventProperties::setErrorCode(const QString &error_code) {
    m_error_code = error_code;
    m_error_code_isSet = true;
}

bool OAIMachineMigrateEventProperties::is_error_code_Set() const{
    return m_error_code_isSet;
}

bool OAIMachineMigrateEventProperties::is_error_code_Valid() const{
    return m_error_code_isValid;
}

QString OAIMachineMigrateEventProperties::getErrorMessage() const {
    return m_error_message;
}
void OAIMachineMigrateEventProperties::setErrorMessage(const QString &error_message) {
    m_error_message = error_message;
    m_error_message_isSet = true;
}

bool OAIMachineMigrateEventProperties::is_error_message_Set() const{
    return m_error_message_isSet;
}

bool OAIMachineMigrateEventProperties::is_error_message_Valid() const{
    return m_error_message_isValid;
}

QString OAIMachineMigrateEventProperties::getInstanceType() const {
    return m_instance_type;
}
void OAIMachineMigrateEventProperties::setInstanceType(const QString &instance_type) {
    m_instance_type = instance_type;
    m_instance_type_isSet = true;
}

bool OAIMachineMigrateEventProperties::is_instance_type_Set() const{
    return m_instance_type_isSet;
}

bool OAIMachineMigrateEventProperties::is_instance_type_Valid() const{
    return m_instance_type_isValid;
}

QString OAIMachineMigrateEventProperties::getPossibleCauses() const {
    return m_possible_causes;
}
void OAIMachineMigrateEventProperties::setPossibleCauses(const QString &possible_causes) {
    m_possible_causes = possible_causes;
    m_possible_causes_isSet = true;
}

bool OAIMachineMigrateEventProperties::is_possible_causes_Set() const{
    return m_possible_causes_isSet;
}

bool OAIMachineMigrateEventProperties::is_possible_causes_Valid() const{
    return m_possible_causes_isValid;
}

QString OAIMachineMigrateEventProperties::getRecommendation() const {
    return m_recommendation;
}
void OAIMachineMigrateEventProperties::setRecommendation(const QString &recommendation) {
    m_recommendation = recommendation;
    m_recommendation_isSet = true;
}

bool OAIMachineMigrateEventProperties::is_recommendation_Set() const{
    return m_recommendation_isSet;
}

bool OAIMachineMigrateEventProperties::is_recommendation_Valid() const{
    return m_recommendation_isValid;
}

QString OAIMachineMigrateEventProperties::getSolution() const {
    return m_solution;
}
void OAIMachineMigrateEventProperties::setSolution(const QString &solution) {
    m_solution = solution;
    m_solution_isSet = true;
}

bool OAIMachineMigrateEventProperties::is_solution_Set() const{
    return m_solution_isSet;
}

bool OAIMachineMigrateEventProperties::is_solution_Valid() const{
    return m_solution_isValid;
}

bool OAIMachineMigrateEventProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_machine_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_possible_causes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recommendation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_solution_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMachineMigrateEventProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
