/**
 * Azure Migrate Hub
 * Migrate your workloads to Azure.
 *
 * The version of the OpenAPI document: 2018-09-01-preview
 * Contact: azuremigratehub@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIMigrateProjectsApi_H
#define OAI_OAIMigrateProjectsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIMigrateProject.h"
#include "OAIRefreshSummaryInput.h"
#include "OAIRefreshSummaryResult.h"
#include "OAIRegisterToolInput.h"
#include "OAIRegistrationResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIMigrateProjectsApi : public QObject {
    Q_OBJECT

public:
    OAIMigrateProjectsApi(const int timeOut = 0);
    ~OAIMigrateProjectsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  migrate_project_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  accept_language QString [optional]
    */
    virtual void migrateProjectsDeleteMigrateProject(const QString &subscription_id, const QString &resource_group_name, const QString &migrate_project_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  migrate_project_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void migrateProjectsGetMigrateProject(const QString &subscription_id, const QString &resource_group_name, const QString &migrate_project_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  migrate_project_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  body OAIMigrateProject [required]
    * @param[in]  accept_language QString [optional]
    */
    virtual void migrateProjectsPatchMigrateProject(const QString &subscription_id, const QString &resource_group_name, const QString &migrate_project_name, const QString &api_version, const OAIMigrateProject &body, const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  migrate_project_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  body OAIMigrateProject [required]
    * @param[in]  accept_language QString [optional]
    */
    virtual void migrateProjectsPutMigrateProject(const QString &subscription_id, const QString &resource_group_name, const QString &migrate_project_name, const QString &api_version, const OAIMigrateProject &body, const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  migrate_project_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  input OAIRefreshSummaryInput [required]
    */
    virtual void migrateProjectsRefreshMigrateProjectSummary(const QString &subscription_id, const QString &resource_group_name, const QString &migrate_project_name, const QString &api_version, const OAIRefreshSummaryInput &input);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  migrate_project_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  input OAIRegisterToolInput [required]
    * @param[in]  accept_language QString [optional]
    */
    virtual void migrateProjectsRegisterTool(const QString &subscription_id, const QString &resource_group_name, const QString &migrate_project_name, const QString &api_version, const OAIRegisterToolInput &input, const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void migrateProjectsDeleteMigrateProjectCallback(OAIHttpRequestWorker *worker);
    void migrateProjectsGetMigrateProjectCallback(OAIHttpRequestWorker *worker);
    void migrateProjectsPatchMigrateProjectCallback(OAIHttpRequestWorker *worker);
    void migrateProjectsPutMigrateProjectCallback(OAIHttpRequestWorker *worker);
    void migrateProjectsRefreshMigrateProjectSummaryCallback(OAIHttpRequestWorker *worker);
    void migrateProjectsRegisterToolCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void migrateProjectsDeleteMigrateProjectSignal();
    void migrateProjectsGetMigrateProjectSignal(OAIMigrateProject summary);
    void migrateProjectsPatchMigrateProjectSignal(OAIMigrateProject summary);
    void migrateProjectsPutMigrateProjectSignal(OAIMigrateProject summary);
    void migrateProjectsRefreshMigrateProjectSummarySignal(OAIRefreshSummaryResult summary);
    void migrateProjectsRegisterToolSignal(OAIRegistrationResult summary);


    void migrateProjectsDeleteMigrateProjectSignalFull(OAIHttpRequestWorker *worker);
    void migrateProjectsGetMigrateProjectSignalFull(OAIHttpRequestWorker *worker, OAIMigrateProject summary);
    void migrateProjectsPatchMigrateProjectSignalFull(OAIHttpRequestWorker *worker, OAIMigrateProject summary);
    void migrateProjectsPutMigrateProjectSignalFull(OAIHttpRequestWorker *worker, OAIMigrateProject summary);
    void migrateProjectsRefreshMigrateProjectSummarySignalFull(OAIHttpRequestWorker *worker, OAIRefreshSummaryResult summary);
    void migrateProjectsRegisterToolSignalFull(OAIHttpRequestWorker *worker, OAIRegistrationResult summary);

    Q_DECL_DEPRECATED_X("Use migrateProjectsDeleteMigrateProjectSignalError() instead")
    void migrateProjectsDeleteMigrateProjectSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void migrateProjectsDeleteMigrateProjectSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use migrateProjectsGetMigrateProjectSignalError() instead")
    void migrateProjectsGetMigrateProjectSignalE(OAIMigrateProject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void migrateProjectsGetMigrateProjectSignalError(OAIMigrateProject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use migrateProjectsPatchMigrateProjectSignalError() instead")
    void migrateProjectsPatchMigrateProjectSignalE(OAIMigrateProject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void migrateProjectsPatchMigrateProjectSignalError(OAIMigrateProject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use migrateProjectsPutMigrateProjectSignalError() instead")
    void migrateProjectsPutMigrateProjectSignalE(OAIMigrateProject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void migrateProjectsPutMigrateProjectSignalError(OAIMigrateProject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use migrateProjectsRefreshMigrateProjectSummarySignalError() instead")
    void migrateProjectsRefreshMigrateProjectSummarySignalE(OAIRefreshSummaryResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void migrateProjectsRefreshMigrateProjectSummarySignalError(OAIRefreshSummaryResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use migrateProjectsRegisterToolSignalError() instead")
    void migrateProjectsRegisterToolSignalE(OAIRegistrationResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void migrateProjectsRegisterToolSignalError(OAIRegistrationResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use migrateProjectsDeleteMigrateProjectSignalErrorFull() instead")
    void migrateProjectsDeleteMigrateProjectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void migrateProjectsDeleteMigrateProjectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use migrateProjectsGetMigrateProjectSignalErrorFull() instead")
    void migrateProjectsGetMigrateProjectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void migrateProjectsGetMigrateProjectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use migrateProjectsPatchMigrateProjectSignalErrorFull() instead")
    void migrateProjectsPatchMigrateProjectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void migrateProjectsPatchMigrateProjectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use migrateProjectsPutMigrateProjectSignalErrorFull() instead")
    void migrateProjectsPutMigrateProjectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void migrateProjectsPutMigrateProjectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use migrateProjectsRefreshMigrateProjectSummarySignalErrorFull() instead")
    void migrateProjectsRefreshMigrateProjectSummarySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void migrateProjectsRefreshMigrateProjectSummarySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use migrateProjectsRegisterToolSignalErrorFull() instead")
    void migrateProjectsRegisterToolSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void migrateProjectsRegisterToolSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
