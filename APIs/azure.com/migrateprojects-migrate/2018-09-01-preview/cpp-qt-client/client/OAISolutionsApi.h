/**
 * Azure Migrate Hub
 * Migrate your workloads to Azure.
 *
 * The version of the OpenAPI document: 2018-09-01-preview
 * Contact: azuremigratehub@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISolutionsApi_H
#define OAI_OAISolutionsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAISolution.h"
#include "OAISolutionConfig.h"
#include "OAISolutionsCollection.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISolutionsApi : public QObject {
    Q_OBJECT

public:
    OAISolutionsApi(const int timeOut = 0);
    ~OAISolutionsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  migrate_project_name QString [required]
    * @param[in]  solution_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void solutionsCleanupSolutionData(const QString &subscription_id, const QString &resource_group_name, const QString &migrate_project_name, const QString &solution_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  migrate_project_name QString [required]
    * @param[in]  solution_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  accept_language QString [optional]
    */
    virtual void solutionsDeleteSolution(const QString &subscription_id, const QString &resource_group_name, const QString &migrate_project_name, const QString &solution_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  migrate_project_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void solutionsEnumerateSolutions(const QString &subscription_id, const QString &resource_group_name, const QString &migrate_project_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  migrate_project_name QString [required]
    * @param[in]  solution_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void solutionsGetConfig(const QString &subscription_id, const QString &resource_group_name, const QString &migrate_project_name, const QString &solution_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  migrate_project_name QString [required]
    * @param[in]  solution_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void solutionsGetSolution(const QString &subscription_id, const QString &resource_group_name, const QString &migrate_project_name, const QString &solution_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  migrate_project_name QString [required]
    * @param[in]  solution_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  solution_input OAISolution [required]
    */
    virtual void solutionsPatchSolution(const QString &subscription_id, const QString &resource_group_name, const QString &migrate_project_name, const QString &solution_name, const QString &api_version, const OAISolution &solution_input);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  migrate_project_name QString [required]
    * @param[in]  solution_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  solution_input OAISolution [required]
    */
    virtual void solutionsPutSolution(const QString &subscription_id, const QString &resource_group_name, const QString &migrate_project_name, const QString &solution_name, const QString &api_version, const OAISolution &solution_input);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void solutionsCleanupSolutionDataCallback(OAIHttpRequestWorker *worker);
    void solutionsDeleteSolutionCallback(OAIHttpRequestWorker *worker);
    void solutionsEnumerateSolutionsCallback(OAIHttpRequestWorker *worker);
    void solutionsGetConfigCallback(OAIHttpRequestWorker *worker);
    void solutionsGetSolutionCallback(OAIHttpRequestWorker *worker);
    void solutionsPatchSolutionCallback(OAIHttpRequestWorker *worker);
    void solutionsPutSolutionCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void solutionsCleanupSolutionDataSignal();
    void solutionsDeleteSolutionSignal();
    void solutionsEnumerateSolutionsSignal(OAISolutionsCollection summary);
    void solutionsGetConfigSignal(OAISolutionConfig summary);
    void solutionsGetSolutionSignal(OAISolution summary);
    void solutionsPatchSolutionSignal(OAISolution summary);
    void solutionsPutSolutionSignal(OAISolution summary);


    void solutionsCleanupSolutionDataSignalFull(OAIHttpRequestWorker *worker);
    void solutionsDeleteSolutionSignalFull(OAIHttpRequestWorker *worker);
    void solutionsEnumerateSolutionsSignalFull(OAIHttpRequestWorker *worker, OAISolutionsCollection summary);
    void solutionsGetConfigSignalFull(OAIHttpRequestWorker *worker, OAISolutionConfig summary);
    void solutionsGetSolutionSignalFull(OAIHttpRequestWorker *worker, OAISolution summary);
    void solutionsPatchSolutionSignalFull(OAIHttpRequestWorker *worker, OAISolution summary);
    void solutionsPutSolutionSignalFull(OAIHttpRequestWorker *worker, OAISolution summary);

    Q_DECL_DEPRECATED_X("Use solutionsCleanupSolutionDataSignalError() instead")
    void solutionsCleanupSolutionDataSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void solutionsCleanupSolutionDataSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use solutionsDeleteSolutionSignalError() instead")
    void solutionsDeleteSolutionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void solutionsDeleteSolutionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use solutionsEnumerateSolutionsSignalError() instead")
    void solutionsEnumerateSolutionsSignalE(OAISolutionsCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void solutionsEnumerateSolutionsSignalError(OAISolutionsCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use solutionsGetConfigSignalError() instead")
    void solutionsGetConfigSignalE(OAISolutionConfig summary, QNetworkReply::NetworkError error_type, QString error_str);
    void solutionsGetConfigSignalError(OAISolutionConfig summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use solutionsGetSolutionSignalError() instead")
    void solutionsGetSolutionSignalE(OAISolution summary, QNetworkReply::NetworkError error_type, QString error_str);
    void solutionsGetSolutionSignalError(OAISolution summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use solutionsPatchSolutionSignalError() instead")
    void solutionsPatchSolutionSignalE(OAISolution summary, QNetworkReply::NetworkError error_type, QString error_str);
    void solutionsPatchSolutionSignalError(OAISolution summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use solutionsPutSolutionSignalError() instead")
    void solutionsPutSolutionSignalE(OAISolution summary, QNetworkReply::NetworkError error_type, QString error_str);
    void solutionsPutSolutionSignalError(OAISolution summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use solutionsCleanupSolutionDataSignalErrorFull() instead")
    void solutionsCleanupSolutionDataSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void solutionsCleanupSolutionDataSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use solutionsDeleteSolutionSignalErrorFull() instead")
    void solutionsDeleteSolutionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void solutionsDeleteSolutionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use solutionsEnumerateSolutionsSignalErrorFull() instead")
    void solutionsEnumerateSolutionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void solutionsEnumerateSolutionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use solutionsGetConfigSignalErrorFull() instead")
    void solutionsGetConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void solutionsGetConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use solutionsGetSolutionSignalErrorFull() instead")
    void solutionsGetSolutionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void solutionsGetSolutionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use solutionsPatchSolutionSignalErrorFull() instead")
    void solutionsPatchSolutionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void solutionsPatchSolutionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use solutionsPutSolutionSignalErrorFull() instead")
    void solutionsPutSolutionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void solutionsPutSolutionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
