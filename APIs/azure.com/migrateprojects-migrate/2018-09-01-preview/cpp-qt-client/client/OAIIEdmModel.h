/**
 * Azure Migrate Hub
 * Migrate your workloads to Azure.
 *
 * The version of the OpenAPI document: 2018-09-01-preview
 * Contact: azuremigratehub@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIIEdmModel.h
 *
 * 
 */

#ifndef OAIIEdmModel_H
#define OAIIEdmModel_H

#include <QJsonObject>

#include "OAIIEdmEntityContainer.h"
#include "OAIIEdmSchemaElement.h"
#include "OAIIEdmVocabularyAnnotation.h"
#include "OAIObject.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIIEdmEntityContainer;
class OAIIEdmSchemaElement;
class OAIIEdmVocabularyAnnotation;

class OAIIEdmModel : public OAIObject {
public:
    OAIIEdmModel();
    OAIIEdmModel(QString json);
    ~OAIIEdmModel() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<QString> getDeclaredNamespaces() const;
    void setDeclaredNamespaces(const QList<QString> &declared_namespaces);
    bool is_declared_namespaces_Set() const;
    bool is_declared_namespaces_Valid() const;

    OAIObject getDirectValueAnnotationsManager() const;
    void setDirectValueAnnotationsManager(const OAIObject &direct_value_annotations_manager);
    bool is_direct_value_annotations_manager_Set() const;
    bool is_direct_value_annotations_manager_Valid() const;

    OAIIEdmEntityContainer getEntityContainer() const;
    void setEntityContainer(const OAIIEdmEntityContainer &entity_container);
    bool is_entity_container_Set() const;
    bool is_entity_container_Valid() const;

    QList<OAIIEdmModel> getReferencedModels() const;
    void setReferencedModels(const QList<OAIIEdmModel> &referenced_models);
    bool is_referenced_models_Set() const;
    bool is_referenced_models_Valid() const;

    QList<OAIIEdmSchemaElement> getSchemaElements() const;
    void setSchemaElements(const QList<OAIIEdmSchemaElement> &schema_elements);
    bool is_schema_elements_Set() const;
    bool is_schema_elements_Valid() const;

    QList<OAIIEdmVocabularyAnnotation> getVocabularyAnnotations() const;
    void setVocabularyAnnotations(const QList<OAIIEdmVocabularyAnnotation> &vocabulary_annotations);
    bool is_vocabulary_annotations_Set() const;
    bool is_vocabulary_annotations_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<QString> m_declared_namespaces;
    bool m_declared_namespaces_isSet;
    bool m_declared_namespaces_isValid;

    OAIObject m_direct_value_annotations_manager;
    bool m_direct_value_annotations_manager_isSet;
    bool m_direct_value_annotations_manager_isValid;

    OAIIEdmEntityContainer m_entity_container;
    bool m_entity_container_isSet;
    bool m_entity_container_isValid;

    QList<OAIIEdmModel> m_referenced_models;
    bool m_referenced_models_isSet;
    bool m_referenced_models_isValid;

    QList<OAIIEdmSchemaElement> m_schema_elements;
    bool m_schema_elements_isSet;
    bool m_schema_elements_isValid;

    QList<OAIIEdmVocabularyAnnotation> m_vocabulary_annotations;
    bool m_vocabulary_annotations_isSet;
    bool m_vocabulary_annotations_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIIEdmModel)

#endif // OAIIEdmModel_H
