/**
 * Azure Migrate Hub
 * Migrate your workloads to Azure.
 *
 * The version of the OpenAPI document: 2018-09-01-preview
 * Contact: azuremigratehub@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDatabaseAssessmentDetails.h
 *
 * Assessment properties that can be shared by various publishers.
 */

#ifndef OAIDatabaseAssessmentDetails_H
#define OAIDatabaseAssessmentDetails_H

#include <QJsonObject>

#include <QDateTime>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIDatabaseAssessmentDetails : public OAIObject {
public:
    OAIDatabaseAssessmentDetails();
    OAIDatabaseAssessmentDetails(QString json);
    ~OAIDatabaseAssessmentDetails() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAssessmentId() const;
    void setAssessmentId(const QString &assessment_id);
    bool is_assessment_id_Set() const;
    bool is_assessment_id_Valid() const;

    QString getAssessmentTargetType() const;
    void setAssessmentTargetType(const QString &assessment_target_type);
    bool is_assessment_target_type_Set() const;
    bool is_assessment_target_type_Valid() const;

    qint32 getBreakingChangesCount() const;
    void setBreakingChangesCount(const qint32 &breaking_changes_count);
    bool is_breaking_changes_count_Set() const;
    bool is_breaking_changes_count_Valid() const;

    QString getCompatibilityLevel() const;
    void setCompatibilityLevel(const QString &compatibility_level);
    bool is_compatibility_level_Set() const;
    bool is_compatibility_level_Valid() const;

    QString getDatabaseName() const;
    void setDatabaseName(const QString &database_name);
    bool is_database_name_Set() const;
    bool is_database_name_Valid() const;

    QString getDatabaseSizeInMb() const;
    void setDatabaseSizeInMb(const QString &database_size_in_mb);
    bool is_database_size_in_mb_Set() const;
    bool is_database_size_in_mb_Valid() const;

    QString getEnqueueTime() const;
    void setEnqueueTime(const QString &enqueue_time);
    bool is_enqueue_time_Set() const;
    bool is_enqueue_time_Valid() const;

    QMap<QString, QString> getExtendedInfo() const;
    void setExtendedInfo(const QMap<QString, QString> &extended_info);
    bool is_extended_info_Set() const;
    bool is_extended_info_Valid() const;

    QString getInstanceId() const;
    void setInstanceId(const QString &instance_id);
    bool is_instance_id_Set() const;
    bool is_instance_id_Valid() const;

    bool isIsReadyForMigration() const;
    void setIsReadyForMigration(const bool &is_ready_for_migration);
    bool is_is_ready_for_migration_Set() const;
    bool is_is_ready_for_migration_Valid() const;

    QDateTime getLastAssessedTime() const;
    void setLastAssessedTime(const QDateTime &last_assessed_time);
    bool is_last_assessed_time_Set() const;
    bool is_last_assessed_time_Valid() const;

    QDateTime getLastUpdatedTime() const;
    void setLastUpdatedTime(const QDateTime &last_updated_time);
    bool is_last_updated_time_Set() const;
    bool is_last_updated_time_Valid() const;

    qint32 getMigrationBlockersCount() const;
    void setMigrationBlockersCount(const qint32 &migration_blockers_count);
    bool is_migration_blockers_count_Set() const;
    bool is_migration_blockers_count_Valid() const;

    QString getSolutionName() const;
    void setSolutionName(const QString &solution_name);
    bool is_solution_name_Set() const;
    bool is_solution_name_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_assessment_id;
    bool m_assessment_id_isSet;
    bool m_assessment_id_isValid;

    QString m_assessment_target_type;
    bool m_assessment_target_type_isSet;
    bool m_assessment_target_type_isValid;

    qint32 m_breaking_changes_count;
    bool m_breaking_changes_count_isSet;
    bool m_breaking_changes_count_isValid;

    QString m_compatibility_level;
    bool m_compatibility_level_isSet;
    bool m_compatibility_level_isValid;

    QString m_database_name;
    bool m_database_name_isSet;
    bool m_database_name_isValid;

    QString m_database_size_in_mb;
    bool m_database_size_in_mb_isSet;
    bool m_database_size_in_mb_isValid;

    QString m_enqueue_time;
    bool m_enqueue_time_isSet;
    bool m_enqueue_time_isValid;

    QMap<QString, QString> m_extended_info;
    bool m_extended_info_isSet;
    bool m_extended_info_isValid;

    QString m_instance_id;
    bool m_instance_id_isSet;
    bool m_instance_id_isValid;

    bool m_is_ready_for_migration;
    bool m_is_ready_for_migration_isSet;
    bool m_is_ready_for_migration_isValid;

    QDateTime m_last_assessed_time;
    bool m_last_assessed_time_isSet;
    bool m_last_assessed_time_isValid;

    QDateTime m_last_updated_time;
    bool m_last_updated_time_isSet;
    bool m_last_updated_time_isValid;

    qint32 m_migration_blockers_count;
    bool m_migration_blockers_count_isSet;
    bool m_migration_blockers_count_isValid;

    QString m_solution_name;
    bool m_solution_name_isSet;
    bool m_solution_name_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDatabaseAssessmentDetails)

#endif // OAIDatabaseAssessmentDetails_H
