/**
 * Azure Migrate Hub
 * Migrate your workloads to Azure.
 *
 * The version of the OpenAPI document: 2018-09-01-preview
 * Contact: azuremigratehub@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIEdmNavigationPropertyBinding.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIEdmNavigationPropertyBinding::OAIIEdmNavigationPropertyBinding(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIEdmNavigationPropertyBinding::OAIIEdmNavigationPropertyBinding() {
    this->initializeModel();
}

OAIIEdmNavigationPropertyBinding::~OAIIEdmNavigationPropertyBinding() {}

void OAIIEdmNavigationPropertyBinding::initializeModel() {

    m_navigation_property_isSet = false;
    m_navigation_property_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_target_isSet = false;
    m_target_isValid = false;
}

void OAIIEdmNavigationPropertyBinding::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIEdmNavigationPropertyBinding::fromJsonObject(QJsonObject json) {

    m_navigation_property_isValid = ::OpenAPI::fromJsonValue(m_navigation_property, json[QString("navigationProperty")]);
    m_navigation_property_isSet = !json[QString("navigationProperty")].isNull() && m_navigation_property_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;

    m_target_isValid = ::OpenAPI::fromJsonValue(m_target, json[QString("target")]);
    m_target_isSet = !json[QString("target")].isNull() && m_target_isValid;
}

QString OAIIEdmNavigationPropertyBinding::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIEdmNavigationPropertyBinding::asJsonObject() const {
    QJsonObject obj;
    if (m_navigation_property.isSet()) {
        obj.insert(QString("navigationProperty"), ::OpenAPI::toJsonValue(m_navigation_property));
    }
    if (m_path.isSet()) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_target.isSet()) {
        obj.insert(QString("target"), ::OpenAPI::toJsonValue(m_target));
    }
    return obj;
}

OAIIEdmNavigationProperty OAIIEdmNavigationPropertyBinding::getNavigationProperty() const {
    return m_navigation_property;
}
void OAIIEdmNavigationPropertyBinding::setNavigationProperty(const OAIIEdmNavigationProperty &navigation_property) {
    m_navigation_property = navigation_property;
    m_navigation_property_isSet = true;
}

bool OAIIEdmNavigationPropertyBinding::is_navigation_property_Set() const{
    return m_navigation_property_isSet;
}

bool OAIIEdmNavigationPropertyBinding::is_navigation_property_Valid() const{
    return m_navigation_property_isValid;
}

OAIIEdmPathExpression OAIIEdmNavigationPropertyBinding::getPath() const {
    return m_path;
}
void OAIIEdmNavigationPropertyBinding::setPath(const OAIIEdmPathExpression &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIIEdmNavigationPropertyBinding::is_path_Set() const{
    return m_path_isSet;
}

bool OAIIEdmNavigationPropertyBinding::is_path_Valid() const{
    return m_path_isValid;
}

OAIIEdmNavigationSource OAIIEdmNavigationPropertyBinding::getTarget() const {
    return m_target;
}
void OAIIEdmNavigationPropertyBinding::setTarget(const OAIIEdmNavigationSource &target) {
    m_target = target;
    m_target_isSet = true;
}

bool OAIIEdmNavigationPropertyBinding::is_target_Set() const{
    return m_target_isSet;
}

bool OAIIEdmNavigationPropertyBinding::is_target_Valid() const{
    return m_target_isValid;
}

bool OAIIEdmNavigationPropertyBinding::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_navigation_property.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_path.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_target.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIEdmNavigationPropertyBinding::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
