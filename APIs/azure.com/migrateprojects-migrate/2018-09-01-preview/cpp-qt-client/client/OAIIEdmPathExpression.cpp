/**
 * Azure Migrate Hub
 * Migrate your workloads to Azure.
 *
 * The version of the OpenAPI document: 2018-09-01-preview
 * Contact: azuremigratehub@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIEdmPathExpression.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIEdmPathExpression::OAIIEdmPathExpression(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIEdmPathExpression::OAIIEdmPathExpression() {
    this->initializeModel();
}

OAIIEdmPathExpression::~OAIIEdmPathExpression() {}

void OAIIEdmPathExpression::initializeModel() {

    m_expression_kind_isSet = false;
    m_expression_kind_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_path_segments_isSet = false;
    m_path_segments_isValid = false;
}

void OAIIEdmPathExpression::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIEdmPathExpression::fromJsonObject(QJsonObject json) {

    m_expression_kind_isValid = ::OpenAPI::fromJsonValue(m_expression_kind, json[QString("expressionKind")]);
    m_expression_kind_isSet = !json[QString("expressionKind")].isNull() && m_expression_kind_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;

    m_path_segments_isValid = ::OpenAPI::fromJsonValue(m_path_segments, json[QString("pathSegments")]);
    m_path_segments_isSet = !json[QString("pathSegments")].isNull() && m_path_segments_isValid;
}

QString OAIIEdmPathExpression::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIEdmPathExpression::asJsonObject() const {
    QJsonObject obj;
    if (m_expression_kind_isSet) {
        obj.insert(QString("expressionKind"), ::OpenAPI::toJsonValue(m_expression_kind));
    }
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_path_segments.size() > 0) {
        obj.insert(QString("pathSegments"), ::OpenAPI::toJsonValue(m_path_segments));
    }
    return obj;
}

QString OAIIEdmPathExpression::getExpressionKind() const {
    return m_expression_kind;
}
void OAIIEdmPathExpression::setExpressionKind(const QString &expression_kind) {
    m_expression_kind = expression_kind;
    m_expression_kind_isSet = true;
}

bool OAIIEdmPathExpression::is_expression_kind_Set() const{
    return m_expression_kind_isSet;
}

bool OAIIEdmPathExpression::is_expression_kind_Valid() const{
    return m_expression_kind_isValid;
}

QString OAIIEdmPathExpression::getPath() const {
    return m_path;
}
void OAIIEdmPathExpression::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIIEdmPathExpression::is_path_Set() const{
    return m_path_isSet;
}

bool OAIIEdmPathExpression::is_path_Valid() const{
    return m_path_isValid;
}

QList<QString> OAIIEdmPathExpression::getPathSegments() const {
    return m_path_segments;
}
void OAIIEdmPathExpression::setPathSegments(const QList<QString> &path_segments) {
    m_path_segments = path_segments;
    m_path_segments_isSet = true;
}

bool OAIIEdmPathExpression::is_path_segments_Set() const{
    return m_path_segments_isSet;
}

bool OAIIEdmPathExpression::is_path_segments_Valid() const{
    return m_path_segments_isValid;
}

bool OAIIEdmPathExpression::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_expression_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_segments.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIEdmPathExpression::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
