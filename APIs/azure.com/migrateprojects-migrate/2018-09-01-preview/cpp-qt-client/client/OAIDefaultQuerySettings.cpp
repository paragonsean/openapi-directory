/**
 * Azure Migrate Hub
 * Migrate your workloads to Azure.
 *
 * The version of the OpenAPI document: 2018-09-01-preview
 * Contact: azuremigratehub@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDefaultQuerySettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDefaultQuerySettings::OAIDefaultQuerySettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDefaultQuerySettings::OAIDefaultQuerySettings() {
    this->initializeModel();
}

OAIDefaultQuerySettings::~OAIDefaultQuerySettings() {}

void OAIDefaultQuerySettings::initializeModel() {

    m_enable_count_isSet = false;
    m_enable_count_isValid = false;

    m_enable_expand_isSet = false;
    m_enable_expand_isValid = false;

    m_enable_filter_isSet = false;
    m_enable_filter_isValid = false;

    m_enable_order_by_isSet = false;
    m_enable_order_by_isValid = false;

    m_enable_select_isSet = false;
    m_enable_select_isValid = false;

    m_max_top_isSet = false;
    m_max_top_isValid = false;
}

void OAIDefaultQuerySettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDefaultQuerySettings::fromJsonObject(QJsonObject json) {

    m_enable_count_isValid = ::OpenAPI::fromJsonValue(m_enable_count, json[QString("enableCount")]);
    m_enable_count_isSet = !json[QString("enableCount")].isNull() && m_enable_count_isValid;

    m_enable_expand_isValid = ::OpenAPI::fromJsonValue(m_enable_expand, json[QString("enableExpand")]);
    m_enable_expand_isSet = !json[QString("enableExpand")].isNull() && m_enable_expand_isValid;

    m_enable_filter_isValid = ::OpenAPI::fromJsonValue(m_enable_filter, json[QString("enableFilter")]);
    m_enable_filter_isSet = !json[QString("enableFilter")].isNull() && m_enable_filter_isValid;

    m_enable_order_by_isValid = ::OpenAPI::fromJsonValue(m_enable_order_by, json[QString("enableOrderBy")]);
    m_enable_order_by_isSet = !json[QString("enableOrderBy")].isNull() && m_enable_order_by_isValid;

    m_enable_select_isValid = ::OpenAPI::fromJsonValue(m_enable_select, json[QString("enableSelect")]);
    m_enable_select_isSet = !json[QString("enableSelect")].isNull() && m_enable_select_isValid;

    m_max_top_isValid = ::OpenAPI::fromJsonValue(m_max_top, json[QString("maxTop")]);
    m_max_top_isSet = !json[QString("maxTop")].isNull() && m_max_top_isValid;
}

QString OAIDefaultQuerySettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDefaultQuerySettings::asJsonObject() const {
    QJsonObject obj;
    if (m_enable_count_isSet) {
        obj.insert(QString("enableCount"), ::OpenAPI::toJsonValue(m_enable_count));
    }
    if (m_enable_expand_isSet) {
        obj.insert(QString("enableExpand"), ::OpenAPI::toJsonValue(m_enable_expand));
    }
    if (m_enable_filter_isSet) {
        obj.insert(QString("enableFilter"), ::OpenAPI::toJsonValue(m_enable_filter));
    }
    if (m_enable_order_by_isSet) {
        obj.insert(QString("enableOrderBy"), ::OpenAPI::toJsonValue(m_enable_order_by));
    }
    if (m_enable_select_isSet) {
        obj.insert(QString("enableSelect"), ::OpenAPI::toJsonValue(m_enable_select));
    }
    if (m_max_top_isSet) {
        obj.insert(QString("maxTop"), ::OpenAPI::toJsonValue(m_max_top));
    }
    return obj;
}

bool OAIDefaultQuerySettings::isEnableCount() const {
    return m_enable_count;
}
void OAIDefaultQuerySettings::setEnableCount(const bool &enable_count) {
    m_enable_count = enable_count;
    m_enable_count_isSet = true;
}

bool OAIDefaultQuerySettings::is_enable_count_Set() const{
    return m_enable_count_isSet;
}

bool OAIDefaultQuerySettings::is_enable_count_Valid() const{
    return m_enable_count_isValid;
}

bool OAIDefaultQuerySettings::isEnableExpand() const {
    return m_enable_expand;
}
void OAIDefaultQuerySettings::setEnableExpand(const bool &enable_expand) {
    m_enable_expand = enable_expand;
    m_enable_expand_isSet = true;
}

bool OAIDefaultQuerySettings::is_enable_expand_Set() const{
    return m_enable_expand_isSet;
}

bool OAIDefaultQuerySettings::is_enable_expand_Valid() const{
    return m_enable_expand_isValid;
}

bool OAIDefaultQuerySettings::isEnableFilter() const {
    return m_enable_filter;
}
void OAIDefaultQuerySettings::setEnableFilter(const bool &enable_filter) {
    m_enable_filter = enable_filter;
    m_enable_filter_isSet = true;
}

bool OAIDefaultQuerySettings::is_enable_filter_Set() const{
    return m_enable_filter_isSet;
}

bool OAIDefaultQuerySettings::is_enable_filter_Valid() const{
    return m_enable_filter_isValid;
}

bool OAIDefaultQuerySettings::isEnableOrderBy() const {
    return m_enable_order_by;
}
void OAIDefaultQuerySettings::setEnableOrderBy(const bool &enable_order_by) {
    m_enable_order_by = enable_order_by;
    m_enable_order_by_isSet = true;
}

bool OAIDefaultQuerySettings::is_enable_order_by_Set() const{
    return m_enable_order_by_isSet;
}

bool OAIDefaultQuerySettings::is_enable_order_by_Valid() const{
    return m_enable_order_by_isValid;
}

bool OAIDefaultQuerySettings::isEnableSelect() const {
    return m_enable_select;
}
void OAIDefaultQuerySettings::setEnableSelect(const bool &enable_select) {
    m_enable_select = enable_select;
    m_enable_select_isSet = true;
}

bool OAIDefaultQuerySettings::is_enable_select_Set() const{
    return m_enable_select_isSet;
}

bool OAIDefaultQuerySettings::is_enable_select_Valid() const{
    return m_enable_select_isValid;
}

qint32 OAIDefaultQuerySettings::getMaxTop() const {
    return m_max_top;
}
void OAIDefaultQuerySettings::setMaxTop(const qint32 &max_top) {
    m_max_top = max_top;
    m_max_top_isSet = true;
}

bool OAIDefaultQuerySettings::is_max_top_Set() const{
    return m_max_top_isSet;
}

bool OAIDefaultQuerySettings::is_max_top_Valid() const{
    return m_max_top_isValid;
}

bool OAIDefaultQuerySettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_enable_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_expand_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_filter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_order_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_select_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_top_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDefaultQuerySettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
