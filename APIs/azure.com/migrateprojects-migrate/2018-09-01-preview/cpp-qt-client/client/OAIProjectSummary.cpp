/**
 * Azure Migrate Hub
 * Migrate your workloads to Azure.
 *
 * The version of the OpenAPI document: 2018-09-01-preview
 * Contact: azuremigratehub@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProjectSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProjectSummary::OAIProjectSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProjectSummary::OAIProjectSummary() {
    this->initializeModel();
}

OAIProjectSummary::~OAIProjectSummary() {}

void OAIProjectSummary::initializeModel() {

    m_extended_summary_isSet = false;
    m_extended_summary_isValid = false;

    m_instance_type_isSet = false;
    m_instance_type_isValid = false;

    m_last_summary_refreshed_time_isSet = false;
    m_last_summary_refreshed_time_isValid = false;

    m_refresh_summary_state_isSet = false;
    m_refresh_summary_state_isValid = false;
}

void OAIProjectSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProjectSummary::fromJsonObject(QJsonObject json) {

    m_extended_summary_isValid = ::OpenAPI::fromJsonValue(m_extended_summary, json[QString("extendedSummary")]);
    m_extended_summary_isSet = !json[QString("extendedSummary")].isNull() && m_extended_summary_isValid;

    m_instance_type_isValid = ::OpenAPI::fromJsonValue(m_instance_type, json[QString("instanceType")]);
    m_instance_type_isSet = !json[QString("instanceType")].isNull() && m_instance_type_isValid;

    m_last_summary_refreshed_time_isValid = ::OpenAPI::fromJsonValue(m_last_summary_refreshed_time, json[QString("lastSummaryRefreshedTime")]);
    m_last_summary_refreshed_time_isSet = !json[QString("lastSummaryRefreshedTime")].isNull() && m_last_summary_refreshed_time_isValid;

    m_refresh_summary_state_isValid = ::OpenAPI::fromJsonValue(m_refresh_summary_state, json[QString("refreshSummaryState")]);
    m_refresh_summary_state_isSet = !json[QString("refreshSummaryState")].isNull() && m_refresh_summary_state_isValid;
}

QString OAIProjectSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProjectSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_extended_summary.size() > 0) {
        obj.insert(QString("extendedSummary"), ::OpenAPI::toJsonValue(m_extended_summary));
    }
    if (m_instance_type_isSet) {
        obj.insert(QString("instanceType"), ::OpenAPI::toJsonValue(m_instance_type));
    }
    if (m_last_summary_refreshed_time_isSet) {
        obj.insert(QString("lastSummaryRefreshedTime"), ::OpenAPI::toJsonValue(m_last_summary_refreshed_time));
    }
    if (m_refresh_summary_state_isSet) {
        obj.insert(QString("refreshSummaryState"), ::OpenAPI::toJsonValue(m_refresh_summary_state));
    }
    return obj;
}

QMap<QString, QString> OAIProjectSummary::getExtendedSummary() const {
    return m_extended_summary;
}
void OAIProjectSummary::setExtendedSummary(const QMap<QString, QString> &extended_summary) {
    m_extended_summary = extended_summary;
    m_extended_summary_isSet = true;
}

bool OAIProjectSummary::is_extended_summary_Set() const{
    return m_extended_summary_isSet;
}

bool OAIProjectSummary::is_extended_summary_Valid() const{
    return m_extended_summary_isValid;
}

QString OAIProjectSummary::getInstanceType() const {
    return m_instance_type;
}
void OAIProjectSummary::setInstanceType(const QString &instance_type) {
    m_instance_type = instance_type;
    m_instance_type_isSet = true;
}

bool OAIProjectSummary::is_instance_type_Set() const{
    return m_instance_type_isSet;
}

bool OAIProjectSummary::is_instance_type_Valid() const{
    return m_instance_type_isValid;
}

QDateTime OAIProjectSummary::getLastSummaryRefreshedTime() const {
    return m_last_summary_refreshed_time;
}
void OAIProjectSummary::setLastSummaryRefreshedTime(const QDateTime &last_summary_refreshed_time) {
    m_last_summary_refreshed_time = last_summary_refreshed_time;
    m_last_summary_refreshed_time_isSet = true;
}

bool OAIProjectSummary::is_last_summary_refreshed_time_Set() const{
    return m_last_summary_refreshed_time_isSet;
}

bool OAIProjectSummary::is_last_summary_refreshed_time_Valid() const{
    return m_last_summary_refreshed_time_isValid;
}

QString OAIProjectSummary::getRefreshSummaryState() const {
    return m_refresh_summary_state;
}
void OAIProjectSummary::setRefreshSummaryState(const QString &refresh_summary_state) {
    m_refresh_summary_state = refresh_summary_state;
    m_refresh_summary_state_isSet = true;
}

bool OAIProjectSummary::is_refresh_summary_state_Set() const{
    return m_refresh_summary_state_isSet;
}

bool OAIProjectSummary::is_refresh_summary_state_Valid() const{
    return m_refresh_summary_state_isValid;
}

bool OAIProjectSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_extended_summary.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_summary_refreshed_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_refresh_summary_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProjectSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
