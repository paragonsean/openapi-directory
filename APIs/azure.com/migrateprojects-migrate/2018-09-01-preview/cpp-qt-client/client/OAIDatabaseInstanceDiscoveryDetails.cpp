/**
 * Azure Migrate Hub
 * Migrate your workloads to Azure.
 *
 * The version of the OpenAPI document: 2018-09-01-preview
 * Contact: azuremigratehub@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDatabaseInstanceDiscoveryDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDatabaseInstanceDiscoveryDetails::OAIDatabaseInstanceDiscoveryDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDatabaseInstanceDiscoveryDetails::OAIDatabaseInstanceDiscoveryDetails() {
    this->initializeModel();
}

OAIDatabaseInstanceDiscoveryDetails::~OAIDatabaseInstanceDiscoveryDetails() {}

void OAIDatabaseInstanceDiscoveryDetails::initializeModel() {

    m_enqueue_time_isSet = false;
    m_enqueue_time_isValid = false;

    m_extended_info_isSet = false;
    m_extended_info_isValid = false;

    m_host_name_isSet = false;
    m_host_name_isValid = false;

    m_instance_id_isSet = false;
    m_instance_id_isValid = false;

    m_instance_name_isSet = false;
    m_instance_name_isValid = false;

    m_instance_type_isSet = false;
    m_instance_type_isValid = false;

    m_instance_version_isSet = false;
    m_instance_version_isValid = false;

    m_ip_address_isSet = false;
    m_ip_address_isValid = false;

    m_last_updated_time_isSet = false;
    m_last_updated_time_isValid = false;

    m_port_number_isSet = false;
    m_port_number_isValid = false;

    m_solution_name_isSet = false;
    m_solution_name_isValid = false;
}

void OAIDatabaseInstanceDiscoveryDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDatabaseInstanceDiscoveryDetails::fromJsonObject(QJsonObject json) {

    m_enqueue_time_isValid = ::OpenAPI::fromJsonValue(m_enqueue_time, json[QString("enqueueTime")]);
    m_enqueue_time_isSet = !json[QString("enqueueTime")].isNull() && m_enqueue_time_isValid;

    m_extended_info_isValid = ::OpenAPI::fromJsonValue(m_extended_info, json[QString("extendedInfo")]);
    m_extended_info_isSet = !json[QString("extendedInfo")].isNull() && m_extended_info_isValid;

    m_host_name_isValid = ::OpenAPI::fromJsonValue(m_host_name, json[QString("hostName")]);
    m_host_name_isSet = !json[QString("hostName")].isNull() && m_host_name_isValid;

    m_instance_id_isValid = ::OpenAPI::fromJsonValue(m_instance_id, json[QString("instanceId")]);
    m_instance_id_isSet = !json[QString("instanceId")].isNull() && m_instance_id_isValid;

    m_instance_name_isValid = ::OpenAPI::fromJsonValue(m_instance_name, json[QString("instanceName")]);
    m_instance_name_isSet = !json[QString("instanceName")].isNull() && m_instance_name_isValid;

    m_instance_type_isValid = ::OpenAPI::fromJsonValue(m_instance_type, json[QString("instanceType")]);
    m_instance_type_isSet = !json[QString("instanceType")].isNull() && m_instance_type_isValid;

    m_instance_version_isValid = ::OpenAPI::fromJsonValue(m_instance_version, json[QString("instanceVersion")]);
    m_instance_version_isSet = !json[QString("instanceVersion")].isNull() && m_instance_version_isValid;

    m_ip_address_isValid = ::OpenAPI::fromJsonValue(m_ip_address, json[QString("ipAddress")]);
    m_ip_address_isSet = !json[QString("ipAddress")].isNull() && m_ip_address_isValid;

    m_last_updated_time_isValid = ::OpenAPI::fromJsonValue(m_last_updated_time, json[QString("lastUpdatedTime")]);
    m_last_updated_time_isSet = !json[QString("lastUpdatedTime")].isNull() && m_last_updated_time_isValid;

    m_port_number_isValid = ::OpenAPI::fromJsonValue(m_port_number, json[QString("portNumber")]);
    m_port_number_isSet = !json[QString("portNumber")].isNull() && m_port_number_isValid;

    m_solution_name_isValid = ::OpenAPI::fromJsonValue(m_solution_name, json[QString("solutionName")]);
    m_solution_name_isSet = !json[QString("solutionName")].isNull() && m_solution_name_isValid;
}

QString OAIDatabaseInstanceDiscoveryDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDatabaseInstanceDiscoveryDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_enqueue_time_isSet) {
        obj.insert(QString("enqueueTime"), ::OpenAPI::toJsonValue(m_enqueue_time));
    }
    if (m_extended_info.size() > 0) {
        obj.insert(QString("extendedInfo"), ::OpenAPI::toJsonValue(m_extended_info));
    }
    if (m_host_name_isSet) {
        obj.insert(QString("hostName"), ::OpenAPI::toJsonValue(m_host_name));
    }
    if (m_instance_id_isSet) {
        obj.insert(QString("instanceId"), ::OpenAPI::toJsonValue(m_instance_id));
    }
    if (m_instance_name_isSet) {
        obj.insert(QString("instanceName"), ::OpenAPI::toJsonValue(m_instance_name));
    }
    if (m_instance_type_isSet) {
        obj.insert(QString("instanceType"), ::OpenAPI::toJsonValue(m_instance_type));
    }
    if (m_instance_version_isSet) {
        obj.insert(QString("instanceVersion"), ::OpenAPI::toJsonValue(m_instance_version));
    }
    if (m_ip_address_isSet) {
        obj.insert(QString("ipAddress"), ::OpenAPI::toJsonValue(m_ip_address));
    }
    if (m_last_updated_time_isSet) {
        obj.insert(QString("lastUpdatedTime"), ::OpenAPI::toJsonValue(m_last_updated_time));
    }
    if (m_port_number_isSet) {
        obj.insert(QString("portNumber"), ::OpenAPI::toJsonValue(m_port_number));
    }
    if (m_solution_name_isSet) {
        obj.insert(QString("solutionName"), ::OpenAPI::toJsonValue(m_solution_name));
    }
    return obj;
}

QString OAIDatabaseInstanceDiscoveryDetails::getEnqueueTime() const {
    return m_enqueue_time;
}
void OAIDatabaseInstanceDiscoveryDetails::setEnqueueTime(const QString &enqueue_time) {
    m_enqueue_time = enqueue_time;
    m_enqueue_time_isSet = true;
}

bool OAIDatabaseInstanceDiscoveryDetails::is_enqueue_time_Set() const{
    return m_enqueue_time_isSet;
}

bool OAIDatabaseInstanceDiscoveryDetails::is_enqueue_time_Valid() const{
    return m_enqueue_time_isValid;
}

QMap<QString, QString> OAIDatabaseInstanceDiscoveryDetails::getExtendedInfo() const {
    return m_extended_info;
}
void OAIDatabaseInstanceDiscoveryDetails::setExtendedInfo(const QMap<QString, QString> &extended_info) {
    m_extended_info = extended_info;
    m_extended_info_isSet = true;
}

bool OAIDatabaseInstanceDiscoveryDetails::is_extended_info_Set() const{
    return m_extended_info_isSet;
}

bool OAIDatabaseInstanceDiscoveryDetails::is_extended_info_Valid() const{
    return m_extended_info_isValid;
}

QString OAIDatabaseInstanceDiscoveryDetails::getHostName() const {
    return m_host_name;
}
void OAIDatabaseInstanceDiscoveryDetails::setHostName(const QString &host_name) {
    m_host_name = host_name;
    m_host_name_isSet = true;
}

bool OAIDatabaseInstanceDiscoveryDetails::is_host_name_Set() const{
    return m_host_name_isSet;
}

bool OAIDatabaseInstanceDiscoveryDetails::is_host_name_Valid() const{
    return m_host_name_isValid;
}

QString OAIDatabaseInstanceDiscoveryDetails::getInstanceId() const {
    return m_instance_id;
}
void OAIDatabaseInstanceDiscoveryDetails::setInstanceId(const QString &instance_id) {
    m_instance_id = instance_id;
    m_instance_id_isSet = true;
}

bool OAIDatabaseInstanceDiscoveryDetails::is_instance_id_Set() const{
    return m_instance_id_isSet;
}

bool OAIDatabaseInstanceDiscoveryDetails::is_instance_id_Valid() const{
    return m_instance_id_isValid;
}

QString OAIDatabaseInstanceDiscoveryDetails::getInstanceName() const {
    return m_instance_name;
}
void OAIDatabaseInstanceDiscoveryDetails::setInstanceName(const QString &instance_name) {
    m_instance_name = instance_name;
    m_instance_name_isSet = true;
}

bool OAIDatabaseInstanceDiscoveryDetails::is_instance_name_Set() const{
    return m_instance_name_isSet;
}

bool OAIDatabaseInstanceDiscoveryDetails::is_instance_name_Valid() const{
    return m_instance_name_isValid;
}

QString OAIDatabaseInstanceDiscoveryDetails::getInstanceType() const {
    return m_instance_type;
}
void OAIDatabaseInstanceDiscoveryDetails::setInstanceType(const QString &instance_type) {
    m_instance_type = instance_type;
    m_instance_type_isSet = true;
}

bool OAIDatabaseInstanceDiscoveryDetails::is_instance_type_Set() const{
    return m_instance_type_isSet;
}

bool OAIDatabaseInstanceDiscoveryDetails::is_instance_type_Valid() const{
    return m_instance_type_isValid;
}

QString OAIDatabaseInstanceDiscoveryDetails::getInstanceVersion() const {
    return m_instance_version;
}
void OAIDatabaseInstanceDiscoveryDetails::setInstanceVersion(const QString &instance_version) {
    m_instance_version = instance_version;
    m_instance_version_isSet = true;
}

bool OAIDatabaseInstanceDiscoveryDetails::is_instance_version_Set() const{
    return m_instance_version_isSet;
}

bool OAIDatabaseInstanceDiscoveryDetails::is_instance_version_Valid() const{
    return m_instance_version_isValid;
}

QString OAIDatabaseInstanceDiscoveryDetails::getIpAddress() const {
    return m_ip_address;
}
void OAIDatabaseInstanceDiscoveryDetails::setIpAddress(const QString &ip_address) {
    m_ip_address = ip_address;
    m_ip_address_isSet = true;
}

bool OAIDatabaseInstanceDiscoveryDetails::is_ip_address_Set() const{
    return m_ip_address_isSet;
}

bool OAIDatabaseInstanceDiscoveryDetails::is_ip_address_Valid() const{
    return m_ip_address_isValid;
}

QDateTime OAIDatabaseInstanceDiscoveryDetails::getLastUpdatedTime() const {
    return m_last_updated_time;
}
void OAIDatabaseInstanceDiscoveryDetails::setLastUpdatedTime(const QDateTime &last_updated_time) {
    m_last_updated_time = last_updated_time;
    m_last_updated_time_isSet = true;
}

bool OAIDatabaseInstanceDiscoveryDetails::is_last_updated_time_Set() const{
    return m_last_updated_time_isSet;
}

bool OAIDatabaseInstanceDiscoveryDetails::is_last_updated_time_Valid() const{
    return m_last_updated_time_isValid;
}

qint32 OAIDatabaseInstanceDiscoveryDetails::getPortNumber() const {
    return m_port_number;
}
void OAIDatabaseInstanceDiscoveryDetails::setPortNumber(const qint32 &port_number) {
    m_port_number = port_number;
    m_port_number_isSet = true;
}

bool OAIDatabaseInstanceDiscoveryDetails::is_port_number_Set() const{
    return m_port_number_isSet;
}

bool OAIDatabaseInstanceDiscoveryDetails::is_port_number_Valid() const{
    return m_port_number_isValid;
}

QString OAIDatabaseInstanceDiscoveryDetails::getSolutionName() const {
    return m_solution_name;
}
void OAIDatabaseInstanceDiscoveryDetails::setSolutionName(const QString &solution_name) {
    m_solution_name = solution_name;
    m_solution_name_isSet = true;
}

bool OAIDatabaseInstanceDiscoveryDetails::is_solution_name_Set() const{
    return m_solution_name_isSet;
}

bool OAIDatabaseInstanceDiscoveryDetails::is_solution_name_Valid() const{
    return m_solution_name_isValid;
}

bool OAIDatabaseInstanceDiscoveryDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_enqueue_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extended_info.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_host_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_port_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_solution_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDatabaseInstanceDiscoveryDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
