/**
 * Azure Migrate Hub
 * Migrate your workloads to Azure.
 *
 * The version of the OpenAPI document: 2018-09-01-preview
 * Contact: azuremigratehub@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDatabaseInstanceProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDatabaseInstanceProperties::OAIDatabaseInstanceProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDatabaseInstanceProperties::OAIDatabaseInstanceProperties() {
    this->initializeModel();
}

OAIDatabaseInstanceProperties::~OAIDatabaseInstanceProperties() {}

void OAIDatabaseInstanceProperties::initializeModel() {

    m_discovery_data_isSet = false;
    m_discovery_data_isValid = false;

    m_last_updated_time_isSet = false;
    m_last_updated_time_isValid = false;

    m_summary_isSet = false;
    m_summary_isValid = false;
}

void OAIDatabaseInstanceProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDatabaseInstanceProperties::fromJsonObject(QJsonObject json) {

    m_discovery_data_isValid = ::OpenAPI::fromJsonValue(m_discovery_data, json[QString("discoveryData")]);
    m_discovery_data_isSet = !json[QString("discoveryData")].isNull() && m_discovery_data_isValid;

    m_last_updated_time_isValid = ::OpenAPI::fromJsonValue(m_last_updated_time, json[QString("lastUpdatedTime")]);
    m_last_updated_time_isSet = !json[QString("lastUpdatedTime")].isNull() && m_last_updated_time_isValid;

    m_summary_isValid = ::OpenAPI::fromJsonValue(m_summary, json[QString("summary")]);
    m_summary_isSet = !json[QString("summary")].isNull() && m_summary_isValid;
}

QString OAIDatabaseInstanceProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDatabaseInstanceProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_discovery_data.size() > 0) {
        obj.insert(QString("discoveryData"), ::OpenAPI::toJsonValue(m_discovery_data));
    }
    if (m_last_updated_time_isSet) {
        obj.insert(QString("lastUpdatedTime"), ::OpenAPI::toJsonValue(m_last_updated_time));
    }
    if (m_summary.size() > 0) {
        obj.insert(QString("summary"), ::OpenAPI::toJsonValue(m_summary));
    }
    return obj;
}

QList<OAIDatabaseInstanceDiscoveryDetails> OAIDatabaseInstanceProperties::getDiscoveryData() const {
    return m_discovery_data;
}
void OAIDatabaseInstanceProperties::setDiscoveryData(const QList<OAIDatabaseInstanceDiscoveryDetails> &discovery_data) {
    m_discovery_data = discovery_data;
    m_discovery_data_isSet = true;
}

bool OAIDatabaseInstanceProperties::is_discovery_data_Set() const{
    return m_discovery_data_isSet;
}

bool OAIDatabaseInstanceProperties::is_discovery_data_Valid() const{
    return m_discovery_data_isValid;
}

QDateTime OAIDatabaseInstanceProperties::getLastUpdatedTime() const {
    return m_last_updated_time;
}
void OAIDatabaseInstanceProperties::setLastUpdatedTime(const QDateTime &last_updated_time) {
    m_last_updated_time = last_updated_time;
    m_last_updated_time_isSet = true;
}

bool OAIDatabaseInstanceProperties::is_last_updated_time_Set() const{
    return m_last_updated_time_isSet;
}

bool OAIDatabaseInstanceProperties::is_last_updated_time_Valid() const{
    return m_last_updated_time_isValid;
}

QMap<QString, OAIDatabaseInstanceSummary> OAIDatabaseInstanceProperties::getSummary() const {
    return m_summary;
}
void OAIDatabaseInstanceProperties::setSummary(const QMap<QString, OAIDatabaseInstanceSummary> &summary) {
    m_summary = summary;
    m_summary_isSet = true;
}

bool OAIDatabaseInstanceProperties::is_summary_Set() const{
    return m_summary_isSet;
}

bool OAIDatabaseInstanceProperties::is_summary_Valid() const{
    return m_summary_isValid;
}

bool OAIDatabaseInstanceProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_discovery_data.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_summary.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDatabaseInstanceProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
