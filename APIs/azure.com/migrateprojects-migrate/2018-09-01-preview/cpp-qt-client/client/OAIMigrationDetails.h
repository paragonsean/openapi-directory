/**
 * Azure Migrate Hub
 * Migrate your workloads to Azure.
 *
 * The version of the OpenAPI document: 2018-09-01-preview
 * Contact: azuremigratehub@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIMigrationDetails.h
 *
 * Migration properties that can be shared by various publishers.
 */

#ifndef OAIMigrationDetails_H
#define OAIMigrationDetails_H

#include <QJsonObject>

#include <QDateTime>
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIMigrationDetails : public OAIObject {
public:
    OAIMigrationDetails();
    OAIMigrationDetails(QString json);
    ~OAIMigrationDetails() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getBiosId() const;
    void setBiosId(const QString &bios_id);
    bool is_bios_id_Set() const;
    bool is_bios_id_Valid() const;

    QString getEnqueueTime() const;
    void setEnqueueTime(const QString &enqueue_time);
    bool is_enqueue_time_Set() const;
    bool is_enqueue_time_Valid() const;

    QMap<QString, QString> getExtendedInfo() const;
    void setExtendedInfo(const QMap<QString, QString> &extended_info);
    bool is_extended_info_Set() const;
    bool is_extended_info_Valid() const;

    QString getFabricType() const;
    void setFabricType(const QString &fabric_type);
    bool is_fabric_type_Set() const;
    bool is_fabric_type_Valid() const;

    QString getFqdn() const;
    void setFqdn(const QString &fqdn);
    bool is_fqdn_Set() const;
    bool is_fqdn_Valid() const;

    QList<QString> getIpAddresses() const;
    void setIpAddresses(const QList<QString> &ip_addresses);
    bool is_ip_addresses_Set() const;
    bool is_ip_addresses_Valid() const;

    QDateTime getLastUpdatedTime() const;
    void setLastUpdatedTime(const QDateTime &last_updated_time);
    bool is_last_updated_time_Set() const;
    bool is_last_updated_time_Valid() const;

    QList<QString> getMacAddresses() const;
    void setMacAddresses(const QList<QString> &mac_addresses);
    bool is_mac_addresses_Set() const;
    bool is_mac_addresses_Valid() const;

    QString getMachineId() const;
    void setMachineId(const QString &machine_id);
    bool is_machine_id_Set() const;
    bool is_machine_id_Valid() const;

    QString getMachineManagerId() const;
    void setMachineManagerId(const QString &machine_manager_id);
    bool is_machine_manager_id_Set() const;
    bool is_machine_manager_id_Valid() const;

    QString getMachineName() const;
    void setMachineName(const QString &machine_name);
    bool is_machine_name_Set() const;
    bool is_machine_name_Valid() const;

    QString getMigrationPhase() const;
    void setMigrationPhase(const QString &migration_phase);
    bool is_migration_phase_Set() const;
    bool is_migration_phase_Valid() const;

    bool isMigrationTested() const;
    void setMigrationTested(const bool &migration_tested);
    bool is_migration_tested_Set() const;
    bool is_migration_tested_Valid() const;

    qint32 getReplicationProgressPercentage() const;
    void setReplicationProgressPercentage(const qint32 &replication_progress_percentage);
    bool is_replication_progress_percentage_Set() const;
    bool is_replication_progress_percentage_Valid() const;

    QString getSolutionName() const;
    void setSolutionName(const QString &solution_name);
    bool is_solution_name_Set() const;
    bool is_solution_name_Valid() const;

    QString getTargetVmArmId() const;
    void setTargetVmArmId(const QString &target_vm_arm_id);
    bool is_target_vm_arm_id_Set() const;
    bool is_target_vm_arm_id_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_bios_id;
    bool m_bios_id_isSet;
    bool m_bios_id_isValid;

    QString m_enqueue_time;
    bool m_enqueue_time_isSet;
    bool m_enqueue_time_isValid;

    QMap<QString, QString> m_extended_info;
    bool m_extended_info_isSet;
    bool m_extended_info_isValid;

    QString m_fabric_type;
    bool m_fabric_type_isSet;
    bool m_fabric_type_isValid;

    QString m_fqdn;
    bool m_fqdn_isSet;
    bool m_fqdn_isValid;

    QList<QString> m_ip_addresses;
    bool m_ip_addresses_isSet;
    bool m_ip_addresses_isValid;

    QDateTime m_last_updated_time;
    bool m_last_updated_time_isSet;
    bool m_last_updated_time_isValid;

    QList<QString> m_mac_addresses;
    bool m_mac_addresses_isSet;
    bool m_mac_addresses_isValid;

    QString m_machine_id;
    bool m_machine_id_isSet;
    bool m_machine_id_isValid;

    QString m_machine_manager_id;
    bool m_machine_manager_id_isSet;
    bool m_machine_manager_id_isValid;

    QString m_machine_name;
    bool m_machine_name_isSet;
    bool m_machine_name_isValid;

    QString m_migration_phase;
    bool m_migration_phase_isSet;
    bool m_migration_phase_isValid;

    bool m_migration_tested;
    bool m_migration_tested_isSet;
    bool m_migration_tested_isValid;

    qint32 m_replication_progress_percentage;
    bool m_replication_progress_percentage_isSet;
    bool m_replication_progress_percentage_isValid;

    QString m_solution_name;
    bool m_solution_name_isSet;
    bool m_solution_name_isValid;

    QString m_target_vm_arm_id;
    bool m_target_vm_arm_id_isSet;
    bool m_target_vm_arm_id_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIMigrationDetails)

#endif // OAIMigrationDetails_H
