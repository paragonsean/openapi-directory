/**
 * Azure Migrate Hub
 * Migrate your workloads to Azure.
 *
 * The version of the OpenAPI document: 2018-09-01-preview
 * Contact: azuremigratehub@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDiscoveryDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDiscoveryDetails::OAIDiscoveryDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDiscoveryDetails::OAIDiscoveryDetails() {
    this->initializeModel();
}

OAIDiscoveryDetails::~OAIDiscoveryDetails() {}

void OAIDiscoveryDetails::initializeModel() {

    m_bios_id_isSet = false;
    m_bios_id_isValid = false;

    m_enqueue_time_isSet = false;
    m_enqueue_time_isValid = false;

    m_extended_info_isSet = false;
    m_extended_info_isValid = false;

    m_fabric_type_isSet = false;
    m_fabric_type_isValid = false;

    m_fqdn_isSet = false;
    m_fqdn_isValid = false;

    m_ip_addresses_isSet = false;
    m_ip_addresses_isValid = false;

    m_last_updated_time_isSet = false;
    m_last_updated_time_isValid = false;

    m_mac_addresses_isSet = false;
    m_mac_addresses_isValid = false;

    m_machine_id_isSet = false;
    m_machine_id_isValid = false;

    m_machine_manager_id_isSet = false;
    m_machine_manager_id_isValid = false;

    m_machine_name_isSet = false;
    m_machine_name_isValid = false;

    m_os_name_isSet = false;
    m_os_name_isValid = false;

    m_os_type_isSet = false;
    m_os_type_isValid = false;

    m_os_version_isSet = false;
    m_os_version_isValid = false;

    m_solution_name_isSet = false;
    m_solution_name_isValid = false;
}

void OAIDiscoveryDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDiscoveryDetails::fromJsonObject(QJsonObject json) {

    m_bios_id_isValid = ::OpenAPI::fromJsonValue(m_bios_id, json[QString("biosId")]);
    m_bios_id_isSet = !json[QString("biosId")].isNull() && m_bios_id_isValid;

    m_enqueue_time_isValid = ::OpenAPI::fromJsonValue(m_enqueue_time, json[QString("enqueueTime")]);
    m_enqueue_time_isSet = !json[QString("enqueueTime")].isNull() && m_enqueue_time_isValid;

    m_extended_info_isValid = ::OpenAPI::fromJsonValue(m_extended_info, json[QString("extendedInfo")]);
    m_extended_info_isSet = !json[QString("extendedInfo")].isNull() && m_extended_info_isValid;

    m_fabric_type_isValid = ::OpenAPI::fromJsonValue(m_fabric_type, json[QString("fabricType")]);
    m_fabric_type_isSet = !json[QString("fabricType")].isNull() && m_fabric_type_isValid;

    m_fqdn_isValid = ::OpenAPI::fromJsonValue(m_fqdn, json[QString("fqdn")]);
    m_fqdn_isSet = !json[QString("fqdn")].isNull() && m_fqdn_isValid;

    m_ip_addresses_isValid = ::OpenAPI::fromJsonValue(m_ip_addresses, json[QString("ipAddresses")]);
    m_ip_addresses_isSet = !json[QString("ipAddresses")].isNull() && m_ip_addresses_isValid;

    m_last_updated_time_isValid = ::OpenAPI::fromJsonValue(m_last_updated_time, json[QString("lastUpdatedTime")]);
    m_last_updated_time_isSet = !json[QString("lastUpdatedTime")].isNull() && m_last_updated_time_isValid;

    m_mac_addresses_isValid = ::OpenAPI::fromJsonValue(m_mac_addresses, json[QString("macAddresses")]);
    m_mac_addresses_isSet = !json[QString("macAddresses")].isNull() && m_mac_addresses_isValid;

    m_machine_id_isValid = ::OpenAPI::fromJsonValue(m_machine_id, json[QString("machineId")]);
    m_machine_id_isSet = !json[QString("machineId")].isNull() && m_machine_id_isValid;

    m_machine_manager_id_isValid = ::OpenAPI::fromJsonValue(m_machine_manager_id, json[QString("machineManagerId")]);
    m_machine_manager_id_isSet = !json[QString("machineManagerId")].isNull() && m_machine_manager_id_isValid;

    m_machine_name_isValid = ::OpenAPI::fromJsonValue(m_machine_name, json[QString("machineName")]);
    m_machine_name_isSet = !json[QString("machineName")].isNull() && m_machine_name_isValid;

    m_os_name_isValid = ::OpenAPI::fromJsonValue(m_os_name, json[QString("osName")]);
    m_os_name_isSet = !json[QString("osName")].isNull() && m_os_name_isValid;

    m_os_type_isValid = ::OpenAPI::fromJsonValue(m_os_type, json[QString("osType")]);
    m_os_type_isSet = !json[QString("osType")].isNull() && m_os_type_isValid;

    m_os_version_isValid = ::OpenAPI::fromJsonValue(m_os_version, json[QString("osVersion")]);
    m_os_version_isSet = !json[QString("osVersion")].isNull() && m_os_version_isValid;

    m_solution_name_isValid = ::OpenAPI::fromJsonValue(m_solution_name, json[QString("solutionName")]);
    m_solution_name_isSet = !json[QString("solutionName")].isNull() && m_solution_name_isValid;
}

QString OAIDiscoveryDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDiscoveryDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_bios_id_isSet) {
        obj.insert(QString("biosId"), ::OpenAPI::toJsonValue(m_bios_id));
    }
    if (m_enqueue_time_isSet) {
        obj.insert(QString("enqueueTime"), ::OpenAPI::toJsonValue(m_enqueue_time));
    }
    if (m_extended_info.size() > 0) {
        obj.insert(QString("extendedInfo"), ::OpenAPI::toJsonValue(m_extended_info));
    }
    if (m_fabric_type_isSet) {
        obj.insert(QString("fabricType"), ::OpenAPI::toJsonValue(m_fabric_type));
    }
    if (m_fqdn_isSet) {
        obj.insert(QString("fqdn"), ::OpenAPI::toJsonValue(m_fqdn));
    }
    if (m_ip_addresses.size() > 0) {
        obj.insert(QString("ipAddresses"), ::OpenAPI::toJsonValue(m_ip_addresses));
    }
    if (m_last_updated_time_isSet) {
        obj.insert(QString("lastUpdatedTime"), ::OpenAPI::toJsonValue(m_last_updated_time));
    }
    if (m_mac_addresses.size() > 0) {
        obj.insert(QString("macAddresses"), ::OpenAPI::toJsonValue(m_mac_addresses));
    }
    if (m_machine_id_isSet) {
        obj.insert(QString("machineId"), ::OpenAPI::toJsonValue(m_machine_id));
    }
    if (m_machine_manager_id_isSet) {
        obj.insert(QString("machineManagerId"), ::OpenAPI::toJsonValue(m_machine_manager_id));
    }
    if (m_machine_name_isSet) {
        obj.insert(QString("machineName"), ::OpenAPI::toJsonValue(m_machine_name));
    }
    if (m_os_name_isSet) {
        obj.insert(QString("osName"), ::OpenAPI::toJsonValue(m_os_name));
    }
    if (m_os_type_isSet) {
        obj.insert(QString("osType"), ::OpenAPI::toJsonValue(m_os_type));
    }
    if (m_os_version_isSet) {
        obj.insert(QString("osVersion"), ::OpenAPI::toJsonValue(m_os_version));
    }
    if (m_solution_name_isSet) {
        obj.insert(QString("solutionName"), ::OpenAPI::toJsonValue(m_solution_name));
    }
    return obj;
}

QString OAIDiscoveryDetails::getBiosId() const {
    return m_bios_id;
}
void OAIDiscoveryDetails::setBiosId(const QString &bios_id) {
    m_bios_id = bios_id;
    m_bios_id_isSet = true;
}

bool OAIDiscoveryDetails::is_bios_id_Set() const{
    return m_bios_id_isSet;
}

bool OAIDiscoveryDetails::is_bios_id_Valid() const{
    return m_bios_id_isValid;
}

QString OAIDiscoveryDetails::getEnqueueTime() const {
    return m_enqueue_time;
}
void OAIDiscoveryDetails::setEnqueueTime(const QString &enqueue_time) {
    m_enqueue_time = enqueue_time;
    m_enqueue_time_isSet = true;
}

bool OAIDiscoveryDetails::is_enqueue_time_Set() const{
    return m_enqueue_time_isSet;
}

bool OAIDiscoveryDetails::is_enqueue_time_Valid() const{
    return m_enqueue_time_isValid;
}

QMap<QString, QString> OAIDiscoveryDetails::getExtendedInfo() const {
    return m_extended_info;
}
void OAIDiscoveryDetails::setExtendedInfo(const QMap<QString, QString> &extended_info) {
    m_extended_info = extended_info;
    m_extended_info_isSet = true;
}

bool OAIDiscoveryDetails::is_extended_info_Set() const{
    return m_extended_info_isSet;
}

bool OAIDiscoveryDetails::is_extended_info_Valid() const{
    return m_extended_info_isValid;
}

QString OAIDiscoveryDetails::getFabricType() const {
    return m_fabric_type;
}
void OAIDiscoveryDetails::setFabricType(const QString &fabric_type) {
    m_fabric_type = fabric_type;
    m_fabric_type_isSet = true;
}

bool OAIDiscoveryDetails::is_fabric_type_Set() const{
    return m_fabric_type_isSet;
}

bool OAIDiscoveryDetails::is_fabric_type_Valid() const{
    return m_fabric_type_isValid;
}

QString OAIDiscoveryDetails::getFqdn() const {
    return m_fqdn;
}
void OAIDiscoveryDetails::setFqdn(const QString &fqdn) {
    m_fqdn = fqdn;
    m_fqdn_isSet = true;
}

bool OAIDiscoveryDetails::is_fqdn_Set() const{
    return m_fqdn_isSet;
}

bool OAIDiscoveryDetails::is_fqdn_Valid() const{
    return m_fqdn_isValid;
}

QList<QString> OAIDiscoveryDetails::getIpAddresses() const {
    return m_ip_addresses;
}
void OAIDiscoveryDetails::setIpAddresses(const QList<QString> &ip_addresses) {
    m_ip_addresses = ip_addresses;
    m_ip_addresses_isSet = true;
}

bool OAIDiscoveryDetails::is_ip_addresses_Set() const{
    return m_ip_addresses_isSet;
}

bool OAIDiscoveryDetails::is_ip_addresses_Valid() const{
    return m_ip_addresses_isValid;
}

QDateTime OAIDiscoveryDetails::getLastUpdatedTime() const {
    return m_last_updated_time;
}
void OAIDiscoveryDetails::setLastUpdatedTime(const QDateTime &last_updated_time) {
    m_last_updated_time = last_updated_time;
    m_last_updated_time_isSet = true;
}

bool OAIDiscoveryDetails::is_last_updated_time_Set() const{
    return m_last_updated_time_isSet;
}

bool OAIDiscoveryDetails::is_last_updated_time_Valid() const{
    return m_last_updated_time_isValid;
}

QList<QString> OAIDiscoveryDetails::getMacAddresses() const {
    return m_mac_addresses;
}
void OAIDiscoveryDetails::setMacAddresses(const QList<QString> &mac_addresses) {
    m_mac_addresses = mac_addresses;
    m_mac_addresses_isSet = true;
}

bool OAIDiscoveryDetails::is_mac_addresses_Set() const{
    return m_mac_addresses_isSet;
}

bool OAIDiscoveryDetails::is_mac_addresses_Valid() const{
    return m_mac_addresses_isValid;
}

QString OAIDiscoveryDetails::getMachineId() const {
    return m_machine_id;
}
void OAIDiscoveryDetails::setMachineId(const QString &machine_id) {
    m_machine_id = machine_id;
    m_machine_id_isSet = true;
}

bool OAIDiscoveryDetails::is_machine_id_Set() const{
    return m_machine_id_isSet;
}

bool OAIDiscoveryDetails::is_machine_id_Valid() const{
    return m_machine_id_isValid;
}

QString OAIDiscoveryDetails::getMachineManagerId() const {
    return m_machine_manager_id;
}
void OAIDiscoveryDetails::setMachineManagerId(const QString &machine_manager_id) {
    m_machine_manager_id = machine_manager_id;
    m_machine_manager_id_isSet = true;
}

bool OAIDiscoveryDetails::is_machine_manager_id_Set() const{
    return m_machine_manager_id_isSet;
}

bool OAIDiscoveryDetails::is_machine_manager_id_Valid() const{
    return m_machine_manager_id_isValid;
}

QString OAIDiscoveryDetails::getMachineName() const {
    return m_machine_name;
}
void OAIDiscoveryDetails::setMachineName(const QString &machine_name) {
    m_machine_name = machine_name;
    m_machine_name_isSet = true;
}

bool OAIDiscoveryDetails::is_machine_name_Set() const{
    return m_machine_name_isSet;
}

bool OAIDiscoveryDetails::is_machine_name_Valid() const{
    return m_machine_name_isValid;
}

QString OAIDiscoveryDetails::getOsName() const {
    return m_os_name;
}
void OAIDiscoveryDetails::setOsName(const QString &os_name) {
    m_os_name = os_name;
    m_os_name_isSet = true;
}

bool OAIDiscoveryDetails::is_os_name_Set() const{
    return m_os_name_isSet;
}

bool OAIDiscoveryDetails::is_os_name_Valid() const{
    return m_os_name_isValid;
}

QString OAIDiscoveryDetails::getOsType() const {
    return m_os_type;
}
void OAIDiscoveryDetails::setOsType(const QString &os_type) {
    m_os_type = os_type;
    m_os_type_isSet = true;
}

bool OAIDiscoveryDetails::is_os_type_Set() const{
    return m_os_type_isSet;
}

bool OAIDiscoveryDetails::is_os_type_Valid() const{
    return m_os_type_isValid;
}

QString OAIDiscoveryDetails::getOsVersion() const {
    return m_os_version;
}
void OAIDiscoveryDetails::setOsVersion(const QString &os_version) {
    m_os_version = os_version;
    m_os_version_isSet = true;
}

bool OAIDiscoveryDetails::is_os_version_Set() const{
    return m_os_version_isSet;
}

bool OAIDiscoveryDetails::is_os_version_Valid() const{
    return m_os_version_isValid;
}

QString OAIDiscoveryDetails::getSolutionName() const {
    return m_solution_name;
}
void OAIDiscoveryDetails::setSolutionName(const QString &solution_name) {
    m_solution_name = solution_name;
    m_solution_name_isSet = true;
}

bool OAIDiscoveryDetails::is_solution_name_Set() const{
    return m_solution_name_isSet;
}

bool OAIDiscoveryDetails::is_solution_name_Valid() const{
    return m_solution_name_isValid;
}

bool OAIDiscoveryDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bios_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enqueue_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extended_info.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_fabric_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fqdn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_addresses.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mac_addresses.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_machine_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_machine_manager_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_machine_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_solution_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDiscoveryDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
