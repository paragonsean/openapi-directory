/**
 * Azure Migrate Hub
 * Migrate your workloads to Azure.
 *
 * The version of the OpenAPI document: 2018-09-01-preview
 * Contact: azuremigratehub@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIEdmNavigationSource.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIEdmNavigationSource::OAIIEdmNavigationSource(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIEdmNavigationSource::OAIIEdmNavigationSource() {
    this->initializeModel();
}

OAIIEdmNavigationSource::~OAIIEdmNavigationSource() {}

void OAIIEdmNavigationSource::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_navigation_property_bindings_isSet = false;
    m_navigation_property_bindings_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIIEdmNavigationSource::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIEdmNavigationSource::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_navigation_property_bindings_isValid = ::OpenAPI::fromJsonValue(m_navigation_property_bindings, json[QString("navigationPropertyBindings")]);
    m_navigation_property_bindings_isSet = !json[QString("navigationPropertyBindings")].isNull() && m_navigation_property_bindings_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIIEdmNavigationSource::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIEdmNavigationSource::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_navigation_property_bindings.size() > 0) {
        obj.insert(QString("navigationPropertyBindings"), ::OpenAPI::toJsonValue(m_navigation_property_bindings));
    }
    if (m_path.isSet()) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIIEdmNavigationSource::getName() const {
    return m_name;
}
void OAIIEdmNavigationSource::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIIEdmNavigationSource::is_name_Set() const{
    return m_name_isSet;
}

bool OAIIEdmNavigationSource::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAIIEdmNavigationPropertyBinding> OAIIEdmNavigationSource::getNavigationPropertyBindings() const {
    return m_navigation_property_bindings;
}
void OAIIEdmNavigationSource::setNavigationPropertyBindings(const QList<OAIIEdmNavigationPropertyBinding> &navigation_property_bindings) {
    m_navigation_property_bindings = navigation_property_bindings;
    m_navigation_property_bindings_isSet = true;
}

bool OAIIEdmNavigationSource::is_navigation_property_bindings_Set() const{
    return m_navigation_property_bindings_isSet;
}

bool OAIIEdmNavigationSource::is_navigation_property_bindings_Valid() const{
    return m_navigation_property_bindings_isValid;
}

OAIIEdmPathExpression OAIIEdmNavigationSource::getPath() const {
    return m_path;
}
void OAIIEdmNavigationSource::setPath(const OAIIEdmPathExpression &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIIEdmNavigationSource::is_path_Set() const{
    return m_path_isSet;
}

bool OAIIEdmNavigationSource::is_path_Valid() const{
    return m_path_isValid;
}

OAIIEdmType OAIIEdmNavigationSource::getType() const {
    return m_type;
}
void OAIIEdmNavigationSource::setType(const OAIIEdmType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIIEdmNavigationSource::is_type_Set() const{
    return m_type_isSet;
}

bool OAIIEdmNavigationSource::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIIEdmNavigationSource::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_navigation_property_bindings.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_path.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIEdmNavigationSource::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
