/**
 * Azure Migrate Hub
 * Migrate your workloads to Azure.
 *
 * The version of the OpenAPI document: 2018-09-01-preview
 * Contact: azuremigratehub@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIEdmStructuredType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIEdmStructuredType::OAIIEdmStructuredType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIEdmStructuredType::OAIIEdmStructuredType() {
    this->initializeModel();
}

OAIIEdmStructuredType::~OAIIEdmStructuredType() {}

void OAIIEdmStructuredType::initializeModel() {

    m_base_type_isSet = false;
    m_base_type_isValid = false;

    m_declared_properties_isSet = false;
    m_declared_properties_isValid = false;

    m_is_abstract_isSet = false;
    m_is_abstract_isValid = false;

    m_is_open_isSet = false;
    m_is_open_isValid = false;

    m_type_kind_isSet = false;
    m_type_kind_isValid = false;
}

void OAIIEdmStructuredType::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIEdmStructuredType::fromJsonObject(QJsonObject json) {

    m_base_type_isValid = ::OpenAPI::fromJsonValue(m_base_type, json[QString("baseType")]);
    m_base_type_isSet = !json[QString("baseType")].isNull() && m_base_type_isValid;

    m_declared_properties_isValid = ::OpenAPI::fromJsonValue(m_declared_properties, json[QString("declaredProperties")]);
    m_declared_properties_isSet = !json[QString("declaredProperties")].isNull() && m_declared_properties_isValid;

    m_is_abstract_isValid = ::OpenAPI::fromJsonValue(m_is_abstract, json[QString("isAbstract")]);
    m_is_abstract_isSet = !json[QString("isAbstract")].isNull() && m_is_abstract_isValid;

    m_is_open_isValid = ::OpenAPI::fromJsonValue(m_is_open, json[QString("isOpen")]);
    m_is_open_isSet = !json[QString("isOpen")].isNull() && m_is_open_isValid;

    m_type_kind_isValid = ::OpenAPI::fromJsonValue(m_type_kind, json[QString("typeKind")]);
    m_type_kind_isSet = !json[QString("typeKind")].isNull() && m_type_kind_isValid;
}

QString OAIIEdmStructuredType::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIEdmStructuredType::asJsonObject() const {
    QJsonObject obj;
    if (m_base_type.isSet()) {
        obj.insert(QString("baseType"), ::OpenAPI::toJsonValue(m_base_type));
    }
    if (m_declared_properties.size() > 0) {
        obj.insert(QString("declaredProperties"), ::OpenAPI::toJsonValue(m_declared_properties));
    }
    if (m_is_abstract_isSet) {
        obj.insert(QString("isAbstract"), ::OpenAPI::toJsonValue(m_is_abstract));
    }
    if (m_is_open_isSet) {
        obj.insert(QString("isOpen"), ::OpenAPI::toJsonValue(m_is_open));
    }
    if (m_type_kind_isSet) {
        obj.insert(QString("typeKind"), ::OpenAPI::toJsonValue(m_type_kind));
    }
    return obj;
}

OAIIEdmStructuredType OAIIEdmStructuredType::getBaseType() const {
    return m_base_type;
}
void OAIIEdmStructuredType::setBaseType(const OAIIEdmStructuredType &base_type) {
    m_base_type = base_type;
    m_base_type_isSet = true;
}

bool OAIIEdmStructuredType::is_base_type_Set() const{
    return m_base_type_isSet;
}

bool OAIIEdmStructuredType::is_base_type_Valid() const{
    return m_base_type_isValid;
}

QList<OAIIEdmProperty> OAIIEdmStructuredType::getDeclaredProperties() const {
    return m_declared_properties;
}
void OAIIEdmStructuredType::setDeclaredProperties(const QList<OAIIEdmProperty> &declared_properties) {
    m_declared_properties = declared_properties;
    m_declared_properties_isSet = true;
}

bool OAIIEdmStructuredType::is_declared_properties_Set() const{
    return m_declared_properties_isSet;
}

bool OAIIEdmStructuredType::is_declared_properties_Valid() const{
    return m_declared_properties_isValid;
}

bool OAIIEdmStructuredType::isIsAbstract() const {
    return m_is_abstract;
}
void OAIIEdmStructuredType::setIsAbstract(const bool &is_abstract) {
    m_is_abstract = is_abstract;
    m_is_abstract_isSet = true;
}

bool OAIIEdmStructuredType::is_is_abstract_Set() const{
    return m_is_abstract_isSet;
}

bool OAIIEdmStructuredType::is_is_abstract_Valid() const{
    return m_is_abstract_isValid;
}

bool OAIIEdmStructuredType::isIsOpen() const {
    return m_is_open;
}
void OAIIEdmStructuredType::setIsOpen(const bool &is_open) {
    m_is_open = is_open;
    m_is_open_isSet = true;
}

bool OAIIEdmStructuredType::is_is_open_Set() const{
    return m_is_open_isSet;
}

bool OAIIEdmStructuredType::is_is_open_Valid() const{
    return m_is_open_isValid;
}

QString OAIIEdmStructuredType::getTypeKind() const {
    return m_type_kind;
}
void OAIIEdmStructuredType::setTypeKind(const QString &type_kind) {
    m_type_kind = type_kind;
    m_type_kind_isSet = true;
}

bool OAIIEdmStructuredType::is_type_kind_Set() const{
    return m_type_kind_isSet;
}

bool OAIIEdmStructuredType::is_type_kind_Valid() const{
    return m_type_kind_isValid;
}

bool OAIIEdmStructuredType::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_base_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_declared_properties.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_abstract_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_open_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_kind_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIEdmStructuredType::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
