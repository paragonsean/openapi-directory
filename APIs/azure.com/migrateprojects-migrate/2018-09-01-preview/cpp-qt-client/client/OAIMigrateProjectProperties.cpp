/**
 * Azure Migrate Hub
 * Migrate your workloads to Azure.
 *
 * The version of the OpenAPI document: 2018-09-01-preview
 * Contact: azuremigratehub@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMigrateProjectProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMigrateProjectProperties::OAIMigrateProjectProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMigrateProjectProperties::OAIMigrateProjectProperties() {
    this->initializeModel();
}

OAIMigrateProjectProperties::~OAIMigrateProjectProperties() {}

void OAIMigrateProjectProperties::initializeModel() {

    m_last_summary_refreshed_time_isSet = false;
    m_last_summary_refreshed_time_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_refresh_summary_state_isSet = false;
    m_refresh_summary_state_isValid = false;

    m_registered_tools_isSet = false;
    m_registered_tools_isValid = false;

    m_summary_isSet = false;
    m_summary_isValid = false;
}

void OAIMigrateProjectProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMigrateProjectProperties::fromJsonObject(QJsonObject json) {

    m_last_summary_refreshed_time_isValid = ::OpenAPI::fromJsonValue(m_last_summary_refreshed_time, json[QString("lastSummaryRefreshedTime")]);
    m_last_summary_refreshed_time_isSet = !json[QString("lastSummaryRefreshedTime")].isNull() && m_last_summary_refreshed_time_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_refresh_summary_state_isValid = ::OpenAPI::fromJsonValue(m_refresh_summary_state, json[QString("refreshSummaryState")]);
    m_refresh_summary_state_isSet = !json[QString("refreshSummaryState")].isNull() && m_refresh_summary_state_isValid;

    m_registered_tools_isValid = ::OpenAPI::fromJsonValue(m_registered_tools, json[QString("registeredTools")]);
    m_registered_tools_isSet = !json[QString("registeredTools")].isNull() && m_registered_tools_isValid;

    m_summary_isValid = ::OpenAPI::fromJsonValue(m_summary, json[QString("summary")]);
    m_summary_isSet = !json[QString("summary")].isNull() && m_summary_isValid;
}

QString OAIMigrateProjectProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMigrateProjectProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_last_summary_refreshed_time_isSet) {
        obj.insert(QString("lastSummaryRefreshedTime"), ::OpenAPI::toJsonValue(m_last_summary_refreshed_time));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_refresh_summary_state_isSet) {
        obj.insert(QString("refreshSummaryState"), ::OpenAPI::toJsonValue(m_refresh_summary_state));
    }
    if (m_registered_tools.size() > 0) {
        obj.insert(QString("registeredTools"), ::OpenAPI::toJsonValue(m_registered_tools));
    }
    if (m_summary.size() > 0) {
        obj.insert(QString("summary"), ::OpenAPI::toJsonValue(m_summary));
    }
    return obj;
}

QDateTime OAIMigrateProjectProperties::getLastSummaryRefreshedTime() const {
    return m_last_summary_refreshed_time;
}
void OAIMigrateProjectProperties::setLastSummaryRefreshedTime(const QDateTime &last_summary_refreshed_time) {
    m_last_summary_refreshed_time = last_summary_refreshed_time;
    m_last_summary_refreshed_time_isSet = true;
}

bool OAIMigrateProjectProperties::is_last_summary_refreshed_time_Set() const{
    return m_last_summary_refreshed_time_isSet;
}

bool OAIMigrateProjectProperties::is_last_summary_refreshed_time_Valid() const{
    return m_last_summary_refreshed_time_isValid;
}

QString OAIMigrateProjectProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIMigrateProjectProperties::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIMigrateProjectProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIMigrateProjectProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

QString OAIMigrateProjectProperties::getRefreshSummaryState() const {
    return m_refresh_summary_state;
}
void OAIMigrateProjectProperties::setRefreshSummaryState(const QString &refresh_summary_state) {
    m_refresh_summary_state = refresh_summary_state;
    m_refresh_summary_state_isSet = true;
}

bool OAIMigrateProjectProperties::is_refresh_summary_state_Set() const{
    return m_refresh_summary_state_isSet;
}

bool OAIMigrateProjectProperties::is_refresh_summary_state_Valid() const{
    return m_refresh_summary_state_isValid;
}

QList<QString> OAIMigrateProjectProperties::getRegisteredTools() const {
    return m_registered_tools;
}
void OAIMigrateProjectProperties::setRegisteredTools(const QList<QString> &registered_tools) {
    m_registered_tools = registered_tools;
    m_registered_tools_isSet = true;
}

bool OAIMigrateProjectProperties::is_registered_tools_Set() const{
    return m_registered_tools_isSet;
}

bool OAIMigrateProjectProperties::is_registered_tools_Valid() const{
    return m_registered_tools_isValid;
}

QMap<QString, OAIProjectSummary> OAIMigrateProjectProperties::getSummary() const {
    return m_summary;
}
void OAIMigrateProjectProperties::setSummary(const QMap<QString, OAIProjectSummary> &summary) {
    m_summary = summary;
    m_summary_isSet = true;
}

bool OAIMigrateProjectProperties::is_summary_Set() const{
    return m_summary_isSet;
}

bool OAIMigrateProjectProperties::is_summary_Valid() const{
    return m_summary_isValid;
}

bool OAIMigrateProjectProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_last_summary_refreshed_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_refresh_summary_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_registered_tools.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_summary.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMigrateProjectProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
