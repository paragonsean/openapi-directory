/**
 * Azure Migrate Hub
 * Migrate your workloads to Azure.
 *
 * The version of the OpenAPI document: 2018-09-01-preview
 * Contact: azuremigratehub@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIEdmProperty.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIEdmProperty::OAIIEdmProperty(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIEdmProperty::OAIIEdmProperty() {
    this->initializeModel();
}

OAIIEdmProperty::~OAIIEdmProperty() {}

void OAIIEdmProperty::initializeModel() {

    m_declaring_type_isSet = false;
    m_declaring_type_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_property_kind_isSet = false;
    m_property_kind_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIIEdmProperty::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIEdmProperty::fromJsonObject(QJsonObject json) {

    m_declaring_type_isValid = ::OpenAPI::fromJsonValue(m_declaring_type, json[QString("declaringType")]);
    m_declaring_type_isSet = !json[QString("declaringType")].isNull() && m_declaring_type_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_property_kind_isValid = ::OpenAPI::fromJsonValue(m_property_kind, json[QString("propertyKind")]);
    m_property_kind_isSet = !json[QString("propertyKind")].isNull() && m_property_kind_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIIEdmProperty::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIEdmProperty::asJsonObject() const {
    QJsonObject obj;
    if (m_declaring_type.isSet()) {
        obj.insert(QString("declaringType"), ::OpenAPI::toJsonValue(m_declaring_type));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_property_kind_isSet) {
        obj.insert(QString("propertyKind"), ::OpenAPI::toJsonValue(m_property_kind));
    }
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

OAIIEdmStructuredType OAIIEdmProperty::getDeclaringType() const {
    return m_declaring_type;
}
void OAIIEdmProperty::setDeclaringType(const OAIIEdmStructuredType &declaring_type) {
    m_declaring_type = declaring_type;
    m_declaring_type_isSet = true;
}

bool OAIIEdmProperty::is_declaring_type_Set() const{
    return m_declaring_type_isSet;
}

bool OAIIEdmProperty::is_declaring_type_Valid() const{
    return m_declaring_type_isValid;
}

QString OAIIEdmProperty::getName() const {
    return m_name;
}
void OAIIEdmProperty::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIIEdmProperty::is_name_Set() const{
    return m_name_isSet;
}

bool OAIIEdmProperty::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIIEdmProperty::getPropertyKind() const {
    return m_property_kind;
}
void OAIIEdmProperty::setPropertyKind(const QString &property_kind) {
    m_property_kind = property_kind;
    m_property_kind_isSet = true;
}

bool OAIIEdmProperty::is_property_kind_Set() const{
    return m_property_kind_isSet;
}

bool OAIIEdmProperty::is_property_kind_Valid() const{
    return m_property_kind_isValid;
}

OAIIEdmTypeReference OAIIEdmProperty::getType() const {
    return m_type;
}
void OAIIEdmProperty::setType(const OAIIEdmTypeReference &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIIEdmProperty::is_type_Set() const{
    return m_type_isSet;
}

bool OAIIEdmProperty::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIIEdmProperty::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_declaring_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_property_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIEdmProperty::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
