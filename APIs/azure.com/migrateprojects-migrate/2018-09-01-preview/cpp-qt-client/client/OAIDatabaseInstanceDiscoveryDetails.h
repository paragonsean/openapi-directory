/**
 * Azure Migrate Hub
 * Migrate your workloads to Azure.
 *
 * The version of the OpenAPI document: 2018-09-01-preview
 * Contact: azuremigratehub@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDatabaseInstanceDiscoveryDetails.h
 *
 * Discovery properties that can be shared by various publishers.
 */

#ifndef OAIDatabaseInstanceDiscoveryDetails_H
#define OAIDatabaseInstanceDiscoveryDetails_H

#include <QJsonObject>

#include <QDateTime>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIDatabaseInstanceDiscoveryDetails : public OAIObject {
public:
    OAIDatabaseInstanceDiscoveryDetails();
    OAIDatabaseInstanceDiscoveryDetails(QString json);
    ~OAIDatabaseInstanceDiscoveryDetails() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getEnqueueTime() const;
    void setEnqueueTime(const QString &enqueue_time);
    bool is_enqueue_time_Set() const;
    bool is_enqueue_time_Valid() const;

    QMap<QString, QString> getExtendedInfo() const;
    void setExtendedInfo(const QMap<QString, QString> &extended_info);
    bool is_extended_info_Set() const;
    bool is_extended_info_Valid() const;

    QString getHostName() const;
    void setHostName(const QString &host_name);
    bool is_host_name_Set() const;
    bool is_host_name_Valid() const;

    QString getInstanceId() const;
    void setInstanceId(const QString &instance_id);
    bool is_instance_id_Set() const;
    bool is_instance_id_Valid() const;

    QString getInstanceName() const;
    void setInstanceName(const QString &instance_name);
    bool is_instance_name_Set() const;
    bool is_instance_name_Valid() const;

    QString getInstanceType() const;
    void setInstanceType(const QString &instance_type);
    bool is_instance_type_Set() const;
    bool is_instance_type_Valid() const;

    QString getInstanceVersion() const;
    void setInstanceVersion(const QString &instance_version);
    bool is_instance_version_Set() const;
    bool is_instance_version_Valid() const;

    QString getIpAddress() const;
    void setIpAddress(const QString &ip_address);
    bool is_ip_address_Set() const;
    bool is_ip_address_Valid() const;

    QDateTime getLastUpdatedTime() const;
    void setLastUpdatedTime(const QDateTime &last_updated_time);
    bool is_last_updated_time_Set() const;
    bool is_last_updated_time_Valid() const;

    qint32 getPortNumber() const;
    void setPortNumber(const qint32 &port_number);
    bool is_port_number_Set() const;
    bool is_port_number_Valid() const;

    QString getSolutionName() const;
    void setSolutionName(const QString &solution_name);
    bool is_solution_name_Set() const;
    bool is_solution_name_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_enqueue_time;
    bool m_enqueue_time_isSet;
    bool m_enqueue_time_isValid;

    QMap<QString, QString> m_extended_info;
    bool m_extended_info_isSet;
    bool m_extended_info_isValid;

    QString m_host_name;
    bool m_host_name_isSet;
    bool m_host_name_isValid;

    QString m_instance_id;
    bool m_instance_id_isSet;
    bool m_instance_id_isValid;

    QString m_instance_name;
    bool m_instance_name_isSet;
    bool m_instance_name_isValid;

    QString m_instance_type;
    bool m_instance_type_isSet;
    bool m_instance_type_isValid;

    QString m_instance_version;
    bool m_instance_version_isSet;
    bool m_instance_version_isValid;

    QString m_ip_address;
    bool m_ip_address_isSet;
    bool m_ip_address_isValid;

    QDateTime m_last_updated_time;
    bool m_last_updated_time_isSet;
    bool m_last_updated_time_isValid;

    qint32 m_port_number;
    bool m_port_number_isSet;
    bool m_port_number_isValid;

    QString m_solution_name;
    bool m_solution_name_isSet;
    bool m_solution_name_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDatabaseInstanceDiscoveryDetails)

#endif // OAIDatabaseInstanceDiscoveryDetails_H
