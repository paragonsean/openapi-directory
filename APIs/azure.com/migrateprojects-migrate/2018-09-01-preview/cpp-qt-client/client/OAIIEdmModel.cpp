/**
 * Azure Migrate Hub
 * Migrate your workloads to Azure.
 *
 * The version of the OpenAPI document: 2018-09-01-preview
 * Contact: azuremigratehub@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIEdmModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIEdmModel::OAIIEdmModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIEdmModel::OAIIEdmModel() {
    this->initializeModel();
}

OAIIEdmModel::~OAIIEdmModel() {}

void OAIIEdmModel::initializeModel() {

    m_declared_namespaces_isSet = false;
    m_declared_namespaces_isValid = false;

    m_direct_value_annotations_manager_isSet = false;
    m_direct_value_annotations_manager_isValid = false;

    m_entity_container_isSet = false;
    m_entity_container_isValid = false;

    m_referenced_models_isSet = false;
    m_referenced_models_isValid = false;

    m_schema_elements_isSet = false;
    m_schema_elements_isValid = false;

    m_vocabulary_annotations_isSet = false;
    m_vocabulary_annotations_isValid = false;
}

void OAIIEdmModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIEdmModel::fromJsonObject(QJsonObject json) {

    m_declared_namespaces_isValid = ::OpenAPI::fromJsonValue(m_declared_namespaces, json[QString("declaredNamespaces")]);
    m_declared_namespaces_isSet = !json[QString("declaredNamespaces")].isNull() && m_declared_namespaces_isValid;

    m_direct_value_annotations_manager_isValid = ::OpenAPI::fromJsonValue(m_direct_value_annotations_manager, json[QString("directValueAnnotationsManager")]);
    m_direct_value_annotations_manager_isSet = !json[QString("directValueAnnotationsManager")].isNull() && m_direct_value_annotations_manager_isValid;

    m_entity_container_isValid = ::OpenAPI::fromJsonValue(m_entity_container, json[QString("entityContainer")]);
    m_entity_container_isSet = !json[QString("entityContainer")].isNull() && m_entity_container_isValid;

    m_referenced_models_isValid = ::OpenAPI::fromJsonValue(m_referenced_models, json[QString("referencedModels")]);
    m_referenced_models_isSet = !json[QString("referencedModels")].isNull() && m_referenced_models_isValid;

    m_schema_elements_isValid = ::OpenAPI::fromJsonValue(m_schema_elements, json[QString("schemaElements")]);
    m_schema_elements_isSet = !json[QString("schemaElements")].isNull() && m_schema_elements_isValid;

    m_vocabulary_annotations_isValid = ::OpenAPI::fromJsonValue(m_vocabulary_annotations, json[QString("vocabularyAnnotations")]);
    m_vocabulary_annotations_isSet = !json[QString("vocabularyAnnotations")].isNull() && m_vocabulary_annotations_isValid;
}

QString OAIIEdmModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIEdmModel::asJsonObject() const {
    QJsonObject obj;
    if (m_declared_namespaces.size() > 0) {
        obj.insert(QString("declaredNamespaces"), ::OpenAPI::toJsonValue(m_declared_namespaces));
    }
    if (m_direct_value_annotations_manager_isSet) {
        obj.insert(QString("directValueAnnotationsManager"), ::OpenAPI::toJsonValue(m_direct_value_annotations_manager));
    }
    if (m_entity_container.isSet()) {
        obj.insert(QString("entityContainer"), ::OpenAPI::toJsonValue(m_entity_container));
    }
    if (m_referenced_models.size() > 0) {
        obj.insert(QString("referencedModels"), ::OpenAPI::toJsonValue(m_referenced_models));
    }
    if (m_schema_elements.size() > 0) {
        obj.insert(QString("schemaElements"), ::OpenAPI::toJsonValue(m_schema_elements));
    }
    if (m_vocabulary_annotations.size() > 0) {
        obj.insert(QString("vocabularyAnnotations"), ::OpenAPI::toJsonValue(m_vocabulary_annotations));
    }
    return obj;
}

QList<QString> OAIIEdmModel::getDeclaredNamespaces() const {
    return m_declared_namespaces;
}
void OAIIEdmModel::setDeclaredNamespaces(const QList<QString> &declared_namespaces) {
    m_declared_namespaces = declared_namespaces;
    m_declared_namespaces_isSet = true;
}

bool OAIIEdmModel::is_declared_namespaces_Set() const{
    return m_declared_namespaces_isSet;
}

bool OAIIEdmModel::is_declared_namespaces_Valid() const{
    return m_declared_namespaces_isValid;
}

OAIObject OAIIEdmModel::getDirectValueAnnotationsManager() const {
    return m_direct_value_annotations_manager;
}
void OAIIEdmModel::setDirectValueAnnotationsManager(const OAIObject &direct_value_annotations_manager) {
    m_direct_value_annotations_manager = direct_value_annotations_manager;
    m_direct_value_annotations_manager_isSet = true;
}

bool OAIIEdmModel::is_direct_value_annotations_manager_Set() const{
    return m_direct_value_annotations_manager_isSet;
}

bool OAIIEdmModel::is_direct_value_annotations_manager_Valid() const{
    return m_direct_value_annotations_manager_isValid;
}

OAIIEdmEntityContainer OAIIEdmModel::getEntityContainer() const {
    return m_entity_container;
}
void OAIIEdmModel::setEntityContainer(const OAIIEdmEntityContainer &entity_container) {
    m_entity_container = entity_container;
    m_entity_container_isSet = true;
}

bool OAIIEdmModel::is_entity_container_Set() const{
    return m_entity_container_isSet;
}

bool OAIIEdmModel::is_entity_container_Valid() const{
    return m_entity_container_isValid;
}

QList<OAIIEdmModel> OAIIEdmModel::getReferencedModels() const {
    return m_referenced_models;
}
void OAIIEdmModel::setReferencedModels(const QList<OAIIEdmModel> &referenced_models) {
    m_referenced_models = referenced_models;
    m_referenced_models_isSet = true;
}

bool OAIIEdmModel::is_referenced_models_Set() const{
    return m_referenced_models_isSet;
}

bool OAIIEdmModel::is_referenced_models_Valid() const{
    return m_referenced_models_isValid;
}

QList<OAIIEdmSchemaElement> OAIIEdmModel::getSchemaElements() const {
    return m_schema_elements;
}
void OAIIEdmModel::setSchemaElements(const QList<OAIIEdmSchemaElement> &schema_elements) {
    m_schema_elements = schema_elements;
    m_schema_elements_isSet = true;
}

bool OAIIEdmModel::is_schema_elements_Set() const{
    return m_schema_elements_isSet;
}

bool OAIIEdmModel::is_schema_elements_Valid() const{
    return m_schema_elements_isValid;
}

QList<OAIIEdmVocabularyAnnotation> OAIIEdmModel::getVocabularyAnnotations() const {
    return m_vocabulary_annotations;
}
void OAIIEdmModel::setVocabularyAnnotations(const QList<OAIIEdmVocabularyAnnotation> &vocabulary_annotations) {
    m_vocabulary_annotations = vocabulary_annotations;
    m_vocabulary_annotations_isSet = true;
}

bool OAIIEdmModel::is_vocabulary_annotations_Set() const{
    return m_vocabulary_annotations_isSet;
}

bool OAIIEdmModel::is_vocabulary_annotations_Valid() const{
    return m_vocabulary_annotations_isValid;
}

bool OAIIEdmModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_declared_namespaces.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_direct_value_annotations_manager_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_container.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_referenced_models.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema_elements.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_vocabulary_annotations.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIEdmModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
