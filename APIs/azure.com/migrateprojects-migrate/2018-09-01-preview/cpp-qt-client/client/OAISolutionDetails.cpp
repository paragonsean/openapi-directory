/**
 * Azure Migrate Hub
 * Migrate your workloads to Azure.
 *
 * The version of the OpenAPI document: 2018-09-01-preview
 * Contact: azuremigratehub@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISolutionDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISolutionDetails::OAISolutionDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISolutionDetails::OAISolutionDetails() {
    this->initializeModel();
}

OAISolutionDetails::~OAISolutionDetails() {}

void OAISolutionDetails::initializeModel() {

    m_assessment_count_isSet = false;
    m_assessment_count_isValid = false;

    m_extended_details_isSet = false;
    m_extended_details_isValid = false;

    m_group_count_isSet = false;
    m_group_count_isValid = false;
}

void OAISolutionDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISolutionDetails::fromJsonObject(QJsonObject json) {

    m_assessment_count_isValid = ::OpenAPI::fromJsonValue(m_assessment_count, json[QString("assessmentCount")]);
    m_assessment_count_isSet = !json[QString("assessmentCount")].isNull() && m_assessment_count_isValid;

    m_extended_details_isValid = ::OpenAPI::fromJsonValue(m_extended_details, json[QString("extendedDetails")]);
    m_extended_details_isSet = !json[QString("extendedDetails")].isNull() && m_extended_details_isValid;

    m_group_count_isValid = ::OpenAPI::fromJsonValue(m_group_count, json[QString("groupCount")]);
    m_group_count_isSet = !json[QString("groupCount")].isNull() && m_group_count_isValid;
}

QString OAISolutionDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISolutionDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_assessment_count_isSet) {
        obj.insert(QString("assessmentCount"), ::OpenAPI::toJsonValue(m_assessment_count));
    }
    if (m_extended_details.size() > 0) {
        obj.insert(QString("extendedDetails"), ::OpenAPI::toJsonValue(m_extended_details));
    }
    if (m_group_count_isSet) {
        obj.insert(QString("groupCount"), ::OpenAPI::toJsonValue(m_group_count));
    }
    return obj;
}

qint32 OAISolutionDetails::getAssessmentCount() const {
    return m_assessment_count;
}
void OAISolutionDetails::setAssessmentCount(const qint32 &assessment_count) {
    m_assessment_count = assessment_count;
    m_assessment_count_isSet = true;
}

bool OAISolutionDetails::is_assessment_count_Set() const{
    return m_assessment_count_isSet;
}

bool OAISolutionDetails::is_assessment_count_Valid() const{
    return m_assessment_count_isValid;
}

QMap<QString, QString> OAISolutionDetails::getExtendedDetails() const {
    return m_extended_details;
}
void OAISolutionDetails::setExtendedDetails(const QMap<QString, QString> &extended_details) {
    m_extended_details = extended_details;
    m_extended_details_isSet = true;
}

bool OAISolutionDetails::is_extended_details_Set() const{
    return m_extended_details_isSet;
}

bool OAISolutionDetails::is_extended_details_Valid() const{
    return m_extended_details_isValid;
}

qint32 OAISolutionDetails::getGroupCount() const {
    return m_group_count;
}
void OAISolutionDetails::setGroupCount(const qint32 &group_count) {
    m_group_count = group_count;
    m_group_count_isSet = true;
}

bool OAISolutionDetails::is_group_count_Set() const{
    return m_group_count_isSet;
}

bool OAISolutionDetails::is_group_count_Valid() const{
    return m_group_count_isValid;
}

bool OAISolutionDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_assessment_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extended_details.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISolutionDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
