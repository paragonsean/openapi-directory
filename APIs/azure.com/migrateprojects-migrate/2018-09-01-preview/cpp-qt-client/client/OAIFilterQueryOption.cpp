/**
 * Azure Migrate Hub
 * Migrate your workloads to Azure.
 *
 * The version of the OpenAPI document: 2018-09-01-preview
 * Contact: azuremigratehub@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFilterQueryOption.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFilterQueryOption::OAIFilterQueryOption(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFilterQueryOption::OAIFilterQueryOption() {
    this->initializeModel();
}

OAIFilterQueryOption::~OAIFilterQueryOption() {}

void OAIFilterQueryOption::initializeModel() {

    m_context_isSet = false;
    m_context_isValid = false;

    m_filter_clause_isSet = false;
    m_filter_clause_isValid = false;

    m_raw_value_isSet = false;
    m_raw_value_isValid = false;

    m_validator_isSet = false;
    m_validator_isValid = false;
}

void OAIFilterQueryOption::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFilterQueryOption::fromJsonObject(QJsonObject json) {

    m_context_isValid = ::OpenAPI::fromJsonValue(m_context, json[QString("context")]);
    m_context_isSet = !json[QString("context")].isNull() && m_context_isValid;

    m_filter_clause_isValid = ::OpenAPI::fromJsonValue(m_filter_clause, json[QString("filterClause")]);
    m_filter_clause_isSet = !json[QString("filterClause")].isNull() && m_filter_clause_isValid;

    m_raw_value_isValid = ::OpenAPI::fromJsonValue(m_raw_value, json[QString("rawValue")]);
    m_raw_value_isSet = !json[QString("rawValue")].isNull() && m_raw_value_isValid;

    m_validator_isValid = ::OpenAPI::fromJsonValue(m_validator, json[QString("validator")]);
    m_validator_isSet = !json[QString("validator")].isNull() && m_validator_isValid;
}

QString OAIFilterQueryOption::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFilterQueryOption::asJsonObject() const {
    QJsonObject obj;
    if (m_context.isSet()) {
        obj.insert(QString("context"), ::OpenAPI::toJsonValue(m_context));
    }
    if (m_filter_clause.isSet()) {
        obj.insert(QString("filterClause"), ::OpenAPI::toJsonValue(m_filter_clause));
    }
    if (m_raw_value_isSet) {
        obj.insert(QString("rawValue"), ::OpenAPI::toJsonValue(m_raw_value));
    }
    if (m_validator_isSet) {
        obj.insert(QString("validator"), ::OpenAPI::toJsonValue(m_validator));
    }
    return obj;
}

OAIODataQueryContext OAIFilterQueryOption::getContext() const {
    return m_context;
}
void OAIFilterQueryOption::setContext(const OAIODataQueryContext &context) {
    m_context = context;
    m_context_isSet = true;
}

bool OAIFilterQueryOption::is_context_Set() const{
    return m_context_isSet;
}

bool OAIFilterQueryOption::is_context_Valid() const{
    return m_context_isValid;
}

OAIFilterClause OAIFilterQueryOption::getFilterClause() const {
    return m_filter_clause;
}
void OAIFilterQueryOption::setFilterClause(const OAIFilterClause &filter_clause) {
    m_filter_clause = filter_clause;
    m_filter_clause_isSet = true;
}

bool OAIFilterQueryOption::is_filter_clause_Set() const{
    return m_filter_clause_isSet;
}

bool OAIFilterQueryOption::is_filter_clause_Valid() const{
    return m_filter_clause_isValid;
}

QString OAIFilterQueryOption::getRawValue() const {
    return m_raw_value;
}
void OAIFilterQueryOption::setRawValue(const QString &raw_value) {
    m_raw_value = raw_value;
    m_raw_value_isSet = true;
}

bool OAIFilterQueryOption::is_raw_value_Set() const{
    return m_raw_value_isSet;
}

bool OAIFilterQueryOption::is_raw_value_Valid() const{
    return m_raw_value_isValid;
}

OAIObject OAIFilterQueryOption::getValidator() const {
    return m_validator;
}
void OAIFilterQueryOption::setValidator(const OAIObject &validator) {
    m_validator = validator;
    m_validator_isSet = true;
}

bool OAIFilterQueryOption::is_validator_Set() const{
    return m_validator_isSet;
}

bool OAIFilterQueryOption::is_validator_Valid() const{
    return m_validator_isValid;
}

bool OAIFilterQueryOption::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_context.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter_clause.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_raw_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_validator_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFilterQueryOption::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
