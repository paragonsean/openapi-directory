/**
 * Azure Migrate Hub
 * Migrate your workloads to Azure.
 *
 * The version of the OpenAPI document: 2018-09-01-preview
 * Contact: azuremigratehub@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMigrationDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMigrationDetails::OAIMigrationDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMigrationDetails::OAIMigrationDetails() {
    this->initializeModel();
}

OAIMigrationDetails::~OAIMigrationDetails() {}

void OAIMigrationDetails::initializeModel() {

    m_bios_id_isSet = false;
    m_bios_id_isValid = false;

    m_enqueue_time_isSet = false;
    m_enqueue_time_isValid = false;

    m_extended_info_isSet = false;
    m_extended_info_isValid = false;

    m_fabric_type_isSet = false;
    m_fabric_type_isValid = false;

    m_fqdn_isSet = false;
    m_fqdn_isValid = false;

    m_ip_addresses_isSet = false;
    m_ip_addresses_isValid = false;

    m_last_updated_time_isSet = false;
    m_last_updated_time_isValid = false;

    m_mac_addresses_isSet = false;
    m_mac_addresses_isValid = false;

    m_machine_id_isSet = false;
    m_machine_id_isValid = false;

    m_machine_manager_id_isSet = false;
    m_machine_manager_id_isValid = false;

    m_machine_name_isSet = false;
    m_machine_name_isValid = false;

    m_migration_phase_isSet = false;
    m_migration_phase_isValid = false;

    m_migration_tested_isSet = false;
    m_migration_tested_isValid = false;

    m_replication_progress_percentage_isSet = false;
    m_replication_progress_percentage_isValid = false;

    m_solution_name_isSet = false;
    m_solution_name_isValid = false;

    m_target_vm_arm_id_isSet = false;
    m_target_vm_arm_id_isValid = false;
}

void OAIMigrationDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMigrationDetails::fromJsonObject(QJsonObject json) {

    m_bios_id_isValid = ::OpenAPI::fromJsonValue(m_bios_id, json[QString("biosId")]);
    m_bios_id_isSet = !json[QString("biosId")].isNull() && m_bios_id_isValid;

    m_enqueue_time_isValid = ::OpenAPI::fromJsonValue(m_enqueue_time, json[QString("enqueueTime")]);
    m_enqueue_time_isSet = !json[QString("enqueueTime")].isNull() && m_enqueue_time_isValid;

    m_extended_info_isValid = ::OpenAPI::fromJsonValue(m_extended_info, json[QString("extendedInfo")]);
    m_extended_info_isSet = !json[QString("extendedInfo")].isNull() && m_extended_info_isValid;

    m_fabric_type_isValid = ::OpenAPI::fromJsonValue(m_fabric_type, json[QString("fabricType")]);
    m_fabric_type_isSet = !json[QString("fabricType")].isNull() && m_fabric_type_isValid;

    m_fqdn_isValid = ::OpenAPI::fromJsonValue(m_fqdn, json[QString("fqdn")]);
    m_fqdn_isSet = !json[QString("fqdn")].isNull() && m_fqdn_isValid;

    m_ip_addresses_isValid = ::OpenAPI::fromJsonValue(m_ip_addresses, json[QString("ipAddresses")]);
    m_ip_addresses_isSet = !json[QString("ipAddresses")].isNull() && m_ip_addresses_isValid;

    m_last_updated_time_isValid = ::OpenAPI::fromJsonValue(m_last_updated_time, json[QString("lastUpdatedTime")]);
    m_last_updated_time_isSet = !json[QString("lastUpdatedTime")].isNull() && m_last_updated_time_isValid;

    m_mac_addresses_isValid = ::OpenAPI::fromJsonValue(m_mac_addresses, json[QString("macAddresses")]);
    m_mac_addresses_isSet = !json[QString("macAddresses")].isNull() && m_mac_addresses_isValid;

    m_machine_id_isValid = ::OpenAPI::fromJsonValue(m_machine_id, json[QString("machineId")]);
    m_machine_id_isSet = !json[QString("machineId")].isNull() && m_machine_id_isValid;

    m_machine_manager_id_isValid = ::OpenAPI::fromJsonValue(m_machine_manager_id, json[QString("machineManagerId")]);
    m_machine_manager_id_isSet = !json[QString("machineManagerId")].isNull() && m_machine_manager_id_isValid;

    m_machine_name_isValid = ::OpenAPI::fromJsonValue(m_machine_name, json[QString("machineName")]);
    m_machine_name_isSet = !json[QString("machineName")].isNull() && m_machine_name_isValid;

    m_migration_phase_isValid = ::OpenAPI::fromJsonValue(m_migration_phase, json[QString("migrationPhase")]);
    m_migration_phase_isSet = !json[QString("migrationPhase")].isNull() && m_migration_phase_isValid;

    m_migration_tested_isValid = ::OpenAPI::fromJsonValue(m_migration_tested, json[QString("migrationTested")]);
    m_migration_tested_isSet = !json[QString("migrationTested")].isNull() && m_migration_tested_isValid;

    m_replication_progress_percentage_isValid = ::OpenAPI::fromJsonValue(m_replication_progress_percentage, json[QString("replicationProgressPercentage")]);
    m_replication_progress_percentage_isSet = !json[QString("replicationProgressPercentage")].isNull() && m_replication_progress_percentage_isValid;

    m_solution_name_isValid = ::OpenAPI::fromJsonValue(m_solution_name, json[QString("solutionName")]);
    m_solution_name_isSet = !json[QString("solutionName")].isNull() && m_solution_name_isValid;

    m_target_vm_arm_id_isValid = ::OpenAPI::fromJsonValue(m_target_vm_arm_id, json[QString("targetVMArmId")]);
    m_target_vm_arm_id_isSet = !json[QString("targetVMArmId")].isNull() && m_target_vm_arm_id_isValid;
}

QString OAIMigrationDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMigrationDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_bios_id_isSet) {
        obj.insert(QString("biosId"), ::OpenAPI::toJsonValue(m_bios_id));
    }
    if (m_enqueue_time_isSet) {
        obj.insert(QString("enqueueTime"), ::OpenAPI::toJsonValue(m_enqueue_time));
    }
    if (m_extended_info.size() > 0) {
        obj.insert(QString("extendedInfo"), ::OpenAPI::toJsonValue(m_extended_info));
    }
    if (m_fabric_type_isSet) {
        obj.insert(QString("fabricType"), ::OpenAPI::toJsonValue(m_fabric_type));
    }
    if (m_fqdn_isSet) {
        obj.insert(QString("fqdn"), ::OpenAPI::toJsonValue(m_fqdn));
    }
    if (m_ip_addresses.size() > 0) {
        obj.insert(QString("ipAddresses"), ::OpenAPI::toJsonValue(m_ip_addresses));
    }
    if (m_last_updated_time_isSet) {
        obj.insert(QString("lastUpdatedTime"), ::OpenAPI::toJsonValue(m_last_updated_time));
    }
    if (m_mac_addresses.size() > 0) {
        obj.insert(QString("macAddresses"), ::OpenAPI::toJsonValue(m_mac_addresses));
    }
    if (m_machine_id_isSet) {
        obj.insert(QString("machineId"), ::OpenAPI::toJsonValue(m_machine_id));
    }
    if (m_machine_manager_id_isSet) {
        obj.insert(QString("machineManagerId"), ::OpenAPI::toJsonValue(m_machine_manager_id));
    }
    if (m_machine_name_isSet) {
        obj.insert(QString("machineName"), ::OpenAPI::toJsonValue(m_machine_name));
    }
    if (m_migration_phase_isSet) {
        obj.insert(QString("migrationPhase"), ::OpenAPI::toJsonValue(m_migration_phase));
    }
    if (m_migration_tested_isSet) {
        obj.insert(QString("migrationTested"), ::OpenAPI::toJsonValue(m_migration_tested));
    }
    if (m_replication_progress_percentage_isSet) {
        obj.insert(QString("replicationProgressPercentage"), ::OpenAPI::toJsonValue(m_replication_progress_percentage));
    }
    if (m_solution_name_isSet) {
        obj.insert(QString("solutionName"), ::OpenAPI::toJsonValue(m_solution_name));
    }
    if (m_target_vm_arm_id_isSet) {
        obj.insert(QString("targetVMArmId"), ::OpenAPI::toJsonValue(m_target_vm_arm_id));
    }
    return obj;
}

QString OAIMigrationDetails::getBiosId() const {
    return m_bios_id;
}
void OAIMigrationDetails::setBiosId(const QString &bios_id) {
    m_bios_id = bios_id;
    m_bios_id_isSet = true;
}

bool OAIMigrationDetails::is_bios_id_Set() const{
    return m_bios_id_isSet;
}

bool OAIMigrationDetails::is_bios_id_Valid() const{
    return m_bios_id_isValid;
}

QString OAIMigrationDetails::getEnqueueTime() const {
    return m_enqueue_time;
}
void OAIMigrationDetails::setEnqueueTime(const QString &enqueue_time) {
    m_enqueue_time = enqueue_time;
    m_enqueue_time_isSet = true;
}

bool OAIMigrationDetails::is_enqueue_time_Set() const{
    return m_enqueue_time_isSet;
}

bool OAIMigrationDetails::is_enqueue_time_Valid() const{
    return m_enqueue_time_isValid;
}

QMap<QString, QString> OAIMigrationDetails::getExtendedInfo() const {
    return m_extended_info;
}
void OAIMigrationDetails::setExtendedInfo(const QMap<QString, QString> &extended_info) {
    m_extended_info = extended_info;
    m_extended_info_isSet = true;
}

bool OAIMigrationDetails::is_extended_info_Set() const{
    return m_extended_info_isSet;
}

bool OAIMigrationDetails::is_extended_info_Valid() const{
    return m_extended_info_isValid;
}

QString OAIMigrationDetails::getFabricType() const {
    return m_fabric_type;
}
void OAIMigrationDetails::setFabricType(const QString &fabric_type) {
    m_fabric_type = fabric_type;
    m_fabric_type_isSet = true;
}

bool OAIMigrationDetails::is_fabric_type_Set() const{
    return m_fabric_type_isSet;
}

bool OAIMigrationDetails::is_fabric_type_Valid() const{
    return m_fabric_type_isValid;
}

QString OAIMigrationDetails::getFqdn() const {
    return m_fqdn;
}
void OAIMigrationDetails::setFqdn(const QString &fqdn) {
    m_fqdn = fqdn;
    m_fqdn_isSet = true;
}

bool OAIMigrationDetails::is_fqdn_Set() const{
    return m_fqdn_isSet;
}

bool OAIMigrationDetails::is_fqdn_Valid() const{
    return m_fqdn_isValid;
}

QList<QString> OAIMigrationDetails::getIpAddresses() const {
    return m_ip_addresses;
}
void OAIMigrationDetails::setIpAddresses(const QList<QString> &ip_addresses) {
    m_ip_addresses = ip_addresses;
    m_ip_addresses_isSet = true;
}

bool OAIMigrationDetails::is_ip_addresses_Set() const{
    return m_ip_addresses_isSet;
}

bool OAIMigrationDetails::is_ip_addresses_Valid() const{
    return m_ip_addresses_isValid;
}

QDateTime OAIMigrationDetails::getLastUpdatedTime() const {
    return m_last_updated_time;
}
void OAIMigrationDetails::setLastUpdatedTime(const QDateTime &last_updated_time) {
    m_last_updated_time = last_updated_time;
    m_last_updated_time_isSet = true;
}

bool OAIMigrationDetails::is_last_updated_time_Set() const{
    return m_last_updated_time_isSet;
}

bool OAIMigrationDetails::is_last_updated_time_Valid() const{
    return m_last_updated_time_isValid;
}

QList<QString> OAIMigrationDetails::getMacAddresses() const {
    return m_mac_addresses;
}
void OAIMigrationDetails::setMacAddresses(const QList<QString> &mac_addresses) {
    m_mac_addresses = mac_addresses;
    m_mac_addresses_isSet = true;
}

bool OAIMigrationDetails::is_mac_addresses_Set() const{
    return m_mac_addresses_isSet;
}

bool OAIMigrationDetails::is_mac_addresses_Valid() const{
    return m_mac_addresses_isValid;
}

QString OAIMigrationDetails::getMachineId() const {
    return m_machine_id;
}
void OAIMigrationDetails::setMachineId(const QString &machine_id) {
    m_machine_id = machine_id;
    m_machine_id_isSet = true;
}

bool OAIMigrationDetails::is_machine_id_Set() const{
    return m_machine_id_isSet;
}

bool OAIMigrationDetails::is_machine_id_Valid() const{
    return m_machine_id_isValid;
}

QString OAIMigrationDetails::getMachineManagerId() const {
    return m_machine_manager_id;
}
void OAIMigrationDetails::setMachineManagerId(const QString &machine_manager_id) {
    m_machine_manager_id = machine_manager_id;
    m_machine_manager_id_isSet = true;
}

bool OAIMigrationDetails::is_machine_manager_id_Set() const{
    return m_machine_manager_id_isSet;
}

bool OAIMigrationDetails::is_machine_manager_id_Valid() const{
    return m_machine_manager_id_isValid;
}

QString OAIMigrationDetails::getMachineName() const {
    return m_machine_name;
}
void OAIMigrationDetails::setMachineName(const QString &machine_name) {
    m_machine_name = machine_name;
    m_machine_name_isSet = true;
}

bool OAIMigrationDetails::is_machine_name_Set() const{
    return m_machine_name_isSet;
}

bool OAIMigrationDetails::is_machine_name_Valid() const{
    return m_machine_name_isValid;
}

QString OAIMigrationDetails::getMigrationPhase() const {
    return m_migration_phase;
}
void OAIMigrationDetails::setMigrationPhase(const QString &migration_phase) {
    m_migration_phase = migration_phase;
    m_migration_phase_isSet = true;
}

bool OAIMigrationDetails::is_migration_phase_Set() const{
    return m_migration_phase_isSet;
}

bool OAIMigrationDetails::is_migration_phase_Valid() const{
    return m_migration_phase_isValid;
}

bool OAIMigrationDetails::isMigrationTested() const {
    return m_migration_tested;
}
void OAIMigrationDetails::setMigrationTested(const bool &migration_tested) {
    m_migration_tested = migration_tested;
    m_migration_tested_isSet = true;
}

bool OAIMigrationDetails::is_migration_tested_Set() const{
    return m_migration_tested_isSet;
}

bool OAIMigrationDetails::is_migration_tested_Valid() const{
    return m_migration_tested_isValid;
}

qint32 OAIMigrationDetails::getReplicationProgressPercentage() const {
    return m_replication_progress_percentage;
}
void OAIMigrationDetails::setReplicationProgressPercentage(const qint32 &replication_progress_percentage) {
    m_replication_progress_percentage = replication_progress_percentage;
    m_replication_progress_percentage_isSet = true;
}

bool OAIMigrationDetails::is_replication_progress_percentage_Set() const{
    return m_replication_progress_percentage_isSet;
}

bool OAIMigrationDetails::is_replication_progress_percentage_Valid() const{
    return m_replication_progress_percentage_isValid;
}

QString OAIMigrationDetails::getSolutionName() const {
    return m_solution_name;
}
void OAIMigrationDetails::setSolutionName(const QString &solution_name) {
    m_solution_name = solution_name;
    m_solution_name_isSet = true;
}

bool OAIMigrationDetails::is_solution_name_Set() const{
    return m_solution_name_isSet;
}

bool OAIMigrationDetails::is_solution_name_Valid() const{
    return m_solution_name_isValid;
}

QString OAIMigrationDetails::getTargetVmArmId() const {
    return m_target_vm_arm_id;
}
void OAIMigrationDetails::setTargetVmArmId(const QString &target_vm_arm_id) {
    m_target_vm_arm_id = target_vm_arm_id;
    m_target_vm_arm_id_isSet = true;
}

bool OAIMigrationDetails::is_target_vm_arm_id_Set() const{
    return m_target_vm_arm_id_isSet;
}

bool OAIMigrationDetails::is_target_vm_arm_id_Valid() const{
    return m_target_vm_arm_id_isValid;
}

bool OAIMigrationDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bios_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enqueue_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extended_info.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_fabric_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fqdn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_addresses.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mac_addresses.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_machine_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_machine_manager_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_machine_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_migration_phase_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_migration_tested_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_replication_progress_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_solution_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_vm_arm_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMigrationDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
