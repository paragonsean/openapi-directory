/**
 * Azure Migrate Hub
 * Migrate your workloads to Azure.
 *
 * The version of the OpenAPI document: 2018-09-01-preview
 * Contact: azuremigratehub@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIODataQueryContext.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIODataQueryContext::OAIODataQueryContext(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIODataQueryContext::OAIODataQueryContext() {
    this->initializeModel();
}

OAIODataQueryContext::~OAIODataQueryContext() {}

void OAIODataQueryContext::initializeModel() {

    m_default_query_settings_isSet = false;
    m_default_query_settings_isValid = false;

    m_element_clr_type_isSet = false;
    m_element_clr_type_isValid = false;

    m_element_type_isSet = false;
    m_element_type_isValid = false;

    m_model_isSet = false;
    m_model_isValid = false;

    m_navigation_source_isSet = false;
    m_navigation_source_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_request_container_isSet = false;
    m_request_container_isValid = false;
}

void OAIODataQueryContext::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIODataQueryContext::fromJsonObject(QJsonObject json) {

    m_default_query_settings_isValid = ::OpenAPI::fromJsonValue(m_default_query_settings, json[QString("defaultQuerySettings")]);
    m_default_query_settings_isSet = !json[QString("defaultQuerySettings")].isNull() && m_default_query_settings_isValid;

    m_element_clr_type_isValid = ::OpenAPI::fromJsonValue(m_element_clr_type, json[QString("elementClrType")]);
    m_element_clr_type_isSet = !json[QString("elementClrType")].isNull() && m_element_clr_type_isValid;

    m_element_type_isValid = ::OpenAPI::fromJsonValue(m_element_type, json[QString("elementType")]);
    m_element_type_isSet = !json[QString("elementType")].isNull() && m_element_type_isValid;

    m_model_isValid = ::OpenAPI::fromJsonValue(m_model, json[QString("model")]);
    m_model_isSet = !json[QString("model")].isNull() && m_model_isValid;

    m_navigation_source_isValid = ::OpenAPI::fromJsonValue(m_navigation_source, json[QString("navigationSource")]);
    m_navigation_source_isSet = !json[QString("navigationSource")].isNull() && m_navigation_source_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;

    m_request_container_isValid = ::OpenAPI::fromJsonValue(m_request_container, json[QString("requestContainer")]);
    m_request_container_isSet = !json[QString("requestContainer")].isNull() && m_request_container_isValid;
}

QString OAIODataQueryContext::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIODataQueryContext::asJsonObject() const {
    QJsonObject obj;
    if (m_default_query_settings.isSet()) {
        obj.insert(QString("defaultQuerySettings"), ::OpenAPI::toJsonValue(m_default_query_settings));
    }
    if (m_element_clr_type_isSet) {
        obj.insert(QString("elementClrType"), ::OpenAPI::toJsonValue(m_element_clr_type));
    }
    if (m_element_type.isSet()) {
        obj.insert(QString("elementType"), ::OpenAPI::toJsonValue(m_element_type));
    }
    if (m_model.isSet()) {
        obj.insert(QString("model"), ::OpenAPI::toJsonValue(m_model));
    }
    if (m_navigation_source.isSet()) {
        obj.insert(QString("navigationSource"), ::OpenAPI::toJsonValue(m_navigation_source));
    }
    if (m_path.isSet()) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_request_container_isSet) {
        obj.insert(QString("requestContainer"), ::OpenAPI::toJsonValue(m_request_container));
    }
    return obj;
}

OAIDefaultQuerySettings OAIODataQueryContext::getDefaultQuerySettings() const {
    return m_default_query_settings;
}
void OAIODataQueryContext::setDefaultQuerySettings(const OAIDefaultQuerySettings &default_query_settings) {
    m_default_query_settings = default_query_settings;
    m_default_query_settings_isSet = true;
}

bool OAIODataQueryContext::is_default_query_settings_Set() const{
    return m_default_query_settings_isSet;
}

bool OAIODataQueryContext::is_default_query_settings_Valid() const{
    return m_default_query_settings_isValid;
}

QString OAIODataQueryContext::getElementClrType() const {
    return m_element_clr_type;
}
void OAIODataQueryContext::setElementClrType(const QString &element_clr_type) {
    m_element_clr_type = element_clr_type;
    m_element_clr_type_isSet = true;
}

bool OAIODataQueryContext::is_element_clr_type_Set() const{
    return m_element_clr_type_isSet;
}

bool OAIODataQueryContext::is_element_clr_type_Valid() const{
    return m_element_clr_type_isValid;
}

OAIIEdmType OAIODataQueryContext::getElementType() const {
    return m_element_type;
}
void OAIODataQueryContext::setElementType(const OAIIEdmType &element_type) {
    m_element_type = element_type;
    m_element_type_isSet = true;
}

bool OAIODataQueryContext::is_element_type_Set() const{
    return m_element_type_isSet;
}

bool OAIODataQueryContext::is_element_type_Valid() const{
    return m_element_type_isValid;
}

OAIIEdmModel OAIODataQueryContext::getModel() const {
    return m_model;
}
void OAIODataQueryContext::setModel(const OAIIEdmModel &model) {
    m_model = model;
    m_model_isSet = true;
}

bool OAIODataQueryContext::is_model_Set() const{
    return m_model_isSet;
}

bool OAIODataQueryContext::is_model_Valid() const{
    return m_model_isValid;
}

OAIIEdmNavigationSource OAIODataQueryContext::getNavigationSource() const {
    return m_navigation_source;
}
void OAIODataQueryContext::setNavigationSource(const OAIIEdmNavigationSource &navigation_source) {
    m_navigation_source = navigation_source;
    m_navigation_source_isSet = true;
}

bool OAIODataQueryContext::is_navigation_source_Set() const{
    return m_navigation_source_isSet;
}

bool OAIODataQueryContext::is_navigation_source_Valid() const{
    return m_navigation_source_isValid;
}

OAIODataPath OAIODataQueryContext::getPath() const {
    return m_path;
}
void OAIODataQueryContext::setPath(const OAIODataPath &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIODataQueryContext::is_path_Set() const{
    return m_path_isSet;
}

bool OAIODataQueryContext::is_path_Valid() const{
    return m_path_isValid;
}

OAIObject OAIODataQueryContext::getRequestContainer() const {
    return m_request_container;
}
void OAIODataQueryContext::setRequestContainer(const OAIObject &request_container) {
    m_request_container = request_container;
    m_request_container_isSet = true;
}

bool OAIODataQueryContext::is_request_container_Set() const{
    return m_request_container_isSet;
}

bool OAIODataQueryContext::is_request_container_Valid() const{
    return m_request_container_isValid;
}

bool OAIODataQueryContext::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_default_query_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_element_clr_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_element_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_model.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_navigation_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_path.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_container_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIODataQueryContext::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
