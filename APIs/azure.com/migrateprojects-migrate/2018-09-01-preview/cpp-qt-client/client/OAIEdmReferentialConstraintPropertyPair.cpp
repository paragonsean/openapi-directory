/**
 * Azure Migrate Hub
 * Migrate your workloads to Azure.
 *
 * The version of the OpenAPI document: 2018-09-01-preview
 * Contact: azuremigratehub@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEdmReferentialConstraintPropertyPair.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEdmReferentialConstraintPropertyPair::OAIEdmReferentialConstraintPropertyPair(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEdmReferentialConstraintPropertyPair::OAIEdmReferentialConstraintPropertyPair() {
    this->initializeModel();
}

OAIEdmReferentialConstraintPropertyPair::~OAIEdmReferentialConstraintPropertyPair() {}

void OAIEdmReferentialConstraintPropertyPair::initializeModel() {

    m_dependent_property_isSet = false;
    m_dependent_property_isValid = false;

    m_principal_property_isSet = false;
    m_principal_property_isValid = false;
}

void OAIEdmReferentialConstraintPropertyPair::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEdmReferentialConstraintPropertyPair::fromJsonObject(QJsonObject json) {

    m_dependent_property_isValid = ::OpenAPI::fromJsonValue(m_dependent_property, json[QString("dependentProperty")]);
    m_dependent_property_isSet = !json[QString("dependentProperty")].isNull() && m_dependent_property_isValid;

    m_principal_property_isValid = ::OpenAPI::fromJsonValue(m_principal_property, json[QString("principalProperty")]);
    m_principal_property_isSet = !json[QString("principalProperty")].isNull() && m_principal_property_isValid;
}

QString OAIEdmReferentialConstraintPropertyPair::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEdmReferentialConstraintPropertyPair::asJsonObject() const {
    QJsonObject obj;
    if (m_dependent_property.isSet()) {
        obj.insert(QString("dependentProperty"), ::OpenAPI::toJsonValue(m_dependent_property));
    }
    if (m_principal_property.isSet()) {
        obj.insert(QString("principalProperty"), ::OpenAPI::toJsonValue(m_principal_property));
    }
    return obj;
}

OAIIEdmStructuralProperty OAIEdmReferentialConstraintPropertyPair::getDependentProperty() const {
    return m_dependent_property;
}
void OAIEdmReferentialConstraintPropertyPair::setDependentProperty(const OAIIEdmStructuralProperty &dependent_property) {
    m_dependent_property = dependent_property;
    m_dependent_property_isSet = true;
}

bool OAIEdmReferentialConstraintPropertyPair::is_dependent_property_Set() const{
    return m_dependent_property_isSet;
}

bool OAIEdmReferentialConstraintPropertyPair::is_dependent_property_Valid() const{
    return m_dependent_property_isValid;
}

OAIIEdmStructuralProperty OAIEdmReferentialConstraintPropertyPair::getPrincipalProperty() const {
    return m_principal_property;
}
void OAIEdmReferentialConstraintPropertyPair::setPrincipalProperty(const OAIIEdmStructuralProperty &principal_property) {
    m_principal_property = principal_property;
    m_principal_property_isSet = true;
}

bool OAIEdmReferentialConstraintPropertyPair::is_principal_property_Set() const{
    return m_principal_property_isSet;
}

bool OAIEdmReferentialConstraintPropertyPair::is_principal_property_Valid() const{
    return m_principal_property_isValid;
}

bool OAIEdmReferentialConstraintPropertyPair::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dependent_property.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_principal_property.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEdmReferentialConstraintPropertyPair::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
