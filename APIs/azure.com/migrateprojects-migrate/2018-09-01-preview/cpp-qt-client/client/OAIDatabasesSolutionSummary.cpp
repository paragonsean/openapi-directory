/**
 * Azure Migrate Hub
 * Migrate your workloads to Azure.
 *
 * The version of the OpenAPI document: 2018-09-01-preview
 * Contact: azuremigratehub@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDatabasesSolutionSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDatabasesSolutionSummary::OAIDatabasesSolutionSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDatabasesSolutionSummary::OAIDatabasesSolutionSummary() {
    this->initializeModel();
}

OAIDatabasesSolutionSummary::~OAIDatabasesSolutionSummary() {}

void OAIDatabasesSolutionSummary::initializeModel() {

    m_database_instances_assessed_count_isSet = false;
    m_database_instances_assessed_count_isValid = false;

    m_databases_assessed_count_isSet = false;
    m_databases_assessed_count_isValid = false;

    m_migration_ready_count_isSet = false;
    m_migration_ready_count_isValid = false;

    m_instance_type_isSet = false;
    m_instance_type_isValid = false;
}

void OAIDatabasesSolutionSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDatabasesSolutionSummary::fromJsonObject(QJsonObject json) {

    m_database_instances_assessed_count_isValid = ::OpenAPI::fromJsonValue(m_database_instances_assessed_count, json[QString("databaseInstancesAssessedCount")]);
    m_database_instances_assessed_count_isSet = !json[QString("databaseInstancesAssessedCount")].isNull() && m_database_instances_assessed_count_isValid;

    m_databases_assessed_count_isValid = ::OpenAPI::fromJsonValue(m_databases_assessed_count, json[QString("databasesAssessedCount")]);
    m_databases_assessed_count_isSet = !json[QString("databasesAssessedCount")].isNull() && m_databases_assessed_count_isValid;

    m_migration_ready_count_isValid = ::OpenAPI::fromJsonValue(m_migration_ready_count, json[QString("migrationReadyCount")]);
    m_migration_ready_count_isSet = !json[QString("migrationReadyCount")].isNull() && m_migration_ready_count_isValid;

    m_instance_type_isValid = ::OpenAPI::fromJsonValue(m_instance_type, json[QString("instanceType")]);
    m_instance_type_isSet = !json[QString("instanceType")].isNull() && m_instance_type_isValid;
}

QString OAIDatabasesSolutionSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDatabasesSolutionSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_database_instances_assessed_count_isSet) {
        obj.insert(QString("databaseInstancesAssessedCount"), ::OpenAPI::toJsonValue(m_database_instances_assessed_count));
    }
    if (m_databases_assessed_count_isSet) {
        obj.insert(QString("databasesAssessedCount"), ::OpenAPI::toJsonValue(m_databases_assessed_count));
    }
    if (m_migration_ready_count_isSet) {
        obj.insert(QString("migrationReadyCount"), ::OpenAPI::toJsonValue(m_migration_ready_count));
    }
    if (m_instance_type_isSet) {
        obj.insert(QString("instanceType"), ::OpenAPI::toJsonValue(m_instance_type));
    }
    return obj;
}

qint32 OAIDatabasesSolutionSummary::getDatabaseInstancesAssessedCount() const {
    return m_database_instances_assessed_count;
}
void OAIDatabasesSolutionSummary::setDatabaseInstancesAssessedCount(const qint32 &database_instances_assessed_count) {
    m_database_instances_assessed_count = database_instances_assessed_count;
    m_database_instances_assessed_count_isSet = true;
}

bool OAIDatabasesSolutionSummary::is_database_instances_assessed_count_Set() const{
    return m_database_instances_assessed_count_isSet;
}

bool OAIDatabasesSolutionSummary::is_database_instances_assessed_count_Valid() const{
    return m_database_instances_assessed_count_isValid;
}

qint32 OAIDatabasesSolutionSummary::getDatabasesAssessedCount() const {
    return m_databases_assessed_count;
}
void OAIDatabasesSolutionSummary::setDatabasesAssessedCount(const qint32 &databases_assessed_count) {
    m_databases_assessed_count = databases_assessed_count;
    m_databases_assessed_count_isSet = true;
}

bool OAIDatabasesSolutionSummary::is_databases_assessed_count_Set() const{
    return m_databases_assessed_count_isSet;
}

bool OAIDatabasesSolutionSummary::is_databases_assessed_count_Valid() const{
    return m_databases_assessed_count_isValid;
}

qint32 OAIDatabasesSolutionSummary::getMigrationReadyCount() const {
    return m_migration_ready_count;
}
void OAIDatabasesSolutionSummary::setMigrationReadyCount(const qint32 &migration_ready_count) {
    m_migration_ready_count = migration_ready_count;
    m_migration_ready_count_isSet = true;
}

bool OAIDatabasesSolutionSummary::is_migration_ready_count_Set() const{
    return m_migration_ready_count_isSet;
}

bool OAIDatabasesSolutionSummary::is_migration_ready_count_Valid() const{
    return m_migration_ready_count_isValid;
}

QString OAIDatabasesSolutionSummary::getInstanceType() const {
    return m_instance_type;
}
void OAIDatabasesSolutionSummary::setInstanceType(const QString &instance_type) {
    m_instance_type = instance_type;
    m_instance_type_isSet = true;
}

bool OAIDatabasesSolutionSummary::is_instance_type_Set() const{
    return m_instance_type_isSet;
}

bool OAIDatabasesSolutionSummary::is_instance_type_Valid() const{
    return m_instance_type_isValid;
}

bool OAIDatabasesSolutionSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_database_instances_assessed_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_databases_assessed_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_migration_ready_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDatabasesSolutionSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
