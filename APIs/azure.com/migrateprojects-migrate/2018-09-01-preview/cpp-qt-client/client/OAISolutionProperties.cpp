/**
 * Azure Migrate Hub
 * Migrate your workloads to Azure.
 *
 * The version of the OpenAPI document: 2018-09-01-preview
 * Contact: azuremigratehub@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISolutionProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISolutionProperties::OAISolutionProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISolutionProperties::OAISolutionProperties() {
    this->initializeModel();
}

OAISolutionProperties::~OAISolutionProperties() {}

void OAISolutionProperties::initializeModel() {

    m_cleanup_state_isSet = false;
    m_cleanup_state_isValid = false;

    m_details_isSet = false;
    m_details_isValid = false;

    m_goal_isSet = false;
    m_goal_isValid = false;

    m_purpose_isSet = false;
    m_purpose_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_summary_isSet = false;
    m_summary_isValid = false;

    m_tool_isSet = false;
    m_tool_isValid = false;
}

void OAISolutionProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISolutionProperties::fromJsonObject(QJsonObject json) {

    m_cleanup_state_isValid = ::OpenAPI::fromJsonValue(m_cleanup_state, json[QString("cleanupState")]);
    m_cleanup_state_isSet = !json[QString("cleanupState")].isNull() && m_cleanup_state_isValid;

    m_details_isValid = ::OpenAPI::fromJsonValue(m_details, json[QString("details")]);
    m_details_isSet = !json[QString("details")].isNull() && m_details_isValid;

    m_goal_isValid = ::OpenAPI::fromJsonValue(m_goal, json[QString("goal")]);
    m_goal_isSet = !json[QString("goal")].isNull() && m_goal_isValid;

    m_purpose_isValid = ::OpenAPI::fromJsonValue(m_purpose, json[QString("purpose")]);
    m_purpose_isSet = !json[QString("purpose")].isNull() && m_purpose_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_summary_isValid = ::OpenAPI::fromJsonValue(m_summary, json[QString("summary")]);
    m_summary_isSet = !json[QString("summary")].isNull() && m_summary_isValid;

    m_tool_isValid = ::OpenAPI::fromJsonValue(m_tool, json[QString("tool")]);
    m_tool_isSet = !json[QString("tool")].isNull() && m_tool_isValid;
}

QString OAISolutionProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISolutionProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_cleanup_state_isSet) {
        obj.insert(QString("cleanupState"), ::OpenAPI::toJsonValue(m_cleanup_state));
    }
    if (m_details.isSet()) {
        obj.insert(QString("details"), ::OpenAPI::toJsonValue(m_details));
    }
    if (m_goal_isSet) {
        obj.insert(QString("goal"), ::OpenAPI::toJsonValue(m_goal));
    }
    if (m_purpose_isSet) {
        obj.insert(QString("purpose"), ::OpenAPI::toJsonValue(m_purpose));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_summary.isSet()) {
        obj.insert(QString("summary"), ::OpenAPI::toJsonValue(m_summary));
    }
    if (m_tool_isSet) {
        obj.insert(QString("tool"), ::OpenAPI::toJsonValue(m_tool));
    }
    return obj;
}

QString OAISolutionProperties::getCleanupState() const {
    return m_cleanup_state;
}
void OAISolutionProperties::setCleanupState(const QString &cleanup_state) {
    m_cleanup_state = cleanup_state;
    m_cleanup_state_isSet = true;
}

bool OAISolutionProperties::is_cleanup_state_Set() const{
    return m_cleanup_state_isSet;
}

bool OAISolutionProperties::is_cleanup_state_Valid() const{
    return m_cleanup_state_isValid;
}

OAISolutionDetails OAISolutionProperties::getDetails() const {
    return m_details;
}
void OAISolutionProperties::setDetails(const OAISolutionDetails &details) {
    m_details = details;
    m_details_isSet = true;
}

bool OAISolutionProperties::is_details_Set() const{
    return m_details_isSet;
}

bool OAISolutionProperties::is_details_Valid() const{
    return m_details_isValid;
}

QString OAISolutionProperties::getGoal() const {
    return m_goal;
}
void OAISolutionProperties::setGoal(const QString &goal) {
    m_goal = goal;
    m_goal_isSet = true;
}

bool OAISolutionProperties::is_goal_Set() const{
    return m_goal_isSet;
}

bool OAISolutionProperties::is_goal_Valid() const{
    return m_goal_isValid;
}

QString OAISolutionProperties::getPurpose() const {
    return m_purpose;
}
void OAISolutionProperties::setPurpose(const QString &purpose) {
    m_purpose = purpose;
    m_purpose_isSet = true;
}

bool OAISolutionProperties::is_purpose_Set() const{
    return m_purpose_isSet;
}

bool OAISolutionProperties::is_purpose_Valid() const{
    return m_purpose_isValid;
}

QString OAISolutionProperties::getStatus() const {
    return m_status;
}
void OAISolutionProperties::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAISolutionProperties::is_status_Set() const{
    return m_status_isSet;
}

bool OAISolutionProperties::is_status_Valid() const{
    return m_status_isValid;
}

OAISolutionSummary OAISolutionProperties::getSummary() const {
    return m_summary;
}
void OAISolutionProperties::setSummary(const OAISolutionSummary &summary) {
    m_summary = summary;
    m_summary_isSet = true;
}

bool OAISolutionProperties::is_summary_Set() const{
    return m_summary_isSet;
}

bool OAISolutionProperties::is_summary_Valid() const{
    return m_summary_isValid;
}

QString OAISolutionProperties::getTool() const {
    return m_tool;
}
void OAISolutionProperties::setTool(const QString &tool) {
    m_tool = tool;
    m_tool_isSet = true;
}

bool OAISolutionProperties::is_tool_Set() const{
    return m_tool_isSet;
}

bool OAISolutionProperties::is_tool_Valid() const{
    return m_tool_isValid;
}

bool OAISolutionProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cleanup_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_goal_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_purpose_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_summary.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tool_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISolutionProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
