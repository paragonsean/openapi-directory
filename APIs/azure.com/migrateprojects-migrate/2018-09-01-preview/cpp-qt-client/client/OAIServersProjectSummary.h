/**
 * Azure Migrate Hub
 * Migrate your workloads to Azure.
 *
 * The version of the OpenAPI document: 2018-09-01-preview
 * Contact: azuremigratehub@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIServersProjectSummary.h
 *
 * Class representing the servers project summary.
 */

#ifndef OAIServersProjectSummary_H
#define OAIServersProjectSummary_H

#include <QJsonObject>

#include "OAIProjectSummary.h"
#include <QDateTime>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIServersProjectSummary : public OAIObject {
public:
    OAIServersProjectSummary();
    OAIServersProjectSummary(QString json);
    ~OAIServersProjectSummary() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getAssessedCount() const;
    void setAssessedCount(const qint32 &assessed_count);
    bool is_assessed_count_Set() const;
    bool is_assessed_count_Valid() const;

    qint32 getDiscoveredCount() const;
    void setDiscoveredCount(const qint32 &discovered_count);
    bool is_discovered_count_Set() const;
    bool is_discovered_count_Valid() const;

    qint32 getMigratedCount() const;
    void setMigratedCount(const qint32 &migrated_count);
    bool is_migrated_count_Set() const;
    bool is_migrated_count_Valid() const;

    qint32 getReplicatingCount() const;
    void setReplicatingCount(const qint32 &replicating_count);
    bool is_replicating_count_Set() const;
    bool is_replicating_count_Valid() const;

    qint32 getTestMigratedCount() const;
    void setTestMigratedCount(const qint32 &test_migrated_count);
    bool is_test_migrated_count_Set() const;
    bool is_test_migrated_count_Valid() const;

    QMap<QString, QString> getExtendedSummary() const;
    void setExtendedSummary(const QMap<QString, QString> &extended_summary);
    bool is_extended_summary_Set() const;
    bool is_extended_summary_Valid() const;

    QString getInstanceType() const;
    void setInstanceType(const QString &instance_type);
    bool is_instance_type_Set() const;
    bool is_instance_type_Valid() const;

    QDateTime getLastSummaryRefreshedTime() const;
    void setLastSummaryRefreshedTime(const QDateTime &last_summary_refreshed_time);
    bool is_last_summary_refreshed_time_Set() const;
    bool is_last_summary_refreshed_time_Valid() const;

    QString getRefreshSummaryState() const;
    void setRefreshSummaryState(const QString &refresh_summary_state);
    bool is_refresh_summary_state_Set() const;
    bool is_refresh_summary_state_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_assessed_count;
    bool m_assessed_count_isSet;
    bool m_assessed_count_isValid;

    qint32 m_discovered_count;
    bool m_discovered_count_isSet;
    bool m_discovered_count_isValid;

    qint32 m_migrated_count;
    bool m_migrated_count_isSet;
    bool m_migrated_count_isValid;

    qint32 m_replicating_count;
    bool m_replicating_count_isSet;
    bool m_replicating_count_isValid;

    qint32 m_test_migrated_count;
    bool m_test_migrated_count_isSet;
    bool m_test_migrated_count_isValid;

    QMap<QString, QString> m_extended_summary;
    bool m_extended_summary_isSet;
    bool m_extended_summary_isValid;

    QString m_instance_type;
    bool m_instance_type_isSet;
    bool m_instance_type_isValid;

    QDateTime m_last_summary_refreshed_time;
    bool m_last_summary_refreshed_time_isSet;
    bool m_last_summary_refreshed_time_isValid;

    QString m_refresh_summary_state;
    bool m_refresh_summary_state_isSet;
    bool m_refresh_summary_state_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIServersProjectSummary)

#endif // OAIServersProjectSummary_H
