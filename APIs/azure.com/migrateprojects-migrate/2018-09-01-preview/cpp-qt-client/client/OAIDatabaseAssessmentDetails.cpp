/**
 * Azure Migrate Hub
 * Migrate your workloads to Azure.
 *
 * The version of the OpenAPI document: 2018-09-01-preview
 * Contact: azuremigratehub@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDatabaseAssessmentDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDatabaseAssessmentDetails::OAIDatabaseAssessmentDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDatabaseAssessmentDetails::OAIDatabaseAssessmentDetails() {
    this->initializeModel();
}

OAIDatabaseAssessmentDetails::~OAIDatabaseAssessmentDetails() {}

void OAIDatabaseAssessmentDetails::initializeModel() {

    m_assessment_id_isSet = false;
    m_assessment_id_isValid = false;

    m_assessment_target_type_isSet = false;
    m_assessment_target_type_isValid = false;

    m_breaking_changes_count_isSet = false;
    m_breaking_changes_count_isValid = false;

    m_compatibility_level_isSet = false;
    m_compatibility_level_isValid = false;

    m_database_name_isSet = false;
    m_database_name_isValid = false;

    m_database_size_in_mb_isSet = false;
    m_database_size_in_mb_isValid = false;

    m_enqueue_time_isSet = false;
    m_enqueue_time_isValid = false;

    m_extended_info_isSet = false;
    m_extended_info_isValid = false;

    m_instance_id_isSet = false;
    m_instance_id_isValid = false;

    m_is_ready_for_migration_isSet = false;
    m_is_ready_for_migration_isValid = false;

    m_last_assessed_time_isSet = false;
    m_last_assessed_time_isValid = false;

    m_last_updated_time_isSet = false;
    m_last_updated_time_isValid = false;

    m_migration_blockers_count_isSet = false;
    m_migration_blockers_count_isValid = false;

    m_solution_name_isSet = false;
    m_solution_name_isValid = false;
}

void OAIDatabaseAssessmentDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDatabaseAssessmentDetails::fromJsonObject(QJsonObject json) {

    m_assessment_id_isValid = ::OpenAPI::fromJsonValue(m_assessment_id, json[QString("assessmentId")]);
    m_assessment_id_isSet = !json[QString("assessmentId")].isNull() && m_assessment_id_isValid;

    m_assessment_target_type_isValid = ::OpenAPI::fromJsonValue(m_assessment_target_type, json[QString("assessmentTargetType")]);
    m_assessment_target_type_isSet = !json[QString("assessmentTargetType")].isNull() && m_assessment_target_type_isValid;

    m_breaking_changes_count_isValid = ::OpenAPI::fromJsonValue(m_breaking_changes_count, json[QString("breakingChangesCount")]);
    m_breaking_changes_count_isSet = !json[QString("breakingChangesCount")].isNull() && m_breaking_changes_count_isValid;

    m_compatibility_level_isValid = ::OpenAPI::fromJsonValue(m_compatibility_level, json[QString("compatibilityLevel")]);
    m_compatibility_level_isSet = !json[QString("compatibilityLevel")].isNull() && m_compatibility_level_isValid;

    m_database_name_isValid = ::OpenAPI::fromJsonValue(m_database_name, json[QString("databaseName")]);
    m_database_name_isSet = !json[QString("databaseName")].isNull() && m_database_name_isValid;

    m_database_size_in_mb_isValid = ::OpenAPI::fromJsonValue(m_database_size_in_mb, json[QString("databaseSizeInMB")]);
    m_database_size_in_mb_isSet = !json[QString("databaseSizeInMB")].isNull() && m_database_size_in_mb_isValid;

    m_enqueue_time_isValid = ::OpenAPI::fromJsonValue(m_enqueue_time, json[QString("enqueueTime")]);
    m_enqueue_time_isSet = !json[QString("enqueueTime")].isNull() && m_enqueue_time_isValid;

    m_extended_info_isValid = ::OpenAPI::fromJsonValue(m_extended_info, json[QString("extendedInfo")]);
    m_extended_info_isSet = !json[QString("extendedInfo")].isNull() && m_extended_info_isValid;

    m_instance_id_isValid = ::OpenAPI::fromJsonValue(m_instance_id, json[QString("instanceId")]);
    m_instance_id_isSet = !json[QString("instanceId")].isNull() && m_instance_id_isValid;

    m_is_ready_for_migration_isValid = ::OpenAPI::fromJsonValue(m_is_ready_for_migration, json[QString("isReadyForMigration")]);
    m_is_ready_for_migration_isSet = !json[QString("isReadyForMigration")].isNull() && m_is_ready_for_migration_isValid;

    m_last_assessed_time_isValid = ::OpenAPI::fromJsonValue(m_last_assessed_time, json[QString("lastAssessedTime")]);
    m_last_assessed_time_isSet = !json[QString("lastAssessedTime")].isNull() && m_last_assessed_time_isValid;

    m_last_updated_time_isValid = ::OpenAPI::fromJsonValue(m_last_updated_time, json[QString("lastUpdatedTime")]);
    m_last_updated_time_isSet = !json[QString("lastUpdatedTime")].isNull() && m_last_updated_time_isValid;

    m_migration_blockers_count_isValid = ::OpenAPI::fromJsonValue(m_migration_blockers_count, json[QString("migrationBlockersCount")]);
    m_migration_blockers_count_isSet = !json[QString("migrationBlockersCount")].isNull() && m_migration_blockers_count_isValid;

    m_solution_name_isValid = ::OpenAPI::fromJsonValue(m_solution_name, json[QString("solutionName")]);
    m_solution_name_isSet = !json[QString("solutionName")].isNull() && m_solution_name_isValid;
}

QString OAIDatabaseAssessmentDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDatabaseAssessmentDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_assessment_id_isSet) {
        obj.insert(QString("assessmentId"), ::OpenAPI::toJsonValue(m_assessment_id));
    }
    if (m_assessment_target_type_isSet) {
        obj.insert(QString("assessmentTargetType"), ::OpenAPI::toJsonValue(m_assessment_target_type));
    }
    if (m_breaking_changes_count_isSet) {
        obj.insert(QString("breakingChangesCount"), ::OpenAPI::toJsonValue(m_breaking_changes_count));
    }
    if (m_compatibility_level_isSet) {
        obj.insert(QString("compatibilityLevel"), ::OpenAPI::toJsonValue(m_compatibility_level));
    }
    if (m_database_name_isSet) {
        obj.insert(QString("databaseName"), ::OpenAPI::toJsonValue(m_database_name));
    }
    if (m_database_size_in_mb_isSet) {
        obj.insert(QString("databaseSizeInMB"), ::OpenAPI::toJsonValue(m_database_size_in_mb));
    }
    if (m_enqueue_time_isSet) {
        obj.insert(QString("enqueueTime"), ::OpenAPI::toJsonValue(m_enqueue_time));
    }
    if (m_extended_info.size() > 0) {
        obj.insert(QString("extendedInfo"), ::OpenAPI::toJsonValue(m_extended_info));
    }
    if (m_instance_id_isSet) {
        obj.insert(QString("instanceId"), ::OpenAPI::toJsonValue(m_instance_id));
    }
    if (m_is_ready_for_migration_isSet) {
        obj.insert(QString("isReadyForMigration"), ::OpenAPI::toJsonValue(m_is_ready_for_migration));
    }
    if (m_last_assessed_time_isSet) {
        obj.insert(QString("lastAssessedTime"), ::OpenAPI::toJsonValue(m_last_assessed_time));
    }
    if (m_last_updated_time_isSet) {
        obj.insert(QString("lastUpdatedTime"), ::OpenAPI::toJsonValue(m_last_updated_time));
    }
    if (m_migration_blockers_count_isSet) {
        obj.insert(QString("migrationBlockersCount"), ::OpenAPI::toJsonValue(m_migration_blockers_count));
    }
    if (m_solution_name_isSet) {
        obj.insert(QString("solutionName"), ::OpenAPI::toJsonValue(m_solution_name));
    }
    return obj;
}

QString OAIDatabaseAssessmentDetails::getAssessmentId() const {
    return m_assessment_id;
}
void OAIDatabaseAssessmentDetails::setAssessmentId(const QString &assessment_id) {
    m_assessment_id = assessment_id;
    m_assessment_id_isSet = true;
}

bool OAIDatabaseAssessmentDetails::is_assessment_id_Set() const{
    return m_assessment_id_isSet;
}

bool OAIDatabaseAssessmentDetails::is_assessment_id_Valid() const{
    return m_assessment_id_isValid;
}

QString OAIDatabaseAssessmentDetails::getAssessmentTargetType() const {
    return m_assessment_target_type;
}
void OAIDatabaseAssessmentDetails::setAssessmentTargetType(const QString &assessment_target_type) {
    m_assessment_target_type = assessment_target_type;
    m_assessment_target_type_isSet = true;
}

bool OAIDatabaseAssessmentDetails::is_assessment_target_type_Set() const{
    return m_assessment_target_type_isSet;
}

bool OAIDatabaseAssessmentDetails::is_assessment_target_type_Valid() const{
    return m_assessment_target_type_isValid;
}

qint32 OAIDatabaseAssessmentDetails::getBreakingChangesCount() const {
    return m_breaking_changes_count;
}
void OAIDatabaseAssessmentDetails::setBreakingChangesCount(const qint32 &breaking_changes_count) {
    m_breaking_changes_count = breaking_changes_count;
    m_breaking_changes_count_isSet = true;
}

bool OAIDatabaseAssessmentDetails::is_breaking_changes_count_Set() const{
    return m_breaking_changes_count_isSet;
}

bool OAIDatabaseAssessmentDetails::is_breaking_changes_count_Valid() const{
    return m_breaking_changes_count_isValid;
}

QString OAIDatabaseAssessmentDetails::getCompatibilityLevel() const {
    return m_compatibility_level;
}
void OAIDatabaseAssessmentDetails::setCompatibilityLevel(const QString &compatibility_level) {
    m_compatibility_level = compatibility_level;
    m_compatibility_level_isSet = true;
}

bool OAIDatabaseAssessmentDetails::is_compatibility_level_Set() const{
    return m_compatibility_level_isSet;
}

bool OAIDatabaseAssessmentDetails::is_compatibility_level_Valid() const{
    return m_compatibility_level_isValid;
}

QString OAIDatabaseAssessmentDetails::getDatabaseName() const {
    return m_database_name;
}
void OAIDatabaseAssessmentDetails::setDatabaseName(const QString &database_name) {
    m_database_name = database_name;
    m_database_name_isSet = true;
}

bool OAIDatabaseAssessmentDetails::is_database_name_Set() const{
    return m_database_name_isSet;
}

bool OAIDatabaseAssessmentDetails::is_database_name_Valid() const{
    return m_database_name_isValid;
}

QString OAIDatabaseAssessmentDetails::getDatabaseSizeInMb() const {
    return m_database_size_in_mb;
}
void OAIDatabaseAssessmentDetails::setDatabaseSizeInMb(const QString &database_size_in_mb) {
    m_database_size_in_mb = database_size_in_mb;
    m_database_size_in_mb_isSet = true;
}

bool OAIDatabaseAssessmentDetails::is_database_size_in_mb_Set() const{
    return m_database_size_in_mb_isSet;
}

bool OAIDatabaseAssessmentDetails::is_database_size_in_mb_Valid() const{
    return m_database_size_in_mb_isValid;
}

QString OAIDatabaseAssessmentDetails::getEnqueueTime() const {
    return m_enqueue_time;
}
void OAIDatabaseAssessmentDetails::setEnqueueTime(const QString &enqueue_time) {
    m_enqueue_time = enqueue_time;
    m_enqueue_time_isSet = true;
}

bool OAIDatabaseAssessmentDetails::is_enqueue_time_Set() const{
    return m_enqueue_time_isSet;
}

bool OAIDatabaseAssessmentDetails::is_enqueue_time_Valid() const{
    return m_enqueue_time_isValid;
}

QMap<QString, QString> OAIDatabaseAssessmentDetails::getExtendedInfo() const {
    return m_extended_info;
}
void OAIDatabaseAssessmentDetails::setExtendedInfo(const QMap<QString, QString> &extended_info) {
    m_extended_info = extended_info;
    m_extended_info_isSet = true;
}

bool OAIDatabaseAssessmentDetails::is_extended_info_Set() const{
    return m_extended_info_isSet;
}

bool OAIDatabaseAssessmentDetails::is_extended_info_Valid() const{
    return m_extended_info_isValid;
}

QString OAIDatabaseAssessmentDetails::getInstanceId() const {
    return m_instance_id;
}
void OAIDatabaseAssessmentDetails::setInstanceId(const QString &instance_id) {
    m_instance_id = instance_id;
    m_instance_id_isSet = true;
}

bool OAIDatabaseAssessmentDetails::is_instance_id_Set() const{
    return m_instance_id_isSet;
}

bool OAIDatabaseAssessmentDetails::is_instance_id_Valid() const{
    return m_instance_id_isValid;
}

bool OAIDatabaseAssessmentDetails::isIsReadyForMigration() const {
    return m_is_ready_for_migration;
}
void OAIDatabaseAssessmentDetails::setIsReadyForMigration(const bool &is_ready_for_migration) {
    m_is_ready_for_migration = is_ready_for_migration;
    m_is_ready_for_migration_isSet = true;
}

bool OAIDatabaseAssessmentDetails::is_is_ready_for_migration_Set() const{
    return m_is_ready_for_migration_isSet;
}

bool OAIDatabaseAssessmentDetails::is_is_ready_for_migration_Valid() const{
    return m_is_ready_for_migration_isValid;
}

QDateTime OAIDatabaseAssessmentDetails::getLastAssessedTime() const {
    return m_last_assessed_time;
}
void OAIDatabaseAssessmentDetails::setLastAssessedTime(const QDateTime &last_assessed_time) {
    m_last_assessed_time = last_assessed_time;
    m_last_assessed_time_isSet = true;
}

bool OAIDatabaseAssessmentDetails::is_last_assessed_time_Set() const{
    return m_last_assessed_time_isSet;
}

bool OAIDatabaseAssessmentDetails::is_last_assessed_time_Valid() const{
    return m_last_assessed_time_isValid;
}

QDateTime OAIDatabaseAssessmentDetails::getLastUpdatedTime() const {
    return m_last_updated_time;
}
void OAIDatabaseAssessmentDetails::setLastUpdatedTime(const QDateTime &last_updated_time) {
    m_last_updated_time = last_updated_time;
    m_last_updated_time_isSet = true;
}

bool OAIDatabaseAssessmentDetails::is_last_updated_time_Set() const{
    return m_last_updated_time_isSet;
}

bool OAIDatabaseAssessmentDetails::is_last_updated_time_Valid() const{
    return m_last_updated_time_isValid;
}

qint32 OAIDatabaseAssessmentDetails::getMigrationBlockersCount() const {
    return m_migration_blockers_count;
}
void OAIDatabaseAssessmentDetails::setMigrationBlockersCount(const qint32 &migration_blockers_count) {
    m_migration_blockers_count = migration_blockers_count;
    m_migration_blockers_count_isSet = true;
}

bool OAIDatabaseAssessmentDetails::is_migration_blockers_count_Set() const{
    return m_migration_blockers_count_isSet;
}

bool OAIDatabaseAssessmentDetails::is_migration_blockers_count_Valid() const{
    return m_migration_blockers_count_isValid;
}

QString OAIDatabaseAssessmentDetails::getSolutionName() const {
    return m_solution_name;
}
void OAIDatabaseAssessmentDetails::setSolutionName(const QString &solution_name) {
    m_solution_name = solution_name;
    m_solution_name_isSet = true;
}

bool OAIDatabaseAssessmentDetails::is_solution_name_Set() const{
    return m_solution_name_isSet;
}

bool OAIDatabaseAssessmentDetails::is_solution_name_Valid() const{
    return m_solution_name_isValid;
}

bool OAIDatabaseAssessmentDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_assessment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_assessment_target_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_breaking_changes_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_compatibility_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_database_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_database_size_in_mb_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enqueue_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extended_info.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_ready_for_migration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_assessed_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_migration_blockers_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_solution_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDatabaseAssessmentDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
