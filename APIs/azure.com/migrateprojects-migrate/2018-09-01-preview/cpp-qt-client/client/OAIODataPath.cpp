/**
 * Azure Migrate Hub
 * Migrate your workloads to Azure.
 *
 * The version of the OpenAPI document: 2018-09-01-preview
 * Contact: azuremigratehub@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIODataPath.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIODataPath::OAIODataPath(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIODataPath::OAIODataPath() {
    this->initializeModel();
}

OAIODataPath::~OAIODataPath() {}

void OAIODataPath::initializeModel() {

    m_edm_type_isSet = false;
    m_edm_type_isValid = false;

    m_navigation_source_isSet = false;
    m_navigation_source_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_path_template_isSet = false;
    m_path_template_isValid = false;

    m_segments_isSet = false;
    m_segments_isValid = false;
}

void OAIODataPath::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIODataPath::fromJsonObject(QJsonObject json) {

    m_edm_type_isValid = ::OpenAPI::fromJsonValue(m_edm_type, json[QString("edmType")]);
    m_edm_type_isSet = !json[QString("edmType")].isNull() && m_edm_type_isValid;

    m_navigation_source_isValid = ::OpenAPI::fromJsonValue(m_navigation_source, json[QString("navigationSource")]);
    m_navigation_source_isSet = !json[QString("navigationSource")].isNull() && m_navigation_source_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;

    m_path_template_isValid = ::OpenAPI::fromJsonValue(m_path_template, json[QString("pathTemplate")]);
    m_path_template_isSet = !json[QString("pathTemplate")].isNull() && m_path_template_isValid;

    m_segments_isValid = ::OpenAPI::fromJsonValue(m_segments, json[QString("segments")]);
    m_segments_isSet = !json[QString("segments")].isNull() && m_segments_isValid;
}

QString OAIODataPath::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIODataPath::asJsonObject() const {
    QJsonObject obj;
    if (m_edm_type.isSet()) {
        obj.insert(QString("edmType"), ::OpenAPI::toJsonValue(m_edm_type));
    }
    if (m_navigation_source.isSet()) {
        obj.insert(QString("navigationSource"), ::OpenAPI::toJsonValue(m_navigation_source));
    }
    if (m_path.size() > 0) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_path_template_isSet) {
        obj.insert(QString("pathTemplate"), ::OpenAPI::toJsonValue(m_path_template));
    }
    if (m_segments.size() > 0) {
        obj.insert(QString("segments"), ::OpenAPI::toJsonValue(m_segments));
    }
    return obj;
}

OAIIEdmType OAIODataPath::getEdmType() const {
    return m_edm_type;
}
void OAIODataPath::setEdmType(const OAIIEdmType &edm_type) {
    m_edm_type = edm_type;
    m_edm_type_isSet = true;
}

bool OAIODataPath::is_edm_type_Set() const{
    return m_edm_type_isSet;
}

bool OAIODataPath::is_edm_type_Valid() const{
    return m_edm_type_isValid;
}

OAIIEdmNavigationSource OAIODataPath::getNavigationSource() const {
    return m_navigation_source;
}
void OAIODataPath::setNavigationSource(const OAIIEdmNavigationSource &navigation_source) {
    m_navigation_source = navigation_source;
    m_navigation_source_isSet = true;
}

bool OAIODataPath::is_navigation_source_Set() const{
    return m_navigation_source_isSet;
}

bool OAIODataPath::is_navigation_source_Valid() const{
    return m_navigation_source_isValid;
}

QList<OAIODataPathSegment> OAIODataPath::getPath() const {
    return m_path;
}
void OAIODataPath::setPath(const QList<OAIODataPathSegment> &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIODataPath::is_path_Set() const{
    return m_path_isSet;
}

bool OAIODataPath::is_path_Valid() const{
    return m_path_isValid;
}

QString OAIODataPath::getPathTemplate() const {
    return m_path_template;
}
void OAIODataPath::setPathTemplate(const QString &path_template) {
    m_path_template = path_template;
    m_path_template_isSet = true;
}

bool OAIODataPath::is_path_template_Set() const{
    return m_path_template_isSet;
}

bool OAIODataPath::is_path_template_Valid() const{
    return m_path_template_isValid;
}

QList<OAIODataPathSegment> OAIODataPath::getSegments() const {
    return m_segments;
}
void OAIODataPath::setSegments(const QList<OAIODataPathSegment> &segments) {
    m_segments = segments;
    m_segments_isSet = true;
}

bool OAIODataPath::is_segments_Set() const{
    return m_segments_isSet;
}

bool OAIODataPath::is_segments_Valid() const{
    return m_segments_isValid;
}

bool OAIODataPath::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_edm_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_navigation_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_path.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_template_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_segments.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIODataPath::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
