/**
 * Azure Migrate Hub
 * Migrate your workloads to Azure.
 *
 * The version of the OpenAPI document: 2018-09-01-preview
 * Contact: azuremigratehub@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIEdmTerm.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIEdmTerm::OAIIEdmTerm(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIEdmTerm::OAIIEdmTerm() {
    this->initializeModel();
}

OAIIEdmTerm::~OAIIEdmTerm() {}

void OAIIEdmTerm::initializeModel() {

    m_applies_to_isSet = false;
    m_applies_to_isValid = false;

    m_default_value_isSet = false;
    m_default_value_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_r_namespace_isSet = false;
    m_r_namespace_isValid = false;

    m_schema_element_kind_isSet = false;
    m_schema_element_kind_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIIEdmTerm::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIEdmTerm::fromJsonObject(QJsonObject json) {

    m_applies_to_isValid = ::OpenAPI::fromJsonValue(m_applies_to, json[QString("appliesTo")]);
    m_applies_to_isSet = !json[QString("appliesTo")].isNull() && m_applies_to_isValid;

    m_default_value_isValid = ::OpenAPI::fromJsonValue(m_default_value, json[QString("defaultValue")]);
    m_default_value_isSet = !json[QString("defaultValue")].isNull() && m_default_value_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_r_namespace_isValid = ::OpenAPI::fromJsonValue(m_r_namespace, json[QString("namespace")]);
    m_r_namespace_isSet = !json[QString("namespace")].isNull() && m_r_namespace_isValid;

    m_schema_element_kind_isValid = ::OpenAPI::fromJsonValue(m_schema_element_kind, json[QString("schemaElementKind")]);
    m_schema_element_kind_isSet = !json[QString("schemaElementKind")].isNull() && m_schema_element_kind_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIIEdmTerm::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIEdmTerm::asJsonObject() const {
    QJsonObject obj;
    if (m_applies_to_isSet) {
        obj.insert(QString("appliesTo"), ::OpenAPI::toJsonValue(m_applies_to));
    }
    if (m_default_value_isSet) {
        obj.insert(QString("defaultValue"), ::OpenAPI::toJsonValue(m_default_value));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_r_namespace_isSet) {
        obj.insert(QString("namespace"), ::OpenAPI::toJsonValue(m_r_namespace));
    }
    if (m_schema_element_kind_isSet) {
        obj.insert(QString("schemaElementKind"), ::OpenAPI::toJsonValue(m_schema_element_kind));
    }
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIIEdmTerm::getAppliesTo() const {
    return m_applies_to;
}
void OAIIEdmTerm::setAppliesTo(const QString &applies_to) {
    m_applies_to = applies_to;
    m_applies_to_isSet = true;
}

bool OAIIEdmTerm::is_applies_to_Set() const{
    return m_applies_to_isSet;
}

bool OAIIEdmTerm::is_applies_to_Valid() const{
    return m_applies_to_isValid;
}

QString OAIIEdmTerm::getDefaultValue() const {
    return m_default_value;
}
void OAIIEdmTerm::setDefaultValue(const QString &default_value) {
    m_default_value = default_value;
    m_default_value_isSet = true;
}

bool OAIIEdmTerm::is_default_value_Set() const{
    return m_default_value_isSet;
}

bool OAIIEdmTerm::is_default_value_Valid() const{
    return m_default_value_isValid;
}

QString OAIIEdmTerm::getName() const {
    return m_name;
}
void OAIIEdmTerm::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIIEdmTerm::is_name_Set() const{
    return m_name_isSet;
}

bool OAIIEdmTerm::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIIEdmTerm::getRNamespace() const {
    return m_r_namespace;
}
void OAIIEdmTerm::setRNamespace(const QString &r_namespace) {
    m_r_namespace = r_namespace;
    m_r_namespace_isSet = true;
}

bool OAIIEdmTerm::is_r_namespace_Set() const{
    return m_r_namespace_isSet;
}

bool OAIIEdmTerm::is_r_namespace_Valid() const{
    return m_r_namespace_isValid;
}

QString OAIIEdmTerm::getSchemaElementKind() const {
    return m_schema_element_kind;
}
void OAIIEdmTerm::setSchemaElementKind(const QString &schema_element_kind) {
    m_schema_element_kind = schema_element_kind;
    m_schema_element_kind_isSet = true;
}

bool OAIIEdmTerm::is_schema_element_kind_Set() const{
    return m_schema_element_kind_isSet;
}

bool OAIIEdmTerm::is_schema_element_kind_Valid() const{
    return m_schema_element_kind_isValid;
}

OAIIEdmTypeReference OAIIEdmTerm::getType() const {
    return m_type;
}
void OAIIEdmTerm::setType(const OAIIEdmTypeReference &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIIEdmTerm::is_type_Set() const{
    return m_type_isSet;
}

bool OAIIEdmTerm::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIIEdmTerm::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_applies_to_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_namespace_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema_element_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIEdmTerm::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
