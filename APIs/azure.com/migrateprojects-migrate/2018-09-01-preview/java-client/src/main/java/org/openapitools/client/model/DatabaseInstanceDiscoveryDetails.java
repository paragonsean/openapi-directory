/*
 * Azure Migrate Hub
 * Migrate your workloads to Azure.
 *
 * The version of the OpenAPI document: 2018-09-01-preview
 * Contact: azuremigratehub@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Discovery properties that can be shared by various publishers.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:17:48.937321-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DatabaseInstanceDiscoveryDetails {
  public static final String SERIALIZED_NAME_ENQUEUE_TIME = "enqueueTime";
  @SerializedName(SERIALIZED_NAME_ENQUEUE_TIME)
  private String enqueueTime;

  public static final String SERIALIZED_NAME_EXTENDED_INFO = "extendedInfo";
  @SerializedName(SERIALIZED_NAME_EXTENDED_INFO)
  private Map<String, String> extendedInfo = new HashMap<>();

  public static final String SERIALIZED_NAME_HOST_NAME = "hostName";
  @SerializedName(SERIALIZED_NAME_HOST_NAME)
  private String hostName;

  public static final String SERIALIZED_NAME_INSTANCE_ID = "instanceId";
  @SerializedName(SERIALIZED_NAME_INSTANCE_ID)
  private String instanceId;

  public static final String SERIALIZED_NAME_INSTANCE_NAME = "instanceName";
  @SerializedName(SERIALIZED_NAME_INSTANCE_NAME)
  private String instanceName;

  public static final String SERIALIZED_NAME_INSTANCE_TYPE = "instanceType";
  @SerializedName(SERIALIZED_NAME_INSTANCE_TYPE)
  private String instanceType;

  public static final String SERIALIZED_NAME_INSTANCE_VERSION = "instanceVersion";
  @SerializedName(SERIALIZED_NAME_INSTANCE_VERSION)
  private String instanceVersion;

  public static final String SERIALIZED_NAME_IP_ADDRESS = "ipAddress";
  @SerializedName(SERIALIZED_NAME_IP_ADDRESS)
  private String ipAddress;

  public static final String SERIALIZED_NAME_LAST_UPDATED_TIME = "lastUpdatedTime";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED_TIME)
  private OffsetDateTime lastUpdatedTime;

  public static final String SERIALIZED_NAME_PORT_NUMBER = "portNumber";
  @SerializedName(SERIALIZED_NAME_PORT_NUMBER)
  private Integer portNumber;

  public static final String SERIALIZED_NAME_SOLUTION_NAME = "solutionName";
  @SerializedName(SERIALIZED_NAME_SOLUTION_NAME)
  private String solutionName;

  public DatabaseInstanceDiscoveryDetails() {
  }

  public DatabaseInstanceDiscoveryDetails enqueueTime(String enqueueTime) {
    this.enqueueTime = enqueueTime;
    return this;
  }

  /**
   * Gets or sets the time the message was enqueued.
   * @return enqueueTime
   */
  @javax.annotation.Nullable
  public String getEnqueueTime() {
    return enqueueTime;
  }

  public void setEnqueueTime(String enqueueTime) {
    this.enqueueTime = enqueueTime;
  }


  public DatabaseInstanceDiscoveryDetails extendedInfo(Map<String, String> extendedInfo) {
    this.extendedInfo = extendedInfo;
    return this;
  }

  public DatabaseInstanceDiscoveryDetails putExtendedInfoItem(String key, String extendedInfoItem) {
    if (this.extendedInfo == null) {
      this.extendedInfo = new HashMap<>();
    }
    this.extendedInfo.put(key, extendedInfoItem);
    return this;
  }

  /**
   * Gets or sets the extended properties of the database server.
   * @return extendedInfo
   */
  @javax.annotation.Nullable
  public Map<String, String> getExtendedInfo() {
    return extendedInfo;
  }

  public void setExtendedInfo(Map<String, String> extendedInfo) {
    this.extendedInfo = extendedInfo;
  }


  public DatabaseInstanceDiscoveryDetails hostName(String hostName) {
    this.hostName = hostName;
    return this;
  }

  /**
   * Gets or sets the host name of the database server.
   * @return hostName
   */
  @javax.annotation.Nullable
  public String getHostName() {
    return hostName;
  }

  public void setHostName(String hostName) {
    this.hostName = hostName;
  }


  public DatabaseInstanceDiscoveryDetails instanceId(String instanceId) {
    this.instanceId = instanceId;
    return this;
  }

  /**
   * Gets or sets the database instance Id.
   * @return instanceId
   */
  @javax.annotation.Nullable
  public String getInstanceId() {
    return instanceId;
  }

  public void setInstanceId(String instanceId) {
    this.instanceId = instanceId;
  }


  public DatabaseInstanceDiscoveryDetails instanceName(String instanceName) {
    this.instanceName = instanceName;
    return this;
  }

  /**
   * Gets or sets the database instance name.
   * @return instanceName
   */
  @javax.annotation.Nullable
  public String getInstanceName() {
    return instanceName;
  }

  public void setInstanceName(String instanceName) {
    this.instanceName = instanceName;
  }


  public DatabaseInstanceDiscoveryDetails instanceType(String instanceType) {
    this.instanceType = instanceType;
    return this;
  }

  /**
   * Gets or sets the database instance type.
   * @return instanceType
   */
  @javax.annotation.Nullable
  public String getInstanceType() {
    return instanceType;
  }

  public void setInstanceType(String instanceType) {
    this.instanceType = instanceType;
  }


  public DatabaseInstanceDiscoveryDetails instanceVersion(String instanceVersion) {
    this.instanceVersion = instanceVersion;
    return this;
  }

  /**
   * Gets or sets the database instance version.
   * @return instanceVersion
   */
  @javax.annotation.Nullable
  public String getInstanceVersion() {
    return instanceVersion;
  }

  public void setInstanceVersion(String instanceVersion) {
    this.instanceVersion = instanceVersion;
  }


  public DatabaseInstanceDiscoveryDetails ipAddress(String ipAddress) {
    this.ipAddress = ipAddress;
    return this;
  }

  /**
   * Gets or sets the IP addresses of the database server. IP addresses could be IP V4 or IP V6.
   * @return ipAddress
   */
  @javax.annotation.Nullable
  public String getIpAddress() {
    return ipAddress;
  }

  public void setIpAddress(String ipAddress) {
    this.ipAddress = ipAddress;
  }


  public DatabaseInstanceDiscoveryDetails lastUpdatedTime(OffsetDateTime lastUpdatedTime) {
    this.lastUpdatedTime = lastUpdatedTime;
    return this;
  }

  /**
   * Gets or sets the time of the last modification of the database instance details.
   * @return lastUpdatedTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastUpdatedTime() {
    return lastUpdatedTime;
  }

  public void setLastUpdatedTime(OffsetDateTime lastUpdatedTime) {
    this.lastUpdatedTime = lastUpdatedTime;
  }


  public DatabaseInstanceDiscoveryDetails portNumber(Integer portNumber) {
    this.portNumber = portNumber;
    return this;
  }

  /**
   * Gets or sets the port number of the database server.
   * @return portNumber
   */
  @javax.annotation.Nullable
  public Integer getPortNumber() {
    return portNumber;
  }

  public void setPortNumber(Integer portNumber) {
    this.portNumber = portNumber;
  }


  public DatabaseInstanceDiscoveryDetails solutionName(String solutionName) {
    this.solutionName = solutionName;
    return this;
  }

  /**
   * Gets or sets the name of the solution that sent the data.
   * @return solutionName
   */
  @javax.annotation.Nullable
  public String getSolutionName() {
    return solutionName;
  }

  public void setSolutionName(String solutionName) {
    this.solutionName = solutionName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DatabaseInstanceDiscoveryDetails databaseInstanceDiscoveryDetails = (DatabaseInstanceDiscoveryDetails) o;
    return Objects.equals(this.enqueueTime, databaseInstanceDiscoveryDetails.enqueueTime) &&
        Objects.equals(this.extendedInfo, databaseInstanceDiscoveryDetails.extendedInfo) &&
        Objects.equals(this.hostName, databaseInstanceDiscoveryDetails.hostName) &&
        Objects.equals(this.instanceId, databaseInstanceDiscoveryDetails.instanceId) &&
        Objects.equals(this.instanceName, databaseInstanceDiscoveryDetails.instanceName) &&
        Objects.equals(this.instanceType, databaseInstanceDiscoveryDetails.instanceType) &&
        Objects.equals(this.instanceVersion, databaseInstanceDiscoveryDetails.instanceVersion) &&
        Objects.equals(this.ipAddress, databaseInstanceDiscoveryDetails.ipAddress) &&
        Objects.equals(this.lastUpdatedTime, databaseInstanceDiscoveryDetails.lastUpdatedTime) &&
        Objects.equals(this.portNumber, databaseInstanceDiscoveryDetails.portNumber) &&
        Objects.equals(this.solutionName, databaseInstanceDiscoveryDetails.solutionName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(enqueueTime, extendedInfo, hostName, instanceId, instanceName, instanceType, instanceVersion, ipAddress, lastUpdatedTime, portNumber, solutionName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DatabaseInstanceDiscoveryDetails {\n");
    sb.append("    enqueueTime: ").append(toIndentedString(enqueueTime)).append("\n");
    sb.append("    extendedInfo: ").append(toIndentedString(extendedInfo)).append("\n");
    sb.append("    hostName: ").append(toIndentedString(hostName)).append("\n");
    sb.append("    instanceId: ").append(toIndentedString(instanceId)).append("\n");
    sb.append("    instanceName: ").append(toIndentedString(instanceName)).append("\n");
    sb.append("    instanceType: ").append(toIndentedString(instanceType)).append("\n");
    sb.append("    instanceVersion: ").append(toIndentedString(instanceVersion)).append("\n");
    sb.append("    ipAddress: ").append(toIndentedString(ipAddress)).append("\n");
    sb.append("    lastUpdatedTime: ").append(toIndentedString(lastUpdatedTime)).append("\n");
    sb.append("    portNumber: ").append(toIndentedString(portNumber)).append("\n");
    sb.append("    solutionName: ").append(toIndentedString(solutionName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("enqueueTime");
    openapiFields.add("extendedInfo");
    openapiFields.add("hostName");
    openapiFields.add("instanceId");
    openapiFields.add("instanceName");
    openapiFields.add("instanceType");
    openapiFields.add("instanceVersion");
    openapiFields.add("ipAddress");
    openapiFields.add("lastUpdatedTime");
    openapiFields.add("portNumber");
    openapiFields.add("solutionName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DatabaseInstanceDiscoveryDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DatabaseInstanceDiscoveryDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DatabaseInstanceDiscoveryDetails is not found in the empty JSON string", DatabaseInstanceDiscoveryDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DatabaseInstanceDiscoveryDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DatabaseInstanceDiscoveryDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("enqueueTime") != null && !jsonObj.get("enqueueTime").isJsonNull()) && !jsonObj.get("enqueueTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `enqueueTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("enqueueTime").toString()));
      }
      if ((jsonObj.get("hostName") != null && !jsonObj.get("hostName").isJsonNull()) && !jsonObj.get("hostName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hostName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hostName").toString()));
      }
      if ((jsonObj.get("instanceId") != null && !jsonObj.get("instanceId").isJsonNull()) && !jsonObj.get("instanceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `instanceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("instanceId").toString()));
      }
      if ((jsonObj.get("instanceName") != null && !jsonObj.get("instanceName").isJsonNull()) && !jsonObj.get("instanceName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `instanceName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("instanceName").toString()));
      }
      if ((jsonObj.get("instanceType") != null && !jsonObj.get("instanceType").isJsonNull()) && !jsonObj.get("instanceType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `instanceType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("instanceType").toString()));
      }
      if ((jsonObj.get("instanceVersion") != null && !jsonObj.get("instanceVersion").isJsonNull()) && !jsonObj.get("instanceVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `instanceVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("instanceVersion").toString()));
      }
      if ((jsonObj.get("ipAddress") != null && !jsonObj.get("ipAddress").isJsonNull()) && !jsonObj.get("ipAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ipAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ipAddress").toString()));
      }
      if ((jsonObj.get("solutionName") != null && !jsonObj.get("solutionName").isJsonNull()) && !jsonObj.get("solutionName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `solutionName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("solutionName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DatabaseInstanceDiscoveryDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DatabaseInstanceDiscoveryDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DatabaseInstanceDiscoveryDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DatabaseInstanceDiscoveryDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<DatabaseInstanceDiscoveryDetails>() {
           @Override
           public void write(JsonWriter out, DatabaseInstanceDiscoveryDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DatabaseInstanceDiscoveryDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DatabaseInstanceDiscoveryDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DatabaseInstanceDiscoveryDetails
   * @throws IOException if the JSON string is invalid with respect to DatabaseInstanceDiscoveryDetails
   */
  public static DatabaseInstanceDiscoveryDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DatabaseInstanceDiscoveryDetails.class);
  }

  /**
   * Convert an instance of DatabaseInstanceDiscoveryDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

