/*
 * Azure Migrate Hub
 * Migrate your workloads to Azure.
 *
 * The version of the OpenAPI document: 2018-09-01-preview
 * Contact: azuremigratehub@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.SolutionDetails;
import org.openapitools.client.model.SolutionSummary;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Class for solution properties.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:17:48.937321-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SolutionProperties {
  /**
   * Gets or sets the cleanup state of the solution.
   */
  @JsonAdapter(CleanupStateEnum.Adapter.class)
  public enum CleanupStateEnum {
    NONE("None"),
    
    STARTED("Started"),
    
    IN_PROGRESS("InProgress"),
    
    COMPLETED("Completed"),
    
    FAILED("Failed");

    private String value;

    CleanupStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CleanupStateEnum fromValue(String value) {
      for (CleanupStateEnum b : CleanupStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CleanupStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CleanupStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CleanupStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CleanupStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CleanupStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CLEANUP_STATE = "cleanupState";
  @SerializedName(SERIALIZED_NAME_CLEANUP_STATE)
  private CleanupStateEnum cleanupState;

  public static final String SERIALIZED_NAME_DETAILS = "details";
  @SerializedName(SERIALIZED_NAME_DETAILS)
  private SolutionDetails details;

  /**
   * Gets or sets the goal of the solution.
   */
  @JsonAdapter(GoalEnum.Adapter.class)
  public enum GoalEnum {
    SERVERS("Servers"),
    
    DATABASES("Databases");

    private String value;

    GoalEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static GoalEnum fromValue(String value) {
      for (GoalEnum b : GoalEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<GoalEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final GoalEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public GoalEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return GoalEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      GoalEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_GOAL = "goal";
  @SerializedName(SERIALIZED_NAME_GOAL)
  private GoalEnum goal;

  /**
   * Gets or sets the purpose of the solution.
   */
  @JsonAdapter(PurposeEnum.Adapter.class)
  public enum PurposeEnum {
    DISCOVERY("Discovery"),
    
    ASSESSMENT("Assessment"),
    
    MIGRATION("Migration");

    private String value;

    PurposeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PurposeEnum fromValue(String value) {
      for (PurposeEnum b : PurposeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PurposeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PurposeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PurposeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PurposeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PurposeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PURPOSE = "purpose";
  @SerializedName(SERIALIZED_NAME_PURPOSE)
  private PurposeEnum purpose;

  /**
   * Gets or sets the current status of the solution.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    INACTIVE("Inactive"),
    
    ACTIVE("Active");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_SUMMARY = "summary";
  @SerializedName(SERIALIZED_NAME_SUMMARY)
  private SolutionSummary summary;

  /**
   * Gets or sets the tool being used in the solution.
   */
  @JsonAdapter(ToolEnum.Adapter.class)
  public enum ToolEnum {
    SERVER_DISCOVERY("ServerDiscovery"),
    
    SERVER_ASSESSMENT("ServerAssessment"),
    
    SERVER_MIGRATION("ServerMigration"),
    
    CLOUDAMIZE("Cloudamize"),
    
    TURBONOMIC("Turbonomic"),
    
    ZERTO("Zerto"),
    
    CORENT_TECH("CorentTech"),
    
    SERVER_ASSESSMENT_V1("ServerAssessmentV1"),
    
    SERVER_MIGRATION_REPLICATION("ServerMigration_Replication"),
    
    CARBONITE("Carbonite"),
    
    DATA_MIGRATION_ASSISTANT("DataMigrationAssistant"),
    
    DATABASE_MIGRATION_SERVICE("DatabaseMigrationService");

    private String value;

    ToolEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ToolEnum fromValue(String value) {
      for (ToolEnum b : ToolEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ToolEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ToolEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ToolEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ToolEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ToolEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TOOL = "tool";
  @SerializedName(SERIALIZED_NAME_TOOL)
  private ToolEnum tool;

  public SolutionProperties() {
  }

  public SolutionProperties cleanupState(CleanupStateEnum cleanupState) {
    this.cleanupState = cleanupState;
    return this;
  }

  /**
   * Gets or sets the cleanup state of the solution.
   * @return cleanupState
   */
  @javax.annotation.Nullable
  public CleanupStateEnum getCleanupState() {
    return cleanupState;
  }

  public void setCleanupState(CleanupStateEnum cleanupState) {
    this.cleanupState = cleanupState;
  }


  public SolutionProperties details(SolutionDetails details) {
    this.details = details;
    return this;
  }

  /**
   * Get details
   * @return details
   */
  @javax.annotation.Nullable
  public SolutionDetails getDetails() {
    return details;
  }

  public void setDetails(SolutionDetails details) {
    this.details = details;
  }


  public SolutionProperties goal(GoalEnum goal) {
    this.goal = goal;
    return this;
  }

  /**
   * Gets or sets the goal of the solution.
   * @return goal
   */
  @javax.annotation.Nullable
  public GoalEnum getGoal() {
    return goal;
  }

  public void setGoal(GoalEnum goal) {
    this.goal = goal;
  }


  public SolutionProperties purpose(PurposeEnum purpose) {
    this.purpose = purpose;
    return this;
  }

  /**
   * Gets or sets the purpose of the solution.
   * @return purpose
   */
  @javax.annotation.Nullable
  public PurposeEnum getPurpose() {
    return purpose;
  }

  public void setPurpose(PurposeEnum purpose) {
    this.purpose = purpose;
  }


  public SolutionProperties status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * Gets or sets the current status of the solution.
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public SolutionProperties summary(SolutionSummary summary) {
    this.summary = summary;
    return this;
  }

  /**
   * Get summary
   * @return summary
   */
  @javax.annotation.Nullable
  public SolutionSummary getSummary() {
    return summary;
  }

  public void setSummary(SolutionSummary summary) {
    this.summary = summary;
  }


  public SolutionProperties tool(ToolEnum tool) {
    this.tool = tool;
    return this;
  }

  /**
   * Gets or sets the tool being used in the solution.
   * @return tool
   */
  @javax.annotation.Nullable
  public ToolEnum getTool() {
    return tool;
  }

  public void setTool(ToolEnum tool) {
    this.tool = tool;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SolutionProperties solutionProperties = (SolutionProperties) o;
    return Objects.equals(this.cleanupState, solutionProperties.cleanupState) &&
        Objects.equals(this.details, solutionProperties.details) &&
        Objects.equals(this.goal, solutionProperties.goal) &&
        Objects.equals(this.purpose, solutionProperties.purpose) &&
        Objects.equals(this.status, solutionProperties.status) &&
        Objects.equals(this.summary, solutionProperties.summary) &&
        Objects.equals(this.tool, solutionProperties.tool);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cleanupState, details, goal, purpose, status, summary, tool);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SolutionProperties {\n");
    sb.append("    cleanupState: ").append(toIndentedString(cleanupState)).append("\n");
    sb.append("    details: ").append(toIndentedString(details)).append("\n");
    sb.append("    goal: ").append(toIndentedString(goal)).append("\n");
    sb.append("    purpose: ").append(toIndentedString(purpose)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    summary: ").append(toIndentedString(summary)).append("\n");
    sb.append("    tool: ").append(toIndentedString(tool)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cleanupState");
    openapiFields.add("details");
    openapiFields.add("goal");
    openapiFields.add("purpose");
    openapiFields.add("status");
    openapiFields.add("summary");
    openapiFields.add("tool");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SolutionProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SolutionProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SolutionProperties is not found in the empty JSON string", SolutionProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SolutionProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SolutionProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("cleanupState") != null && !jsonObj.get("cleanupState").isJsonNull()) && !jsonObj.get("cleanupState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cleanupState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cleanupState").toString()));
      }
      // validate the optional field `cleanupState`
      if (jsonObj.get("cleanupState") != null && !jsonObj.get("cleanupState").isJsonNull()) {
        CleanupStateEnum.validateJsonElement(jsonObj.get("cleanupState"));
      }
      // validate the optional field `details`
      if (jsonObj.get("details") != null && !jsonObj.get("details").isJsonNull()) {
        SolutionDetails.validateJsonElement(jsonObj.get("details"));
      }
      if ((jsonObj.get("goal") != null && !jsonObj.get("goal").isJsonNull()) && !jsonObj.get("goal").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `goal` to be a primitive type in the JSON string but got `%s`", jsonObj.get("goal").toString()));
      }
      // validate the optional field `goal`
      if (jsonObj.get("goal") != null && !jsonObj.get("goal").isJsonNull()) {
        GoalEnum.validateJsonElement(jsonObj.get("goal"));
      }
      if ((jsonObj.get("purpose") != null && !jsonObj.get("purpose").isJsonNull()) && !jsonObj.get("purpose").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `purpose` to be a primitive type in the JSON string but got `%s`", jsonObj.get("purpose").toString()));
      }
      // validate the optional field `purpose`
      if (jsonObj.get("purpose") != null && !jsonObj.get("purpose").isJsonNull()) {
        PurposeEnum.validateJsonElement(jsonObj.get("purpose"));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
      // validate the optional field `summary`
      if (jsonObj.get("summary") != null && !jsonObj.get("summary").isJsonNull()) {
        SolutionSummary.validateJsonElement(jsonObj.get("summary"));
      }
      if ((jsonObj.get("tool") != null && !jsonObj.get("tool").isJsonNull()) && !jsonObj.get("tool").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tool` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tool").toString()));
      }
      // validate the optional field `tool`
      if (jsonObj.get("tool") != null && !jsonObj.get("tool").isJsonNull()) {
        ToolEnum.validateJsonElement(jsonObj.get("tool"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SolutionProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SolutionProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SolutionProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SolutionProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<SolutionProperties>() {
           @Override
           public void write(JsonWriter out, SolutionProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SolutionProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SolutionProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SolutionProperties
   * @throws IOException if the JSON string is invalid with respect to SolutionProperties
   */
  public static SolutionProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SolutionProperties.class);
  }

  /**
   * Convert an instance of SolutionProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

