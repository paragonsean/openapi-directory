/*
 * Azure Migrate Hub
 * Migrate your workloads to Azure.
 *
 * The version of the OpenAPI document: 2018-09-01-preview
 * Contact: azuremigratehub@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.DefaultQuerySettings;
import org.openapitools.client.model.IEdmModel;
import org.openapitools.client.model.IEdmNavigationSource;
import org.openapitools.client.model.IEdmType;
import org.openapitools.client.model.ODataPath;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ODataQueryContext
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:17:48.937321-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ODataQueryContext {
  public static final String SERIALIZED_NAME_DEFAULT_QUERY_SETTINGS = "defaultQuerySettings";
  @SerializedName(SERIALIZED_NAME_DEFAULT_QUERY_SETTINGS)
  private DefaultQuerySettings defaultQuerySettings;

  public static final String SERIALIZED_NAME_ELEMENT_CLR_TYPE = "elementClrType";
  @SerializedName(SERIALIZED_NAME_ELEMENT_CLR_TYPE)
  private String elementClrType;

  public static final String SERIALIZED_NAME_ELEMENT_TYPE = "elementType";
  @SerializedName(SERIALIZED_NAME_ELEMENT_TYPE)
  private IEdmType elementType;

  public static final String SERIALIZED_NAME_MODEL = "model";
  @SerializedName(SERIALIZED_NAME_MODEL)
  private IEdmModel model;

  public static final String SERIALIZED_NAME_NAVIGATION_SOURCE = "navigationSource";
  @SerializedName(SERIALIZED_NAME_NAVIGATION_SOURCE)
  private IEdmNavigationSource navigationSource;

  public static final String SERIALIZED_NAME_PATH = "path";
  @SerializedName(SERIALIZED_NAME_PATH)
  private ODataPath path;

  public static final String SERIALIZED_NAME_REQUEST_CONTAINER = "requestContainer";
  @SerializedName(SERIALIZED_NAME_REQUEST_CONTAINER)
  private Object requestContainer;

  public ODataQueryContext() {
  }

  public ODataQueryContext(
     String elementClrType
  ) {
    this();
    this.elementClrType = elementClrType;
  }

  public ODataQueryContext defaultQuerySettings(DefaultQuerySettings defaultQuerySettings) {
    this.defaultQuerySettings = defaultQuerySettings;
    return this;
  }

  /**
   * Get defaultQuerySettings
   * @return defaultQuerySettings
   */
  @javax.annotation.Nullable
  public DefaultQuerySettings getDefaultQuerySettings() {
    return defaultQuerySettings;
  }

  public void setDefaultQuerySettings(DefaultQuerySettings defaultQuerySettings) {
    this.defaultQuerySettings = defaultQuerySettings;
  }


  /**
   * Get elementClrType
   * @return elementClrType
   */
  @javax.annotation.Nullable
  public String getElementClrType() {
    return elementClrType;
  }



  public ODataQueryContext elementType(IEdmType elementType) {
    this.elementType = elementType;
    return this;
  }

  /**
   * Get elementType
   * @return elementType
   */
  @javax.annotation.Nullable
  public IEdmType getElementType() {
    return elementType;
  }

  public void setElementType(IEdmType elementType) {
    this.elementType = elementType;
  }


  public ODataQueryContext model(IEdmModel model) {
    this.model = model;
    return this;
  }

  /**
   * Get model
   * @return model
   */
  @javax.annotation.Nullable
  public IEdmModel getModel() {
    return model;
  }

  public void setModel(IEdmModel model) {
    this.model = model;
  }


  public ODataQueryContext navigationSource(IEdmNavigationSource navigationSource) {
    this.navigationSource = navigationSource;
    return this;
  }

  /**
   * Get navigationSource
   * @return navigationSource
   */
  @javax.annotation.Nullable
  public IEdmNavigationSource getNavigationSource() {
    return navigationSource;
  }

  public void setNavigationSource(IEdmNavigationSource navigationSource) {
    this.navigationSource = navigationSource;
  }


  public ODataQueryContext path(ODataPath path) {
    this.path = path;
    return this;
  }

  /**
   * Get path
   * @return path
   */
  @javax.annotation.Nullable
  public ODataPath getPath() {
    return path;
  }

  public void setPath(ODataPath path) {
    this.path = path;
  }


  public ODataQueryContext requestContainer(Object requestContainer) {
    this.requestContainer = requestContainer;
    return this;
  }

  /**
   * Get requestContainer
   * @return requestContainer
   */
  @javax.annotation.Nullable
  public Object getRequestContainer() {
    return requestContainer;
  }

  public void setRequestContainer(Object requestContainer) {
    this.requestContainer = requestContainer;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ODataQueryContext odataQueryContext = (ODataQueryContext) o;
    return Objects.equals(this.defaultQuerySettings, odataQueryContext.defaultQuerySettings) &&
        Objects.equals(this.elementClrType, odataQueryContext.elementClrType) &&
        Objects.equals(this.elementType, odataQueryContext.elementType) &&
        Objects.equals(this.model, odataQueryContext.model) &&
        Objects.equals(this.navigationSource, odataQueryContext.navigationSource) &&
        Objects.equals(this.path, odataQueryContext.path) &&
        Objects.equals(this.requestContainer, odataQueryContext.requestContainer);
  }

  @Override
  public int hashCode() {
    return Objects.hash(defaultQuerySettings, elementClrType, elementType, model, navigationSource, path, requestContainer);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ODataQueryContext {\n");
    sb.append("    defaultQuerySettings: ").append(toIndentedString(defaultQuerySettings)).append("\n");
    sb.append("    elementClrType: ").append(toIndentedString(elementClrType)).append("\n");
    sb.append("    elementType: ").append(toIndentedString(elementType)).append("\n");
    sb.append("    model: ").append(toIndentedString(model)).append("\n");
    sb.append("    navigationSource: ").append(toIndentedString(navigationSource)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    requestContainer: ").append(toIndentedString(requestContainer)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("defaultQuerySettings");
    openapiFields.add("elementClrType");
    openapiFields.add("elementType");
    openapiFields.add("model");
    openapiFields.add("navigationSource");
    openapiFields.add("path");
    openapiFields.add("requestContainer");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ODataQueryContext
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ODataQueryContext.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ODataQueryContext is not found in the empty JSON string", ODataQueryContext.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ODataQueryContext.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ODataQueryContext` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `defaultQuerySettings`
      if (jsonObj.get("defaultQuerySettings") != null && !jsonObj.get("defaultQuerySettings").isJsonNull()) {
        DefaultQuerySettings.validateJsonElement(jsonObj.get("defaultQuerySettings"));
      }
      if ((jsonObj.get("elementClrType") != null && !jsonObj.get("elementClrType").isJsonNull()) && !jsonObj.get("elementClrType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `elementClrType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("elementClrType").toString()));
      }
      // validate the optional field `elementType`
      if (jsonObj.get("elementType") != null && !jsonObj.get("elementType").isJsonNull()) {
        IEdmType.validateJsonElement(jsonObj.get("elementType"));
      }
      // validate the optional field `model`
      if (jsonObj.get("model") != null && !jsonObj.get("model").isJsonNull()) {
        IEdmModel.validateJsonElement(jsonObj.get("model"));
      }
      // validate the optional field `navigationSource`
      if (jsonObj.get("navigationSource") != null && !jsonObj.get("navigationSource").isJsonNull()) {
        IEdmNavigationSource.validateJsonElement(jsonObj.get("navigationSource"));
      }
      // validate the optional field `path`
      if (jsonObj.get("path") != null && !jsonObj.get("path").isJsonNull()) {
        ODataPath.validateJsonElement(jsonObj.get("path"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ODataQueryContext.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ODataQueryContext' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ODataQueryContext> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ODataQueryContext.class));

       return (TypeAdapter<T>) new TypeAdapter<ODataQueryContext>() {
           @Override
           public void write(JsonWriter out, ODataQueryContext value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ODataQueryContext read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ODataQueryContext given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ODataQueryContext
   * @throws IOException if the JSON string is invalid with respect to ODataQueryContext
   */
  public static ODataQueryContext fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ODataQueryContext.class);
  }

  /**
   * Convert an instance of ODataQueryContext to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

