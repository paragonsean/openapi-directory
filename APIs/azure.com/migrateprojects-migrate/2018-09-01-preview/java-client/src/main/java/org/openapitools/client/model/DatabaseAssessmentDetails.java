/*
 * Azure Migrate Hub
 * Migrate your workloads to Azure.
 *
 * The version of the OpenAPI document: 2018-09-01-preview
 * Contact: azuremigratehub@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Assessment properties that can be shared by various publishers.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:17:48.937321-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DatabaseAssessmentDetails {
  public static final String SERIALIZED_NAME_ASSESSMENT_ID = "assessmentId";
  @SerializedName(SERIALIZED_NAME_ASSESSMENT_ID)
  private String assessmentId;

  public static final String SERIALIZED_NAME_ASSESSMENT_TARGET_TYPE = "assessmentTargetType";
  @SerializedName(SERIALIZED_NAME_ASSESSMENT_TARGET_TYPE)
  private String assessmentTargetType;

  public static final String SERIALIZED_NAME_BREAKING_CHANGES_COUNT = "breakingChangesCount";
  @SerializedName(SERIALIZED_NAME_BREAKING_CHANGES_COUNT)
  private Integer breakingChangesCount;

  public static final String SERIALIZED_NAME_COMPATIBILITY_LEVEL = "compatibilityLevel";
  @SerializedName(SERIALIZED_NAME_COMPATIBILITY_LEVEL)
  private String compatibilityLevel;

  public static final String SERIALIZED_NAME_DATABASE_NAME = "databaseName";
  @SerializedName(SERIALIZED_NAME_DATABASE_NAME)
  private String databaseName;

  public static final String SERIALIZED_NAME_DATABASE_SIZE_IN_M_B = "databaseSizeInMB";
  @SerializedName(SERIALIZED_NAME_DATABASE_SIZE_IN_M_B)
  private String databaseSizeInMB;

  public static final String SERIALIZED_NAME_ENQUEUE_TIME = "enqueueTime";
  @SerializedName(SERIALIZED_NAME_ENQUEUE_TIME)
  private String enqueueTime;

  public static final String SERIALIZED_NAME_EXTENDED_INFO = "extendedInfo";
  @SerializedName(SERIALIZED_NAME_EXTENDED_INFO)
  private Map<String, String> extendedInfo = new HashMap<>();

  public static final String SERIALIZED_NAME_INSTANCE_ID = "instanceId";
  @SerializedName(SERIALIZED_NAME_INSTANCE_ID)
  private String instanceId;

  public static final String SERIALIZED_NAME_IS_READY_FOR_MIGRATION = "isReadyForMigration";
  @SerializedName(SERIALIZED_NAME_IS_READY_FOR_MIGRATION)
  private Boolean isReadyForMigration;

  public static final String SERIALIZED_NAME_LAST_ASSESSED_TIME = "lastAssessedTime";
  @SerializedName(SERIALIZED_NAME_LAST_ASSESSED_TIME)
  private OffsetDateTime lastAssessedTime;

  public static final String SERIALIZED_NAME_LAST_UPDATED_TIME = "lastUpdatedTime";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED_TIME)
  private OffsetDateTime lastUpdatedTime;

  public static final String SERIALIZED_NAME_MIGRATION_BLOCKERS_COUNT = "migrationBlockersCount";
  @SerializedName(SERIALIZED_NAME_MIGRATION_BLOCKERS_COUNT)
  private Integer migrationBlockersCount;

  public static final String SERIALIZED_NAME_SOLUTION_NAME = "solutionName";
  @SerializedName(SERIALIZED_NAME_SOLUTION_NAME)
  private String solutionName;

  public DatabaseAssessmentDetails() {
  }

  public DatabaseAssessmentDetails assessmentId(String assessmentId) {
    this.assessmentId = assessmentId;
    return this;
  }

  /**
   * Gets or sets the database assessment scope/Id.
   * @return assessmentId
   */
  @javax.annotation.Nullable
  public String getAssessmentId() {
    return assessmentId;
  }

  public void setAssessmentId(String assessmentId) {
    this.assessmentId = assessmentId;
  }


  public DatabaseAssessmentDetails assessmentTargetType(String assessmentTargetType) {
    this.assessmentTargetType = assessmentTargetType;
    return this;
  }

  /**
   * Gets or sets the assessed target database type.
   * @return assessmentTargetType
   */
  @javax.annotation.Nullable
  public String getAssessmentTargetType() {
    return assessmentTargetType;
  }

  public void setAssessmentTargetType(String assessmentTargetType) {
    this.assessmentTargetType = assessmentTargetType;
  }


  public DatabaseAssessmentDetails breakingChangesCount(Integer breakingChangesCount) {
    this.breakingChangesCount = breakingChangesCount;
    return this;
  }

  /**
   * Gets or sets the number of breaking changes found.
   * @return breakingChangesCount
   */
  @javax.annotation.Nullable
  public Integer getBreakingChangesCount() {
    return breakingChangesCount;
  }

  public void setBreakingChangesCount(Integer breakingChangesCount) {
    this.breakingChangesCount = breakingChangesCount;
  }


  public DatabaseAssessmentDetails compatibilityLevel(String compatibilityLevel) {
    this.compatibilityLevel = compatibilityLevel;
    return this;
  }

  /**
   * Gets or sets the compatibility level of the database.
   * @return compatibilityLevel
   */
  @javax.annotation.Nullable
  public String getCompatibilityLevel() {
    return compatibilityLevel;
  }

  public void setCompatibilityLevel(String compatibilityLevel) {
    this.compatibilityLevel = compatibilityLevel;
  }


  public DatabaseAssessmentDetails databaseName(String databaseName) {
    this.databaseName = databaseName;
    return this;
  }

  /**
   * Gets or sets the database name.
   * @return databaseName
   */
  @javax.annotation.Nullable
  public String getDatabaseName() {
    return databaseName;
  }

  public void setDatabaseName(String databaseName) {
    this.databaseName = databaseName;
  }


  public DatabaseAssessmentDetails databaseSizeInMB(String databaseSizeInMB) {
    this.databaseSizeInMB = databaseSizeInMB;
    return this;
  }

  /**
   * Gets or sets the database size.
   * @return databaseSizeInMB
   */
  @javax.annotation.Nullable
  public String getDatabaseSizeInMB() {
    return databaseSizeInMB;
  }

  public void setDatabaseSizeInMB(String databaseSizeInMB) {
    this.databaseSizeInMB = databaseSizeInMB;
  }


  public DatabaseAssessmentDetails enqueueTime(String enqueueTime) {
    this.enqueueTime = enqueueTime;
    return this;
  }

  /**
   * Gets or sets the time the message was enqueued.
   * @return enqueueTime
   */
  @javax.annotation.Nullable
  public String getEnqueueTime() {
    return enqueueTime;
  }

  public void setEnqueueTime(String enqueueTime) {
    this.enqueueTime = enqueueTime;
  }


  public DatabaseAssessmentDetails extendedInfo(Map<String, String> extendedInfo) {
    this.extendedInfo = extendedInfo;
    return this;
  }

  public DatabaseAssessmentDetails putExtendedInfoItem(String key, String extendedInfoItem) {
    if (this.extendedInfo == null) {
      this.extendedInfo = new HashMap<>();
    }
    this.extendedInfo.put(key, extendedInfoItem);
    return this;
  }

  /**
   * Gets or sets the extended properties of the database.
   * @return extendedInfo
   */
  @javax.annotation.Nullable
  public Map<String, String> getExtendedInfo() {
    return extendedInfo;
  }

  public void setExtendedInfo(Map<String, String> extendedInfo) {
    this.extendedInfo = extendedInfo;
  }


  public DatabaseAssessmentDetails instanceId(String instanceId) {
    this.instanceId = instanceId;
    return this;
  }

  /**
   * Gets or sets the database server instance Id.
   * @return instanceId
   */
  @javax.annotation.Nullable
  public String getInstanceId() {
    return instanceId;
  }

  public void setInstanceId(String instanceId) {
    this.instanceId = instanceId;
  }


  public DatabaseAssessmentDetails isReadyForMigration(Boolean isReadyForMigration) {
    this.isReadyForMigration = isReadyForMigration;
    return this;
  }

  /**
   * Gets or sets a value indicating whether the database is ready for migration.
   * @return isReadyForMigration
   */
  @javax.annotation.Nullable
  public Boolean getIsReadyForMigration() {
    return isReadyForMigration;
  }

  public void setIsReadyForMigration(Boolean isReadyForMigration) {
    this.isReadyForMigration = isReadyForMigration;
  }


  public DatabaseAssessmentDetails lastAssessedTime(OffsetDateTime lastAssessedTime) {
    this.lastAssessedTime = lastAssessedTime;
    return this;
  }

  /**
   * Gets or sets the time when the database was last assessed.
   * @return lastAssessedTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastAssessedTime() {
    return lastAssessedTime;
  }

  public void setLastAssessedTime(OffsetDateTime lastAssessedTime) {
    this.lastAssessedTime = lastAssessedTime;
  }


  public DatabaseAssessmentDetails lastUpdatedTime(OffsetDateTime lastUpdatedTime) {
    this.lastUpdatedTime = lastUpdatedTime;
    return this;
  }

  /**
   * Gets or sets the time of the last modification of the database details.
   * @return lastUpdatedTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastUpdatedTime() {
    return lastUpdatedTime;
  }

  public void setLastUpdatedTime(OffsetDateTime lastUpdatedTime) {
    this.lastUpdatedTime = lastUpdatedTime;
  }


  public DatabaseAssessmentDetails migrationBlockersCount(Integer migrationBlockersCount) {
    this.migrationBlockersCount = migrationBlockersCount;
    return this;
  }

  /**
   * Gets or sets the number of blocking changes found.
   * @return migrationBlockersCount
   */
  @javax.annotation.Nullable
  public Integer getMigrationBlockersCount() {
    return migrationBlockersCount;
  }

  public void setMigrationBlockersCount(Integer migrationBlockersCount) {
    this.migrationBlockersCount = migrationBlockersCount;
  }


  public DatabaseAssessmentDetails solutionName(String solutionName) {
    this.solutionName = solutionName;
    return this;
  }

  /**
   * Gets or sets the name of the solution that sent the data.
   * @return solutionName
   */
  @javax.annotation.Nullable
  public String getSolutionName() {
    return solutionName;
  }

  public void setSolutionName(String solutionName) {
    this.solutionName = solutionName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DatabaseAssessmentDetails databaseAssessmentDetails = (DatabaseAssessmentDetails) o;
    return Objects.equals(this.assessmentId, databaseAssessmentDetails.assessmentId) &&
        Objects.equals(this.assessmentTargetType, databaseAssessmentDetails.assessmentTargetType) &&
        Objects.equals(this.breakingChangesCount, databaseAssessmentDetails.breakingChangesCount) &&
        Objects.equals(this.compatibilityLevel, databaseAssessmentDetails.compatibilityLevel) &&
        Objects.equals(this.databaseName, databaseAssessmentDetails.databaseName) &&
        Objects.equals(this.databaseSizeInMB, databaseAssessmentDetails.databaseSizeInMB) &&
        Objects.equals(this.enqueueTime, databaseAssessmentDetails.enqueueTime) &&
        Objects.equals(this.extendedInfo, databaseAssessmentDetails.extendedInfo) &&
        Objects.equals(this.instanceId, databaseAssessmentDetails.instanceId) &&
        Objects.equals(this.isReadyForMigration, databaseAssessmentDetails.isReadyForMigration) &&
        Objects.equals(this.lastAssessedTime, databaseAssessmentDetails.lastAssessedTime) &&
        Objects.equals(this.lastUpdatedTime, databaseAssessmentDetails.lastUpdatedTime) &&
        Objects.equals(this.migrationBlockersCount, databaseAssessmentDetails.migrationBlockersCount) &&
        Objects.equals(this.solutionName, databaseAssessmentDetails.solutionName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(assessmentId, assessmentTargetType, breakingChangesCount, compatibilityLevel, databaseName, databaseSizeInMB, enqueueTime, extendedInfo, instanceId, isReadyForMigration, lastAssessedTime, lastUpdatedTime, migrationBlockersCount, solutionName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DatabaseAssessmentDetails {\n");
    sb.append("    assessmentId: ").append(toIndentedString(assessmentId)).append("\n");
    sb.append("    assessmentTargetType: ").append(toIndentedString(assessmentTargetType)).append("\n");
    sb.append("    breakingChangesCount: ").append(toIndentedString(breakingChangesCount)).append("\n");
    sb.append("    compatibilityLevel: ").append(toIndentedString(compatibilityLevel)).append("\n");
    sb.append("    databaseName: ").append(toIndentedString(databaseName)).append("\n");
    sb.append("    databaseSizeInMB: ").append(toIndentedString(databaseSizeInMB)).append("\n");
    sb.append("    enqueueTime: ").append(toIndentedString(enqueueTime)).append("\n");
    sb.append("    extendedInfo: ").append(toIndentedString(extendedInfo)).append("\n");
    sb.append("    instanceId: ").append(toIndentedString(instanceId)).append("\n");
    sb.append("    isReadyForMigration: ").append(toIndentedString(isReadyForMigration)).append("\n");
    sb.append("    lastAssessedTime: ").append(toIndentedString(lastAssessedTime)).append("\n");
    sb.append("    lastUpdatedTime: ").append(toIndentedString(lastUpdatedTime)).append("\n");
    sb.append("    migrationBlockersCount: ").append(toIndentedString(migrationBlockersCount)).append("\n");
    sb.append("    solutionName: ").append(toIndentedString(solutionName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("assessmentId");
    openapiFields.add("assessmentTargetType");
    openapiFields.add("breakingChangesCount");
    openapiFields.add("compatibilityLevel");
    openapiFields.add("databaseName");
    openapiFields.add("databaseSizeInMB");
    openapiFields.add("enqueueTime");
    openapiFields.add("extendedInfo");
    openapiFields.add("instanceId");
    openapiFields.add("isReadyForMigration");
    openapiFields.add("lastAssessedTime");
    openapiFields.add("lastUpdatedTime");
    openapiFields.add("migrationBlockersCount");
    openapiFields.add("solutionName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DatabaseAssessmentDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DatabaseAssessmentDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DatabaseAssessmentDetails is not found in the empty JSON string", DatabaseAssessmentDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DatabaseAssessmentDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DatabaseAssessmentDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("assessmentId") != null && !jsonObj.get("assessmentId").isJsonNull()) && !jsonObj.get("assessmentId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `assessmentId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("assessmentId").toString()));
      }
      if ((jsonObj.get("assessmentTargetType") != null && !jsonObj.get("assessmentTargetType").isJsonNull()) && !jsonObj.get("assessmentTargetType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `assessmentTargetType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("assessmentTargetType").toString()));
      }
      if ((jsonObj.get("compatibilityLevel") != null && !jsonObj.get("compatibilityLevel").isJsonNull()) && !jsonObj.get("compatibilityLevel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `compatibilityLevel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("compatibilityLevel").toString()));
      }
      if ((jsonObj.get("databaseName") != null && !jsonObj.get("databaseName").isJsonNull()) && !jsonObj.get("databaseName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `databaseName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("databaseName").toString()));
      }
      if ((jsonObj.get("databaseSizeInMB") != null && !jsonObj.get("databaseSizeInMB").isJsonNull()) && !jsonObj.get("databaseSizeInMB").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `databaseSizeInMB` to be a primitive type in the JSON string but got `%s`", jsonObj.get("databaseSizeInMB").toString()));
      }
      if ((jsonObj.get("enqueueTime") != null && !jsonObj.get("enqueueTime").isJsonNull()) && !jsonObj.get("enqueueTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `enqueueTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("enqueueTime").toString()));
      }
      if ((jsonObj.get("instanceId") != null && !jsonObj.get("instanceId").isJsonNull()) && !jsonObj.get("instanceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `instanceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("instanceId").toString()));
      }
      if ((jsonObj.get("solutionName") != null && !jsonObj.get("solutionName").isJsonNull()) && !jsonObj.get("solutionName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `solutionName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("solutionName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DatabaseAssessmentDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DatabaseAssessmentDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DatabaseAssessmentDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DatabaseAssessmentDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<DatabaseAssessmentDetails>() {
           @Override
           public void write(JsonWriter out, DatabaseAssessmentDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DatabaseAssessmentDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DatabaseAssessmentDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DatabaseAssessmentDetails
   * @throws IOException if the JSON string is invalid with respect to DatabaseAssessmentDetails
   */
  public static DatabaseAssessmentDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DatabaseAssessmentDetails.class);
  }

  /**
   * Convert an instance of DatabaseAssessmentDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

