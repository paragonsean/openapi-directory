/*
 * Azure Migrate Hub
 * Migrate your workloads to Azure.
 *
 * The version of the OpenAPI document: 2018-09-01-preview
 * Contact: azuremigratehub@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * IEdmPathExpression
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:17:48.937321-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class IEdmPathExpression {
  /**
   * Gets or Sets expressionKind
   */
  @JsonAdapter(ExpressionKindEnum.Adapter.class)
  public enum ExpressionKindEnum {
    NONE("None"),
    
    BINARY_CONSTANT("BinaryConstant"),
    
    BOOLEAN_CONSTANT("BooleanConstant"),
    
    DATE_TIME_OFFSET_CONSTANT("DateTimeOffsetConstant"),
    
    DECIMAL_CONSTANT("DecimalConstant"),
    
    FLOATING_CONSTANT("FloatingConstant"),
    
    GUID_CONSTANT("GuidConstant"),
    
    INTEGER_CONSTANT("IntegerConstant"),
    
    STRING_CONSTANT("StringConstant"),
    
    DURATION_CONSTANT("DurationConstant"),
    
    NULL("Null"),
    
    RECORD("Record"),
    
    COLLECTION("Collection"),
    
    PATH("Path"),
    
    IF("If"),
    
    CAST("Cast"),
    
    IS_TYPE("IsType"),
    
    FUNCTION_APPLICATION("FunctionApplication"),
    
    LABELED_EXPRESSION_REFERENCE("LabeledExpressionReference"),
    
    LABELED("Labeled"),
    
    PROPERTY_PATH("PropertyPath"),
    
    NAVIGATION_PROPERTY_PATH("NavigationPropertyPath"),
    
    DATE_CONSTANT("DateConstant"),
    
    TIME_OF_DAY_CONSTANT("TimeOfDayConstant"),
    
    ENUM_MEMBER("EnumMember"),
    
    ANNOTATION_PATH("AnnotationPath");

    private String value;

    ExpressionKindEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ExpressionKindEnum fromValue(String value) {
      for (ExpressionKindEnum b : ExpressionKindEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ExpressionKindEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ExpressionKindEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ExpressionKindEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ExpressionKindEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ExpressionKindEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_EXPRESSION_KIND = "expressionKind";
  @SerializedName(SERIALIZED_NAME_EXPRESSION_KIND)
  private ExpressionKindEnum expressionKind;

  public static final String SERIALIZED_NAME_PATH = "path";
  @SerializedName(SERIALIZED_NAME_PATH)
  private String path;

  public static final String SERIALIZED_NAME_PATH_SEGMENTS = "pathSegments";
  @SerializedName(SERIALIZED_NAME_PATH_SEGMENTS)
  private List<String> pathSegments = new ArrayList<>();

  public IEdmPathExpression() {
  }

  public IEdmPathExpression(
     ExpressionKindEnum expressionKind, 
     String path, 
     List<String> pathSegments
  ) {
    this();
    this.expressionKind = expressionKind;
    this.path = path;
    this.pathSegments = pathSegments;
  }

  /**
   * Get expressionKind
   * @return expressionKind
   */
  @javax.annotation.Nullable
  public ExpressionKindEnum getExpressionKind() {
    return expressionKind;
  }



  /**
   * Get path
   * @return path
   */
  @javax.annotation.Nullable
  public String getPath() {
    return path;
  }



  /**
   * Get pathSegments
   * @return pathSegments
   */
  @javax.annotation.Nullable
  public List<String> getPathSegments() {
    return pathSegments;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IEdmPathExpression iedmPathExpression = (IEdmPathExpression) o;
    return Objects.equals(this.expressionKind, iedmPathExpression.expressionKind) &&
        Objects.equals(this.path, iedmPathExpression.path) &&
        Objects.equals(this.pathSegments, iedmPathExpression.pathSegments);
  }

  @Override
  public int hashCode() {
    return Objects.hash(expressionKind, path, pathSegments);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IEdmPathExpression {\n");
    sb.append("    expressionKind: ").append(toIndentedString(expressionKind)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    pathSegments: ").append(toIndentedString(pathSegments)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("expressionKind");
    openapiFields.add("path");
    openapiFields.add("pathSegments");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IEdmPathExpression
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IEdmPathExpression.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IEdmPathExpression is not found in the empty JSON string", IEdmPathExpression.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IEdmPathExpression.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IEdmPathExpression` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("expressionKind") != null && !jsonObj.get("expressionKind").isJsonNull()) && !jsonObj.get("expressionKind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expressionKind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expressionKind").toString()));
      }
      // validate the optional field `expressionKind`
      if (jsonObj.get("expressionKind") != null && !jsonObj.get("expressionKind").isJsonNull()) {
        ExpressionKindEnum.validateJsonElement(jsonObj.get("expressionKind"));
      }
      if ((jsonObj.get("path") != null && !jsonObj.get("path").isJsonNull()) && !jsonObj.get("path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("path").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("pathSegments") != null && !jsonObj.get("pathSegments").isJsonNull() && !jsonObj.get("pathSegments").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `pathSegments` to be an array in the JSON string but got `%s`", jsonObj.get("pathSegments").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IEdmPathExpression.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IEdmPathExpression' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IEdmPathExpression> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IEdmPathExpression.class));

       return (TypeAdapter<T>) new TypeAdapter<IEdmPathExpression>() {
           @Override
           public void write(JsonWriter out, IEdmPathExpression value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IEdmPathExpression read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IEdmPathExpression given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IEdmPathExpression
   * @throws IOException if the JSON string is invalid with respect to IEdmPathExpression
   */
  public static IEdmPathExpression fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IEdmPathExpression.class);
  }

  /**
   * Convert an instance of IEdmPathExpression to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

