/*
 * Azure Migrate Hub
 * Migrate your workloads to Azure.
 *
 * The version of the OpenAPI document: 2018-09-01-preview
 * Contact: azuremigratehub@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DatabaseInstance;
import org.openapitools.client.model.DatabaseInstanceCollection;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DatabaseInstancesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DatabaseInstancesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DatabaseInstancesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for databaseInstancesEnumerateDatabaseInstances
     * @param subscriptionId Azure Subscription Id in which migrate project was created. (required)
     * @param resourceGroupName Name of the Azure Resource Group that migrate project is part of. (required)
     * @param migrateProjectName Name of the Azure Migrate project. (required)
     * @param apiVersion Standard request header. Used by service to identify API version used by client. (required)
     * @param continuationToken The continuation token. (optional)
     * @param pageSize The number of items to be returned in a single page. This value is honored only if it is less than the 100. (optional)
     * @param acceptLanguage Standard request header. Used by service to respond to client in appropriate language. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseInstancesEnumerateDatabaseInstancesCall(String subscriptionId, String resourceGroupName, String migrateProjectName, String apiVersion, String continuationToken, Integer pageSize, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/migrateProjects/{migrateProjectName}/databaseInstances"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "migrateProjectName" + "}", localVarApiClient.escapeString(migrateProjectName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (continuationToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("continuationToken", continuationToken));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call databaseInstancesEnumerateDatabaseInstancesValidateBeforeCall(String subscriptionId, String resourceGroupName, String migrateProjectName, String apiVersion, String continuationToken, Integer pageSize, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling databaseInstancesEnumerateDatabaseInstances(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling databaseInstancesEnumerateDatabaseInstances(Async)");
        }

        // verify the required parameter 'migrateProjectName' is set
        if (migrateProjectName == null) {
            throw new ApiException("Missing the required parameter 'migrateProjectName' when calling databaseInstancesEnumerateDatabaseInstances(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling databaseInstancesEnumerateDatabaseInstances(Async)");
        }

        return databaseInstancesEnumerateDatabaseInstancesCall(subscriptionId, resourceGroupName, migrateProjectName, apiVersion, continuationToken, pageSize, acceptLanguage, _callback);

    }

    /**
     * Gets a list of database instances in the migrate project.
     * 
     * @param subscriptionId Azure Subscription Id in which migrate project was created. (required)
     * @param resourceGroupName Name of the Azure Resource Group that migrate project is part of. (required)
     * @param migrateProjectName Name of the Azure Migrate project. (required)
     * @param apiVersion Standard request header. Used by service to identify API version used by client. (required)
     * @param continuationToken The continuation token. (optional)
     * @param pageSize The number of items to be returned in a single page. This value is honored only if it is less than the 100. (optional)
     * @param acceptLanguage Standard request header. Used by service to respond to client in appropriate language. (optional)
     * @return DatabaseInstanceCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public DatabaseInstanceCollection databaseInstancesEnumerateDatabaseInstances(String subscriptionId, String resourceGroupName, String migrateProjectName, String apiVersion, String continuationToken, Integer pageSize, String acceptLanguage) throws ApiException {
        ApiResponse<DatabaseInstanceCollection> localVarResp = databaseInstancesEnumerateDatabaseInstancesWithHttpInfo(subscriptionId, resourceGroupName, migrateProjectName, apiVersion, continuationToken, pageSize, acceptLanguage);
        return localVarResp.getData();
    }

    /**
     * Gets a list of database instances in the migrate project.
     * 
     * @param subscriptionId Azure Subscription Id in which migrate project was created. (required)
     * @param resourceGroupName Name of the Azure Resource Group that migrate project is part of. (required)
     * @param migrateProjectName Name of the Azure Migrate project. (required)
     * @param apiVersion Standard request header. Used by service to identify API version used by client. (required)
     * @param continuationToken The continuation token. (optional)
     * @param pageSize The number of items to be returned in a single page. This value is honored only if it is less than the 100. (optional)
     * @param acceptLanguage Standard request header. Used by service to respond to client in appropriate language. (optional)
     * @return ApiResponse&lt;DatabaseInstanceCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DatabaseInstanceCollection> databaseInstancesEnumerateDatabaseInstancesWithHttpInfo(String subscriptionId, String resourceGroupName, String migrateProjectName, String apiVersion, String continuationToken, Integer pageSize, String acceptLanguage) throws ApiException {
        okhttp3.Call localVarCall = databaseInstancesEnumerateDatabaseInstancesValidateBeforeCall(subscriptionId, resourceGroupName, migrateProjectName, apiVersion, continuationToken, pageSize, acceptLanguage, null);
        Type localVarReturnType = new TypeToken<DatabaseInstanceCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets a list of database instances in the migrate project. (asynchronously)
     * 
     * @param subscriptionId Azure Subscription Id in which migrate project was created. (required)
     * @param resourceGroupName Name of the Azure Resource Group that migrate project is part of. (required)
     * @param migrateProjectName Name of the Azure Migrate project. (required)
     * @param apiVersion Standard request header. Used by service to identify API version used by client. (required)
     * @param continuationToken The continuation token. (optional)
     * @param pageSize The number of items to be returned in a single page. This value is honored only if it is less than the 100. (optional)
     * @param acceptLanguage Standard request header. Used by service to respond to client in appropriate language. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseInstancesEnumerateDatabaseInstancesAsync(String subscriptionId, String resourceGroupName, String migrateProjectName, String apiVersion, String continuationToken, Integer pageSize, String acceptLanguage, final ApiCallback<DatabaseInstanceCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = databaseInstancesEnumerateDatabaseInstancesValidateBeforeCall(subscriptionId, resourceGroupName, migrateProjectName, apiVersion, continuationToken, pageSize, acceptLanguage, _callback);
        Type localVarReturnType = new TypeToken<DatabaseInstanceCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for databaseInstancesGetDatabaseInstance
     * @param subscriptionId Azure Subscription Id in which migrate project was created. (required)
     * @param resourceGroupName Name of the Azure Resource Group that migrate project is part of. (required)
     * @param migrateProjectName Name of the Azure Migrate project. (required)
     * @param databaseInstanceName Unique name of a database instance in Azure migration hub. (required)
     * @param apiVersion Standard request header. Used by service to identify API version used by client. (required)
     * @param acceptLanguage Standard request header. Used by service to respond to client in appropriate language. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseInstancesGetDatabaseInstanceCall(String subscriptionId, String resourceGroupName, String migrateProjectName, String databaseInstanceName, String apiVersion, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/migrateProjects/{migrateProjectName}/databaseInstances/{databaseInstanceName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "migrateProjectName" + "}", localVarApiClient.escapeString(migrateProjectName.toString()))
            .replace("{" + "databaseInstanceName" + "}", localVarApiClient.escapeString(databaseInstanceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call databaseInstancesGetDatabaseInstanceValidateBeforeCall(String subscriptionId, String resourceGroupName, String migrateProjectName, String databaseInstanceName, String apiVersion, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling databaseInstancesGetDatabaseInstance(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling databaseInstancesGetDatabaseInstance(Async)");
        }

        // verify the required parameter 'migrateProjectName' is set
        if (migrateProjectName == null) {
            throw new ApiException("Missing the required parameter 'migrateProjectName' when calling databaseInstancesGetDatabaseInstance(Async)");
        }

        // verify the required parameter 'databaseInstanceName' is set
        if (databaseInstanceName == null) {
            throw new ApiException("Missing the required parameter 'databaseInstanceName' when calling databaseInstancesGetDatabaseInstance(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling databaseInstancesGetDatabaseInstance(Async)");
        }

        return databaseInstancesGetDatabaseInstanceCall(subscriptionId, resourceGroupName, migrateProjectName, databaseInstanceName, apiVersion, acceptLanguage, _callback);

    }

    /**
     * Gets a database instance in the migrate project.
     * 
     * @param subscriptionId Azure Subscription Id in which migrate project was created. (required)
     * @param resourceGroupName Name of the Azure Resource Group that migrate project is part of. (required)
     * @param migrateProjectName Name of the Azure Migrate project. (required)
     * @param databaseInstanceName Unique name of a database instance in Azure migration hub. (required)
     * @param apiVersion Standard request header. Used by service to identify API version used by client. (required)
     * @param acceptLanguage Standard request header. Used by service to respond to client in appropriate language. (optional)
     * @return DatabaseInstance
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public DatabaseInstance databaseInstancesGetDatabaseInstance(String subscriptionId, String resourceGroupName, String migrateProjectName, String databaseInstanceName, String apiVersion, String acceptLanguage) throws ApiException {
        ApiResponse<DatabaseInstance> localVarResp = databaseInstancesGetDatabaseInstanceWithHttpInfo(subscriptionId, resourceGroupName, migrateProjectName, databaseInstanceName, apiVersion, acceptLanguage);
        return localVarResp.getData();
    }

    /**
     * Gets a database instance in the migrate project.
     * 
     * @param subscriptionId Azure Subscription Id in which migrate project was created. (required)
     * @param resourceGroupName Name of the Azure Resource Group that migrate project is part of. (required)
     * @param migrateProjectName Name of the Azure Migrate project. (required)
     * @param databaseInstanceName Unique name of a database instance in Azure migration hub. (required)
     * @param apiVersion Standard request header. Used by service to identify API version used by client. (required)
     * @param acceptLanguage Standard request header. Used by service to respond to client in appropriate language. (optional)
     * @return ApiResponse&lt;DatabaseInstance&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DatabaseInstance> databaseInstancesGetDatabaseInstanceWithHttpInfo(String subscriptionId, String resourceGroupName, String migrateProjectName, String databaseInstanceName, String apiVersion, String acceptLanguage) throws ApiException {
        okhttp3.Call localVarCall = databaseInstancesGetDatabaseInstanceValidateBeforeCall(subscriptionId, resourceGroupName, migrateProjectName, databaseInstanceName, apiVersion, acceptLanguage, null);
        Type localVarReturnType = new TypeToken<DatabaseInstance>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets a database instance in the migrate project. (asynchronously)
     * 
     * @param subscriptionId Azure Subscription Id in which migrate project was created. (required)
     * @param resourceGroupName Name of the Azure Resource Group that migrate project is part of. (required)
     * @param migrateProjectName Name of the Azure Migrate project. (required)
     * @param databaseInstanceName Unique name of a database instance in Azure migration hub. (required)
     * @param apiVersion Standard request header. Used by service to identify API version used by client. (required)
     * @param acceptLanguage Standard request header. Used by service to respond to client in appropriate language. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseInstancesGetDatabaseInstanceAsync(String subscriptionId, String resourceGroupName, String migrateProjectName, String databaseInstanceName, String apiVersion, String acceptLanguage, final ApiCallback<DatabaseInstance> _callback) throws ApiException {

        okhttp3.Call localVarCall = databaseInstancesGetDatabaseInstanceValidateBeforeCall(subscriptionId, resourceGroupName, migrateProjectName, databaseInstanceName, apiVersion, acceptLanguage, _callback);
        Type localVarReturnType = new TypeToken<DatabaseInstance>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
