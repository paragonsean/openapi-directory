/*
 * Azure Migrate Hub
 * Migrate your workloads to Azure.
 *
 * The version of the OpenAPI document: 2018-09-01-preview
 * Contact: azuremigratehub@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.IEdmNavigationSource;
import org.openapitools.client.model.IEdmType;
import org.openapitools.client.model.ODataPathSegment;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ODataPath
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:17:48.937321-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ODataPath {
  public static final String SERIALIZED_NAME_EDM_TYPE = "edmType";
  @SerializedName(SERIALIZED_NAME_EDM_TYPE)
  private IEdmType edmType;

  public static final String SERIALIZED_NAME_NAVIGATION_SOURCE = "navigationSource";
  @SerializedName(SERIALIZED_NAME_NAVIGATION_SOURCE)
  private IEdmNavigationSource navigationSource;

  public static final String SERIALIZED_NAME_PATH = "path";
  @SerializedName(SERIALIZED_NAME_PATH)
  private List<ODataPathSegment> path = new ArrayList<>();

  public static final String SERIALIZED_NAME_PATH_TEMPLATE = "pathTemplate";
  @SerializedName(SERIALIZED_NAME_PATH_TEMPLATE)
  private String pathTemplate;

  public static final String SERIALIZED_NAME_SEGMENTS = "segments";
  @SerializedName(SERIALIZED_NAME_SEGMENTS)
  private List<ODataPathSegment> segments = new ArrayList<>();

  public ODataPath() {
  }

  public ODataPath(
     List<ODataPathSegment> path, 
     String pathTemplate, 
     List<ODataPathSegment> segments
  ) {
    this();
    this.path = path;
    this.pathTemplate = pathTemplate;
    this.segments = segments;
  }

  public ODataPath edmType(IEdmType edmType) {
    this.edmType = edmType;
    return this;
  }

  /**
   * Get edmType
   * @return edmType
   */
  @javax.annotation.Nullable
  public IEdmType getEdmType() {
    return edmType;
  }

  public void setEdmType(IEdmType edmType) {
    this.edmType = edmType;
  }


  public ODataPath navigationSource(IEdmNavigationSource navigationSource) {
    this.navigationSource = navigationSource;
    return this;
  }

  /**
   * Get navigationSource
   * @return navigationSource
   */
  @javax.annotation.Nullable
  public IEdmNavigationSource getNavigationSource() {
    return navigationSource;
  }

  public void setNavigationSource(IEdmNavigationSource navigationSource) {
    this.navigationSource = navigationSource;
  }


  /**
   * Get path
   * @return path
   */
  @javax.annotation.Nullable
  public List<ODataPathSegment> getPath() {
    return path;
  }



  /**
   * Get pathTemplate
   * @return pathTemplate
   */
  @javax.annotation.Nullable
  public String getPathTemplate() {
    return pathTemplate;
  }



  /**
   * Get segments
   * @return segments
   */
  @javax.annotation.Nullable
  public List<ODataPathSegment> getSegments() {
    return segments;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ODataPath odataPath = (ODataPath) o;
    return Objects.equals(this.edmType, odataPath.edmType) &&
        Objects.equals(this.navigationSource, odataPath.navigationSource) &&
        Objects.equals(this.path, odataPath.path) &&
        Objects.equals(this.pathTemplate, odataPath.pathTemplate) &&
        Objects.equals(this.segments, odataPath.segments);
  }

  @Override
  public int hashCode() {
    return Objects.hash(edmType, navigationSource, path, pathTemplate, segments);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ODataPath {\n");
    sb.append("    edmType: ").append(toIndentedString(edmType)).append("\n");
    sb.append("    navigationSource: ").append(toIndentedString(navigationSource)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    pathTemplate: ").append(toIndentedString(pathTemplate)).append("\n");
    sb.append("    segments: ").append(toIndentedString(segments)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("edmType");
    openapiFields.add("navigationSource");
    openapiFields.add("path");
    openapiFields.add("pathTemplate");
    openapiFields.add("segments");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ODataPath
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ODataPath.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ODataPath is not found in the empty JSON string", ODataPath.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ODataPath.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ODataPath` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `edmType`
      if (jsonObj.get("edmType") != null && !jsonObj.get("edmType").isJsonNull()) {
        IEdmType.validateJsonElement(jsonObj.get("edmType"));
      }
      // validate the optional field `navigationSource`
      if (jsonObj.get("navigationSource") != null && !jsonObj.get("navigationSource").isJsonNull()) {
        IEdmNavigationSource.validateJsonElement(jsonObj.get("navigationSource"));
      }
      if (jsonObj.get("path") != null && !jsonObj.get("path").isJsonNull()) {
        JsonArray jsonArraypath = jsonObj.getAsJsonArray("path");
        if (jsonArraypath != null) {
          // ensure the json data is an array
          if (!jsonObj.get("path").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `path` to be an array in the JSON string but got `%s`", jsonObj.get("path").toString()));
          }

          // validate the optional field `path` (array)
          for (int i = 0; i < jsonArraypath.size(); i++) {
            ODataPathSegment.validateJsonElement(jsonArraypath.get(i));
          };
        }
      }
      if ((jsonObj.get("pathTemplate") != null && !jsonObj.get("pathTemplate").isJsonNull()) && !jsonObj.get("pathTemplate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pathTemplate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pathTemplate").toString()));
      }
      if (jsonObj.get("segments") != null && !jsonObj.get("segments").isJsonNull()) {
        JsonArray jsonArraysegments = jsonObj.getAsJsonArray("segments");
        if (jsonArraysegments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("segments").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `segments` to be an array in the JSON string but got `%s`", jsonObj.get("segments").toString()));
          }

          // validate the optional field `segments` (array)
          for (int i = 0; i < jsonArraysegments.size(); i++) {
            ODataPathSegment.validateJsonElement(jsonArraysegments.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ODataPath.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ODataPath' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ODataPath> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ODataPath.class));

       return (TypeAdapter<T>) new TypeAdapter<ODataPath>() {
           @Override
           public void write(JsonWriter out, ODataPath value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ODataPath read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ODataPath given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ODataPath
   * @throws IOException if the JSON string is invalid with respect to ODataPath
   */
  public static ODataPath fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ODataPath.class);
  }

  /**
   * Convert an instance of ODataPath to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

