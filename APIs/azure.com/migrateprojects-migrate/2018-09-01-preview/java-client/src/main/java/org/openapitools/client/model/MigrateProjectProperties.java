/*
 * Azure Migrate Hub
 * Migrate your workloads to Azure.
 *
 * The version of the OpenAPI document: 2018-09-01-preview
 * Contact: azuremigratehub@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.ProjectSummary;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Class for migrate project properties.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:17:48.937321-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MigrateProjectProperties {
  public static final String SERIALIZED_NAME_LAST_SUMMARY_REFRESHED_TIME = "lastSummaryRefreshedTime";
  @SerializedName(SERIALIZED_NAME_LAST_SUMMARY_REFRESHED_TIME)
  private OffsetDateTime lastSummaryRefreshedTime;

  /**
   * Provisioning state of the migrate project.
   */
  @JsonAdapter(ProvisioningStateEnum.Adapter.class)
  public enum ProvisioningStateEnum {
    ACCEPTED("Accepted"),
    
    CREATING("Creating"),
    
    DELETING("Deleting"),
    
    FAILED("Failed"),
    
    MOVING("Moving"),
    
    SUCCEEDED("Succeeded");

    private String value;

    ProvisioningStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProvisioningStateEnum fromValue(String value) {
      for (ProvisioningStateEnum b : ProvisioningStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProvisioningStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProvisioningStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProvisioningStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProvisioningStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProvisioningStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private ProvisioningStateEnum provisioningState;

  /**
   * Gets the refresh summary state.
   */
  @JsonAdapter(RefreshSummaryStateEnum.Adapter.class)
  public enum RefreshSummaryStateEnum {
    STARTED("Started"),
    
    IN_PROGRESS("InProgress"),
    
    COMPLETED("Completed"),
    
    FAILED("Failed");

    private String value;

    RefreshSummaryStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RefreshSummaryStateEnum fromValue(String value) {
      for (RefreshSummaryStateEnum b : RefreshSummaryStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RefreshSummaryStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RefreshSummaryStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RefreshSummaryStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RefreshSummaryStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RefreshSummaryStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_REFRESH_SUMMARY_STATE = "refreshSummaryState";
  @SerializedName(SERIALIZED_NAME_REFRESH_SUMMARY_STATE)
  private RefreshSummaryStateEnum refreshSummaryState;

  /**
   * Gets or Sets registeredTools
   */
  @JsonAdapter(RegisteredToolsEnum.Adapter.class)
  public enum RegisteredToolsEnum {
    SERVER_DISCOVERY("ServerDiscovery"),
    
    SERVER_ASSESSMENT("ServerAssessment"),
    
    SERVER_MIGRATION("ServerMigration"),
    
    CLOUDAMIZE("Cloudamize"),
    
    TURBONOMIC("Turbonomic"),
    
    ZERTO("Zerto"),
    
    CORENT_TECH("CorentTech"),
    
    SERVER_ASSESSMENT_V1("ServerAssessmentV1"),
    
    SERVER_MIGRATION_REPLICATION("ServerMigration_Replication"),
    
    CARBONITE("Carbonite"),
    
    DATA_MIGRATION_ASSISTANT("DataMigrationAssistant"),
    
    DATABASE_MIGRATION_SERVICE("DatabaseMigrationService");

    private String value;

    RegisteredToolsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RegisteredToolsEnum fromValue(String value) {
      for (RegisteredToolsEnum b : RegisteredToolsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RegisteredToolsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RegisteredToolsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RegisteredToolsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RegisteredToolsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RegisteredToolsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_REGISTERED_TOOLS = "registeredTools";
  @SerializedName(SERIALIZED_NAME_REGISTERED_TOOLS)
  private List<RegisteredToolsEnum> registeredTools = new ArrayList<>();

  public static final String SERIALIZED_NAME_SUMMARY = "summary";
  @SerializedName(SERIALIZED_NAME_SUMMARY)
  private Map<String, ProjectSummary> summary = new HashMap<>();

  public MigrateProjectProperties() {
  }

  public MigrateProjectProperties(
     OffsetDateTime lastSummaryRefreshedTime, 
     RefreshSummaryStateEnum refreshSummaryState, 
     Map<String, ProjectSummary> summary
  ) {
    this();
    this.lastSummaryRefreshedTime = lastSummaryRefreshedTime;
    this.refreshSummaryState = refreshSummaryState;
    this.summary = summary;
  }

  /**
   * Gets the last time the project summary was refreshed.
   * @return lastSummaryRefreshedTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastSummaryRefreshedTime() {
    return lastSummaryRefreshedTime;
  }



  public MigrateProjectProperties provisioningState(ProvisioningStateEnum provisioningState) {
    this.provisioningState = provisioningState;
    return this;
  }

  /**
   * Provisioning state of the migrate project.
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public ProvisioningStateEnum getProvisioningState() {
    return provisioningState;
  }

  public void setProvisioningState(ProvisioningStateEnum provisioningState) {
    this.provisioningState = provisioningState;
  }


  /**
   * Gets the refresh summary state.
   * @return refreshSummaryState
   */
  @javax.annotation.Nullable
  public RefreshSummaryStateEnum getRefreshSummaryState() {
    return refreshSummaryState;
  }



  public MigrateProjectProperties registeredTools(List<RegisteredToolsEnum> registeredTools) {
    this.registeredTools = registeredTools;
    return this;
  }

  public MigrateProjectProperties addRegisteredToolsItem(RegisteredToolsEnum registeredToolsItem) {
    if (this.registeredTools == null) {
      this.registeredTools = new ArrayList<>();
    }
    this.registeredTools.add(registeredToolsItem);
    return this;
  }

  /**
   * Gets or sets the list of tools registered with the migrate project.
   * @return registeredTools
   */
  @javax.annotation.Nullable
  public List<RegisteredToolsEnum> getRegisteredTools() {
    return registeredTools;
  }

  public void setRegisteredTools(List<RegisteredToolsEnum> registeredTools) {
    this.registeredTools = registeredTools;
  }


  /**
   * Gets the summary of the migrate project.
   * @return summary
   */
  @javax.annotation.Nullable
  public Map<String, ProjectSummary> getSummary() {
    return summary;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MigrateProjectProperties migrateProjectProperties = (MigrateProjectProperties) o;
    return Objects.equals(this.lastSummaryRefreshedTime, migrateProjectProperties.lastSummaryRefreshedTime) &&
        Objects.equals(this.provisioningState, migrateProjectProperties.provisioningState) &&
        Objects.equals(this.refreshSummaryState, migrateProjectProperties.refreshSummaryState) &&
        Objects.equals(this.registeredTools, migrateProjectProperties.registeredTools) &&
        Objects.equals(this.summary, migrateProjectProperties.summary);
  }

  @Override
  public int hashCode() {
    return Objects.hash(lastSummaryRefreshedTime, provisioningState, refreshSummaryState, registeredTools, summary);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MigrateProjectProperties {\n");
    sb.append("    lastSummaryRefreshedTime: ").append(toIndentedString(lastSummaryRefreshedTime)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("    refreshSummaryState: ").append(toIndentedString(refreshSummaryState)).append("\n");
    sb.append("    registeredTools: ").append(toIndentedString(registeredTools)).append("\n");
    sb.append("    summary: ").append(toIndentedString(summary)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("lastSummaryRefreshedTime");
    openapiFields.add("provisioningState");
    openapiFields.add("refreshSummaryState");
    openapiFields.add("registeredTools");
    openapiFields.add("summary");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MigrateProjectProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MigrateProjectProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MigrateProjectProperties is not found in the empty JSON string", MigrateProjectProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MigrateProjectProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MigrateProjectProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) && !jsonObj.get("provisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningState").toString()));
      }
      // validate the optional field `provisioningState`
      if (jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) {
        ProvisioningStateEnum.validateJsonElement(jsonObj.get("provisioningState"));
      }
      if ((jsonObj.get("refreshSummaryState") != null && !jsonObj.get("refreshSummaryState").isJsonNull()) && !jsonObj.get("refreshSummaryState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `refreshSummaryState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("refreshSummaryState").toString()));
      }
      // validate the optional field `refreshSummaryState`
      if (jsonObj.get("refreshSummaryState") != null && !jsonObj.get("refreshSummaryState").isJsonNull()) {
        RefreshSummaryStateEnum.validateJsonElement(jsonObj.get("refreshSummaryState"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("registeredTools") != null && !jsonObj.get("registeredTools").isJsonNull() && !jsonObj.get("registeredTools").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `registeredTools` to be an array in the JSON string but got `%s`", jsonObj.get("registeredTools").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MigrateProjectProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MigrateProjectProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MigrateProjectProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MigrateProjectProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<MigrateProjectProperties>() {
           @Override
           public void write(JsonWriter out, MigrateProjectProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MigrateProjectProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MigrateProjectProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MigrateProjectProperties
   * @throws IOException if the JSON string is invalid with respect to MigrateProjectProperties
   */
  public static MigrateProjectProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MigrateProjectProperties.class);
  }

  /**
   * Convert an instance of MigrateProjectProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

