/*
 * Azure Migrate Hub
 * Migrate your workloads to Azure.
 *
 * The version of the OpenAPI document: 2018-09-01-preview
 * Contact: azuremigratehub@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The project summary class.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:17:48.937321-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ProjectSummary {
  public static final String SERIALIZED_NAME_EXTENDED_SUMMARY = "extendedSummary";
  @SerializedName(SERIALIZED_NAME_EXTENDED_SUMMARY)
  private Map<String, String> extendedSummary = new HashMap<>();

  public static final String SERIALIZED_NAME_INSTANCE_TYPE = "instanceType";
  @SerializedName(SERIALIZED_NAME_INSTANCE_TYPE)
  protected String instanceType;

  public static final String SERIALIZED_NAME_LAST_SUMMARY_REFRESHED_TIME = "lastSummaryRefreshedTime";
  @SerializedName(SERIALIZED_NAME_LAST_SUMMARY_REFRESHED_TIME)
  private OffsetDateTime lastSummaryRefreshedTime;

  /**
   * Gets or sets the state of refresh summary.
   */
  @JsonAdapter(RefreshSummaryStateEnum.Adapter.class)
  public enum RefreshSummaryStateEnum {
    STARTED("Started"),
    
    IN_PROGRESS("InProgress"),
    
    COMPLETED("Completed"),
    
    FAILED("Failed");

    private String value;

    RefreshSummaryStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RefreshSummaryStateEnum fromValue(String value) {
      for (RefreshSummaryStateEnum b : RefreshSummaryStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RefreshSummaryStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RefreshSummaryStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RefreshSummaryStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RefreshSummaryStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RefreshSummaryStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_REFRESH_SUMMARY_STATE = "refreshSummaryState";
  @SerializedName(SERIALIZED_NAME_REFRESH_SUMMARY_STATE)
  private RefreshSummaryStateEnum refreshSummaryState;

  public ProjectSummary() {
    this.instanceType = this.getClass().getSimpleName();
  }

  public ProjectSummary(
     String instanceType
  ) {
    this();
    this.instanceType = instanceType;
  }

  public ProjectSummary extendedSummary(Map<String, String> extendedSummary) {
    this.extendedSummary = extendedSummary;
    return this;
  }

  public ProjectSummary putExtendedSummaryItem(String key, String extendedSummaryItem) {
    if (this.extendedSummary == null) {
      this.extendedSummary = new HashMap<>();
    }
    this.extendedSummary.put(key, extendedSummaryItem);
    return this;
  }

  /**
   * Gets or sets the extended summary.
   * @return extendedSummary
   */
  @javax.annotation.Nullable
  public Map<String, String> getExtendedSummary() {
    return extendedSummary;
  }

  public void setExtendedSummary(Map<String, String> extendedSummary) {
    this.extendedSummary = extendedSummary;
  }


  /**
   * Gets the Instance type.
   * @return instanceType
   */
  @javax.annotation.Nullable
  public String getInstanceType() {
    return instanceType;
  }



  public ProjectSummary lastSummaryRefreshedTime(OffsetDateTime lastSummaryRefreshedTime) {
    this.lastSummaryRefreshedTime = lastSummaryRefreshedTime;
    return this;
  }

  /**
   * Gets or sets the time when summary was last refreshed.
   * @return lastSummaryRefreshedTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastSummaryRefreshedTime() {
    return lastSummaryRefreshedTime;
  }

  public void setLastSummaryRefreshedTime(OffsetDateTime lastSummaryRefreshedTime) {
    this.lastSummaryRefreshedTime = lastSummaryRefreshedTime;
  }


  public ProjectSummary refreshSummaryState(RefreshSummaryStateEnum refreshSummaryState) {
    this.refreshSummaryState = refreshSummaryState;
    return this;
  }

  /**
   * Gets or sets the state of refresh summary.
   * @return refreshSummaryState
   */
  @javax.annotation.Nullable
  public RefreshSummaryStateEnum getRefreshSummaryState() {
    return refreshSummaryState;
  }

  public void setRefreshSummaryState(RefreshSummaryStateEnum refreshSummaryState) {
    this.refreshSummaryState = refreshSummaryState;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProjectSummary projectSummary = (ProjectSummary) o;
    return Objects.equals(this.extendedSummary, projectSummary.extendedSummary) &&
        Objects.equals(this.instanceType, projectSummary.instanceType) &&
        Objects.equals(this.lastSummaryRefreshedTime, projectSummary.lastSummaryRefreshedTime) &&
        Objects.equals(this.refreshSummaryState, projectSummary.refreshSummaryState);
  }

  @Override
  public int hashCode() {
    return Objects.hash(extendedSummary, instanceType, lastSummaryRefreshedTime, refreshSummaryState);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProjectSummary {\n");
    sb.append("    extendedSummary: ").append(toIndentedString(extendedSummary)).append("\n");
    sb.append("    instanceType: ").append(toIndentedString(instanceType)).append("\n");
    sb.append("    lastSummaryRefreshedTime: ").append(toIndentedString(lastSummaryRefreshedTime)).append("\n");
    sb.append("    refreshSummaryState: ").append(toIndentedString(refreshSummaryState)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("extendedSummary");
    openapiFields.add("instanceType");
    openapiFields.add("lastSummaryRefreshedTime");
    openapiFields.add("refreshSummaryState");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProjectSummary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProjectSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProjectSummary is not found in the empty JSON string", ProjectSummary.openapiRequiredFields.toString()));
        }
      }

      String discriminatorValue = jsonElement.getAsJsonObject().get("instanceType").getAsString();
      switch (discriminatorValue) {
        case "DatabaseProjectSummary":
          DatabaseProjectSummary.validateJsonElement(jsonElement);
          break;
        case "ServersProjectSummary":
          ServersProjectSummary.validateJsonElement(jsonElement);
          break;
        default:
          throw new IllegalArgumentException(String.format("The value of the `instanceType` field `%s` does not match any key defined in the discriminator's mapping.", discriminatorValue));
      }
  }


  /**
   * Create an instance of ProjectSummary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProjectSummary
   * @throws IOException if the JSON string is invalid with respect to ProjectSummary
   */
  public static ProjectSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProjectSummary.class);
  }

  /**
   * Convert an instance of ProjectSummary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

