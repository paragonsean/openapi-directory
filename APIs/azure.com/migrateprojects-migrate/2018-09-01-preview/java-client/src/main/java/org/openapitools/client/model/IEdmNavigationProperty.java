/*
 * Azure Migrate Hub
 * Migrate your workloads to Azure.
 *
 * The version of the OpenAPI document: 2018-09-01-preview
 * Contact: azuremigratehub@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.IEdmReferentialConstraint;
import org.openapitools.client.model.IEdmStructuredType;
import org.openapitools.client.model.IEdmTypeReference;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * IEdmNavigationProperty
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:17:48.937321-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class IEdmNavigationProperty {
  public static final String SERIALIZED_NAME_CONTAINS_TARGET = "containsTarget";
  @SerializedName(SERIALIZED_NAME_CONTAINS_TARGET)
  private Boolean containsTarget;

  public static final String SERIALIZED_NAME_DECLARING_TYPE = "declaringType";
  @SerializedName(SERIALIZED_NAME_DECLARING_TYPE)
  private IEdmStructuredType declaringType;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  /**
   * Gets or Sets onDelete
   */
  @JsonAdapter(OnDeleteEnum.Adapter.class)
  public enum OnDeleteEnum {
    NONE("None"),
    
    CASCADE("Cascade");

    private String value;

    OnDeleteEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OnDeleteEnum fromValue(String value) {
      for (OnDeleteEnum b : OnDeleteEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OnDeleteEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OnDeleteEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OnDeleteEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OnDeleteEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OnDeleteEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ON_DELETE = "onDelete";
  @SerializedName(SERIALIZED_NAME_ON_DELETE)
  private OnDeleteEnum onDelete;

  public static final String SERIALIZED_NAME_PARTNER = "partner";
  @SerializedName(SERIALIZED_NAME_PARTNER)
  private IEdmNavigationProperty partner;

  /**
   * Gets or Sets propertyKind
   */
  @JsonAdapter(PropertyKindEnum.Adapter.class)
  public enum PropertyKindEnum {
    NONE("None"),
    
    STRUCTURAL("Structural"),
    
    NAVIGATION("Navigation");

    private String value;

    PropertyKindEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PropertyKindEnum fromValue(String value) {
      for (PropertyKindEnum b : PropertyKindEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PropertyKindEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PropertyKindEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PropertyKindEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PropertyKindEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PropertyKindEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROPERTY_KIND = "propertyKind";
  @SerializedName(SERIALIZED_NAME_PROPERTY_KIND)
  private PropertyKindEnum propertyKind;

  public static final String SERIALIZED_NAME_REFERENTIAL_CONSTRAINT = "referentialConstraint";
  @SerializedName(SERIALIZED_NAME_REFERENTIAL_CONSTRAINT)
  private IEdmReferentialConstraint referentialConstraint;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private IEdmTypeReference type;

  public IEdmNavigationProperty() {
  }

  public IEdmNavigationProperty(
     Boolean containsTarget, 
     String name, 
     OnDeleteEnum onDelete, 
     PropertyKindEnum propertyKind
  ) {
    this();
    this.containsTarget = containsTarget;
    this.name = name;
    this.onDelete = onDelete;
    this.propertyKind = propertyKind;
  }

  /**
   * Get containsTarget
   * @return containsTarget
   */
  @javax.annotation.Nullable
  public Boolean getContainsTarget() {
    return containsTarget;
  }



  public IEdmNavigationProperty declaringType(IEdmStructuredType declaringType) {
    this.declaringType = declaringType;
    return this;
  }

  /**
   * Get declaringType
   * @return declaringType
   */
  @javax.annotation.Nullable
  public IEdmStructuredType getDeclaringType() {
    return declaringType;
  }

  public void setDeclaringType(IEdmStructuredType declaringType) {
    this.declaringType = declaringType;
  }


  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  /**
   * Get onDelete
   * @return onDelete
   */
  @javax.annotation.Nullable
  public OnDeleteEnum getOnDelete() {
    return onDelete;
  }



  public IEdmNavigationProperty partner(IEdmNavigationProperty partner) {
    this.partner = partner;
    return this;
  }

  /**
   * Get partner
   * @return partner
   */
  @javax.annotation.Nullable
  public IEdmNavigationProperty getPartner() {
    return partner;
  }

  public void setPartner(IEdmNavigationProperty partner) {
    this.partner = partner;
  }


  /**
   * Get propertyKind
   * @return propertyKind
   */
  @javax.annotation.Nullable
  public PropertyKindEnum getPropertyKind() {
    return propertyKind;
  }



  public IEdmNavigationProperty referentialConstraint(IEdmReferentialConstraint referentialConstraint) {
    this.referentialConstraint = referentialConstraint;
    return this;
  }

  /**
   * Get referentialConstraint
   * @return referentialConstraint
   */
  @javax.annotation.Nullable
  public IEdmReferentialConstraint getReferentialConstraint() {
    return referentialConstraint;
  }

  public void setReferentialConstraint(IEdmReferentialConstraint referentialConstraint) {
    this.referentialConstraint = referentialConstraint;
  }


  public IEdmNavigationProperty type(IEdmTypeReference type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public IEdmTypeReference getType() {
    return type;
  }

  public void setType(IEdmTypeReference type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IEdmNavigationProperty iedmNavigationProperty = (IEdmNavigationProperty) o;
    return Objects.equals(this.containsTarget, iedmNavigationProperty.containsTarget) &&
        Objects.equals(this.declaringType, iedmNavigationProperty.declaringType) &&
        Objects.equals(this.name, iedmNavigationProperty.name) &&
        Objects.equals(this.onDelete, iedmNavigationProperty.onDelete) &&
        Objects.equals(this.partner, iedmNavigationProperty.partner) &&
        Objects.equals(this.propertyKind, iedmNavigationProperty.propertyKind) &&
        Objects.equals(this.referentialConstraint, iedmNavigationProperty.referentialConstraint) &&
        Objects.equals(this.type, iedmNavigationProperty.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(containsTarget, declaringType, name, onDelete, partner, propertyKind, referentialConstraint, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IEdmNavigationProperty {\n");
    sb.append("    containsTarget: ").append(toIndentedString(containsTarget)).append("\n");
    sb.append("    declaringType: ").append(toIndentedString(declaringType)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    onDelete: ").append(toIndentedString(onDelete)).append("\n");
    sb.append("    partner: ").append(toIndentedString(partner)).append("\n");
    sb.append("    propertyKind: ").append(toIndentedString(propertyKind)).append("\n");
    sb.append("    referentialConstraint: ").append(toIndentedString(referentialConstraint)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("containsTarget");
    openapiFields.add("declaringType");
    openapiFields.add("name");
    openapiFields.add("onDelete");
    openapiFields.add("partner");
    openapiFields.add("propertyKind");
    openapiFields.add("referentialConstraint");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IEdmNavigationProperty
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IEdmNavigationProperty.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IEdmNavigationProperty is not found in the empty JSON string", IEdmNavigationProperty.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IEdmNavigationProperty.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IEdmNavigationProperty` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `declaringType`
      if (jsonObj.get("declaringType") != null && !jsonObj.get("declaringType").isJsonNull()) {
        IEdmStructuredType.validateJsonElement(jsonObj.get("declaringType"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("onDelete") != null && !jsonObj.get("onDelete").isJsonNull()) && !jsonObj.get("onDelete").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `onDelete` to be a primitive type in the JSON string but got `%s`", jsonObj.get("onDelete").toString()));
      }
      // validate the optional field `onDelete`
      if (jsonObj.get("onDelete") != null && !jsonObj.get("onDelete").isJsonNull()) {
        OnDeleteEnum.validateJsonElement(jsonObj.get("onDelete"));
      }
      // validate the optional field `partner`
      if (jsonObj.get("partner") != null && !jsonObj.get("partner").isJsonNull()) {
        IEdmNavigationProperty.validateJsonElement(jsonObj.get("partner"));
      }
      if ((jsonObj.get("propertyKind") != null && !jsonObj.get("propertyKind").isJsonNull()) && !jsonObj.get("propertyKind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `propertyKind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("propertyKind").toString()));
      }
      // validate the optional field `propertyKind`
      if (jsonObj.get("propertyKind") != null && !jsonObj.get("propertyKind").isJsonNull()) {
        PropertyKindEnum.validateJsonElement(jsonObj.get("propertyKind"));
      }
      // validate the optional field `referentialConstraint`
      if (jsonObj.get("referentialConstraint") != null && !jsonObj.get("referentialConstraint").isJsonNull()) {
        IEdmReferentialConstraint.validateJsonElement(jsonObj.get("referentialConstraint"));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        IEdmTypeReference.validateJsonElement(jsonObj.get("type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IEdmNavigationProperty.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IEdmNavigationProperty' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IEdmNavigationProperty> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IEdmNavigationProperty.class));

       return (TypeAdapter<T>) new TypeAdapter<IEdmNavigationProperty>() {
           @Override
           public void write(JsonWriter out, IEdmNavigationProperty value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IEdmNavigationProperty read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IEdmNavigationProperty given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IEdmNavigationProperty
   * @throws IOException if the JSON string is invalid with respect to IEdmNavigationProperty
   */
  public static IEdmNavigationProperty fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IEdmNavigationProperty.class);
  }

  /**
   * Convert an instance of IEdmNavigationProperty to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

