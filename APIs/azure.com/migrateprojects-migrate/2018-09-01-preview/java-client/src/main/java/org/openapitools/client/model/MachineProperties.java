/*
 * Azure Migrate Hub
 * Migrate your workloads to Azure.
 *
 * The version of the OpenAPI document: 2018-09-01-preview
 * Contact: azuremigratehub@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AssessmentDetails;
import org.openapitools.client.model.DiscoveryDetails;
import org.openapitools.client.model.MigrationDetails;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties of the machine resource.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:17:48.937321-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MachineProperties {
  public static final String SERIALIZED_NAME_ASSESSMENT_DATA = "assessmentData";
  @SerializedName(SERIALIZED_NAME_ASSESSMENT_DATA)
  private List<AssessmentDetails> assessmentData = new ArrayList<>();

  public static final String SERIALIZED_NAME_DISCOVERY_DATA = "discoveryData";
  @SerializedName(SERIALIZED_NAME_DISCOVERY_DATA)
  private List<DiscoveryDetails> discoveryData = new ArrayList<>();

  public static final String SERIALIZED_NAME_LAST_UPDATED_TIME = "lastUpdatedTime";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED_TIME)
  private OffsetDateTime lastUpdatedTime;

  public static final String SERIALIZED_NAME_MIGRATION_DATA = "migrationData";
  @SerializedName(SERIALIZED_NAME_MIGRATION_DATA)
  private List<MigrationDetails> migrationData = new ArrayList<>();

  public MachineProperties() {
  }

  public MachineProperties assessmentData(List<AssessmentDetails> assessmentData) {
    this.assessmentData = assessmentData;
    return this;
  }

  public MachineProperties addAssessmentDataItem(AssessmentDetails assessmentDataItem) {
    if (this.assessmentData == null) {
      this.assessmentData = new ArrayList<>();
    }
    this.assessmentData.add(assessmentDataItem);
    return this;
  }

  /**
   * Gets or sets the assessment details of the machine published by various sources.
   * @return assessmentData
   */
  @javax.annotation.Nullable
  public List<AssessmentDetails> getAssessmentData() {
    return assessmentData;
  }

  public void setAssessmentData(List<AssessmentDetails> assessmentData) {
    this.assessmentData = assessmentData;
  }


  public MachineProperties discoveryData(List<DiscoveryDetails> discoveryData) {
    this.discoveryData = discoveryData;
    return this;
  }

  public MachineProperties addDiscoveryDataItem(DiscoveryDetails discoveryDataItem) {
    if (this.discoveryData == null) {
      this.discoveryData = new ArrayList<>();
    }
    this.discoveryData.add(discoveryDataItem);
    return this;
  }

  /**
   * Gets or sets the discovery details of the machine published by various sources.
   * @return discoveryData
   */
  @javax.annotation.Nullable
  public List<DiscoveryDetails> getDiscoveryData() {
    return discoveryData;
  }

  public void setDiscoveryData(List<DiscoveryDetails> discoveryData) {
    this.discoveryData = discoveryData;
  }


  public MachineProperties lastUpdatedTime(OffsetDateTime lastUpdatedTime) {
    this.lastUpdatedTime = lastUpdatedTime;
    return this;
  }

  /**
   * Gets or sets the time of the last modification of the machine.
   * @return lastUpdatedTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastUpdatedTime() {
    return lastUpdatedTime;
  }

  public void setLastUpdatedTime(OffsetDateTime lastUpdatedTime) {
    this.lastUpdatedTime = lastUpdatedTime;
  }


  public MachineProperties migrationData(List<MigrationDetails> migrationData) {
    this.migrationData = migrationData;
    return this;
  }

  public MachineProperties addMigrationDataItem(MigrationDetails migrationDataItem) {
    if (this.migrationData == null) {
      this.migrationData = new ArrayList<>();
    }
    this.migrationData.add(migrationDataItem);
    return this;
  }

  /**
   * Gets or sets the migration details of the machine published by various sources.
   * @return migrationData
   */
  @javax.annotation.Nullable
  public List<MigrationDetails> getMigrationData() {
    return migrationData;
  }

  public void setMigrationData(List<MigrationDetails> migrationData) {
    this.migrationData = migrationData;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MachineProperties machineProperties = (MachineProperties) o;
    return Objects.equals(this.assessmentData, machineProperties.assessmentData) &&
        Objects.equals(this.discoveryData, machineProperties.discoveryData) &&
        Objects.equals(this.lastUpdatedTime, machineProperties.lastUpdatedTime) &&
        Objects.equals(this.migrationData, machineProperties.migrationData);
  }

  @Override
  public int hashCode() {
    return Objects.hash(assessmentData, discoveryData, lastUpdatedTime, migrationData);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MachineProperties {\n");
    sb.append("    assessmentData: ").append(toIndentedString(assessmentData)).append("\n");
    sb.append("    discoveryData: ").append(toIndentedString(discoveryData)).append("\n");
    sb.append("    lastUpdatedTime: ").append(toIndentedString(lastUpdatedTime)).append("\n");
    sb.append("    migrationData: ").append(toIndentedString(migrationData)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("assessmentData");
    openapiFields.add("discoveryData");
    openapiFields.add("lastUpdatedTime");
    openapiFields.add("migrationData");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MachineProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MachineProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MachineProperties is not found in the empty JSON string", MachineProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MachineProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MachineProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("assessmentData") != null && !jsonObj.get("assessmentData").isJsonNull()) {
        JsonArray jsonArrayassessmentData = jsonObj.getAsJsonArray("assessmentData");
        if (jsonArrayassessmentData != null) {
          // ensure the json data is an array
          if (!jsonObj.get("assessmentData").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `assessmentData` to be an array in the JSON string but got `%s`", jsonObj.get("assessmentData").toString()));
          }

          // validate the optional field `assessmentData` (array)
          for (int i = 0; i < jsonArrayassessmentData.size(); i++) {
            AssessmentDetails.validateJsonElement(jsonArrayassessmentData.get(i));
          };
        }
      }
      if (jsonObj.get("discoveryData") != null && !jsonObj.get("discoveryData").isJsonNull()) {
        JsonArray jsonArraydiscoveryData = jsonObj.getAsJsonArray("discoveryData");
        if (jsonArraydiscoveryData != null) {
          // ensure the json data is an array
          if (!jsonObj.get("discoveryData").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `discoveryData` to be an array in the JSON string but got `%s`", jsonObj.get("discoveryData").toString()));
          }

          // validate the optional field `discoveryData` (array)
          for (int i = 0; i < jsonArraydiscoveryData.size(); i++) {
            DiscoveryDetails.validateJsonElement(jsonArraydiscoveryData.get(i));
          };
        }
      }
      if (jsonObj.get("migrationData") != null && !jsonObj.get("migrationData").isJsonNull()) {
        JsonArray jsonArraymigrationData = jsonObj.getAsJsonArray("migrationData");
        if (jsonArraymigrationData != null) {
          // ensure the json data is an array
          if (!jsonObj.get("migrationData").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `migrationData` to be an array in the JSON string but got `%s`", jsonObj.get("migrationData").toString()));
          }

          // validate the optional field `migrationData` (array)
          for (int i = 0; i < jsonArraymigrationData.size(); i++) {
            MigrationDetails.validateJsonElement(jsonArraymigrationData.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MachineProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MachineProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MachineProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MachineProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<MachineProperties>() {
           @Override
           public void write(JsonWriter out, MachineProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MachineProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MachineProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MachineProperties
   * @throws IOException if the JSON string is invalid with respect to MachineProperties
   */
  public static MachineProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MachineProperties.class);
  }

  /**
   * Convert an instance of MachineProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

