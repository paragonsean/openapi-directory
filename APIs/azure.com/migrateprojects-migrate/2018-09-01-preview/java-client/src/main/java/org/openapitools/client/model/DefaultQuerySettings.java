/*
 * Azure Migrate Hub
 * Migrate your workloads to Azure.
 *
 * The version of the OpenAPI document: 2018-09-01-preview
 * Contact: azuremigratehub@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DefaultQuerySettings
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:17:48.937321-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DefaultQuerySettings {
  public static final String SERIALIZED_NAME_ENABLE_COUNT = "enableCount";
  @SerializedName(SERIALIZED_NAME_ENABLE_COUNT)
  private Boolean enableCount;

  public static final String SERIALIZED_NAME_ENABLE_EXPAND = "enableExpand";
  @SerializedName(SERIALIZED_NAME_ENABLE_EXPAND)
  private Boolean enableExpand;

  public static final String SERIALIZED_NAME_ENABLE_FILTER = "enableFilter";
  @SerializedName(SERIALIZED_NAME_ENABLE_FILTER)
  private Boolean enableFilter;

  public static final String SERIALIZED_NAME_ENABLE_ORDER_BY = "enableOrderBy";
  @SerializedName(SERIALIZED_NAME_ENABLE_ORDER_BY)
  private Boolean enableOrderBy;

  public static final String SERIALIZED_NAME_ENABLE_SELECT = "enableSelect";
  @SerializedName(SERIALIZED_NAME_ENABLE_SELECT)
  private Boolean enableSelect;

  public static final String SERIALIZED_NAME_MAX_TOP = "maxTop";
  @SerializedName(SERIALIZED_NAME_MAX_TOP)
  private Integer maxTop;

  public DefaultQuerySettings() {
  }

  public DefaultQuerySettings enableCount(Boolean enableCount) {
    this.enableCount = enableCount;
    return this;
  }

  /**
   * Get enableCount
   * @return enableCount
   */
  @javax.annotation.Nullable
  public Boolean getEnableCount() {
    return enableCount;
  }

  public void setEnableCount(Boolean enableCount) {
    this.enableCount = enableCount;
  }


  public DefaultQuerySettings enableExpand(Boolean enableExpand) {
    this.enableExpand = enableExpand;
    return this;
  }

  /**
   * Get enableExpand
   * @return enableExpand
   */
  @javax.annotation.Nullable
  public Boolean getEnableExpand() {
    return enableExpand;
  }

  public void setEnableExpand(Boolean enableExpand) {
    this.enableExpand = enableExpand;
  }


  public DefaultQuerySettings enableFilter(Boolean enableFilter) {
    this.enableFilter = enableFilter;
    return this;
  }

  /**
   * Get enableFilter
   * @return enableFilter
   */
  @javax.annotation.Nullable
  public Boolean getEnableFilter() {
    return enableFilter;
  }

  public void setEnableFilter(Boolean enableFilter) {
    this.enableFilter = enableFilter;
  }


  public DefaultQuerySettings enableOrderBy(Boolean enableOrderBy) {
    this.enableOrderBy = enableOrderBy;
    return this;
  }

  /**
   * Get enableOrderBy
   * @return enableOrderBy
   */
  @javax.annotation.Nullable
  public Boolean getEnableOrderBy() {
    return enableOrderBy;
  }

  public void setEnableOrderBy(Boolean enableOrderBy) {
    this.enableOrderBy = enableOrderBy;
  }


  public DefaultQuerySettings enableSelect(Boolean enableSelect) {
    this.enableSelect = enableSelect;
    return this;
  }

  /**
   * Get enableSelect
   * @return enableSelect
   */
  @javax.annotation.Nullable
  public Boolean getEnableSelect() {
    return enableSelect;
  }

  public void setEnableSelect(Boolean enableSelect) {
    this.enableSelect = enableSelect;
  }


  public DefaultQuerySettings maxTop(Integer maxTop) {
    this.maxTop = maxTop;
    return this;
  }

  /**
   * Get maxTop
   * @return maxTop
   */
  @javax.annotation.Nullable
  public Integer getMaxTop() {
    return maxTop;
  }

  public void setMaxTop(Integer maxTop) {
    this.maxTop = maxTop;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DefaultQuerySettings defaultQuerySettings = (DefaultQuerySettings) o;
    return Objects.equals(this.enableCount, defaultQuerySettings.enableCount) &&
        Objects.equals(this.enableExpand, defaultQuerySettings.enableExpand) &&
        Objects.equals(this.enableFilter, defaultQuerySettings.enableFilter) &&
        Objects.equals(this.enableOrderBy, defaultQuerySettings.enableOrderBy) &&
        Objects.equals(this.enableSelect, defaultQuerySettings.enableSelect) &&
        Objects.equals(this.maxTop, defaultQuerySettings.maxTop);
  }

  @Override
  public int hashCode() {
    return Objects.hash(enableCount, enableExpand, enableFilter, enableOrderBy, enableSelect, maxTop);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DefaultQuerySettings {\n");
    sb.append("    enableCount: ").append(toIndentedString(enableCount)).append("\n");
    sb.append("    enableExpand: ").append(toIndentedString(enableExpand)).append("\n");
    sb.append("    enableFilter: ").append(toIndentedString(enableFilter)).append("\n");
    sb.append("    enableOrderBy: ").append(toIndentedString(enableOrderBy)).append("\n");
    sb.append("    enableSelect: ").append(toIndentedString(enableSelect)).append("\n");
    sb.append("    maxTop: ").append(toIndentedString(maxTop)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("enableCount");
    openapiFields.add("enableExpand");
    openapiFields.add("enableFilter");
    openapiFields.add("enableOrderBy");
    openapiFields.add("enableSelect");
    openapiFields.add("maxTop");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DefaultQuerySettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DefaultQuerySettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DefaultQuerySettings is not found in the empty JSON string", DefaultQuerySettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DefaultQuerySettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DefaultQuerySettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DefaultQuerySettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DefaultQuerySettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DefaultQuerySettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DefaultQuerySettings.class));

       return (TypeAdapter<T>) new TypeAdapter<DefaultQuerySettings>() {
           @Override
           public void write(JsonWriter out, DefaultQuerySettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DefaultQuerySettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DefaultQuerySettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DefaultQuerySettings
   * @throws IOException if the JSON string is invalid with respect to DefaultQuerySettings
   */
  public static DefaultQuerySettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DefaultQuerySettings.class);
  }

  /**
   * Convert an instance of DefaultQuerySettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

