/*
 * Azure Migrate Hub
 * Migrate your workloads to Azure.
 *
 * The version of the OpenAPI document: 2018-09-01-preview
 * Contact: azuremigratehub@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Solution;
import org.openapitools.client.model.SolutionConfig;
import org.openapitools.client.model.SolutionsCollection;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SolutionsApi
 */
@Disabled
public class SolutionsApiTest {

    private final SolutionsApi api = new SolutionsApi();

    /**
     * Cleanup the solution data in the migrate project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void solutionsCleanupSolutionDataTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String migrateProjectName = null;
        String solutionName = null;
        String apiVersion = null;
        api.solutionsCleanupSolutionData(subscriptionId, resourceGroupName, migrateProjectName, solutionName, apiVersion);
        // TODO: test validations
    }

    /**
     * Delete the solution
     *
     * Delete the solution. Deleting non-existent project is a no-operation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void solutionsDeleteSolutionTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String migrateProjectName = null;
        String solutionName = null;
        String apiVersion = null;
        String acceptLanguage = null;
        api.solutionsDeleteSolution(subscriptionId, resourceGroupName, migrateProjectName, solutionName, apiVersion, acceptLanguage);
        // TODO: test validations
    }

    /**
     * Gets the list of solutions in the migrate project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void solutionsEnumerateSolutionsTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String migrateProjectName = null;
        String apiVersion = null;
        SolutionsCollection response = api.solutionsEnumerateSolutions(subscriptionId, resourceGroupName, migrateProjectName, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets the config for the solution in the migrate project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void solutionsGetConfigTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String migrateProjectName = null;
        String solutionName = null;
        String apiVersion = null;
        SolutionConfig response = api.solutionsGetConfig(subscriptionId, resourceGroupName, migrateProjectName, solutionName, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets a solution in the migrate project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void solutionsGetSolutionTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String migrateProjectName = null;
        String solutionName = null;
        String apiVersion = null;
        Solution response = api.solutionsGetSolution(subscriptionId, resourceGroupName, migrateProjectName, solutionName, apiVersion);
        // TODO: test validations
    }

    /**
     * Update solution.
     *
     * Update a solution with specified name. Supports partial updates, for example only tags can be provided.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void solutionsPatchSolutionTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String migrateProjectName = null;
        String solutionName = null;
        String apiVersion = null;
        Solution solutionInput = null;
        Solution response = api.solutionsPatchSolution(subscriptionId, resourceGroupName, migrateProjectName, solutionName, apiVersion, solutionInput);
        // TODO: test validations
    }

    /**
     * Creates a solution in the migrate project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void solutionsPutSolutionTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String migrateProjectName = null;
        String solutionName = null;
        String apiVersion = null;
        Solution solutionInput = null;
        Solution response = api.solutionsPutSolution(subscriptionId, resourceGroupName, migrateProjectName, solutionName, apiVersion, solutionInput);
        // TODO: test validations
    }

}
