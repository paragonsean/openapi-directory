/*
 * Azure Migrate Hub
 * Migrate your workloads to Azure.
 *
 * The version of the OpenAPI document: 2018-09-01-preview
 * Contact: azuremigratehub@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.MigrateProject;
import org.openapitools.client.model.RefreshSummaryInput;
import org.openapitools.client.model.RefreshSummaryResult;
import org.openapitools.client.model.RegisterToolInput;
import org.openapitools.client.model.RegistrationResult;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for MigrateProjectsApi
 */
@Disabled
public class MigrateProjectsApiTest {

    private final MigrateProjectsApi api = new MigrateProjectsApi();

    /**
     * Delete the migrate project
     *
     * Delete the migrate project. Deleting non-existent project is a no-operation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void migrateProjectsDeleteMigrateProjectTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String migrateProjectName = null;
        String apiVersion = null;
        String acceptLanguage = null;
        api.migrateProjectsDeleteMigrateProject(subscriptionId, resourceGroupName, migrateProjectName, apiVersion, acceptLanguage);
        // TODO: test validations
    }

    /**
     * Method to get a migrate project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void migrateProjectsGetMigrateProjectTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String migrateProjectName = null;
        String apiVersion = null;
        MigrateProject response = api.migrateProjectsGetMigrateProject(subscriptionId, resourceGroupName, migrateProjectName, apiVersion);
        // TODO: test validations
    }

    /**
     * Update migrate project.
     *
     * Update a migrate project with specified name. Supports partial updates, for example only tags can be provided.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void migrateProjectsPatchMigrateProjectTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String migrateProjectName = null;
        String apiVersion = null;
        MigrateProject body = null;
        String acceptLanguage = null;
        MigrateProject response = api.migrateProjectsPatchMigrateProject(subscriptionId, resourceGroupName, migrateProjectName, apiVersion, body, acceptLanguage);
        // TODO: test validations
    }

    /**
     * Method to create or update a migrate project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void migrateProjectsPutMigrateProjectTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String migrateProjectName = null;
        String apiVersion = null;
        MigrateProject body = null;
        String acceptLanguage = null;
        MigrateProject response = api.migrateProjectsPutMigrateProject(subscriptionId, resourceGroupName, migrateProjectName, apiVersion, body, acceptLanguage);
        // TODO: test validations
    }

    /**
     * Refresh the summary of the migrate project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void migrateProjectsRefreshMigrateProjectSummaryTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String migrateProjectName = null;
        String apiVersion = null;
        RefreshSummaryInput input = null;
        RefreshSummaryResult response = api.migrateProjectsRefreshMigrateProjectSummary(subscriptionId, resourceGroupName, migrateProjectName, apiVersion, input);
        // TODO: test validations
    }

    /**
     * Registers a tool with the migrate project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void migrateProjectsRegisterToolTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String migrateProjectName = null;
        String apiVersion = null;
        RegisterToolInput input = null;
        String acceptLanguage = null;
        RegistrationResult response = api.migrateProjectsRegisterTool(subscriptionId, resourceGroupName, migrateProjectName, apiVersion, input, acceptLanguage);
        // TODO: test validations
    }

}
