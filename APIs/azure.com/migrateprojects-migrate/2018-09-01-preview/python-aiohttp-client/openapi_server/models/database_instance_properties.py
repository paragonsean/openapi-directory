# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.database_instance_discovery_details import DatabaseInstanceDiscoveryDetails
from openapi_server.models.database_instance_summary import DatabaseInstanceSummary
from openapi_server import util


class DatabaseInstanceProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, discovery_data: List[DatabaseInstanceDiscoveryDetails]=None, last_updated_time: datetime=None, summary: Dict[str, DatabaseInstanceSummary]=None):
        """DatabaseInstanceProperties - a model defined in OpenAPI

        :param discovery_data: The discovery_data of this DatabaseInstanceProperties.
        :param last_updated_time: The last_updated_time of this DatabaseInstanceProperties.
        :param summary: The summary of this DatabaseInstanceProperties.
        """
        self.openapi_types = {
            'discovery_data': List[DatabaseInstanceDiscoveryDetails],
            'last_updated_time': datetime,
            'summary': Dict[str, DatabaseInstanceSummary]
        }

        self.attribute_map = {
            'discovery_data': 'discoveryData',
            'last_updated_time': 'lastUpdatedTime',
            'summary': 'summary'
        }

        self._discovery_data = discovery_data
        self._last_updated_time = last_updated_time
        self._summary = summary

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DatabaseInstanceProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DatabaseInstanceProperties of this DatabaseInstanceProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def discovery_data(self):
        """Gets the discovery_data of this DatabaseInstanceProperties.

        Gets or sets the assessment details of the database instance published by various sources.

        :return: The discovery_data of this DatabaseInstanceProperties.
        :rtype: List[DatabaseInstanceDiscoveryDetails]
        """
        return self._discovery_data

    @discovery_data.setter
    def discovery_data(self, discovery_data):
        """Sets the discovery_data of this DatabaseInstanceProperties.

        Gets or sets the assessment details of the database instance published by various sources.

        :param discovery_data: The discovery_data of this DatabaseInstanceProperties.
        :type discovery_data: List[DatabaseInstanceDiscoveryDetails]
        """

        self._discovery_data = discovery_data

    @property
    def last_updated_time(self):
        """Gets the last_updated_time of this DatabaseInstanceProperties.

        Gets or sets the time of the last modification of the database.

        :return: The last_updated_time of this DatabaseInstanceProperties.
        :rtype: datetime
        """
        return self._last_updated_time

    @last_updated_time.setter
    def last_updated_time(self, last_updated_time):
        """Sets the last_updated_time of this DatabaseInstanceProperties.

        Gets or sets the time of the last modification of the database.

        :param last_updated_time: The last_updated_time of this DatabaseInstanceProperties.
        :type last_updated_time: datetime
        """

        self._last_updated_time = last_updated_time

    @property
    def summary(self):
        """Gets the summary of this DatabaseInstanceProperties.

        Gets or sets the database instances summary per solution. The key of dictionary is the solution name and value is the corresponding database instance summary object.

        :return: The summary of this DatabaseInstanceProperties.
        :rtype: Dict[str, DatabaseInstanceSummary]
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this DatabaseInstanceProperties.

        Gets or sets the database instances summary per solution. The key of dictionary is the solution name and value is the corresponding database instance summary object.

        :param summary: The summary of this DatabaseInstanceProperties.
        :type summary: Dict[str, DatabaseInstanceSummary]
        """

        self._summary = summary
