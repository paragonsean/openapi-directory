# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.i_edm_navigation_source import IEdmNavigationSource
from openapi_server.models.i_edm_type import IEdmType
from openapi_server.models.o_data_path_segment import ODataPathSegment
from openapi_server import util


class ODataPath(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, edm_type: IEdmType=None, navigation_source: IEdmNavigationSource=None, path: List[ODataPathSegment]=None, path_template: str=None, segments: List[ODataPathSegment]=None):
        """ODataPath - a model defined in OpenAPI

        :param edm_type: The edm_type of this ODataPath.
        :param navigation_source: The navigation_source of this ODataPath.
        :param path: The path of this ODataPath.
        :param path_template: The path_template of this ODataPath.
        :param segments: The segments of this ODataPath.
        """
        self.openapi_types = {
            'edm_type': IEdmType,
            'navigation_source': IEdmNavigationSource,
            'path': List[ODataPathSegment],
            'path_template': str,
            'segments': List[ODataPathSegment]
        }

        self.attribute_map = {
            'edm_type': 'edmType',
            'navigation_source': 'navigationSource',
            'path': 'path',
            'path_template': 'pathTemplate',
            'segments': 'segments'
        }

        self._edm_type = edm_type
        self._navigation_source = navigation_source
        self._path = path
        self._path_template = path_template
        self._segments = segments

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ODataPath':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ODataPath of this ODataPath.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def edm_type(self):
        """Gets the edm_type of this ODataPath.


        :return: The edm_type of this ODataPath.
        :rtype: IEdmType
        """
        return self._edm_type

    @edm_type.setter
    def edm_type(self, edm_type):
        """Sets the edm_type of this ODataPath.


        :param edm_type: The edm_type of this ODataPath.
        :type edm_type: IEdmType
        """

        self._edm_type = edm_type

    @property
    def navigation_source(self):
        """Gets the navigation_source of this ODataPath.


        :return: The navigation_source of this ODataPath.
        :rtype: IEdmNavigationSource
        """
        return self._navigation_source

    @navigation_source.setter
    def navigation_source(self, navigation_source):
        """Sets the navigation_source of this ODataPath.


        :param navigation_source: The navigation_source of this ODataPath.
        :type navigation_source: IEdmNavigationSource
        """

        self._navigation_source = navigation_source

    @property
    def path(self):
        """Gets the path of this ODataPath.


        :return: The path of this ODataPath.
        :rtype: List[ODataPathSegment]
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this ODataPath.


        :param path: The path of this ODataPath.
        :type path: List[ODataPathSegment]
        """

        self._path = path

    @property
    def path_template(self):
        """Gets the path_template of this ODataPath.


        :return: The path_template of this ODataPath.
        :rtype: str
        """
        return self._path_template

    @path_template.setter
    def path_template(self, path_template):
        """Sets the path_template of this ODataPath.


        :param path_template: The path_template of this ODataPath.
        :type path_template: str
        """

        self._path_template = path_template

    @property
    def segments(self):
        """Gets the segments of this ODataPath.


        :return: The segments of this ODataPath.
        :rtype: List[ODataPathSegment]
        """
        return self._segments

    @segments.setter
    def segments(self, segments):
        """Sets the segments of this ODataPath.


        :param segments: The segments of this ODataPath.
        :type segments: List[ODataPathSegment]
        """

        self._segments = segments
