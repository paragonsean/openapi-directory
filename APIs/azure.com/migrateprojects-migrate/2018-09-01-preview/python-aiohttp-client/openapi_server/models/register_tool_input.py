# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RegisterToolInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, tool: str=None):
        """RegisterToolInput - a model defined in OpenAPI

        :param tool: The tool of this RegisterToolInput.
        """
        self.openapi_types = {
            'tool': str
        }

        self.attribute_map = {
            'tool': 'tool'
        }

        self._tool = tool

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RegisterToolInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RegisterToolInput of this RegisterToolInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def tool(self):
        """Gets the tool of this RegisterToolInput.

        Gets or sets the tool to be registered.

        :return: The tool of this RegisterToolInput.
        :rtype: str
        """
        return self._tool

    @tool.setter
    def tool(self, tool):
        """Sets the tool of this RegisterToolInput.

        Gets or sets the tool to be registered.

        :param tool: The tool of this RegisterToolInput.
        :type tool: str
        """
        allowed_values = ["ServerDiscovery", "ServerAssessment", "ServerMigration", "Cloudamize", "Turbonomic", "Zerto", "CorentTech", "ServerAssessmentV1", "ServerMigration_Replication", "Carbonite", "DataMigrationAssistant", "DatabaseMigrationService"]  # noqa: E501
        if tool not in allowed_values:
            raise ValueError(
                "Invalid value for `tool` ({0}), must be one of {1}"
                .format(tool, allowed_values)
            )

        self._tool = tool
