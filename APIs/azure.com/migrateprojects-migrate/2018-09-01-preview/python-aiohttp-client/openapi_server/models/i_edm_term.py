# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.i_edm_type_reference import IEdmTypeReference
from openapi_server import util


class IEdmTerm(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, applies_to: str=None, default_value: str=None, name: str=None, namespace: str=None, schema_element_kind: str=None, type: IEdmTypeReference=None):
        """IEdmTerm - a model defined in OpenAPI

        :param applies_to: The applies_to of this IEdmTerm.
        :param default_value: The default_value of this IEdmTerm.
        :param name: The name of this IEdmTerm.
        :param namespace: The namespace of this IEdmTerm.
        :param schema_element_kind: The schema_element_kind of this IEdmTerm.
        :param type: The type of this IEdmTerm.
        """
        self.openapi_types = {
            'applies_to': str,
            'default_value': str,
            'name': str,
            'namespace': str,
            'schema_element_kind': str,
            'type': IEdmTypeReference
        }

        self.attribute_map = {
            'applies_to': 'appliesTo',
            'default_value': 'defaultValue',
            'name': 'name',
            'namespace': 'namespace',
            'schema_element_kind': 'schemaElementKind',
            'type': 'type'
        }

        self._applies_to = applies_to
        self._default_value = default_value
        self._name = name
        self._namespace = namespace
        self._schema_element_kind = schema_element_kind
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IEdmTerm':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IEdmTerm of this IEdmTerm.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def applies_to(self):
        """Gets the applies_to of this IEdmTerm.


        :return: The applies_to of this IEdmTerm.
        :rtype: str
        """
        return self._applies_to

    @applies_to.setter
    def applies_to(self, applies_to):
        """Sets the applies_to of this IEdmTerm.


        :param applies_to: The applies_to of this IEdmTerm.
        :type applies_to: str
        """

        self._applies_to = applies_to

    @property
    def default_value(self):
        """Gets the default_value of this IEdmTerm.


        :return: The default_value of this IEdmTerm.
        :rtype: str
        """
        return self._default_value

    @default_value.setter
    def default_value(self, default_value):
        """Sets the default_value of this IEdmTerm.


        :param default_value: The default_value of this IEdmTerm.
        :type default_value: str
        """

        self._default_value = default_value

    @property
    def name(self):
        """Gets the name of this IEdmTerm.


        :return: The name of this IEdmTerm.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this IEdmTerm.


        :param name: The name of this IEdmTerm.
        :type name: str
        """

        self._name = name

    @property
    def namespace(self):
        """Gets the namespace of this IEdmTerm.


        :return: The namespace of this IEdmTerm.
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this IEdmTerm.


        :param namespace: The namespace of this IEdmTerm.
        :type namespace: str
        """

        self._namespace = namespace

    @property
    def schema_element_kind(self):
        """Gets the schema_element_kind of this IEdmTerm.


        :return: The schema_element_kind of this IEdmTerm.
        :rtype: str
        """
        return self._schema_element_kind

    @schema_element_kind.setter
    def schema_element_kind(self, schema_element_kind):
        """Sets the schema_element_kind of this IEdmTerm.


        :param schema_element_kind: The schema_element_kind of this IEdmTerm.
        :type schema_element_kind: str
        """
        allowed_values = ["None", "TypeDefinition", "Term", "Action", "EntityContainer", "Function"]  # noqa: E501
        if schema_element_kind not in allowed_values:
            raise ValueError(
                "Invalid value for `schema_element_kind` ({0}), must be one of {1}"
                .format(schema_element_kind, allowed_values)
            )

        self._schema_element_kind = schema_element_kind

    @property
    def type(self):
        """Gets the type of this IEdmTerm.


        :return: The type of this IEdmTerm.
        :rtype: IEdmTypeReference
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this IEdmTerm.


        :param type: The type of this IEdmTerm.
        :type type: IEdmTypeReference
        """

        self._type = type
