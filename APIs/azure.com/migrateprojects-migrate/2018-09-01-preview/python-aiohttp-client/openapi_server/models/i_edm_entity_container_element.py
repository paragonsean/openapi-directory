# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.i_edm_entity_container import IEdmEntityContainer
from openapi_server import util


class IEdmEntityContainerElement(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, container: IEdmEntityContainer=None, container_element_kind: str=None, name: str=None):
        """IEdmEntityContainerElement - a model defined in OpenAPI

        :param container: The container of this IEdmEntityContainerElement.
        :param container_element_kind: The container_element_kind of this IEdmEntityContainerElement.
        :param name: The name of this IEdmEntityContainerElement.
        """
        self.openapi_types = {
            'container': IEdmEntityContainer,
            'container_element_kind': str,
            'name': str
        }

        self.attribute_map = {
            'container': 'container',
            'container_element_kind': 'containerElementKind',
            'name': 'name'
        }

        self._container = container
        self._container_element_kind = container_element_kind
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IEdmEntityContainerElement':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IEdmEntityContainerElement of this IEdmEntityContainerElement.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def container(self):
        """Gets the container of this IEdmEntityContainerElement.


        :return: The container of this IEdmEntityContainerElement.
        :rtype: IEdmEntityContainer
        """
        return self._container

    @container.setter
    def container(self, container):
        """Sets the container of this IEdmEntityContainerElement.


        :param container: The container of this IEdmEntityContainerElement.
        :type container: IEdmEntityContainer
        """

        self._container = container

    @property
    def container_element_kind(self):
        """Gets the container_element_kind of this IEdmEntityContainerElement.


        :return: The container_element_kind of this IEdmEntityContainerElement.
        :rtype: str
        """
        return self._container_element_kind

    @container_element_kind.setter
    def container_element_kind(self, container_element_kind):
        """Sets the container_element_kind of this IEdmEntityContainerElement.


        :param container_element_kind: The container_element_kind of this IEdmEntityContainerElement.
        :type container_element_kind: str
        """
        allowed_values = ["None", "EntitySet", "ActionImport", "FunctionImport", "Singleton"]  # noqa: E501
        if container_element_kind not in allowed_values:
            raise ValueError(
                "Invalid value for `container_element_kind` ({0}), must be one of {1}"
                .format(container_element_kind, allowed_values)
            )

        self._container_element_kind = container_element_kind

    @property
    def name(self):
        """Gets the name of this IEdmEntityContainerElement.


        :return: The name of this IEdmEntityContainerElement.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this IEdmEntityContainerElement.


        :param name: The name of this IEdmEntityContainerElement.
        :type name: str
        """

        self._name = name
