# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.i_edm_expression import IEdmExpression
from openapi_server.models.i_edm_term import IEdmTerm
from openapi_server import util


class IEdmVocabularyAnnotation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, qualifier: str=None, target: object=None, term: IEdmTerm=None, value: IEdmExpression=None):
        """IEdmVocabularyAnnotation - a model defined in OpenAPI

        :param qualifier: The qualifier of this IEdmVocabularyAnnotation.
        :param target: The target of this IEdmVocabularyAnnotation.
        :param term: The term of this IEdmVocabularyAnnotation.
        :param value: The value of this IEdmVocabularyAnnotation.
        """
        self.openapi_types = {
            'qualifier': str,
            'target': object,
            'term': IEdmTerm,
            'value': IEdmExpression
        }

        self.attribute_map = {
            'qualifier': 'qualifier',
            'target': 'target',
            'term': 'term',
            'value': 'value'
        }

        self._qualifier = qualifier
        self._target = target
        self._term = term
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IEdmVocabularyAnnotation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IEdmVocabularyAnnotation of this IEdmVocabularyAnnotation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def qualifier(self):
        """Gets the qualifier of this IEdmVocabularyAnnotation.


        :return: The qualifier of this IEdmVocabularyAnnotation.
        :rtype: str
        """
        return self._qualifier

    @qualifier.setter
    def qualifier(self, qualifier):
        """Sets the qualifier of this IEdmVocabularyAnnotation.


        :param qualifier: The qualifier of this IEdmVocabularyAnnotation.
        :type qualifier: str
        """

        self._qualifier = qualifier

    @property
    def target(self):
        """Gets the target of this IEdmVocabularyAnnotation.


        :return: The target of this IEdmVocabularyAnnotation.
        :rtype: object
        """
        return self._target

    @target.setter
    def target(self, target):
        """Sets the target of this IEdmVocabularyAnnotation.


        :param target: The target of this IEdmVocabularyAnnotation.
        :type target: object
        """

        self._target = target

    @property
    def term(self):
        """Gets the term of this IEdmVocabularyAnnotation.


        :return: The term of this IEdmVocabularyAnnotation.
        :rtype: IEdmTerm
        """
        return self._term

    @term.setter
    def term(self, term):
        """Sets the term of this IEdmVocabularyAnnotation.


        :param term: The term of this IEdmVocabularyAnnotation.
        :type term: IEdmTerm
        """

        self._term = term

    @property
    def value(self):
        """Gets the value of this IEdmVocabularyAnnotation.


        :return: The value of this IEdmVocabularyAnnotation.
        :rtype: IEdmExpression
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this IEdmVocabularyAnnotation.


        :param value: The value of this IEdmVocabularyAnnotation.
        :type value: IEdmExpression
        """

        self._value = value
