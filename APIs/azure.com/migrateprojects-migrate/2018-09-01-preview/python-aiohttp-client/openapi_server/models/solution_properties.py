# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.solution_details import SolutionDetails
from openapi_server.models.solution_summary import SolutionSummary
from openapi_server import util


class SolutionProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cleanup_state: str=None, details: SolutionDetails=None, goal: str=None, purpose: str=None, status: str=None, summary: SolutionSummary=None, tool: str=None):
        """SolutionProperties - a model defined in OpenAPI

        :param cleanup_state: The cleanup_state of this SolutionProperties.
        :param details: The details of this SolutionProperties.
        :param goal: The goal of this SolutionProperties.
        :param purpose: The purpose of this SolutionProperties.
        :param status: The status of this SolutionProperties.
        :param summary: The summary of this SolutionProperties.
        :param tool: The tool of this SolutionProperties.
        """
        self.openapi_types = {
            'cleanup_state': str,
            'details': SolutionDetails,
            'goal': str,
            'purpose': str,
            'status': str,
            'summary': SolutionSummary,
            'tool': str
        }

        self.attribute_map = {
            'cleanup_state': 'cleanupState',
            'details': 'details',
            'goal': 'goal',
            'purpose': 'purpose',
            'status': 'status',
            'summary': 'summary',
            'tool': 'tool'
        }

        self._cleanup_state = cleanup_state
        self._details = details
        self._goal = goal
        self._purpose = purpose
        self._status = status
        self._summary = summary
        self._tool = tool

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SolutionProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SolutionProperties of this SolutionProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cleanup_state(self):
        """Gets the cleanup_state of this SolutionProperties.

        Gets or sets the cleanup state of the solution.

        :return: The cleanup_state of this SolutionProperties.
        :rtype: str
        """
        return self._cleanup_state

    @cleanup_state.setter
    def cleanup_state(self, cleanup_state):
        """Sets the cleanup_state of this SolutionProperties.

        Gets or sets the cleanup state of the solution.

        :param cleanup_state: The cleanup_state of this SolutionProperties.
        :type cleanup_state: str
        """
        allowed_values = ["None", "Started", "InProgress", "Completed", "Failed"]  # noqa: E501
        if cleanup_state not in allowed_values:
            raise ValueError(
                "Invalid value for `cleanup_state` ({0}), must be one of {1}"
                .format(cleanup_state, allowed_values)
            )

        self._cleanup_state = cleanup_state

    @property
    def details(self):
        """Gets the details of this SolutionProperties.


        :return: The details of this SolutionProperties.
        :rtype: SolutionDetails
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this SolutionProperties.


        :param details: The details of this SolutionProperties.
        :type details: SolutionDetails
        """

        self._details = details

    @property
    def goal(self):
        """Gets the goal of this SolutionProperties.

        Gets or sets the goal of the solution.

        :return: The goal of this SolutionProperties.
        :rtype: str
        """
        return self._goal

    @goal.setter
    def goal(self, goal):
        """Sets the goal of this SolutionProperties.

        Gets or sets the goal of the solution.

        :param goal: The goal of this SolutionProperties.
        :type goal: str
        """
        allowed_values = ["Servers", "Databases"]  # noqa: E501
        if goal not in allowed_values:
            raise ValueError(
                "Invalid value for `goal` ({0}), must be one of {1}"
                .format(goal, allowed_values)
            )

        self._goal = goal

    @property
    def purpose(self):
        """Gets the purpose of this SolutionProperties.

        Gets or sets the purpose of the solution.

        :return: The purpose of this SolutionProperties.
        :rtype: str
        """
        return self._purpose

    @purpose.setter
    def purpose(self, purpose):
        """Sets the purpose of this SolutionProperties.

        Gets or sets the purpose of the solution.

        :param purpose: The purpose of this SolutionProperties.
        :type purpose: str
        """
        allowed_values = ["Discovery", "Assessment", "Migration"]  # noqa: E501
        if purpose not in allowed_values:
            raise ValueError(
                "Invalid value for `purpose` ({0}), must be one of {1}"
                .format(purpose, allowed_values)
            )

        self._purpose = purpose

    @property
    def status(self):
        """Gets the status of this SolutionProperties.

        Gets or sets the current status of the solution.

        :return: The status of this SolutionProperties.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this SolutionProperties.

        Gets or sets the current status of the solution.

        :param status: The status of this SolutionProperties.
        :type status: str
        """
        allowed_values = ["Inactive", "Active"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def summary(self):
        """Gets the summary of this SolutionProperties.


        :return: The summary of this SolutionProperties.
        :rtype: SolutionSummary
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this SolutionProperties.


        :param summary: The summary of this SolutionProperties.
        :type summary: SolutionSummary
        """

        self._summary = summary

    @property
    def tool(self):
        """Gets the tool of this SolutionProperties.

        Gets or sets the tool being used in the solution.

        :return: The tool of this SolutionProperties.
        :rtype: str
        """
        return self._tool

    @tool.setter
    def tool(self, tool):
        """Sets the tool of this SolutionProperties.

        Gets or sets the tool being used in the solution.

        :param tool: The tool of this SolutionProperties.
        :type tool: str
        """
        allowed_values = ["ServerDiscovery", "ServerAssessment", "ServerMigration", "Cloudamize", "Turbonomic", "Zerto", "CorentTech", "ServerAssessmentV1", "ServerMigration_Replication", "Carbonite", "DataMigrationAssistant", "DatabaseMigrationService"]  # noqa: E501
        if tool not in allowed_values:
            raise ValueError(
                "Invalid value for `tool` ({0}), must be one of {1}"
                .format(tool, allowed_values)
            )

        self._tool = tool
