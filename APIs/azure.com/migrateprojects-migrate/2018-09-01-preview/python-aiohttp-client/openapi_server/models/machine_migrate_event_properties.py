# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.migrate_event_properties import MigrateEventProperties
from openapi_server import util


class MachineMigrateEventProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, machine: str=None, client_request_id: str=None, error_code: str=None, error_message: str=None, instance_type: str=None, possible_causes: str=None, recommendation: str=None, solution: str=None):
        """MachineMigrateEventProperties - a model defined in OpenAPI

        :param machine: The machine of this MachineMigrateEventProperties.
        :param client_request_id: The client_request_id of this MachineMigrateEventProperties.
        :param error_code: The error_code of this MachineMigrateEventProperties.
        :param error_message: The error_message of this MachineMigrateEventProperties.
        :param instance_type: The instance_type of this MachineMigrateEventProperties.
        :param possible_causes: The possible_causes of this MachineMigrateEventProperties.
        :param recommendation: The recommendation of this MachineMigrateEventProperties.
        :param solution: The solution of this MachineMigrateEventProperties.
        """
        self.openapi_types = {
            'machine': str,
            'client_request_id': str,
            'error_code': str,
            'error_message': str,
            'instance_type': str,
            'possible_causes': str,
            'recommendation': str,
            'solution': str
        }

        self.attribute_map = {
            'machine': 'machine',
            'client_request_id': 'clientRequestId',
            'error_code': 'errorCode',
            'error_message': 'errorMessage',
            'instance_type': 'instanceType',
            'possible_causes': 'possibleCauses',
            'recommendation': 'recommendation',
            'solution': 'solution'
        }

        self._machine = machine
        self._client_request_id = client_request_id
        self._error_code = error_code
        self._error_message = error_message
        self._instance_type = instance_type
        self._possible_causes = possible_causes
        self._recommendation = recommendation
        self._solution = solution

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MachineMigrateEventProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MachineMigrateEventProperties of this MachineMigrateEventProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def machine(self):
        """Gets the machine of this MachineMigrateEventProperties.

        Gets or sets the machine for which the error is being reported.

        :return: The machine of this MachineMigrateEventProperties.
        :rtype: str
        """
        return self._machine

    @machine.setter
    def machine(self, machine):
        """Sets the machine of this MachineMigrateEventProperties.

        Gets or sets the machine for which the error is being reported.

        :param machine: The machine of this MachineMigrateEventProperties.
        :type machine: str
        """

        self._machine = machine

    @property
    def client_request_id(self):
        """Gets the client_request_id of this MachineMigrateEventProperties.

        Gets or sets the client request Id of the payload for which the event is being reported.

        :return: The client_request_id of this MachineMigrateEventProperties.
        :rtype: str
        """
        return self._client_request_id

    @client_request_id.setter
    def client_request_id(self, client_request_id):
        """Sets the client_request_id of this MachineMigrateEventProperties.

        Gets or sets the client request Id of the payload for which the event is being reported.

        :param client_request_id: The client_request_id of this MachineMigrateEventProperties.
        :type client_request_id: str
        """

        self._client_request_id = client_request_id

    @property
    def error_code(self):
        """Gets the error_code of this MachineMigrateEventProperties.

        Gets or sets the error code.

        :return: The error_code of this MachineMigrateEventProperties.
        :rtype: str
        """
        return self._error_code

    @error_code.setter
    def error_code(self, error_code):
        """Sets the error_code of this MachineMigrateEventProperties.

        Gets or sets the error code.

        :param error_code: The error_code of this MachineMigrateEventProperties.
        :type error_code: str
        """

        self._error_code = error_code

    @property
    def error_message(self):
        """Gets the error_message of this MachineMigrateEventProperties.

        Gets or sets the error message.

        :return: The error_message of this MachineMigrateEventProperties.
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this MachineMigrateEventProperties.

        Gets or sets the error message.

        :param error_message: The error_message of this MachineMigrateEventProperties.
        :type error_message: str
        """

        self._error_message = error_message

    @property
    def instance_type(self):
        """Gets the instance_type of this MachineMigrateEventProperties.

        Gets the Instance type.

        :return: The instance_type of this MachineMigrateEventProperties.
        :rtype: str
        """
        return self._instance_type

    @instance_type.setter
    def instance_type(self, instance_type):
        """Sets the instance_type of this MachineMigrateEventProperties.

        Gets the Instance type.

        :param instance_type: The instance_type of this MachineMigrateEventProperties.
        :type instance_type: str
        """

        self._instance_type = instance_type

    @property
    def possible_causes(self):
        """Gets the possible_causes of this MachineMigrateEventProperties.

        Gets or sets the possible causes for the error.

        :return: The possible_causes of this MachineMigrateEventProperties.
        :rtype: str
        """
        return self._possible_causes

    @possible_causes.setter
    def possible_causes(self, possible_causes):
        """Sets the possible_causes of this MachineMigrateEventProperties.

        Gets or sets the possible causes for the error.

        :param possible_causes: The possible_causes of this MachineMigrateEventProperties.
        :type possible_causes: str
        """

        self._possible_causes = possible_causes

    @property
    def recommendation(self):
        """Gets the recommendation of this MachineMigrateEventProperties.

        Gets or sets the recommendation for the error.

        :return: The recommendation of this MachineMigrateEventProperties.
        :rtype: str
        """
        return self._recommendation

    @recommendation.setter
    def recommendation(self, recommendation):
        """Sets the recommendation of this MachineMigrateEventProperties.

        Gets or sets the recommendation for the error.

        :param recommendation: The recommendation of this MachineMigrateEventProperties.
        :type recommendation: str
        """

        self._recommendation = recommendation

    @property
    def solution(self):
        """Gets the solution of this MachineMigrateEventProperties.

        Gets or sets the solution for which the error is being reported.

        :return: The solution of this MachineMigrateEventProperties.
        :rtype: str
        """
        return self._solution

    @solution.setter
    def solution(self, solution):
        """Sets the solution of this MachineMigrateEventProperties.

        Gets or sets the solution for which the error is being reported.

        :param solution: The solution of this MachineMigrateEventProperties.
        :type solution: str
        """

        self._solution = solution
