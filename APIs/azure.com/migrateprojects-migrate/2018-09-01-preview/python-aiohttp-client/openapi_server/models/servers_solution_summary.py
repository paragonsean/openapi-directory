# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.solution_summary import SolutionSummary
from openapi_server import util


class ServersSolutionSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, assessed_count: int=None, discovered_count: int=None, migrated_count: int=None, replicating_count: int=None, test_migrated_count: int=None, instance_type: str=None):
        """ServersSolutionSummary - a model defined in OpenAPI

        :param assessed_count: The assessed_count of this ServersSolutionSummary.
        :param discovered_count: The discovered_count of this ServersSolutionSummary.
        :param migrated_count: The migrated_count of this ServersSolutionSummary.
        :param replicating_count: The replicating_count of this ServersSolutionSummary.
        :param test_migrated_count: The test_migrated_count of this ServersSolutionSummary.
        :param instance_type: The instance_type of this ServersSolutionSummary.
        """
        self.openapi_types = {
            'assessed_count': int,
            'discovered_count': int,
            'migrated_count': int,
            'replicating_count': int,
            'test_migrated_count': int,
            'instance_type': str
        }

        self.attribute_map = {
            'assessed_count': 'assessedCount',
            'discovered_count': 'discoveredCount',
            'migrated_count': 'migratedCount',
            'replicating_count': 'replicatingCount',
            'test_migrated_count': 'testMigratedCount',
            'instance_type': 'instanceType'
        }

        self._assessed_count = assessed_count
        self._discovered_count = discovered_count
        self._migrated_count = migrated_count
        self._replicating_count = replicating_count
        self._test_migrated_count = test_migrated_count
        self._instance_type = instance_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ServersSolutionSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ServersSolutionSummary of this ServersSolutionSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def assessed_count(self):
        """Gets the assessed_count of this ServersSolutionSummary.

        Gets or sets the count of servers assessed.

        :return: The assessed_count of this ServersSolutionSummary.
        :rtype: int
        """
        return self._assessed_count

    @assessed_count.setter
    def assessed_count(self, assessed_count):
        """Sets the assessed_count of this ServersSolutionSummary.

        Gets or sets the count of servers assessed.

        :param assessed_count: The assessed_count of this ServersSolutionSummary.
        :type assessed_count: int
        """

        self._assessed_count = assessed_count

    @property
    def discovered_count(self):
        """Gets the discovered_count of this ServersSolutionSummary.

        Gets or sets the count of servers discovered.

        :return: The discovered_count of this ServersSolutionSummary.
        :rtype: int
        """
        return self._discovered_count

    @discovered_count.setter
    def discovered_count(self, discovered_count):
        """Sets the discovered_count of this ServersSolutionSummary.

        Gets or sets the count of servers discovered.

        :param discovered_count: The discovered_count of this ServersSolutionSummary.
        :type discovered_count: int
        """

        self._discovered_count = discovered_count

    @property
    def migrated_count(self):
        """Gets the migrated_count of this ServersSolutionSummary.

        Gets or sets the count of servers migrated.

        :return: The migrated_count of this ServersSolutionSummary.
        :rtype: int
        """
        return self._migrated_count

    @migrated_count.setter
    def migrated_count(self, migrated_count):
        """Sets the migrated_count of this ServersSolutionSummary.

        Gets or sets the count of servers migrated.

        :param migrated_count: The migrated_count of this ServersSolutionSummary.
        :type migrated_count: int
        """

        self._migrated_count = migrated_count

    @property
    def replicating_count(self):
        """Gets the replicating_count of this ServersSolutionSummary.

        Gets or sets the count of servers being replicated.

        :return: The replicating_count of this ServersSolutionSummary.
        :rtype: int
        """
        return self._replicating_count

    @replicating_count.setter
    def replicating_count(self, replicating_count):
        """Sets the replicating_count of this ServersSolutionSummary.

        Gets or sets the count of servers being replicated.

        :param replicating_count: The replicating_count of this ServersSolutionSummary.
        :type replicating_count: int
        """

        self._replicating_count = replicating_count

    @property
    def test_migrated_count(self):
        """Gets the test_migrated_count of this ServersSolutionSummary.

        Gets or sets the count of servers test migrated.

        :return: The test_migrated_count of this ServersSolutionSummary.
        :rtype: int
        """
        return self._test_migrated_count

    @test_migrated_count.setter
    def test_migrated_count(self, test_migrated_count):
        """Sets the test_migrated_count of this ServersSolutionSummary.

        Gets or sets the count of servers test migrated.

        :param test_migrated_count: The test_migrated_count of this ServersSolutionSummary.
        :type test_migrated_count: int
        """

        self._test_migrated_count = test_migrated_count

    @property
    def instance_type(self):
        """Gets the instance_type of this ServersSolutionSummary.

        Gets the Instance type.

        :return: The instance_type of this ServersSolutionSummary.
        :rtype: str
        """
        return self._instance_type

    @instance_type.setter
    def instance_type(self, instance_type):
        """Sets the instance_type of this ServersSolutionSummary.

        Gets the Instance type.

        :param instance_type: The instance_type of this ServersSolutionSummary.
        :type instance_type: str
        """

        self._instance_type = instance_type
