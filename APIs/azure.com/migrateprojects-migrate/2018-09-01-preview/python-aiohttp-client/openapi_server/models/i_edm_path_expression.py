# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class IEdmPathExpression(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, expression_kind: str=None, path: str=None, path_segments: List[str]=None):
        """IEdmPathExpression - a model defined in OpenAPI

        :param expression_kind: The expression_kind of this IEdmPathExpression.
        :param path: The path of this IEdmPathExpression.
        :param path_segments: The path_segments of this IEdmPathExpression.
        """
        self.openapi_types = {
            'expression_kind': str,
            'path': str,
            'path_segments': List[str]
        }

        self.attribute_map = {
            'expression_kind': 'expressionKind',
            'path': 'path',
            'path_segments': 'pathSegments'
        }

        self._expression_kind = expression_kind
        self._path = path
        self._path_segments = path_segments

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IEdmPathExpression':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IEdmPathExpression of this IEdmPathExpression.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def expression_kind(self):
        """Gets the expression_kind of this IEdmPathExpression.


        :return: The expression_kind of this IEdmPathExpression.
        :rtype: str
        """
        return self._expression_kind

    @expression_kind.setter
    def expression_kind(self, expression_kind):
        """Sets the expression_kind of this IEdmPathExpression.


        :param expression_kind: The expression_kind of this IEdmPathExpression.
        :type expression_kind: str
        """
        allowed_values = ["None", "BinaryConstant", "BooleanConstant", "DateTimeOffsetConstant", "DecimalConstant", "FloatingConstant", "GuidConstant", "IntegerConstant", "StringConstant", "DurationConstant", "Null", "Record", "Collection", "Path", "If", "Cast", "IsType", "FunctionApplication", "LabeledExpressionReference", "Labeled", "PropertyPath", "NavigationPropertyPath", "DateConstant", "TimeOfDayConstant", "EnumMember", "AnnotationPath"]  # noqa: E501
        if expression_kind not in allowed_values:
            raise ValueError(
                "Invalid value for `expression_kind` ({0}), must be one of {1}"
                .format(expression_kind, allowed_values)
            )

        self._expression_kind = expression_kind

    @property
    def path(self):
        """Gets the path of this IEdmPathExpression.


        :return: The path of this IEdmPathExpression.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this IEdmPathExpression.


        :param path: The path of this IEdmPathExpression.
        :type path: str
        """

        self._path = path

    @property
    def path_segments(self):
        """Gets the path_segments of this IEdmPathExpression.


        :return: The path_segments of this IEdmPathExpression.
        :rtype: List[str]
        """
        return self._path_segments

    @path_segments.setter
    def path_segments(self, path_segments):
        """Sets the path_segments of this IEdmPathExpression.


        :param path_segments: The path_segments of this IEdmPathExpression.
        :type path_segments: List[str]
        """

        self._path_segments = path_segments
