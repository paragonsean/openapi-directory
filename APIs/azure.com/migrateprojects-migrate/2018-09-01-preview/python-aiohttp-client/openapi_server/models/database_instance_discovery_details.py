# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DatabaseInstanceDiscoveryDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, enqueue_time: str=None, extended_info: Dict[str, str]=None, host_name: str=None, instance_id: str=None, instance_name: str=None, instance_type: str=None, instance_version: str=None, ip_address: str=None, last_updated_time: datetime=None, port_number: int=None, solution_name: str=None):
        """DatabaseInstanceDiscoveryDetails - a model defined in OpenAPI

        :param enqueue_time: The enqueue_time of this DatabaseInstanceDiscoveryDetails.
        :param extended_info: The extended_info of this DatabaseInstanceDiscoveryDetails.
        :param host_name: The host_name of this DatabaseInstanceDiscoveryDetails.
        :param instance_id: The instance_id of this DatabaseInstanceDiscoveryDetails.
        :param instance_name: The instance_name of this DatabaseInstanceDiscoveryDetails.
        :param instance_type: The instance_type of this DatabaseInstanceDiscoveryDetails.
        :param instance_version: The instance_version of this DatabaseInstanceDiscoveryDetails.
        :param ip_address: The ip_address of this DatabaseInstanceDiscoveryDetails.
        :param last_updated_time: The last_updated_time of this DatabaseInstanceDiscoveryDetails.
        :param port_number: The port_number of this DatabaseInstanceDiscoveryDetails.
        :param solution_name: The solution_name of this DatabaseInstanceDiscoveryDetails.
        """
        self.openapi_types = {
            'enqueue_time': str,
            'extended_info': Dict[str, str],
            'host_name': str,
            'instance_id': str,
            'instance_name': str,
            'instance_type': str,
            'instance_version': str,
            'ip_address': str,
            'last_updated_time': datetime,
            'port_number': int,
            'solution_name': str
        }

        self.attribute_map = {
            'enqueue_time': 'enqueueTime',
            'extended_info': 'extendedInfo',
            'host_name': 'hostName',
            'instance_id': 'instanceId',
            'instance_name': 'instanceName',
            'instance_type': 'instanceType',
            'instance_version': 'instanceVersion',
            'ip_address': 'ipAddress',
            'last_updated_time': 'lastUpdatedTime',
            'port_number': 'portNumber',
            'solution_name': 'solutionName'
        }

        self._enqueue_time = enqueue_time
        self._extended_info = extended_info
        self._host_name = host_name
        self._instance_id = instance_id
        self._instance_name = instance_name
        self._instance_type = instance_type
        self._instance_version = instance_version
        self._ip_address = ip_address
        self._last_updated_time = last_updated_time
        self._port_number = port_number
        self._solution_name = solution_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DatabaseInstanceDiscoveryDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DatabaseInstanceDiscoveryDetails of this DatabaseInstanceDiscoveryDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enqueue_time(self):
        """Gets the enqueue_time of this DatabaseInstanceDiscoveryDetails.

        Gets or sets the time the message was enqueued.

        :return: The enqueue_time of this DatabaseInstanceDiscoveryDetails.
        :rtype: str
        """
        return self._enqueue_time

    @enqueue_time.setter
    def enqueue_time(self, enqueue_time):
        """Sets the enqueue_time of this DatabaseInstanceDiscoveryDetails.

        Gets or sets the time the message was enqueued.

        :param enqueue_time: The enqueue_time of this DatabaseInstanceDiscoveryDetails.
        :type enqueue_time: str
        """

        self._enqueue_time = enqueue_time

    @property
    def extended_info(self):
        """Gets the extended_info of this DatabaseInstanceDiscoveryDetails.

        Gets or sets the extended properties of the database server.

        :return: The extended_info of this DatabaseInstanceDiscoveryDetails.
        :rtype: Dict[str, str]
        """
        return self._extended_info

    @extended_info.setter
    def extended_info(self, extended_info):
        """Sets the extended_info of this DatabaseInstanceDiscoveryDetails.

        Gets or sets the extended properties of the database server.

        :param extended_info: The extended_info of this DatabaseInstanceDiscoveryDetails.
        :type extended_info: Dict[str, str]
        """

        self._extended_info = extended_info

    @property
    def host_name(self):
        """Gets the host_name of this DatabaseInstanceDiscoveryDetails.

        Gets or sets the host name of the database server.

        :return: The host_name of this DatabaseInstanceDiscoveryDetails.
        :rtype: str
        """
        return self._host_name

    @host_name.setter
    def host_name(self, host_name):
        """Sets the host_name of this DatabaseInstanceDiscoveryDetails.

        Gets or sets the host name of the database server.

        :param host_name: The host_name of this DatabaseInstanceDiscoveryDetails.
        :type host_name: str
        """

        self._host_name = host_name

    @property
    def instance_id(self):
        """Gets the instance_id of this DatabaseInstanceDiscoveryDetails.

        Gets or sets the database instance Id.

        :return: The instance_id of this DatabaseInstanceDiscoveryDetails.
        :rtype: str
        """
        return self._instance_id

    @instance_id.setter
    def instance_id(self, instance_id):
        """Sets the instance_id of this DatabaseInstanceDiscoveryDetails.

        Gets or sets the database instance Id.

        :param instance_id: The instance_id of this DatabaseInstanceDiscoveryDetails.
        :type instance_id: str
        """

        self._instance_id = instance_id

    @property
    def instance_name(self):
        """Gets the instance_name of this DatabaseInstanceDiscoveryDetails.

        Gets or sets the database instance name.

        :return: The instance_name of this DatabaseInstanceDiscoveryDetails.
        :rtype: str
        """
        return self._instance_name

    @instance_name.setter
    def instance_name(self, instance_name):
        """Sets the instance_name of this DatabaseInstanceDiscoveryDetails.

        Gets or sets the database instance name.

        :param instance_name: The instance_name of this DatabaseInstanceDiscoveryDetails.
        :type instance_name: str
        """

        self._instance_name = instance_name

    @property
    def instance_type(self):
        """Gets the instance_type of this DatabaseInstanceDiscoveryDetails.

        Gets or sets the database instance type.

        :return: The instance_type of this DatabaseInstanceDiscoveryDetails.
        :rtype: str
        """
        return self._instance_type

    @instance_type.setter
    def instance_type(self, instance_type):
        """Sets the instance_type of this DatabaseInstanceDiscoveryDetails.

        Gets or sets the database instance type.

        :param instance_type: The instance_type of this DatabaseInstanceDiscoveryDetails.
        :type instance_type: str
        """

        self._instance_type = instance_type

    @property
    def instance_version(self):
        """Gets the instance_version of this DatabaseInstanceDiscoveryDetails.

        Gets or sets the database instance version.

        :return: The instance_version of this DatabaseInstanceDiscoveryDetails.
        :rtype: str
        """
        return self._instance_version

    @instance_version.setter
    def instance_version(self, instance_version):
        """Sets the instance_version of this DatabaseInstanceDiscoveryDetails.

        Gets or sets the database instance version.

        :param instance_version: The instance_version of this DatabaseInstanceDiscoveryDetails.
        :type instance_version: str
        """

        self._instance_version = instance_version

    @property
    def ip_address(self):
        """Gets the ip_address of this DatabaseInstanceDiscoveryDetails.

        Gets or sets the IP addresses of the database server. IP addresses could be IP V4 or IP V6.

        :return: The ip_address of this DatabaseInstanceDiscoveryDetails.
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this DatabaseInstanceDiscoveryDetails.

        Gets or sets the IP addresses of the database server. IP addresses could be IP V4 or IP V6.

        :param ip_address: The ip_address of this DatabaseInstanceDiscoveryDetails.
        :type ip_address: str
        """

        self._ip_address = ip_address

    @property
    def last_updated_time(self):
        """Gets the last_updated_time of this DatabaseInstanceDiscoveryDetails.

        Gets or sets the time of the last modification of the database instance details.

        :return: The last_updated_time of this DatabaseInstanceDiscoveryDetails.
        :rtype: datetime
        """
        return self._last_updated_time

    @last_updated_time.setter
    def last_updated_time(self, last_updated_time):
        """Sets the last_updated_time of this DatabaseInstanceDiscoveryDetails.

        Gets or sets the time of the last modification of the database instance details.

        :param last_updated_time: The last_updated_time of this DatabaseInstanceDiscoveryDetails.
        :type last_updated_time: datetime
        """

        self._last_updated_time = last_updated_time

    @property
    def port_number(self):
        """Gets the port_number of this DatabaseInstanceDiscoveryDetails.

        Gets or sets the port number of the database server.

        :return: The port_number of this DatabaseInstanceDiscoveryDetails.
        :rtype: int
        """
        return self._port_number

    @port_number.setter
    def port_number(self, port_number):
        """Sets the port_number of this DatabaseInstanceDiscoveryDetails.

        Gets or sets the port number of the database server.

        :param port_number: The port_number of this DatabaseInstanceDiscoveryDetails.
        :type port_number: int
        """

        self._port_number = port_number

    @property
    def solution_name(self):
        """Gets the solution_name of this DatabaseInstanceDiscoveryDetails.

        Gets or sets the name of the solution that sent the data.

        :return: The solution_name of this DatabaseInstanceDiscoveryDetails.
        :rtype: str
        """
        return self._solution_name

    @solution_name.setter
    def solution_name(self, solution_name):
        """Sets the solution_name of this DatabaseInstanceDiscoveryDetails.

        Gets or sets the name of the solution that sent the data.

        :param solution_name: The solution_name of this DatabaseInstanceDiscoveryDetails.
        :type solution_name: str
        """

        self._solution_name = solution_name
