# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.project_summary import ProjectSummary
from openapi_server import util


class MigrateProjectProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, last_summary_refreshed_time: datetime=None, provisioning_state: str=None, refresh_summary_state: str=None, registered_tools: List[str]=None, summary: Dict[str, ProjectSummary]=None):
        """MigrateProjectProperties - a model defined in OpenAPI

        :param last_summary_refreshed_time: The last_summary_refreshed_time of this MigrateProjectProperties.
        :param provisioning_state: The provisioning_state of this MigrateProjectProperties.
        :param refresh_summary_state: The refresh_summary_state of this MigrateProjectProperties.
        :param registered_tools: The registered_tools of this MigrateProjectProperties.
        :param summary: The summary of this MigrateProjectProperties.
        """
        self.openapi_types = {
            'last_summary_refreshed_time': datetime,
            'provisioning_state': str,
            'refresh_summary_state': str,
            'registered_tools': List[str],
            'summary': Dict[str, ProjectSummary]
        }

        self.attribute_map = {
            'last_summary_refreshed_time': 'lastSummaryRefreshedTime',
            'provisioning_state': 'provisioningState',
            'refresh_summary_state': 'refreshSummaryState',
            'registered_tools': 'registeredTools',
            'summary': 'summary'
        }

        self._last_summary_refreshed_time = last_summary_refreshed_time
        self._provisioning_state = provisioning_state
        self._refresh_summary_state = refresh_summary_state
        self._registered_tools = registered_tools
        self._summary = summary

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MigrateProjectProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MigrateProjectProperties of this MigrateProjectProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def last_summary_refreshed_time(self):
        """Gets the last_summary_refreshed_time of this MigrateProjectProperties.

        Gets the last time the project summary was refreshed.

        :return: The last_summary_refreshed_time of this MigrateProjectProperties.
        :rtype: datetime
        """
        return self._last_summary_refreshed_time

    @last_summary_refreshed_time.setter
    def last_summary_refreshed_time(self, last_summary_refreshed_time):
        """Sets the last_summary_refreshed_time of this MigrateProjectProperties.

        Gets the last time the project summary was refreshed.

        :param last_summary_refreshed_time: The last_summary_refreshed_time of this MigrateProjectProperties.
        :type last_summary_refreshed_time: datetime
        """

        self._last_summary_refreshed_time = last_summary_refreshed_time

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this MigrateProjectProperties.

        Provisioning state of the migrate project.

        :return: The provisioning_state of this MigrateProjectProperties.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this MigrateProjectProperties.

        Provisioning state of the migrate project.

        :param provisioning_state: The provisioning_state of this MigrateProjectProperties.
        :type provisioning_state: str
        """
        allowed_values = ["Accepted", "Creating", "Deleting", "Failed", "Moving", "Succeeded"]  # noqa: E501
        if provisioning_state not in allowed_values:
            raise ValueError(
                "Invalid value for `provisioning_state` ({0}), must be one of {1}"
                .format(provisioning_state, allowed_values)
            )

        self._provisioning_state = provisioning_state

    @property
    def refresh_summary_state(self):
        """Gets the refresh_summary_state of this MigrateProjectProperties.

        Gets the refresh summary state.

        :return: The refresh_summary_state of this MigrateProjectProperties.
        :rtype: str
        """
        return self._refresh_summary_state

    @refresh_summary_state.setter
    def refresh_summary_state(self, refresh_summary_state):
        """Sets the refresh_summary_state of this MigrateProjectProperties.

        Gets the refresh summary state.

        :param refresh_summary_state: The refresh_summary_state of this MigrateProjectProperties.
        :type refresh_summary_state: str
        """
        allowed_values = ["Started", "InProgress", "Completed", "Failed"]  # noqa: E501
        if refresh_summary_state not in allowed_values:
            raise ValueError(
                "Invalid value for `refresh_summary_state` ({0}), must be one of {1}"
                .format(refresh_summary_state, allowed_values)
            )

        self._refresh_summary_state = refresh_summary_state

    @property
    def registered_tools(self):
        """Gets the registered_tools of this MigrateProjectProperties.

        Gets or sets the list of tools registered with the migrate project.

        :return: The registered_tools of this MigrateProjectProperties.
        :rtype: List[str]
        """
        return self._registered_tools

    @registered_tools.setter
    def registered_tools(self, registered_tools):
        """Sets the registered_tools of this MigrateProjectProperties.

        Gets or sets the list of tools registered with the migrate project.

        :param registered_tools: The registered_tools of this MigrateProjectProperties.
        :type registered_tools: List[str]
        """
        allowed_values = ["ServerDiscovery", "ServerAssessment", "ServerMigration", "Cloudamize", "Turbonomic", "Zerto", "CorentTech", "ServerAssessmentV1", "ServerMigration_Replication", "Carbonite", "DataMigrationAssistant", "DatabaseMigrationService"]  # noqa: E501
        if not set(registered_tools).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `registered_tools` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(registered_tools) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._registered_tools = registered_tools

    @property
    def summary(self):
        """Gets the summary of this MigrateProjectProperties.

        Gets the summary of the migrate project.

        :return: The summary of this MigrateProjectProperties.
        :rtype: Dict[str, ProjectSummary]
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this MigrateProjectProperties.

        Gets the summary of the migrate project.

        :param summary: The summary of this MigrateProjectProperties.
        :type summary: Dict[str, ProjectSummary]
        """

        self._summary = summary
