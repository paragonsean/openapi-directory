# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DatabaseAssessmentDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, assessment_id: str=None, assessment_target_type: str=None, breaking_changes_count: int=None, compatibility_level: str=None, database_name: str=None, database_size_in_mb: str=None, enqueue_time: str=None, extended_info: Dict[str, str]=None, instance_id: str=None, is_ready_for_migration: bool=None, last_assessed_time: datetime=None, last_updated_time: datetime=None, migration_blockers_count: int=None, solution_name: str=None):
        """DatabaseAssessmentDetails - a model defined in OpenAPI

        :param assessment_id: The assessment_id of this DatabaseAssessmentDetails.
        :param assessment_target_type: The assessment_target_type of this DatabaseAssessmentDetails.
        :param breaking_changes_count: The breaking_changes_count of this DatabaseAssessmentDetails.
        :param compatibility_level: The compatibility_level of this DatabaseAssessmentDetails.
        :param database_name: The database_name of this DatabaseAssessmentDetails.
        :param database_size_in_mb: The database_size_in_mb of this DatabaseAssessmentDetails.
        :param enqueue_time: The enqueue_time of this DatabaseAssessmentDetails.
        :param extended_info: The extended_info of this DatabaseAssessmentDetails.
        :param instance_id: The instance_id of this DatabaseAssessmentDetails.
        :param is_ready_for_migration: The is_ready_for_migration of this DatabaseAssessmentDetails.
        :param last_assessed_time: The last_assessed_time of this DatabaseAssessmentDetails.
        :param last_updated_time: The last_updated_time of this DatabaseAssessmentDetails.
        :param migration_blockers_count: The migration_blockers_count of this DatabaseAssessmentDetails.
        :param solution_name: The solution_name of this DatabaseAssessmentDetails.
        """
        self.openapi_types = {
            'assessment_id': str,
            'assessment_target_type': str,
            'breaking_changes_count': int,
            'compatibility_level': str,
            'database_name': str,
            'database_size_in_mb': str,
            'enqueue_time': str,
            'extended_info': Dict[str, str],
            'instance_id': str,
            'is_ready_for_migration': bool,
            'last_assessed_time': datetime,
            'last_updated_time': datetime,
            'migration_blockers_count': int,
            'solution_name': str
        }

        self.attribute_map = {
            'assessment_id': 'assessmentId',
            'assessment_target_type': 'assessmentTargetType',
            'breaking_changes_count': 'breakingChangesCount',
            'compatibility_level': 'compatibilityLevel',
            'database_name': 'databaseName',
            'database_size_in_mb': 'databaseSizeInMB',
            'enqueue_time': 'enqueueTime',
            'extended_info': 'extendedInfo',
            'instance_id': 'instanceId',
            'is_ready_for_migration': 'isReadyForMigration',
            'last_assessed_time': 'lastAssessedTime',
            'last_updated_time': 'lastUpdatedTime',
            'migration_blockers_count': 'migrationBlockersCount',
            'solution_name': 'solutionName'
        }

        self._assessment_id = assessment_id
        self._assessment_target_type = assessment_target_type
        self._breaking_changes_count = breaking_changes_count
        self._compatibility_level = compatibility_level
        self._database_name = database_name
        self._database_size_in_mb = database_size_in_mb
        self._enqueue_time = enqueue_time
        self._extended_info = extended_info
        self._instance_id = instance_id
        self._is_ready_for_migration = is_ready_for_migration
        self._last_assessed_time = last_assessed_time
        self._last_updated_time = last_updated_time
        self._migration_blockers_count = migration_blockers_count
        self._solution_name = solution_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DatabaseAssessmentDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DatabaseAssessmentDetails of this DatabaseAssessmentDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def assessment_id(self):
        """Gets the assessment_id of this DatabaseAssessmentDetails.

        Gets or sets the database assessment scope/Id.

        :return: The assessment_id of this DatabaseAssessmentDetails.
        :rtype: str
        """
        return self._assessment_id

    @assessment_id.setter
    def assessment_id(self, assessment_id):
        """Sets the assessment_id of this DatabaseAssessmentDetails.

        Gets or sets the database assessment scope/Id.

        :param assessment_id: The assessment_id of this DatabaseAssessmentDetails.
        :type assessment_id: str
        """

        self._assessment_id = assessment_id

    @property
    def assessment_target_type(self):
        """Gets the assessment_target_type of this DatabaseAssessmentDetails.

        Gets or sets the assessed target database type.

        :return: The assessment_target_type of this DatabaseAssessmentDetails.
        :rtype: str
        """
        return self._assessment_target_type

    @assessment_target_type.setter
    def assessment_target_type(self, assessment_target_type):
        """Sets the assessment_target_type of this DatabaseAssessmentDetails.

        Gets or sets the assessed target database type.

        :param assessment_target_type: The assessment_target_type of this DatabaseAssessmentDetails.
        :type assessment_target_type: str
        """

        self._assessment_target_type = assessment_target_type

    @property
    def breaking_changes_count(self):
        """Gets the breaking_changes_count of this DatabaseAssessmentDetails.

        Gets or sets the number of breaking changes found.

        :return: The breaking_changes_count of this DatabaseAssessmentDetails.
        :rtype: int
        """
        return self._breaking_changes_count

    @breaking_changes_count.setter
    def breaking_changes_count(self, breaking_changes_count):
        """Sets the breaking_changes_count of this DatabaseAssessmentDetails.

        Gets or sets the number of breaking changes found.

        :param breaking_changes_count: The breaking_changes_count of this DatabaseAssessmentDetails.
        :type breaking_changes_count: int
        """

        self._breaking_changes_count = breaking_changes_count

    @property
    def compatibility_level(self):
        """Gets the compatibility_level of this DatabaseAssessmentDetails.

        Gets or sets the compatibility level of the database.

        :return: The compatibility_level of this DatabaseAssessmentDetails.
        :rtype: str
        """
        return self._compatibility_level

    @compatibility_level.setter
    def compatibility_level(self, compatibility_level):
        """Sets the compatibility_level of this DatabaseAssessmentDetails.

        Gets or sets the compatibility level of the database.

        :param compatibility_level: The compatibility_level of this DatabaseAssessmentDetails.
        :type compatibility_level: str
        """

        self._compatibility_level = compatibility_level

    @property
    def database_name(self):
        """Gets the database_name of this DatabaseAssessmentDetails.

        Gets or sets the database name.

        :return: The database_name of this DatabaseAssessmentDetails.
        :rtype: str
        """
        return self._database_name

    @database_name.setter
    def database_name(self, database_name):
        """Sets the database_name of this DatabaseAssessmentDetails.

        Gets or sets the database name.

        :param database_name: The database_name of this DatabaseAssessmentDetails.
        :type database_name: str
        """

        self._database_name = database_name

    @property
    def database_size_in_mb(self):
        """Gets the database_size_in_mb of this DatabaseAssessmentDetails.

        Gets or sets the database size.

        :return: The database_size_in_mb of this DatabaseAssessmentDetails.
        :rtype: str
        """
        return self._database_size_in_mb

    @database_size_in_mb.setter
    def database_size_in_mb(self, database_size_in_mb):
        """Sets the database_size_in_mb of this DatabaseAssessmentDetails.

        Gets or sets the database size.

        :param database_size_in_mb: The database_size_in_mb of this DatabaseAssessmentDetails.
        :type database_size_in_mb: str
        """

        self._database_size_in_mb = database_size_in_mb

    @property
    def enqueue_time(self):
        """Gets the enqueue_time of this DatabaseAssessmentDetails.

        Gets or sets the time the message was enqueued.

        :return: The enqueue_time of this DatabaseAssessmentDetails.
        :rtype: str
        """
        return self._enqueue_time

    @enqueue_time.setter
    def enqueue_time(self, enqueue_time):
        """Sets the enqueue_time of this DatabaseAssessmentDetails.

        Gets or sets the time the message was enqueued.

        :param enqueue_time: The enqueue_time of this DatabaseAssessmentDetails.
        :type enqueue_time: str
        """

        self._enqueue_time = enqueue_time

    @property
    def extended_info(self):
        """Gets the extended_info of this DatabaseAssessmentDetails.

        Gets or sets the extended properties of the database.

        :return: The extended_info of this DatabaseAssessmentDetails.
        :rtype: Dict[str, str]
        """
        return self._extended_info

    @extended_info.setter
    def extended_info(self, extended_info):
        """Sets the extended_info of this DatabaseAssessmentDetails.

        Gets or sets the extended properties of the database.

        :param extended_info: The extended_info of this DatabaseAssessmentDetails.
        :type extended_info: Dict[str, str]
        """

        self._extended_info = extended_info

    @property
    def instance_id(self):
        """Gets the instance_id of this DatabaseAssessmentDetails.

        Gets or sets the database server instance Id.

        :return: The instance_id of this DatabaseAssessmentDetails.
        :rtype: str
        """
        return self._instance_id

    @instance_id.setter
    def instance_id(self, instance_id):
        """Sets the instance_id of this DatabaseAssessmentDetails.

        Gets or sets the database server instance Id.

        :param instance_id: The instance_id of this DatabaseAssessmentDetails.
        :type instance_id: str
        """

        self._instance_id = instance_id

    @property
    def is_ready_for_migration(self):
        """Gets the is_ready_for_migration of this DatabaseAssessmentDetails.

        Gets or sets a value indicating whether the database is ready for migration.

        :return: The is_ready_for_migration of this DatabaseAssessmentDetails.
        :rtype: bool
        """
        return self._is_ready_for_migration

    @is_ready_for_migration.setter
    def is_ready_for_migration(self, is_ready_for_migration):
        """Sets the is_ready_for_migration of this DatabaseAssessmentDetails.

        Gets or sets a value indicating whether the database is ready for migration.

        :param is_ready_for_migration: The is_ready_for_migration of this DatabaseAssessmentDetails.
        :type is_ready_for_migration: bool
        """

        self._is_ready_for_migration = is_ready_for_migration

    @property
    def last_assessed_time(self):
        """Gets the last_assessed_time of this DatabaseAssessmentDetails.

        Gets or sets the time when the database was last assessed.

        :return: The last_assessed_time of this DatabaseAssessmentDetails.
        :rtype: datetime
        """
        return self._last_assessed_time

    @last_assessed_time.setter
    def last_assessed_time(self, last_assessed_time):
        """Sets the last_assessed_time of this DatabaseAssessmentDetails.

        Gets or sets the time when the database was last assessed.

        :param last_assessed_time: The last_assessed_time of this DatabaseAssessmentDetails.
        :type last_assessed_time: datetime
        """

        self._last_assessed_time = last_assessed_time

    @property
    def last_updated_time(self):
        """Gets the last_updated_time of this DatabaseAssessmentDetails.

        Gets or sets the time of the last modification of the database details.

        :return: The last_updated_time of this DatabaseAssessmentDetails.
        :rtype: datetime
        """
        return self._last_updated_time

    @last_updated_time.setter
    def last_updated_time(self, last_updated_time):
        """Sets the last_updated_time of this DatabaseAssessmentDetails.

        Gets or sets the time of the last modification of the database details.

        :param last_updated_time: The last_updated_time of this DatabaseAssessmentDetails.
        :type last_updated_time: datetime
        """

        self._last_updated_time = last_updated_time

    @property
    def migration_blockers_count(self):
        """Gets the migration_blockers_count of this DatabaseAssessmentDetails.

        Gets or sets the number of blocking changes found.

        :return: The migration_blockers_count of this DatabaseAssessmentDetails.
        :rtype: int
        """
        return self._migration_blockers_count

    @migration_blockers_count.setter
    def migration_blockers_count(self, migration_blockers_count):
        """Sets the migration_blockers_count of this DatabaseAssessmentDetails.

        Gets or sets the number of blocking changes found.

        :param migration_blockers_count: The migration_blockers_count of this DatabaseAssessmentDetails.
        :type migration_blockers_count: int
        """

        self._migration_blockers_count = migration_blockers_count

    @property
    def solution_name(self):
        """Gets the solution_name of this DatabaseAssessmentDetails.

        Gets or sets the name of the solution that sent the data.

        :return: The solution_name of this DatabaseAssessmentDetails.
        :rtype: str
        """
        return self._solution_name

    @solution_name.setter
    def solution_name(self, solution_name):
        """Sets the solution_name of this DatabaseAssessmentDetails.

        Gets or sets the name of the solution that sent the data.

        :param solution_name: The solution_name of this DatabaseAssessmentDetails.
        :type solution_name: str
        """

        self._solution_name = solution_name
