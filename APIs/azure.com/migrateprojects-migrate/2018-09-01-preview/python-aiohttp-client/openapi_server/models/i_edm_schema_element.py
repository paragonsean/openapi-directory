# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class IEdmSchemaElement(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, namespace: str=None, schema_element_kind: str=None):
        """IEdmSchemaElement - a model defined in OpenAPI

        :param name: The name of this IEdmSchemaElement.
        :param namespace: The namespace of this IEdmSchemaElement.
        :param schema_element_kind: The schema_element_kind of this IEdmSchemaElement.
        """
        self.openapi_types = {
            'name': str,
            'namespace': str,
            'schema_element_kind': str
        }

        self.attribute_map = {
            'name': 'name',
            'namespace': 'namespace',
            'schema_element_kind': 'schemaElementKind'
        }

        self._name = name
        self._namespace = namespace
        self._schema_element_kind = schema_element_kind

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IEdmSchemaElement':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IEdmSchemaElement of this IEdmSchemaElement.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this IEdmSchemaElement.


        :return: The name of this IEdmSchemaElement.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this IEdmSchemaElement.


        :param name: The name of this IEdmSchemaElement.
        :type name: str
        """

        self._name = name

    @property
    def namespace(self):
        """Gets the namespace of this IEdmSchemaElement.


        :return: The namespace of this IEdmSchemaElement.
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this IEdmSchemaElement.


        :param namespace: The namespace of this IEdmSchemaElement.
        :type namespace: str
        """

        self._namespace = namespace

    @property
    def schema_element_kind(self):
        """Gets the schema_element_kind of this IEdmSchemaElement.


        :return: The schema_element_kind of this IEdmSchemaElement.
        :rtype: str
        """
        return self._schema_element_kind

    @schema_element_kind.setter
    def schema_element_kind(self, schema_element_kind):
        """Sets the schema_element_kind of this IEdmSchemaElement.


        :param schema_element_kind: The schema_element_kind of this IEdmSchemaElement.
        :type schema_element_kind: str
        """
        allowed_values = ["None", "TypeDefinition", "Term", "Action", "EntityContainer", "Function"]  # noqa: E501
        if schema_element_kind not in allowed_values:
            raise ValueError(
                "Invalid value for `schema_element_kind` ({0}), must be one of {1}"
                .format(schema_element_kind, allowed_values)
            )

        self._schema_element_kind = schema_element_kind
