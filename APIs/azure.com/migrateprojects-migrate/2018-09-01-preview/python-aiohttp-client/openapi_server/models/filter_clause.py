# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.i_edm_type_reference import IEdmTypeReference
from openapi_server.models.range_variable import RangeVariable
from openapi_server.models.single_value_node import SingleValueNode
from openapi_server import util


class FilterClause(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, expression: SingleValueNode=None, item_type: IEdmTypeReference=None, range_variable: RangeVariable=None):
        """FilterClause - a model defined in OpenAPI

        :param expression: The expression of this FilterClause.
        :param item_type: The item_type of this FilterClause.
        :param range_variable: The range_variable of this FilterClause.
        """
        self.openapi_types = {
            'expression': SingleValueNode,
            'item_type': IEdmTypeReference,
            'range_variable': RangeVariable
        }

        self.attribute_map = {
            'expression': 'expression',
            'item_type': 'itemType',
            'range_variable': 'rangeVariable'
        }

        self._expression = expression
        self._item_type = item_type
        self._range_variable = range_variable

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FilterClause':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FilterClause of this FilterClause.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def expression(self):
        """Gets the expression of this FilterClause.


        :return: The expression of this FilterClause.
        :rtype: SingleValueNode
        """
        return self._expression

    @expression.setter
    def expression(self, expression):
        """Sets the expression of this FilterClause.


        :param expression: The expression of this FilterClause.
        :type expression: SingleValueNode
        """

        self._expression = expression

    @property
    def item_type(self):
        """Gets the item_type of this FilterClause.


        :return: The item_type of this FilterClause.
        :rtype: IEdmTypeReference
        """
        return self._item_type

    @item_type.setter
    def item_type(self, item_type):
        """Sets the item_type of this FilterClause.


        :param item_type: The item_type of this FilterClause.
        :type item_type: IEdmTypeReference
        """

        self._item_type = item_type

    @property
    def range_variable(self):
        """Gets the range_variable of this FilterClause.


        :return: The range_variable of this FilterClause.
        :rtype: RangeVariable
        """
        return self._range_variable

    @range_variable.setter
    def range_variable(self, range_variable):
        """Sets the range_variable of this FilterClause.


        :param range_variable: The range_variable of this FilterClause.
        :type range_variable: RangeVariable
        """

        self._range_variable = range_variable
