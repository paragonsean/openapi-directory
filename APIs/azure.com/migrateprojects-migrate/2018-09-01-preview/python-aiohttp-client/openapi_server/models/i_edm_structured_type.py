# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.i_edm_property import IEdmProperty
from openapi_server import util


class IEdmStructuredType(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, base_type: IEdmStructuredType=None, declared_properties: List[IEdmProperty]=None, is_abstract: bool=None, is_open: bool=None, type_kind: str=None):
        """IEdmStructuredType - a model defined in OpenAPI

        :param base_type: The base_type of this IEdmStructuredType.
        :param declared_properties: The declared_properties of this IEdmStructuredType.
        :param is_abstract: The is_abstract of this IEdmStructuredType.
        :param is_open: The is_open of this IEdmStructuredType.
        :param type_kind: The type_kind of this IEdmStructuredType.
        """
        self.openapi_types = {
            'base_type': IEdmStructuredType,
            'declared_properties': List[IEdmProperty],
            'is_abstract': bool,
            'is_open': bool,
            'type_kind': str
        }

        self.attribute_map = {
            'base_type': 'baseType',
            'declared_properties': 'declaredProperties',
            'is_abstract': 'isAbstract',
            'is_open': 'isOpen',
            'type_kind': 'typeKind'
        }

        self._base_type = base_type
        self._declared_properties = declared_properties
        self._is_abstract = is_abstract
        self._is_open = is_open
        self._type_kind = type_kind

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IEdmStructuredType':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IEdmStructuredType of this IEdmStructuredType.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def base_type(self):
        """Gets the base_type of this IEdmStructuredType.


        :return: The base_type of this IEdmStructuredType.
        :rtype: IEdmStructuredType
        """
        return self._base_type

    @base_type.setter
    def base_type(self, base_type):
        """Sets the base_type of this IEdmStructuredType.


        :param base_type: The base_type of this IEdmStructuredType.
        :type base_type: IEdmStructuredType
        """

        self._base_type = base_type

    @property
    def declared_properties(self):
        """Gets the declared_properties of this IEdmStructuredType.


        :return: The declared_properties of this IEdmStructuredType.
        :rtype: List[IEdmProperty]
        """
        return self._declared_properties

    @declared_properties.setter
    def declared_properties(self, declared_properties):
        """Sets the declared_properties of this IEdmStructuredType.


        :param declared_properties: The declared_properties of this IEdmStructuredType.
        :type declared_properties: List[IEdmProperty]
        """

        self._declared_properties = declared_properties

    @property
    def is_abstract(self):
        """Gets the is_abstract of this IEdmStructuredType.


        :return: The is_abstract of this IEdmStructuredType.
        :rtype: bool
        """
        return self._is_abstract

    @is_abstract.setter
    def is_abstract(self, is_abstract):
        """Sets the is_abstract of this IEdmStructuredType.


        :param is_abstract: The is_abstract of this IEdmStructuredType.
        :type is_abstract: bool
        """

        self._is_abstract = is_abstract

    @property
    def is_open(self):
        """Gets the is_open of this IEdmStructuredType.


        :return: The is_open of this IEdmStructuredType.
        :rtype: bool
        """
        return self._is_open

    @is_open.setter
    def is_open(self, is_open):
        """Sets the is_open of this IEdmStructuredType.


        :param is_open: The is_open of this IEdmStructuredType.
        :type is_open: bool
        """

        self._is_open = is_open

    @property
    def type_kind(self):
        """Gets the type_kind of this IEdmStructuredType.


        :return: The type_kind of this IEdmStructuredType.
        :rtype: str
        """
        return self._type_kind

    @type_kind.setter
    def type_kind(self, type_kind):
        """Sets the type_kind of this IEdmStructuredType.


        :param type_kind: The type_kind of this IEdmStructuredType.
        :type type_kind: str
        """
        allowed_values = ["None", "Primitive", "Entity", "Complex", "Collection", "EntityReference", "Enum", "TypeDefinition", "Untyped", "Path"]  # noqa: E501
        if type_kind not in allowed_values:
            raise ValueError(
                "Invalid value for `type_kind` ({0}), must be one of {1}"
                .format(type_kind, allowed_values)
            )

        self._type_kind = type_kind
