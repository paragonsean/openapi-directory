# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SolutionDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, assessment_count: int=None, extended_details: Dict[str, str]=None, group_count: int=None):
        """SolutionDetails - a model defined in OpenAPI

        :param assessment_count: The assessment_count of this SolutionDetails.
        :param extended_details: The extended_details of this SolutionDetails.
        :param group_count: The group_count of this SolutionDetails.
        """
        self.openapi_types = {
            'assessment_count': int,
            'extended_details': Dict[str, str],
            'group_count': int
        }

        self.attribute_map = {
            'assessment_count': 'assessmentCount',
            'extended_details': 'extendedDetails',
            'group_count': 'groupCount'
        }

        self._assessment_count = assessment_count
        self._extended_details = extended_details
        self._group_count = group_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SolutionDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SolutionDetails of this SolutionDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def assessment_count(self):
        """Gets the assessment_count of this SolutionDetails.

        Gets or sets the count of assessments reported by the solution.

        :return: The assessment_count of this SolutionDetails.
        :rtype: int
        """
        return self._assessment_count

    @assessment_count.setter
    def assessment_count(self, assessment_count):
        """Sets the assessment_count of this SolutionDetails.

        Gets or sets the count of assessments reported by the solution.

        :param assessment_count: The assessment_count of this SolutionDetails.
        :type assessment_count: int
        """

        self._assessment_count = assessment_count

    @property
    def extended_details(self):
        """Gets the extended_details of this SolutionDetails.

        Gets or sets the extended details reported by the solution.

        :return: The extended_details of this SolutionDetails.
        :rtype: Dict[str, str]
        """
        return self._extended_details

    @extended_details.setter
    def extended_details(self, extended_details):
        """Sets the extended_details of this SolutionDetails.

        Gets or sets the extended details reported by the solution.

        :param extended_details: The extended_details of this SolutionDetails.
        :type extended_details: Dict[str, str]
        """

        self._extended_details = extended_details

    @property
    def group_count(self):
        """Gets the group_count of this SolutionDetails.

        Gets or sets the count of groups reported by the solution.

        :return: The group_count of this SolutionDetails.
        :rtype: int
        """
        return self._group_count

    @group_count.setter
    def group_count(self, group_count):
        """Sets the group_count of this SolutionDetails.

        Gets or sets the count of groups reported by the solution.

        :param group_count: The group_count of this SolutionDetails.
        :type group_count: int
        """

        self._group_count = group_count
