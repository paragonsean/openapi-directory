# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DatabaseInstanceSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, databases_assessed_count: int=None, migration_ready_count: int=None):
        """DatabaseInstanceSummary - a model defined in OpenAPI

        :param databases_assessed_count: The databases_assessed_count of this DatabaseInstanceSummary.
        :param migration_ready_count: The migration_ready_count of this DatabaseInstanceSummary.
        """
        self.openapi_types = {
            'databases_assessed_count': int,
            'migration_ready_count': int
        }

        self.attribute_map = {
            'databases_assessed_count': 'databasesAssessedCount',
            'migration_ready_count': 'migrationReadyCount'
        }

        self._databases_assessed_count = databases_assessed_count
        self._migration_ready_count = migration_ready_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DatabaseInstanceSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DatabaseInstanceSummary of this DatabaseInstanceSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def databases_assessed_count(self):
        """Gets the databases_assessed_count of this DatabaseInstanceSummary.

        Gets or sets the count of databases assessed.

        :return: The databases_assessed_count of this DatabaseInstanceSummary.
        :rtype: int
        """
        return self._databases_assessed_count

    @databases_assessed_count.setter
    def databases_assessed_count(self, databases_assessed_count):
        """Sets the databases_assessed_count of this DatabaseInstanceSummary.

        Gets or sets the count of databases assessed.

        :param databases_assessed_count: The databases_assessed_count of this DatabaseInstanceSummary.
        :type databases_assessed_count: int
        """

        self._databases_assessed_count = databases_assessed_count

    @property
    def migration_ready_count(self):
        """Gets the migration_ready_count of this DatabaseInstanceSummary.

        Gets or sets the count of databases ready for migration.

        :return: The migration_ready_count of this DatabaseInstanceSummary.
        :rtype: int
        """
        return self._migration_ready_count

    @migration_ready_count.setter
    def migration_ready_count(self, migration_ready_count):
        """Sets the migration_ready_count of this DatabaseInstanceSummary.

        Gets or sets the count of databases ready for migration.

        :param migration_ready_count: The migration_ready_count of this DatabaseInstanceSummary.
        :type migration_ready_count: int
        """

        self._migration_ready_count = migration_ready_count
