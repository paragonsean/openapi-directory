# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.i_edm_referential_constraint import IEdmReferentialConstraint
from openapi_server.models.i_edm_structured_type import IEdmStructuredType
from openapi_server.models.i_edm_type_reference import IEdmTypeReference
from openapi_server import util


class IEdmNavigationProperty(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, contains_target: bool=None, declaring_type: IEdmStructuredType=None, name: str=None, on_delete: str=None, partner: IEdmNavigationProperty=None, property_kind: str=None, referential_constraint: IEdmReferentialConstraint=None, type: IEdmTypeReference=None):
        """IEdmNavigationProperty - a model defined in OpenAPI

        :param contains_target: The contains_target of this IEdmNavigationProperty.
        :param declaring_type: The declaring_type of this IEdmNavigationProperty.
        :param name: The name of this IEdmNavigationProperty.
        :param on_delete: The on_delete of this IEdmNavigationProperty.
        :param partner: The partner of this IEdmNavigationProperty.
        :param property_kind: The property_kind of this IEdmNavigationProperty.
        :param referential_constraint: The referential_constraint of this IEdmNavigationProperty.
        :param type: The type of this IEdmNavigationProperty.
        """
        self.openapi_types = {
            'contains_target': bool,
            'declaring_type': IEdmStructuredType,
            'name': str,
            'on_delete': str,
            'partner': IEdmNavigationProperty,
            'property_kind': str,
            'referential_constraint': IEdmReferentialConstraint,
            'type': IEdmTypeReference
        }

        self.attribute_map = {
            'contains_target': 'containsTarget',
            'declaring_type': 'declaringType',
            'name': 'name',
            'on_delete': 'onDelete',
            'partner': 'partner',
            'property_kind': 'propertyKind',
            'referential_constraint': 'referentialConstraint',
            'type': 'type'
        }

        self._contains_target = contains_target
        self._declaring_type = declaring_type
        self._name = name
        self._on_delete = on_delete
        self._partner = partner
        self._property_kind = property_kind
        self._referential_constraint = referential_constraint
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IEdmNavigationProperty':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IEdmNavigationProperty of this IEdmNavigationProperty.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def contains_target(self):
        """Gets the contains_target of this IEdmNavigationProperty.


        :return: The contains_target of this IEdmNavigationProperty.
        :rtype: bool
        """
        return self._contains_target

    @contains_target.setter
    def contains_target(self, contains_target):
        """Sets the contains_target of this IEdmNavigationProperty.


        :param contains_target: The contains_target of this IEdmNavigationProperty.
        :type contains_target: bool
        """

        self._contains_target = contains_target

    @property
    def declaring_type(self):
        """Gets the declaring_type of this IEdmNavigationProperty.


        :return: The declaring_type of this IEdmNavigationProperty.
        :rtype: IEdmStructuredType
        """
        return self._declaring_type

    @declaring_type.setter
    def declaring_type(self, declaring_type):
        """Sets the declaring_type of this IEdmNavigationProperty.


        :param declaring_type: The declaring_type of this IEdmNavigationProperty.
        :type declaring_type: IEdmStructuredType
        """

        self._declaring_type = declaring_type

    @property
    def name(self):
        """Gets the name of this IEdmNavigationProperty.


        :return: The name of this IEdmNavigationProperty.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this IEdmNavigationProperty.


        :param name: The name of this IEdmNavigationProperty.
        :type name: str
        """

        self._name = name

    @property
    def on_delete(self):
        """Gets the on_delete of this IEdmNavigationProperty.


        :return: The on_delete of this IEdmNavigationProperty.
        :rtype: str
        """
        return self._on_delete

    @on_delete.setter
    def on_delete(self, on_delete):
        """Sets the on_delete of this IEdmNavigationProperty.


        :param on_delete: The on_delete of this IEdmNavigationProperty.
        :type on_delete: str
        """
        allowed_values = ["None", "Cascade"]  # noqa: E501
        if on_delete not in allowed_values:
            raise ValueError(
                "Invalid value for `on_delete` ({0}), must be one of {1}"
                .format(on_delete, allowed_values)
            )

        self._on_delete = on_delete

    @property
    def partner(self):
        """Gets the partner of this IEdmNavigationProperty.


        :return: The partner of this IEdmNavigationProperty.
        :rtype: IEdmNavigationProperty
        """
        return self._partner

    @partner.setter
    def partner(self, partner):
        """Sets the partner of this IEdmNavigationProperty.


        :param partner: The partner of this IEdmNavigationProperty.
        :type partner: IEdmNavigationProperty
        """

        self._partner = partner

    @property
    def property_kind(self):
        """Gets the property_kind of this IEdmNavigationProperty.


        :return: The property_kind of this IEdmNavigationProperty.
        :rtype: str
        """
        return self._property_kind

    @property_kind.setter
    def property_kind(self, property_kind):
        """Sets the property_kind of this IEdmNavigationProperty.


        :param property_kind: The property_kind of this IEdmNavigationProperty.
        :type property_kind: str
        """
        allowed_values = ["None", "Structural", "Navigation"]  # noqa: E501
        if property_kind not in allowed_values:
            raise ValueError(
                "Invalid value for `property_kind` ({0}), must be one of {1}"
                .format(property_kind, allowed_values)
            )

        self._property_kind = property_kind

    @property
    def referential_constraint(self):
        """Gets the referential_constraint of this IEdmNavigationProperty.


        :return: The referential_constraint of this IEdmNavigationProperty.
        :rtype: IEdmReferentialConstraint
        """
        return self._referential_constraint

    @referential_constraint.setter
    def referential_constraint(self, referential_constraint):
        """Sets the referential_constraint of this IEdmNavigationProperty.


        :param referential_constraint: The referential_constraint of this IEdmNavigationProperty.
        :type referential_constraint: IEdmReferentialConstraint
        """

        self._referential_constraint = referential_constraint

    @property
    def type(self):
        """Gets the type of this IEdmNavigationProperty.


        :return: The type of this IEdmNavigationProperty.
        :rtype: IEdmTypeReference
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this IEdmNavigationProperty.


        :param type: The type of this IEdmNavigationProperty.
        :type type: IEdmTypeReference
        """

        self._type = type
