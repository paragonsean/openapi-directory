# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DefaultQuerySettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, enable_count: bool=None, enable_expand: bool=None, enable_filter: bool=None, enable_order_by: bool=None, enable_select: bool=None, max_top: int=None):
        """DefaultQuerySettings - a model defined in OpenAPI

        :param enable_count: The enable_count of this DefaultQuerySettings.
        :param enable_expand: The enable_expand of this DefaultQuerySettings.
        :param enable_filter: The enable_filter of this DefaultQuerySettings.
        :param enable_order_by: The enable_order_by of this DefaultQuerySettings.
        :param enable_select: The enable_select of this DefaultQuerySettings.
        :param max_top: The max_top of this DefaultQuerySettings.
        """
        self.openapi_types = {
            'enable_count': bool,
            'enable_expand': bool,
            'enable_filter': bool,
            'enable_order_by': bool,
            'enable_select': bool,
            'max_top': int
        }

        self.attribute_map = {
            'enable_count': 'enableCount',
            'enable_expand': 'enableExpand',
            'enable_filter': 'enableFilter',
            'enable_order_by': 'enableOrderBy',
            'enable_select': 'enableSelect',
            'max_top': 'maxTop'
        }

        self._enable_count = enable_count
        self._enable_expand = enable_expand
        self._enable_filter = enable_filter
        self._enable_order_by = enable_order_by
        self._enable_select = enable_select
        self._max_top = max_top

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DefaultQuerySettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DefaultQuerySettings of this DefaultQuerySettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enable_count(self):
        """Gets the enable_count of this DefaultQuerySettings.


        :return: The enable_count of this DefaultQuerySettings.
        :rtype: bool
        """
        return self._enable_count

    @enable_count.setter
    def enable_count(self, enable_count):
        """Sets the enable_count of this DefaultQuerySettings.


        :param enable_count: The enable_count of this DefaultQuerySettings.
        :type enable_count: bool
        """

        self._enable_count = enable_count

    @property
    def enable_expand(self):
        """Gets the enable_expand of this DefaultQuerySettings.


        :return: The enable_expand of this DefaultQuerySettings.
        :rtype: bool
        """
        return self._enable_expand

    @enable_expand.setter
    def enable_expand(self, enable_expand):
        """Sets the enable_expand of this DefaultQuerySettings.


        :param enable_expand: The enable_expand of this DefaultQuerySettings.
        :type enable_expand: bool
        """

        self._enable_expand = enable_expand

    @property
    def enable_filter(self):
        """Gets the enable_filter of this DefaultQuerySettings.


        :return: The enable_filter of this DefaultQuerySettings.
        :rtype: bool
        """
        return self._enable_filter

    @enable_filter.setter
    def enable_filter(self, enable_filter):
        """Sets the enable_filter of this DefaultQuerySettings.


        :param enable_filter: The enable_filter of this DefaultQuerySettings.
        :type enable_filter: bool
        """

        self._enable_filter = enable_filter

    @property
    def enable_order_by(self):
        """Gets the enable_order_by of this DefaultQuerySettings.


        :return: The enable_order_by of this DefaultQuerySettings.
        :rtype: bool
        """
        return self._enable_order_by

    @enable_order_by.setter
    def enable_order_by(self, enable_order_by):
        """Sets the enable_order_by of this DefaultQuerySettings.


        :param enable_order_by: The enable_order_by of this DefaultQuerySettings.
        :type enable_order_by: bool
        """

        self._enable_order_by = enable_order_by

    @property
    def enable_select(self):
        """Gets the enable_select of this DefaultQuerySettings.


        :return: The enable_select of this DefaultQuerySettings.
        :rtype: bool
        """
        return self._enable_select

    @enable_select.setter
    def enable_select(self, enable_select):
        """Sets the enable_select of this DefaultQuerySettings.


        :param enable_select: The enable_select of this DefaultQuerySettings.
        :type enable_select: bool
        """

        self._enable_select = enable_select

    @property
    def max_top(self):
        """Gets the max_top of this DefaultQuerySettings.


        :return: The max_top of this DefaultQuerySettings.
        :rtype: int
        """
        return self._max_top

    @max_top.setter
    def max_top(self, max_top):
        """Sets the max_top of this DefaultQuerySettings.


        :param max_top: The max_top of this DefaultQuerySettings.
        :type max_top: int
        """

        self._max_top = max_top
