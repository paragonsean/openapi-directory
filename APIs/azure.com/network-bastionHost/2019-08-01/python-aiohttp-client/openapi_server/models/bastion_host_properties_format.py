# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.bastion_host_ip_configuration import BastionHostIPConfiguration
from openapi_server import util


class BastionHostPropertiesFormat(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dns_name: str=None, ip_configurations: List[BastionHostIPConfiguration]=None, provisioning_state: str=None):
        """BastionHostPropertiesFormat - a model defined in OpenAPI

        :param dns_name: The dns_name of this BastionHostPropertiesFormat.
        :param ip_configurations: The ip_configurations of this BastionHostPropertiesFormat.
        :param provisioning_state: The provisioning_state of this BastionHostPropertiesFormat.
        """
        self.openapi_types = {
            'dns_name': str,
            'ip_configurations': List[BastionHostIPConfiguration],
            'provisioning_state': str
        }

        self.attribute_map = {
            'dns_name': 'dnsName',
            'ip_configurations': 'ipConfigurations',
            'provisioning_state': 'provisioningState'
        }

        self._dns_name = dns_name
        self._ip_configurations = ip_configurations
        self._provisioning_state = provisioning_state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BastionHostPropertiesFormat':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BastionHostPropertiesFormat of this BastionHostPropertiesFormat.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dns_name(self):
        """Gets the dns_name of this BastionHostPropertiesFormat.

        FQDN for the endpoint on which bastion host is accessible.

        :return: The dns_name of this BastionHostPropertiesFormat.
        :rtype: str
        """
        return self._dns_name

    @dns_name.setter
    def dns_name(self, dns_name):
        """Sets the dns_name of this BastionHostPropertiesFormat.

        FQDN for the endpoint on which bastion host is accessible.

        :param dns_name: The dns_name of this BastionHostPropertiesFormat.
        :type dns_name: str
        """

        self._dns_name = dns_name

    @property
    def ip_configurations(self):
        """Gets the ip_configurations of this BastionHostPropertiesFormat.

        IP configuration of the Bastion Host resource.

        :return: The ip_configurations of this BastionHostPropertiesFormat.
        :rtype: List[BastionHostIPConfiguration]
        """
        return self._ip_configurations

    @ip_configurations.setter
    def ip_configurations(self, ip_configurations):
        """Sets the ip_configurations of this BastionHostPropertiesFormat.

        IP configuration of the Bastion Host resource.

        :param ip_configurations: The ip_configurations of this BastionHostPropertiesFormat.
        :type ip_configurations: List[BastionHostIPConfiguration]
        """

        self._ip_configurations = ip_configurations

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this BastionHostPropertiesFormat.

        The current provisioning state.

        :return: The provisioning_state of this BastionHostPropertiesFormat.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this BastionHostPropertiesFormat.

        The current provisioning state.

        :param provisioning_state: The provisioning_state of this BastionHostPropertiesFormat.
        :type provisioning_state: str
        """
        allowed_values = ["Succeeded", "Updating", "Deleting", "Failed"]  # noqa: E501
        if provisioning_state not in allowed_values:
            raise ValueError(
                "Invalid value for `provisioning_state` ({0}), must be one of {1}"
                .format(provisioning_state, allowed_values)
            )

        self._provisioning_state = provisioning_state
