/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-07-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBastionHostPropertiesFormat.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBastionHostPropertiesFormat::OAIBastionHostPropertiesFormat(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBastionHostPropertiesFormat::OAIBastionHostPropertiesFormat() {
    this->initializeModel();
}

OAIBastionHostPropertiesFormat::~OAIBastionHostPropertiesFormat() {}

void OAIBastionHostPropertiesFormat::initializeModel() {

    m_dns_name_isSet = false;
    m_dns_name_isValid = false;

    m_ip_configurations_isSet = false;
    m_ip_configurations_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;
}

void OAIBastionHostPropertiesFormat::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBastionHostPropertiesFormat::fromJsonObject(QJsonObject json) {

    m_dns_name_isValid = ::OpenAPI::fromJsonValue(m_dns_name, json[QString("dnsName")]);
    m_dns_name_isSet = !json[QString("dnsName")].isNull() && m_dns_name_isValid;

    m_ip_configurations_isValid = ::OpenAPI::fromJsonValue(m_ip_configurations, json[QString("ipConfigurations")]);
    m_ip_configurations_isSet = !json[QString("ipConfigurations")].isNull() && m_ip_configurations_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;
}

QString OAIBastionHostPropertiesFormat::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBastionHostPropertiesFormat::asJsonObject() const {
    QJsonObject obj;
    if (m_dns_name_isSet) {
        obj.insert(QString("dnsName"), ::OpenAPI::toJsonValue(m_dns_name));
    }
    if (m_ip_configurations.size() > 0) {
        obj.insert(QString("ipConfigurations"), ::OpenAPI::toJsonValue(m_ip_configurations));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    return obj;
}

QString OAIBastionHostPropertiesFormat::getDnsName() const {
    return m_dns_name;
}
void OAIBastionHostPropertiesFormat::setDnsName(const QString &dns_name) {
    m_dns_name = dns_name;
    m_dns_name_isSet = true;
}

bool OAIBastionHostPropertiesFormat::is_dns_name_Set() const{
    return m_dns_name_isSet;
}

bool OAIBastionHostPropertiesFormat::is_dns_name_Valid() const{
    return m_dns_name_isValid;
}

QList<OAIBastionHostIPConfiguration> OAIBastionHostPropertiesFormat::getIpConfigurations() const {
    return m_ip_configurations;
}
void OAIBastionHostPropertiesFormat::setIpConfigurations(const QList<OAIBastionHostIPConfiguration> &ip_configurations) {
    m_ip_configurations = ip_configurations;
    m_ip_configurations_isSet = true;
}

bool OAIBastionHostPropertiesFormat::is_ip_configurations_Set() const{
    return m_ip_configurations_isSet;
}

bool OAIBastionHostPropertiesFormat::is_ip_configurations_Valid() const{
    return m_ip_configurations_isValid;
}

QString OAIBastionHostPropertiesFormat::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIBastionHostPropertiesFormat::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIBastionHostPropertiesFormat::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIBastionHostPropertiesFormat::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

bool OAIBastionHostPropertiesFormat::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dns_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_configurations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBastionHostPropertiesFormat::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
