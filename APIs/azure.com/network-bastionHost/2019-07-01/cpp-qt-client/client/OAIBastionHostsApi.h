/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-07-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIBastionHostsApi_H
#define OAI_OAIBastionHostsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBastionHost.h"
#include "OAIBastionHostListResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIBastionHostsApi : public QObject {
    Q_OBJECT

public:
    OAIBastionHostsApi(const int timeOut = 0);
    ~OAIBastionHostsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  bastion_host_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIBastionHost [required]
    */
    virtual void bastionHostsCreateOrUpdate(const QString &resource_group_name, const QString &bastion_host_name, const QString &api_version, const QString &subscription_id, const OAIBastionHost &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  bastion_host_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void bastionHostsDelete(const QString &resource_group_name, const QString &bastion_host_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  bastion_host_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void bastionHostsGet(const QString &resource_group_name, const QString &bastion_host_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void bastionHostsList(const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void bastionHostsListByResourceGroup(const QString &resource_group_name, const QString &api_version, const QString &subscription_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void bastionHostsCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void bastionHostsDeleteCallback(OAIHttpRequestWorker *worker);
    void bastionHostsGetCallback(OAIHttpRequestWorker *worker);
    void bastionHostsListCallback(OAIHttpRequestWorker *worker);
    void bastionHostsListByResourceGroupCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void bastionHostsCreateOrUpdateSignal(OAIBastionHost summary);
    void bastionHostsDeleteSignal();
    void bastionHostsGetSignal(OAIBastionHost summary);
    void bastionHostsListSignal(OAIBastionHostListResult summary);
    void bastionHostsListByResourceGroupSignal(OAIBastionHostListResult summary);


    void bastionHostsCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIBastionHost summary);
    void bastionHostsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void bastionHostsGetSignalFull(OAIHttpRequestWorker *worker, OAIBastionHost summary);
    void bastionHostsListSignalFull(OAIHttpRequestWorker *worker, OAIBastionHostListResult summary);
    void bastionHostsListByResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAIBastionHostListResult summary);

    Q_DECL_DEPRECATED_X("Use bastionHostsCreateOrUpdateSignalError() instead")
    void bastionHostsCreateOrUpdateSignalE(OAIBastionHost summary, QNetworkReply::NetworkError error_type, QString error_str);
    void bastionHostsCreateOrUpdateSignalError(OAIBastionHost summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bastionHostsDeleteSignalError() instead")
    void bastionHostsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void bastionHostsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bastionHostsGetSignalError() instead")
    void bastionHostsGetSignalE(OAIBastionHost summary, QNetworkReply::NetworkError error_type, QString error_str);
    void bastionHostsGetSignalError(OAIBastionHost summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bastionHostsListSignalError() instead")
    void bastionHostsListSignalE(OAIBastionHostListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void bastionHostsListSignalError(OAIBastionHostListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bastionHostsListByResourceGroupSignalError() instead")
    void bastionHostsListByResourceGroupSignalE(OAIBastionHostListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void bastionHostsListByResourceGroupSignalError(OAIBastionHostListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use bastionHostsCreateOrUpdateSignalErrorFull() instead")
    void bastionHostsCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void bastionHostsCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bastionHostsDeleteSignalErrorFull() instead")
    void bastionHostsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void bastionHostsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bastionHostsGetSignalErrorFull() instead")
    void bastionHostsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void bastionHostsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bastionHostsListSignalErrorFull() instead")
    void bastionHostsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void bastionHostsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bastionHostsListByResourceGroupSignalErrorFull() instead")
    void bastionHostsListByResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void bastionHostsListByResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
