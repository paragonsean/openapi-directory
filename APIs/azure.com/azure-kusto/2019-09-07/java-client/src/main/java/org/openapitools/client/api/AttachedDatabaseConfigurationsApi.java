/*
 * KustoManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-09-07
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AttachedDatabaseConfiguration;
import org.openapitools.client.model.AttachedDatabaseConfigurationListResult;
import org.openapitools.client.model.CloudError;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AttachedDatabaseConfigurationsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AttachedDatabaseConfigurationsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AttachedDatabaseConfigurationsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for attachedDatabaseConfigurationsCreateOrUpdate
     * @param resourceGroupName The name of the resource group containing the Kusto cluster. (required)
     * @param clusterName The name of the Kusto cluster. (required)
     * @param attachedDatabaseConfigurationName The name of the attached database configuration. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API Version. (required)
     * @param parameters The database parameters supplied to the CreateOrUpdate operation. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the database. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Successfully created the database. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted the create database request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call attachedDatabaseConfigurationsCreateOrUpdateCall(String resourceGroupName, String clusterName, String attachedDatabaseConfigurationName, String subscriptionId, String apiVersion, AttachedDatabaseConfiguration parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/attachedDatabaseConfigurations/{attachedDatabaseConfigurationName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "clusterName" + "}", localVarApiClient.escapeString(clusterName.toString()))
            .replace("{" + "attachedDatabaseConfigurationName" + "}", localVarApiClient.escapeString(attachedDatabaseConfigurationName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call attachedDatabaseConfigurationsCreateOrUpdateValidateBeforeCall(String resourceGroupName, String clusterName, String attachedDatabaseConfigurationName, String subscriptionId, String apiVersion, AttachedDatabaseConfiguration parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling attachedDatabaseConfigurationsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'clusterName' is set
        if (clusterName == null) {
            throw new ApiException("Missing the required parameter 'clusterName' when calling attachedDatabaseConfigurationsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'attachedDatabaseConfigurationName' is set
        if (attachedDatabaseConfigurationName == null) {
            throw new ApiException("Missing the required parameter 'attachedDatabaseConfigurationName' when calling attachedDatabaseConfigurationsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling attachedDatabaseConfigurationsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling attachedDatabaseConfigurationsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling attachedDatabaseConfigurationsCreateOrUpdate(Async)");
        }

        return attachedDatabaseConfigurationsCreateOrUpdateCall(resourceGroupName, clusterName, attachedDatabaseConfigurationName, subscriptionId, apiVersion, parameters, _callback);

    }

    /**
     * 
     * Creates or updates an attached database configuration.
     * @param resourceGroupName The name of the resource group containing the Kusto cluster. (required)
     * @param clusterName The name of the Kusto cluster. (required)
     * @param attachedDatabaseConfigurationName The name of the attached database configuration. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API Version. (required)
     * @param parameters The database parameters supplied to the CreateOrUpdate operation. (required)
     * @return AttachedDatabaseConfiguration
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the database. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Successfully created the database. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted the create database request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public AttachedDatabaseConfiguration attachedDatabaseConfigurationsCreateOrUpdate(String resourceGroupName, String clusterName, String attachedDatabaseConfigurationName, String subscriptionId, String apiVersion, AttachedDatabaseConfiguration parameters) throws ApiException {
        ApiResponse<AttachedDatabaseConfiguration> localVarResp = attachedDatabaseConfigurationsCreateOrUpdateWithHttpInfo(resourceGroupName, clusterName, attachedDatabaseConfigurationName, subscriptionId, apiVersion, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates or updates an attached database configuration.
     * @param resourceGroupName The name of the resource group containing the Kusto cluster. (required)
     * @param clusterName The name of the Kusto cluster. (required)
     * @param attachedDatabaseConfigurationName The name of the attached database configuration. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API Version. (required)
     * @param parameters The database parameters supplied to the CreateOrUpdate operation. (required)
     * @return ApiResponse&lt;AttachedDatabaseConfiguration&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the database. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Successfully created the database. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted the create database request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AttachedDatabaseConfiguration> attachedDatabaseConfigurationsCreateOrUpdateWithHttpInfo(String resourceGroupName, String clusterName, String attachedDatabaseConfigurationName, String subscriptionId, String apiVersion, AttachedDatabaseConfiguration parameters) throws ApiException {
        okhttp3.Call localVarCall = attachedDatabaseConfigurationsCreateOrUpdateValidateBeforeCall(resourceGroupName, clusterName, attachedDatabaseConfigurationName, subscriptionId, apiVersion, parameters, null);
        Type localVarReturnType = new TypeToken<AttachedDatabaseConfiguration>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates or updates an attached database configuration.
     * @param resourceGroupName The name of the resource group containing the Kusto cluster. (required)
     * @param clusterName The name of the Kusto cluster. (required)
     * @param attachedDatabaseConfigurationName The name of the attached database configuration. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API Version. (required)
     * @param parameters The database parameters supplied to the CreateOrUpdate operation. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the database. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Successfully created the database. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted the create database request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call attachedDatabaseConfigurationsCreateOrUpdateAsync(String resourceGroupName, String clusterName, String attachedDatabaseConfigurationName, String subscriptionId, String apiVersion, AttachedDatabaseConfiguration parameters, final ApiCallback<AttachedDatabaseConfiguration> _callback) throws ApiException {

        okhttp3.Call localVarCall = attachedDatabaseConfigurationsCreateOrUpdateValidateBeforeCall(resourceGroupName, clusterName, attachedDatabaseConfigurationName, subscriptionId, apiVersion, parameters, _callback);
        Type localVarReturnType = new TypeToken<AttachedDatabaseConfiguration>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for attachedDatabaseConfigurationsDelete
     * @param resourceGroupName The name of the resource group containing the Kusto cluster. (required)
     * @param clusterName The name of the Kusto cluster. (required)
     * @param attachedDatabaseConfigurationName The name of the attached database configuration. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API Version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted the database. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The specified database does not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call attachedDatabaseConfigurationsDeleteCall(String resourceGroupName, String clusterName, String attachedDatabaseConfigurationName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/attachedDatabaseConfigurations/{attachedDatabaseConfigurationName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "clusterName" + "}", localVarApiClient.escapeString(clusterName.toString()))
            .replace("{" + "attachedDatabaseConfigurationName" + "}", localVarApiClient.escapeString(attachedDatabaseConfigurationName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call attachedDatabaseConfigurationsDeleteValidateBeforeCall(String resourceGroupName, String clusterName, String attachedDatabaseConfigurationName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling attachedDatabaseConfigurationsDelete(Async)");
        }

        // verify the required parameter 'clusterName' is set
        if (clusterName == null) {
            throw new ApiException("Missing the required parameter 'clusterName' when calling attachedDatabaseConfigurationsDelete(Async)");
        }

        // verify the required parameter 'attachedDatabaseConfigurationName' is set
        if (attachedDatabaseConfigurationName == null) {
            throw new ApiException("Missing the required parameter 'attachedDatabaseConfigurationName' when calling attachedDatabaseConfigurationsDelete(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling attachedDatabaseConfigurationsDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling attachedDatabaseConfigurationsDelete(Async)");
        }

        return attachedDatabaseConfigurationsDeleteCall(resourceGroupName, clusterName, attachedDatabaseConfigurationName, subscriptionId, apiVersion, _callback);

    }

    /**
     * 
     * Deletes the attached database configuration with the given name.
     * @param resourceGroupName The name of the resource group containing the Kusto cluster. (required)
     * @param clusterName The name of the Kusto cluster. (required)
     * @param attachedDatabaseConfigurationName The name of the attached database configuration. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API Version. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted the database. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The specified database does not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public void attachedDatabaseConfigurationsDelete(String resourceGroupName, String clusterName, String attachedDatabaseConfigurationName, String subscriptionId, String apiVersion) throws ApiException {
        attachedDatabaseConfigurationsDeleteWithHttpInfo(resourceGroupName, clusterName, attachedDatabaseConfigurationName, subscriptionId, apiVersion);
    }

    /**
     * 
     * Deletes the attached database configuration with the given name.
     * @param resourceGroupName The name of the resource group containing the Kusto cluster. (required)
     * @param clusterName The name of the Kusto cluster. (required)
     * @param attachedDatabaseConfigurationName The name of the attached database configuration. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API Version. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted the database. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The specified database does not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> attachedDatabaseConfigurationsDeleteWithHttpInfo(String resourceGroupName, String clusterName, String attachedDatabaseConfigurationName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = attachedDatabaseConfigurationsDeleteValidateBeforeCall(resourceGroupName, clusterName, attachedDatabaseConfigurationName, subscriptionId, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes the attached database configuration with the given name.
     * @param resourceGroupName The name of the resource group containing the Kusto cluster. (required)
     * @param clusterName The name of the Kusto cluster. (required)
     * @param attachedDatabaseConfigurationName The name of the attached database configuration. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API Version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted the database. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The specified database does not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call attachedDatabaseConfigurationsDeleteAsync(String resourceGroupName, String clusterName, String attachedDatabaseConfigurationName, String subscriptionId, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = attachedDatabaseConfigurationsDeleteValidateBeforeCall(resourceGroupName, clusterName, attachedDatabaseConfigurationName, subscriptionId, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for attachedDatabaseConfigurationsGet
     * @param resourceGroupName The name of the resource group containing the Kusto cluster. (required)
     * @param clusterName The name of the Kusto cluster. (required)
     * @param attachedDatabaseConfigurationName The name of the attached database configuration. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API Version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the specified attached database configuration. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call attachedDatabaseConfigurationsGetCall(String resourceGroupName, String clusterName, String attachedDatabaseConfigurationName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/attachedDatabaseConfigurations/{attachedDatabaseConfigurationName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "clusterName" + "}", localVarApiClient.escapeString(clusterName.toString()))
            .replace("{" + "attachedDatabaseConfigurationName" + "}", localVarApiClient.escapeString(attachedDatabaseConfigurationName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call attachedDatabaseConfigurationsGetValidateBeforeCall(String resourceGroupName, String clusterName, String attachedDatabaseConfigurationName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling attachedDatabaseConfigurationsGet(Async)");
        }

        // verify the required parameter 'clusterName' is set
        if (clusterName == null) {
            throw new ApiException("Missing the required parameter 'clusterName' when calling attachedDatabaseConfigurationsGet(Async)");
        }

        // verify the required parameter 'attachedDatabaseConfigurationName' is set
        if (attachedDatabaseConfigurationName == null) {
            throw new ApiException("Missing the required parameter 'attachedDatabaseConfigurationName' when calling attachedDatabaseConfigurationsGet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling attachedDatabaseConfigurationsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling attachedDatabaseConfigurationsGet(Async)");
        }

        return attachedDatabaseConfigurationsGetCall(resourceGroupName, clusterName, attachedDatabaseConfigurationName, subscriptionId, apiVersion, _callback);

    }

    /**
     * 
     * Returns an attached database configuration.
     * @param resourceGroupName The name of the resource group containing the Kusto cluster. (required)
     * @param clusterName The name of the Kusto cluster. (required)
     * @param attachedDatabaseConfigurationName The name of the attached database configuration. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API Version. (required)
     * @return AttachedDatabaseConfiguration
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the specified attached database configuration. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public AttachedDatabaseConfiguration attachedDatabaseConfigurationsGet(String resourceGroupName, String clusterName, String attachedDatabaseConfigurationName, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<AttachedDatabaseConfiguration> localVarResp = attachedDatabaseConfigurationsGetWithHttpInfo(resourceGroupName, clusterName, attachedDatabaseConfigurationName, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns an attached database configuration.
     * @param resourceGroupName The name of the resource group containing the Kusto cluster. (required)
     * @param clusterName The name of the Kusto cluster. (required)
     * @param attachedDatabaseConfigurationName The name of the attached database configuration. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API Version. (required)
     * @return ApiResponse&lt;AttachedDatabaseConfiguration&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the specified attached database configuration. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AttachedDatabaseConfiguration> attachedDatabaseConfigurationsGetWithHttpInfo(String resourceGroupName, String clusterName, String attachedDatabaseConfigurationName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = attachedDatabaseConfigurationsGetValidateBeforeCall(resourceGroupName, clusterName, attachedDatabaseConfigurationName, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<AttachedDatabaseConfiguration>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns an attached database configuration.
     * @param resourceGroupName The name of the resource group containing the Kusto cluster. (required)
     * @param clusterName The name of the Kusto cluster. (required)
     * @param attachedDatabaseConfigurationName The name of the attached database configuration. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API Version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the specified attached database configuration. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call attachedDatabaseConfigurationsGetAsync(String resourceGroupName, String clusterName, String attachedDatabaseConfigurationName, String subscriptionId, String apiVersion, final ApiCallback<AttachedDatabaseConfiguration> _callback) throws ApiException {

        okhttp3.Call localVarCall = attachedDatabaseConfigurationsGetValidateBeforeCall(resourceGroupName, clusterName, attachedDatabaseConfigurationName, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<AttachedDatabaseConfiguration>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for attachedDatabaseConfigurationsListByCluster
     * @param resourceGroupName The name of the resource group containing the Kusto cluster. (required)
     * @param clusterName The name of the Kusto cluster. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API Version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of attached database configurations. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call attachedDatabaseConfigurationsListByClusterCall(String resourceGroupName, String clusterName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/attachedDatabaseConfigurations"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "clusterName" + "}", localVarApiClient.escapeString(clusterName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call attachedDatabaseConfigurationsListByClusterValidateBeforeCall(String resourceGroupName, String clusterName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling attachedDatabaseConfigurationsListByCluster(Async)");
        }

        // verify the required parameter 'clusterName' is set
        if (clusterName == null) {
            throw new ApiException("Missing the required parameter 'clusterName' when calling attachedDatabaseConfigurationsListByCluster(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling attachedDatabaseConfigurationsListByCluster(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling attachedDatabaseConfigurationsListByCluster(Async)");
        }

        return attachedDatabaseConfigurationsListByClusterCall(resourceGroupName, clusterName, subscriptionId, apiVersion, _callback);

    }

    /**
     * 
     * Returns the list of attached database configurations of the given Kusto cluster.
     * @param resourceGroupName The name of the resource group containing the Kusto cluster. (required)
     * @param clusterName The name of the Kusto cluster. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API Version. (required)
     * @return AttachedDatabaseConfigurationListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of attached database configurations. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public AttachedDatabaseConfigurationListResult attachedDatabaseConfigurationsListByCluster(String resourceGroupName, String clusterName, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<AttachedDatabaseConfigurationListResult> localVarResp = attachedDatabaseConfigurationsListByClusterWithHttpInfo(resourceGroupName, clusterName, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns the list of attached database configurations of the given Kusto cluster.
     * @param resourceGroupName The name of the resource group containing the Kusto cluster. (required)
     * @param clusterName The name of the Kusto cluster. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API Version. (required)
     * @return ApiResponse&lt;AttachedDatabaseConfigurationListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of attached database configurations. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AttachedDatabaseConfigurationListResult> attachedDatabaseConfigurationsListByClusterWithHttpInfo(String resourceGroupName, String clusterName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = attachedDatabaseConfigurationsListByClusterValidateBeforeCall(resourceGroupName, clusterName, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<AttachedDatabaseConfigurationListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the list of attached database configurations of the given Kusto cluster.
     * @param resourceGroupName The name of the resource group containing the Kusto cluster. (required)
     * @param clusterName The name of the Kusto cluster. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API Version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of attached database configurations. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call attachedDatabaseConfigurationsListByClusterAsync(String resourceGroupName, String clusterName, String subscriptionId, String apiVersion, final ApiCallback<AttachedDatabaseConfigurationListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = attachedDatabaseConfigurationsListByClusterValidateBeforeCall(resourceGroupName, clusterName, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<AttachedDatabaseConfigurationListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
