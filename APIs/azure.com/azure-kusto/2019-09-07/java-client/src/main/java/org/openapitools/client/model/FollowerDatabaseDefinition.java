/*
 * KustoManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-09-07
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A class representing follower database request.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:20:01.335091-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FollowerDatabaseDefinition {
  public static final String SERIALIZED_NAME_ATTACHED_DATABASE_CONFIGURATION_NAME = "attachedDatabaseConfigurationName";
  @SerializedName(SERIALIZED_NAME_ATTACHED_DATABASE_CONFIGURATION_NAME)
  private String attachedDatabaseConfigurationName;

  public static final String SERIALIZED_NAME_CLUSTER_RESOURCE_ID = "clusterResourceId";
  @SerializedName(SERIALIZED_NAME_CLUSTER_RESOURCE_ID)
  private String clusterResourceId;

  public static final String SERIALIZED_NAME_DATABASE_NAME = "databaseName";
  @SerializedName(SERIALIZED_NAME_DATABASE_NAME)
  private String databaseName;

  public FollowerDatabaseDefinition() {
  }

  public FollowerDatabaseDefinition(
     String databaseName
  ) {
    this();
    this.databaseName = databaseName;
  }

  public FollowerDatabaseDefinition attachedDatabaseConfigurationName(String attachedDatabaseConfigurationName) {
    this.attachedDatabaseConfigurationName = attachedDatabaseConfigurationName;
    return this;
  }

  /**
   * Resource name of the attached database configuration in the follower cluster.
   * @return attachedDatabaseConfigurationName
   */
  @javax.annotation.Nonnull
  public String getAttachedDatabaseConfigurationName() {
    return attachedDatabaseConfigurationName;
  }

  public void setAttachedDatabaseConfigurationName(String attachedDatabaseConfigurationName) {
    this.attachedDatabaseConfigurationName = attachedDatabaseConfigurationName;
  }


  public FollowerDatabaseDefinition clusterResourceId(String clusterResourceId) {
    this.clusterResourceId = clusterResourceId;
    return this;
  }

  /**
   * Resource id of the cluster that follows a database owned by this cluster.
   * @return clusterResourceId
   */
  @javax.annotation.Nonnull
  public String getClusterResourceId() {
    return clusterResourceId;
  }

  public void setClusterResourceId(String clusterResourceId) {
    this.clusterResourceId = clusterResourceId;
  }


  /**
   * The database name owned by this cluster that was followed. * in case following all databases.
   * @return databaseName
   */
  @javax.annotation.Nullable
  public String getDatabaseName() {
    return databaseName;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FollowerDatabaseDefinition followerDatabaseDefinition = (FollowerDatabaseDefinition) o;
    return Objects.equals(this.attachedDatabaseConfigurationName, followerDatabaseDefinition.attachedDatabaseConfigurationName) &&
        Objects.equals(this.clusterResourceId, followerDatabaseDefinition.clusterResourceId) &&
        Objects.equals(this.databaseName, followerDatabaseDefinition.databaseName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attachedDatabaseConfigurationName, clusterResourceId, databaseName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FollowerDatabaseDefinition {\n");
    sb.append("    attachedDatabaseConfigurationName: ").append(toIndentedString(attachedDatabaseConfigurationName)).append("\n");
    sb.append("    clusterResourceId: ").append(toIndentedString(clusterResourceId)).append("\n");
    sb.append("    databaseName: ").append(toIndentedString(databaseName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("attachedDatabaseConfigurationName");
    openapiFields.add("clusterResourceId");
    openapiFields.add("databaseName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("attachedDatabaseConfigurationName");
    openapiRequiredFields.add("clusterResourceId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FollowerDatabaseDefinition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FollowerDatabaseDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FollowerDatabaseDefinition is not found in the empty JSON string", FollowerDatabaseDefinition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FollowerDatabaseDefinition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FollowerDatabaseDefinition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : FollowerDatabaseDefinition.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("attachedDatabaseConfigurationName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `attachedDatabaseConfigurationName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("attachedDatabaseConfigurationName").toString()));
      }
      if (!jsonObj.get("clusterResourceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clusterResourceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clusterResourceId").toString()));
      }
      if ((jsonObj.get("databaseName") != null && !jsonObj.get("databaseName").isJsonNull()) && !jsonObj.get("databaseName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `databaseName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("databaseName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FollowerDatabaseDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FollowerDatabaseDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FollowerDatabaseDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FollowerDatabaseDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<FollowerDatabaseDefinition>() {
           @Override
           public void write(JsonWriter out, FollowerDatabaseDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FollowerDatabaseDefinition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FollowerDatabaseDefinition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FollowerDatabaseDefinition
   * @throws IOException if the JSON string is invalid with respect to FollowerDatabaseDefinition
   */
  public static FollowerDatabaseDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FollowerDatabaseDefinition.class);
  }

  /**
   * Convert an instance of FollowerDatabaseDefinition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

