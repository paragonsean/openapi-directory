/*
 * KustoManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-09-07
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Class representing the an attached database configuration properties of kind specific.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:20:01.335091-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AttachedDatabaseConfigurationProperties {
  public static final String SERIALIZED_NAME_ATTACHED_DATABASE_NAMES = "attachedDatabaseNames";
  @SerializedName(SERIALIZED_NAME_ATTACHED_DATABASE_NAMES)
  private List<String> attachedDatabaseNames = new ArrayList<>();

  public static final String SERIALIZED_NAME_CLUSTER_RESOURCE_ID = "clusterResourceId";
  @SerializedName(SERIALIZED_NAME_CLUSTER_RESOURCE_ID)
  private String clusterResourceId;

  public static final String SERIALIZED_NAME_DATABASE_NAME = "databaseName";
  @SerializedName(SERIALIZED_NAME_DATABASE_NAME)
  private String databaseName;

  /**
   * The default principals modification kind
   */
  @JsonAdapter(DefaultPrincipalsModificationKindEnum.Adapter.class)
  public enum DefaultPrincipalsModificationKindEnum {
    UNION("Union"),
    
    REPLACE("Replace"),
    
    NONE("None");

    private String value;

    DefaultPrincipalsModificationKindEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DefaultPrincipalsModificationKindEnum fromValue(String value) {
      for (DefaultPrincipalsModificationKindEnum b : DefaultPrincipalsModificationKindEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DefaultPrincipalsModificationKindEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DefaultPrincipalsModificationKindEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DefaultPrincipalsModificationKindEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DefaultPrincipalsModificationKindEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DefaultPrincipalsModificationKindEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DEFAULT_PRINCIPALS_MODIFICATION_KIND = "defaultPrincipalsModificationKind";
  @SerializedName(SERIALIZED_NAME_DEFAULT_PRINCIPALS_MODIFICATION_KIND)
  private DefaultPrincipalsModificationKindEnum defaultPrincipalsModificationKind;

  /**
   * The provisioned state of the resource.
   */
  @JsonAdapter(ProvisioningStateEnum.Adapter.class)
  public enum ProvisioningStateEnum {
    RUNNING("Running"),
    
    CREATING("Creating"),
    
    DELETING("Deleting"),
    
    SUCCEEDED("Succeeded"),
    
    FAILED("Failed"),
    
    MOVING("Moving");

    private String value;

    ProvisioningStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProvisioningStateEnum fromValue(String value) {
      for (ProvisioningStateEnum b : ProvisioningStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProvisioningStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProvisioningStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProvisioningStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProvisioningStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProvisioningStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private ProvisioningStateEnum provisioningState;

  public AttachedDatabaseConfigurationProperties() {
  }

  public AttachedDatabaseConfigurationProperties(
     List<String> attachedDatabaseNames, 
     ProvisioningStateEnum provisioningState
  ) {
    this();
    this.attachedDatabaseNames = attachedDatabaseNames;
    this.provisioningState = provisioningState;
  }

  /**
   * The list of databases from the clusterResourceId which are currently attached to the cluster.
   * @return attachedDatabaseNames
   */
  @javax.annotation.Nullable
  public List<String> getAttachedDatabaseNames() {
    return attachedDatabaseNames;
  }



  public AttachedDatabaseConfigurationProperties clusterResourceId(String clusterResourceId) {
    this.clusterResourceId = clusterResourceId;
    return this;
  }

  /**
   * The resource id of the cluster where the databases you would like to attach reside.
   * @return clusterResourceId
   */
  @javax.annotation.Nonnull
  public String getClusterResourceId() {
    return clusterResourceId;
  }

  public void setClusterResourceId(String clusterResourceId) {
    this.clusterResourceId = clusterResourceId;
  }


  public AttachedDatabaseConfigurationProperties databaseName(String databaseName) {
    this.databaseName = databaseName;
    return this;
  }

  /**
   * The name of the database which you would like to attach, use * if you want to follow all current and future databases.
   * @return databaseName
   */
  @javax.annotation.Nonnull
  public String getDatabaseName() {
    return databaseName;
  }

  public void setDatabaseName(String databaseName) {
    this.databaseName = databaseName;
  }


  public AttachedDatabaseConfigurationProperties defaultPrincipalsModificationKind(DefaultPrincipalsModificationKindEnum defaultPrincipalsModificationKind) {
    this.defaultPrincipalsModificationKind = defaultPrincipalsModificationKind;
    return this;
  }

  /**
   * The default principals modification kind
   * @return defaultPrincipalsModificationKind
   */
  @javax.annotation.Nonnull
  public DefaultPrincipalsModificationKindEnum getDefaultPrincipalsModificationKind() {
    return defaultPrincipalsModificationKind;
  }

  public void setDefaultPrincipalsModificationKind(DefaultPrincipalsModificationKindEnum defaultPrincipalsModificationKind) {
    this.defaultPrincipalsModificationKind = defaultPrincipalsModificationKind;
  }


  /**
   * The provisioned state of the resource.
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public ProvisioningStateEnum getProvisioningState() {
    return provisioningState;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AttachedDatabaseConfigurationProperties attachedDatabaseConfigurationProperties = (AttachedDatabaseConfigurationProperties) o;
    return Objects.equals(this.attachedDatabaseNames, attachedDatabaseConfigurationProperties.attachedDatabaseNames) &&
        Objects.equals(this.clusterResourceId, attachedDatabaseConfigurationProperties.clusterResourceId) &&
        Objects.equals(this.databaseName, attachedDatabaseConfigurationProperties.databaseName) &&
        Objects.equals(this.defaultPrincipalsModificationKind, attachedDatabaseConfigurationProperties.defaultPrincipalsModificationKind) &&
        Objects.equals(this.provisioningState, attachedDatabaseConfigurationProperties.provisioningState);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attachedDatabaseNames, clusterResourceId, databaseName, defaultPrincipalsModificationKind, provisioningState);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AttachedDatabaseConfigurationProperties {\n");
    sb.append("    attachedDatabaseNames: ").append(toIndentedString(attachedDatabaseNames)).append("\n");
    sb.append("    clusterResourceId: ").append(toIndentedString(clusterResourceId)).append("\n");
    sb.append("    databaseName: ").append(toIndentedString(databaseName)).append("\n");
    sb.append("    defaultPrincipalsModificationKind: ").append(toIndentedString(defaultPrincipalsModificationKind)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("attachedDatabaseNames");
    openapiFields.add("clusterResourceId");
    openapiFields.add("databaseName");
    openapiFields.add("defaultPrincipalsModificationKind");
    openapiFields.add("provisioningState");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("clusterResourceId");
    openapiRequiredFields.add("databaseName");
    openapiRequiredFields.add("defaultPrincipalsModificationKind");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AttachedDatabaseConfigurationProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AttachedDatabaseConfigurationProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AttachedDatabaseConfigurationProperties is not found in the empty JSON string", AttachedDatabaseConfigurationProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AttachedDatabaseConfigurationProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AttachedDatabaseConfigurationProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AttachedDatabaseConfigurationProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("attachedDatabaseNames") != null && !jsonObj.get("attachedDatabaseNames").isJsonNull() && !jsonObj.get("attachedDatabaseNames").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `attachedDatabaseNames` to be an array in the JSON string but got `%s`", jsonObj.get("attachedDatabaseNames").toString()));
      }
      if (!jsonObj.get("clusterResourceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clusterResourceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clusterResourceId").toString()));
      }
      if (!jsonObj.get("databaseName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `databaseName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("databaseName").toString()));
      }
      if (!jsonObj.get("defaultPrincipalsModificationKind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `defaultPrincipalsModificationKind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("defaultPrincipalsModificationKind").toString()));
      }
      // validate the required field `defaultPrincipalsModificationKind`
      DefaultPrincipalsModificationKindEnum.validateJsonElement(jsonObj.get("defaultPrincipalsModificationKind"));
      if ((jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) && !jsonObj.get("provisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningState").toString()));
      }
      // validate the optional field `provisioningState`
      if (jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) {
        ProvisioningStateEnum.validateJsonElement(jsonObj.get("provisioningState"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AttachedDatabaseConfigurationProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AttachedDatabaseConfigurationProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AttachedDatabaseConfigurationProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AttachedDatabaseConfigurationProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<AttachedDatabaseConfigurationProperties>() {
           @Override
           public void write(JsonWriter out, AttachedDatabaseConfigurationProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AttachedDatabaseConfigurationProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AttachedDatabaseConfigurationProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AttachedDatabaseConfigurationProperties
   * @throws IOException if the JSON string is invalid with respect to AttachedDatabaseConfigurationProperties
   */
  public static AttachedDatabaseConfigurationProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AttachedDatabaseConfigurationProperties.class);
  }

  /**
   * Convert an instance of AttachedDatabaseConfigurationProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

