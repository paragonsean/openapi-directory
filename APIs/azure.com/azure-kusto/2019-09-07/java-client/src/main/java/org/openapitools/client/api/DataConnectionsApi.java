/*
 * KustoManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-09-07
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CheckNameResult;
import org.openapitools.client.model.CloudError;
import org.openapitools.client.model.DataConnection;
import org.openapitools.client.model.DataConnectionCheckNameRequest;
import org.openapitools.client.model.DataConnectionListResult;
import org.openapitools.client.model.DataConnectionValidation;
import org.openapitools.client.model.DataConnectionValidationListResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DataConnectionsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DataConnectionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DataConnectionsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for dataConnectionsCheckNameAvailability
     * @param resourceGroupName The name of the resource group containing the Kusto cluster. (required)
     * @param clusterName The name of the Kusto cluster. (required)
     * @param databaseName The name of the database in the Kusto cluster. (required)
     * @param apiVersion Client API Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param dataConnectionName The name of the data connection. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- Operation to check the Kusto resource name availability was successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataConnectionsCheckNameAvailabilityCall(String resourceGroupName, String clusterName, String databaseName, String apiVersion, String subscriptionId, DataConnectionCheckNameRequest dataConnectionName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dataConnectionName;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/databases/{databaseName}/checkNameAvailability"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "clusterName" + "}", localVarApiClient.escapeString(clusterName.toString()))
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dataConnectionsCheckNameAvailabilityValidateBeforeCall(String resourceGroupName, String clusterName, String databaseName, String apiVersion, String subscriptionId, DataConnectionCheckNameRequest dataConnectionName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling dataConnectionsCheckNameAvailability(Async)");
        }

        // verify the required parameter 'clusterName' is set
        if (clusterName == null) {
            throw new ApiException("Missing the required parameter 'clusterName' when calling dataConnectionsCheckNameAvailability(Async)");
        }

        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling dataConnectionsCheckNameAvailability(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling dataConnectionsCheckNameAvailability(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling dataConnectionsCheckNameAvailability(Async)");
        }

        // verify the required parameter 'dataConnectionName' is set
        if (dataConnectionName == null) {
            throw new ApiException("Missing the required parameter 'dataConnectionName' when calling dataConnectionsCheckNameAvailability(Async)");
        }

        return dataConnectionsCheckNameAvailabilityCall(resourceGroupName, clusterName, databaseName, apiVersion, subscriptionId, dataConnectionName, _callback);

    }

    /**
     * 
     * Checks that the data connection name is valid and is not already in use.
     * @param resourceGroupName The name of the resource group containing the Kusto cluster. (required)
     * @param clusterName The name of the Kusto cluster. (required)
     * @param databaseName The name of the database in the Kusto cluster. (required)
     * @param apiVersion Client API Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param dataConnectionName The name of the data connection. (required)
     * @return CheckNameResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- Operation to check the Kusto resource name availability was successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public CheckNameResult dataConnectionsCheckNameAvailability(String resourceGroupName, String clusterName, String databaseName, String apiVersion, String subscriptionId, DataConnectionCheckNameRequest dataConnectionName) throws ApiException {
        ApiResponse<CheckNameResult> localVarResp = dataConnectionsCheckNameAvailabilityWithHttpInfo(resourceGroupName, clusterName, databaseName, apiVersion, subscriptionId, dataConnectionName);
        return localVarResp.getData();
    }

    /**
     * 
     * Checks that the data connection name is valid and is not already in use.
     * @param resourceGroupName The name of the resource group containing the Kusto cluster. (required)
     * @param clusterName The name of the Kusto cluster. (required)
     * @param databaseName The name of the database in the Kusto cluster. (required)
     * @param apiVersion Client API Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param dataConnectionName The name of the data connection. (required)
     * @return ApiResponse&lt;CheckNameResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- Operation to check the Kusto resource name availability was successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CheckNameResult> dataConnectionsCheckNameAvailabilityWithHttpInfo(String resourceGroupName, String clusterName, String databaseName, String apiVersion, String subscriptionId, DataConnectionCheckNameRequest dataConnectionName) throws ApiException {
        okhttp3.Call localVarCall = dataConnectionsCheckNameAvailabilityValidateBeforeCall(resourceGroupName, clusterName, databaseName, apiVersion, subscriptionId, dataConnectionName, null);
        Type localVarReturnType = new TypeToken<CheckNameResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Checks that the data connection name is valid and is not already in use.
     * @param resourceGroupName The name of the resource group containing the Kusto cluster. (required)
     * @param clusterName The name of the Kusto cluster. (required)
     * @param databaseName The name of the database in the Kusto cluster. (required)
     * @param apiVersion Client API Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param dataConnectionName The name of the data connection. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- Operation to check the Kusto resource name availability was successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataConnectionsCheckNameAvailabilityAsync(String resourceGroupName, String clusterName, String databaseName, String apiVersion, String subscriptionId, DataConnectionCheckNameRequest dataConnectionName, final ApiCallback<CheckNameResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = dataConnectionsCheckNameAvailabilityValidateBeforeCall(resourceGroupName, clusterName, databaseName, apiVersion, subscriptionId, dataConnectionName, _callback);
        Type localVarReturnType = new TypeToken<CheckNameResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dataConnectionsCreateOrUpdate
     * @param resourceGroupName The name of the resource group containing the Kusto cluster. (required)
     * @param clusterName The name of the Kusto cluster. (required)
     * @param databaseName The name of the database in the Kusto cluster. (required)
     * @param dataConnectionName The name of the data connection. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API Version. (required)
     * @param parameters The data connection parameters supplied to the CreateOrUpdate operation. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the data connection. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Successfully created the data connection. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted the create data connection request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataConnectionsCreateOrUpdateCall(String resourceGroupName, String clusterName, String databaseName, String dataConnectionName, String subscriptionId, String apiVersion, DataConnection parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/databases/{databaseName}/dataConnections/{dataConnectionName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "clusterName" + "}", localVarApiClient.escapeString(clusterName.toString()))
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()))
            .replace("{" + "dataConnectionName" + "}", localVarApiClient.escapeString(dataConnectionName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dataConnectionsCreateOrUpdateValidateBeforeCall(String resourceGroupName, String clusterName, String databaseName, String dataConnectionName, String subscriptionId, String apiVersion, DataConnection parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling dataConnectionsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'clusterName' is set
        if (clusterName == null) {
            throw new ApiException("Missing the required parameter 'clusterName' when calling dataConnectionsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling dataConnectionsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'dataConnectionName' is set
        if (dataConnectionName == null) {
            throw new ApiException("Missing the required parameter 'dataConnectionName' when calling dataConnectionsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling dataConnectionsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling dataConnectionsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling dataConnectionsCreateOrUpdate(Async)");
        }

        return dataConnectionsCreateOrUpdateCall(resourceGroupName, clusterName, databaseName, dataConnectionName, subscriptionId, apiVersion, parameters, _callback);

    }

    /**
     * 
     * Creates or updates a data connection.
     * @param resourceGroupName The name of the resource group containing the Kusto cluster. (required)
     * @param clusterName The name of the Kusto cluster. (required)
     * @param databaseName The name of the database in the Kusto cluster. (required)
     * @param dataConnectionName The name of the data connection. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API Version. (required)
     * @param parameters The data connection parameters supplied to the CreateOrUpdate operation. (required)
     * @return DataConnection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the data connection. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Successfully created the data connection. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted the create data connection request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public DataConnection dataConnectionsCreateOrUpdate(String resourceGroupName, String clusterName, String databaseName, String dataConnectionName, String subscriptionId, String apiVersion, DataConnection parameters) throws ApiException {
        ApiResponse<DataConnection> localVarResp = dataConnectionsCreateOrUpdateWithHttpInfo(resourceGroupName, clusterName, databaseName, dataConnectionName, subscriptionId, apiVersion, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates or updates a data connection.
     * @param resourceGroupName The name of the resource group containing the Kusto cluster. (required)
     * @param clusterName The name of the Kusto cluster. (required)
     * @param databaseName The name of the database in the Kusto cluster. (required)
     * @param dataConnectionName The name of the data connection. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API Version. (required)
     * @param parameters The data connection parameters supplied to the CreateOrUpdate operation. (required)
     * @return ApiResponse&lt;DataConnection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the data connection. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Successfully created the data connection. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted the create data connection request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataConnection> dataConnectionsCreateOrUpdateWithHttpInfo(String resourceGroupName, String clusterName, String databaseName, String dataConnectionName, String subscriptionId, String apiVersion, DataConnection parameters) throws ApiException {
        okhttp3.Call localVarCall = dataConnectionsCreateOrUpdateValidateBeforeCall(resourceGroupName, clusterName, databaseName, dataConnectionName, subscriptionId, apiVersion, parameters, null);
        Type localVarReturnType = new TypeToken<DataConnection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates or updates a data connection.
     * @param resourceGroupName The name of the resource group containing the Kusto cluster. (required)
     * @param clusterName The name of the Kusto cluster. (required)
     * @param databaseName The name of the database in the Kusto cluster. (required)
     * @param dataConnectionName The name of the data connection. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API Version. (required)
     * @param parameters The data connection parameters supplied to the CreateOrUpdate operation. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the data connection. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Successfully created the data connection. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted the create data connection request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataConnectionsCreateOrUpdateAsync(String resourceGroupName, String clusterName, String databaseName, String dataConnectionName, String subscriptionId, String apiVersion, DataConnection parameters, final ApiCallback<DataConnection> _callback) throws ApiException {

        okhttp3.Call localVarCall = dataConnectionsCreateOrUpdateValidateBeforeCall(resourceGroupName, clusterName, databaseName, dataConnectionName, subscriptionId, apiVersion, parameters, _callback);
        Type localVarReturnType = new TypeToken<DataConnection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dataConnectionsDataConnectionValidation
     * @param resourceGroupName The name of the resource group containing the Kusto cluster. (required)
     * @param clusterName The name of the Kusto cluster. (required)
     * @param databaseName The name of the database in the Kusto cluster. (required)
     * @param apiVersion Client API Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters The data connection parameters supplied to the CreateOrUpdate operation. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- Operation to check the kusto resource name availability was successful. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataConnectionsDataConnectionValidationCall(String resourceGroupName, String clusterName, String databaseName, String apiVersion, String subscriptionId, DataConnectionValidation parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/databases/{databaseName}/dataConnectionValidation"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "clusterName" + "}", localVarApiClient.escapeString(clusterName.toString()))
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dataConnectionsDataConnectionValidationValidateBeforeCall(String resourceGroupName, String clusterName, String databaseName, String apiVersion, String subscriptionId, DataConnectionValidation parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling dataConnectionsDataConnectionValidation(Async)");
        }

        // verify the required parameter 'clusterName' is set
        if (clusterName == null) {
            throw new ApiException("Missing the required parameter 'clusterName' when calling dataConnectionsDataConnectionValidation(Async)");
        }

        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling dataConnectionsDataConnectionValidation(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling dataConnectionsDataConnectionValidation(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling dataConnectionsDataConnectionValidation(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling dataConnectionsDataConnectionValidation(Async)");
        }

        return dataConnectionsDataConnectionValidationCall(resourceGroupName, clusterName, databaseName, apiVersion, subscriptionId, parameters, _callback);

    }

    /**
     * 
     * Checks that the data connection parameters are valid.
     * @param resourceGroupName The name of the resource group containing the Kusto cluster. (required)
     * @param clusterName The name of the Kusto cluster. (required)
     * @param databaseName The name of the database in the Kusto cluster. (required)
     * @param apiVersion Client API Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters The data connection parameters supplied to the CreateOrUpdate operation. (required)
     * @return DataConnectionValidationListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- Operation to check the kusto resource name availability was successful. </td><td>  -  </td></tr>
     </table>
     */
    public DataConnectionValidationListResult dataConnectionsDataConnectionValidation(String resourceGroupName, String clusterName, String databaseName, String apiVersion, String subscriptionId, DataConnectionValidation parameters) throws ApiException {
        ApiResponse<DataConnectionValidationListResult> localVarResp = dataConnectionsDataConnectionValidationWithHttpInfo(resourceGroupName, clusterName, databaseName, apiVersion, subscriptionId, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Checks that the data connection parameters are valid.
     * @param resourceGroupName The name of the resource group containing the Kusto cluster. (required)
     * @param clusterName The name of the Kusto cluster. (required)
     * @param databaseName The name of the database in the Kusto cluster. (required)
     * @param apiVersion Client API Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters The data connection parameters supplied to the CreateOrUpdate operation. (required)
     * @return ApiResponse&lt;DataConnectionValidationListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- Operation to check the kusto resource name availability was successful. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataConnectionValidationListResult> dataConnectionsDataConnectionValidationWithHttpInfo(String resourceGroupName, String clusterName, String databaseName, String apiVersion, String subscriptionId, DataConnectionValidation parameters) throws ApiException {
        okhttp3.Call localVarCall = dataConnectionsDataConnectionValidationValidateBeforeCall(resourceGroupName, clusterName, databaseName, apiVersion, subscriptionId, parameters, null);
        Type localVarReturnType = new TypeToken<DataConnectionValidationListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Checks that the data connection parameters are valid.
     * @param resourceGroupName The name of the resource group containing the Kusto cluster. (required)
     * @param clusterName The name of the Kusto cluster. (required)
     * @param databaseName The name of the database in the Kusto cluster. (required)
     * @param apiVersion Client API Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters The data connection parameters supplied to the CreateOrUpdate operation. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- Operation to check the kusto resource name availability was successful. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataConnectionsDataConnectionValidationAsync(String resourceGroupName, String clusterName, String databaseName, String apiVersion, String subscriptionId, DataConnectionValidation parameters, final ApiCallback<DataConnectionValidationListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = dataConnectionsDataConnectionValidationValidateBeforeCall(resourceGroupName, clusterName, databaseName, apiVersion, subscriptionId, parameters, _callback);
        Type localVarReturnType = new TypeToken<DataConnectionValidationListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dataConnectionsDelete
     * @param resourceGroupName The name of the resource group containing the Kusto cluster. (required)
     * @param clusterName The name of the Kusto cluster. (required)
     * @param databaseName The name of the database in the Kusto cluster. (required)
     * @param dataConnectionName The name of the data connection. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API Version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted the data connection. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The specified data connection does not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataConnectionsDeleteCall(String resourceGroupName, String clusterName, String databaseName, String dataConnectionName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/databases/{databaseName}/dataConnections/{dataConnectionName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "clusterName" + "}", localVarApiClient.escapeString(clusterName.toString()))
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()))
            .replace("{" + "dataConnectionName" + "}", localVarApiClient.escapeString(dataConnectionName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dataConnectionsDeleteValidateBeforeCall(String resourceGroupName, String clusterName, String databaseName, String dataConnectionName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling dataConnectionsDelete(Async)");
        }

        // verify the required parameter 'clusterName' is set
        if (clusterName == null) {
            throw new ApiException("Missing the required parameter 'clusterName' when calling dataConnectionsDelete(Async)");
        }

        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling dataConnectionsDelete(Async)");
        }

        // verify the required parameter 'dataConnectionName' is set
        if (dataConnectionName == null) {
            throw new ApiException("Missing the required parameter 'dataConnectionName' when calling dataConnectionsDelete(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling dataConnectionsDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling dataConnectionsDelete(Async)");
        }

        return dataConnectionsDeleteCall(resourceGroupName, clusterName, databaseName, dataConnectionName, subscriptionId, apiVersion, _callback);

    }

    /**
     * 
     * Deletes the data connection with the given name.
     * @param resourceGroupName The name of the resource group containing the Kusto cluster. (required)
     * @param clusterName The name of the Kusto cluster. (required)
     * @param databaseName The name of the database in the Kusto cluster. (required)
     * @param dataConnectionName The name of the data connection. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API Version. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted the data connection. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The specified data connection does not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public void dataConnectionsDelete(String resourceGroupName, String clusterName, String databaseName, String dataConnectionName, String subscriptionId, String apiVersion) throws ApiException {
        dataConnectionsDeleteWithHttpInfo(resourceGroupName, clusterName, databaseName, dataConnectionName, subscriptionId, apiVersion);
    }

    /**
     * 
     * Deletes the data connection with the given name.
     * @param resourceGroupName The name of the resource group containing the Kusto cluster. (required)
     * @param clusterName The name of the Kusto cluster. (required)
     * @param databaseName The name of the database in the Kusto cluster. (required)
     * @param dataConnectionName The name of the data connection. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API Version. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted the data connection. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The specified data connection does not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dataConnectionsDeleteWithHttpInfo(String resourceGroupName, String clusterName, String databaseName, String dataConnectionName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = dataConnectionsDeleteValidateBeforeCall(resourceGroupName, clusterName, databaseName, dataConnectionName, subscriptionId, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes the data connection with the given name.
     * @param resourceGroupName The name of the resource group containing the Kusto cluster. (required)
     * @param clusterName The name of the Kusto cluster. (required)
     * @param databaseName The name of the database in the Kusto cluster. (required)
     * @param dataConnectionName The name of the data connection. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API Version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted the data connection. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The specified data connection does not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataConnectionsDeleteAsync(String resourceGroupName, String clusterName, String databaseName, String dataConnectionName, String subscriptionId, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dataConnectionsDeleteValidateBeforeCall(resourceGroupName, clusterName, databaseName, dataConnectionName, subscriptionId, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dataConnectionsGet
     * @param resourceGroupName The name of the resource group containing the Kusto cluster. (required)
     * @param clusterName The name of the Kusto cluster. (required)
     * @param databaseName The name of the database in the Kusto cluster. (required)
     * @param dataConnectionName The name of the data connection. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API Version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the specified data connection. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataConnectionsGetCall(String resourceGroupName, String clusterName, String databaseName, String dataConnectionName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/databases/{databaseName}/dataConnections/{dataConnectionName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "clusterName" + "}", localVarApiClient.escapeString(clusterName.toString()))
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()))
            .replace("{" + "dataConnectionName" + "}", localVarApiClient.escapeString(dataConnectionName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dataConnectionsGetValidateBeforeCall(String resourceGroupName, String clusterName, String databaseName, String dataConnectionName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling dataConnectionsGet(Async)");
        }

        // verify the required parameter 'clusterName' is set
        if (clusterName == null) {
            throw new ApiException("Missing the required parameter 'clusterName' when calling dataConnectionsGet(Async)");
        }

        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling dataConnectionsGet(Async)");
        }

        // verify the required parameter 'dataConnectionName' is set
        if (dataConnectionName == null) {
            throw new ApiException("Missing the required parameter 'dataConnectionName' when calling dataConnectionsGet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling dataConnectionsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling dataConnectionsGet(Async)");
        }

        return dataConnectionsGetCall(resourceGroupName, clusterName, databaseName, dataConnectionName, subscriptionId, apiVersion, _callback);

    }

    /**
     * 
     * Returns a data connection.
     * @param resourceGroupName The name of the resource group containing the Kusto cluster. (required)
     * @param clusterName The name of the Kusto cluster. (required)
     * @param databaseName The name of the database in the Kusto cluster. (required)
     * @param dataConnectionName The name of the data connection. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API Version. (required)
     * @return DataConnection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the specified data connection. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public DataConnection dataConnectionsGet(String resourceGroupName, String clusterName, String databaseName, String dataConnectionName, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<DataConnection> localVarResp = dataConnectionsGetWithHttpInfo(resourceGroupName, clusterName, databaseName, dataConnectionName, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a data connection.
     * @param resourceGroupName The name of the resource group containing the Kusto cluster. (required)
     * @param clusterName The name of the Kusto cluster. (required)
     * @param databaseName The name of the database in the Kusto cluster. (required)
     * @param dataConnectionName The name of the data connection. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API Version. (required)
     * @return ApiResponse&lt;DataConnection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the specified data connection. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataConnection> dataConnectionsGetWithHttpInfo(String resourceGroupName, String clusterName, String databaseName, String dataConnectionName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = dataConnectionsGetValidateBeforeCall(resourceGroupName, clusterName, databaseName, dataConnectionName, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<DataConnection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a data connection.
     * @param resourceGroupName The name of the resource group containing the Kusto cluster. (required)
     * @param clusterName The name of the Kusto cluster. (required)
     * @param databaseName The name of the database in the Kusto cluster. (required)
     * @param dataConnectionName The name of the data connection. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API Version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the specified data connection. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataConnectionsGetAsync(String resourceGroupName, String clusterName, String databaseName, String dataConnectionName, String subscriptionId, String apiVersion, final ApiCallback<DataConnection> _callback) throws ApiException {

        okhttp3.Call localVarCall = dataConnectionsGetValidateBeforeCall(resourceGroupName, clusterName, databaseName, dataConnectionName, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<DataConnection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dataConnectionsListByDatabase
     * @param resourceGroupName The name of the resource group containing the Kusto cluster. (required)
     * @param clusterName The name of the Kusto cluster. (required)
     * @param databaseName The name of the database in the Kusto cluster. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API Version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of data connections. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataConnectionsListByDatabaseCall(String resourceGroupName, String clusterName, String databaseName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/databases/{databaseName}/dataConnections"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "clusterName" + "}", localVarApiClient.escapeString(clusterName.toString()))
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dataConnectionsListByDatabaseValidateBeforeCall(String resourceGroupName, String clusterName, String databaseName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling dataConnectionsListByDatabase(Async)");
        }

        // verify the required parameter 'clusterName' is set
        if (clusterName == null) {
            throw new ApiException("Missing the required parameter 'clusterName' when calling dataConnectionsListByDatabase(Async)");
        }

        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling dataConnectionsListByDatabase(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling dataConnectionsListByDatabase(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling dataConnectionsListByDatabase(Async)");
        }

        return dataConnectionsListByDatabaseCall(resourceGroupName, clusterName, databaseName, subscriptionId, apiVersion, _callback);

    }

    /**
     * 
     * Returns the list of data connections of the given Kusto database.
     * @param resourceGroupName The name of the resource group containing the Kusto cluster. (required)
     * @param clusterName The name of the Kusto cluster. (required)
     * @param databaseName The name of the database in the Kusto cluster. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API Version. (required)
     * @return DataConnectionListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of data connections. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public DataConnectionListResult dataConnectionsListByDatabase(String resourceGroupName, String clusterName, String databaseName, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<DataConnectionListResult> localVarResp = dataConnectionsListByDatabaseWithHttpInfo(resourceGroupName, clusterName, databaseName, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns the list of data connections of the given Kusto database.
     * @param resourceGroupName The name of the resource group containing the Kusto cluster. (required)
     * @param clusterName The name of the Kusto cluster. (required)
     * @param databaseName The name of the database in the Kusto cluster. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API Version. (required)
     * @return ApiResponse&lt;DataConnectionListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of data connections. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataConnectionListResult> dataConnectionsListByDatabaseWithHttpInfo(String resourceGroupName, String clusterName, String databaseName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = dataConnectionsListByDatabaseValidateBeforeCall(resourceGroupName, clusterName, databaseName, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<DataConnectionListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the list of data connections of the given Kusto database.
     * @param resourceGroupName The name of the resource group containing the Kusto cluster. (required)
     * @param clusterName The name of the Kusto cluster. (required)
     * @param databaseName The name of the database in the Kusto cluster. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API Version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of data connections. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataConnectionsListByDatabaseAsync(String resourceGroupName, String clusterName, String databaseName, String subscriptionId, String apiVersion, final ApiCallback<DataConnectionListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = dataConnectionsListByDatabaseValidateBeforeCall(resourceGroupName, clusterName, databaseName, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<DataConnectionListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dataConnectionsUpdate
     * @param resourceGroupName The name of the resource group containing the Kusto cluster. (required)
     * @param clusterName The name of the Kusto cluster. (required)
     * @param databaseName The name of the database in the Kusto cluster. (required)
     * @param dataConnectionName The name of the data connection. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API Version. (required)
     * @param parameters The data connection parameters supplied to the Update operation. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the data connection. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Successfully updated the data connection. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted the update data connection request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataConnectionsUpdateCall(String resourceGroupName, String clusterName, String databaseName, String dataConnectionName, String subscriptionId, String apiVersion, DataConnection parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/databases/{databaseName}/dataConnections/{dataConnectionName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "clusterName" + "}", localVarApiClient.escapeString(clusterName.toString()))
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()))
            .replace("{" + "dataConnectionName" + "}", localVarApiClient.escapeString(dataConnectionName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dataConnectionsUpdateValidateBeforeCall(String resourceGroupName, String clusterName, String databaseName, String dataConnectionName, String subscriptionId, String apiVersion, DataConnection parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling dataConnectionsUpdate(Async)");
        }

        // verify the required parameter 'clusterName' is set
        if (clusterName == null) {
            throw new ApiException("Missing the required parameter 'clusterName' when calling dataConnectionsUpdate(Async)");
        }

        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling dataConnectionsUpdate(Async)");
        }

        // verify the required parameter 'dataConnectionName' is set
        if (dataConnectionName == null) {
            throw new ApiException("Missing the required parameter 'dataConnectionName' when calling dataConnectionsUpdate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling dataConnectionsUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling dataConnectionsUpdate(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling dataConnectionsUpdate(Async)");
        }

        return dataConnectionsUpdateCall(resourceGroupName, clusterName, databaseName, dataConnectionName, subscriptionId, apiVersion, parameters, _callback);

    }

    /**
     * 
     * Updates a data connection.
     * @param resourceGroupName The name of the resource group containing the Kusto cluster. (required)
     * @param clusterName The name of the Kusto cluster. (required)
     * @param databaseName The name of the database in the Kusto cluster. (required)
     * @param dataConnectionName The name of the data connection. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API Version. (required)
     * @param parameters The data connection parameters supplied to the Update operation. (required)
     * @return DataConnection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the data connection. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Successfully updated the data connection. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted the update data connection request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public DataConnection dataConnectionsUpdate(String resourceGroupName, String clusterName, String databaseName, String dataConnectionName, String subscriptionId, String apiVersion, DataConnection parameters) throws ApiException {
        ApiResponse<DataConnection> localVarResp = dataConnectionsUpdateWithHttpInfo(resourceGroupName, clusterName, databaseName, dataConnectionName, subscriptionId, apiVersion, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates a data connection.
     * @param resourceGroupName The name of the resource group containing the Kusto cluster. (required)
     * @param clusterName The name of the Kusto cluster. (required)
     * @param databaseName The name of the database in the Kusto cluster. (required)
     * @param dataConnectionName The name of the data connection. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API Version. (required)
     * @param parameters The data connection parameters supplied to the Update operation. (required)
     * @return ApiResponse&lt;DataConnection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the data connection. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Successfully updated the data connection. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted the update data connection request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataConnection> dataConnectionsUpdateWithHttpInfo(String resourceGroupName, String clusterName, String databaseName, String dataConnectionName, String subscriptionId, String apiVersion, DataConnection parameters) throws ApiException {
        okhttp3.Call localVarCall = dataConnectionsUpdateValidateBeforeCall(resourceGroupName, clusterName, databaseName, dataConnectionName, subscriptionId, apiVersion, parameters, null);
        Type localVarReturnType = new TypeToken<DataConnection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates a data connection.
     * @param resourceGroupName The name of the resource group containing the Kusto cluster. (required)
     * @param clusterName The name of the Kusto cluster. (required)
     * @param databaseName The name of the database in the Kusto cluster. (required)
     * @param dataConnectionName The name of the data connection. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API Version. (required)
     * @param parameters The data connection parameters supplied to the Update operation. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the data connection. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Successfully updated the data connection. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted the update data connection request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataConnectionsUpdateAsync(String resourceGroupName, String clusterName, String databaseName, String dataConnectionName, String subscriptionId, String apiVersion, DataConnection parameters, final ApiCallback<DataConnection> _callback) throws ApiException {

        okhttp3.Call localVarCall = dataConnectionsUpdateValidateBeforeCall(resourceGroupName, clusterName, databaseName, dataConnectionName, subscriptionId, apiVersion, parameters, _callback);
        Type localVarReturnType = new TypeToken<DataConnection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
