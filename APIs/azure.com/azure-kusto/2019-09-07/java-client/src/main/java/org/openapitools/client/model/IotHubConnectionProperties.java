/*
 * KustoManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-09-07
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DataFormat;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Class representing the Kusto iot hub connection properties.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:20:01.335091-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class IotHubConnectionProperties {
  public static final String SERIALIZED_NAME_CONSUMER_GROUP = "consumerGroup";
  @SerializedName(SERIALIZED_NAME_CONSUMER_GROUP)
  private String consumerGroup;

  public static final String SERIALIZED_NAME_DATA_FORMAT = "dataFormat";
  @SerializedName(SERIALIZED_NAME_DATA_FORMAT)
  private DataFormat dataFormat;

  public static final String SERIALIZED_NAME_EVENT_SYSTEM_PROPERTIES = "eventSystemProperties";
  @SerializedName(SERIALIZED_NAME_EVENT_SYSTEM_PROPERTIES)
  private List<String> eventSystemProperties = new ArrayList<>();

  public static final String SERIALIZED_NAME_IOT_HUB_RESOURCE_ID = "iotHubResourceId";
  @SerializedName(SERIALIZED_NAME_IOT_HUB_RESOURCE_ID)
  private String iotHubResourceId;

  public static final String SERIALIZED_NAME_MAPPING_RULE_NAME = "mappingRuleName";
  @SerializedName(SERIALIZED_NAME_MAPPING_RULE_NAME)
  private String mappingRuleName;

  public static final String SERIALIZED_NAME_SHARED_ACCESS_POLICY_NAME = "sharedAccessPolicyName";
  @SerializedName(SERIALIZED_NAME_SHARED_ACCESS_POLICY_NAME)
  private String sharedAccessPolicyName;

  public static final String SERIALIZED_NAME_TABLE_NAME = "tableName";
  @SerializedName(SERIALIZED_NAME_TABLE_NAME)
  private String tableName;

  public IotHubConnectionProperties() {
  }

  public IotHubConnectionProperties consumerGroup(String consumerGroup) {
    this.consumerGroup = consumerGroup;
    return this;
  }

  /**
   * The iot hub consumer group.
   * @return consumerGroup
   */
  @javax.annotation.Nonnull
  public String getConsumerGroup() {
    return consumerGroup;
  }

  public void setConsumerGroup(String consumerGroup) {
    this.consumerGroup = consumerGroup;
  }


  public IotHubConnectionProperties dataFormat(DataFormat dataFormat) {
    this.dataFormat = dataFormat;
    return this;
  }

  /**
   * Get dataFormat
   * @return dataFormat
   */
  @javax.annotation.Nullable
  public DataFormat getDataFormat() {
    return dataFormat;
  }

  public void setDataFormat(DataFormat dataFormat) {
    this.dataFormat = dataFormat;
  }


  public IotHubConnectionProperties eventSystemProperties(List<String> eventSystemProperties) {
    this.eventSystemProperties = eventSystemProperties;
    return this;
  }

  public IotHubConnectionProperties addEventSystemPropertiesItem(String eventSystemPropertiesItem) {
    if (this.eventSystemProperties == null) {
      this.eventSystemProperties = new ArrayList<>();
    }
    this.eventSystemProperties.add(eventSystemPropertiesItem);
    return this;
  }

  /**
   * System properties of the iot hub
   * @return eventSystemProperties
   */
  @javax.annotation.Nullable
  public List<String> getEventSystemProperties() {
    return eventSystemProperties;
  }

  public void setEventSystemProperties(List<String> eventSystemProperties) {
    this.eventSystemProperties = eventSystemProperties;
  }


  public IotHubConnectionProperties iotHubResourceId(String iotHubResourceId) {
    this.iotHubResourceId = iotHubResourceId;
    return this;
  }

  /**
   * The resource ID of the Iot hub to be used to create a data connection.
   * @return iotHubResourceId
   */
  @javax.annotation.Nonnull
  public String getIotHubResourceId() {
    return iotHubResourceId;
  }

  public void setIotHubResourceId(String iotHubResourceId) {
    this.iotHubResourceId = iotHubResourceId;
  }


  public IotHubConnectionProperties mappingRuleName(String mappingRuleName) {
    this.mappingRuleName = mappingRuleName;
    return this;
  }

  /**
   * The mapping rule to be used to ingest the data. Optionally the mapping information can be added to each message.
   * @return mappingRuleName
   */
  @javax.annotation.Nullable
  public String getMappingRuleName() {
    return mappingRuleName;
  }

  public void setMappingRuleName(String mappingRuleName) {
    this.mappingRuleName = mappingRuleName;
  }


  public IotHubConnectionProperties sharedAccessPolicyName(String sharedAccessPolicyName) {
    this.sharedAccessPolicyName = sharedAccessPolicyName;
    return this;
  }

  /**
   * The name of the share access policy name
   * @return sharedAccessPolicyName
   */
  @javax.annotation.Nonnull
  public String getSharedAccessPolicyName() {
    return sharedAccessPolicyName;
  }

  public void setSharedAccessPolicyName(String sharedAccessPolicyName) {
    this.sharedAccessPolicyName = sharedAccessPolicyName;
  }


  public IotHubConnectionProperties tableName(String tableName) {
    this.tableName = tableName;
    return this;
  }

  /**
   * The table where the data should be ingested. Optionally the table information can be added to each message.
   * @return tableName
   */
  @javax.annotation.Nullable
  public String getTableName() {
    return tableName;
  }

  public void setTableName(String tableName) {
    this.tableName = tableName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IotHubConnectionProperties iotHubConnectionProperties = (IotHubConnectionProperties) o;
    return Objects.equals(this.consumerGroup, iotHubConnectionProperties.consumerGroup) &&
        Objects.equals(this.dataFormat, iotHubConnectionProperties.dataFormat) &&
        Objects.equals(this.eventSystemProperties, iotHubConnectionProperties.eventSystemProperties) &&
        Objects.equals(this.iotHubResourceId, iotHubConnectionProperties.iotHubResourceId) &&
        Objects.equals(this.mappingRuleName, iotHubConnectionProperties.mappingRuleName) &&
        Objects.equals(this.sharedAccessPolicyName, iotHubConnectionProperties.sharedAccessPolicyName) &&
        Objects.equals(this.tableName, iotHubConnectionProperties.tableName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(consumerGroup, dataFormat, eventSystemProperties, iotHubResourceId, mappingRuleName, sharedAccessPolicyName, tableName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IotHubConnectionProperties {\n");
    sb.append("    consumerGroup: ").append(toIndentedString(consumerGroup)).append("\n");
    sb.append("    dataFormat: ").append(toIndentedString(dataFormat)).append("\n");
    sb.append("    eventSystemProperties: ").append(toIndentedString(eventSystemProperties)).append("\n");
    sb.append("    iotHubResourceId: ").append(toIndentedString(iotHubResourceId)).append("\n");
    sb.append("    mappingRuleName: ").append(toIndentedString(mappingRuleName)).append("\n");
    sb.append("    sharedAccessPolicyName: ").append(toIndentedString(sharedAccessPolicyName)).append("\n");
    sb.append("    tableName: ").append(toIndentedString(tableName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("consumerGroup");
    openapiFields.add("dataFormat");
    openapiFields.add("eventSystemProperties");
    openapiFields.add("iotHubResourceId");
    openapiFields.add("mappingRuleName");
    openapiFields.add("sharedAccessPolicyName");
    openapiFields.add("tableName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("consumerGroup");
    openapiRequiredFields.add("iotHubResourceId");
    openapiRequiredFields.add("sharedAccessPolicyName");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IotHubConnectionProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IotHubConnectionProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IotHubConnectionProperties is not found in the empty JSON string", IotHubConnectionProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IotHubConnectionProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IotHubConnectionProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : IotHubConnectionProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("consumerGroup").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `consumerGroup` to be a primitive type in the JSON string but got `%s`", jsonObj.get("consumerGroup").toString()));
      }
      // validate the optional field `dataFormat`
      if (jsonObj.get("dataFormat") != null && !jsonObj.get("dataFormat").isJsonNull()) {
        DataFormat.validateJsonElement(jsonObj.get("dataFormat"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("eventSystemProperties") != null && !jsonObj.get("eventSystemProperties").isJsonNull() && !jsonObj.get("eventSystemProperties").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `eventSystemProperties` to be an array in the JSON string but got `%s`", jsonObj.get("eventSystemProperties").toString()));
      }
      if (!jsonObj.get("iotHubResourceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `iotHubResourceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("iotHubResourceId").toString()));
      }
      if ((jsonObj.get("mappingRuleName") != null && !jsonObj.get("mappingRuleName").isJsonNull()) && !jsonObj.get("mappingRuleName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mappingRuleName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mappingRuleName").toString()));
      }
      if (!jsonObj.get("sharedAccessPolicyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sharedAccessPolicyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sharedAccessPolicyName").toString()));
      }
      if ((jsonObj.get("tableName") != null && !jsonObj.get("tableName").isJsonNull()) && !jsonObj.get("tableName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tableName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tableName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IotHubConnectionProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IotHubConnectionProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IotHubConnectionProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IotHubConnectionProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<IotHubConnectionProperties>() {
           @Override
           public void write(JsonWriter out, IotHubConnectionProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IotHubConnectionProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IotHubConnectionProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IotHubConnectionProperties
   * @throws IOException if the JSON string is invalid with respect to IotHubConnectionProperties
   */
  public static IotHubConnectionProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IotHubConnectionProperties.class);
  }

  /**
   * Convert an instance of IotHubConnectionProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

