/**
 * KustoManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-09-07
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The KeyVaultProperties model module.
 * @module model/KeyVaultProperties
 * @version 2019-09-07
 */
class KeyVaultProperties {
    /**
     * Constructs a new <code>KeyVaultProperties</code>.
     * Properties of the key vault.
     * @alias module:model/KeyVaultProperties
     * @param keyName {String} The name of the key vault key.
     * @param keyVaultUri {String} The Uri of the key vault.
     * @param keyVersion {String} The version of the key vault key.
     */
    constructor(keyName, keyVaultUri, keyVersion) { 
        
        KeyVaultProperties.initialize(this, keyName, keyVaultUri, keyVersion);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, keyName, keyVaultUri, keyVersion) { 
        obj['keyName'] = keyName;
        obj['keyVaultUri'] = keyVaultUri;
        obj['keyVersion'] = keyVersion;
    }

    /**
     * Constructs a <code>KeyVaultProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/KeyVaultProperties} obj Optional instance to populate.
     * @return {module:model/KeyVaultProperties} The populated <code>KeyVaultProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new KeyVaultProperties();

            if (data.hasOwnProperty('keyName')) {
                obj['keyName'] = ApiClient.convertToType(data['keyName'], 'String');
            }
            if (data.hasOwnProperty('keyVaultUri')) {
                obj['keyVaultUri'] = ApiClient.convertToType(data['keyVaultUri'], 'String');
            }
            if (data.hasOwnProperty('keyVersion')) {
                obj['keyVersion'] = ApiClient.convertToType(data['keyVersion'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>KeyVaultProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>KeyVaultProperties</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of KeyVaultProperties.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['keyName'] && !(typeof data['keyName'] === 'string' || data['keyName'] instanceof String)) {
            throw new Error("Expected the field `keyName` to be a primitive type in the JSON string but got " + data['keyName']);
        }
        // ensure the json data is a string
        if (data['keyVaultUri'] && !(typeof data['keyVaultUri'] === 'string' || data['keyVaultUri'] instanceof String)) {
            throw new Error("Expected the field `keyVaultUri` to be a primitive type in the JSON string but got " + data['keyVaultUri']);
        }
        // ensure the json data is a string
        if (data['keyVersion'] && !(typeof data['keyVersion'] === 'string' || data['keyVersion'] instanceof String)) {
            throw new Error("Expected the field `keyVersion` to be a primitive type in the JSON string but got " + data['keyVersion']);
        }

        return true;
    }


}

KeyVaultProperties.RequiredProperties = ["keyName", "keyVaultUri", "keyVersion"];

/**
 * The name of the key vault key.
 * @member {String} keyName
 */
KeyVaultProperties.prototype['keyName'] = undefined;

/**
 * The Uri of the key vault.
 * @member {String} keyVaultUri
 */
KeyVaultProperties.prototype['keyVaultUri'] = undefined;

/**
 * The version of the key vault key.
 * @member {String} keyVersion
 */
KeyVaultProperties.prototype['keyVersion'] = undefined;






export default KeyVaultProperties;

