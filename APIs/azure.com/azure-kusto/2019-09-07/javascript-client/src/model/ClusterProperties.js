/**
 * KustoManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-09-07
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import KeyVaultProperties from './KeyVaultProperties';
import OptimizedAutoscale from './OptimizedAutoscale';
import TrustedExternalTenant from './TrustedExternalTenant';
import VirtualNetworkConfiguration from './VirtualNetworkConfiguration';

/**
 * The ClusterProperties model module.
 * @module model/ClusterProperties
 * @version 2019-09-07
 */
class ClusterProperties {
    /**
     * Constructs a new <code>ClusterProperties</code>.
     * Class representing the Kusto cluster properties.
     * @alias module:model/ClusterProperties
     */
    constructor() { 
        
        ClusterProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['enableStreamingIngest'] = false;
    }

    /**
     * Constructs a <code>ClusterProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ClusterProperties} obj Optional instance to populate.
     * @return {module:model/ClusterProperties} The populated <code>ClusterProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ClusterProperties();

            if (data.hasOwnProperty('dataIngestionUri')) {
                obj['dataIngestionUri'] = ApiClient.convertToType(data['dataIngestionUri'], 'String');
            }
            if (data.hasOwnProperty('enableDiskEncryption')) {
                obj['enableDiskEncryption'] = ApiClient.convertToType(data['enableDiskEncryption'], 'Boolean');
            }
            if (data.hasOwnProperty('enableStreamingIngest')) {
                obj['enableStreamingIngest'] = ApiClient.convertToType(data['enableStreamingIngest'], 'Boolean');
            }
            if (data.hasOwnProperty('keyVaultProperties')) {
                obj['keyVaultProperties'] = KeyVaultProperties.constructFromObject(data['keyVaultProperties']);
            }
            if (data.hasOwnProperty('optimizedAutoscale')) {
                obj['optimizedAutoscale'] = OptimizedAutoscale.constructFromObject(data['optimizedAutoscale']);
            }
            if (data.hasOwnProperty('provisioningState')) {
                obj['provisioningState'] = ApiClient.convertToType(data['provisioningState'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('trustedExternalTenants')) {
                obj['trustedExternalTenants'] = ApiClient.convertToType(data['trustedExternalTenants'], [TrustedExternalTenant]);
            }
            if (data.hasOwnProperty('uri')) {
                obj['uri'] = ApiClient.convertToType(data['uri'], 'String');
            }
            if (data.hasOwnProperty('virtualNetworkConfiguration')) {
                obj['virtualNetworkConfiguration'] = VirtualNetworkConfiguration.constructFromObject(data['virtualNetworkConfiguration']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ClusterProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ClusterProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['dataIngestionUri'] && !(typeof data['dataIngestionUri'] === 'string' || data['dataIngestionUri'] instanceof String)) {
            throw new Error("Expected the field `dataIngestionUri` to be a primitive type in the JSON string but got " + data['dataIngestionUri']);
        }
        // validate the optional field `keyVaultProperties`
        if (data['keyVaultProperties']) { // data not null
          KeyVaultProperties.validateJSON(data['keyVaultProperties']);
        }
        // validate the optional field `optimizedAutoscale`
        if (data['optimizedAutoscale']) { // data not null
          OptimizedAutoscale.validateJSON(data['optimizedAutoscale']);
        }
        // ensure the json data is a string
        if (data['provisioningState'] && !(typeof data['provisioningState'] === 'string' || data['provisioningState'] instanceof String)) {
            throw new Error("Expected the field `provisioningState` to be a primitive type in the JSON string but got " + data['provisioningState']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        if (data['trustedExternalTenants']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['trustedExternalTenants'])) {
                throw new Error("Expected the field `trustedExternalTenants` to be an array in the JSON data but got " + data['trustedExternalTenants']);
            }
            // validate the optional field `trustedExternalTenants` (array)
            for (const item of data['trustedExternalTenants']) {
                TrustedExternalTenant.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['uri'] && !(typeof data['uri'] === 'string' || data['uri'] instanceof String)) {
            throw new Error("Expected the field `uri` to be a primitive type in the JSON string but got " + data['uri']);
        }
        // validate the optional field `virtualNetworkConfiguration`
        if (data['virtualNetworkConfiguration']) { // data not null
          VirtualNetworkConfiguration.validateJSON(data['virtualNetworkConfiguration']);
        }

        return true;
    }


}



/**
 * The cluster data ingestion URI.
 * @member {String} dataIngestionUri
 */
ClusterProperties.prototype['dataIngestionUri'] = undefined;

/**
 * A boolean value that indicates if the cluster's disks are encrypted.
 * @member {Boolean} enableDiskEncryption
 */
ClusterProperties.prototype['enableDiskEncryption'] = undefined;

/**
 * A boolean value that indicates if the streaming ingest is enabled.
 * @member {Boolean} enableStreamingIngest
 * @default false
 */
ClusterProperties.prototype['enableStreamingIngest'] = false;

/**
 * @member {module:model/KeyVaultProperties} keyVaultProperties
 */
ClusterProperties.prototype['keyVaultProperties'] = undefined;

/**
 * @member {module:model/OptimizedAutoscale} optimizedAutoscale
 */
ClusterProperties.prototype['optimizedAutoscale'] = undefined;

/**
 * The provisioned state of the resource.
 * @member {module:model/ClusterProperties.ProvisioningStateEnum} provisioningState
 */
ClusterProperties.prototype['provisioningState'] = undefined;

/**
 * The state of the resource.
 * @member {module:model/ClusterProperties.StateEnum} state
 */
ClusterProperties.prototype['state'] = undefined;

/**
 * The cluster's external tenants.
 * @member {Array.<module:model/TrustedExternalTenant>} trustedExternalTenants
 */
ClusterProperties.prototype['trustedExternalTenants'] = undefined;

/**
 * The cluster URI.
 * @member {String} uri
 */
ClusterProperties.prototype['uri'] = undefined;

/**
 * @member {module:model/VirtualNetworkConfiguration} virtualNetworkConfiguration
 */
ClusterProperties.prototype['virtualNetworkConfiguration'] = undefined;





/**
 * Allowed values for the <code>provisioningState</code> property.
 * @enum {String}
 * @readonly
 */
ClusterProperties['ProvisioningStateEnum'] = {

    /**
     * value: "Running"
     * @const
     */
    "Running": "Running",

    /**
     * value: "Creating"
     * @const
     */
    "Creating": "Creating",

    /**
     * value: "Deleting"
     * @const
     */
    "Deleting": "Deleting",

    /**
     * value: "Succeeded"
     * @const
     */
    "Succeeded": "Succeeded",

    /**
     * value: "Failed"
     * @const
     */
    "Failed": "Failed",

    /**
     * value: "Moving"
     * @const
     */
    "Moving": "Moving"
};


/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
ClusterProperties['StateEnum'] = {

    /**
     * value: "Creating"
     * @const
     */
    "Creating": "Creating",

    /**
     * value: "Unavailable"
     * @const
     */
    "Unavailable": "Unavailable",

    /**
     * value: "Running"
     * @const
     */
    "Running": "Running",

    /**
     * value: "Deleting"
     * @const
     */
    "Deleting": "Deleting",

    /**
     * value: "Deleted"
     * @const
     */
    "Deleted": "Deleted",

    /**
     * value: "Stopping"
     * @const
     */
    "Stopping": "Stopping",

    /**
     * value: "Stopped"
     * @const
     */
    "Stopped": "Stopped",

    /**
     * value: "Starting"
     * @const
     */
    "Starting": "Starting",

    /**
     * value: "Updating"
     * @const
     */
    "Updating": "Updating"
};



export default ClusterProperties;

