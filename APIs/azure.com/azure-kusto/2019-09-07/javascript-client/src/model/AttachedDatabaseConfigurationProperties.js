/**
 * KustoManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-09-07
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AttachedDatabaseConfigurationProperties model module.
 * @module model/AttachedDatabaseConfigurationProperties
 * @version 2019-09-07
 */
class AttachedDatabaseConfigurationProperties {
    /**
     * Constructs a new <code>AttachedDatabaseConfigurationProperties</code>.
     * Class representing the an attached database configuration properties of kind specific.
     * @alias module:model/AttachedDatabaseConfigurationProperties
     * @param clusterResourceId {String} The resource id of the cluster where the databases you would like to attach reside.
     * @param databaseName {String} The name of the database which you would like to attach, use * if you want to follow all current and future databases.
     * @param defaultPrincipalsModificationKind {module:model/AttachedDatabaseConfigurationProperties.DefaultPrincipalsModificationKindEnum} The default principals modification kind
     */
    constructor(clusterResourceId, databaseName, defaultPrincipalsModificationKind) { 
        
        AttachedDatabaseConfigurationProperties.initialize(this, clusterResourceId, databaseName, defaultPrincipalsModificationKind);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, clusterResourceId, databaseName, defaultPrincipalsModificationKind) { 
        obj['clusterResourceId'] = clusterResourceId;
        obj['databaseName'] = databaseName;
        obj['defaultPrincipalsModificationKind'] = defaultPrincipalsModificationKind;
    }

    /**
     * Constructs a <code>AttachedDatabaseConfigurationProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AttachedDatabaseConfigurationProperties} obj Optional instance to populate.
     * @return {module:model/AttachedDatabaseConfigurationProperties} The populated <code>AttachedDatabaseConfigurationProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AttachedDatabaseConfigurationProperties();

            if (data.hasOwnProperty('attachedDatabaseNames')) {
                obj['attachedDatabaseNames'] = ApiClient.convertToType(data['attachedDatabaseNames'], ['String']);
            }
            if (data.hasOwnProperty('clusterResourceId')) {
                obj['clusterResourceId'] = ApiClient.convertToType(data['clusterResourceId'], 'String');
            }
            if (data.hasOwnProperty('databaseName')) {
                obj['databaseName'] = ApiClient.convertToType(data['databaseName'], 'String');
            }
            if (data.hasOwnProperty('defaultPrincipalsModificationKind')) {
                obj['defaultPrincipalsModificationKind'] = ApiClient.convertToType(data['defaultPrincipalsModificationKind'], 'String');
            }
            if (data.hasOwnProperty('provisioningState')) {
                obj['provisioningState'] = ApiClient.convertToType(data['provisioningState'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AttachedDatabaseConfigurationProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AttachedDatabaseConfigurationProperties</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AttachedDatabaseConfigurationProperties.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['attachedDatabaseNames'])) {
            throw new Error("Expected the field `attachedDatabaseNames` to be an array in the JSON data but got " + data['attachedDatabaseNames']);
        }
        // ensure the json data is a string
        if (data['clusterResourceId'] && !(typeof data['clusterResourceId'] === 'string' || data['clusterResourceId'] instanceof String)) {
            throw new Error("Expected the field `clusterResourceId` to be a primitive type in the JSON string but got " + data['clusterResourceId']);
        }
        // ensure the json data is a string
        if (data['databaseName'] && !(typeof data['databaseName'] === 'string' || data['databaseName'] instanceof String)) {
            throw new Error("Expected the field `databaseName` to be a primitive type in the JSON string but got " + data['databaseName']);
        }
        // ensure the json data is a string
        if (data['defaultPrincipalsModificationKind'] && !(typeof data['defaultPrincipalsModificationKind'] === 'string' || data['defaultPrincipalsModificationKind'] instanceof String)) {
            throw new Error("Expected the field `defaultPrincipalsModificationKind` to be a primitive type in the JSON string but got " + data['defaultPrincipalsModificationKind']);
        }
        // ensure the json data is a string
        if (data['provisioningState'] && !(typeof data['provisioningState'] === 'string' || data['provisioningState'] instanceof String)) {
            throw new Error("Expected the field `provisioningState` to be a primitive type in the JSON string but got " + data['provisioningState']);
        }

        return true;
    }


}

AttachedDatabaseConfigurationProperties.RequiredProperties = ["clusterResourceId", "databaseName", "defaultPrincipalsModificationKind"];

/**
 * The list of databases from the clusterResourceId which are currently attached to the cluster.
 * @member {Array.<String>} attachedDatabaseNames
 */
AttachedDatabaseConfigurationProperties.prototype['attachedDatabaseNames'] = undefined;

/**
 * The resource id of the cluster where the databases you would like to attach reside.
 * @member {String} clusterResourceId
 */
AttachedDatabaseConfigurationProperties.prototype['clusterResourceId'] = undefined;

/**
 * The name of the database which you would like to attach, use * if you want to follow all current and future databases.
 * @member {String} databaseName
 */
AttachedDatabaseConfigurationProperties.prototype['databaseName'] = undefined;

/**
 * The default principals modification kind
 * @member {module:model/AttachedDatabaseConfigurationProperties.DefaultPrincipalsModificationKindEnum} defaultPrincipalsModificationKind
 */
AttachedDatabaseConfigurationProperties.prototype['defaultPrincipalsModificationKind'] = undefined;

/**
 * The provisioned state of the resource.
 * @member {module:model/AttachedDatabaseConfigurationProperties.ProvisioningStateEnum} provisioningState
 */
AttachedDatabaseConfigurationProperties.prototype['provisioningState'] = undefined;





/**
 * Allowed values for the <code>defaultPrincipalsModificationKind</code> property.
 * @enum {String}
 * @readonly
 */
AttachedDatabaseConfigurationProperties['DefaultPrincipalsModificationKindEnum'] = {

    /**
     * value: "Union"
     * @const
     */
    "Union": "Union",

    /**
     * value: "Replace"
     * @const
     */
    "Replace": "Replace",

    /**
     * value: "None"
     * @const
     */
    "None": "None"
};


/**
 * Allowed values for the <code>provisioningState</code> property.
 * @enum {String}
 * @readonly
 */
AttachedDatabaseConfigurationProperties['ProvisioningStateEnum'] = {

    /**
     * value: "Running"
     * @const
     */
    "Running": "Running",

    /**
     * value: "Creating"
     * @const
     */
    "Creating": "Creating",

    /**
     * value: "Deleting"
     * @const
     */
    "Deleting": "Deleting",

    /**
     * value: "Succeeded"
     * @const
     */
    "Succeeded": "Succeeded",

    /**
     * value: "Failed"
     * @const
     */
    "Failed": "Failed",

    /**
     * value: "Moving"
     * @const
     */
    "Moving": "Moving"
};



export default AttachedDatabaseConfigurationProperties;

