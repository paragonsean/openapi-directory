/**
 * KustoManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-09-07
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DatabaseStatistics from './DatabaseStatistics';

/**
 * The ReadWriteDatabaseProperties model module.
 * @module model/ReadWriteDatabaseProperties
 * @version 2019-09-07
 */
class ReadWriteDatabaseProperties {
    /**
     * Constructs a new <code>ReadWriteDatabaseProperties</code>.
     * Class representing the Kusto database properties.
     * @alias module:model/ReadWriteDatabaseProperties
     */
    constructor() { 
        
        ReadWriteDatabaseProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ReadWriteDatabaseProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ReadWriteDatabaseProperties} obj Optional instance to populate.
     * @return {module:model/ReadWriteDatabaseProperties} The populated <code>ReadWriteDatabaseProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ReadWriteDatabaseProperties();

            if (data.hasOwnProperty('hotCachePeriod')) {
                obj['hotCachePeriod'] = ApiClient.convertToType(data['hotCachePeriod'], 'String');
            }
            if (data.hasOwnProperty('provisioningState')) {
                obj['provisioningState'] = ApiClient.convertToType(data['provisioningState'], 'String');
            }
            if (data.hasOwnProperty('softDeletePeriod')) {
                obj['softDeletePeriod'] = ApiClient.convertToType(data['softDeletePeriod'], 'String');
            }
            if (data.hasOwnProperty('statistics')) {
                obj['statistics'] = DatabaseStatistics.constructFromObject(data['statistics']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ReadWriteDatabaseProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ReadWriteDatabaseProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['hotCachePeriod'] && !(typeof data['hotCachePeriod'] === 'string' || data['hotCachePeriod'] instanceof String)) {
            throw new Error("Expected the field `hotCachePeriod` to be a primitive type in the JSON string but got " + data['hotCachePeriod']);
        }
        // ensure the json data is a string
        if (data['provisioningState'] && !(typeof data['provisioningState'] === 'string' || data['provisioningState'] instanceof String)) {
            throw new Error("Expected the field `provisioningState` to be a primitive type in the JSON string but got " + data['provisioningState']);
        }
        // ensure the json data is a string
        if (data['softDeletePeriod'] && !(typeof data['softDeletePeriod'] === 'string' || data['softDeletePeriod'] instanceof String)) {
            throw new Error("Expected the field `softDeletePeriod` to be a primitive type in the JSON string but got " + data['softDeletePeriod']);
        }
        // validate the optional field `statistics`
        if (data['statistics']) { // data not null
          DatabaseStatistics.validateJSON(data['statistics']);
        }

        return true;
    }


}



/**
 * The time the data should be kept in cache for fast queries in TimeSpan.
 * @member {String} hotCachePeriod
 */
ReadWriteDatabaseProperties.prototype['hotCachePeriod'] = undefined;

/**
 * The provisioned state of the resource.
 * @member {module:model/ReadWriteDatabaseProperties.ProvisioningStateEnum} provisioningState
 */
ReadWriteDatabaseProperties.prototype['provisioningState'] = undefined;

/**
 * The time the data should be kept before it stops being accessible to queries in TimeSpan.
 * @member {String} softDeletePeriod
 */
ReadWriteDatabaseProperties.prototype['softDeletePeriod'] = undefined;

/**
 * @member {module:model/DatabaseStatistics} statistics
 */
ReadWriteDatabaseProperties.prototype['statistics'] = undefined;





/**
 * Allowed values for the <code>provisioningState</code> property.
 * @enum {String}
 * @readonly
 */
ReadWriteDatabaseProperties['ProvisioningStateEnum'] = {

    /**
     * value: "Running"
     * @const
     */
    "Running": "Running",

    /**
     * value: "Creating"
     * @const
     */
    "Creating": "Creating",

    /**
     * value: "Deleting"
     * @const
     */
    "Deleting": "Deleting",

    /**
     * value: "Succeeded"
     * @const
     */
    "Succeeded": "Succeeded",

    /**
     * value: "Failed"
     * @const
     */
    "Failed": "Failed",

    /**
     * value: "Moving"
     * @const
     */
    "Moving": "Moving"
};



export default ReadWriteDatabaseProperties;

