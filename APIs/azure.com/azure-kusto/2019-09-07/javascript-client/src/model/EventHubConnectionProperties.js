/**
 * KustoManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-09-07
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DataFormat from './DataFormat';

/**
 * The EventHubConnectionProperties model module.
 * @module model/EventHubConnectionProperties
 * @version 2019-09-07
 */
class EventHubConnectionProperties {
    /**
     * Constructs a new <code>EventHubConnectionProperties</code>.
     * Class representing the Kusto event hub connection properties.
     * @alias module:model/EventHubConnectionProperties
     * @param consumerGroup {String} The event hub consumer group.
     * @param eventHubResourceId {String} The resource ID of the event hub to be used to create a data connection.
     */
    constructor(consumerGroup, eventHubResourceId) { 
        
        EventHubConnectionProperties.initialize(this, consumerGroup, eventHubResourceId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, consumerGroup, eventHubResourceId) { 
        obj['consumerGroup'] = consumerGroup;
        obj['eventHubResourceId'] = eventHubResourceId;
    }

    /**
     * Constructs a <code>EventHubConnectionProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EventHubConnectionProperties} obj Optional instance to populate.
     * @return {module:model/EventHubConnectionProperties} The populated <code>EventHubConnectionProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EventHubConnectionProperties();

            if (data.hasOwnProperty('consumerGroup')) {
                obj['consumerGroup'] = ApiClient.convertToType(data['consumerGroup'], 'String');
            }
            if (data.hasOwnProperty('dataFormat')) {
                obj['dataFormat'] = DataFormat.constructFromObject(data['dataFormat']);
            }
            if (data.hasOwnProperty('eventHubResourceId')) {
                obj['eventHubResourceId'] = ApiClient.convertToType(data['eventHubResourceId'], 'String');
            }
            if (data.hasOwnProperty('eventSystemProperties')) {
                obj['eventSystemProperties'] = ApiClient.convertToType(data['eventSystemProperties'], ['String']);
            }
            if (data.hasOwnProperty('mappingRuleName')) {
                obj['mappingRuleName'] = ApiClient.convertToType(data['mappingRuleName'], 'String');
            }
            if (data.hasOwnProperty('tableName')) {
                obj['tableName'] = ApiClient.convertToType(data['tableName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EventHubConnectionProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EventHubConnectionProperties</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of EventHubConnectionProperties.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['consumerGroup'] && !(typeof data['consumerGroup'] === 'string' || data['consumerGroup'] instanceof String)) {
            throw new Error("Expected the field `consumerGroup` to be a primitive type in the JSON string but got " + data['consumerGroup']);
        }
        // ensure the json data is a string
        if (data['eventHubResourceId'] && !(typeof data['eventHubResourceId'] === 'string' || data['eventHubResourceId'] instanceof String)) {
            throw new Error("Expected the field `eventHubResourceId` to be a primitive type in the JSON string but got " + data['eventHubResourceId']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['eventSystemProperties'])) {
            throw new Error("Expected the field `eventSystemProperties` to be an array in the JSON data but got " + data['eventSystemProperties']);
        }
        // ensure the json data is a string
        if (data['mappingRuleName'] && !(typeof data['mappingRuleName'] === 'string' || data['mappingRuleName'] instanceof String)) {
            throw new Error("Expected the field `mappingRuleName` to be a primitive type in the JSON string but got " + data['mappingRuleName']);
        }
        // ensure the json data is a string
        if (data['tableName'] && !(typeof data['tableName'] === 'string' || data['tableName'] instanceof String)) {
            throw new Error("Expected the field `tableName` to be a primitive type in the JSON string but got " + data['tableName']);
        }

        return true;
    }


}

EventHubConnectionProperties.RequiredProperties = ["consumerGroup", "eventHubResourceId"];

/**
 * The event hub consumer group.
 * @member {String} consumerGroup
 */
EventHubConnectionProperties.prototype['consumerGroup'] = undefined;

/**
 * @member {module:model/DataFormat} dataFormat
 */
EventHubConnectionProperties.prototype['dataFormat'] = undefined;

/**
 * The resource ID of the event hub to be used to create a data connection.
 * @member {String} eventHubResourceId
 */
EventHubConnectionProperties.prototype['eventHubResourceId'] = undefined;

/**
 * System properties of the event hub
 * @member {Array.<String>} eventSystemProperties
 */
EventHubConnectionProperties.prototype['eventSystemProperties'] = undefined;

/**
 * The mapping rule to be used to ingest the data. Optionally the mapping information can be added to each message.
 * @member {String} mappingRuleName
 */
EventHubConnectionProperties.prototype['mappingRuleName'] = undefined;

/**
 * The table where the data should be ingested. Optionally the table information can be added to each message.
 * @member {String} tableName
 */
EventHubConnectionProperties.prototype['tableName'] = undefined;






export default EventHubConnectionProperties;

