/**
 * KustoManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-09-07
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CheckNameResult from '../model/CheckNameResult';
import CloudError from '../model/CloudError';
import DataConnection from '../model/DataConnection';
import DataConnectionCheckNameRequest from '../model/DataConnectionCheckNameRequest';
import DataConnectionListResult from '../model/DataConnectionListResult';
import DataConnectionValidation from '../model/DataConnectionValidation';
import DataConnectionValidationListResult from '../model/DataConnectionValidationListResult';

/**
* DataConnections service.
* @module api/DataConnectionsApi
* @version 2019-09-07
*/
export default class DataConnectionsApi {

    /**
    * Constructs a new DataConnectionsApi. 
    * @alias module:api/DataConnectionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the dataConnectionsCheckNameAvailability operation.
     * @callback module:api/DataConnectionsApi~dataConnectionsCheckNameAvailabilityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CheckNameResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Checks that the data connection name is valid and is not already in use.
     * @param {String} resourceGroupName The name of the resource group containing the Kusto cluster.
     * @param {String} clusterName The name of the Kusto cluster.
     * @param {String} databaseName The name of the database in the Kusto cluster.
     * @param {String} apiVersion Client API Version.
     * @param {String} subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:model/DataConnectionCheckNameRequest} dataConnectionName The name of the data connection.
     * @param {module:api/DataConnectionsApi~dataConnectionsCheckNameAvailabilityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CheckNameResult}
     */
    dataConnectionsCheckNameAvailability(resourceGroupName, clusterName, databaseName, apiVersion, subscriptionId, dataConnectionName, callback) {
      let postBody = dataConnectionName;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling dataConnectionsCheckNameAvailability");
      }
      // verify the required parameter 'clusterName' is set
      if (clusterName === undefined || clusterName === null) {
        throw new Error("Missing the required parameter 'clusterName' when calling dataConnectionsCheckNameAvailability");
      }
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling dataConnectionsCheckNameAvailability");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling dataConnectionsCheckNameAvailability");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling dataConnectionsCheckNameAvailability");
      }
      // verify the required parameter 'dataConnectionName' is set
      if (dataConnectionName === undefined || dataConnectionName === null) {
        throw new Error("Missing the required parameter 'dataConnectionName' when calling dataConnectionsCheckNameAvailability");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'clusterName': clusterName,
        'databaseName': databaseName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CheckNameResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/databases/{databaseName}/checkNameAvailability', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dataConnectionsCreateOrUpdate operation.
     * @callback module:api/DataConnectionsApi~dataConnectionsCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DataConnection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates or updates a data connection.
     * @param {String} resourceGroupName The name of the resource group containing the Kusto cluster.
     * @param {String} clusterName The name of the Kusto cluster.
     * @param {String} databaseName The name of the database in the Kusto cluster.
     * @param {String} dataConnectionName The name of the data connection.
     * @param {String} subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} apiVersion Client API Version.
     * @param {module:model/DataConnection} parameters The data connection parameters supplied to the CreateOrUpdate operation.
     * @param {module:api/DataConnectionsApi~dataConnectionsCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DataConnection}
     */
    dataConnectionsCreateOrUpdate(resourceGroupName, clusterName, databaseName, dataConnectionName, subscriptionId, apiVersion, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling dataConnectionsCreateOrUpdate");
      }
      // verify the required parameter 'clusterName' is set
      if (clusterName === undefined || clusterName === null) {
        throw new Error("Missing the required parameter 'clusterName' when calling dataConnectionsCreateOrUpdate");
      }
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling dataConnectionsCreateOrUpdate");
      }
      // verify the required parameter 'dataConnectionName' is set
      if (dataConnectionName === undefined || dataConnectionName === null) {
        throw new Error("Missing the required parameter 'dataConnectionName' when calling dataConnectionsCreateOrUpdate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling dataConnectionsCreateOrUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling dataConnectionsCreateOrUpdate");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling dataConnectionsCreateOrUpdate");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'clusterName': clusterName,
        'databaseName': databaseName,
        'dataConnectionName': dataConnectionName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DataConnection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/databases/{databaseName}/dataConnections/{dataConnectionName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dataConnectionsDataConnectionValidation operation.
     * @callback module:api/DataConnectionsApi~dataConnectionsDataConnectionValidationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DataConnectionValidationListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Checks that the data connection parameters are valid.
     * @param {String} resourceGroupName The name of the resource group containing the Kusto cluster.
     * @param {String} clusterName The name of the Kusto cluster.
     * @param {String} databaseName The name of the database in the Kusto cluster.
     * @param {String} apiVersion Client API Version.
     * @param {String} subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:model/DataConnectionValidation} parameters The data connection parameters supplied to the CreateOrUpdate operation.
     * @param {module:api/DataConnectionsApi~dataConnectionsDataConnectionValidationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DataConnectionValidationListResult}
     */
    dataConnectionsDataConnectionValidation(resourceGroupName, clusterName, databaseName, apiVersion, subscriptionId, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling dataConnectionsDataConnectionValidation");
      }
      // verify the required parameter 'clusterName' is set
      if (clusterName === undefined || clusterName === null) {
        throw new Error("Missing the required parameter 'clusterName' when calling dataConnectionsDataConnectionValidation");
      }
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling dataConnectionsDataConnectionValidation");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling dataConnectionsDataConnectionValidation");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling dataConnectionsDataConnectionValidation");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling dataConnectionsDataConnectionValidation");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'clusterName': clusterName,
        'databaseName': databaseName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DataConnectionValidationListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/databases/{databaseName}/dataConnectionValidation', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dataConnectionsDelete operation.
     * @callback module:api/DataConnectionsApi~dataConnectionsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the data connection with the given name.
     * @param {String} resourceGroupName The name of the resource group containing the Kusto cluster.
     * @param {String} clusterName The name of the Kusto cluster.
     * @param {String} databaseName The name of the database in the Kusto cluster.
     * @param {String} dataConnectionName The name of the data connection.
     * @param {String} subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} apiVersion Client API Version.
     * @param {module:api/DataConnectionsApi~dataConnectionsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    dataConnectionsDelete(resourceGroupName, clusterName, databaseName, dataConnectionName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling dataConnectionsDelete");
      }
      // verify the required parameter 'clusterName' is set
      if (clusterName === undefined || clusterName === null) {
        throw new Error("Missing the required parameter 'clusterName' when calling dataConnectionsDelete");
      }
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling dataConnectionsDelete");
      }
      // verify the required parameter 'dataConnectionName' is set
      if (dataConnectionName === undefined || dataConnectionName === null) {
        throw new Error("Missing the required parameter 'dataConnectionName' when calling dataConnectionsDelete");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling dataConnectionsDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling dataConnectionsDelete");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'clusterName': clusterName,
        'databaseName': databaseName,
        'dataConnectionName': dataConnectionName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/databases/{databaseName}/dataConnections/{dataConnectionName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dataConnectionsGet operation.
     * @callback module:api/DataConnectionsApi~dataConnectionsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DataConnection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a data connection.
     * @param {String} resourceGroupName The name of the resource group containing the Kusto cluster.
     * @param {String} clusterName The name of the Kusto cluster.
     * @param {String} databaseName The name of the database in the Kusto cluster.
     * @param {String} dataConnectionName The name of the data connection.
     * @param {String} subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} apiVersion Client API Version.
     * @param {module:api/DataConnectionsApi~dataConnectionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DataConnection}
     */
    dataConnectionsGet(resourceGroupName, clusterName, databaseName, dataConnectionName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling dataConnectionsGet");
      }
      // verify the required parameter 'clusterName' is set
      if (clusterName === undefined || clusterName === null) {
        throw new Error("Missing the required parameter 'clusterName' when calling dataConnectionsGet");
      }
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling dataConnectionsGet");
      }
      // verify the required parameter 'dataConnectionName' is set
      if (dataConnectionName === undefined || dataConnectionName === null) {
        throw new Error("Missing the required parameter 'dataConnectionName' when calling dataConnectionsGet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling dataConnectionsGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling dataConnectionsGet");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'clusterName': clusterName,
        'databaseName': databaseName,
        'dataConnectionName': dataConnectionName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DataConnection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/databases/{databaseName}/dataConnections/{dataConnectionName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dataConnectionsListByDatabase operation.
     * @callback module:api/DataConnectionsApi~dataConnectionsListByDatabaseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DataConnectionListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the list of data connections of the given Kusto database.
     * @param {String} resourceGroupName The name of the resource group containing the Kusto cluster.
     * @param {String} clusterName The name of the Kusto cluster.
     * @param {String} databaseName The name of the database in the Kusto cluster.
     * @param {String} subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} apiVersion Client API Version.
     * @param {module:api/DataConnectionsApi~dataConnectionsListByDatabaseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DataConnectionListResult}
     */
    dataConnectionsListByDatabase(resourceGroupName, clusterName, databaseName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling dataConnectionsListByDatabase");
      }
      // verify the required parameter 'clusterName' is set
      if (clusterName === undefined || clusterName === null) {
        throw new Error("Missing the required parameter 'clusterName' when calling dataConnectionsListByDatabase");
      }
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling dataConnectionsListByDatabase");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling dataConnectionsListByDatabase");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling dataConnectionsListByDatabase");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'clusterName': clusterName,
        'databaseName': databaseName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DataConnectionListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/databases/{databaseName}/dataConnections', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dataConnectionsUpdate operation.
     * @callback module:api/DataConnectionsApi~dataConnectionsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DataConnection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a data connection.
     * @param {String} resourceGroupName The name of the resource group containing the Kusto cluster.
     * @param {String} clusterName The name of the Kusto cluster.
     * @param {String} databaseName The name of the database in the Kusto cluster.
     * @param {String} dataConnectionName The name of the data connection.
     * @param {String} subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} apiVersion Client API Version.
     * @param {module:model/DataConnection} parameters The data connection parameters supplied to the Update operation.
     * @param {module:api/DataConnectionsApi~dataConnectionsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DataConnection}
     */
    dataConnectionsUpdate(resourceGroupName, clusterName, databaseName, dataConnectionName, subscriptionId, apiVersion, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling dataConnectionsUpdate");
      }
      // verify the required parameter 'clusterName' is set
      if (clusterName === undefined || clusterName === null) {
        throw new Error("Missing the required parameter 'clusterName' when calling dataConnectionsUpdate");
      }
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling dataConnectionsUpdate");
      }
      // verify the required parameter 'dataConnectionName' is set
      if (dataConnectionName === undefined || dataConnectionName === null) {
        throw new Error("Missing the required parameter 'dataConnectionName' when calling dataConnectionsUpdate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling dataConnectionsUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling dataConnectionsUpdate");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling dataConnectionsUpdate");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'clusterName': clusterName,
        'databaseName': databaseName,
        'dataConnectionName': dataConnectionName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DataConnection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/databases/{databaseName}/dataConnections/{dataConnectionName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
