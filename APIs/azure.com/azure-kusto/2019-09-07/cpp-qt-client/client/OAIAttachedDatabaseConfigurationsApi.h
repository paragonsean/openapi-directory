/**
 * KustoManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-09-07
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAttachedDatabaseConfigurationsApi_H
#define OAI_OAIAttachedDatabaseConfigurationsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAttachedDatabaseConfiguration.h"
#include "OAIAttachedDatabaseConfigurationListResult.h"
#include "OAICloudError.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAttachedDatabaseConfigurationsApi : public QObject {
    Q_OBJECT

public:
    OAIAttachedDatabaseConfigurationsApi(const int timeOut = 0);
    ~OAIAttachedDatabaseConfigurationsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  cluster_name QString [required]
    * @param[in]  attached_database_configuration_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAIAttachedDatabaseConfiguration [required]
    */
    virtual void attachedDatabaseConfigurationsCreateOrUpdate(const QString &resource_group_name, const QString &cluster_name, const QString &attached_database_configuration_name, const QString &subscription_id, const QString &api_version, const OAIAttachedDatabaseConfiguration &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  cluster_name QString [required]
    * @param[in]  attached_database_configuration_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void attachedDatabaseConfigurationsDelete(const QString &resource_group_name, const QString &cluster_name, const QString &attached_database_configuration_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  cluster_name QString [required]
    * @param[in]  attached_database_configuration_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void attachedDatabaseConfigurationsGet(const QString &resource_group_name, const QString &cluster_name, const QString &attached_database_configuration_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  cluster_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void attachedDatabaseConfigurationsListByCluster(const QString &resource_group_name, const QString &cluster_name, const QString &subscription_id, const QString &api_version);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void attachedDatabaseConfigurationsCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void attachedDatabaseConfigurationsDeleteCallback(OAIHttpRequestWorker *worker);
    void attachedDatabaseConfigurationsGetCallback(OAIHttpRequestWorker *worker);
    void attachedDatabaseConfigurationsListByClusterCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void attachedDatabaseConfigurationsCreateOrUpdateSignal(OAIAttachedDatabaseConfiguration summary);
    void attachedDatabaseConfigurationsDeleteSignal();
    void attachedDatabaseConfigurationsGetSignal(OAIAttachedDatabaseConfiguration summary);
    void attachedDatabaseConfigurationsListByClusterSignal(OAIAttachedDatabaseConfigurationListResult summary);


    void attachedDatabaseConfigurationsCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIAttachedDatabaseConfiguration summary);
    void attachedDatabaseConfigurationsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void attachedDatabaseConfigurationsGetSignalFull(OAIHttpRequestWorker *worker, OAIAttachedDatabaseConfiguration summary);
    void attachedDatabaseConfigurationsListByClusterSignalFull(OAIHttpRequestWorker *worker, OAIAttachedDatabaseConfigurationListResult summary);

    Q_DECL_DEPRECATED_X("Use attachedDatabaseConfigurationsCreateOrUpdateSignalError() instead")
    void attachedDatabaseConfigurationsCreateOrUpdateSignalE(OAIAttachedDatabaseConfiguration summary, QNetworkReply::NetworkError error_type, QString error_str);
    void attachedDatabaseConfigurationsCreateOrUpdateSignalError(OAIAttachedDatabaseConfiguration summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use attachedDatabaseConfigurationsDeleteSignalError() instead")
    void attachedDatabaseConfigurationsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void attachedDatabaseConfigurationsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use attachedDatabaseConfigurationsGetSignalError() instead")
    void attachedDatabaseConfigurationsGetSignalE(OAIAttachedDatabaseConfiguration summary, QNetworkReply::NetworkError error_type, QString error_str);
    void attachedDatabaseConfigurationsGetSignalError(OAIAttachedDatabaseConfiguration summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use attachedDatabaseConfigurationsListByClusterSignalError() instead")
    void attachedDatabaseConfigurationsListByClusterSignalE(OAIAttachedDatabaseConfigurationListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void attachedDatabaseConfigurationsListByClusterSignalError(OAIAttachedDatabaseConfigurationListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use attachedDatabaseConfigurationsCreateOrUpdateSignalErrorFull() instead")
    void attachedDatabaseConfigurationsCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void attachedDatabaseConfigurationsCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use attachedDatabaseConfigurationsDeleteSignalErrorFull() instead")
    void attachedDatabaseConfigurationsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void attachedDatabaseConfigurationsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use attachedDatabaseConfigurationsGetSignalErrorFull() instead")
    void attachedDatabaseConfigurationsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void attachedDatabaseConfigurationsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use attachedDatabaseConfigurationsListByClusterSignalErrorFull() instead")
    void attachedDatabaseConfigurationsListByClusterSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void attachedDatabaseConfigurationsListByClusterSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
