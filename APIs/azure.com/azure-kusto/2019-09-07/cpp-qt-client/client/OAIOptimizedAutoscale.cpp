/**
 * KustoManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-09-07
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOptimizedAutoscale.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOptimizedAutoscale::OAIOptimizedAutoscale(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOptimizedAutoscale::OAIOptimizedAutoscale() {
    this->initializeModel();
}

OAIOptimizedAutoscale::~OAIOptimizedAutoscale() {}

void OAIOptimizedAutoscale::initializeModel() {

    m_is_enabled_isSet = false;
    m_is_enabled_isValid = false;

    m_maximum_isSet = false;
    m_maximum_isValid = false;

    m_minimum_isSet = false;
    m_minimum_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIOptimizedAutoscale::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOptimizedAutoscale::fromJsonObject(QJsonObject json) {

    m_is_enabled_isValid = ::OpenAPI::fromJsonValue(m_is_enabled, json[QString("isEnabled")]);
    m_is_enabled_isSet = !json[QString("isEnabled")].isNull() && m_is_enabled_isValid;

    m_maximum_isValid = ::OpenAPI::fromJsonValue(m_maximum, json[QString("maximum")]);
    m_maximum_isSet = !json[QString("maximum")].isNull() && m_maximum_isValid;

    m_minimum_isValid = ::OpenAPI::fromJsonValue(m_minimum, json[QString("minimum")]);
    m_minimum_isSet = !json[QString("minimum")].isNull() && m_minimum_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIOptimizedAutoscale::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOptimizedAutoscale::asJsonObject() const {
    QJsonObject obj;
    if (m_is_enabled_isSet) {
        obj.insert(QString("isEnabled"), ::OpenAPI::toJsonValue(m_is_enabled));
    }
    if (m_maximum_isSet) {
        obj.insert(QString("maximum"), ::OpenAPI::toJsonValue(m_maximum));
    }
    if (m_minimum_isSet) {
        obj.insert(QString("minimum"), ::OpenAPI::toJsonValue(m_minimum));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

bool OAIOptimizedAutoscale::isIsEnabled() const {
    return m_is_enabled;
}
void OAIOptimizedAutoscale::setIsEnabled(const bool &is_enabled) {
    m_is_enabled = is_enabled;
    m_is_enabled_isSet = true;
}

bool OAIOptimizedAutoscale::is_is_enabled_Set() const{
    return m_is_enabled_isSet;
}

bool OAIOptimizedAutoscale::is_is_enabled_Valid() const{
    return m_is_enabled_isValid;
}

qint32 OAIOptimizedAutoscale::getMaximum() const {
    return m_maximum;
}
void OAIOptimizedAutoscale::setMaximum(const qint32 &maximum) {
    m_maximum = maximum;
    m_maximum_isSet = true;
}

bool OAIOptimizedAutoscale::is_maximum_Set() const{
    return m_maximum_isSet;
}

bool OAIOptimizedAutoscale::is_maximum_Valid() const{
    return m_maximum_isValid;
}

qint32 OAIOptimizedAutoscale::getMinimum() const {
    return m_minimum;
}
void OAIOptimizedAutoscale::setMinimum(const qint32 &minimum) {
    m_minimum = minimum;
    m_minimum_isSet = true;
}

bool OAIOptimizedAutoscale::is_minimum_Set() const{
    return m_minimum_isSet;
}

bool OAIOptimizedAutoscale::is_minimum_Valid() const{
    return m_minimum_isValid;
}

qint32 OAIOptimizedAutoscale::getVersion() const {
    return m_version;
}
void OAIOptimizedAutoscale::setVersion(const qint32 &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIOptimizedAutoscale::is_version_Set() const{
    return m_version_isSet;
}

bool OAIOptimizedAutoscale::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIOptimizedAutoscale::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_is_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_maximum_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_minimum_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOptimizedAutoscale::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_is_enabled_isValid && m_maximum_isValid && m_minimum_isValid && m_version_isValid && true;
}

} // namespace OpenAPI
