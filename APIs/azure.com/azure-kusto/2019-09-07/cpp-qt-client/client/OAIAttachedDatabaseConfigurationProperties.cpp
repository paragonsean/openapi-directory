/**
 * KustoManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-09-07
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAttachedDatabaseConfigurationProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAttachedDatabaseConfigurationProperties::OAIAttachedDatabaseConfigurationProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAttachedDatabaseConfigurationProperties::OAIAttachedDatabaseConfigurationProperties() {
    this->initializeModel();
}

OAIAttachedDatabaseConfigurationProperties::~OAIAttachedDatabaseConfigurationProperties() {}

void OAIAttachedDatabaseConfigurationProperties::initializeModel() {

    m_attached_database_names_isSet = false;
    m_attached_database_names_isValid = false;

    m_cluster_resource_id_isSet = false;
    m_cluster_resource_id_isValid = false;

    m_database_name_isSet = false;
    m_database_name_isValid = false;

    m_default_principals_modification_kind_isSet = false;
    m_default_principals_modification_kind_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;
}

void OAIAttachedDatabaseConfigurationProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAttachedDatabaseConfigurationProperties::fromJsonObject(QJsonObject json) {

    m_attached_database_names_isValid = ::OpenAPI::fromJsonValue(m_attached_database_names, json[QString("attachedDatabaseNames")]);
    m_attached_database_names_isSet = !json[QString("attachedDatabaseNames")].isNull() && m_attached_database_names_isValid;

    m_cluster_resource_id_isValid = ::OpenAPI::fromJsonValue(m_cluster_resource_id, json[QString("clusterResourceId")]);
    m_cluster_resource_id_isSet = !json[QString("clusterResourceId")].isNull() && m_cluster_resource_id_isValid;

    m_database_name_isValid = ::OpenAPI::fromJsonValue(m_database_name, json[QString("databaseName")]);
    m_database_name_isSet = !json[QString("databaseName")].isNull() && m_database_name_isValid;

    m_default_principals_modification_kind_isValid = ::OpenAPI::fromJsonValue(m_default_principals_modification_kind, json[QString("defaultPrincipalsModificationKind")]);
    m_default_principals_modification_kind_isSet = !json[QString("defaultPrincipalsModificationKind")].isNull() && m_default_principals_modification_kind_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;
}

QString OAIAttachedDatabaseConfigurationProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAttachedDatabaseConfigurationProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_attached_database_names.size() > 0) {
        obj.insert(QString("attachedDatabaseNames"), ::OpenAPI::toJsonValue(m_attached_database_names));
    }
    if (m_cluster_resource_id_isSet) {
        obj.insert(QString("clusterResourceId"), ::OpenAPI::toJsonValue(m_cluster_resource_id));
    }
    if (m_database_name_isSet) {
        obj.insert(QString("databaseName"), ::OpenAPI::toJsonValue(m_database_name));
    }
    if (m_default_principals_modification_kind_isSet) {
        obj.insert(QString("defaultPrincipalsModificationKind"), ::OpenAPI::toJsonValue(m_default_principals_modification_kind));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    return obj;
}

QList<QString> OAIAttachedDatabaseConfigurationProperties::getAttachedDatabaseNames() const {
    return m_attached_database_names;
}
void OAIAttachedDatabaseConfigurationProperties::setAttachedDatabaseNames(const QList<QString> &attached_database_names) {
    m_attached_database_names = attached_database_names;
    m_attached_database_names_isSet = true;
}

bool OAIAttachedDatabaseConfigurationProperties::is_attached_database_names_Set() const{
    return m_attached_database_names_isSet;
}

bool OAIAttachedDatabaseConfigurationProperties::is_attached_database_names_Valid() const{
    return m_attached_database_names_isValid;
}

QString OAIAttachedDatabaseConfigurationProperties::getClusterResourceId() const {
    return m_cluster_resource_id;
}
void OAIAttachedDatabaseConfigurationProperties::setClusterResourceId(const QString &cluster_resource_id) {
    m_cluster_resource_id = cluster_resource_id;
    m_cluster_resource_id_isSet = true;
}

bool OAIAttachedDatabaseConfigurationProperties::is_cluster_resource_id_Set() const{
    return m_cluster_resource_id_isSet;
}

bool OAIAttachedDatabaseConfigurationProperties::is_cluster_resource_id_Valid() const{
    return m_cluster_resource_id_isValid;
}

QString OAIAttachedDatabaseConfigurationProperties::getDatabaseName() const {
    return m_database_name;
}
void OAIAttachedDatabaseConfigurationProperties::setDatabaseName(const QString &database_name) {
    m_database_name = database_name;
    m_database_name_isSet = true;
}

bool OAIAttachedDatabaseConfigurationProperties::is_database_name_Set() const{
    return m_database_name_isSet;
}

bool OAIAttachedDatabaseConfigurationProperties::is_database_name_Valid() const{
    return m_database_name_isValid;
}

QString OAIAttachedDatabaseConfigurationProperties::getDefaultPrincipalsModificationKind() const {
    return m_default_principals_modification_kind;
}
void OAIAttachedDatabaseConfigurationProperties::setDefaultPrincipalsModificationKind(const QString &default_principals_modification_kind) {
    m_default_principals_modification_kind = default_principals_modification_kind;
    m_default_principals_modification_kind_isSet = true;
}

bool OAIAttachedDatabaseConfigurationProperties::is_default_principals_modification_kind_Set() const{
    return m_default_principals_modification_kind_isSet;
}

bool OAIAttachedDatabaseConfigurationProperties::is_default_principals_modification_kind_Valid() const{
    return m_default_principals_modification_kind_isValid;
}

QString OAIAttachedDatabaseConfigurationProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIAttachedDatabaseConfigurationProperties::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIAttachedDatabaseConfigurationProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIAttachedDatabaseConfigurationProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

bool OAIAttachedDatabaseConfigurationProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attached_database_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_database_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_principals_modification_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAttachedDatabaseConfigurationProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_cluster_resource_id_isValid && m_database_name_isValid && m_default_principals_modification_kind_isValid && true;
}

} // namespace OpenAPI
