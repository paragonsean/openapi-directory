/**
 * KustoManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-09-07
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIotHubConnectionProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIotHubConnectionProperties::OAIIotHubConnectionProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIotHubConnectionProperties::OAIIotHubConnectionProperties() {
    this->initializeModel();
}

OAIIotHubConnectionProperties::~OAIIotHubConnectionProperties() {}

void OAIIotHubConnectionProperties::initializeModel() {

    m_consumer_group_isSet = false;
    m_consumer_group_isValid = false;

    m_data_format_isSet = false;
    m_data_format_isValid = false;

    m_event_system_properties_isSet = false;
    m_event_system_properties_isValid = false;

    m_iot_hub_resource_id_isSet = false;
    m_iot_hub_resource_id_isValid = false;

    m_mapping_rule_name_isSet = false;
    m_mapping_rule_name_isValid = false;

    m_shared_access_policy_name_isSet = false;
    m_shared_access_policy_name_isValid = false;

    m_table_name_isSet = false;
    m_table_name_isValid = false;
}

void OAIIotHubConnectionProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIotHubConnectionProperties::fromJsonObject(QJsonObject json) {

    m_consumer_group_isValid = ::OpenAPI::fromJsonValue(m_consumer_group, json[QString("consumerGroup")]);
    m_consumer_group_isSet = !json[QString("consumerGroup")].isNull() && m_consumer_group_isValid;

    m_data_format_isValid = ::OpenAPI::fromJsonValue(m_data_format, json[QString("dataFormat")]);
    m_data_format_isSet = !json[QString("dataFormat")].isNull() && m_data_format_isValid;

    m_event_system_properties_isValid = ::OpenAPI::fromJsonValue(m_event_system_properties, json[QString("eventSystemProperties")]);
    m_event_system_properties_isSet = !json[QString("eventSystemProperties")].isNull() && m_event_system_properties_isValid;

    m_iot_hub_resource_id_isValid = ::OpenAPI::fromJsonValue(m_iot_hub_resource_id, json[QString("iotHubResourceId")]);
    m_iot_hub_resource_id_isSet = !json[QString("iotHubResourceId")].isNull() && m_iot_hub_resource_id_isValid;

    m_mapping_rule_name_isValid = ::OpenAPI::fromJsonValue(m_mapping_rule_name, json[QString("mappingRuleName")]);
    m_mapping_rule_name_isSet = !json[QString("mappingRuleName")].isNull() && m_mapping_rule_name_isValid;

    m_shared_access_policy_name_isValid = ::OpenAPI::fromJsonValue(m_shared_access_policy_name, json[QString("sharedAccessPolicyName")]);
    m_shared_access_policy_name_isSet = !json[QString("sharedAccessPolicyName")].isNull() && m_shared_access_policy_name_isValid;

    m_table_name_isValid = ::OpenAPI::fromJsonValue(m_table_name, json[QString("tableName")]);
    m_table_name_isSet = !json[QString("tableName")].isNull() && m_table_name_isValid;
}

QString OAIIotHubConnectionProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIotHubConnectionProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_consumer_group_isSet) {
        obj.insert(QString("consumerGroup"), ::OpenAPI::toJsonValue(m_consumer_group));
    }
    if (m_data_format.isSet()) {
        obj.insert(QString("dataFormat"), ::OpenAPI::toJsonValue(m_data_format));
    }
    if (m_event_system_properties.size() > 0) {
        obj.insert(QString("eventSystemProperties"), ::OpenAPI::toJsonValue(m_event_system_properties));
    }
    if (m_iot_hub_resource_id_isSet) {
        obj.insert(QString("iotHubResourceId"), ::OpenAPI::toJsonValue(m_iot_hub_resource_id));
    }
    if (m_mapping_rule_name_isSet) {
        obj.insert(QString("mappingRuleName"), ::OpenAPI::toJsonValue(m_mapping_rule_name));
    }
    if (m_shared_access_policy_name_isSet) {
        obj.insert(QString("sharedAccessPolicyName"), ::OpenAPI::toJsonValue(m_shared_access_policy_name));
    }
    if (m_table_name_isSet) {
        obj.insert(QString("tableName"), ::OpenAPI::toJsonValue(m_table_name));
    }
    return obj;
}

QString OAIIotHubConnectionProperties::getConsumerGroup() const {
    return m_consumer_group;
}
void OAIIotHubConnectionProperties::setConsumerGroup(const QString &consumer_group) {
    m_consumer_group = consumer_group;
    m_consumer_group_isSet = true;
}

bool OAIIotHubConnectionProperties::is_consumer_group_Set() const{
    return m_consumer_group_isSet;
}

bool OAIIotHubConnectionProperties::is_consumer_group_Valid() const{
    return m_consumer_group_isValid;
}

OAIDataFormat OAIIotHubConnectionProperties::getDataFormat() const {
    return m_data_format;
}
void OAIIotHubConnectionProperties::setDataFormat(const OAIDataFormat &data_format) {
    m_data_format = data_format;
    m_data_format_isSet = true;
}

bool OAIIotHubConnectionProperties::is_data_format_Set() const{
    return m_data_format_isSet;
}

bool OAIIotHubConnectionProperties::is_data_format_Valid() const{
    return m_data_format_isValid;
}

QList<QString> OAIIotHubConnectionProperties::getEventSystemProperties() const {
    return m_event_system_properties;
}
void OAIIotHubConnectionProperties::setEventSystemProperties(const QList<QString> &event_system_properties) {
    m_event_system_properties = event_system_properties;
    m_event_system_properties_isSet = true;
}

bool OAIIotHubConnectionProperties::is_event_system_properties_Set() const{
    return m_event_system_properties_isSet;
}

bool OAIIotHubConnectionProperties::is_event_system_properties_Valid() const{
    return m_event_system_properties_isValid;
}

QString OAIIotHubConnectionProperties::getIotHubResourceId() const {
    return m_iot_hub_resource_id;
}
void OAIIotHubConnectionProperties::setIotHubResourceId(const QString &iot_hub_resource_id) {
    m_iot_hub_resource_id = iot_hub_resource_id;
    m_iot_hub_resource_id_isSet = true;
}

bool OAIIotHubConnectionProperties::is_iot_hub_resource_id_Set() const{
    return m_iot_hub_resource_id_isSet;
}

bool OAIIotHubConnectionProperties::is_iot_hub_resource_id_Valid() const{
    return m_iot_hub_resource_id_isValid;
}

QString OAIIotHubConnectionProperties::getMappingRuleName() const {
    return m_mapping_rule_name;
}
void OAIIotHubConnectionProperties::setMappingRuleName(const QString &mapping_rule_name) {
    m_mapping_rule_name = mapping_rule_name;
    m_mapping_rule_name_isSet = true;
}

bool OAIIotHubConnectionProperties::is_mapping_rule_name_Set() const{
    return m_mapping_rule_name_isSet;
}

bool OAIIotHubConnectionProperties::is_mapping_rule_name_Valid() const{
    return m_mapping_rule_name_isValid;
}

QString OAIIotHubConnectionProperties::getSharedAccessPolicyName() const {
    return m_shared_access_policy_name;
}
void OAIIotHubConnectionProperties::setSharedAccessPolicyName(const QString &shared_access_policy_name) {
    m_shared_access_policy_name = shared_access_policy_name;
    m_shared_access_policy_name_isSet = true;
}

bool OAIIotHubConnectionProperties::is_shared_access_policy_name_Set() const{
    return m_shared_access_policy_name_isSet;
}

bool OAIIotHubConnectionProperties::is_shared_access_policy_name_Valid() const{
    return m_shared_access_policy_name_isValid;
}

QString OAIIotHubConnectionProperties::getTableName() const {
    return m_table_name;
}
void OAIIotHubConnectionProperties::setTableName(const QString &table_name) {
    m_table_name = table_name;
    m_table_name_isSet = true;
}

bool OAIIotHubConnectionProperties::is_table_name_Set() const{
    return m_table_name_isSet;
}

bool OAIIotHubConnectionProperties::is_table_name_Valid() const{
    return m_table_name_isValid;
}

bool OAIIotHubConnectionProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_consumer_group_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_format.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_system_properties.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_iot_hub_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mapping_rule_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shared_access_policy_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_table_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIotHubConnectionProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_consumer_group_isValid && m_iot_hub_resource_id_isValid && m_shared_access_policy_name_isValid && true;
}

} // namespace OpenAPI
