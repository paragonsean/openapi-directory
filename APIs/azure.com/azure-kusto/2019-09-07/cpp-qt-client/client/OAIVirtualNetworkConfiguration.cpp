/**
 * KustoManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-09-07
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVirtualNetworkConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVirtualNetworkConfiguration::OAIVirtualNetworkConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVirtualNetworkConfiguration::OAIVirtualNetworkConfiguration() {
    this->initializeModel();
}

OAIVirtualNetworkConfiguration::~OAIVirtualNetworkConfiguration() {}

void OAIVirtualNetworkConfiguration::initializeModel() {

    m_data_management_public_ip_id_isSet = false;
    m_data_management_public_ip_id_isValid = false;

    m_engine_public_ip_id_isSet = false;
    m_engine_public_ip_id_isValid = false;

    m_subnet_id_isSet = false;
    m_subnet_id_isValid = false;
}

void OAIVirtualNetworkConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVirtualNetworkConfiguration::fromJsonObject(QJsonObject json) {

    m_data_management_public_ip_id_isValid = ::OpenAPI::fromJsonValue(m_data_management_public_ip_id, json[QString("dataManagementPublicIpId")]);
    m_data_management_public_ip_id_isSet = !json[QString("dataManagementPublicIpId")].isNull() && m_data_management_public_ip_id_isValid;

    m_engine_public_ip_id_isValid = ::OpenAPI::fromJsonValue(m_engine_public_ip_id, json[QString("enginePublicIpId")]);
    m_engine_public_ip_id_isSet = !json[QString("enginePublicIpId")].isNull() && m_engine_public_ip_id_isValid;

    m_subnet_id_isValid = ::OpenAPI::fromJsonValue(m_subnet_id, json[QString("subnetId")]);
    m_subnet_id_isSet = !json[QString("subnetId")].isNull() && m_subnet_id_isValid;
}

QString OAIVirtualNetworkConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVirtualNetworkConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_data_management_public_ip_id_isSet) {
        obj.insert(QString("dataManagementPublicIpId"), ::OpenAPI::toJsonValue(m_data_management_public_ip_id));
    }
    if (m_engine_public_ip_id_isSet) {
        obj.insert(QString("enginePublicIpId"), ::OpenAPI::toJsonValue(m_engine_public_ip_id));
    }
    if (m_subnet_id_isSet) {
        obj.insert(QString("subnetId"), ::OpenAPI::toJsonValue(m_subnet_id));
    }
    return obj;
}

QString OAIVirtualNetworkConfiguration::getDataManagementPublicIpId() const {
    return m_data_management_public_ip_id;
}
void OAIVirtualNetworkConfiguration::setDataManagementPublicIpId(const QString &data_management_public_ip_id) {
    m_data_management_public_ip_id = data_management_public_ip_id;
    m_data_management_public_ip_id_isSet = true;
}

bool OAIVirtualNetworkConfiguration::is_data_management_public_ip_id_Set() const{
    return m_data_management_public_ip_id_isSet;
}

bool OAIVirtualNetworkConfiguration::is_data_management_public_ip_id_Valid() const{
    return m_data_management_public_ip_id_isValid;
}

QString OAIVirtualNetworkConfiguration::getEnginePublicIpId() const {
    return m_engine_public_ip_id;
}
void OAIVirtualNetworkConfiguration::setEnginePublicIpId(const QString &engine_public_ip_id) {
    m_engine_public_ip_id = engine_public_ip_id;
    m_engine_public_ip_id_isSet = true;
}

bool OAIVirtualNetworkConfiguration::is_engine_public_ip_id_Set() const{
    return m_engine_public_ip_id_isSet;
}

bool OAIVirtualNetworkConfiguration::is_engine_public_ip_id_Valid() const{
    return m_engine_public_ip_id_isValid;
}

QString OAIVirtualNetworkConfiguration::getSubnetId() const {
    return m_subnet_id;
}
void OAIVirtualNetworkConfiguration::setSubnetId(const QString &subnet_id) {
    m_subnet_id = subnet_id;
    m_subnet_id_isSet = true;
}

bool OAIVirtualNetworkConfiguration::is_subnet_id_Set() const{
    return m_subnet_id_isSet;
}

bool OAIVirtualNetworkConfiguration::is_subnet_id_Valid() const{
    return m_subnet_id_isValid;
}

bool OAIVirtualNetworkConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_management_public_ip_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_engine_public_ip_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subnet_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVirtualNetworkConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_data_management_public_ip_id_isValid && m_engine_public_ip_id_isValid && m_subnet_id_isValid && true;
}

} // namespace OpenAPI
