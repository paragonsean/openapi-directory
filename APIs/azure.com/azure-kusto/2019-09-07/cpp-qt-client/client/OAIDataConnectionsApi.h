/**
 * KustoManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-09-07
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDataConnectionsApi_H
#define OAI_OAIDataConnectionsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICheckNameResult.h"
#include "OAICloudError.h"
#include "OAIDataConnection.h"
#include "OAIDataConnectionCheckNameRequest.h"
#include "OAIDataConnectionListResult.h"
#include "OAIDataConnectionValidation.h"
#include "OAIDataConnectionValidationListResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDataConnectionsApi : public QObject {
    Q_OBJECT

public:
    OAIDataConnectionsApi(const int timeOut = 0);
    ~OAIDataConnectionsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  cluster_name QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  data_connection_name OAIDataConnectionCheckNameRequest [required]
    */
    virtual void dataConnectionsCheckNameAvailability(const QString &resource_group_name, const QString &cluster_name, const QString &database_name, const QString &api_version, const QString &subscription_id, const OAIDataConnectionCheckNameRequest &data_connection_name);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  cluster_name QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  data_connection_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAIDataConnection [required]
    */
    virtual void dataConnectionsCreateOrUpdate(const QString &resource_group_name, const QString &cluster_name, const QString &database_name, const QString &data_connection_name, const QString &subscription_id, const QString &api_version, const OAIDataConnection &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  cluster_name QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIDataConnectionValidation [required]
    */
    virtual void dataConnectionsDataConnectionValidation(const QString &resource_group_name, const QString &cluster_name, const QString &database_name, const QString &api_version, const QString &subscription_id, const OAIDataConnectionValidation &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  cluster_name QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  data_connection_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void dataConnectionsDelete(const QString &resource_group_name, const QString &cluster_name, const QString &database_name, const QString &data_connection_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  cluster_name QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  data_connection_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void dataConnectionsGet(const QString &resource_group_name, const QString &cluster_name, const QString &database_name, const QString &data_connection_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  cluster_name QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void dataConnectionsListByDatabase(const QString &resource_group_name, const QString &cluster_name, const QString &database_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  cluster_name QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  data_connection_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAIDataConnection [required]
    */
    virtual void dataConnectionsUpdate(const QString &resource_group_name, const QString &cluster_name, const QString &database_name, const QString &data_connection_name, const QString &subscription_id, const QString &api_version, const OAIDataConnection &parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void dataConnectionsCheckNameAvailabilityCallback(OAIHttpRequestWorker *worker);
    void dataConnectionsCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void dataConnectionsDataConnectionValidationCallback(OAIHttpRequestWorker *worker);
    void dataConnectionsDeleteCallback(OAIHttpRequestWorker *worker);
    void dataConnectionsGetCallback(OAIHttpRequestWorker *worker);
    void dataConnectionsListByDatabaseCallback(OAIHttpRequestWorker *worker);
    void dataConnectionsUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void dataConnectionsCheckNameAvailabilitySignal(OAICheckNameResult summary);
    void dataConnectionsCreateOrUpdateSignal(OAIDataConnection summary);
    void dataConnectionsDataConnectionValidationSignal(OAIDataConnectionValidationListResult summary);
    void dataConnectionsDeleteSignal();
    void dataConnectionsGetSignal(OAIDataConnection summary);
    void dataConnectionsListByDatabaseSignal(OAIDataConnectionListResult summary);
    void dataConnectionsUpdateSignal(OAIDataConnection summary);


    void dataConnectionsCheckNameAvailabilitySignalFull(OAIHttpRequestWorker *worker, OAICheckNameResult summary);
    void dataConnectionsCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIDataConnection summary);
    void dataConnectionsDataConnectionValidationSignalFull(OAIHttpRequestWorker *worker, OAIDataConnectionValidationListResult summary);
    void dataConnectionsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void dataConnectionsGetSignalFull(OAIHttpRequestWorker *worker, OAIDataConnection summary);
    void dataConnectionsListByDatabaseSignalFull(OAIHttpRequestWorker *worker, OAIDataConnectionListResult summary);
    void dataConnectionsUpdateSignalFull(OAIHttpRequestWorker *worker, OAIDataConnection summary);

    Q_DECL_DEPRECATED_X("Use dataConnectionsCheckNameAvailabilitySignalError() instead")
    void dataConnectionsCheckNameAvailabilitySignalE(OAICheckNameResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dataConnectionsCheckNameAvailabilitySignalError(OAICheckNameResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataConnectionsCreateOrUpdateSignalError() instead")
    void dataConnectionsCreateOrUpdateSignalE(OAIDataConnection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dataConnectionsCreateOrUpdateSignalError(OAIDataConnection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataConnectionsDataConnectionValidationSignalError() instead")
    void dataConnectionsDataConnectionValidationSignalE(OAIDataConnectionValidationListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dataConnectionsDataConnectionValidationSignalError(OAIDataConnectionValidationListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataConnectionsDeleteSignalError() instead")
    void dataConnectionsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dataConnectionsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataConnectionsGetSignalError() instead")
    void dataConnectionsGetSignalE(OAIDataConnection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dataConnectionsGetSignalError(OAIDataConnection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataConnectionsListByDatabaseSignalError() instead")
    void dataConnectionsListByDatabaseSignalE(OAIDataConnectionListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dataConnectionsListByDatabaseSignalError(OAIDataConnectionListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataConnectionsUpdateSignalError() instead")
    void dataConnectionsUpdateSignalE(OAIDataConnection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dataConnectionsUpdateSignalError(OAIDataConnection summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use dataConnectionsCheckNameAvailabilitySignalErrorFull() instead")
    void dataConnectionsCheckNameAvailabilitySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dataConnectionsCheckNameAvailabilitySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataConnectionsCreateOrUpdateSignalErrorFull() instead")
    void dataConnectionsCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dataConnectionsCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataConnectionsDataConnectionValidationSignalErrorFull() instead")
    void dataConnectionsDataConnectionValidationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dataConnectionsDataConnectionValidationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataConnectionsDeleteSignalErrorFull() instead")
    void dataConnectionsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dataConnectionsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataConnectionsGetSignalErrorFull() instead")
    void dataConnectionsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dataConnectionsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataConnectionsListByDatabaseSignalErrorFull() instead")
    void dataConnectionsListByDatabaseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dataConnectionsListByDatabaseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataConnectionsUpdateSignalErrorFull() instead")
    void dataConnectionsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dataConnectionsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
