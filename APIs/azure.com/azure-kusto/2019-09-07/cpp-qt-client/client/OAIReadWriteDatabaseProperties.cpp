/**
 * KustoManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-09-07
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReadWriteDatabaseProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReadWriteDatabaseProperties::OAIReadWriteDatabaseProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReadWriteDatabaseProperties::OAIReadWriteDatabaseProperties() {
    this->initializeModel();
}

OAIReadWriteDatabaseProperties::~OAIReadWriteDatabaseProperties() {}

void OAIReadWriteDatabaseProperties::initializeModel() {

    m_hot_cache_period_isSet = false;
    m_hot_cache_period_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_soft_delete_period_isSet = false;
    m_soft_delete_period_isValid = false;

    m_statistics_isSet = false;
    m_statistics_isValid = false;
}

void OAIReadWriteDatabaseProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReadWriteDatabaseProperties::fromJsonObject(QJsonObject json) {

    m_hot_cache_period_isValid = ::OpenAPI::fromJsonValue(m_hot_cache_period, json[QString("hotCachePeriod")]);
    m_hot_cache_period_isSet = !json[QString("hotCachePeriod")].isNull() && m_hot_cache_period_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_soft_delete_period_isValid = ::OpenAPI::fromJsonValue(m_soft_delete_period, json[QString("softDeletePeriod")]);
    m_soft_delete_period_isSet = !json[QString("softDeletePeriod")].isNull() && m_soft_delete_period_isValid;

    m_statistics_isValid = ::OpenAPI::fromJsonValue(m_statistics, json[QString("statistics")]);
    m_statistics_isSet = !json[QString("statistics")].isNull() && m_statistics_isValid;
}

QString OAIReadWriteDatabaseProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReadWriteDatabaseProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_hot_cache_period_isSet) {
        obj.insert(QString("hotCachePeriod"), ::OpenAPI::toJsonValue(m_hot_cache_period));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_soft_delete_period_isSet) {
        obj.insert(QString("softDeletePeriod"), ::OpenAPI::toJsonValue(m_soft_delete_period));
    }
    if (m_statistics.isSet()) {
        obj.insert(QString("statistics"), ::OpenAPI::toJsonValue(m_statistics));
    }
    return obj;
}

QString OAIReadWriteDatabaseProperties::getHotCachePeriod() const {
    return m_hot_cache_period;
}
void OAIReadWriteDatabaseProperties::setHotCachePeriod(const QString &hot_cache_period) {
    m_hot_cache_period = hot_cache_period;
    m_hot_cache_period_isSet = true;
}

bool OAIReadWriteDatabaseProperties::is_hot_cache_period_Set() const{
    return m_hot_cache_period_isSet;
}

bool OAIReadWriteDatabaseProperties::is_hot_cache_period_Valid() const{
    return m_hot_cache_period_isValid;
}

QString OAIReadWriteDatabaseProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIReadWriteDatabaseProperties::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIReadWriteDatabaseProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIReadWriteDatabaseProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

QString OAIReadWriteDatabaseProperties::getSoftDeletePeriod() const {
    return m_soft_delete_period;
}
void OAIReadWriteDatabaseProperties::setSoftDeletePeriod(const QString &soft_delete_period) {
    m_soft_delete_period = soft_delete_period;
    m_soft_delete_period_isSet = true;
}

bool OAIReadWriteDatabaseProperties::is_soft_delete_period_Set() const{
    return m_soft_delete_period_isSet;
}

bool OAIReadWriteDatabaseProperties::is_soft_delete_period_Valid() const{
    return m_soft_delete_period_isValid;
}

OAIDatabaseStatistics OAIReadWriteDatabaseProperties::getStatistics() const {
    return m_statistics;
}
void OAIReadWriteDatabaseProperties::setStatistics(const OAIDatabaseStatistics &statistics) {
    m_statistics = statistics;
    m_statistics_isSet = true;
}

bool OAIReadWriteDatabaseProperties::is_statistics_Set() const{
    return m_statistics_isSet;
}

bool OAIReadWriteDatabaseProperties::is_statistics_Valid() const{
    return m_statistics_isValid;
}

bool OAIReadWriteDatabaseProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_hot_cache_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_soft_delete_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_statistics.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReadWriteDatabaseProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
