# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class VirtualNetworkConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data_management_public_ip_id: str=None, engine_public_ip_id: str=None, subnet_id: str=None):
        """VirtualNetworkConfiguration - a model defined in OpenAPI

        :param data_management_public_ip_id: The data_management_public_ip_id of this VirtualNetworkConfiguration.
        :param engine_public_ip_id: The engine_public_ip_id of this VirtualNetworkConfiguration.
        :param subnet_id: The subnet_id of this VirtualNetworkConfiguration.
        """
        self.openapi_types = {
            'data_management_public_ip_id': str,
            'engine_public_ip_id': str,
            'subnet_id': str
        }

        self.attribute_map = {
            'data_management_public_ip_id': 'dataManagementPublicIpId',
            'engine_public_ip_id': 'enginePublicIpId',
            'subnet_id': 'subnetId'
        }

        self._data_management_public_ip_id = data_management_public_ip_id
        self._engine_public_ip_id = engine_public_ip_id
        self._subnet_id = subnet_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VirtualNetworkConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VirtualNetworkConfiguration of this VirtualNetworkConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_management_public_ip_id(self):
        """Gets the data_management_public_ip_id of this VirtualNetworkConfiguration.

        Data management's service public IP address resource id.

        :return: The data_management_public_ip_id of this VirtualNetworkConfiguration.
        :rtype: str
        """
        return self._data_management_public_ip_id

    @data_management_public_ip_id.setter
    def data_management_public_ip_id(self, data_management_public_ip_id):
        """Sets the data_management_public_ip_id of this VirtualNetworkConfiguration.

        Data management's service public IP address resource id.

        :param data_management_public_ip_id: The data_management_public_ip_id of this VirtualNetworkConfiguration.
        :type data_management_public_ip_id: str
        """
        if data_management_public_ip_id is None:
            raise ValueError("Invalid value for `data_management_public_ip_id`, must not be `None`")

        self._data_management_public_ip_id = data_management_public_ip_id

    @property
    def engine_public_ip_id(self):
        """Gets the engine_public_ip_id of this VirtualNetworkConfiguration.

        Engine service's public IP address resource id.

        :return: The engine_public_ip_id of this VirtualNetworkConfiguration.
        :rtype: str
        """
        return self._engine_public_ip_id

    @engine_public_ip_id.setter
    def engine_public_ip_id(self, engine_public_ip_id):
        """Sets the engine_public_ip_id of this VirtualNetworkConfiguration.

        Engine service's public IP address resource id.

        :param engine_public_ip_id: The engine_public_ip_id of this VirtualNetworkConfiguration.
        :type engine_public_ip_id: str
        """
        if engine_public_ip_id is None:
            raise ValueError("Invalid value for `engine_public_ip_id`, must not be `None`")

        self._engine_public_ip_id = engine_public_ip_id

    @property
    def subnet_id(self):
        """Gets the subnet_id of this VirtualNetworkConfiguration.

        The subnet resource id.

        :return: The subnet_id of this VirtualNetworkConfiguration.
        :rtype: str
        """
        return self._subnet_id

    @subnet_id.setter
    def subnet_id(self, subnet_id):
        """Sets the subnet_id of this VirtualNetworkConfiguration.

        The subnet resource id.

        :param subnet_id: The subnet_id of this VirtualNetworkConfiguration.
        :type subnet_id: str
        """
        if subnet_id is None:
            raise ValueError("Invalid value for `subnet_id`, must not be `None`")

        self._subnet_id = subnet_id
