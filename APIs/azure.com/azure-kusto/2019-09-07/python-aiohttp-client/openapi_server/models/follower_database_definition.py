# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class FollowerDatabaseDefinition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attached_database_configuration_name: str=None, cluster_resource_id: str=None, database_name: str=None):
        """FollowerDatabaseDefinition - a model defined in OpenAPI

        :param attached_database_configuration_name: The attached_database_configuration_name of this FollowerDatabaseDefinition.
        :param cluster_resource_id: The cluster_resource_id of this FollowerDatabaseDefinition.
        :param database_name: The database_name of this FollowerDatabaseDefinition.
        """
        self.openapi_types = {
            'attached_database_configuration_name': str,
            'cluster_resource_id': str,
            'database_name': str
        }

        self.attribute_map = {
            'attached_database_configuration_name': 'attachedDatabaseConfigurationName',
            'cluster_resource_id': 'clusterResourceId',
            'database_name': 'databaseName'
        }

        self._attached_database_configuration_name = attached_database_configuration_name
        self._cluster_resource_id = cluster_resource_id
        self._database_name = database_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FollowerDatabaseDefinition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FollowerDatabaseDefinition of this FollowerDatabaseDefinition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attached_database_configuration_name(self):
        """Gets the attached_database_configuration_name of this FollowerDatabaseDefinition.

        Resource name of the attached database configuration in the follower cluster.

        :return: The attached_database_configuration_name of this FollowerDatabaseDefinition.
        :rtype: str
        """
        return self._attached_database_configuration_name

    @attached_database_configuration_name.setter
    def attached_database_configuration_name(self, attached_database_configuration_name):
        """Sets the attached_database_configuration_name of this FollowerDatabaseDefinition.

        Resource name of the attached database configuration in the follower cluster.

        :param attached_database_configuration_name: The attached_database_configuration_name of this FollowerDatabaseDefinition.
        :type attached_database_configuration_name: str
        """
        if attached_database_configuration_name is None:
            raise ValueError("Invalid value for `attached_database_configuration_name`, must not be `None`")

        self._attached_database_configuration_name = attached_database_configuration_name

    @property
    def cluster_resource_id(self):
        """Gets the cluster_resource_id of this FollowerDatabaseDefinition.

        Resource id of the cluster that follows a database owned by this cluster.

        :return: The cluster_resource_id of this FollowerDatabaseDefinition.
        :rtype: str
        """
        return self._cluster_resource_id

    @cluster_resource_id.setter
    def cluster_resource_id(self, cluster_resource_id):
        """Sets the cluster_resource_id of this FollowerDatabaseDefinition.

        Resource id of the cluster that follows a database owned by this cluster.

        :param cluster_resource_id: The cluster_resource_id of this FollowerDatabaseDefinition.
        :type cluster_resource_id: str
        """
        if cluster_resource_id is None:
            raise ValueError("Invalid value for `cluster_resource_id`, must not be `None`")

        self._cluster_resource_id = cluster_resource_id

    @property
    def database_name(self):
        """Gets the database_name of this FollowerDatabaseDefinition.

        The database name owned by this cluster that was followed. * in case following all databases.

        :return: The database_name of this FollowerDatabaseDefinition.
        :rtype: str
        """
        return self._database_name

    @database_name.setter
    def database_name(self, database_name):
        """Sets the database_name of this FollowerDatabaseDefinition.

        The database name owned by this cluster that was followed. * in case following all databases.

        :param database_name: The database_name of this FollowerDatabaseDefinition.
        :type database_name: str
        """

        self._database_name = database_name
