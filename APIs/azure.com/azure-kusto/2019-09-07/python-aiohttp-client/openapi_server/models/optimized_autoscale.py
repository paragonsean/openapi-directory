# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class OptimizedAutoscale(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, is_enabled: bool=None, maximum: int=None, minimum: int=None, version: int=None):
        """OptimizedAutoscale - a model defined in OpenAPI

        :param is_enabled: The is_enabled of this OptimizedAutoscale.
        :param maximum: The maximum of this OptimizedAutoscale.
        :param minimum: The minimum of this OptimizedAutoscale.
        :param version: The version of this OptimizedAutoscale.
        """
        self.openapi_types = {
            'is_enabled': bool,
            'maximum': int,
            'minimum': int,
            'version': int
        }

        self.attribute_map = {
            'is_enabled': 'isEnabled',
            'maximum': 'maximum',
            'minimum': 'minimum',
            'version': 'version'
        }

        self._is_enabled = is_enabled
        self._maximum = maximum
        self._minimum = minimum
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OptimizedAutoscale':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OptimizedAutoscale of this OptimizedAutoscale.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def is_enabled(self):
        """Gets the is_enabled of this OptimizedAutoscale.

        A boolean value that indicate if the optimized autoscale feature is enabled or not.

        :return: The is_enabled of this OptimizedAutoscale.
        :rtype: bool
        """
        return self._is_enabled

    @is_enabled.setter
    def is_enabled(self, is_enabled):
        """Sets the is_enabled of this OptimizedAutoscale.

        A boolean value that indicate if the optimized autoscale feature is enabled or not.

        :param is_enabled: The is_enabled of this OptimizedAutoscale.
        :type is_enabled: bool
        """
        if is_enabled is None:
            raise ValueError("Invalid value for `is_enabled`, must not be `None`")

        self._is_enabled = is_enabled

    @property
    def maximum(self):
        """Gets the maximum of this OptimizedAutoscale.

        Maximum allowed instances count.

        :return: The maximum of this OptimizedAutoscale.
        :rtype: int
        """
        return self._maximum

    @maximum.setter
    def maximum(self, maximum):
        """Sets the maximum of this OptimizedAutoscale.

        Maximum allowed instances count.

        :param maximum: The maximum of this OptimizedAutoscale.
        :type maximum: int
        """
        if maximum is None:
            raise ValueError("Invalid value for `maximum`, must not be `None`")

        self._maximum = maximum

    @property
    def minimum(self):
        """Gets the minimum of this OptimizedAutoscale.

        Minimum allowed instances count.

        :return: The minimum of this OptimizedAutoscale.
        :rtype: int
        """
        return self._minimum

    @minimum.setter
    def minimum(self, minimum):
        """Sets the minimum of this OptimizedAutoscale.

        Minimum allowed instances count.

        :param minimum: The minimum of this OptimizedAutoscale.
        :type minimum: int
        """
        if minimum is None:
            raise ValueError("Invalid value for `minimum`, must not be `None`")

        self._minimum = minimum

    @property
    def version(self):
        """Gets the version of this OptimizedAutoscale.

        The version of the template defined, for instance 1.

        :return: The version of this OptimizedAutoscale.
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this OptimizedAutoscale.

        The version of the template defined, for instance 1.

        :param version: The version of this OptimizedAutoscale.
        :type version: int
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")

        self._version = version
