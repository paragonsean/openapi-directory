# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AttachedDatabaseConfigurationProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attached_database_names: List[str]=None, cluster_resource_id: str=None, database_name: str=None, default_principals_modification_kind: str=None, provisioning_state: str=None):
        """AttachedDatabaseConfigurationProperties - a model defined in OpenAPI

        :param attached_database_names: The attached_database_names of this AttachedDatabaseConfigurationProperties.
        :param cluster_resource_id: The cluster_resource_id of this AttachedDatabaseConfigurationProperties.
        :param database_name: The database_name of this AttachedDatabaseConfigurationProperties.
        :param default_principals_modification_kind: The default_principals_modification_kind of this AttachedDatabaseConfigurationProperties.
        :param provisioning_state: The provisioning_state of this AttachedDatabaseConfigurationProperties.
        """
        self.openapi_types = {
            'attached_database_names': List[str],
            'cluster_resource_id': str,
            'database_name': str,
            'default_principals_modification_kind': str,
            'provisioning_state': str
        }

        self.attribute_map = {
            'attached_database_names': 'attachedDatabaseNames',
            'cluster_resource_id': 'clusterResourceId',
            'database_name': 'databaseName',
            'default_principals_modification_kind': 'defaultPrincipalsModificationKind',
            'provisioning_state': 'provisioningState'
        }

        self._attached_database_names = attached_database_names
        self._cluster_resource_id = cluster_resource_id
        self._database_name = database_name
        self._default_principals_modification_kind = default_principals_modification_kind
        self._provisioning_state = provisioning_state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AttachedDatabaseConfigurationProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AttachedDatabaseConfigurationProperties of this AttachedDatabaseConfigurationProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attached_database_names(self):
        """Gets the attached_database_names of this AttachedDatabaseConfigurationProperties.

        The list of databases from the clusterResourceId which are currently attached to the cluster.

        :return: The attached_database_names of this AttachedDatabaseConfigurationProperties.
        :rtype: List[str]
        """
        return self._attached_database_names

    @attached_database_names.setter
    def attached_database_names(self, attached_database_names):
        """Sets the attached_database_names of this AttachedDatabaseConfigurationProperties.

        The list of databases from the clusterResourceId which are currently attached to the cluster.

        :param attached_database_names: The attached_database_names of this AttachedDatabaseConfigurationProperties.
        :type attached_database_names: List[str]
        """

        self._attached_database_names = attached_database_names

    @property
    def cluster_resource_id(self):
        """Gets the cluster_resource_id of this AttachedDatabaseConfigurationProperties.

        The resource id of the cluster where the databases you would like to attach reside.

        :return: The cluster_resource_id of this AttachedDatabaseConfigurationProperties.
        :rtype: str
        """
        return self._cluster_resource_id

    @cluster_resource_id.setter
    def cluster_resource_id(self, cluster_resource_id):
        """Sets the cluster_resource_id of this AttachedDatabaseConfigurationProperties.

        The resource id of the cluster where the databases you would like to attach reside.

        :param cluster_resource_id: The cluster_resource_id of this AttachedDatabaseConfigurationProperties.
        :type cluster_resource_id: str
        """
        if cluster_resource_id is None:
            raise ValueError("Invalid value for `cluster_resource_id`, must not be `None`")

        self._cluster_resource_id = cluster_resource_id

    @property
    def database_name(self):
        """Gets the database_name of this AttachedDatabaseConfigurationProperties.

        The name of the database which you would like to attach, use * if you want to follow all current and future databases.

        :return: The database_name of this AttachedDatabaseConfigurationProperties.
        :rtype: str
        """
        return self._database_name

    @database_name.setter
    def database_name(self, database_name):
        """Sets the database_name of this AttachedDatabaseConfigurationProperties.

        The name of the database which you would like to attach, use * if you want to follow all current and future databases.

        :param database_name: The database_name of this AttachedDatabaseConfigurationProperties.
        :type database_name: str
        """
        if database_name is None:
            raise ValueError("Invalid value for `database_name`, must not be `None`")

        self._database_name = database_name

    @property
    def default_principals_modification_kind(self):
        """Gets the default_principals_modification_kind of this AttachedDatabaseConfigurationProperties.

        The default principals modification kind

        :return: The default_principals_modification_kind of this AttachedDatabaseConfigurationProperties.
        :rtype: str
        """
        return self._default_principals_modification_kind

    @default_principals_modification_kind.setter
    def default_principals_modification_kind(self, default_principals_modification_kind):
        """Sets the default_principals_modification_kind of this AttachedDatabaseConfigurationProperties.

        The default principals modification kind

        :param default_principals_modification_kind: The default_principals_modification_kind of this AttachedDatabaseConfigurationProperties.
        :type default_principals_modification_kind: str
        """
        allowed_values = ["Union", "Replace", "None"]  # noqa: E501
        if default_principals_modification_kind not in allowed_values:
            raise ValueError(
                "Invalid value for `default_principals_modification_kind` ({0}), must be one of {1}"
                .format(default_principals_modification_kind, allowed_values)
            )

        self._default_principals_modification_kind = default_principals_modification_kind

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this AttachedDatabaseConfigurationProperties.

        The provisioned state of the resource.

        :return: The provisioning_state of this AttachedDatabaseConfigurationProperties.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this AttachedDatabaseConfigurationProperties.

        The provisioned state of the resource.

        :param provisioning_state: The provisioning_state of this AttachedDatabaseConfigurationProperties.
        :type provisioning_state: str
        """
        allowed_values = ["Running", "Creating", "Deleting", "Succeeded", "Failed", "Moving"]  # noqa: E501
        if provisioning_state not in allowed_values:
            raise ValueError(
                "Invalid value for `provisioning_state` ({0}), must be one of {1}"
                .format(provisioning_state, allowed_values)
            )

        self._provisioning_state = provisioning_state
