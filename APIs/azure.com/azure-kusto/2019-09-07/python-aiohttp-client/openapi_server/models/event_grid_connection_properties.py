# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.data_format import DataFormat
from openapi_server import util


class EventGridConnectionProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, consumer_group: str=None, data_format: DataFormat=None, event_hub_resource_id: str=None, mapping_rule_name: str=None, storage_account_resource_id: str=None, table_name: str=None):
        """EventGridConnectionProperties - a model defined in OpenAPI

        :param consumer_group: The consumer_group of this EventGridConnectionProperties.
        :param data_format: The data_format of this EventGridConnectionProperties.
        :param event_hub_resource_id: The event_hub_resource_id of this EventGridConnectionProperties.
        :param mapping_rule_name: The mapping_rule_name of this EventGridConnectionProperties.
        :param storage_account_resource_id: The storage_account_resource_id of this EventGridConnectionProperties.
        :param table_name: The table_name of this EventGridConnectionProperties.
        """
        self.openapi_types = {
            'consumer_group': str,
            'data_format': DataFormat,
            'event_hub_resource_id': str,
            'mapping_rule_name': str,
            'storage_account_resource_id': str,
            'table_name': str
        }

        self.attribute_map = {
            'consumer_group': 'consumerGroup',
            'data_format': 'dataFormat',
            'event_hub_resource_id': 'eventHubResourceId',
            'mapping_rule_name': 'mappingRuleName',
            'storage_account_resource_id': 'storageAccountResourceId',
            'table_name': 'tableName'
        }

        self._consumer_group = consumer_group
        self._data_format = data_format
        self._event_hub_resource_id = event_hub_resource_id
        self._mapping_rule_name = mapping_rule_name
        self._storage_account_resource_id = storage_account_resource_id
        self._table_name = table_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EventGridConnectionProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EventGridConnectionProperties of this EventGridConnectionProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def consumer_group(self):
        """Gets the consumer_group of this EventGridConnectionProperties.

        The event hub consumer group.

        :return: The consumer_group of this EventGridConnectionProperties.
        :rtype: str
        """
        return self._consumer_group

    @consumer_group.setter
    def consumer_group(self, consumer_group):
        """Sets the consumer_group of this EventGridConnectionProperties.

        The event hub consumer group.

        :param consumer_group: The consumer_group of this EventGridConnectionProperties.
        :type consumer_group: str
        """
        if consumer_group is None:
            raise ValueError("Invalid value for `consumer_group`, must not be `None`")

        self._consumer_group = consumer_group

    @property
    def data_format(self):
        """Gets the data_format of this EventGridConnectionProperties.


        :return: The data_format of this EventGridConnectionProperties.
        :rtype: DataFormat
        """
        return self._data_format

    @data_format.setter
    def data_format(self, data_format):
        """Sets the data_format of this EventGridConnectionProperties.


        :param data_format: The data_format of this EventGridConnectionProperties.
        :type data_format: DataFormat
        """
        if data_format is None:
            raise ValueError("Invalid value for `data_format`, must not be `None`")

        self._data_format = data_format

    @property
    def event_hub_resource_id(self):
        """Gets the event_hub_resource_id of this EventGridConnectionProperties.

        The resource ID where the event grid is configured to send events.

        :return: The event_hub_resource_id of this EventGridConnectionProperties.
        :rtype: str
        """
        return self._event_hub_resource_id

    @event_hub_resource_id.setter
    def event_hub_resource_id(self, event_hub_resource_id):
        """Sets the event_hub_resource_id of this EventGridConnectionProperties.

        The resource ID where the event grid is configured to send events.

        :param event_hub_resource_id: The event_hub_resource_id of this EventGridConnectionProperties.
        :type event_hub_resource_id: str
        """
        if event_hub_resource_id is None:
            raise ValueError("Invalid value for `event_hub_resource_id`, must not be `None`")

        self._event_hub_resource_id = event_hub_resource_id

    @property
    def mapping_rule_name(self):
        """Gets the mapping_rule_name of this EventGridConnectionProperties.

        The mapping rule to be used to ingest the data. Optionally the mapping information can be added to each message.

        :return: The mapping_rule_name of this EventGridConnectionProperties.
        :rtype: str
        """
        return self._mapping_rule_name

    @mapping_rule_name.setter
    def mapping_rule_name(self, mapping_rule_name):
        """Sets the mapping_rule_name of this EventGridConnectionProperties.

        The mapping rule to be used to ingest the data. Optionally the mapping information can be added to each message.

        :param mapping_rule_name: The mapping_rule_name of this EventGridConnectionProperties.
        :type mapping_rule_name: str
        """

        self._mapping_rule_name = mapping_rule_name

    @property
    def storage_account_resource_id(self):
        """Gets the storage_account_resource_id of this EventGridConnectionProperties.

        The resource ID of the storage account where the data resides.

        :return: The storage_account_resource_id of this EventGridConnectionProperties.
        :rtype: str
        """
        return self._storage_account_resource_id

    @storage_account_resource_id.setter
    def storage_account_resource_id(self, storage_account_resource_id):
        """Sets the storage_account_resource_id of this EventGridConnectionProperties.

        The resource ID of the storage account where the data resides.

        :param storage_account_resource_id: The storage_account_resource_id of this EventGridConnectionProperties.
        :type storage_account_resource_id: str
        """
        if storage_account_resource_id is None:
            raise ValueError("Invalid value for `storage_account_resource_id`, must not be `None`")

        self._storage_account_resource_id = storage_account_resource_id

    @property
    def table_name(self):
        """Gets the table_name of this EventGridConnectionProperties.

        The table where the data should be ingested. Optionally the table information can be added to each message.

        :return: The table_name of this EventGridConnectionProperties.
        :rtype: str
        """
        return self._table_name

    @table_name.setter
    def table_name(self, table_name):
        """Sets the table_name of this EventGridConnectionProperties.

        The table where the data should be ingested. Optionally the table information can be added to each message.

        :param table_name: The table_name of this EventGridConnectionProperties.
        :type table_name: str
        """
        if table_name is None:
            raise ValueError("Invalid value for `table_name`, must not be `None`")

        self._table_name = table_name
