# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.key_vault_properties import KeyVaultProperties
from openapi_server.models.optimized_autoscale import OptimizedAutoscale
from openapi_server.models.trusted_external_tenant import TrustedExternalTenant
from openapi_server.models.virtual_network_configuration import VirtualNetworkConfiguration
from openapi_server import util


class ClusterProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data_ingestion_uri: str=None, enable_disk_encryption: bool=None, enable_streaming_ingest: bool=False, key_vault_properties: KeyVaultProperties=None, optimized_autoscale: OptimizedAutoscale=None, provisioning_state: str=None, state: str=None, trusted_external_tenants: List[TrustedExternalTenant]=None, uri: str=None, virtual_network_configuration: VirtualNetworkConfiguration=None):
        """ClusterProperties - a model defined in OpenAPI

        :param data_ingestion_uri: The data_ingestion_uri of this ClusterProperties.
        :param enable_disk_encryption: The enable_disk_encryption of this ClusterProperties.
        :param enable_streaming_ingest: The enable_streaming_ingest of this ClusterProperties.
        :param key_vault_properties: The key_vault_properties of this ClusterProperties.
        :param optimized_autoscale: The optimized_autoscale of this ClusterProperties.
        :param provisioning_state: The provisioning_state of this ClusterProperties.
        :param state: The state of this ClusterProperties.
        :param trusted_external_tenants: The trusted_external_tenants of this ClusterProperties.
        :param uri: The uri of this ClusterProperties.
        :param virtual_network_configuration: The virtual_network_configuration of this ClusterProperties.
        """
        self.openapi_types = {
            'data_ingestion_uri': str,
            'enable_disk_encryption': bool,
            'enable_streaming_ingest': bool,
            'key_vault_properties': KeyVaultProperties,
            'optimized_autoscale': OptimizedAutoscale,
            'provisioning_state': str,
            'state': str,
            'trusted_external_tenants': List[TrustedExternalTenant],
            'uri': str,
            'virtual_network_configuration': VirtualNetworkConfiguration
        }

        self.attribute_map = {
            'data_ingestion_uri': 'dataIngestionUri',
            'enable_disk_encryption': 'enableDiskEncryption',
            'enable_streaming_ingest': 'enableStreamingIngest',
            'key_vault_properties': 'keyVaultProperties',
            'optimized_autoscale': 'optimizedAutoscale',
            'provisioning_state': 'provisioningState',
            'state': 'state',
            'trusted_external_tenants': 'trustedExternalTenants',
            'uri': 'uri',
            'virtual_network_configuration': 'virtualNetworkConfiguration'
        }

        self._data_ingestion_uri = data_ingestion_uri
        self._enable_disk_encryption = enable_disk_encryption
        self._enable_streaming_ingest = enable_streaming_ingest
        self._key_vault_properties = key_vault_properties
        self._optimized_autoscale = optimized_autoscale
        self._provisioning_state = provisioning_state
        self._state = state
        self._trusted_external_tenants = trusted_external_tenants
        self._uri = uri
        self._virtual_network_configuration = virtual_network_configuration

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ClusterProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ClusterProperties of this ClusterProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_ingestion_uri(self):
        """Gets the data_ingestion_uri of this ClusterProperties.

        The cluster data ingestion URI.

        :return: The data_ingestion_uri of this ClusterProperties.
        :rtype: str
        """
        return self._data_ingestion_uri

    @data_ingestion_uri.setter
    def data_ingestion_uri(self, data_ingestion_uri):
        """Sets the data_ingestion_uri of this ClusterProperties.

        The cluster data ingestion URI.

        :param data_ingestion_uri: The data_ingestion_uri of this ClusterProperties.
        :type data_ingestion_uri: str
        """

        self._data_ingestion_uri = data_ingestion_uri

    @property
    def enable_disk_encryption(self):
        """Gets the enable_disk_encryption of this ClusterProperties.

        A boolean value that indicates if the cluster's disks are encrypted.

        :return: The enable_disk_encryption of this ClusterProperties.
        :rtype: bool
        """
        return self._enable_disk_encryption

    @enable_disk_encryption.setter
    def enable_disk_encryption(self, enable_disk_encryption):
        """Sets the enable_disk_encryption of this ClusterProperties.

        A boolean value that indicates if the cluster's disks are encrypted.

        :param enable_disk_encryption: The enable_disk_encryption of this ClusterProperties.
        :type enable_disk_encryption: bool
        """

        self._enable_disk_encryption = enable_disk_encryption

    @property
    def enable_streaming_ingest(self):
        """Gets the enable_streaming_ingest of this ClusterProperties.

        A boolean value that indicates if the streaming ingest is enabled.

        :return: The enable_streaming_ingest of this ClusterProperties.
        :rtype: bool
        """
        return self._enable_streaming_ingest

    @enable_streaming_ingest.setter
    def enable_streaming_ingest(self, enable_streaming_ingest):
        """Sets the enable_streaming_ingest of this ClusterProperties.

        A boolean value that indicates if the streaming ingest is enabled.

        :param enable_streaming_ingest: The enable_streaming_ingest of this ClusterProperties.
        :type enable_streaming_ingest: bool
        """

        self._enable_streaming_ingest = enable_streaming_ingest

    @property
    def key_vault_properties(self):
        """Gets the key_vault_properties of this ClusterProperties.


        :return: The key_vault_properties of this ClusterProperties.
        :rtype: KeyVaultProperties
        """
        return self._key_vault_properties

    @key_vault_properties.setter
    def key_vault_properties(self, key_vault_properties):
        """Sets the key_vault_properties of this ClusterProperties.


        :param key_vault_properties: The key_vault_properties of this ClusterProperties.
        :type key_vault_properties: KeyVaultProperties
        """

        self._key_vault_properties = key_vault_properties

    @property
    def optimized_autoscale(self):
        """Gets the optimized_autoscale of this ClusterProperties.


        :return: The optimized_autoscale of this ClusterProperties.
        :rtype: OptimizedAutoscale
        """
        return self._optimized_autoscale

    @optimized_autoscale.setter
    def optimized_autoscale(self, optimized_autoscale):
        """Sets the optimized_autoscale of this ClusterProperties.


        :param optimized_autoscale: The optimized_autoscale of this ClusterProperties.
        :type optimized_autoscale: OptimizedAutoscale
        """

        self._optimized_autoscale = optimized_autoscale

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this ClusterProperties.

        The provisioned state of the resource.

        :return: The provisioning_state of this ClusterProperties.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this ClusterProperties.

        The provisioned state of the resource.

        :param provisioning_state: The provisioning_state of this ClusterProperties.
        :type provisioning_state: str
        """
        allowed_values = ["Running", "Creating", "Deleting", "Succeeded", "Failed", "Moving"]  # noqa: E501
        if provisioning_state not in allowed_values:
            raise ValueError(
                "Invalid value for `provisioning_state` ({0}), must be one of {1}"
                .format(provisioning_state, allowed_values)
            )

        self._provisioning_state = provisioning_state

    @property
    def state(self):
        """Gets the state of this ClusterProperties.

        The state of the resource.

        :return: The state of this ClusterProperties.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ClusterProperties.

        The state of the resource.

        :param state: The state of this ClusterProperties.
        :type state: str
        """
        allowed_values = ["Creating", "Unavailable", "Running", "Deleting", "Deleted", "Stopping", "Stopped", "Starting", "Updating"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def trusted_external_tenants(self):
        """Gets the trusted_external_tenants of this ClusterProperties.

        The cluster's external tenants.

        :return: The trusted_external_tenants of this ClusterProperties.
        :rtype: List[TrustedExternalTenant]
        """
        return self._trusted_external_tenants

    @trusted_external_tenants.setter
    def trusted_external_tenants(self, trusted_external_tenants):
        """Sets the trusted_external_tenants of this ClusterProperties.

        The cluster's external tenants.

        :param trusted_external_tenants: The trusted_external_tenants of this ClusterProperties.
        :type trusted_external_tenants: List[TrustedExternalTenant]
        """

        self._trusted_external_tenants = trusted_external_tenants

    @property
    def uri(self):
        """Gets the uri of this ClusterProperties.

        The cluster URI.

        :return: The uri of this ClusterProperties.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this ClusterProperties.

        The cluster URI.

        :param uri: The uri of this ClusterProperties.
        :type uri: str
        """

        self._uri = uri

    @property
    def virtual_network_configuration(self):
        """Gets the virtual_network_configuration of this ClusterProperties.


        :return: The virtual_network_configuration of this ClusterProperties.
        :rtype: VirtualNetworkConfiguration
        """
        return self._virtual_network_configuration

    @virtual_network_configuration.setter
    def virtual_network_configuration(self, virtual_network_configuration):
        """Sets the virtual_network_configuration of this ClusterProperties.


        :param virtual_network_configuration: The virtual_network_configuration of this ClusterProperties.
        :type virtual_network_configuration: VirtualNetworkConfiguration
        """

        self._virtual_network_configuration = virtual_network_configuration
