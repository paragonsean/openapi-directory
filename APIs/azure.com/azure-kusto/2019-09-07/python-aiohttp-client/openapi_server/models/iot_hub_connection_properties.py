# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.data_format import DataFormat
from openapi_server import util


class IotHubConnectionProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, consumer_group: str=None, data_format: DataFormat=None, event_system_properties: List[str]=None, iot_hub_resource_id: str=None, mapping_rule_name: str=None, shared_access_policy_name: str=None, table_name: str=None):
        """IotHubConnectionProperties - a model defined in OpenAPI

        :param consumer_group: The consumer_group of this IotHubConnectionProperties.
        :param data_format: The data_format of this IotHubConnectionProperties.
        :param event_system_properties: The event_system_properties of this IotHubConnectionProperties.
        :param iot_hub_resource_id: The iot_hub_resource_id of this IotHubConnectionProperties.
        :param mapping_rule_name: The mapping_rule_name of this IotHubConnectionProperties.
        :param shared_access_policy_name: The shared_access_policy_name of this IotHubConnectionProperties.
        :param table_name: The table_name of this IotHubConnectionProperties.
        """
        self.openapi_types = {
            'consumer_group': str,
            'data_format': DataFormat,
            'event_system_properties': List[str],
            'iot_hub_resource_id': str,
            'mapping_rule_name': str,
            'shared_access_policy_name': str,
            'table_name': str
        }

        self.attribute_map = {
            'consumer_group': 'consumerGroup',
            'data_format': 'dataFormat',
            'event_system_properties': 'eventSystemProperties',
            'iot_hub_resource_id': 'iotHubResourceId',
            'mapping_rule_name': 'mappingRuleName',
            'shared_access_policy_name': 'sharedAccessPolicyName',
            'table_name': 'tableName'
        }

        self._consumer_group = consumer_group
        self._data_format = data_format
        self._event_system_properties = event_system_properties
        self._iot_hub_resource_id = iot_hub_resource_id
        self._mapping_rule_name = mapping_rule_name
        self._shared_access_policy_name = shared_access_policy_name
        self._table_name = table_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IotHubConnectionProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IotHubConnectionProperties of this IotHubConnectionProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def consumer_group(self):
        """Gets the consumer_group of this IotHubConnectionProperties.

        The iot hub consumer group.

        :return: The consumer_group of this IotHubConnectionProperties.
        :rtype: str
        """
        return self._consumer_group

    @consumer_group.setter
    def consumer_group(self, consumer_group):
        """Sets the consumer_group of this IotHubConnectionProperties.

        The iot hub consumer group.

        :param consumer_group: The consumer_group of this IotHubConnectionProperties.
        :type consumer_group: str
        """
        if consumer_group is None:
            raise ValueError("Invalid value for `consumer_group`, must not be `None`")

        self._consumer_group = consumer_group

    @property
    def data_format(self):
        """Gets the data_format of this IotHubConnectionProperties.


        :return: The data_format of this IotHubConnectionProperties.
        :rtype: DataFormat
        """
        return self._data_format

    @data_format.setter
    def data_format(self, data_format):
        """Sets the data_format of this IotHubConnectionProperties.


        :param data_format: The data_format of this IotHubConnectionProperties.
        :type data_format: DataFormat
        """

        self._data_format = data_format

    @property
    def event_system_properties(self):
        """Gets the event_system_properties of this IotHubConnectionProperties.

        System properties of the iot hub

        :return: The event_system_properties of this IotHubConnectionProperties.
        :rtype: List[str]
        """
        return self._event_system_properties

    @event_system_properties.setter
    def event_system_properties(self, event_system_properties):
        """Sets the event_system_properties of this IotHubConnectionProperties.

        System properties of the iot hub

        :param event_system_properties: The event_system_properties of this IotHubConnectionProperties.
        :type event_system_properties: List[str]
        """

        self._event_system_properties = event_system_properties

    @property
    def iot_hub_resource_id(self):
        """Gets the iot_hub_resource_id of this IotHubConnectionProperties.

        The resource ID of the Iot hub to be used to create a data connection.

        :return: The iot_hub_resource_id of this IotHubConnectionProperties.
        :rtype: str
        """
        return self._iot_hub_resource_id

    @iot_hub_resource_id.setter
    def iot_hub_resource_id(self, iot_hub_resource_id):
        """Sets the iot_hub_resource_id of this IotHubConnectionProperties.

        The resource ID of the Iot hub to be used to create a data connection.

        :param iot_hub_resource_id: The iot_hub_resource_id of this IotHubConnectionProperties.
        :type iot_hub_resource_id: str
        """
        if iot_hub_resource_id is None:
            raise ValueError("Invalid value for `iot_hub_resource_id`, must not be `None`")

        self._iot_hub_resource_id = iot_hub_resource_id

    @property
    def mapping_rule_name(self):
        """Gets the mapping_rule_name of this IotHubConnectionProperties.

        The mapping rule to be used to ingest the data. Optionally the mapping information can be added to each message.

        :return: The mapping_rule_name of this IotHubConnectionProperties.
        :rtype: str
        """
        return self._mapping_rule_name

    @mapping_rule_name.setter
    def mapping_rule_name(self, mapping_rule_name):
        """Sets the mapping_rule_name of this IotHubConnectionProperties.

        The mapping rule to be used to ingest the data. Optionally the mapping information can be added to each message.

        :param mapping_rule_name: The mapping_rule_name of this IotHubConnectionProperties.
        :type mapping_rule_name: str
        """

        self._mapping_rule_name = mapping_rule_name

    @property
    def shared_access_policy_name(self):
        """Gets the shared_access_policy_name of this IotHubConnectionProperties.

        The name of the share access policy name

        :return: The shared_access_policy_name of this IotHubConnectionProperties.
        :rtype: str
        """
        return self._shared_access_policy_name

    @shared_access_policy_name.setter
    def shared_access_policy_name(self, shared_access_policy_name):
        """Sets the shared_access_policy_name of this IotHubConnectionProperties.

        The name of the share access policy name

        :param shared_access_policy_name: The shared_access_policy_name of this IotHubConnectionProperties.
        :type shared_access_policy_name: str
        """
        if shared_access_policy_name is None:
            raise ValueError("Invalid value for `shared_access_policy_name`, must not be `None`")

        self._shared_access_policy_name = shared_access_policy_name

    @property
    def table_name(self):
        """Gets the table_name of this IotHubConnectionProperties.

        The table where the data should be ingested. Optionally the table information can be added to each message.

        :return: The table_name of this IotHubConnectionProperties.
        :rtype: str
        """
        return self._table_name

    @table_name.setter
    def table_name(self, table_name):
        """Sets the table_name of this IotHubConnectionProperties.

        The table where the data should be ingested. Optionally the table information can be added to each message.

        :param table_name: The table_name of this IotHubConnectionProperties.
        :type table_name: str
        """

        self._table_name = table_name
