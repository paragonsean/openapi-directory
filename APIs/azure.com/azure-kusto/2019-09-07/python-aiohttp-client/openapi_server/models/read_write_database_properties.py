# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.database_statistics import DatabaseStatistics
from openapi_server import util


class ReadWriteDatabaseProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, hot_cache_period: str=None, provisioning_state: str=None, soft_delete_period: str=None, statistics: DatabaseStatistics=None):
        """ReadWriteDatabaseProperties - a model defined in OpenAPI

        :param hot_cache_period: The hot_cache_period of this ReadWriteDatabaseProperties.
        :param provisioning_state: The provisioning_state of this ReadWriteDatabaseProperties.
        :param soft_delete_period: The soft_delete_period of this ReadWriteDatabaseProperties.
        :param statistics: The statistics of this ReadWriteDatabaseProperties.
        """
        self.openapi_types = {
            'hot_cache_period': str,
            'provisioning_state': str,
            'soft_delete_period': str,
            'statistics': DatabaseStatistics
        }

        self.attribute_map = {
            'hot_cache_period': 'hotCachePeriod',
            'provisioning_state': 'provisioningState',
            'soft_delete_period': 'softDeletePeriod',
            'statistics': 'statistics'
        }

        self._hot_cache_period = hot_cache_period
        self._provisioning_state = provisioning_state
        self._soft_delete_period = soft_delete_period
        self._statistics = statistics

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReadWriteDatabaseProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReadWriteDatabaseProperties of this ReadWriteDatabaseProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def hot_cache_period(self):
        """Gets the hot_cache_period of this ReadWriteDatabaseProperties.

        The time the data should be kept in cache for fast queries in TimeSpan.

        :return: The hot_cache_period of this ReadWriteDatabaseProperties.
        :rtype: str
        """
        return self._hot_cache_period

    @hot_cache_period.setter
    def hot_cache_period(self, hot_cache_period):
        """Sets the hot_cache_period of this ReadWriteDatabaseProperties.

        The time the data should be kept in cache for fast queries in TimeSpan.

        :param hot_cache_period: The hot_cache_period of this ReadWriteDatabaseProperties.
        :type hot_cache_period: str
        """

        self._hot_cache_period = hot_cache_period

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this ReadWriteDatabaseProperties.

        The provisioned state of the resource.

        :return: The provisioning_state of this ReadWriteDatabaseProperties.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this ReadWriteDatabaseProperties.

        The provisioned state of the resource.

        :param provisioning_state: The provisioning_state of this ReadWriteDatabaseProperties.
        :type provisioning_state: str
        """
        allowed_values = ["Running", "Creating", "Deleting", "Succeeded", "Failed", "Moving"]  # noqa: E501
        if provisioning_state not in allowed_values:
            raise ValueError(
                "Invalid value for `provisioning_state` ({0}), must be one of {1}"
                .format(provisioning_state, allowed_values)
            )

        self._provisioning_state = provisioning_state

    @property
    def soft_delete_period(self):
        """Gets the soft_delete_period of this ReadWriteDatabaseProperties.

        The time the data should be kept before it stops being accessible to queries in TimeSpan.

        :return: The soft_delete_period of this ReadWriteDatabaseProperties.
        :rtype: str
        """
        return self._soft_delete_period

    @soft_delete_period.setter
    def soft_delete_period(self, soft_delete_period):
        """Sets the soft_delete_period of this ReadWriteDatabaseProperties.

        The time the data should be kept before it stops being accessible to queries in TimeSpan.

        :param soft_delete_period: The soft_delete_period of this ReadWriteDatabaseProperties.
        :type soft_delete_period: str
        """

        self._soft_delete_period = soft_delete_period

    @property
    def statistics(self):
        """Gets the statistics of this ReadWriteDatabaseProperties.


        :return: The statistics of this ReadWriteDatabaseProperties.
        :rtype: DatabaseStatistics
        """
        return self._statistics

    @statistics.setter
    def statistics(self, statistics):
        """Sets the statistics of this ReadWriteDatabaseProperties.


        :param statistics: The statistics of this ReadWriteDatabaseProperties.
        :type statistics: DatabaseStatistics
        """

        self._statistics = statistics
