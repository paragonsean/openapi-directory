/*
 * KustoManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-09-07-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CheckNameResult;
import org.openapitools.client.model.CloudError;
import org.openapitools.client.model.Database;
import org.openapitools.client.model.DatabaseCheckNameRequest;
import org.openapitools.client.model.DatabaseListResult;
import org.openapitools.client.model.DatabasePrincipalListRequest;
import org.openapitools.client.model.DatabasePrincipalListResult;
import org.openapitools.client.model.DatabaseUpdate;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DatabasesApi
 */
@Disabled
public class DatabasesApiTest {

    private final DatabasesApi api = new DatabasesApi();

    /**
     * Add Database principals permissions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void databasesAddPrincipalsTest() throws ApiException {
        String resourceGroupName = null;
        String clusterName = null;
        String databaseName = null;
        String subscriptionId = null;
        String apiVersion = null;
        DatabasePrincipalListRequest databasePrincipalsToAdd = null;
        DatabasePrincipalListResult response = api.databasesAddPrincipals(resourceGroupName, clusterName, databaseName, subscriptionId, apiVersion, databasePrincipalsToAdd);
        // TODO: test validations
    }

    /**
     * Checks that the database name is valid and is not already in use.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void databasesCheckNameAvailabilityTest() throws ApiException {
        String resourceGroupName = null;
        String clusterName = null;
        String apiVersion = null;
        String subscriptionId = null;
        DatabaseCheckNameRequest databaseName = null;
        CheckNameResult response = api.databasesCheckNameAvailability(resourceGroupName, clusterName, apiVersion, subscriptionId, databaseName);
        // TODO: test validations
    }

    /**
     * Creates or updates a database.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void databasesCreateOrUpdateTest() throws ApiException {
        String resourceGroupName = null;
        String clusterName = null;
        String databaseName = null;
        String subscriptionId = null;
        String apiVersion = null;
        Database parameters = null;
        Database response = api.databasesCreateOrUpdate(resourceGroupName, clusterName, databaseName, subscriptionId, apiVersion, parameters);
        // TODO: test validations
    }

    /**
     * Deletes the database with the given name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void databasesDeleteTest() throws ApiException {
        String resourceGroupName = null;
        String clusterName = null;
        String databaseName = null;
        String subscriptionId = null;
        String apiVersion = null;
        api.databasesDelete(resourceGroupName, clusterName, databaseName, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Returns a database.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void databasesGetTest() throws ApiException {
        String resourceGroupName = null;
        String clusterName = null;
        String databaseName = null;
        String subscriptionId = null;
        String apiVersion = null;
        Database response = api.databasesGet(resourceGroupName, clusterName, databaseName, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Returns the list of databases of the given Kusto cluster.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void databasesListByClusterTest() throws ApiException {
        String resourceGroupName = null;
        String clusterName = null;
        String subscriptionId = null;
        String apiVersion = null;
        DatabaseListResult response = api.databasesListByCluster(resourceGroupName, clusterName, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Returns a list of database principals of the given Kusto cluster and database.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void databasesListPrincipalsTest() throws ApiException {
        String resourceGroupName = null;
        String clusterName = null;
        String databaseName = null;
        String subscriptionId = null;
        String apiVersion = null;
        DatabasePrincipalListResult response = api.databasesListPrincipals(resourceGroupName, clusterName, databaseName, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Remove Database principals permissions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void databasesRemovePrincipalsTest() throws ApiException {
        String resourceGroupName = null;
        String clusterName = null;
        String databaseName = null;
        String subscriptionId = null;
        String apiVersion = null;
        DatabasePrincipalListRequest databasePrincipalsToRemove = null;
        DatabasePrincipalListResult response = api.databasesRemovePrincipals(resourceGroupName, clusterName, databaseName, subscriptionId, apiVersion, databasePrincipalsToRemove);
        // TODO: test validations
    }

    /**
     * Updates a database.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void databasesUpdateTest() throws ApiException {
        String resourceGroupName = null;
        String clusterName = null;
        String databaseName = null;
        String subscriptionId = null;
        String apiVersion = null;
        DatabaseUpdate parameters = null;
        Database response = api.databasesUpdate(resourceGroupName, clusterName, databaseName, subscriptionId, apiVersion, parameters);
        // TODO: test validations
    }

}
