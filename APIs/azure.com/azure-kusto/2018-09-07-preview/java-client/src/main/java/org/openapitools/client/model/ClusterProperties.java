/*
 * KustoManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-09-07-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.TrustedExternalTenant;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Class representing the Kusto cluster properties.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:20:03.636572-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ClusterProperties {
  public static final String SERIALIZED_NAME_DATA_INGESTION_URI = "dataIngestionUri";
  @SerializedName(SERIALIZED_NAME_DATA_INGESTION_URI)
  private String dataIngestionUri;

  /**
   * The provisioned state of the resource.
   */
  @JsonAdapter(ProvisioningStateEnum.Adapter.class)
  public enum ProvisioningStateEnum {
    RUNNING("Running"),
    
    CREATING("Creating"),
    
    DELETING("Deleting"),
    
    SUCCEEDED("Succeeded"),
    
    FAILED("Failed");

    private String value;

    ProvisioningStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProvisioningStateEnum fromValue(String value) {
      for (ProvisioningStateEnum b : ProvisioningStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProvisioningStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProvisioningStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProvisioningStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProvisioningStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProvisioningStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private ProvisioningStateEnum provisioningState;

  /**
   * The state of the resource.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    CREATING("Creating"),
    
    UNAVAILABLE("Unavailable"),
    
    RUNNING("Running"),
    
    DELETING("Deleting"),
    
    DELETED("Deleted"),
    
    STOPPING("Stopping"),
    
    STOPPED("Stopped"),
    
    STARTING("Starting");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_TRUSTED_EXTERNAL_TENANTS = "trustedExternalTenants";
  @SerializedName(SERIALIZED_NAME_TRUSTED_EXTERNAL_TENANTS)
  private List<TrustedExternalTenant> trustedExternalTenants = new ArrayList<>();

  public static final String SERIALIZED_NAME_URI = "uri";
  @SerializedName(SERIALIZED_NAME_URI)
  private String uri;

  public ClusterProperties() {
  }

  public ClusterProperties(
     String dataIngestionUri, 
     ProvisioningStateEnum provisioningState, 
     StateEnum state, 
     String uri
  ) {
    this();
    this.dataIngestionUri = dataIngestionUri;
    this.provisioningState = provisioningState;
    this.state = state;
    this.uri = uri;
  }

  /**
   * The cluster data ingestion URI.
   * @return dataIngestionUri
   */
  @javax.annotation.Nullable
  public String getDataIngestionUri() {
    return dataIngestionUri;
  }



  /**
   * The provisioned state of the resource.
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public ProvisioningStateEnum getProvisioningState() {
    return provisioningState;
  }



  /**
   * The state of the resource.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }



  public ClusterProperties trustedExternalTenants(List<TrustedExternalTenant> trustedExternalTenants) {
    this.trustedExternalTenants = trustedExternalTenants;
    return this;
  }

  public ClusterProperties addTrustedExternalTenantsItem(TrustedExternalTenant trustedExternalTenantsItem) {
    if (this.trustedExternalTenants == null) {
      this.trustedExternalTenants = new ArrayList<>();
    }
    this.trustedExternalTenants.add(trustedExternalTenantsItem);
    return this;
  }

  /**
   * The cluster&#39;s external tenants.
   * @return trustedExternalTenants
   */
  @javax.annotation.Nullable
  public List<TrustedExternalTenant> getTrustedExternalTenants() {
    return trustedExternalTenants;
  }

  public void setTrustedExternalTenants(List<TrustedExternalTenant> trustedExternalTenants) {
    this.trustedExternalTenants = trustedExternalTenants;
  }


  /**
   * The cluster URI.
   * @return uri
   */
  @javax.annotation.Nullable
  public String getUri() {
    return uri;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ClusterProperties clusterProperties = (ClusterProperties) o;
    return Objects.equals(this.dataIngestionUri, clusterProperties.dataIngestionUri) &&
        Objects.equals(this.provisioningState, clusterProperties.provisioningState) &&
        Objects.equals(this.state, clusterProperties.state) &&
        Objects.equals(this.trustedExternalTenants, clusterProperties.trustedExternalTenants) &&
        Objects.equals(this.uri, clusterProperties.uri);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dataIngestionUri, provisioningState, state, trustedExternalTenants, uri);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ClusterProperties {\n");
    sb.append("    dataIngestionUri: ").append(toIndentedString(dataIngestionUri)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    trustedExternalTenants: ").append(toIndentedString(trustedExternalTenants)).append("\n");
    sb.append("    uri: ").append(toIndentedString(uri)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dataIngestionUri");
    openapiFields.add("provisioningState");
    openapiFields.add("state");
    openapiFields.add("trustedExternalTenants");
    openapiFields.add("uri");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ClusterProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ClusterProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ClusterProperties is not found in the empty JSON string", ClusterProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ClusterProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ClusterProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("dataIngestionUri") != null && !jsonObj.get("dataIngestionUri").isJsonNull()) && !jsonObj.get("dataIngestionUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataIngestionUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataIngestionUri").toString()));
      }
      if ((jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) && !jsonObj.get("provisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningState").toString()));
      }
      // validate the optional field `provisioningState`
      if (jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) {
        ProvisioningStateEnum.validateJsonElement(jsonObj.get("provisioningState"));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
      if (jsonObj.get("trustedExternalTenants") != null && !jsonObj.get("trustedExternalTenants").isJsonNull()) {
        JsonArray jsonArraytrustedExternalTenants = jsonObj.getAsJsonArray("trustedExternalTenants");
        if (jsonArraytrustedExternalTenants != null) {
          // ensure the json data is an array
          if (!jsonObj.get("trustedExternalTenants").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `trustedExternalTenants` to be an array in the JSON string but got `%s`", jsonObj.get("trustedExternalTenants").toString()));
          }

          // validate the optional field `trustedExternalTenants` (array)
          for (int i = 0; i < jsonArraytrustedExternalTenants.size(); i++) {
            TrustedExternalTenant.validateJsonElement(jsonArraytrustedExternalTenants.get(i));
          };
        }
      }
      if ((jsonObj.get("uri") != null && !jsonObj.get("uri").isJsonNull()) && !jsonObj.get("uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uri").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ClusterProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ClusterProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ClusterProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ClusterProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<ClusterProperties>() {
           @Override
           public void write(JsonWriter out, ClusterProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ClusterProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ClusterProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ClusterProperties
   * @throws IOException if the JSON string is invalid with respect to ClusterProperties
   */
  public static ClusterProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ClusterProperties.class);
  }

  /**
   * Convert an instance of ClusterProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

