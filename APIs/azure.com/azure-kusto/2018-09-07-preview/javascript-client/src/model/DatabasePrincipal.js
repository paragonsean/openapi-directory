/**
 * KustoManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-09-07-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DatabasePrincipal model module.
 * @module model/DatabasePrincipal
 * @version 2018-09-07-preview
 */
class DatabasePrincipal {
    /**
     * Constructs a new <code>DatabasePrincipal</code>.
     * @alias module:model/DatabasePrincipal
     * @param name {String} Database principal name.
     * @param role {module:model/DatabasePrincipal.RoleEnum} Database principal role.
     * @param type {module:model/DatabasePrincipal.TypeEnum} Database principal type.
     */
    constructor(name, role, type) { 
        
        DatabasePrincipal.initialize(this, name, role, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, role, type) { 
        obj['name'] = name;
        obj['role'] = role;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>DatabasePrincipal</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DatabasePrincipal} obj Optional instance to populate.
     * @return {module:model/DatabasePrincipal} The populated <code>DatabasePrincipal</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DatabasePrincipal();

            if (data.hasOwnProperty('appId')) {
                obj['appId'] = ApiClient.convertToType(data['appId'], 'String');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('fqn')) {
                obj['fqn'] = ApiClient.convertToType(data['fqn'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('role')) {
                obj['role'] = ApiClient.convertToType(data['role'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DatabasePrincipal</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DatabasePrincipal</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DatabasePrincipal.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['appId'] && !(typeof data['appId'] === 'string' || data['appId'] instanceof String)) {
            throw new Error("Expected the field `appId` to be a primitive type in the JSON string but got " + data['appId']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['fqn'] && !(typeof data['fqn'] === 'string' || data['fqn'] instanceof String)) {
            throw new Error("Expected the field `fqn` to be a primitive type in the JSON string but got " + data['fqn']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['role'] && !(typeof data['role'] === 'string' || data['role'] instanceof String)) {
            throw new Error("Expected the field `role` to be a primitive type in the JSON string but got " + data['role']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

DatabasePrincipal.RequiredProperties = ["name", "role", "type"];

/**
 * Application id - relevant only for application principal type.
 * @member {String} appId
 */
DatabasePrincipal.prototype['appId'] = undefined;

/**
 * Database principal email if exists.
 * @member {String} email
 */
DatabasePrincipal.prototype['email'] = undefined;

/**
 * Database principal fully qualified name.
 * @member {String} fqn
 */
DatabasePrincipal.prototype['fqn'] = undefined;

/**
 * Database principal name.
 * @member {String} name
 */
DatabasePrincipal.prototype['name'] = undefined;

/**
 * Database principal role.
 * @member {module:model/DatabasePrincipal.RoleEnum} role
 */
DatabasePrincipal.prototype['role'] = undefined;

/**
 * Database principal type.
 * @member {module:model/DatabasePrincipal.TypeEnum} type
 */
DatabasePrincipal.prototype['type'] = undefined;





/**
 * Allowed values for the <code>role</code> property.
 * @enum {String}
 * @readonly
 */
DatabasePrincipal['RoleEnum'] = {

    /**
     * value: "Admin"
     * @const
     */
    "Admin": "Admin",

    /**
     * value: "Ingestor"
     * @const
     */
    "Ingestor": "Ingestor",

    /**
     * value: "Monitor"
     * @const
     */
    "Monitor": "Monitor",

    /**
     * value: "User"
     * @const
     */
    "User": "User",

    /**
     * value: "UnrestrictedViewers"
     * @const
     */
    "UnrestrictedViewers": "UnrestrictedViewers",

    /**
     * value: "Viewer"
     * @const
     */
    "Viewer": "Viewer"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
DatabasePrincipal['TypeEnum'] = {

    /**
     * value: "App"
     * @const
     */
    "App": "App",

    /**
     * value: "Group"
     * @const
     */
    "Group": "Group",

    /**
     * value: "User"
     * @const
     */
    "User": "User"
};



export default DatabasePrincipal;

