/**
 * KustoManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-09-07-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.KustoManagementClient);
  }
}(this, function(expect, KustoManagementClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new KustoManagementClient.DatabasesApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DatabasesApi', function() {
    describe('databasesAddPrincipals', function() {
      it('should call databasesAddPrincipals successfully', function(done) {
        //uncomment below and update the code to test databasesAddPrincipals
        //instance.databasesAddPrincipals(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('databasesCheckNameAvailability', function() {
      it('should call databasesCheckNameAvailability successfully', function(done) {
        //uncomment below and update the code to test databasesCheckNameAvailability
        //instance.databasesCheckNameAvailability(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('databasesCreateOrUpdate', function() {
      it('should call databasesCreateOrUpdate successfully', function(done) {
        //uncomment below and update the code to test databasesCreateOrUpdate
        //instance.databasesCreateOrUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('databasesDelete', function() {
      it('should call databasesDelete successfully', function(done) {
        //uncomment below and update the code to test databasesDelete
        //instance.databasesDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('databasesGet', function() {
      it('should call databasesGet successfully', function(done) {
        //uncomment below and update the code to test databasesGet
        //instance.databasesGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('databasesListByCluster', function() {
      it('should call databasesListByCluster successfully', function(done) {
        //uncomment below and update the code to test databasesListByCluster
        //instance.databasesListByCluster(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('databasesListPrincipals', function() {
      it('should call databasesListPrincipals successfully', function(done) {
        //uncomment below and update the code to test databasesListPrincipals
        //instance.databasesListPrincipals(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('databasesRemovePrincipals', function() {
      it('should call databasesRemovePrincipals successfully', function(done) {
        //uncomment below and update the code to test databasesRemovePrincipals
        //instance.databasesRemovePrincipals(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('databasesUpdate', function() {
      it('should call databasesUpdate successfully', function(done) {
        //uncomment below and update the code to test databasesUpdate
        //instance.databasesUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
