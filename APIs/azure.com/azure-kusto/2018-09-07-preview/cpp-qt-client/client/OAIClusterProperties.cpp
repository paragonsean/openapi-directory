/**
 * KustoManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-09-07-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIClusterProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIClusterProperties::OAIClusterProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIClusterProperties::OAIClusterProperties() {
    this->initializeModel();
}

OAIClusterProperties::~OAIClusterProperties() {}

void OAIClusterProperties::initializeModel() {

    m_data_ingestion_uri_isSet = false;
    m_data_ingestion_uri_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_trusted_external_tenants_isSet = false;
    m_trusted_external_tenants_isValid = false;

    m_uri_isSet = false;
    m_uri_isValid = false;
}

void OAIClusterProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIClusterProperties::fromJsonObject(QJsonObject json) {

    m_data_ingestion_uri_isValid = ::OpenAPI::fromJsonValue(m_data_ingestion_uri, json[QString("dataIngestionUri")]);
    m_data_ingestion_uri_isSet = !json[QString("dataIngestionUri")].isNull() && m_data_ingestion_uri_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_trusted_external_tenants_isValid = ::OpenAPI::fromJsonValue(m_trusted_external_tenants, json[QString("trustedExternalTenants")]);
    m_trusted_external_tenants_isSet = !json[QString("trustedExternalTenants")].isNull() && m_trusted_external_tenants_isValid;

    m_uri_isValid = ::OpenAPI::fromJsonValue(m_uri, json[QString("uri")]);
    m_uri_isSet = !json[QString("uri")].isNull() && m_uri_isValid;
}

QString OAIClusterProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIClusterProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_data_ingestion_uri_isSet) {
        obj.insert(QString("dataIngestionUri"), ::OpenAPI::toJsonValue(m_data_ingestion_uri));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_trusted_external_tenants.size() > 0) {
        obj.insert(QString("trustedExternalTenants"), ::OpenAPI::toJsonValue(m_trusted_external_tenants));
    }
    if (m_uri_isSet) {
        obj.insert(QString("uri"), ::OpenAPI::toJsonValue(m_uri));
    }
    return obj;
}

QString OAIClusterProperties::getDataIngestionUri() const {
    return m_data_ingestion_uri;
}
void OAIClusterProperties::setDataIngestionUri(const QString &data_ingestion_uri) {
    m_data_ingestion_uri = data_ingestion_uri;
    m_data_ingestion_uri_isSet = true;
}

bool OAIClusterProperties::is_data_ingestion_uri_Set() const{
    return m_data_ingestion_uri_isSet;
}

bool OAIClusterProperties::is_data_ingestion_uri_Valid() const{
    return m_data_ingestion_uri_isValid;
}

QString OAIClusterProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIClusterProperties::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIClusterProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIClusterProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

QString OAIClusterProperties::getState() const {
    return m_state;
}
void OAIClusterProperties::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIClusterProperties::is_state_Set() const{
    return m_state_isSet;
}

bool OAIClusterProperties::is_state_Valid() const{
    return m_state_isValid;
}

QList<OAITrustedExternalTenant> OAIClusterProperties::getTrustedExternalTenants() const {
    return m_trusted_external_tenants;
}
void OAIClusterProperties::setTrustedExternalTenants(const QList<OAITrustedExternalTenant> &trusted_external_tenants) {
    m_trusted_external_tenants = trusted_external_tenants;
    m_trusted_external_tenants_isSet = true;
}

bool OAIClusterProperties::is_trusted_external_tenants_Set() const{
    return m_trusted_external_tenants_isSet;
}

bool OAIClusterProperties::is_trusted_external_tenants_Valid() const{
    return m_trusted_external_tenants_isValid;
}

QString OAIClusterProperties::getUri() const {
    return m_uri;
}
void OAIClusterProperties::setUri(const QString &uri) {
    m_uri = uri;
    m_uri_isSet = true;
}

bool OAIClusterProperties::is_uri_Set() const{
    return m_uri_isSet;
}

bool OAIClusterProperties::is_uri_Valid() const{
    return m_uri_isValid;
}

bool OAIClusterProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_ingestion_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trusted_external_tenants.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIClusterProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
