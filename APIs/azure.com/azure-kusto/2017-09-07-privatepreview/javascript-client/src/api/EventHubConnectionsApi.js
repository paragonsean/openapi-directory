/**
 * KustoManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-09-07-privatepreview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CloudError from '../model/CloudError';
import EventHubConnection from '../model/EventHubConnection';
import EventHubConnectionListResult from '../model/EventHubConnectionListResult';
import EventHubConnectionUpdate from '../model/EventHubConnectionUpdate';
import EventHubConnectionValidation from '../model/EventHubConnectionValidation';
import EventHubConnectionValidationListResult from '../model/EventHubConnectionValidationListResult';

/**
* EventHubConnections service.
* @module api/EventHubConnectionsApi
* @version 2017-09-07-privatepreview
*/
export default class EventHubConnectionsApi {

    /**
    * Constructs a new EventHubConnectionsApi. 
    * @alias module:api/EventHubConnectionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the eventHubConnectionsCreateOrUpdate operation.
     * @callback module:api/EventHubConnectionsApi~eventHubConnectionsCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventHubConnection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates or updates a Event Hub connection.
     * @param {String} resourceGroupName The name of the resource group containing the Kusto cluster.
     * @param {String} clusterName The name of the Kusto cluster.
     * @param {String} databaseName The name of the database in the Kusto cluster.
     * @param {String} eventHubConnectionName The name of the event hub connection.
     * @param {String} subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} apiVersion Client API Version.
     * @param {module:model/EventHubConnection} parameters The Event Hub connection parameters supplied to the CreateOrUpdate operation.
     * @param {module:api/EventHubConnectionsApi~eventHubConnectionsCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EventHubConnection}
     */
    eventHubConnectionsCreateOrUpdate(resourceGroupName, clusterName, databaseName, eventHubConnectionName, subscriptionId, apiVersion, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling eventHubConnectionsCreateOrUpdate");
      }
      // verify the required parameter 'clusterName' is set
      if (clusterName === undefined || clusterName === null) {
        throw new Error("Missing the required parameter 'clusterName' when calling eventHubConnectionsCreateOrUpdate");
      }
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling eventHubConnectionsCreateOrUpdate");
      }
      // verify the required parameter 'eventHubConnectionName' is set
      if (eventHubConnectionName === undefined || eventHubConnectionName === null) {
        throw new Error("Missing the required parameter 'eventHubConnectionName' when calling eventHubConnectionsCreateOrUpdate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling eventHubConnectionsCreateOrUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling eventHubConnectionsCreateOrUpdate");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling eventHubConnectionsCreateOrUpdate");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'clusterName': clusterName,
        'databaseName': databaseName,
        'eventHubConnectionName': eventHubConnectionName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EventHubConnection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/databases/{databaseName}/eventhubconnections/{eventHubConnectionName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventHubConnectionsDelete operation.
     * @callback module:api/EventHubConnectionsApi~eventHubConnectionsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the Event Hub connection with the given name.
     * @param {String} resourceGroupName The name of the resource group containing the Kusto cluster.
     * @param {String} clusterName The name of the Kusto cluster.
     * @param {String} databaseName The name of the database in the Kusto cluster.
     * @param {String} eventHubConnectionName The name of the event hub connection.
     * @param {String} subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} apiVersion Client API Version.
     * @param {module:api/EventHubConnectionsApi~eventHubConnectionsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    eventHubConnectionsDelete(resourceGroupName, clusterName, databaseName, eventHubConnectionName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling eventHubConnectionsDelete");
      }
      // verify the required parameter 'clusterName' is set
      if (clusterName === undefined || clusterName === null) {
        throw new Error("Missing the required parameter 'clusterName' when calling eventHubConnectionsDelete");
      }
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling eventHubConnectionsDelete");
      }
      // verify the required parameter 'eventHubConnectionName' is set
      if (eventHubConnectionName === undefined || eventHubConnectionName === null) {
        throw new Error("Missing the required parameter 'eventHubConnectionName' when calling eventHubConnectionsDelete");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling eventHubConnectionsDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling eventHubConnectionsDelete");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'clusterName': clusterName,
        'databaseName': databaseName,
        'eventHubConnectionName': eventHubConnectionName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/databases/{databaseName}/eventhubconnections/{eventHubConnectionName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventHubConnectionsEventhubConnectionValidation operation.
     * @callback module:api/EventHubConnectionsApi~eventHubConnectionsEventhubConnectionValidationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventHubConnectionValidationListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Checks that the Event Hub data connection parameters are valid.
     * @param {String} resourceGroupName The name of the resource group containing the Kusto cluster.
     * @param {String} clusterName The name of the Kusto cluster.
     * @param {String} databaseName The name of the database in the Kusto cluster.
     * @param {String} apiVersion Client API Version.
     * @param {String} subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:model/EventHubConnectionValidation} parameters The Event Hub connection parameters supplied to the CreateOrUpdate operation.
     * @param {module:api/EventHubConnectionsApi~eventHubConnectionsEventhubConnectionValidationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EventHubConnectionValidationListResult}
     */
    eventHubConnectionsEventhubConnectionValidation(resourceGroupName, clusterName, databaseName, apiVersion, subscriptionId, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling eventHubConnectionsEventhubConnectionValidation");
      }
      // verify the required parameter 'clusterName' is set
      if (clusterName === undefined || clusterName === null) {
        throw new Error("Missing the required parameter 'clusterName' when calling eventHubConnectionsEventhubConnectionValidation");
      }
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling eventHubConnectionsEventhubConnectionValidation");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling eventHubConnectionsEventhubConnectionValidation");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling eventHubConnectionsEventhubConnectionValidation");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling eventHubConnectionsEventhubConnectionValidation");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'clusterName': clusterName,
        'databaseName': databaseName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EventHubConnectionValidationListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/databases/{databaseName}/eventhubConnectionValidation', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventHubConnectionsGet operation.
     * @callback module:api/EventHubConnectionsApi~eventHubConnectionsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventHubConnection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns an Event Hub connection.
     * @param {String} resourceGroupName The name of the resource group containing the Kusto cluster.
     * @param {String} clusterName The name of the Kusto cluster.
     * @param {String} databaseName The name of the database in the Kusto cluster.
     * @param {String} eventHubConnectionName The name of the event hub connection.
     * @param {String} subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} apiVersion Client API Version.
     * @param {module:api/EventHubConnectionsApi~eventHubConnectionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EventHubConnection}
     */
    eventHubConnectionsGet(resourceGroupName, clusterName, databaseName, eventHubConnectionName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling eventHubConnectionsGet");
      }
      // verify the required parameter 'clusterName' is set
      if (clusterName === undefined || clusterName === null) {
        throw new Error("Missing the required parameter 'clusterName' when calling eventHubConnectionsGet");
      }
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling eventHubConnectionsGet");
      }
      // verify the required parameter 'eventHubConnectionName' is set
      if (eventHubConnectionName === undefined || eventHubConnectionName === null) {
        throw new Error("Missing the required parameter 'eventHubConnectionName' when calling eventHubConnectionsGet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling eventHubConnectionsGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling eventHubConnectionsGet");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'clusterName': clusterName,
        'databaseName': databaseName,
        'eventHubConnectionName': eventHubConnectionName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EventHubConnection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/databases/{databaseName}/eventhubconnections/{eventHubConnectionName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventHubConnectionsListByDatabase operation.
     * @callback module:api/EventHubConnectionsApi~eventHubConnectionsListByDatabaseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventHubConnectionListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the list of Event Hub connections of the given Kusto database.
     * @param {String} resourceGroupName The name of the resource group containing the Kusto cluster.
     * @param {String} clusterName The name of the Kusto cluster.
     * @param {String} databaseName The name of the database in the Kusto cluster.
     * @param {String} subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} apiVersion Client API Version.
     * @param {module:api/EventHubConnectionsApi~eventHubConnectionsListByDatabaseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EventHubConnectionListResult}
     */
    eventHubConnectionsListByDatabase(resourceGroupName, clusterName, databaseName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling eventHubConnectionsListByDatabase");
      }
      // verify the required parameter 'clusterName' is set
      if (clusterName === undefined || clusterName === null) {
        throw new Error("Missing the required parameter 'clusterName' when calling eventHubConnectionsListByDatabase");
      }
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling eventHubConnectionsListByDatabase");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling eventHubConnectionsListByDatabase");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling eventHubConnectionsListByDatabase");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'clusterName': clusterName,
        'databaseName': databaseName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EventHubConnectionListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/databases/{databaseName}/eventhubconnections', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventHubConnectionsUpdate operation.
     * @callback module:api/EventHubConnectionsApi~eventHubConnectionsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventHubConnection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a Event Hub connection.
     * @param {String} resourceGroupName The name of the resource group containing the Kusto cluster.
     * @param {String} clusterName The name of the Kusto cluster.
     * @param {String} databaseName The name of the database in the Kusto cluster.
     * @param {String} eventHubConnectionName The name of the event hub connection.
     * @param {String} subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} apiVersion Client API Version.
     * @param {module:model/EventHubConnectionUpdate} parameters The Event Hub connection parameters supplied to the Update operation.
     * @param {module:api/EventHubConnectionsApi~eventHubConnectionsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EventHubConnection}
     */
    eventHubConnectionsUpdate(resourceGroupName, clusterName, databaseName, eventHubConnectionName, subscriptionId, apiVersion, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling eventHubConnectionsUpdate");
      }
      // verify the required parameter 'clusterName' is set
      if (clusterName === undefined || clusterName === null) {
        throw new Error("Missing the required parameter 'clusterName' when calling eventHubConnectionsUpdate");
      }
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling eventHubConnectionsUpdate");
      }
      // verify the required parameter 'eventHubConnectionName' is set
      if (eventHubConnectionName === undefined || eventHubConnectionName === null) {
        throw new Error("Missing the required parameter 'eventHubConnectionName' when calling eventHubConnectionsUpdate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling eventHubConnectionsUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling eventHubConnectionsUpdate");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling eventHubConnectionsUpdate");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'clusterName': clusterName,
        'databaseName': databaseName,
        'eventHubConnectionName': eventHubConnectionName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EventHubConnection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/databases/{databaseName}/eventhubconnections/{eventHubConnectionName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
