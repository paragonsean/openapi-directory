/**
 * KustoManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-09-07-privatepreview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CheckNameResult from '../model/CheckNameResult';
import CloudError from '../model/CloudError';
import Database from '../model/Database';
import DatabaseCheckNameRequest from '../model/DatabaseCheckNameRequest';
import DatabaseListResult from '../model/DatabaseListResult';
import DatabasePrincipalListRequest from '../model/DatabasePrincipalListRequest';
import DatabasePrincipalListResult from '../model/DatabasePrincipalListResult';
import DatabaseUpdate from '../model/DatabaseUpdate';

/**
* Databases service.
* @module api/DatabasesApi
* @version 2017-09-07-privatepreview
*/
export default class DatabasesApi {

    /**
    * Constructs a new DatabasesApi. 
    * @alias module:api/DatabasesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the databasesAddPrincipals operation.
     * @callback module:api/DatabasesApi~databasesAddPrincipalsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DatabasePrincipalListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add Database principals permissions.
     * @param {String} resourceGroupName The name of the resource group containing the Kusto cluster.
     * @param {String} clusterName The name of the Kusto cluster.
     * @param {String} databaseName The name of the database in the Kusto cluster.
     * @param {String} subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} apiVersion Client API Version.
     * @param {module:model/DatabasePrincipalListRequest} databasePrincipalsToAdd List of database principals to add.
     * @param {module:api/DatabasesApi~databasesAddPrincipalsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DatabasePrincipalListResult}
     */
    databasesAddPrincipals(resourceGroupName, clusterName, databaseName, subscriptionId, apiVersion, databasePrincipalsToAdd, callback) {
      let postBody = databasePrincipalsToAdd;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling databasesAddPrincipals");
      }
      // verify the required parameter 'clusterName' is set
      if (clusterName === undefined || clusterName === null) {
        throw new Error("Missing the required parameter 'clusterName' when calling databasesAddPrincipals");
      }
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling databasesAddPrincipals");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling databasesAddPrincipals");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling databasesAddPrincipals");
      }
      // verify the required parameter 'databasePrincipalsToAdd' is set
      if (databasePrincipalsToAdd === undefined || databasePrincipalsToAdd === null) {
        throw new Error("Missing the required parameter 'databasePrincipalsToAdd' when calling databasesAddPrincipals");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'clusterName': clusterName,
        'databaseName': databaseName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DatabasePrincipalListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/databases/{databaseName}/addPrincipals', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the databasesCheckNameAvailability operation.
     * @callback module:api/DatabasesApi~databasesCheckNameAvailabilityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CheckNameResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Checks that the database name is valid and is not already in use.
     * @param {String} resourceGroupName The name of the resource group containing the Kusto cluster.
     * @param {String} clusterName The name of the Kusto cluster.
     * @param {String} apiVersion Client API Version.
     * @param {String} subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:model/DatabaseCheckNameRequest} databaseName The name of the database.
     * @param {module:api/DatabasesApi~databasesCheckNameAvailabilityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CheckNameResult}
     */
    databasesCheckNameAvailability(resourceGroupName, clusterName, apiVersion, subscriptionId, databaseName, callback) {
      let postBody = databaseName;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling databasesCheckNameAvailability");
      }
      // verify the required parameter 'clusterName' is set
      if (clusterName === undefined || clusterName === null) {
        throw new Error("Missing the required parameter 'clusterName' when calling databasesCheckNameAvailability");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling databasesCheckNameAvailability");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling databasesCheckNameAvailability");
      }
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling databasesCheckNameAvailability");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'clusterName': clusterName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CheckNameResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/checkNameAvailability', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the databasesCreateOrUpdate operation.
     * @callback module:api/DatabasesApi~databasesCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Database} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates or updates a database.
     * @param {String} resourceGroupName The name of the resource group containing the Kusto cluster.
     * @param {String} clusterName The name of the Kusto cluster.
     * @param {String} databaseName The name of the database in the Kusto cluster.
     * @param {String} subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} apiVersion Client API Version.
     * @param {module:model/Database} parameters The database parameters supplied to the CreateOrUpdate operation.
     * @param {module:api/DatabasesApi~databasesCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Database}
     */
    databasesCreateOrUpdate(resourceGroupName, clusterName, databaseName, subscriptionId, apiVersion, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling databasesCreateOrUpdate");
      }
      // verify the required parameter 'clusterName' is set
      if (clusterName === undefined || clusterName === null) {
        throw new Error("Missing the required parameter 'clusterName' when calling databasesCreateOrUpdate");
      }
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling databasesCreateOrUpdate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling databasesCreateOrUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling databasesCreateOrUpdate");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling databasesCreateOrUpdate");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'clusterName': clusterName,
        'databaseName': databaseName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Database;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/databases/{databaseName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the databasesDelete operation.
     * @callback module:api/DatabasesApi~databasesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the database with the given name.
     * @param {String} resourceGroupName The name of the resource group containing the Kusto cluster.
     * @param {String} clusterName The name of the Kusto cluster.
     * @param {String} databaseName The name of the database in the Kusto cluster.
     * @param {String} subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} apiVersion Client API Version.
     * @param {module:api/DatabasesApi~databasesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    databasesDelete(resourceGroupName, clusterName, databaseName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling databasesDelete");
      }
      // verify the required parameter 'clusterName' is set
      if (clusterName === undefined || clusterName === null) {
        throw new Error("Missing the required parameter 'clusterName' when calling databasesDelete");
      }
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling databasesDelete");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling databasesDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling databasesDelete");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'clusterName': clusterName,
        'databaseName': databaseName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/databases/{databaseName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the databasesGet operation.
     * @callback module:api/DatabasesApi~databasesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Database} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a database.
     * @param {String} resourceGroupName The name of the resource group containing the Kusto cluster.
     * @param {String} clusterName The name of the Kusto cluster.
     * @param {String} databaseName The name of the database in the Kusto cluster.
     * @param {String} subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} apiVersion Client API Version.
     * @param {module:api/DatabasesApi~databasesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Database}
     */
    databasesGet(resourceGroupName, clusterName, databaseName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling databasesGet");
      }
      // verify the required parameter 'clusterName' is set
      if (clusterName === undefined || clusterName === null) {
        throw new Error("Missing the required parameter 'clusterName' when calling databasesGet");
      }
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling databasesGet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling databasesGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling databasesGet");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'clusterName': clusterName,
        'databaseName': databaseName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Database;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/databases/{databaseName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the databasesListByCluster operation.
     * @callback module:api/DatabasesApi~databasesListByClusterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DatabaseListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the list of databases of the given Kusto cluster.
     * @param {String} resourceGroupName The name of the resource group containing the Kusto cluster.
     * @param {String} clusterName The name of the Kusto cluster.
     * @param {String} subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} apiVersion Client API Version.
     * @param {module:api/DatabasesApi~databasesListByClusterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DatabaseListResult}
     */
    databasesListByCluster(resourceGroupName, clusterName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling databasesListByCluster");
      }
      // verify the required parameter 'clusterName' is set
      if (clusterName === undefined || clusterName === null) {
        throw new Error("Missing the required parameter 'clusterName' when calling databasesListByCluster");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling databasesListByCluster");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling databasesListByCluster");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'clusterName': clusterName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DatabaseListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/databases', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the databasesListPrincipals operation.
     * @callback module:api/DatabasesApi~databasesListPrincipalsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DatabasePrincipalListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of database principals of the given Kusto cluster and database.
     * @param {String} resourceGroupName The name of the resource group containing the Kusto cluster.
     * @param {String} clusterName The name of the Kusto cluster.
     * @param {String} databaseName The name of the database in the Kusto cluster.
     * @param {String} subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} apiVersion Client API Version.
     * @param {module:api/DatabasesApi~databasesListPrincipalsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DatabasePrincipalListResult}
     */
    databasesListPrincipals(resourceGroupName, clusterName, databaseName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling databasesListPrincipals");
      }
      // verify the required parameter 'clusterName' is set
      if (clusterName === undefined || clusterName === null) {
        throw new Error("Missing the required parameter 'clusterName' when calling databasesListPrincipals");
      }
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling databasesListPrincipals");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling databasesListPrincipals");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling databasesListPrincipals");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'clusterName': clusterName,
        'databaseName': databaseName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DatabasePrincipalListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/databases/{databaseName}/listPrincipals', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the databasesRemovePrincipals operation.
     * @callback module:api/DatabasesApi~databasesRemovePrincipalsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DatabasePrincipalListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove Database principals permissions.
     * @param {String} resourceGroupName The name of the resource group containing the Kusto cluster.
     * @param {String} clusterName The name of the Kusto cluster.
     * @param {String} databaseName The name of the database in the Kusto cluster.
     * @param {String} subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} apiVersion Client API Version.
     * @param {module:model/DatabasePrincipalListRequest} databasePrincipalsToRemove List of database principals to remove.
     * @param {module:api/DatabasesApi~databasesRemovePrincipalsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DatabasePrincipalListResult}
     */
    databasesRemovePrincipals(resourceGroupName, clusterName, databaseName, subscriptionId, apiVersion, databasePrincipalsToRemove, callback) {
      let postBody = databasePrincipalsToRemove;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling databasesRemovePrincipals");
      }
      // verify the required parameter 'clusterName' is set
      if (clusterName === undefined || clusterName === null) {
        throw new Error("Missing the required parameter 'clusterName' when calling databasesRemovePrincipals");
      }
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling databasesRemovePrincipals");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling databasesRemovePrincipals");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling databasesRemovePrincipals");
      }
      // verify the required parameter 'databasePrincipalsToRemove' is set
      if (databasePrincipalsToRemove === undefined || databasePrincipalsToRemove === null) {
        throw new Error("Missing the required parameter 'databasePrincipalsToRemove' when calling databasesRemovePrincipals");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'clusterName': clusterName,
        'databaseName': databaseName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DatabasePrincipalListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/databases/{databaseName}/removePrincipals', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the databasesUpdate operation.
     * @callback module:api/DatabasesApi~databasesUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Database} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a database.
     * @param {String} resourceGroupName The name of the resource group containing the Kusto cluster.
     * @param {String} clusterName The name of the Kusto cluster.
     * @param {String} databaseName The name of the database in the Kusto cluster.
     * @param {String} subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} apiVersion Client API Version.
     * @param {module:model/DatabaseUpdate} parameters The database parameters supplied to the Update operation.
     * @param {module:api/DatabasesApi~databasesUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Database}
     */
    databasesUpdate(resourceGroupName, clusterName, databaseName, subscriptionId, apiVersion, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling databasesUpdate");
      }
      // verify the required parameter 'clusterName' is set
      if (clusterName === undefined || clusterName === null) {
        throw new Error("Missing the required parameter 'clusterName' when calling databasesUpdate");
      }
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling databasesUpdate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling databasesUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling databasesUpdate");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling databasesUpdate");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'clusterName': clusterName,
        'databaseName': databaseName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Database;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/databases/{databaseName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
