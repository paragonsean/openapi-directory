/**
 * KustoManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-09-07-privatepreview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DatabaseStatistics from './DatabaseStatistics';

/**
 * The DatabaseProperties model module.
 * @module model/DatabaseProperties
 * @version 2017-09-07-privatepreview
 */
class DatabaseProperties {
    /**
     * Constructs a new <code>DatabaseProperties</code>.
     * Class representing the Kusto database properties.
     * @alias module:model/DatabaseProperties
     * @param softDeletePeriodInDays {Number} The number of days data should be kept before it stops being accessible to queries.
     */
    constructor(softDeletePeriodInDays) { 
        
        DatabaseProperties.initialize(this, softDeletePeriodInDays);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, softDeletePeriodInDays) { 
        obj['softDeletePeriodInDays'] = softDeletePeriodInDays;
    }

    /**
     * Constructs a <code>DatabaseProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DatabaseProperties} obj Optional instance to populate.
     * @return {module:model/DatabaseProperties} The populated <code>DatabaseProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DatabaseProperties();

            if (data.hasOwnProperty('hotCachePeriodInDays')) {
                obj['hotCachePeriodInDays'] = ApiClient.convertToType(data['hotCachePeriodInDays'], 'Number');
            }
            if (data.hasOwnProperty('provisioningState')) {
                obj['provisioningState'] = ApiClient.convertToType(data['provisioningState'], 'String');
            }
            if (data.hasOwnProperty('softDeletePeriodInDays')) {
                obj['softDeletePeriodInDays'] = ApiClient.convertToType(data['softDeletePeriodInDays'], 'Number');
            }
            if (data.hasOwnProperty('statistics')) {
                obj['statistics'] = DatabaseStatistics.constructFromObject(data['statistics']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DatabaseProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DatabaseProperties</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DatabaseProperties.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['provisioningState'] && !(typeof data['provisioningState'] === 'string' || data['provisioningState'] instanceof String)) {
            throw new Error("Expected the field `provisioningState` to be a primitive type in the JSON string but got " + data['provisioningState']);
        }
        // validate the optional field `statistics`
        if (data['statistics']) { // data not null
          DatabaseStatistics.validateJSON(data['statistics']);
        }

        return true;
    }


}

DatabaseProperties.RequiredProperties = ["softDeletePeriodInDays"];

/**
 * The number of days of data that should be kept in cache for fast queries.
 * @member {Number} hotCachePeriodInDays
 */
DatabaseProperties.prototype['hotCachePeriodInDays'] = undefined;

/**
 * The provisioned state of the resource.
 * @member {module:model/DatabaseProperties.ProvisioningStateEnum} provisioningState
 */
DatabaseProperties.prototype['provisioningState'] = undefined;

/**
 * The number of days data should be kept before it stops being accessible to queries.
 * @member {Number} softDeletePeriodInDays
 */
DatabaseProperties.prototype['softDeletePeriodInDays'] = undefined;

/**
 * @member {module:model/DatabaseStatistics} statistics
 */
DatabaseProperties.prototype['statistics'] = undefined;





/**
 * Allowed values for the <code>provisioningState</code> property.
 * @enum {String}
 * @readonly
 */
DatabaseProperties['ProvisioningStateEnum'] = {

    /**
     * value: "Running"
     * @const
     */
    "Running": "Running",

    /**
     * value: "Creating"
     * @const
     */
    "Creating": "Creating",

    /**
     * value: "Deleting"
     * @const
     */
    "Deleting": "Deleting",

    /**
     * value: "Succeeded"
     * @const
     */
    "Succeeded": "Succeeded",

    /**
     * value: "Failed"
     * @const
     */
    "Failed": "Failed"
};



export default DatabaseProperties;

