/*
 * KustoManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-09-07-privatepreview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CloudError;
import org.openapitools.client.model.EventHubConnection;
import org.openapitools.client.model.EventHubConnectionListResult;
import org.openapitools.client.model.EventHubConnectionUpdate;
import org.openapitools.client.model.EventHubConnectionValidation;
import org.openapitools.client.model.EventHubConnectionValidationListResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class EventHubConnectionsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public EventHubConnectionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public EventHubConnectionsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for eventHubConnectionsCreateOrUpdate
     * @param resourceGroupName The name of the resource group containing the Kusto cluster. (required)
     * @param clusterName The name of the Kusto cluster. (required)
     * @param databaseName The name of the database in the Kusto cluster. (required)
     * @param eventHubConnectionName The name of the event hub connection. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API Version. (required)
     * @param parameters The Event Hub connection parameters supplied to the CreateOrUpdate operation. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the Event Hub connection. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Successfully created the Event Hub connection. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted the create Event Hub connection request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventHubConnectionsCreateOrUpdateCall(String resourceGroupName, String clusterName, String databaseName, String eventHubConnectionName, String subscriptionId, String apiVersion, EventHubConnection parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/databases/{databaseName}/eventhubconnections/{eventHubConnectionName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "clusterName" + "}", localVarApiClient.escapeString(clusterName.toString()))
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()))
            .replace("{" + "eventHubConnectionName" + "}", localVarApiClient.escapeString(eventHubConnectionName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eventHubConnectionsCreateOrUpdateValidateBeforeCall(String resourceGroupName, String clusterName, String databaseName, String eventHubConnectionName, String subscriptionId, String apiVersion, EventHubConnection parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling eventHubConnectionsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'clusterName' is set
        if (clusterName == null) {
            throw new ApiException("Missing the required parameter 'clusterName' when calling eventHubConnectionsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling eventHubConnectionsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'eventHubConnectionName' is set
        if (eventHubConnectionName == null) {
            throw new ApiException("Missing the required parameter 'eventHubConnectionName' when calling eventHubConnectionsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling eventHubConnectionsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling eventHubConnectionsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling eventHubConnectionsCreateOrUpdate(Async)");
        }

        return eventHubConnectionsCreateOrUpdateCall(resourceGroupName, clusterName, databaseName, eventHubConnectionName, subscriptionId, apiVersion, parameters, _callback);

    }

    /**
     * 
     * Creates or updates a Event Hub connection.
     * @param resourceGroupName The name of the resource group containing the Kusto cluster. (required)
     * @param clusterName The name of the Kusto cluster. (required)
     * @param databaseName The name of the database in the Kusto cluster. (required)
     * @param eventHubConnectionName The name of the event hub connection. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API Version. (required)
     * @param parameters The Event Hub connection parameters supplied to the CreateOrUpdate operation. (required)
     * @return EventHubConnection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the Event Hub connection. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Successfully created the Event Hub connection. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted the create Event Hub connection request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public EventHubConnection eventHubConnectionsCreateOrUpdate(String resourceGroupName, String clusterName, String databaseName, String eventHubConnectionName, String subscriptionId, String apiVersion, EventHubConnection parameters) throws ApiException {
        ApiResponse<EventHubConnection> localVarResp = eventHubConnectionsCreateOrUpdateWithHttpInfo(resourceGroupName, clusterName, databaseName, eventHubConnectionName, subscriptionId, apiVersion, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates or updates a Event Hub connection.
     * @param resourceGroupName The name of the resource group containing the Kusto cluster. (required)
     * @param clusterName The name of the Kusto cluster. (required)
     * @param databaseName The name of the database in the Kusto cluster. (required)
     * @param eventHubConnectionName The name of the event hub connection. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API Version. (required)
     * @param parameters The Event Hub connection parameters supplied to the CreateOrUpdate operation. (required)
     * @return ApiResponse&lt;EventHubConnection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the Event Hub connection. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Successfully created the Event Hub connection. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted the create Event Hub connection request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EventHubConnection> eventHubConnectionsCreateOrUpdateWithHttpInfo(String resourceGroupName, String clusterName, String databaseName, String eventHubConnectionName, String subscriptionId, String apiVersion, EventHubConnection parameters) throws ApiException {
        okhttp3.Call localVarCall = eventHubConnectionsCreateOrUpdateValidateBeforeCall(resourceGroupName, clusterName, databaseName, eventHubConnectionName, subscriptionId, apiVersion, parameters, null);
        Type localVarReturnType = new TypeToken<EventHubConnection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates or updates a Event Hub connection.
     * @param resourceGroupName The name of the resource group containing the Kusto cluster. (required)
     * @param clusterName The name of the Kusto cluster. (required)
     * @param databaseName The name of the database in the Kusto cluster. (required)
     * @param eventHubConnectionName The name of the event hub connection. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API Version. (required)
     * @param parameters The Event Hub connection parameters supplied to the CreateOrUpdate operation. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the Event Hub connection. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Successfully created the Event Hub connection. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted the create Event Hub connection request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventHubConnectionsCreateOrUpdateAsync(String resourceGroupName, String clusterName, String databaseName, String eventHubConnectionName, String subscriptionId, String apiVersion, EventHubConnection parameters, final ApiCallback<EventHubConnection> _callback) throws ApiException {

        okhttp3.Call localVarCall = eventHubConnectionsCreateOrUpdateValidateBeforeCall(resourceGroupName, clusterName, databaseName, eventHubConnectionName, subscriptionId, apiVersion, parameters, _callback);
        Type localVarReturnType = new TypeToken<EventHubConnection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for eventHubConnectionsDelete
     * @param resourceGroupName The name of the resource group containing the Kusto cluster. (required)
     * @param clusterName The name of the Kusto cluster. (required)
     * @param databaseName The name of the database in the Kusto cluster. (required)
     * @param eventHubConnectionName The name of the event hub connection. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API Version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted the Event Hub connection. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The specified Event Hub connection does not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventHubConnectionsDeleteCall(String resourceGroupName, String clusterName, String databaseName, String eventHubConnectionName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/databases/{databaseName}/eventhubconnections/{eventHubConnectionName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "clusterName" + "}", localVarApiClient.escapeString(clusterName.toString()))
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()))
            .replace("{" + "eventHubConnectionName" + "}", localVarApiClient.escapeString(eventHubConnectionName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eventHubConnectionsDeleteValidateBeforeCall(String resourceGroupName, String clusterName, String databaseName, String eventHubConnectionName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling eventHubConnectionsDelete(Async)");
        }

        // verify the required parameter 'clusterName' is set
        if (clusterName == null) {
            throw new ApiException("Missing the required parameter 'clusterName' when calling eventHubConnectionsDelete(Async)");
        }

        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling eventHubConnectionsDelete(Async)");
        }

        // verify the required parameter 'eventHubConnectionName' is set
        if (eventHubConnectionName == null) {
            throw new ApiException("Missing the required parameter 'eventHubConnectionName' when calling eventHubConnectionsDelete(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling eventHubConnectionsDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling eventHubConnectionsDelete(Async)");
        }

        return eventHubConnectionsDeleteCall(resourceGroupName, clusterName, databaseName, eventHubConnectionName, subscriptionId, apiVersion, _callback);

    }

    /**
     * 
     * Deletes the Event Hub connection with the given name.
     * @param resourceGroupName The name of the resource group containing the Kusto cluster. (required)
     * @param clusterName The name of the Kusto cluster. (required)
     * @param databaseName The name of the database in the Kusto cluster. (required)
     * @param eventHubConnectionName The name of the event hub connection. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API Version. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted the Event Hub connection. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The specified Event Hub connection does not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public void eventHubConnectionsDelete(String resourceGroupName, String clusterName, String databaseName, String eventHubConnectionName, String subscriptionId, String apiVersion) throws ApiException {
        eventHubConnectionsDeleteWithHttpInfo(resourceGroupName, clusterName, databaseName, eventHubConnectionName, subscriptionId, apiVersion);
    }

    /**
     * 
     * Deletes the Event Hub connection with the given name.
     * @param resourceGroupName The name of the resource group containing the Kusto cluster. (required)
     * @param clusterName The name of the Kusto cluster. (required)
     * @param databaseName The name of the database in the Kusto cluster. (required)
     * @param eventHubConnectionName The name of the event hub connection. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API Version. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted the Event Hub connection. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The specified Event Hub connection does not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> eventHubConnectionsDeleteWithHttpInfo(String resourceGroupName, String clusterName, String databaseName, String eventHubConnectionName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = eventHubConnectionsDeleteValidateBeforeCall(resourceGroupName, clusterName, databaseName, eventHubConnectionName, subscriptionId, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes the Event Hub connection with the given name.
     * @param resourceGroupName The name of the resource group containing the Kusto cluster. (required)
     * @param clusterName The name of the Kusto cluster. (required)
     * @param databaseName The name of the database in the Kusto cluster. (required)
     * @param eventHubConnectionName The name of the event hub connection. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API Version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted the Event Hub connection. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The specified Event Hub connection does not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventHubConnectionsDeleteAsync(String resourceGroupName, String clusterName, String databaseName, String eventHubConnectionName, String subscriptionId, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = eventHubConnectionsDeleteValidateBeforeCall(resourceGroupName, clusterName, databaseName, eventHubConnectionName, subscriptionId, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for eventHubConnectionsEventhubConnectionValidation
     * @param resourceGroupName The name of the resource group containing the Kusto cluster. (required)
     * @param clusterName The name of the Kusto cluster. (required)
     * @param databaseName The name of the database in the Kusto cluster. (required)
     * @param apiVersion Client API Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters The Event Hub connection parameters supplied to the CreateOrUpdate operation. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- Operation to check the kusto resource name availability was successful. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventHubConnectionsEventhubConnectionValidationCall(String resourceGroupName, String clusterName, String databaseName, String apiVersion, String subscriptionId, EventHubConnectionValidation parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/databases/{databaseName}/eventhubConnectionValidation"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "clusterName" + "}", localVarApiClient.escapeString(clusterName.toString()))
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eventHubConnectionsEventhubConnectionValidationValidateBeforeCall(String resourceGroupName, String clusterName, String databaseName, String apiVersion, String subscriptionId, EventHubConnectionValidation parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling eventHubConnectionsEventhubConnectionValidation(Async)");
        }

        // verify the required parameter 'clusterName' is set
        if (clusterName == null) {
            throw new ApiException("Missing the required parameter 'clusterName' when calling eventHubConnectionsEventhubConnectionValidation(Async)");
        }

        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling eventHubConnectionsEventhubConnectionValidation(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling eventHubConnectionsEventhubConnectionValidation(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling eventHubConnectionsEventhubConnectionValidation(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling eventHubConnectionsEventhubConnectionValidation(Async)");
        }

        return eventHubConnectionsEventhubConnectionValidationCall(resourceGroupName, clusterName, databaseName, apiVersion, subscriptionId, parameters, _callback);

    }

    /**
     * 
     * Checks that the Event Hub data connection parameters are valid.
     * @param resourceGroupName The name of the resource group containing the Kusto cluster. (required)
     * @param clusterName The name of the Kusto cluster. (required)
     * @param databaseName The name of the database in the Kusto cluster. (required)
     * @param apiVersion Client API Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters The Event Hub connection parameters supplied to the CreateOrUpdate operation. (required)
     * @return EventHubConnectionValidationListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- Operation to check the kusto resource name availability was successful. </td><td>  -  </td></tr>
     </table>
     */
    public EventHubConnectionValidationListResult eventHubConnectionsEventhubConnectionValidation(String resourceGroupName, String clusterName, String databaseName, String apiVersion, String subscriptionId, EventHubConnectionValidation parameters) throws ApiException {
        ApiResponse<EventHubConnectionValidationListResult> localVarResp = eventHubConnectionsEventhubConnectionValidationWithHttpInfo(resourceGroupName, clusterName, databaseName, apiVersion, subscriptionId, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Checks that the Event Hub data connection parameters are valid.
     * @param resourceGroupName The name of the resource group containing the Kusto cluster. (required)
     * @param clusterName The name of the Kusto cluster. (required)
     * @param databaseName The name of the database in the Kusto cluster. (required)
     * @param apiVersion Client API Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters The Event Hub connection parameters supplied to the CreateOrUpdate operation. (required)
     * @return ApiResponse&lt;EventHubConnectionValidationListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- Operation to check the kusto resource name availability was successful. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EventHubConnectionValidationListResult> eventHubConnectionsEventhubConnectionValidationWithHttpInfo(String resourceGroupName, String clusterName, String databaseName, String apiVersion, String subscriptionId, EventHubConnectionValidation parameters) throws ApiException {
        okhttp3.Call localVarCall = eventHubConnectionsEventhubConnectionValidationValidateBeforeCall(resourceGroupName, clusterName, databaseName, apiVersion, subscriptionId, parameters, null);
        Type localVarReturnType = new TypeToken<EventHubConnectionValidationListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Checks that the Event Hub data connection parameters are valid.
     * @param resourceGroupName The name of the resource group containing the Kusto cluster. (required)
     * @param clusterName The name of the Kusto cluster. (required)
     * @param databaseName The name of the database in the Kusto cluster. (required)
     * @param apiVersion Client API Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters The Event Hub connection parameters supplied to the CreateOrUpdate operation. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- Operation to check the kusto resource name availability was successful. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventHubConnectionsEventhubConnectionValidationAsync(String resourceGroupName, String clusterName, String databaseName, String apiVersion, String subscriptionId, EventHubConnectionValidation parameters, final ApiCallback<EventHubConnectionValidationListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = eventHubConnectionsEventhubConnectionValidationValidateBeforeCall(resourceGroupName, clusterName, databaseName, apiVersion, subscriptionId, parameters, _callback);
        Type localVarReturnType = new TypeToken<EventHubConnectionValidationListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for eventHubConnectionsGet
     * @param resourceGroupName The name of the resource group containing the Kusto cluster. (required)
     * @param clusterName The name of the Kusto cluster. (required)
     * @param databaseName The name of the database in the Kusto cluster. (required)
     * @param eventHubConnectionName The name of the event hub connection. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API Version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the specified Event Hub connection. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventHubConnectionsGetCall(String resourceGroupName, String clusterName, String databaseName, String eventHubConnectionName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/databases/{databaseName}/eventhubconnections/{eventHubConnectionName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "clusterName" + "}", localVarApiClient.escapeString(clusterName.toString()))
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()))
            .replace("{" + "eventHubConnectionName" + "}", localVarApiClient.escapeString(eventHubConnectionName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eventHubConnectionsGetValidateBeforeCall(String resourceGroupName, String clusterName, String databaseName, String eventHubConnectionName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling eventHubConnectionsGet(Async)");
        }

        // verify the required parameter 'clusterName' is set
        if (clusterName == null) {
            throw new ApiException("Missing the required parameter 'clusterName' when calling eventHubConnectionsGet(Async)");
        }

        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling eventHubConnectionsGet(Async)");
        }

        // verify the required parameter 'eventHubConnectionName' is set
        if (eventHubConnectionName == null) {
            throw new ApiException("Missing the required parameter 'eventHubConnectionName' when calling eventHubConnectionsGet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling eventHubConnectionsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling eventHubConnectionsGet(Async)");
        }

        return eventHubConnectionsGetCall(resourceGroupName, clusterName, databaseName, eventHubConnectionName, subscriptionId, apiVersion, _callback);

    }

    /**
     * 
     * Returns an Event Hub connection.
     * @param resourceGroupName The name of the resource group containing the Kusto cluster. (required)
     * @param clusterName The name of the Kusto cluster. (required)
     * @param databaseName The name of the database in the Kusto cluster. (required)
     * @param eventHubConnectionName The name of the event hub connection. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API Version. (required)
     * @return EventHubConnection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the specified Event Hub connection. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public EventHubConnection eventHubConnectionsGet(String resourceGroupName, String clusterName, String databaseName, String eventHubConnectionName, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<EventHubConnection> localVarResp = eventHubConnectionsGetWithHttpInfo(resourceGroupName, clusterName, databaseName, eventHubConnectionName, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns an Event Hub connection.
     * @param resourceGroupName The name of the resource group containing the Kusto cluster. (required)
     * @param clusterName The name of the Kusto cluster. (required)
     * @param databaseName The name of the database in the Kusto cluster. (required)
     * @param eventHubConnectionName The name of the event hub connection. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API Version. (required)
     * @return ApiResponse&lt;EventHubConnection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the specified Event Hub connection. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EventHubConnection> eventHubConnectionsGetWithHttpInfo(String resourceGroupName, String clusterName, String databaseName, String eventHubConnectionName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = eventHubConnectionsGetValidateBeforeCall(resourceGroupName, clusterName, databaseName, eventHubConnectionName, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<EventHubConnection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns an Event Hub connection.
     * @param resourceGroupName The name of the resource group containing the Kusto cluster. (required)
     * @param clusterName The name of the Kusto cluster. (required)
     * @param databaseName The name of the database in the Kusto cluster. (required)
     * @param eventHubConnectionName The name of the event hub connection. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API Version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the specified Event Hub connection. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventHubConnectionsGetAsync(String resourceGroupName, String clusterName, String databaseName, String eventHubConnectionName, String subscriptionId, String apiVersion, final ApiCallback<EventHubConnection> _callback) throws ApiException {

        okhttp3.Call localVarCall = eventHubConnectionsGetValidateBeforeCall(resourceGroupName, clusterName, databaseName, eventHubConnectionName, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<EventHubConnection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for eventHubConnectionsListByDatabase
     * @param resourceGroupName The name of the resource group containing the Kusto cluster. (required)
     * @param clusterName The name of the Kusto cluster. (required)
     * @param databaseName The name of the database in the Kusto cluster. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API Version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of Event Hub connections. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventHubConnectionsListByDatabaseCall(String resourceGroupName, String clusterName, String databaseName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/databases/{databaseName}/eventhubconnections"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "clusterName" + "}", localVarApiClient.escapeString(clusterName.toString()))
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eventHubConnectionsListByDatabaseValidateBeforeCall(String resourceGroupName, String clusterName, String databaseName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling eventHubConnectionsListByDatabase(Async)");
        }

        // verify the required parameter 'clusterName' is set
        if (clusterName == null) {
            throw new ApiException("Missing the required parameter 'clusterName' when calling eventHubConnectionsListByDatabase(Async)");
        }

        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling eventHubConnectionsListByDatabase(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling eventHubConnectionsListByDatabase(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling eventHubConnectionsListByDatabase(Async)");
        }

        return eventHubConnectionsListByDatabaseCall(resourceGroupName, clusterName, databaseName, subscriptionId, apiVersion, _callback);

    }

    /**
     * 
     * Returns the list of Event Hub connections of the given Kusto database.
     * @param resourceGroupName The name of the resource group containing the Kusto cluster. (required)
     * @param clusterName The name of the Kusto cluster. (required)
     * @param databaseName The name of the database in the Kusto cluster. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API Version. (required)
     * @return EventHubConnectionListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of Event Hub connections. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public EventHubConnectionListResult eventHubConnectionsListByDatabase(String resourceGroupName, String clusterName, String databaseName, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<EventHubConnectionListResult> localVarResp = eventHubConnectionsListByDatabaseWithHttpInfo(resourceGroupName, clusterName, databaseName, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns the list of Event Hub connections of the given Kusto database.
     * @param resourceGroupName The name of the resource group containing the Kusto cluster. (required)
     * @param clusterName The name of the Kusto cluster. (required)
     * @param databaseName The name of the database in the Kusto cluster. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API Version. (required)
     * @return ApiResponse&lt;EventHubConnectionListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of Event Hub connections. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EventHubConnectionListResult> eventHubConnectionsListByDatabaseWithHttpInfo(String resourceGroupName, String clusterName, String databaseName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = eventHubConnectionsListByDatabaseValidateBeforeCall(resourceGroupName, clusterName, databaseName, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<EventHubConnectionListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the list of Event Hub connections of the given Kusto database.
     * @param resourceGroupName The name of the resource group containing the Kusto cluster. (required)
     * @param clusterName The name of the Kusto cluster. (required)
     * @param databaseName The name of the database in the Kusto cluster. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API Version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of Event Hub connections. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventHubConnectionsListByDatabaseAsync(String resourceGroupName, String clusterName, String databaseName, String subscriptionId, String apiVersion, final ApiCallback<EventHubConnectionListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = eventHubConnectionsListByDatabaseValidateBeforeCall(resourceGroupName, clusterName, databaseName, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<EventHubConnectionListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for eventHubConnectionsUpdate
     * @param resourceGroupName The name of the resource group containing the Kusto cluster. (required)
     * @param clusterName The name of the Kusto cluster. (required)
     * @param databaseName The name of the database in the Kusto cluster. (required)
     * @param eventHubConnectionName The name of the event hub connection. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API Version. (required)
     * @param parameters The Event Hub connection parameters supplied to the Update operation. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the Event Hub connection. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Successfully updated the Event Hub connection. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted the update Event Hub connection request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventHubConnectionsUpdateCall(String resourceGroupName, String clusterName, String databaseName, String eventHubConnectionName, String subscriptionId, String apiVersion, EventHubConnectionUpdate parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/databases/{databaseName}/eventhubconnections/{eventHubConnectionName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "clusterName" + "}", localVarApiClient.escapeString(clusterName.toString()))
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()))
            .replace("{" + "eventHubConnectionName" + "}", localVarApiClient.escapeString(eventHubConnectionName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eventHubConnectionsUpdateValidateBeforeCall(String resourceGroupName, String clusterName, String databaseName, String eventHubConnectionName, String subscriptionId, String apiVersion, EventHubConnectionUpdate parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling eventHubConnectionsUpdate(Async)");
        }

        // verify the required parameter 'clusterName' is set
        if (clusterName == null) {
            throw new ApiException("Missing the required parameter 'clusterName' when calling eventHubConnectionsUpdate(Async)");
        }

        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling eventHubConnectionsUpdate(Async)");
        }

        // verify the required parameter 'eventHubConnectionName' is set
        if (eventHubConnectionName == null) {
            throw new ApiException("Missing the required parameter 'eventHubConnectionName' when calling eventHubConnectionsUpdate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling eventHubConnectionsUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling eventHubConnectionsUpdate(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling eventHubConnectionsUpdate(Async)");
        }

        return eventHubConnectionsUpdateCall(resourceGroupName, clusterName, databaseName, eventHubConnectionName, subscriptionId, apiVersion, parameters, _callback);

    }

    /**
     * 
     * Updates a Event Hub connection.
     * @param resourceGroupName The name of the resource group containing the Kusto cluster. (required)
     * @param clusterName The name of the Kusto cluster. (required)
     * @param databaseName The name of the database in the Kusto cluster. (required)
     * @param eventHubConnectionName The name of the event hub connection. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API Version. (required)
     * @param parameters The Event Hub connection parameters supplied to the Update operation. (required)
     * @return EventHubConnection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the Event Hub connection. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Successfully updated the Event Hub connection. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted the update Event Hub connection request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public EventHubConnection eventHubConnectionsUpdate(String resourceGroupName, String clusterName, String databaseName, String eventHubConnectionName, String subscriptionId, String apiVersion, EventHubConnectionUpdate parameters) throws ApiException {
        ApiResponse<EventHubConnection> localVarResp = eventHubConnectionsUpdateWithHttpInfo(resourceGroupName, clusterName, databaseName, eventHubConnectionName, subscriptionId, apiVersion, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates a Event Hub connection.
     * @param resourceGroupName The name of the resource group containing the Kusto cluster. (required)
     * @param clusterName The name of the Kusto cluster. (required)
     * @param databaseName The name of the database in the Kusto cluster. (required)
     * @param eventHubConnectionName The name of the event hub connection. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API Version. (required)
     * @param parameters The Event Hub connection parameters supplied to the Update operation. (required)
     * @return ApiResponse&lt;EventHubConnection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the Event Hub connection. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Successfully updated the Event Hub connection. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted the update Event Hub connection request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EventHubConnection> eventHubConnectionsUpdateWithHttpInfo(String resourceGroupName, String clusterName, String databaseName, String eventHubConnectionName, String subscriptionId, String apiVersion, EventHubConnectionUpdate parameters) throws ApiException {
        okhttp3.Call localVarCall = eventHubConnectionsUpdateValidateBeforeCall(resourceGroupName, clusterName, databaseName, eventHubConnectionName, subscriptionId, apiVersion, parameters, null);
        Type localVarReturnType = new TypeToken<EventHubConnection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates a Event Hub connection.
     * @param resourceGroupName The name of the resource group containing the Kusto cluster. (required)
     * @param clusterName The name of the Kusto cluster. (required)
     * @param databaseName The name of the database in the Kusto cluster. (required)
     * @param eventHubConnectionName The name of the event hub connection. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API Version. (required)
     * @param parameters The Event Hub connection parameters supplied to the Update operation. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the Event Hub connection. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Successfully updated the Event Hub connection. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted the update Event Hub connection request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventHubConnectionsUpdateAsync(String resourceGroupName, String clusterName, String databaseName, String eventHubConnectionName, String subscriptionId, String apiVersion, EventHubConnectionUpdate parameters, final ApiCallback<EventHubConnection> _callback) throws ApiException {

        okhttp3.Call localVarCall = eventHubConnectionsUpdateValidateBeforeCall(resourceGroupName, clusterName, databaseName, eventHubConnectionName, subscriptionId, apiVersion, parameters, _callback);
        Type localVarReturnType = new TypeToken<EventHubConnection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
