# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.database_statistics import DatabaseStatistics
from openapi_server import util


class DatabaseProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, hot_cache_period_in_days: int=None, provisioning_state: str=None, soft_delete_period_in_days: int=None, statistics: DatabaseStatistics=None):
        """DatabaseProperties - a model defined in OpenAPI

        :param hot_cache_period_in_days: The hot_cache_period_in_days of this DatabaseProperties.
        :param provisioning_state: The provisioning_state of this DatabaseProperties.
        :param soft_delete_period_in_days: The soft_delete_period_in_days of this DatabaseProperties.
        :param statistics: The statistics of this DatabaseProperties.
        """
        self.openapi_types = {
            'hot_cache_period_in_days': int,
            'provisioning_state': str,
            'soft_delete_period_in_days': int,
            'statistics': DatabaseStatistics
        }

        self.attribute_map = {
            'hot_cache_period_in_days': 'hotCachePeriodInDays',
            'provisioning_state': 'provisioningState',
            'soft_delete_period_in_days': 'softDeletePeriodInDays',
            'statistics': 'statistics'
        }

        self._hot_cache_period_in_days = hot_cache_period_in_days
        self._provisioning_state = provisioning_state
        self._soft_delete_period_in_days = soft_delete_period_in_days
        self._statistics = statistics

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DatabaseProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DatabaseProperties of this DatabaseProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def hot_cache_period_in_days(self):
        """Gets the hot_cache_period_in_days of this DatabaseProperties.

        The number of days of data that should be kept in cache for fast queries.

        :return: The hot_cache_period_in_days of this DatabaseProperties.
        :rtype: int
        """
        return self._hot_cache_period_in_days

    @hot_cache_period_in_days.setter
    def hot_cache_period_in_days(self, hot_cache_period_in_days):
        """Sets the hot_cache_period_in_days of this DatabaseProperties.

        The number of days of data that should be kept in cache for fast queries.

        :param hot_cache_period_in_days: The hot_cache_period_in_days of this DatabaseProperties.
        :type hot_cache_period_in_days: int
        """

        self._hot_cache_period_in_days = hot_cache_period_in_days

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this DatabaseProperties.

        The provisioned state of the resource.

        :return: The provisioning_state of this DatabaseProperties.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this DatabaseProperties.

        The provisioned state of the resource.

        :param provisioning_state: The provisioning_state of this DatabaseProperties.
        :type provisioning_state: str
        """
        allowed_values = ["Running", "Creating", "Deleting", "Succeeded", "Failed"]  # noqa: E501
        if provisioning_state not in allowed_values:
            raise ValueError(
                "Invalid value for `provisioning_state` ({0}), must be one of {1}"
                .format(provisioning_state, allowed_values)
            )

        self._provisioning_state = provisioning_state

    @property
    def soft_delete_period_in_days(self):
        """Gets the soft_delete_period_in_days of this DatabaseProperties.

        The number of days data should be kept before it stops being accessible to queries.

        :return: The soft_delete_period_in_days of this DatabaseProperties.
        :rtype: int
        """
        return self._soft_delete_period_in_days

    @soft_delete_period_in_days.setter
    def soft_delete_period_in_days(self, soft_delete_period_in_days):
        """Sets the soft_delete_period_in_days of this DatabaseProperties.

        The number of days data should be kept before it stops being accessible to queries.

        :param soft_delete_period_in_days: The soft_delete_period_in_days of this DatabaseProperties.
        :type soft_delete_period_in_days: int
        """
        if soft_delete_period_in_days is None:
            raise ValueError("Invalid value for `soft_delete_period_in_days`, must not be `None`")

        self._soft_delete_period_in_days = soft_delete_period_in_days

    @property
    def statistics(self):
        """Gets the statistics of this DatabaseProperties.


        :return: The statistics of this DatabaseProperties.
        :rtype: DatabaseStatistics
        """
        return self._statistics

    @statistics.setter
    def statistics(self, statistics):
        """Sets the statistics of this DatabaseProperties.


        :param statistics: The statistics of this DatabaseProperties.
        :type statistics: DatabaseStatistics
        """

        self._statistics = statistics
