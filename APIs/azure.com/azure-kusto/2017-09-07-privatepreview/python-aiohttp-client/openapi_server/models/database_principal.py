# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DatabasePrincipal(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, app_id: str=None, email: str=None, fqn: str=None, name: str=None, role: str=None, type: str=None):
        """DatabasePrincipal - a model defined in OpenAPI

        :param app_id: The app_id of this DatabasePrincipal.
        :param email: The email of this DatabasePrincipal.
        :param fqn: The fqn of this DatabasePrincipal.
        :param name: The name of this DatabasePrincipal.
        :param role: The role of this DatabasePrincipal.
        :param type: The type of this DatabasePrincipal.
        """
        self.openapi_types = {
            'app_id': str,
            'email': str,
            'fqn': str,
            'name': str,
            'role': str,
            'type': str
        }

        self.attribute_map = {
            'app_id': 'appId',
            'email': 'email',
            'fqn': 'fqn',
            'name': 'name',
            'role': 'role',
            'type': 'type'
        }

        self._app_id = app_id
        self._email = email
        self._fqn = fqn
        self._name = name
        self._role = role
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DatabasePrincipal':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DatabasePrincipal of this DatabasePrincipal.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app_id(self):
        """Gets the app_id of this DatabasePrincipal.

        Application id - relevant only for application principal type.

        :return: The app_id of this DatabasePrincipal.
        :rtype: str
        """
        return self._app_id

    @app_id.setter
    def app_id(self, app_id):
        """Sets the app_id of this DatabasePrincipal.

        Application id - relevant only for application principal type.

        :param app_id: The app_id of this DatabasePrincipal.
        :type app_id: str
        """

        self._app_id = app_id

    @property
    def email(self):
        """Gets the email of this DatabasePrincipal.

        Database principal email if exists.

        :return: The email of this DatabasePrincipal.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this DatabasePrincipal.

        Database principal email if exists.

        :param email: The email of this DatabasePrincipal.
        :type email: str
        """

        self._email = email

    @property
    def fqn(self):
        """Gets the fqn of this DatabasePrincipal.

        Database principal fully qualified name.

        :return: The fqn of this DatabasePrincipal.
        :rtype: str
        """
        return self._fqn

    @fqn.setter
    def fqn(self, fqn):
        """Sets the fqn of this DatabasePrincipal.

        Database principal fully qualified name.

        :param fqn: The fqn of this DatabasePrincipal.
        :type fqn: str
        """

        self._fqn = fqn

    @property
    def name(self):
        """Gets the name of this DatabasePrincipal.

        Database principal name.

        :return: The name of this DatabasePrincipal.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DatabasePrincipal.

        Database principal name.

        :param name: The name of this DatabasePrincipal.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def role(self):
        """Gets the role of this DatabasePrincipal.

        Database principal role.

        :return: The role of this DatabasePrincipal.
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this DatabasePrincipal.

        Database principal role.

        :param role: The role of this DatabasePrincipal.
        :type role: str
        """
        allowed_values = ["Admin", "Ingestor", "Monitor", "User", "UnrestrictedViewers", "Viewer"]  # noqa: E501
        if role not in allowed_values:
            raise ValueError(
                "Invalid value for `role` ({0}), must be one of {1}"
                .format(role, allowed_values)
            )

        self._role = role

    @property
    def type(self):
        """Gets the type of this DatabasePrincipal.

        Database principal type.

        :return: The type of this DatabasePrincipal.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DatabasePrincipal.

        Database principal type.

        :param type: The type of this DatabasePrincipal.
        :type type: str
        """
        allowed_values = ["App", "Group", "User"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
