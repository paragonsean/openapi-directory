/**
 * KustoManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-09-07-privatepreview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIEventHubConnectionsApi_H
#define OAI_OAIEventHubConnectionsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICloudError.h"
#include "OAIEventHubConnection.h"
#include "OAIEventHubConnectionListResult.h"
#include "OAIEventHubConnectionUpdate.h"
#include "OAIEventHubConnectionValidation.h"
#include "OAIEventHubConnectionValidationListResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIEventHubConnectionsApi : public QObject {
    Q_OBJECT

public:
    OAIEventHubConnectionsApi(const int timeOut = 0);
    ~OAIEventHubConnectionsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  cluster_name QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  event_hub_connection_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAIEventHubConnection [required]
    */
    virtual void eventHubConnectionsCreateOrUpdate(const QString &resource_group_name, const QString &cluster_name, const QString &database_name, const QString &event_hub_connection_name, const QString &subscription_id, const QString &api_version, const OAIEventHubConnection &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  cluster_name QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  event_hub_connection_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void eventHubConnectionsDelete(const QString &resource_group_name, const QString &cluster_name, const QString &database_name, const QString &event_hub_connection_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  cluster_name QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIEventHubConnectionValidation [required]
    */
    virtual void eventHubConnectionsEventhubConnectionValidation(const QString &resource_group_name, const QString &cluster_name, const QString &database_name, const QString &api_version, const QString &subscription_id, const OAIEventHubConnectionValidation &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  cluster_name QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  event_hub_connection_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void eventHubConnectionsGet(const QString &resource_group_name, const QString &cluster_name, const QString &database_name, const QString &event_hub_connection_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  cluster_name QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void eventHubConnectionsListByDatabase(const QString &resource_group_name, const QString &cluster_name, const QString &database_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  cluster_name QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  event_hub_connection_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAIEventHubConnectionUpdate [required]
    */
    virtual void eventHubConnectionsUpdate(const QString &resource_group_name, const QString &cluster_name, const QString &database_name, const QString &event_hub_connection_name, const QString &subscription_id, const QString &api_version, const OAIEventHubConnectionUpdate &parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void eventHubConnectionsCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void eventHubConnectionsDeleteCallback(OAIHttpRequestWorker *worker);
    void eventHubConnectionsEventhubConnectionValidationCallback(OAIHttpRequestWorker *worker);
    void eventHubConnectionsGetCallback(OAIHttpRequestWorker *worker);
    void eventHubConnectionsListByDatabaseCallback(OAIHttpRequestWorker *worker);
    void eventHubConnectionsUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void eventHubConnectionsCreateOrUpdateSignal(OAIEventHubConnection summary);
    void eventHubConnectionsDeleteSignal();
    void eventHubConnectionsEventhubConnectionValidationSignal(OAIEventHubConnectionValidationListResult summary);
    void eventHubConnectionsGetSignal(OAIEventHubConnection summary);
    void eventHubConnectionsListByDatabaseSignal(OAIEventHubConnectionListResult summary);
    void eventHubConnectionsUpdateSignal(OAIEventHubConnection summary);


    void eventHubConnectionsCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIEventHubConnection summary);
    void eventHubConnectionsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void eventHubConnectionsEventhubConnectionValidationSignalFull(OAIHttpRequestWorker *worker, OAIEventHubConnectionValidationListResult summary);
    void eventHubConnectionsGetSignalFull(OAIHttpRequestWorker *worker, OAIEventHubConnection summary);
    void eventHubConnectionsListByDatabaseSignalFull(OAIHttpRequestWorker *worker, OAIEventHubConnectionListResult summary);
    void eventHubConnectionsUpdateSignalFull(OAIHttpRequestWorker *worker, OAIEventHubConnection summary);

    Q_DECL_DEPRECATED_X("Use eventHubConnectionsCreateOrUpdateSignalError() instead")
    void eventHubConnectionsCreateOrUpdateSignalE(OAIEventHubConnection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void eventHubConnectionsCreateOrUpdateSignalError(OAIEventHubConnection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventHubConnectionsDeleteSignalError() instead")
    void eventHubConnectionsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void eventHubConnectionsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventHubConnectionsEventhubConnectionValidationSignalError() instead")
    void eventHubConnectionsEventhubConnectionValidationSignalE(OAIEventHubConnectionValidationListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void eventHubConnectionsEventhubConnectionValidationSignalError(OAIEventHubConnectionValidationListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventHubConnectionsGetSignalError() instead")
    void eventHubConnectionsGetSignalE(OAIEventHubConnection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void eventHubConnectionsGetSignalError(OAIEventHubConnection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventHubConnectionsListByDatabaseSignalError() instead")
    void eventHubConnectionsListByDatabaseSignalE(OAIEventHubConnectionListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void eventHubConnectionsListByDatabaseSignalError(OAIEventHubConnectionListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventHubConnectionsUpdateSignalError() instead")
    void eventHubConnectionsUpdateSignalE(OAIEventHubConnection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void eventHubConnectionsUpdateSignalError(OAIEventHubConnection summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use eventHubConnectionsCreateOrUpdateSignalErrorFull() instead")
    void eventHubConnectionsCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void eventHubConnectionsCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventHubConnectionsDeleteSignalErrorFull() instead")
    void eventHubConnectionsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void eventHubConnectionsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventHubConnectionsEventhubConnectionValidationSignalErrorFull() instead")
    void eventHubConnectionsEventhubConnectionValidationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void eventHubConnectionsEventhubConnectionValidationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventHubConnectionsGetSignalErrorFull() instead")
    void eventHubConnectionsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void eventHubConnectionsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventHubConnectionsListByDatabaseSignalErrorFull() instead")
    void eventHubConnectionsListByDatabaseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void eventHubConnectionsListByDatabaseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventHubConnectionsUpdateSignalErrorFull() instead")
    void eventHubConnectionsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void eventHubConnectionsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
