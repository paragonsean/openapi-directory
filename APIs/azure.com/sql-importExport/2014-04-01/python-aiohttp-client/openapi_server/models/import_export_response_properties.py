# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ImportExportResponseProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, blob_uri: str=None, database_name: str=None, error_message: str=None, last_modified_time: str=None, queued_time: str=None, request_id: str=None, request_type: str=None, server_name: str=None, status: str=None):
        """ImportExportResponseProperties - a model defined in OpenAPI

        :param blob_uri: The blob_uri of this ImportExportResponseProperties.
        :param database_name: The database_name of this ImportExportResponseProperties.
        :param error_message: The error_message of this ImportExportResponseProperties.
        :param last_modified_time: The last_modified_time of this ImportExportResponseProperties.
        :param queued_time: The queued_time of this ImportExportResponseProperties.
        :param request_id: The request_id of this ImportExportResponseProperties.
        :param request_type: The request_type of this ImportExportResponseProperties.
        :param server_name: The server_name of this ImportExportResponseProperties.
        :param status: The status of this ImportExportResponseProperties.
        """
        self.openapi_types = {
            'blob_uri': str,
            'database_name': str,
            'error_message': str,
            'last_modified_time': str,
            'queued_time': str,
            'request_id': str,
            'request_type': str,
            'server_name': str,
            'status': str
        }

        self.attribute_map = {
            'blob_uri': 'blobUri',
            'database_name': 'databaseName',
            'error_message': 'errorMessage',
            'last_modified_time': 'lastModifiedTime',
            'queued_time': 'queuedTime',
            'request_id': 'requestId',
            'request_type': 'requestType',
            'server_name': 'serverName',
            'status': 'status'
        }

        self._blob_uri = blob_uri
        self._database_name = database_name
        self._error_message = error_message
        self._last_modified_time = last_modified_time
        self._queued_time = queued_time
        self._request_id = request_id
        self._request_type = request_type
        self._server_name = server_name
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ImportExportResponseProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ImportExportResponseProperties of this ImportExportResponseProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def blob_uri(self):
        """Gets the blob_uri of this ImportExportResponseProperties.

        The blob uri.

        :return: The blob_uri of this ImportExportResponseProperties.
        :rtype: str
        """
        return self._blob_uri

    @blob_uri.setter
    def blob_uri(self, blob_uri):
        """Sets the blob_uri of this ImportExportResponseProperties.

        The blob uri.

        :param blob_uri: The blob_uri of this ImportExportResponseProperties.
        :type blob_uri: str
        """

        self._blob_uri = blob_uri

    @property
    def database_name(self):
        """Gets the database_name of this ImportExportResponseProperties.

        The name of the database.

        :return: The database_name of this ImportExportResponseProperties.
        :rtype: str
        """
        return self._database_name

    @database_name.setter
    def database_name(self, database_name):
        """Sets the database_name of this ImportExportResponseProperties.

        The name of the database.

        :param database_name: The database_name of this ImportExportResponseProperties.
        :type database_name: str
        """

        self._database_name = database_name

    @property
    def error_message(self):
        """Gets the error_message of this ImportExportResponseProperties.

        The error message returned from the server.

        :return: The error_message of this ImportExportResponseProperties.
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this ImportExportResponseProperties.

        The error message returned from the server.

        :param error_message: The error_message of this ImportExportResponseProperties.
        :type error_message: str
        """

        self._error_message = error_message

    @property
    def last_modified_time(self):
        """Gets the last_modified_time of this ImportExportResponseProperties.

        The operation status last modified time.

        :return: The last_modified_time of this ImportExportResponseProperties.
        :rtype: str
        """
        return self._last_modified_time

    @last_modified_time.setter
    def last_modified_time(self, last_modified_time):
        """Sets the last_modified_time of this ImportExportResponseProperties.

        The operation status last modified time.

        :param last_modified_time: The last_modified_time of this ImportExportResponseProperties.
        :type last_modified_time: str
        """

        self._last_modified_time = last_modified_time

    @property
    def queued_time(self):
        """Gets the queued_time of this ImportExportResponseProperties.

        The operation queued time.

        :return: The queued_time of this ImportExportResponseProperties.
        :rtype: str
        """
        return self._queued_time

    @queued_time.setter
    def queued_time(self, queued_time):
        """Sets the queued_time of this ImportExportResponseProperties.

        The operation queued time.

        :param queued_time: The queued_time of this ImportExportResponseProperties.
        :type queued_time: str
        """

        self._queued_time = queued_time

    @property
    def request_id(self):
        """Gets the request_id of this ImportExportResponseProperties.

        The request type of the operation.

        :return: The request_id of this ImportExportResponseProperties.
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this ImportExportResponseProperties.

        The request type of the operation.

        :param request_id: The request_id of this ImportExportResponseProperties.
        :type request_id: str
        """

        self._request_id = request_id

    @property
    def request_type(self):
        """Gets the request_type of this ImportExportResponseProperties.

        The request type of the operation.

        :return: The request_type of this ImportExportResponseProperties.
        :rtype: str
        """
        return self._request_type

    @request_type.setter
    def request_type(self, request_type):
        """Sets the request_type of this ImportExportResponseProperties.

        The request type of the operation.

        :param request_type: The request_type of this ImportExportResponseProperties.
        :type request_type: str
        """

        self._request_type = request_type

    @property
    def server_name(self):
        """Gets the server_name of this ImportExportResponseProperties.

        The name of the server.

        :return: The server_name of this ImportExportResponseProperties.
        :rtype: str
        """
        return self._server_name

    @server_name.setter
    def server_name(self, server_name):
        """Sets the server_name of this ImportExportResponseProperties.

        The name of the server.

        :param server_name: The server_name of this ImportExportResponseProperties.
        :type server_name: str
        """

        self._server_name = server_name

    @property
    def status(self):
        """Gets the status of this ImportExportResponseProperties.

        The status message returned from the server.

        :return: The status of this ImportExportResponseProperties.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ImportExportResponseProperties.

        The status message returned from the server.

        :param status: The status of this ImportExportResponseProperties.
        :type status: str
        """

        self._status = status
