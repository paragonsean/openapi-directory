/*
 * Azure SQL Database Import/Export spec
 * Provides create and read functionality for Import/Export operations on Azure SQL databases.
 *
 * The version of the OpenAPI document: 2014-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Response for Import/Export Status operation.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:44:46.613806-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ImportExportResponseProperties {
  public static final String SERIALIZED_NAME_BLOB_URI = "blobUri";
  @SerializedName(SERIALIZED_NAME_BLOB_URI)
  private String blobUri;

  public static final String SERIALIZED_NAME_DATABASE_NAME = "databaseName";
  @SerializedName(SERIALIZED_NAME_DATABASE_NAME)
  private String databaseName;

  public static final String SERIALIZED_NAME_ERROR_MESSAGE = "errorMessage";
  @SerializedName(SERIALIZED_NAME_ERROR_MESSAGE)
  private String errorMessage;

  public static final String SERIALIZED_NAME_LAST_MODIFIED_TIME = "lastModifiedTime";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED_TIME)
  private String lastModifiedTime;

  public static final String SERIALIZED_NAME_QUEUED_TIME = "queuedTime";
  @SerializedName(SERIALIZED_NAME_QUEUED_TIME)
  private String queuedTime;

  public static final String SERIALIZED_NAME_REQUEST_ID = "requestId";
  @SerializedName(SERIALIZED_NAME_REQUEST_ID)
  private UUID requestId;

  public static final String SERIALIZED_NAME_REQUEST_TYPE = "requestType";
  @SerializedName(SERIALIZED_NAME_REQUEST_TYPE)
  private String requestType;

  public static final String SERIALIZED_NAME_SERVER_NAME = "serverName";
  @SerializedName(SERIALIZED_NAME_SERVER_NAME)
  private String serverName;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public ImportExportResponseProperties() {
  }

  public ImportExportResponseProperties(
     String blobUri, 
     String databaseName, 
     String errorMessage, 
     String lastModifiedTime, 
     String queuedTime, 
     UUID requestId, 
     String requestType, 
     String serverName, 
     String status
  ) {
    this();
    this.blobUri = blobUri;
    this.databaseName = databaseName;
    this.errorMessage = errorMessage;
    this.lastModifiedTime = lastModifiedTime;
    this.queuedTime = queuedTime;
    this.requestId = requestId;
    this.requestType = requestType;
    this.serverName = serverName;
    this.status = status;
  }

  /**
   * The blob uri.
   * @return blobUri
   */
  @javax.annotation.Nullable
  public String getBlobUri() {
    return blobUri;
  }



  /**
   * The name of the database.
   * @return databaseName
   */
  @javax.annotation.Nullable
  public String getDatabaseName() {
    return databaseName;
  }



  /**
   * The error message returned from the server.
   * @return errorMessage
   */
  @javax.annotation.Nullable
  public String getErrorMessage() {
    return errorMessage;
  }



  /**
   * The operation status last modified time.
   * @return lastModifiedTime
   */
  @javax.annotation.Nullable
  public String getLastModifiedTime() {
    return lastModifiedTime;
  }



  /**
   * The operation queued time.
   * @return queuedTime
   */
  @javax.annotation.Nullable
  public String getQueuedTime() {
    return queuedTime;
  }



  /**
   * The request type of the operation.
   * @return requestId
   */
  @javax.annotation.Nullable
  public UUID getRequestId() {
    return requestId;
  }



  /**
   * The request type of the operation.
   * @return requestType
   */
  @javax.annotation.Nullable
  public String getRequestType() {
    return requestType;
  }



  /**
   * The name of the server.
   * @return serverName
   */
  @javax.annotation.Nullable
  public String getServerName() {
    return serverName;
  }



  /**
   * The status message returned from the server.
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ImportExportResponseProperties importExportResponseProperties = (ImportExportResponseProperties) o;
    return Objects.equals(this.blobUri, importExportResponseProperties.blobUri) &&
        Objects.equals(this.databaseName, importExportResponseProperties.databaseName) &&
        Objects.equals(this.errorMessage, importExportResponseProperties.errorMessage) &&
        Objects.equals(this.lastModifiedTime, importExportResponseProperties.lastModifiedTime) &&
        Objects.equals(this.queuedTime, importExportResponseProperties.queuedTime) &&
        Objects.equals(this.requestId, importExportResponseProperties.requestId) &&
        Objects.equals(this.requestType, importExportResponseProperties.requestType) &&
        Objects.equals(this.serverName, importExportResponseProperties.serverName) &&
        Objects.equals(this.status, importExportResponseProperties.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(blobUri, databaseName, errorMessage, lastModifiedTime, queuedTime, requestId, requestType, serverName, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ImportExportResponseProperties {\n");
    sb.append("    blobUri: ").append(toIndentedString(blobUri)).append("\n");
    sb.append("    databaseName: ").append(toIndentedString(databaseName)).append("\n");
    sb.append("    errorMessage: ").append(toIndentedString(errorMessage)).append("\n");
    sb.append("    lastModifiedTime: ").append(toIndentedString(lastModifiedTime)).append("\n");
    sb.append("    queuedTime: ").append(toIndentedString(queuedTime)).append("\n");
    sb.append("    requestId: ").append(toIndentedString(requestId)).append("\n");
    sb.append("    requestType: ").append(toIndentedString(requestType)).append("\n");
    sb.append("    serverName: ").append(toIndentedString(serverName)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("blobUri");
    openapiFields.add("databaseName");
    openapiFields.add("errorMessage");
    openapiFields.add("lastModifiedTime");
    openapiFields.add("queuedTime");
    openapiFields.add("requestId");
    openapiFields.add("requestType");
    openapiFields.add("serverName");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ImportExportResponseProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ImportExportResponseProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ImportExportResponseProperties is not found in the empty JSON string", ImportExportResponseProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ImportExportResponseProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ImportExportResponseProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("blobUri") != null && !jsonObj.get("blobUri").isJsonNull()) && !jsonObj.get("blobUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `blobUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("blobUri").toString()));
      }
      if ((jsonObj.get("databaseName") != null && !jsonObj.get("databaseName").isJsonNull()) && !jsonObj.get("databaseName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `databaseName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("databaseName").toString()));
      }
      if ((jsonObj.get("errorMessage") != null && !jsonObj.get("errorMessage").isJsonNull()) && !jsonObj.get("errorMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `errorMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("errorMessage").toString()));
      }
      if ((jsonObj.get("lastModifiedTime") != null && !jsonObj.get("lastModifiedTime").isJsonNull()) && !jsonObj.get("lastModifiedTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastModifiedTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastModifiedTime").toString()));
      }
      if ((jsonObj.get("queuedTime") != null && !jsonObj.get("queuedTime").isJsonNull()) && !jsonObj.get("queuedTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `queuedTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("queuedTime").toString()));
      }
      if ((jsonObj.get("requestId") != null && !jsonObj.get("requestId").isJsonNull()) && !jsonObj.get("requestId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requestId").toString()));
      }
      if ((jsonObj.get("requestType") != null && !jsonObj.get("requestType").isJsonNull()) && !jsonObj.get("requestType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requestType").toString()));
      }
      if ((jsonObj.get("serverName") != null && !jsonObj.get("serverName").isJsonNull()) && !jsonObj.get("serverName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serverName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serverName").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ImportExportResponseProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ImportExportResponseProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ImportExportResponseProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ImportExportResponseProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<ImportExportResponseProperties>() {
           @Override
           public void write(JsonWriter out, ImportExportResponseProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ImportExportResponseProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ImportExportResponseProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ImportExportResponseProperties
   * @throws IOException if the JSON string is invalid with respect to ImportExportResponseProperties
   */
  public static ImportExportResponseProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ImportExportResponseProperties.class);
  }

  /**
   * Convert an instance of ImportExportResponseProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

