/*
 * Azure SQL Database Import/Export spec
 * Provides create and read functionality for Import/Export operations on Azure SQL databases.
 *
 * The version of the OpenAPI document: 2014-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Export database parameters.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:44:46.613806-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ExportRequest {
  public static final String SERIALIZED_NAME_ADMINISTRATOR_LOGIN = "administratorLogin";
  @SerializedName(SERIALIZED_NAME_ADMINISTRATOR_LOGIN)
  private String administratorLogin;

  public static final String SERIALIZED_NAME_ADMINISTRATOR_LOGIN_PASSWORD = "administratorLoginPassword";
  @SerializedName(SERIALIZED_NAME_ADMINISTRATOR_LOGIN_PASSWORD)
  private String administratorLoginPassword;

  /**
   * The authentication type.
   */
  @JsonAdapter(AuthenticationTypeEnum.Adapter.class)
  public enum AuthenticationTypeEnum {
    SQL("SQL"),
    
    AD_PASSWORD("ADPassword");

    private String value;

    AuthenticationTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AuthenticationTypeEnum fromValue(String value) {
      for (AuthenticationTypeEnum b : AuthenticationTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AuthenticationTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AuthenticationTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AuthenticationTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AuthenticationTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AuthenticationTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AUTHENTICATION_TYPE = "authenticationType";
  @SerializedName(SERIALIZED_NAME_AUTHENTICATION_TYPE)
  private AuthenticationTypeEnum authenticationType = AuthenticationTypeEnum.SQL;

  public static final String SERIALIZED_NAME_STORAGE_KEY = "storageKey";
  @SerializedName(SERIALIZED_NAME_STORAGE_KEY)
  private String storageKey;

  /**
   * The type of the storage key to use.
   */
  @JsonAdapter(StorageKeyTypeEnum.Adapter.class)
  public enum StorageKeyTypeEnum {
    STORAGE_ACCESS_KEY("StorageAccessKey"),
    
    SHARED_ACCESS_KEY("SharedAccessKey");

    private String value;

    StorageKeyTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StorageKeyTypeEnum fromValue(String value) {
      for (StorageKeyTypeEnum b : StorageKeyTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StorageKeyTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StorageKeyTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StorageKeyTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StorageKeyTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StorageKeyTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STORAGE_KEY_TYPE = "storageKeyType";
  @SerializedName(SERIALIZED_NAME_STORAGE_KEY_TYPE)
  private StorageKeyTypeEnum storageKeyType;

  public static final String SERIALIZED_NAME_STORAGE_URI = "storageUri";
  @SerializedName(SERIALIZED_NAME_STORAGE_URI)
  private String storageUri;

  public ExportRequest() {
  }

  public ExportRequest administratorLogin(String administratorLogin) {
    this.administratorLogin = administratorLogin;
    return this;
  }

  /**
   * The name of the SQL administrator.
   * @return administratorLogin
   */
  @javax.annotation.Nonnull
  public String getAdministratorLogin() {
    return administratorLogin;
  }

  public void setAdministratorLogin(String administratorLogin) {
    this.administratorLogin = administratorLogin;
  }


  public ExportRequest administratorLoginPassword(String administratorLoginPassword) {
    this.administratorLoginPassword = administratorLoginPassword;
    return this;
  }

  /**
   * The password of the SQL administrator.
   * @return administratorLoginPassword
   */
  @javax.annotation.Nonnull
  public String getAdministratorLoginPassword() {
    return administratorLoginPassword;
  }

  public void setAdministratorLoginPassword(String administratorLoginPassword) {
    this.administratorLoginPassword = administratorLoginPassword;
  }


  public ExportRequest authenticationType(AuthenticationTypeEnum authenticationType) {
    this.authenticationType = authenticationType;
    return this;
  }

  /**
   * The authentication type.
   * @return authenticationType
   */
  @javax.annotation.Nullable
  public AuthenticationTypeEnum getAuthenticationType() {
    return authenticationType;
  }

  public void setAuthenticationType(AuthenticationTypeEnum authenticationType) {
    this.authenticationType = authenticationType;
  }


  public ExportRequest storageKey(String storageKey) {
    this.storageKey = storageKey;
    return this;
  }

  /**
   * The storage key to use.  If storage key type is SharedAccessKey, it must be preceded with a \&quot;?.\&quot;
   * @return storageKey
   */
  @javax.annotation.Nonnull
  public String getStorageKey() {
    return storageKey;
  }

  public void setStorageKey(String storageKey) {
    this.storageKey = storageKey;
  }


  public ExportRequest storageKeyType(StorageKeyTypeEnum storageKeyType) {
    this.storageKeyType = storageKeyType;
    return this;
  }

  /**
   * The type of the storage key to use.
   * @return storageKeyType
   */
  @javax.annotation.Nonnull
  public StorageKeyTypeEnum getStorageKeyType() {
    return storageKeyType;
  }

  public void setStorageKeyType(StorageKeyTypeEnum storageKeyType) {
    this.storageKeyType = storageKeyType;
  }


  public ExportRequest storageUri(String storageUri) {
    this.storageUri = storageUri;
    return this;
  }

  /**
   * The storage uri to use.
   * @return storageUri
   */
  @javax.annotation.Nonnull
  public String getStorageUri() {
    return storageUri;
  }

  public void setStorageUri(String storageUri) {
    this.storageUri = storageUri;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExportRequest exportRequest = (ExportRequest) o;
    return Objects.equals(this.administratorLogin, exportRequest.administratorLogin) &&
        Objects.equals(this.administratorLoginPassword, exportRequest.administratorLoginPassword) &&
        Objects.equals(this.authenticationType, exportRequest.authenticationType) &&
        Objects.equals(this.storageKey, exportRequest.storageKey) &&
        Objects.equals(this.storageKeyType, exportRequest.storageKeyType) &&
        Objects.equals(this.storageUri, exportRequest.storageUri);
  }

  @Override
  public int hashCode() {
    return Objects.hash(administratorLogin, administratorLoginPassword, authenticationType, storageKey, storageKeyType, storageUri);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExportRequest {\n");
    sb.append("    administratorLogin: ").append(toIndentedString(administratorLogin)).append("\n");
    sb.append("    administratorLoginPassword: ").append(toIndentedString(administratorLoginPassword)).append("\n");
    sb.append("    authenticationType: ").append(toIndentedString(authenticationType)).append("\n");
    sb.append("    storageKey: ").append(toIndentedString(storageKey)).append("\n");
    sb.append("    storageKeyType: ").append(toIndentedString(storageKeyType)).append("\n");
    sb.append("    storageUri: ").append(toIndentedString(storageUri)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("administratorLogin");
    openapiFields.add("administratorLoginPassword");
    openapiFields.add("authenticationType");
    openapiFields.add("storageKey");
    openapiFields.add("storageKeyType");
    openapiFields.add("storageUri");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("administratorLogin");
    openapiRequiredFields.add("administratorLoginPassword");
    openapiRequiredFields.add("storageKey");
    openapiRequiredFields.add("storageKeyType");
    openapiRequiredFields.add("storageUri");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ExportRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ExportRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExportRequest is not found in the empty JSON string", ExportRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ExportRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ExportRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ExportRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("administratorLogin").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `administratorLogin` to be a primitive type in the JSON string but got `%s`", jsonObj.get("administratorLogin").toString()));
      }
      if (!jsonObj.get("administratorLoginPassword").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `administratorLoginPassword` to be a primitive type in the JSON string but got `%s`", jsonObj.get("administratorLoginPassword").toString()));
      }
      if ((jsonObj.get("authenticationType") != null && !jsonObj.get("authenticationType").isJsonNull()) && !jsonObj.get("authenticationType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authenticationType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authenticationType").toString()));
      }
      // validate the optional field `authenticationType`
      if (jsonObj.get("authenticationType") != null && !jsonObj.get("authenticationType").isJsonNull()) {
        AuthenticationTypeEnum.validateJsonElement(jsonObj.get("authenticationType"));
      }
      if (!jsonObj.get("storageKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `storageKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("storageKey").toString()));
      }
      if (!jsonObj.get("storageKeyType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `storageKeyType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("storageKeyType").toString()));
      }
      // validate the required field `storageKeyType`
      StorageKeyTypeEnum.validateJsonElement(jsonObj.get("storageKeyType"));
      if (!jsonObj.get("storageUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `storageUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("storageUri").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExportRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExportRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExportRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExportRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ExportRequest>() {
           @Override
           public void write(JsonWriter out, ExportRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ExportRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ExportRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ExportRequest
   * @throws IOException if the JSON string is invalid with respect to ExportRequest
   */
  public static ExportRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExportRequest.class);
  }

  /**
   * Convert an instance of ExportRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

