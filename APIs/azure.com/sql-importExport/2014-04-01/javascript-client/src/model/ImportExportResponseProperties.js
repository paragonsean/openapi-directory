/**
 * Azure SQL Database Import/Export spec
 * Provides create and read functionality for Import/Export operations on Azure SQL databases.
 *
 * The version of the OpenAPI document: 2014-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ImportExportResponseProperties model module.
 * @module model/ImportExportResponseProperties
 * @version 2014-04-01
 */
class ImportExportResponseProperties {
    /**
     * Constructs a new <code>ImportExportResponseProperties</code>.
     * Response for Import/Export Status operation.
     * @alias module:model/ImportExportResponseProperties
     */
    constructor() { 
        
        ImportExportResponseProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ImportExportResponseProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ImportExportResponseProperties} obj Optional instance to populate.
     * @return {module:model/ImportExportResponseProperties} The populated <code>ImportExportResponseProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ImportExportResponseProperties();

            if (data.hasOwnProperty('blobUri')) {
                obj['blobUri'] = ApiClient.convertToType(data['blobUri'], 'String');
            }
            if (data.hasOwnProperty('databaseName')) {
                obj['databaseName'] = ApiClient.convertToType(data['databaseName'], 'String');
            }
            if (data.hasOwnProperty('errorMessage')) {
                obj['errorMessage'] = ApiClient.convertToType(data['errorMessage'], 'String');
            }
            if (data.hasOwnProperty('lastModifiedTime')) {
                obj['lastModifiedTime'] = ApiClient.convertToType(data['lastModifiedTime'], 'String');
            }
            if (data.hasOwnProperty('queuedTime')) {
                obj['queuedTime'] = ApiClient.convertToType(data['queuedTime'], 'String');
            }
            if (data.hasOwnProperty('requestId')) {
                obj['requestId'] = ApiClient.convertToType(data['requestId'], 'String');
            }
            if (data.hasOwnProperty('requestType')) {
                obj['requestType'] = ApiClient.convertToType(data['requestType'], 'String');
            }
            if (data.hasOwnProperty('serverName')) {
                obj['serverName'] = ApiClient.convertToType(data['serverName'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ImportExportResponseProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ImportExportResponseProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['blobUri'] && !(typeof data['blobUri'] === 'string' || data['blobUri'] instanceof String)) {
            throw new Error("Expected the field `blobUri` to be a primitive type in the JSON string but got " + data['blobUri']);
        }
        // ensure the json data is a string
        if (data['databaseName'] && !(typeof data['databaseName'] === 'string' || data['databaseName'] instanceof String)) {
            throw new Error("Expected the field `databaseName` to be a primitive type in the JSON string but got " + data['databaseName']);
        }
        // ensure the json data is a string
        if (data['errorMessage'] && !(typeof data['errorMessage'] === 'string' || data['errorMessage'] instanceof String)) {
            throw new Error("Expected the field `errorMessage` to be a primitive type in the JSON string but got " + data['errorMessage']);
        }
        // ensure the json data is a string
        if (data['lastModifiedTime'] && !(typeof data['lastModifiedTime'] === 'string' || data['lastModifiedTime'] instanceof String)) {
            throw new Error("Expected the field `lastModifiedTime` to be a primitive type in the JSON string but got " + data['lastModifiedTime']);
        }
        // ensure the json data is a string
        if (data['queuedTime'] && !(typeof data['queuedTime'] === 'string' || data['queuedTime'] instanceof String)) {
            throw new Error("Expected the field `queuedTime` to be a primitive type in the JSON string but got " + data['queuedTime']);
        }
        // ensure the json data is a string
        if (data['requestId'] && !(typeof data['requestId'] === 'string' || data['requestId'] instanceof String)) {
            throw new Error("Expected the field `requestId` to be a primitive type in the JSON string but got " + data['requestId']);
        }
        // ensure the json data is a string
        if (data['requestType'] && !(typeof data['requestType'] === 'string' || data['requestType'] instanceof String)) {
            throw new Error("Expected the field `requestType` to be a primitive type in the JSON string but got " + data['requestType']);
        }
        // ensure the json data is a string
        if (data['serverName'] && !(typeof data['serverName'] === 'string' || data['serverName'] instanceof String)) {
            throw new Error("Expected the field `serverName` to be a primitive type in the JSON string but got " + data['serverName']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }

        return true;
    }


}



/**
 * The blob uri.
 * @member {String} blobUri
 */
ImportExportResponseProperties.prototype['blobUri'] = undefined;

/**
 * The name of the database.
 * @member {String} databaseName
 */
ImportExportResponseProperties.prototype['databaseName'] = undefined;

/**
 * The error message returned from the server.
 * @member {String} errorMessage
 */
ImportExportResponseProperties.prototype['errorMessage'] = undefined;

/**
 * The operation status last modified time.
 * @member {String} lastModifiedTime
 */
ImportExportResponseProperties.prototype['lastModifiedTime'] = undefined;

/**
 * The operation queued time.
 * @member {String} queuedTime
 */
ImportExportResponseProperties.prototype['queuedTime'] = undefined;

/**
 * The request type of the operation.
 * @member {String} requestId
 */
ImportExportResponseProperties.prototype['requestId'] = undefined;

/**
 * The request type of the operation.
 * @member {String} requestType
 */
ImportExportResponseProperties.prototype['requestType'] = undefined;

/**
 * The name of the server.
 * @member {String} serverName
 */
ImportExportResponseProperties.prototype['serverName'] = undefined;

/**
 * The status message returned from the server.
 * @member {String} status
 */
ImportExportResponseProperties.prototype['status'] = undefined;






export default ImportExportResponseProperties;

