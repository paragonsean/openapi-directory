/**
 * Azure SQL Database Import/Export spec
 * Provides create and read functionality for Import/Export operations on Azure SQL databases.
 *
 * The version of the OpenAPI document: 2014-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ExportRequest from './ExportRequest';

/**
 * The ImportExtensionProperties model module.
 * @module model/ImportExtensionProperties
 * @version 2014-04-01
 */
class ImportExtensionProperties {
    /**
     * Constructs a new <code>ImportExtensionProperties</code>.
     * Represents the properties for an import operation
     * @alias module:model/ImportExtensionProperties
     * @implements module:model/ExportRequest
     * @param administratorLogin {String} The name of the SQL administrator.
     * @param administratorLoginPassword {String} The password of the SQL administrator.
     * @param storageKey {String} The storage key to use.  If storage key type is SharedAccessKey, it must be preceded with a \"?.\"
     * @param storageKeyType {module:model/ImportExtensionProperties.StorageKeyTypeEnum} The type of the storage key to use.
     * @param storageUri {String} The storage uri to use.
     */
    constructor(administratorLogin, administratorLoginPassword, storageKey, storageKeyType, storageUri) { 
        ExportRequest.initialize(this, administratorLogin, administratorLoginPassword, storageKey, storageKeyType, storageUri);
        ImportExtensionProperties.initialize(this, administratorLogin, administratorLoginPassword, storageKey, storageKeyType, storageUri);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, administratorLogin, administratorLoginPassword, storageKey, storageKeyType, storageUri) { 
        obj['operationMode'] = operationMode;
        obj['administratorLogin'] = administratorLogin;
        obj['administratorLoginPassword'] = administratorLoginPassword;
        obj['authenticationType'] = 'SQL';
        obj['storageKey'] = storageKey;
        obj['storageKeyType'] = storageKeyType;
        obj['storageUri'] = storageUri;
    }

    /**
     * Constructs a <code>ImportExtensionProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ImportExtensionProperties} obj Optional instance to populate.
     * @return {module:model/ImportExtensionProperties} The populated <code>ImportExtensionProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ImportExtensionProperties();
            ExportRequest.constructFromObject(data, obj);

            if (data.hasOwnProperty('operationMode')) {
                obj['operationMode'] = ApiClient.convertToType(data['operationMode'], 'String');
            }
            if (data.hasOwnProperty('administratorLogin')) {
                obj['administratorLogin'] = ApiClient.convertToType(data['administratorLogin'], 'String');
            }
            if (data.hasOwnProperty('administratorLoginPassword')) {
                obj['administratorLoginPassword'] = ApiClient.convertToType(data['administratorLoginPassword'], 'String');
            }
            if (data.hasOwnProperty('authenticationType')) {
                obj['authenticationType'] = ApiClient.convertToType(data['authenticationType'], 'String');
            }
            if (data.hasOwnProperty('storageKey')) {
                obj['storageKey'] = ApiClient.convertToType(data['storageKey'], 'String');
            }
            if (data.hasOwnProperty('storageKeyType')) {
                obj['storageKeyType'] = ApiClient.convertToType(data['storageKeyType'], 'String');
            }
            if (data.hasOwnProperty('storageUri')) {
                obj['storageUri'] = ApiClient.convertToType(data['storageUri'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ImportExtensionProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ImportExtensionProperties</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ImportExtensionProperties.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['operationMode'] && !(typeof data['operationMode'] === 'string' || data['operationMode'] instanceof String)) {
            throw new Error("Expected the field `operationMode` to be a primitive type in the JSON string but got " + data['operationMode']);
        }
        // ensure the json data is a string
        if (data['administratorLogin'] && !(typeof data['administratorLogin'] === 'string' || data['administratorLogin'] instanceof String)) {
            throw new Error("Expected the field `administratorLogin` to be a primitive type in the JSON string but got " + data['administratorLogin']);
        }
        // ensure the json data is a string
        if (data['administratorLoginPassword'] && !(typeof data['administratorLoginPassword'] === 'string' || data['administratorLoginPassword'] instanceof String)) {
            throw new Error("Expected the field `administratorLoginPassword` to be a primitive type in the JSON string but got " + data['administratorLoginPassword']);
        }
        // ensure the json data is a string
        if (data['authenticationType'] && !(typeof data['authenticationType'] === 'string' || data['authenticationType'] instanceof String)) {
            throw new Error("Expected the field `authenticationType` to be a primitive type in the JSON string but got " + data['authenticationType']);
        }
        // ensure the json data is a string
        if (data['storageKey'] && !(typeof data['storageKey'] === 'string' || data['storageKey'] instanceof String)) {
            throw new Error("Expected the field `storageKey` to be a primitive type in the JSON string but got " + data['storageKey']);
        }
        // ensure the json data is a string
        if (data['storageKeyType'] && !(typeof data['storageKeyType'] === 'string' || data['storageKeyType'] instanceof String)) {
            throw new Error("Expected the field `storageKeyType` to be a primitive type in the JSON string but got " + data['storageKeyType']);
        }
        // ensure the json data is a string
        if (data['storageUri'] && !(typeof data['storageUri'] === 'string' || data['storageUri'] instanceof String)) {
            throw new Error("Expected the field `storageUri` to be a primitive type in the JSON string but got " + data['storageUri']);
        }

        return true;
    }


}

ImportExtensionProperties.RequiredProperties = ["operationMode", "administratorLogin", "administratorLoginPassword", "storageKey", "storageKeyType", "storageUri"];

/**
 * The type of import operation being performed. This is always Import.
 * @member {module:model/ImportExtensionProperties.OperationModeEnum} operationMode
 */
ImportExtensionProperties.prototype['operationMode'] = undefined;

/**
 * The name of the SQL administrator.
 * @member {String} administratorLogin
 */
ImportExtensionProperties.prototype['administratorLogin'] = undefined;

/**
 * The password of the SQL administrator.
 * @member {String} administratorLoginPassword
 */
ImportExtensionProperties.prototype['administratorLoginPassword'] = undefined;

/**
 * The authentication type.
 * @member {module:model/ImportExtensionProperties.AuthenticationTypeEnum} authenticationType
 * @default 'SQL'
 */
ImportExtensionProperties.prototype['authenticationType'] = 'SQL';

/**
 * The storage key to use.  If storage key type is SharedAccessKey, it must be preceded with a \"?.\"
 * @member {String} storageKey
 */
ImportExtensionProperties.prototype['storageKey'] = undefined;

/**
 * The type of the storage key to use.
 * @member {module:model/ImportExtensionProperties.StorageKeyTypeEnum} storageKeyType
 */
ImportExtensionProperties.prototype['storageKeyType'] = undefined;

/**
 * The storage uri to use.
 * @member {String} storageUri
 */
ImportExtensionProperties.prototype['storageUri'] = undefined;


// Implement ExportRequest interface:
/**
 * The name of the SQL administrator.
 * @member {String} administratorLogin
 */
ExportRequest.prototype['administratorLogin'] = undefined;
/**
 * The password of the SQL administrator.
 * @member {String} administratorLoginPassword
 */
ExportRequest.prototype['administratorLoginPassword'] = undefined;
/**
 * The authentication type.
 * @member {module:model/ExportRequest.AuthenticationTypeEnum} authenticationType
 * @default 'SQL'
 */
ExportRequest.prototype['authenticationType'] = 'SQL';
/**
 * The storage key to use.  If storage key type is SharedAccessKey, it must be preceded with a \"?.\"
 * @member {String} storageKey
 */
ExportRequest.prototype['storageKey'] = undefined;
/**
 * The type of the storage key to use.
 * @member {module:model/ExportRequest.StorageKeyTypeEnum} storageKeyType
 */
ExportRequest.prototype['storageKeyType'] = undefined;
/**
 * The storage uri to use.
 * @member {String} storageUri
 */
ExportRequest.prototype['storageUri'] = undefined;



/**
 * Allowed values for the <code>operationMode</code> property.
 * @enum {String}
 * @readonly
 */
ImportExtensionProperties['OperationModeEnum'] = {

    /**
     * value: "Import"
     * @const
     */
    "Import": "Import"
};


/**
 * Allowed values for the <code>authenticationType</code> property.
 * @enum {String}
 * @readonly
 */
ImportExtensionProperties['AuthenticationTypeEnum'] = {

    /**
     * value: "SQL"
     * @const
     */
    "SQL": "SQL",

    /**
     * value: "ADPassword"
     * @const
     */
    "ADPassword": "ADPassword"
};


/**
 * Allowed values for the <code>storageKeyType</code> property.
 * @enum {String}
 * @readonly
 */
ImportExtensionProperties['StorageKeyTypeEnum'] = {

    /**
     * value: "StorageAccessKey"
     * @const
     */
    "StorageAccessKey": "StorageAccessKey",

    /**
     * value: "SharedAccessKey"
     * @const
     */
    "SharedAccessKey": "SharedAccessKey"
};



export default ImportExtensionProperties;

