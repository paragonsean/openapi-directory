/**
 * Azure SQL Database Import/Export spec
 * Provides create and read functionality for Import/Export operations on Azure SQL databases.
 *
 * The version of the OpenAPI document: 2014-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ExportRequest from './ExportRequest';

/**
 * The ImportRequest model module.
 * @module model/ImportRequest
 * @version 2014-04-01
 */
class ImportRequest {
    /**
     * Constructs a new <code>ImportRequest</code>.
     * Import database parameters.
     * @alias module:model/ImportRequest
     * @implements module:model/ExportRequest
     * @param administratorLogin {String} The name of the SQL administrator.
     * @param administratorLoginPassword {String} The password of the SQL administrator.
     * @param storageKey {String} The storage key to use.  If storage key type is SharedAccessKey, it must be preceded with a \"?.\"
     * @param storageKeyType {module:model/ImportRequest.StorageKeyTypeEnum} The type of the storage key to use.
     * @param storageUri {String} The storage uri to use.
     */
    constructor(administratorLogin, administratorLoginPassword, storageKey, storageKeyType, storageUri) { 
        ExportRequest.initialize(this, administratorLogin, administratorLoginPassword, storageKey, storageKeyType, storageUri);
        ImportRequest.initialize(this, administratorLogin, administratorLoginPassword, storageKey, storageKeyType, storageUri);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, administratorLogin, administratorLoginPassword, storageKey, storageKeyType, storageUri) { 
        obj['databaseName'] = databaseName;
        obj['edition'] = edition;
        obj['maxSizeBytes'] = maxSizeBytes;
        obj['serviceObjectiveName'] = serviceObjectiveName;
        obj['administratorLogin'] = administratorLogin;
        obj['administratorLoginPassword'] = administratorLoginPassword;
        obj['authenticationType'] = 'SQL';
        obj['storageKey'] = storageKey;
        obj['storageKeyType'] = storageKeyType;
        obj['storageUri'] = storageUri;
    }

    /**
     * Constructs a <code>ImportRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ImportRequest} obj Optional instance to populate.
     * @return {module:model/ImportRequest} The populated <code>ImportRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ImportRequest();
            ExportRequest.constructFromObject(data, obj);

            if (data.hasOwnProperty('databaseName')) {
                obj['databaseName'] = ApiClient.convertToType(data['databaseName'], 'String');
            }
            if (data.hasOwnProperty('edition')) {
                obj['edition'] = ApiClient.convertToType(data['edition'], 'String');
            }
            if (data.hasOwnProperty('maxSizeBytes')) {
                obj['maxSizeBytes'] = ApiClient.convertToType(data['maxSizeBytes'], 'String');
            }
            if (data.hasOwnProperty('serviceObjectiveName')) {
                obj['serviceObjectiveName'] = ApiClient.convertToType(data['serviceObjectiveName'], 'String');
            }
            if (data.hasOwnProperty('administratorLogin')) {
                obj['administratorLogin'] = ApiClient.convertToType(data['administratorLogin'], 'String');
            }
            if (data.hasOwnProperty('administratorLoginPassword')) {
                obj['administratorLoginPassword'] = ApiClient.convertToType(data['administratorLoginPassword'], 'String');
            }
            if (data.hasOwnProperty('authenticationType')) {
                obj['authenticationType'] = ApiClient.convertToType(data['authenticationType'], 'String');
            }
            if (data.hasOwnProperty('storageKey')) {
                obj['storageKey'] = ApiClient.convertToType(data['storageKey'], 'String');
            }
            if (data.hasOwnProperty('storageKeyType')) {
                obj['storageKeyType'] = ApiClient.convertToType(data['storageKeyType'], 'String');
            }
            if (data.hasOwnProperty('storageUri')) {
                obj['storageUri'] = ApiClient.convertToType(data['storageUri'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ImportRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ImportRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ImportRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['databaseName'] && !(typeof data['databaseName'] === 'string' || data['databaseName'] instanceof String)) {
            throw new Error("Expected the field `databaseName` to be a primitive type in the JSON string but got " + data['databaseName']);
        }
        // ensure the json data is a string
        if (data['edition'] && !(typeof data['edition'] === 'string' || data['edition'] instanceof String)) {
            throw new Error("Expected the field `edition` to be a primitive type in the JSON string but got " + data['edition']);
        }
        // ensure the json data is a string
        if (data['maxSizeBytes'] && !(typeof data['maxSizeBytes'] === 'string' || data['maxSizeBytes'] instanceof String)) {
            throw new Error("Expected the field `maxSizeBytes` to be a primitive type in the JSON string but got " + data['maxSizeBytes']);
        }
        // ensure the json data is a string
        if (data['serviceObjectiveName'] && !(typeof data['serviceObjectiveName'] === 'string' || data['serviceObjectiveName'] instanceof String)) {
            throw new Error("Expected the field `serviceObjectiveName` to be a primitive type in the JSON string but got " + data['serviceObjectiveName']);
        }
        // ensure the json data is a string
        if (data['administratorLogin'] && !(typeof data['administratorLogin'] === 'string' || data['administratorLogin'] instanceof String)) {
            throw new Error("Expected the field `administratorLogin` to be a primitive type in the JSON string but got " + data['administratorLogin']);
        }
        // ensure the json data is a string
        if (data['administratorLoginPassword'] && !(typeof data['administratorLoginPassword'] === 'string' || data['administratorLoginPassword'] instanceof String)) {
            throw new Error("Expected the field `administratorLoginPassword` to be a primitive type in the JSON string but got " + data['administratorLoginPassword']);
        }
        // ensure the json data is a string
        if (data['authenticationType'] && !(typeof data['authenticationType'] === 'string' || data['authenticationType'] instanceof String)) {
            throw new Error("Expected the field `authenticationType` to be a primitive type in the JSON string but got " + data['authenticationType']);
        }
        // ensure the json data is a string
        if (data['storageKey'] && !(typeof data['storageKey'] === 'string' || data['storageKey'] instanceof String)) {
            throw new Error("Expected the field `storageKey` to be a primitive type in the JSON string but got " + data['storageKey']);
        }
        // ensure the json data is a string
        if (data['storageKeyType'] && !(typeof data['storageKeyType'] === 'string' || data['storageKeyType'] instanceof String)) {
            throw new Error("Expected the field `storageKeyType` to be a primitive type in the JSON string but got " + data['storageKeyType']);
        }
        // ensure the json data is a string
        if (data['storageUri'] && !(typeof data['storageUri'] === 'string' || data['storageUri'] instanceof String)) {
            throw new Error("Expected the field `storageUri` to be a primitive type in the JSON string but got " + data['storageUri']);
        }

        return true;
    }


}

ImportRequest.RequiredProperties = ["databaseName", "edition", "maxSizeBytes", "serviceObjectiveName", "administratorLogin", "administratorLoginPassword", "storageKey", "storageKeyType", "storageUri"];

/**
 * The name of the database to import.
 * @member {String} databaseName
 */
ImportRequest.prototype['databaseName'] = undefined;

/**
 * The edition for the database being created.    The list of SKUs may vary by region and support offer. To determine the SKUs (including the SKU name, tier/edition, family, and capacity) that are available to your subscription in an Azure region, use the `Capabilities_ListByLocation` REST API or one of the following commands:    ```azurecli  az sql db list-editions -l <location> -o table  ````    ```powershell  Get-AzSqlServerServiceObjective -Location <location>  ````  
 * @member {module:model/ImportRequest.EditionEnum} edition
 */
ImportRequest.prototype['edition'] = undefined;

/**
 * The maximum size for the newly imported database.
 * @member {String} maxSizeBytes
 */
ImportRequest.prototype['maxSizeBytes'] = undefined;

/**
 * The name of the service objective to assign to the database.
 * @member {module:model/ImportRequest.ServiceObjectiveNameEnum} serviceObjectiveName
 */
ImportRequest.prototype['serviceObjectiveName'] = undefined;

/**
 * The name of the SQL administrator.
 * @member {String} administratorLogin
 */
ImportRequest.prototype['administratorLogin'] = undefined;

/**
 * The password of the SQL administrator.
 * @member {String} administratorLoginPassword
 */
ImportRequest.prototype['administratorLoginPassword'] = undefined;

/**
 * The authentication type.
 * @member {module:model/ImportRequest.AuthenticationTypeEnum} authenticationType
 * @default 'SQL'
 */
ImportRequest.prototype['authenticationType'] = 'SQL';

/**
 * The storage key to use.  If storage key type is SharedAccessKey, it must be preceded with a \"?.\"
 * @member {String} storageKey
 */
ImportRequest.prototype['storageKey'] = undefined;

/**
 * The type of the storage key to use.
 * @member {module:model/ImportRequest.StorageKeyTypeEnum} storageKeyType
 */
ImportRequest.prototype['storageKeyType'] = undefined;

/**
 * The storage uri to use.
 * @member {String} storageUri
 */
ImportRequest.prototype['storageUri'] = undefined;


// Implement ExportRequest interface:
/**
 * The name of the SQL administrator.
 * @member {String} administratorLogin
 */
ExportRequest.prototype['administratorLogin'] = undefined;
/**
 * The password of the SQL administrator.
 * @member {String} administratorLoginPassword
 */
ExportRequest.prototype['administratorLoginPassword'] = undefined;
/**
 * The authentication type.
 * @member {module:model/ExportRequest.AuthenticationTypeEnum} authenticationType
 * @default 'SQL'
 */
ExportRequest.prototype['authenticationType'] = 'SQL';
/**
 * The storage key to use.  If storage key type is SharedAccessKey, it must be preceded with a \"?.\"
 * @member {String} storageKey
 */
ExportRequest.prototype['storageKey'] = undefined;
/**
 * The type of the storage key to use.
 * @member {module:model/ExportRequest.StorageKeyTypeEnum} storageKeyType
 */
ExportRequest.prototype['storageKeyType'] = undefined;
/**
 * The storage uri to use.
 * @member {String} storageUri
 */
ExportRequest.prototype['storageUri'] = undefined;



/**
 * Allowed values for the <code>edition</code> property.
 * @enum {String}
 * @readonly
 */
ImportRequest['EditionEnum'] = {

    /**
     * value: "Web"
     * @const
     */
    "Web": "Web",

    /**
     * value: "Business"
     * @const
     */
    "Business": "Business",

    /**
     * value: "Basic"
     * @const
     */
    "Basic": "Basic",

    /**
     * value: "Standard"
     * @const
     */
    "Standard": "Standard",

    /**
     * value: "Premium"
     * @const
     */
    "Premium": "Premium",

    /**
     * value: "PremiumRS"
     * @const
     */
    "PremiumRS": "PremiumRS",

    /**
     * value: "Free"
     * @const
     */
    "Free": "Free",

    /**
     * value: "Stretch"
     * @const
     */
    "Stretch": "Stretch",

    /**
     * value: "DataWarehouse"
     * @const
     */
    "DataWarehouse": "DataWarehouse",

    /**
     * value: "System"
     * @const
     */
    "System": "System",

    /**
     * value: "System2"
     * @const
     */
    "System2": "System2",

    /**
     * value: "GeneralPurpose"
     * @const
     */
    "GeneralPurpose": "GeneralPurpose",

    /**
     * value: "BusinessCritical"
     * @const
     */
    "BusinessCritical": "BusinessCritical",

    /**
     * value: "Hyperscale"
     * @const
     */
    "Hyperscale": "Hyperscale"
};


/**
 * Allowed values for the <code>serviceObjectiveName</code> property.
 * @enum {String}
 * @readonly
 */
ImportRequest['ServiceObjectiveNameEnum'] = {

    /**
     * value: "System"
     * @const
     */
    "System": "System",

    /**
     * value: "System0"
     * @const
     */
    "System0": "System0",

    /**
     * value: "System1"
     * @const
     */
    "System1": "System1",

    /**
     * value: "System2"
     * @const
     */
    "System2": "System2",

    /**
     * value: "System3"
     * @const
     */
    "System3": "System3",

    /**
     * value: "System4"
     * @const
     */
    "System4": "System4",

    /**
     * value: "System2L"
     * @const
     */
    "System2L": "System2L",

    /**
     * value: "System3L"
     * @const
     */
    "System3L": "System3L",

    /**
     * value: "System4L"
     * @const
     */
    "System4L": "System4L",

    /**
     * value: "Free"
     * @const
     */
    "Free": "Free",

    /**
     * value: "Basic"
     * @const
     */
    "Basic": "Basic",

    /**
     * value: "S0"
     * @const
     */
    "S0": "S0",

    /**
     * value: "S1"
     * @const
     */
    "S1": "S1",

    /**
     * value: "S2"
     * @const
     */
    "S2": "S2",

    /**
     * value: "S3"
     * @const
     */
    "S3": "S3",

    /**
     * value: "S4"
     * @const
     */
    "S4": "S4",

    /**
     * value: "S6"
     * @const
     */
    "S6": "S6",

    /**
     * value: "S7"
     * @const
     */
    "S7": "S7",

    /**
     * value: "S9"
     * @const
     */
    "S9": "S9",

    /**
     * value: "S12"
     * @const
     */
    "S12": "S12",

    /**
     * value: "P1"
     * @const
     */
    "P1": "P1",

    /**
     * value: "P2"
     * @const
     */
    "P2": "P2",

    /**
     * value: "P3"
     * @const
     */
    "P3": "P3",

    /**
     * value: "P4"
     * @const
     */
    "P4": "P4",

    /**
     * value: "P6"
     * @const
     */
    "P6": "P6",

    /**
     * value: "P11"
     * @const
     */
    "P11": "P11",

    /**
     * value: "P15"
     * @const
     */
    "P15": "P15",

    /**
     * value: "PRS1"
     * @const
     */
    "PRS1": "PRS1",

    /**
     * value: "PRS2"
     * @const
     */
    "PRS2": "PRS2",

    /**
     * value: "PRS4"
     * @const
     */
    "PRS4": "PRS4",

    /**
     * value: "PRS6"
     * @const
     */
    "PRS6": "PRS6",

    /**
     * value: "DW100"
     * @const
     */
    "DW100": "DW100",

    /**
     * value: "DW200"
     * @const
     */
    "DW200": "DW200",

    /**
     * value: "DW300"
     * @const
     */
    "DW300": "DW300",

    /**
     * value: "DW400"
     * @const
     */
    "DW400": "DW400",

    /**
     * value: "DW500"
     * @const
     */
    "DW500": "DW500",

    /**
     * value: "DW600"
     * @const
     */
    "DW600": "DW600",

    /**
     * value: "DW1000"
     * @const
     */
    "DW1000": "DW1000",

    /**
     * value: "DW1200"
     * @const
     */
    "DW1200": "DW1200",

    /**
     * value: "DW1000c"
     * @const
     */
    "DW1000c": "DW1000c",

    /**
     * value: "DW1500"
     * @const
     */
    "DW1500": "DW1500",

    /**
     * value: "DW1500c"
     * @const
     */
    "DW1500c": "DW1500c",

    /**
     * value: "DW2000"
     * @const
     */
    "DW2000": "DW2000",

    /**
     * value: "DW2000c"
     * @const
     */
    "DW2000c": "DW2000c",

    /**
     * value: "DW3000"
     * @const
     */
    "DW3000": "DW3000",

    /**
     * value: "DW2500c"
     * @const
     */
    "DW2500c": "DW2500c",

    /**
     * value: "DW3000c"
     * @const
     */
    "DW3000c": "DW3000c",

    /**
     * value: "DW6000"
     * @const
     */
    "DW6000": "DW6000",

    /**
     * value: "DW5000c"
     * @const
     */
    "DW5000c": "DW5000c",

    /**
     * value: "DW6000c"
     * @const
     */
    "DW6000c": "DW6000c",

    /**
     * value: "DW7500c"
     * @const
     */
    "DW7500c": "DW7500c",

    /**
     * value: "DW10000c"
     * @const
     */
    "DW10000c": "DW10000c",

    /**
     * value: "DW15000c"
     * @const
     */
    "DW15000c": "DW15000c",

    /**
     * value: "DW30000c"
     * @const
     */
    "DW30000c": "DW30000c",

    /**
     * value: "DS100"
     * @const
     */
    "DS100": "DS100",

    /**
     * value: "DS200"
     * @const
     */
    "DS200": "DS200",

    /**
     * value: "DS300"
     * @const
     */
    "DS300": "DS300",

    /**
     * value: "DS400"
     * @const
     */
    "DS400": "DS400",

    /**
     * value: "DS500"
     * @const
     */
    "DS500": "DS500",

    /**
     * value: "DS600"
     * @const
     */
    "DS600": "DS600",

    /**
     * value: "DS1000"
     * @const
     */
    "DS1000": "DS1000",

    /**
     * value: "DS1200"
     * @const
     */
    "DS1200": "DS1200",

    /**
     * value: "DS1500"
     * @const
     */
    "DS1500": "DS1500",

    /**
     * value: "DS2000"
     * @const
     */
    "DS2000": "DS2000",

    /**
     * value: "ElasticPool"
     * @const
     */
    "ElasticPool": "ElasticPool"
};


/**
 * Allowed values for the <code>authenticationType</code> property.
 * @enum {String}
 * @readonly
 */
ImportRequest['AuthenticationTypeEnum'] = {

    /**
     * value: "SQL"
     * @const
     */
    "SQL": "SQL",

    /**
     * value: "ADPassword"
     * @const
     */
    "ADPassword": "ADPassword"
};


/**
 * Allowed values for the <code>storageKeyType</code> property.
 * @enum {String}
 * @readonly
 */
ImportRequest['StorageKeyTypeEnum'] = {

    /**
     * value: "StorageAccessKey"
     * @const
     */
    "StorageAccessKey": "StorageAccessKey",

    /**
     * value: "SharedAccessKey"
     * @const
     */
    "SharedAccessKey": "SharedAccessKey"
};



export default ImportRequest;

