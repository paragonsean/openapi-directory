/**
 * Azure SQL Database Import/Export spec
 * Provides create and read functionality for Import/Export operations on Azure SQL databases.
 *
 * The version of the OpenAPI document: 2014-04-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImportExportResponseProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImportExportResponseProperties::OAIImportExportResponseProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImportExportResponseProperties::OAIImportExportResponseProperties() {
    this->initializeModel();
}

OAIImportExportResponseProperties::~OAIImportExportResponseProperties() {}

void OAIImportExportResponseProperties::initializeModel() {

    m_blob_uri_isSet = false;
    m_blob_uri_isValid = false;

    m_database_name_isSet = false;
    m_database_name_isValid = false;

    m_error_message_isSet = false;
    m_error_message_isValid = false;

    m_last_modified_time_isSet = false;
    m_last_modified_time_isValid = false;

    m_queued_time_isSet = false;
    m_queued_time_isValid = false;

    m_request_id_isSet = false;
    m_request_id_isValid = false;

    m_request_type_isSet = false;
    m_request_type_isValid = false;

    m_server_name_isSet = false;
    m_server_name_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIImportExportResponseProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImportExportResponseProperties::fromJsonObject(QJsonObject json) {

    m_blob_uri_isValid = ::OpenAPI::fromJsonValue(m_blob_uri, json[QString("blobUri")]);
    m_blob_uri_isSet = !json[QString("blobUri")].isNull() && m_blob_uri_isValid;

    m_database_name_isValid = ::OpenAPI::fromJsonValue(m_database_name, json[QString("databaseName")]);
    m_database_name_isSet = !json[QString("databaseName")].isNull() && m_database_name_isValid;

    m_error_message_isValid = ::OpenAPI::fromJsonValue(m_error_message, json[QString("errorMessage")]);
    m_error_message_isSet = !json[QString("errorMessage")].isNull() && m_error_message_isValid;

    m_last_modified_time_isValid = ::OpenAPI::fromJsonValue(m_last_modified_time, json[QString("lastModifiedTime")]);
    m_last_modified_time_isSet = !json[QString("lastModifiedTime")].isNull() && m_last_modified_time_isValid;

    m_queued_time_isValid = ::OpenAPI::fromJsonValue(m_queued_time, json[QString("queuedTime")]);
    m_queued_time_isSet = !json[QString("queuedTime")].isNull() && m_queued_time_isValid;

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("requestId")]);
    m_request_id_isSet = !json[QString("requestId")].isNull() && m_request_id_isValid;

    m_request_type_isValid = ::OpenAPI::fromJsonValue(m_request_type, json[QString("requestType")]);
    m_request_type_isSet = !json[QString("requestType")].isNull() && m_request_type_isValid;

    m_server_name_isValid = ::OpenAPI::fromJsonValue(m_server_name, json[QString("serverName")]);
    m_server_name_isSet = !json[QString("serverName")].isNull() && m_server_name_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIImportExportResponseProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImportExportResponseProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_blob_uri_isSet) {
        obj.insert(QString("blobUri"), ::OpenAPI::toJsonValue(m_blob_uri));
    }
    if (m_database_name_isSet) {
        obj.insert(QString("databaseName"), ::OpenAPI::toJsonValue(m_database_name));
    }
    if (m_error_message_isSet) {
        obj.insert(QString("errorMessage"), ::OpenAPI::toJsonValue(m_error_message));
    }
    if (m_last_modified_time_isSet) {
        obj.insert(QString("lastModifiedTime"), ::OpenAPI::toJsonValue(m_last_modified_time));
    }
    if (m_queued_time_isSet) {
        obj.insert(QString("queuedTime"), ::OpenAPI::toJsonValue(m_queued_time));
    }
    if (m_request_id_isSet) {
        obj.insert(QString("requestId"), ::OpenAPI::toJsonValue(m_request_id));
    }
    if (m_request_type_isSet) {
        obj.insert(QString("requestType"), ::OpenAPI::toJsonValue(m_request_type));
    }
    if (m_server_name_isSet) {
        obj.insert(QString("serverName"), ::OpenAPI::toJsonValue(m_server_name));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAIImportExportResponseProperties::getBlobUri() const {
    return m_blob_uri;
}
void OAIImportExportResponseProperties::setBlobUri(const QString &blob_uri) {
    m_blob_uri = blob_uri;
    m_blob_uri_isSet = true;
}

bool OAIImportExportResponseProperties::is_blob_uri_Set() const{
    return m_blob_uri_isSet;
}

bool OAIImportExportResponseProperties::is_blob_uri_Valid() const{
    return m_blob_uri_isValid;
}

QString OAIImportExportResponseProperties::getDatabaseName() const {
    return m_database_name;
}
void OAIImportExportResponseProperties::setDatabaseName(const QString &database_name) {
    m_database_name = database_name;
    m_database_name_isSet = true;
}

bool OAIImportExportResponseProperties::is_database_name_Set() const{
    return m_database_name_isSet;
}

bool OAIImportExportResponseProperties::is_database_name_Valid() const{
    return m_database_name_isValid;
}

QString OAIImportExportResponseProperties::getErrorMessage() const {
    return m_error_message;
}
void OAIImportExportResponseProperties::setErrorMessage(const QString &error_message) {
    m_error_message = error_message;
    m_error_message_isSet = true;
}

bool OAIImportExportResponseProperties::is_error_message_Set() const{
    return m_error_message_isSet;
}

bool OAIImportExportResponseProperties::is_error_message_Valid() const{
    return m_error_message_isValid;
}

QString OAIImportExportResponseProperties::getLastModifiedTime() const {
    return m_last_modified_time;
}
void OAIImportExportResponseProperties::setLastModifiedTime(const QString &last_modified_time) {
    m_last_modified_time = last_modified_time;
    m_last_modified_time_isSet = true;
}

bool OAIImportExportResponseProperties::is_last_modified_time_Set() const{
    return m_last_modified_time_isSet;
}

bool OAIImportExportResponseProperties::is_last_modified_time_Valid() const{
    return m_last_modified_time_isValid;
}

QString OAIImportExportResponseProperties::getQueuedTime() const {
    return m_queued_time;
}
void OAIImportExportResponseProperties::setQueuedTime(const QString &queued_time) {
    m_queued_time = queued_time;
    m_queued_time_isSet = true;
}

bool OAIImportExportResponseProperties::is_queued_time_Set() const{
    return m_queued_time_isSet;
}

bool OAIImportExportResponseProperties::is_queued_time_Valid() const{
    return m_queued_time_isValid;
}

QString OAIImportExportResponseProperties::getRequestId() const {
    return m_request_id;
}
void OAIImportExportResponseProperties::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAIImportExportResponseProperties::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAIImportExportResponseProperties::is_request_id_Valid() const{
    return m_request_id_isValid;
}

QString OAIImportExportResponseProperties::getRequestType() const {
    return m_request_type;
}
void OAIImportExportResponseProperties::setRequestType(const QString &request_type) {
    m_request_type = request_type;
    m_request_type_isSet = true;
}

bool OAIImportExportResponseProperties::is_request_type_Set() const{
    return m_request_type_isSet;
}

bool OAIImportExportResponseProperties::is_request_type_Valid() const{
    return m_request_type_isValid;
}

QString OAIImportExportResponseProperties::getServerName() const {
    return m_server_name;
}
void OAIImportExportResponseProperties::setServerName(const QString &server_name) {
    m_server_name = server_name;
    m_server_name_isSet = true;
}

bool OAIImportExportResponseProperties::is_server_name_Set() const{
    return m_server_name_isSet;
}

bool OAIImportExportResponseProperties::is_server_name_Valid() const{
    return m_server_name_isValid;
}

QString OAIImportExportResponseProperties::getStatus() const {
    return m_status;
}
void OAIImportExportResponseProperties::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIImportExportResponseProperties::is_status_Set() const{
    return m_status_isSet;
}

bool OAIImportExportResponseProperties::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIImportExportResponseProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_blob_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_database_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_queued_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImportExportResponseProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
