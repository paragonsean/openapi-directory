/**
 * Azure SQL Database Import/Export spec
 * Provides create and read functionality for Import/Export operations on Azure SQL databases.
 *
 * The version of the OpenAPI document: 2014-04-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImportExtensionProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImportExtensionProperties::OAIImportExtensionProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImportExtensionProperties::OAIImportExtensionProperties() {
    this->initializeModel();
}

OAIImportExtensionProperties::~OAIImportExtensionProperties() {}

void OAIImportExtensionProperties::initializeModel() {

    m_operation_mode_isSet = false;
    m_operation_mode_isValid = false;

    m_administrator_login_isSet = false;
    m_administrator_login_isValid = false;

    m_administrator_login_password_isSet = false;
    m_administrator_login_password_isValid = false;

    m_authentication_type_isSet = false;
    m_authentication_type_isValid = false;

    m_storage_key_isSet = false;
    m_storage_key_isValid = false;

    m_storage_key_type_isSet = false;
    m_storage_key_type_isValid = false;

    m_storage_uri_isSet = false;
    m_storage_uri_isValid = false;
}

void OAIImportExtensionProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImportExtensionProperties::fromJsonObject(QJsonObject json) {

    m_operation_mode_isValid = ::OpenAPI::fromJsonValue(m_operation_mode, json[QString("operationMode")]);
    m_operation_mode_isSet = !json[QString("operationMode")].isNull() && m_operation_mode_isValid;

    m_administrator_login_isValid = ::OpenAPI::fromJsonValue(m_administrator_login, json[QString("administratorLogin")]);
    m_administrator_login_isSet = !json[QString("administratorLogin")].isNull() && m_administrator_login_isValid;

    m_administrator_login_password_isValid = ::OpenAPI::fromJsonValue(m_administrator_login_password, json[QString("administratorLoginPassword")]);
    m_administrator_login_password_isSet = !json[QString("administratorLoginPassword")].isNull() && m_administrator_login_password_isValid;

    m_authentication_type_isValid = ::OpenAPI::fromJsonValue(m_authentication_type, json[QString("authenticationType")]);
    m_authentication_type_isSet = !json[QString("authenticationType")].isNull() && m_authentication_type_isValid;

    m_storage_key_isValid = ::OpenAPI::fromJsonValue(m_storage_key, json[QString("storageKey")]);
    m_storage_key_isSet = !json[QString("storageKey")].isNull() && m_storage_key_isValid;

    m_storage_key_type_isValid = ::OpenAPI::fromJsonValue(m_storage_key_type, json[QString("storageKeyType")]);
    m_storage_key_type_isSet = !json[QString("storageKeyType")].isNull() && m_storage_key_type_isValid;

    m_storage_uri_isValid = ::OpenAPI::fromJsonValue(m_storage_uri, json[QString("storageUri")]);
    m_storage_uri_isSet = !json[QString("storageUri")].isNull() && m_storage_uri_isValid;
}

QString OAIImportExtensionProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImportExtensionProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_operation_mode_isSet) {
        obj.insert(QString("operationMode"), ::OpenAPI::toJsonValue(m_operation_mode));
    }
    if (m_administrator_login_isSet) {
        obj.insert(QString("administratorLogin"), ::OpenAPI::toJsonValue(m_administrator_login));
    }
    if (m_administrator_login_password_isSet) {
        obj.insert(QString("administratorLoginPassword"), ::OpenAPI::toJsonValue(m_administrator_login_password));
    }
    if (m_authentication_type_isSet) {
        obj.insert(QString("authenticationType"), ::OpenAPI::toJsonValue(m_authentication_type));
    }
    if (m_storage_key_isSet) {
        obj.insert(QString("storageKey"), ::OpenAPI::toJsonValue(m_storage_key));
    }
    if (m_storage_key_type_isSet) {
        obj.insert(QString("storageKeyType"), ::OpenAPI::toJsonValue(m_storage_key_type));
    }
    if (m_storage_uri_isSet) {
        obj.insert(QString("storageUri"), ::OpenAPI::toJsonValue(m_storage_uri));
    }
    return obj;
}

QString OAIImportExtensionProperties::getOperationMode() const {
    return m_operation_mode;
}
void OAIImportExtensionProperties::setOperationMode(const QString &operation_mode) {
    m_operation_mode = operation_mode;
    m_operation_mode_isSet = true;
}

bool OAIImportExtensionProperties::is_operation_mode_Set() const{
    return m_operation_mode_isSet;
}

bool OAIImportExtensionProperties::is_operation_mode_Valid() const{
    return m_operation_mode_isValid;
}

QString OAIImportExtensionProperties::getAdministratorLogin() const {
    return m_administrator_login;
}
void OAIImportExtensionProperties::setAdministratorLogin(const QString &administrator_login) {
    m_administrator_login = administrator_login;
    m_administrator_login_isSet = true;
}

bool OAIImportExtensionProperties::is_administrator_login_Set() const{
    return m_administrator_login_isSet;
}

bool OAIImportExtensionProperties::is_administrator_login_Valid() const{
    return m_administrator_login_isValid;
}

QString OAIImportExtensionProperties::getAdministratorLoginPassword() const {
    return m_administrator_login_password;
}
void OAIImportExtensionProperties::setAdministratorLoginPassword(const QString &administrator_login_password) {
    m_administrator_login_password = administrator_login_password;
    m_administrator_login_password_isSet = true;
}

bool OAIImportExtensionProperties::is_administrator_login_password_Set() const{
    return m_administrator_login_password_isSet;
}

bool OAIImportExtensionProperties::is_administrator_login_password_Valid() const{
    return m_administrator_login_password_isValid;
}

QString OAIImportExtensionProperties::getAuthenticationType() const {
    return m_authentication_type;
}
void OAIImportExtensionProperties::setAuthenticationType(const QString &authentication_type) {
    m_authentication_type = authentication_type;
    m_authentication_type_isSet = true;
}

bool OAIImportExtensionProperties::is_authentication_type_Set() const{
    return m_authentication_type_isSet;
}

bool OAIImportExtensionProperties::is_authentication_type_Valid() const{
    return m_authentication_type_isValid;
}

QString OAIImportExtensionProperties::getStorageKey() const {
    return m_storage_key;
}
void OAIImportExtensionProperties::setStorageKey(const QString &storage_key) {
    m_storage_key = storage_key;
    m_storage_key_isSet = true;
}

bool OAIImportExtensionProperties::is_storage_key_Set() const{
    return m_storage_key_isSet;
}

bool OAIImportExtensionProperties::is_storage_key_Valid() const{
    return m_storage_key_isValid;
}

QString OAIImportExtensionProperties::getStorageKeyType() const {
    return m_storage_key_type;
}
void OAIImportExtensionProperties::setStorageKeyType(const QString &storage_key_type) {
    m_storage_key_type = storage_key_type;
    m_storage_key_type_isSet = true;
}

bool OAIImportExtensionProperties::is_storage_key_type_Set() const{
    return m_storage_key_type_isSet;
}

bool OAIImportExtensionProperties::is_storage_key_type_Valid() const{
    return m_storage_key_type_isValid;
}

QString OAIImportExtensionProperties::getStorageUri() const {
    return m_storage_uri;
}
void OAIImportExtensionProperties::setStorageUri(const QString &storage_uri) {
    m_storage_uri = storage_uri;
    m_storage_uri_isSet = true;
}

bool OAIImportExtensionProperties::is_storage_uri_Set() const{
    return m_storage_uri_isSet;
}

bool OAIImportExtensionProperties::is_storage_uri_Valid() const{
    return m_storage_uri_isValid;
}

bool OAIImportExtensionProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_operation_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_administrator_login_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_administrator_login_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_authentication_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_key_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImportExtensionProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_operation_mode_isValid && m_administrator_login_isValid && m_administrator_login_password_isValid && m_storage_key_isValid && m_storage_key_type_isValid && m_storage_uri_isValid && true;
}

} // namespace OpenAPI
