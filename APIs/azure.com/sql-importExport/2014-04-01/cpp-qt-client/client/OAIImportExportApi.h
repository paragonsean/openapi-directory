/**
 * Azure SQL Database Import/Export spec
 * Provides create and read functionality for Import/Export operations on Azure SQL databases.
 *
 * The version of the OpenAPI document: 2014-04-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIImportExportApi_H
#define OAI_OAIImportExportApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIExportRequest.h"
#include "OAIImportExportResponse.h"
#include "OAIImportExtensionRequest.h"
#include "OAIImportRequest.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIImportExportApi : public QObject {
    Q_OBJECT

public:
    OAIImportExportApi(const int timeOut = 0);
    ~OAIImportExportApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  extension_name QString [required]
    * @param[in]  parameters OAIImportExtensionRequest [required]
    */
    virtual void databasesCreateImportOperation(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &server_name, const QString &database_name, const QString &extension_name, const OAIImportExtensionRequest &parameters);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  parameters OAIExportRequest [required]
    */
    virtual void databasesExport(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &server_name, const QString &database_name, const OAIExportRequest &parameters);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  parameters OAIImportRequest [required]
    */
    virtual void databasesImport(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &server_name, const OAIImportRequest &parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void databasesCreateImportOperationCallback(OAIHttpRequestWorker *worker);
    void databasesExportCallback(OAIHttpRequestWorker *worker);
    void databasesImportCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void databasesCreateImportOperationSignal(OAIImportExportResponse summary);
    void databasesExportSignal(OAIImportExportResponse summary);
    void databasesImportSignal(OAIImportExportResponse summary);


    void databasesCreateImportOperationSignalFull(OAIHttpRequestWorker *worker, OAIImportExportResponse summary);
    void databasesExportSignalFull(OAIHttpRequestWorker *worker, OAIImportExportResponse summary);
    void databasesImportSignalFull(OAIHttpRequestWorker *worker, OAIImportExportResponse summary);

    Q_DECL_DEPRECATED_X("Use databasesCreateImportOperationSignalError() instead")
    void databasesCreateImportOperationSignalE(OAIImportExportResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void databasesCreateImportOperationSignalError(OAIImportExportResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databasesExportSignalError() instead")
    void databasesExportSignalE(OAIImportExportResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void databasesExportSignalError(OAIImportExportResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databasesImportSignalError() instead")
    void databasesImportSignalE(OAIImportExportResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void databasesImportSignalError(OAIImportExportResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use databasesCreateImportOperationSignalErrorFull() instead")
    void databasesCreateImportOperationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databasesCreateImportOperationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databasesExportSignalErrorFull() instead")
    void databasesExportSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databasesExportSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databasesImportSignalErrorFull() instead")
    void databasesImportSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databasesImportSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
