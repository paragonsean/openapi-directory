/**
 * SearchManagementClient
 * Client that can be used to manage Azure Search services and API keys.
 *
 * The version of the OpenAPI document: 2015-02-28
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Sku from './Sku';

/**
 * The SearchServiceReadableProperties model module.
 * @module model/SearchServiceReadableProperties
 * @version 2015-02-28
 */
class SearchServiceReadableProperties {
    /**
     * Constructs a new <code>SearchServiceReadableProperties</code>.
     * Defines all the properties of an Azure Search service.
     * @alias module:model/SearchServiceReadableProperties
     */
    constructor() { 
        
        SearchServiceReadableProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SearchServiceReadableProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SearchServiceReadableProperties} obj Optional instance to populate.
     * @return {module:model/SearchServiceReadableProperties} The populated <code>SearchServiceReadableProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SearchServiceReadableProperties();

            if (data.hasOwnProperty('partitionCount')) {
                obj['partitionCount'] = ApiClient.convertToType(data['partitionCount'], 'Number');
            }
            if (data.hasOwnProperty('provisioningState')) {
                obj['provisioningState'] = ApiClient.convertToType(data['provisioningState'], 'String');
            }
            if (data.hasOwnProperty('replicaCount')) {
                obj['replicaCount'] = ApiClient.convertToType(data['replicaCount'], 'Number');
            }
            if (data.hasOwnProperty('sku')) {
                obj['sku'] = Sku.constructFromObject(data['sku']);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('statusDetails')) {
                obj['statusDetails'] = ApiClient.convertToType(data['statusDetails'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SearchServiceReadableProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SearchServiceReadableProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['provisioningState'] && !(typeof data['provisioningState'] === 'string' || data['provisioningState'] instanceof String)) {
            throw new Error("Expected the field `provisioningState` to be a primitive type in the JSON string but got " + data['provisioningState']);
        }
        // validate the optional field `sku`
        if (data['sku']) { // data not null
          Sku.validateJSON(data['sku']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['statusDetails'] && !(typeof data['statusDetails'] === 'string' || data['statusDetails'] instanceof String)) {
            throw new Error("Expected the field `statusDetails` to be a primitive type in the JSON string but got " + data['statusDetails']);
        }

        return true;
    }


}



/**
 * The number of partitions in the Search service; if specified, it can be 1, 2, 3, 4, 6, or 12.
 * @member {Number} partitionCount
 */
SearchServiceReadableProperties.prototype['partitionCount'] = undefined;

/**
 * The state of the last provisioning operation performed on the Search service.
 * @member {module:model/SearchServiceReadableProperties.ProvisioningStateEnum} provisioningState
 */
SearchServiceReadableProperties.prototype['provisioningState'] = undefined;

/**
 * The number of replicas in the Search service. If specified, it must be a value between 1 and 6 inclusive.
 * @member {Number} replicaCount
 */
SearchServiceReadableProperties.prototype['replicaCount'] = undefined;

/**
 * @member {module:model/Sku} sku
 */
SearchServiceReadableProperties.prototype['sku'] = undefined;

/**
 * The status of the Search service.
 * @member {module:model/SearchServiceReadableProperties.StatusEnum} status
 */
SearchServiceReadableProperties.prototype['status'] = undefined;

/**
 * The details of the Search service status.
 * @member {String} statusDetails
 */
SearchServiceReadableProperties.prototype['statusDetails'] = undefined;





/**
 * Allowed values for the <code>provisioningState</code> property.
 * @enum {String}
 * @readonly
 */
SearchServiceReadableProperties['ProvisioningStateEnum'] = {

    /**
     * value: "succeeded"
     * @const
     */
    "succeeded": "succeeded",

    /**
     * value: "provisioning"
     * @const
     */
    "provisioning": "provisioning",

    /**
     * value: "failed"
     * @const
     */
    "failed": "failed"
};


/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
SearchServiceReadableProperties['StatusEnum'] = {

    /**
     * value: "running"
     * @const
     */
    "running": "running",

    /**
     * value: "provisioning"
     * @const
     */
    "provisioning": "provisioning",

    /**
     * value: "deleting"
     * @const
     */
    "deleting": "deleting",

    /**
     * value: "degraded"
     * @const
     */
    "degraded": "degraded",

    /**
     * value: "disabled"
     * @const
     */
    "disabled": "disabled",

    /**
     * value: "error"
     * @const
     */
    "error": "error"
};



export default SearchServiceReadableProperties;

