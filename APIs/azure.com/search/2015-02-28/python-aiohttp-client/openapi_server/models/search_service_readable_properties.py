# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.sku import Sku
from openapi_server import util


class SearchServiceReadableProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, partition_count: int=None, provisioning_state: str=None, replica_count: int=None, sku: Sku=None, status: str=None, status_details: str=None):
        """SearchServiceReadableProperties - a model defined in OpenAPI

        :param partition_count: The partition_count of this SearchServiceReadableProperties.
        :param provisioning_state: The provisioning_state of this SearchServiceReadableProperties.
        :param replica_count: The replica_count of this SearchServiceReadableProperties.
        :param sku: The sku of this SearchServiceReadableProperties.
        :param status: The status of this SearchServiceReadableProperties.
        :param status_details: The status_details of this SearchServiceReadableProperties.
        """
        self.openapi_types = {
            'partition_count': int,
            'provisioning_state': str,
            'replica_count': int,
            'sku': Sku,
            'status': str,
            'status_details': str
        }

        self.attribute_map = {
            'partition_count': 'partitionCount',
            'provisioning_state': 'provisioningState',
            'replica_count': 'replicaCount',
            'sku': 'sku',
            'status': 'status',
            'status_details': 'statusDetails'
        }

        self._partition_count = partition_count
        self._provisioning_state = provisioning_state
        self._replica_count = replica_count
        self._sku = sku
        self._status = status
        self._status_details = status_details

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SearchServiceReadableProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SearchServiceReadableProperties of this SearchServiceReadableProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def partition_count(self):
        """Gets the partition_count of this SearchServiceReadableProperties.

        The number of partitions in the Search service; if specified, it can be 1, 2, 3, 4, 6, or 12.

        :return: The partition_count of this SearchServiceReadableProperties.
        :rtype: int
        """
        return self._partition_count

    @partition_count.setter
    def partition_count(self, partition_count):
        """Sets the partition_count of this SearchServiceReadableProperties.

        The number of partitions in the Search service; if specified, it can be 1, 2, 3, 4, 6, or 12.

        :param partition_count: The partition_count of this SearchServiceReadableProperties.
        :type partition_count: int
        """

        self._partition_count = partition_count

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this SearchServiceReadableProperties.

        The state of the last provisioning operation performed on the Search service.

        :return: The provisioning_state of this SearchServiceReadableProperties.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this SearchServiceReadableProperties.

        The state of the last provisioning operation performed on the Search service.

        :param provisioning_state: The provisioning_state of this SearchServiceReadableProperties.
        :type provisioning_state: str
        """
        allowed_values = ["succeeded", "provisioning", "failed"]  # noqa: E501
        if provisioning_state not in allowed_values:
            raise ValueError(
                "Invalid value for `provisioning_state` ({0}), must be one of {1}"
                .format(provisioning_state, allowed_values)
            )

        self._provisioning_state = provisioning_state

    @property
    def replica_count(self):
        """Gets the replica_count of this SearchServiceReadableProperties.

        The number of replicas in the Search service. If specified, it must be a value between 1 and 6 inclusive.

        :return: The replica_count of this SearchServiceReadableProperties.
        :rtype: int
        """
        return self._replica_count

    @replica_count.setter
    def replica_count(self, replica_count):
        """Sets the replica_count of this SearchServiceReadableProperties.

        The number of replicas in the Search service. If specified, it must be a value between 1 and 6 inclusive.

        :param replica_count: The replica_count of this SearchServiceReadableProperties.
        :type replica_count: int
        """

        self._replica_count = replica_count

    @property
    def sku(self):
        """Gets the sku of this SearchServiceReadableProperties.


        :return: The sku of this SearchServiceReadableProperties.
        :rtype: Sku
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """Sets the sku of this SearchServiceReadableProperties.


        :param sku: The sku of this SearchServiceReadableProperties.
        :type sku: Sku
        """

        self._sku = sku

    @property
    def status(self):
        """Gets the status of this SearchServiceReadableProperties.

        The status of the Search service.

        :return: The status of this SearchServiceReadableProperties.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this SearchServiceReadableProperties.

        The status of the Search service.

        :param status: The status of this SearchServiceReadableProperties.
        :type status: str
        """
        allowed_values = ["running", "provisioning", "deleting", "degraded", "disabled", "error"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def status_details(self):
        """Gets the status_details of this SearchServiceReadableProperties.

        The details of the Search service status.

        :return: The status_details of this SearchServiceReadableProperties.
        :rtype: str
        """
        return self._status_details

    @status_details.setter
    def status_details(self, status_details):
        """Sets the status_details of this SearchServiceReadableProperties.

        The details of the Search service status.

        :param status_details: The status_details of this SearchServiceReadableProperties.
        :type status_details: str
        """

        self._status_details = status_details
