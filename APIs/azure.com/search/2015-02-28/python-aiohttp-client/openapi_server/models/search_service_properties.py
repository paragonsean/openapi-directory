# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.sku import Sku
from openapi_server import util


class SearchServiceProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, partition_count: int=None, replica_count: int=None, sku: Sku=None):
        """SearchServiceProperties - a model defined in OpenAPI

        :param partition_count: The partition_count of this SearchServiceProperties.
        :param replica_count: The replica_count of this SearchServiceProperties.
        :param sku: The sku of this SearchServiceProperties.
        """
        self.openapi_types = {
            'partition_count': int,
            'replica_count': int,
            'sku': Sku
        }

        self.attribute_map = {
            'partition_count': 'partitionCount',
            'replica_count': 'replicaCount',
            'sku': 'sku'
        }

        self._partition_count = partition_count
        self._replica_count = replica_count
        self._sku = sku

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SearchServiceProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SearchServiceProperties of this SearchServiceProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def partition_count(self):
        """Gets the partition_count of this SearchServiceProperties.

        The number of partitions in the Search service; if specified, it can be 1, 2, 3, 4, 6, or 12.

        :return: The partition_count of this SearchServiceProperties.
        :rtype: int
        """
        return self._partition_count

    @partition_count.setter
    def partition_count(self, partition_count):
        """Sets the partition_count of this SearchServiceProperties.

        The number of partitions in the Search service; if specified, it can be 1, 2, 3, 4, 6, or 12.

        :param partition_count: The partition_count of this SearchServiceProperties.
        :type partition_count: int
        """

        self._partition_count = partition_count

    @property
    def replica_count(self):
        """Gets the replica_count of this SearchServiceProperties.

        The number of replicas in the Search service. If specified, it must be a value between 1 and 6 inclusive.

        :return: The replica_count of this SearchServiceProperties.
        :rtype: int
        """
        return self._replica_count

    @replica_count.setter
    def replica_count(self, replica_count):
        """Sets the replica_count of this SearchServiceProperties.

        The number of replicas in the Search service. If specified, it must be a value between 1 and 6 inclusive.

        :param replica_count: The replica_count of this SearchServiceProperties.
        :type replica_count: int
        """

        self._replica_count = replica_count

    @property
    def sku(self):
        """Gets the sku of this SearchServiceProperties.


        :return: The sku of this SearchServiceProperties.
        :rtype: Sku
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """Sets the sku of this SearchServiceProperties.


        :param sku: The sku of this SearchServiceProperties.
        :type sku: Sku
        """

        self._sku = sku
