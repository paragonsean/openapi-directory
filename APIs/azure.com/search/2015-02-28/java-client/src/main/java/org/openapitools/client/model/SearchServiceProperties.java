/*
 * SearchManagementClient
 * Client that can be used to manage Azure Search services and API keys.
 *
 * The version of the OpenAPI document: 2015-02-28
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Sku;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Defines properties of an Azure Search service that can be modified.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:20:11.131085-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SearchServiceProperties {
  public static final String SERIALIZED_NAME_PARTITION_COUNT = "partitionCount";
  @SerializedName(SERIALIZED_NAME_PARTITION_COUNT)
  private Integer partitionCount;

  public static final String SERIALIZED_NAME_REPLICA_COUNT = "replicaCount";
  @SerializedName(SERIALIZED_NAME_REPLICA_COUNT)
  private Integer replicaCount;

  public static final String SERIALIZED_NAME_SKU = "sku";
  @SerializedName(SERIALIZED_NAME_SKU)
  private Sku sku;

  public SearchServiceProperties() {
  }

  public SearchServiceProperties partitionCount(Integer partitionCount) {
    this.partitionCount = partitionCount;
    return this;
  }

  /**
   * The number of partitions in the Search service; if specified, it can be 1, 2, 3, 4, 6, or 12.
   * @return partitionCount
   */
  @javax.annotation.Nullable
  public Integer getPartitionCount() {
    return partitionCount;
  }

  public void setPartitionCount(Integer partitionCount) {
    this.partitionCount = partitionCount;
  }


  public SearchServiceProperties replicaCount(Integer replicaCount) {
    this.replicaCount = replicaCount;
    return this;
  }

  /**
   * The number of replicas in the Search service. If specified, it must be a value between 1 and 6 inclusive.
   * @return replicaCount
   */
  @javax.annotation.Nullable
  public Integer getReplicaCount() {
    return replicaCount;
  }

  public void setReplicaCount(Integer replicaCount) {
    this.replicaCount = replicaCount;
  }


  public SearchServiceProperties sku(Sku sku) {
    this.sku = sku;
    return this;
  }

  /**
   * Get sku
   * @return sku
   */
  @javax.annotation.Nullable
  public Sku getSku() {
    return sku;
  }

  public void setSku(Sku sku) {
    this.sku = sku;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SearchServiceProperties searchServiceProperties = (SearchServiceProperties) o;
    return Objects.equals(this.partitionCount, searchServiceProperties.partitionCount) &&
        Objects.equals(this.replicaCount, searchServiceProperties.replicaCount) &&
        Objects.equals(this.sku, searchServiceProperties.sku);
  }

  @Override
  public int hashCode() {
    return Objects.hash(partitionCount, replicaCount, sku);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SearchServiceProperties {\n");
    sb.append("    partitionCount: ").append(toIndentedString(partitionCount)).append("\n");
    sb.append("    replicaCount: ").append(toIndentedString(replicaCount)).append("\n");
    sb.append("    sku: ").append(toIndentedString(sku)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("partitionCount");
    openapiFields.add("replicaCount");
    openapiFields.add("sku");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SearchServiceProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SearchServiceProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SearchServiceProperties is not found in the empty JSON string", SearchServiceProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SearchServiceProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SearchServiceProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `sku`
      if (jsonObj.get("sku") != null && !jsonObj.get("sku").isJsonNull()) {
        Sku.validateJsonElement(jsonObj.get("sku"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SearchServiceProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SearchServiceProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SearchServiceProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SearchServiceProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<SearchServiceProperties>() {
           @Override
           public void write(JsonWriter out, SearchServiceProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SearchServiceProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SearchServiceProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SearchServiceProperties
   * @throws IOException if the JSON string is invalid with respect to SearchServiceProperties
   */
  public static SearchServiceProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SearchServiceProperties.class);
  }

  /**
   * Convert an instance of SearchServiceProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

