/**
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2017-03-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIServerDnsAliasesApi_H
#define OAI_OAIServerDnsAliasesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIServerDnsAlias.h"
#include "OAIServerDnsAliasAcquisition.h"
#include "OAIServerDnsAliasListResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIServerDnsAliasesApi : public QObject {
    Q_OBJECT

public:
    OAIServerDnsAliasesApi(const int timeOut = 0);
    ~OAIServerDnsAliasesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  dns_alias_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAIServerDnsAliasAcquisition [required]
    */
    virtual void serverDnsAliasesAcquire(const QString &resource_group_name, const QString &server_name, const QString &dns_alias_name, const QString &subscription_id, const QString &api_version, const OAIServerDnsAliasAcquisition &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  dns_alias_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void serverDnsAliasesCreateOrUpdate(const QString &resource_group_name, const QString &server_name, const QString &dns_alias_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  dns_alias_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void serverDnsAliasesDelete(const QString &resource_group_name, const QString &server_name, const QString &dns_alias_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  dns_alias_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void serverDnsAliasesGet(const QString &resource_group_name, const QString &server_name, const QString &dns_alias_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void serverDnsAliasesListByServer(const QString &resource_group_name, const QString &server_name, const QString &subscription_id, const QString &api_version);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void serverDnsAliasesAcquireCallback(OAIHttpRequestWorker *worker);
    void serverDnsAliasesCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void serverDnsAliasesDeleteCallback(OAIHttpRequestWorker *worker);
    void serverDnsAliasesGetCallback(OAIHttpRequestWorker *worker);
    void serverDnsAliasesListByServerCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void serverDnsAliasesAcquireSignal();
    void serverDnsAliasesCreateOrUpdateSignal(OAIServerDnsAlias summary);
    void serverDnsAliasesDeleteSignal();
    void serverDnsAliasesGetSignal(OAIServerDnsAlias summary);
    void serverDnsAliasesListByServerSignal(OAIServerDnsAliasListResult summary);


    void serverDnsAliasesAcquireSignalFull(OAIHttpRequestWorker *worker);
    void serverDnsAliasesCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIServerDnsAlias summary);
    void serverDnsAliasesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void serverDnsAliasesGetSignalFull(OAIHttpRequestWorker *worker, OAIServerDnsAlias summary);
    void serverDnsAliasesListByServerSignalFull(OAIHttpRequestWorker *worker, OAIServerDnsAliasListResult summary);

    Q_DECL_DEPRECATED_X("Use serverDnsAliasesAcquireSignalError() instead")
    void serverDnsAliasesAcquireSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void serverDnsAliasesAcquireSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serverDnsAliasesCreateOrUpdateSignalError() instead")
    void serverDnsAliasesCreateOrUpdateSignalE(OAIServerDnsAlias summary, QNetworkReply::NetworkError error_type, QString error_str);
    void serverDnsAliasesCreateOrUpdateSignalError(OAIServerDnsAlias summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serverDnsAliasesDeleteSignalError() instead")
    void serverDnsAliasesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void serverDnsAliasesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serverDnsAliasesGetSignalError() instead")
    void serverDnsAliasesGetSignalE(OAIServerDnsAlias summary, QNetworkReply::NetworkError error_type, QString error_str);
    void serverDnsAliasesGetSignalError(OAIServerDnsAlias summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serverDnsAliasesListByServerSignalError() instead")
    void serverDnsAliasesListByServerSignalE(OAIServerDnsAliasListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void serverDnsAliasesListByServerSignalError(OAIServerDnsAliasListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use serverDnsAliasesAcquireSignalErrorFull() instead")
    void serverDnsAliasesAcquireSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void serverDnsAliasesAcquireSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serverDnsAliasesCreateOrUpdateSignalErrorFull() instead")
    void serverDnsAliasesCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void serverDnsAliasesCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serverDnsAliasesDeleteSignalErrorFull() instead")
    void serverDnsAliasesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void serverDnsAliasesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serverDnsAliasesGetSignalErrorFull() instead")
    void serverDnsAliasesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void serverDnsAliasesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serverDnsAliasesListByServerSignalErrorFull() instead")
    void serverDnsAliasesListByServerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void serverDnsAliasesListByServerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
