/*
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2017-03-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties of a server DNS alias.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:20:16.288578-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ServerDnsAliasProperties {
  public static final String SERIALIZED_NAME_AZURE_DNS_RECORD = "azureDnsRecord";
  @SerializedName(SERIALIZED_NAME_AZURE_DNS_RECORD)
  private String azureDnsRecord;

  public ServerDnsAliasProperties() {
  }

  public ServerDnsAliasProperties(
     String azureDnsRecord
  ) {
    this();
    this.azureDnsRecord = azureDnsRecord;
  }

  /**
   * The fully qualified DNS record for alias
   * @return azureDnsRecord
   */
  @javax.annotation.Nullable
  public String getAzureDnsRecord() {
    return azureDnsRecord;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ServerDnsAliasProperties serverDnsAliasProperties = (ServerDnsAliasProperties) o;
    return Objects.equals(this.azureDnsRecord, serverDnsAliasProperties.azureDnsRecord);
  }

  @Override
  public int hashCode() {
    return Objects.hash(azureDnsRecord);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ServerDnsAliasProperties {\n");
    sb.append("    azureDnsRecord: ").append(toIndentedString(azureDnsRecord)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("azureDnsRecord");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ServerDnsAliasProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ServerDnsAliasProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ServerDnsAliasProperties is not found in the empty JSON string", ServerDnsAliasProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ServerDnsAliasProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ServerDnsAliasProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("azureDnsRecord") != null && !jsonObj.get("azureDnsRecord").isJsonNull()) && !jsonObj.get("azureDnsRecord").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `azureDnsRecord` to be a primitive type in the JSON string but got `%s`", jsonObj.get("azureDnsRecord").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ServerDnsAliasProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ServerDnsAliasProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ServerDnsAliasProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ServerDnsAliasProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<ServerDnsAliasProperties>() {
           @Override
           public void write(JsonWriter out, ServerDnsAliasProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ServerDnsAliasProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ServerDnsAliasProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ServerDnsAliasProperties
   * @throws IOException if the JSON string is invalid with respect to ServerDnsAliasProperties
   */
  public static ServerDnsAliasProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ServerDnsAliasProperties.class);
  }

  /**
   * Convert an instance of ServerDnsAliasProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

