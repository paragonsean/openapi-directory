/**
 * ApiManagementClient
 * Use these REST APIs for performing operations on Identity Provider entity associated with your Azure API Management deployment. Setting up an external Identity Provider for authentication can help you manage the developer portal logins using the OAuth2 flow.
 *
 * The version of the OpenAPI document: 2018-06-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIdentityProvider_ListByService_200_response_value_inner_properties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIdentityProvider_ListByService_200_response_value_inner_properties::OAIIdentityProvider_ListByService_200_response_value_inner_properties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIdentityProvider_ListByService_200_response_value_inner_properties::OAIIdentityProvider_ListByService_200_response_value_inner_properties() {
    this->initializeModel();
}

OAIIdentityProvider_ListByService_200_response_value_inner_properties::~OAIIdentityProvider_ListByService_200_response_value_inner_properties() {}

void OAIIdentityProvider_ListByService_200_response_value_inner_properties::initializeModel() {

    m_client_id_isSet = false;
    m_client_id_isValid = false;

    m_client_secret_isSet = false;
    m_client_secret_isValid = false;
}

void OAIIdentityProvider_ListByService_200_response_value_inner_properties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIdentityProvider_ListByService_200_response_value_inner_properties::fromJsonObject(QJsonObject json) {

    m_client_id_isValid = ::OpenAPI::fromJsonValue(m_client_id, json[QString("clientId")]);
    m_client_id_isSet = !json[QString("clientId")].isNull() && m_client_id_isValid;

    m_client_secret_isValid = ::OpenAPI::fromJsonValue(m_client_secret, json[QString("clientSecret")]);
    m_client_secret_isSet = !json[QString("clientSecret")].isNull() && m_client_secret_isValid;
}

QString OAIIdentityProvider_ListByService_200_response_value_inner_properties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIdentityProvider_ListByService_200_response_value_inner_properties::asJsonObject() const {
    QJsonObject obj;
    if (m_client_id_isSet) {
        obj.insert(QString("clientId"), ::OpenAPI::toJsonValue(m_client_id));
    }
    if (m_client_secret_isSet) {
        obj.insert(QString("clientSecret"), ::OpenAPI::toJsonValue(m_client_secret));
    }
    return obj;
}

QString OAIIdentityProvider_ListByService_200_response_value_inner_properties::getClientId() const {
    return m_client_id;
}
void OAIIdentityProvider_ListByService_200_response_value_inner_properties::setClientId(const QString &client_id) {
    m_client_id = client_id;
    m_client_id_isSet = true;
}

bool OAIIdentityProvider_ListByService_200_response_value_inner_properties::is_client_id_Set() const{
    return m_client_id_isSet;
}

bool OAIIdentityProvider_ListByService_200_response_value_inner_properties::is_client_id_Valid() const{
    return m_client_id_isValid;
}

QString OAIIdentityProvider_ListByService_200_response_value_inner_properties::getClientSecret() const {
    return m_client_secret;
}
void OAIIdentityProvider_ListByService_200_response_value_inner_properties::setClientSecret(const QString &client_secret) {
    m_client_secret = client_secret;
    m_client_secret_isSet = true;
}

bool OAIIdentityProvider_ListByService_200_response_value_inner_properties::is_client_secret_Set() const{
    return m_client_secret_isSet;
}

bool OAIIdentityProvider_ListByService_200_response_value_inner_properties::is_client_secret_Valid() const{
    return m_client_secret_isValid;
}

bool OAIIdentityProvider_ListByService_200_response_value_inner_properties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_secret_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIdentityProvider_ListByService_200_response_value_inner_properties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_client_id_isValid && m_client_secret_isValid && true;
}

} // namespace OpenAPI
