/*
 * ApiManagementClient
 * Use these REST APIs for performing operations on Identity Provider entity associated with your Azure API Management deployment. Setting up an external Identity Provider for authentication can help you manage the developer portal logins using the OAuth2 flow.
 *
 * The version of the OpenAPI document: 2017-03-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.IdentityProviderListByServiceDefaultResponse;
import org.openapitools.client.model.IdentityProviderUpdateParameters;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for IdentityProvidersApi
 */
@Disabled
public class IdentityProvidersApiTest {

    private final IdentityProvidersApi api = new IdentityProvidersApi();

    /**
     * Updates an existing IdentityProvider configuration.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void identityProviderUpdateTest() throws ApiException {
        String resourceGroupName = null;
        String serviceName = null;
        String identityProviderName = null;
        String ifMatch = null;
        String apiVersion = null;
        String subscriptionId = null;
        IdentityProviderUpdateParameters parameters = null;
        api.identityProviderUpdate(resourceGroupName, serviceName, identityProviderName, ifMatch, apiVersion, subscriptionId, parameters);
        // TODO: test validations
    }

}
