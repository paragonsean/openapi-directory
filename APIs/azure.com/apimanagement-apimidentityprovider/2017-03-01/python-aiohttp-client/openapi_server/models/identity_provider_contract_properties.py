# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class IdentityProviderContractProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client_id: str=None, client_secret: str=None, allowed_tenants: List[str]=None, password_reset_policy_name: str=None, profile_editing_policy_name: str=None, signin_policy_name: str=None, signup_policy_name: str=None, type: str=None):
        """IdentityProviderContractProperties - a model defined in OpenAPI

        :param client_id: The client_id of this IdentityProviderContractProperties.
        :param client_secret: The client_secret of this IdentityProviderContractProperties.
        :param allowed_tenants: The allowed_tenants of this IdentityProviderContractProperties.
        :param password_reset_policy_name: The password_reset_policy_name of this IdentityProviderContractProperties.
        :param profile_editing_policy_name: The profile_editing_policy_name of this IdentityProviderContractProperties.
        :param signin_policy_name: The signin_policy_name of this IdentityProviderContractProperties.
        :param signup_policy_name: The signup_policy_name of this IdentityProviderContractProperties.
        :param type: The type of this IdentityProviderContractProperties.
        """
        self.openapi_types = {
            'client_id': str,
            'client_secret': str,
            'allowed_tenants': List[str],
            'password_reset_policy_name': str,
            'profile_editing_policy_name': str,
            'signin_policy_name': str,
            'signup_policy_name': str,
            'type': str
        }

        self.attribute_map = {
            'client_id': 'clientId',
            'client_secret': 'clientSecret',
            'allowed_tenants': 'allowedTenants',
            'password_reset_policy_name': 'passwordResetPolicyName',
            'profile_editing_policy_name': 'profileEditingPolicyName',
            'signin_policy_name': 'signinPolicyName',
            'signup_policy_name': 'signupPolicyName',
            'type': 'type'
        }

        self._client_id = client_id
        self._client_secret = client_secret
        self._allowed_tenants = allowed_tenants
        self._password_reset_policy_name = password_reset_policy_name
        self._profile_editing_policy_name = profile_editing_policy_name
        self._signin_policy_name = signin_policy_name
        self._signup_policy_name = signup_policy_name
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IdentityProviderContractProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IdentityProviderContractProperties of this IdentityProviderContractProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_id(self):
        """Gets the client_id of this IdentityProviderContractProperties.

        Client Id of the Application in the external Identity Provider. It is App ID for Facebook login, Client ID for Google login, App ID for Microsoft.

        :return: The client_id of this IdentityProviderContractProperties.
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this IdentityProviderContractProperties.

        Client Id of the Application in the external Identity Provider. It is App ID for Facebook login, Client ID for Google login, App ID for Microsoft.

        :param client_id: The client_id of this IdentityProviderContractProperties.
        :type client_id: str
        """
        if client_id is None:
            raise ValueError("Invalid value for `client_id`, must not be `None`")
        if client_id is not None and len(client_id) < 1:
            raise ValueError("Invalid value for `client_id`, length must be greater than or equal to `1`")

        self._client_id = client_id

    @property
    def client_secret(self):
        """Gets the client_secret of this IdentityProviderContractProperties.

        Client secret of the Application in external Identity Provider, used to authenticate login request. For example, it is App Secret for Facebook login, API Key for Google login, Public Key for Microsoft.

        :return: The client_secret of this IdentityProviderContractProperties.
        :rtype: str
        """
        return self._client_secret

    @client_secret.setter
    def client_secret(self, client_secret):
        """Sets the client_secret of this IdentityProviderContractProperties.

        Client secret of the Application in external Identity Provider, used to authenticate login request. For example, it is App Secret for Facebook login, API Key for Google login, Public Key for Microsoft.

        :param client_secret: The client_secret of this IdentityProviderContractProperties.
        :type client_secret: str
        """
        if client_secret is None:
            raise ValueError("Invalid value for `client_secret`, must not be `None`")
        if client_secret is not None and len(client_secret) < 1:
            raise ValueError("Invalid value for `client_secret`, length must be greater than or equal to `1`")

        self._client_secret = client_secret

    @property
    def allowed_tenants(self):
        """Gets the allowed_tenants of this IdentityProviderContractProperties.

        List of Allowed Tenants when configuring Azure Active Directory login.

        :return: The allowed_tenants of this IdentityProviderContractProperties.
        :rtype: List[str]
        """
        return self._allowed_tenants

    @allowed_tenants.setter
    def allowed_tenants(self, allowed_tenants):
        """Sets the allowed_tenants of this IdentityProviderContractProperties.

        List of Allowed Tenants when configuring Azure Active Directory login.

        :param allowed_tenants: The allowed_tenants of this IdentityProviderContractProperties.
        :type allowed_tenants: List[str]
        """
        if allowed_tenants is not None and len(allowed_tenants) > 32:
            raise ValueError("Invalid value for `allowed_tenants`, number of items must be less than or equal to `32`")

        self._allowed_tenants = allowed_tenants

    @property
    def password_reset_policy_name(self):
        """Gets the password_reset_policy_name of this IdentityProviderContractProperties.

        Password Reset Policy Name. Only applies to AAD B2C Identity Provider.

        :return: The password_reset_policy_name of this IdentityProviderContractProperties.
        :rtype: str
        """
        return self._password_reset_policy_name

    @password_reset_policy_name.setter
    def password_reset_policy_name(self, password_reset_policy_name):
        """Sets the password_reset_policy_name of this IdentityProviderContractProperties.

        Password Reset Policy Name. Only applies to AAD B2C Identity Provider.

        :param password_reset_policy_name: The password_reset_policy_name of this IdentityProviderContractProperties.
        :type password_reset_policy_name: str
        """
        if password_reset_policy_name is not None and len(password_reset_policy_name) < 1:
            raise ValueError("Invalid value for `password_reset_policy_name`, length must be greater than or equal to `1`")

        self._password_reset_policy_name = password_reset_policy_name

    @property
    def profile_editing_policy_name(self):
        """Gets the profile_editing_policy_name of this IdentityProviderContractProperties.

        Profile Editing Policy Name. Only applies to AAD B2C Identity Provider.

        :return: The profile_editing_policy_name of this IdentityProviderContractProperties.
        :rtype: str
        """
        return self._profile_editing_policy_name

    @profile_editing_policy_name.setter
    def profile_editing_policy_name(self, profile_editing_policy_name):
        """Sets the profile_editing_policy_name of this IdentityProviderContractProperties.

        Profile Editing Policy Name. Only applies to AAD B2C Identity Provider.

        :param profile_editing_policy_name: The profile_editing_policy_name of this IdentityProviderContractProperties.
        :type profile_editing_policy_name: str
        """
        if profile_editing_policy_name is not None and len(profile_editing_policy_name) < 1:
            raise ValueError("Invalid value for `profile_editing_policy_name`, length must be greater than or equal to `1`")

        self._profile_editing_policy_name = profile_editing_policy_name

    @property
    def signin_policy_name(self):
        """Gets the signin_policy_name of this IdentityProviderContractProperties.

        Signin Policy Name. Only applies to AAD B2C Identity Provider.

        :return: The signin_policy_name of this IdentityProviderContractProperties.
        :rtype: str
        """
        return self._signin_policy_name

    @signin_policy_name.setter
    def signin_policy_name(self, signin_policy_name):
        """Sets the signin_policy_name of this IdentityProviderContractProperties.

        Signin Policy Name. Only applies to AAD B2C Identity Provider.

        :param signin_policy_name: The signin_policy_name of this IdentityProviderContractProperties.
        :type signin_policy_name: str
        """
        if signin_policy_name is not None and len(signin_policy_name) < 1:
            raise ValueError("Invalid value for `signin_policy_name`, length must be greater than or equal to `1`")

        self._signin_policy_name = signin_policy_name

    @property
    def signup_policy_name(self):
        """Gets the signup_policy_name of this IdentityProviderContractProperties.

        Signup Policy Name. Only applies to AAD B2C Identity Provider.

        :return: The signup_policy_name of this IdentityProviderContractProperties.
        :rtype: str
        """
        return self._signup_policy_name

    @signup_policy_name.setter
    def signup_policy_name(self, signup_policy_name):
        """Sets the signup_policy_name of this IdentityProviderContractProperties.

        Signup Policy Name. Only applies to AAD B2C Identity Provider.

        :param signup_policy_name: The signup_policy_name of this IdentityProviderContractProperties.
        :type signup_policy_name: str
        """
        if signup_policy_name is not None and len(signup_policy_name) < 1:
            raise ValueError("Invalid value for `signup_policy_name`, length must be greater than or equal to `1`")

        self._signup_policy_name = signup_policy_name

    @property
    def type(self):
        """Gets the type of this IdentityProviderContractProperties.

        Identity Provider Type identifier.

        :return: The type of this IdentityProviderContractProperties.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this IdentityProviderContractProperties.

        Identity Provider Type identifier.

        :param type: The type of this IdentityProviderContractProperties.
        :type type: str
        """
        allowed_values = ["facebook", "google", "microsoft", "twitter", "aad", "aadB2C"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
