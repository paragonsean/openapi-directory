# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class IdentityProviderBaseParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allowed_tenants: List[str]=None, password_reset_policy_name: str=None, profile_editing_policy_name: str=None, signin_policy_name: str=None, signup_policy_name: str=None, type: str=None):
        """IdentityProviderBaseParameters - a model defined in OpenAPI

        :param allowed_tenants: The allowed_tenants of this IdentityProviderBaseParameters.
        :param password_reset_policy_name: The password_reset_policy_name of this IdentityProviderBaseParameters.
        :param profile_editing_policy_name: The profile_editing_policy_name of this IdentityProviderBaseParameters.
        :param signin_policy_name: The signin_policy_name of this IdentityProviderBaseParameters.
        :param signup_policy_name: The signup_policy_name of this IdentityProviderBaseParameters.
        :param type: The type of this IdentityProviderBaseParameters.
        """
        self.openapi_types = {
            'allowed_tenants': List[str],
            'password_reset_policy_name': str,
            'profile_editing_policy_name': str,
            'signin_policy_name': str,
            'signup_policy_name': str,
            'type': str
        }

        self.attribute_map = {
            'allowed_tenants': 'allowedTenants',
            'password_reset_policy_name': 'passwordResetPolicyName',
            'profile_editing_policy_name': 'profileEditingPolicyName',
            'signin_policy_name': 'signinPolicyName',
            'signup_policy_name': 'signupPolicyName',
            'type': 'type'
        }

        self._allowed_tenants = allowed_tenants
        self._password_reset_policy_name = password_reset_policy_name
        self._profile_editing_policy_name = profile_editing_policy_name
        self._signin_policy_name = signin_policy_name
        self._signup_policy_name = signup_policy_name
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IdentityProviderBaseParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IdentityProviderBaseParameters of this IdentityProviderBaseParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allowed_tenants(self):
        """Gets the allowed_tenants of this IdentityProviderBaseParameters.

        List of Allowed Tenants when configuring Azure Active Directory login.

        :return: The allowed_tenants of this IdentityProviderBaseParameters.
        :rtype: List[str]
        """
        return self._allowed_tenants

    @allowed_tenants.setter
    def allowed_tenants(self, allowed_tenants):
        """Sets the allowed_tenants of this IdentityProviderBaseParameters.

        List of Allowed Tenants when configuring Azure Active Directory login.

        :param allowed_tenants: The allowed_tenants of this IdentityProviderBaseParameters.
        :type allowed_tenants: List[str]
        """
        if allowed_tenants is not None and len(allowed_tenants) > 32:
            raise ValueError("Invalid value for `allowed_tenants`, number of items must be less than or equal to `32`")

        self._allowed_tenants = allowed_tenants

    @property
    def password_reset_policy_name(self):
        """Gets the password_reset_policy_name of this IdentityProviderBaseParameters.

        Password Reset Policy Name. Only applies to AAD B2C Identity Provider.

        :return: The password_reset_policy_name of this IdentityProviderBaseParameters.
        :rtype: str
        """
        return self._password_reset_policy_name

    @password_reset_policy_name.setter
    def password_reset_policy_name(self, password_reset_policy_name):
        """Sets the password_reset_policy_name of this IdentityProviderBaseParameters.

        Password Reset Policy Name. Only applies to AAD B2C Identity Provider.

        :param password_reset_policy_name: The password_reset_policy_name of this IdentityProviderBaseParameters.
        :type password_reset_policy_name: str
        """
        if password_reset_policy_name is not None and len(password_reset_policy_name) < 1:
            raise ValueError("Invalid value for `password_reset_policy_name`, length must be greater than or equal to `1`")

        self._password_reset_policy_name = password_reset_policy_name

    @property
    def profile_editing_policy_name(self):
        """Gets the profile_editing_policy_name of this IdentityProviderBaseParameters.

        Profile Editing Policy Name. Only applies to AAD B2C Identity Provider.

        :return: The profile_editing_policy_name of this IdentityProviderBaseParameters.
        :rtype: str
        """
        return self._profile_editing_policy_name

    @profile_editing_policy_name.setter
    def profile_editing_policy_name(self, profile_editing_policy_name):
        """Sets the profile_editing_policy_name of this IdentityProviderBaseParameters.

        Profile Editing Policy Name. Only applies to AAD B2C Identity Provider.

        :param profile_editing_policy_name: The profile_editing_policy_name of this IdentityProviderBaseParameters.
        :type profile_editing_policy_name: str
        """
        if profile_editing_policy_name is not None and len(profile_editing_policy_name) < 1:
            raise ValueError("Invalid value for `profile_editing_policy_name`, length must be greater than or equal to `1`")

        self._profile_editing_policy_name = profile_editing_policy_name

    @property
    def signin_policy_name(self):
        """Gets the signin_policy_name of this IdentityProviderBaseParameters.

        Signin Policy Name. Only applies to AAD B2C Identity Provider.

        :return: The signin_policy_name of this IdentityProviderBaseParameters.
        :rtype: str
        """
        return self._signin_policy_name

    @signin_policy_name.setter
    def signin_policy_name(self, signin_policy_name):
        """Sets the signin_policy_name of this IdentityProviderBaseParameters.

        Signin Policy Name. Only applies to AAD B2C Identity Provider.

        :param signin_policy_name: The signin_policy_name of this IdentityProviderBaseParameters.
        :type signin_policy_name: str
        """
        if signin_policy_name is not None and len(signin_policy_name) < 1:
            raise ValueError("Invalid value for `signin_policy_name`, length must be greater than or equal to `1`")

        self._signin_policy_name = signin_policy_name

    @property
    def signup_policy_name(self):
        """Gets the signup_policy_name of this IdentityProviderBaseParameters.

        Signup Policy Name. Only applies to AAD B2C Identity Provider.

        :return: The signup_policy_name of this IdentityProviderBaseParameters.
        :rtype: str
        """
        return self._signup_policy_name

    @signup_policy_name.setter
    def signup_policy_name(self, signup_policy_name):
        """Sets the signup_policy_name of this IdentityProviderBaseParameters.

        Signup Policy Name. Only applies to AAD B2C Identity Provider.

        :param signup_policy_name: The signup_policy_name of this IdentityProviderBaseParameters.
        :type signup_policy_name: str
        """
        if signup_policy_name is not None and len(signup_policy_name) < 1:
            raise ValueError("Invalid value for `signup_policy_name`, length must be greater than or equal to `1`")

        self._signup_policy_name = signup_policy_name

    @property
    def type(self):
        """Gets the type of this IdentityProviderBaseParameters.

        Identity Provider Type identifier.

        :return: The type of this IdentityProviderBaseParameters.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this IdentityProviderBaseParameters.

        Identity Provider Type identifier.

        :param type: The type of this IdentityProviderBaseParameters.
        :type type: str
        """
        allowed_values = ["facebook", "google", "microsoft", "twitter", "aad", "aadB2C"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
