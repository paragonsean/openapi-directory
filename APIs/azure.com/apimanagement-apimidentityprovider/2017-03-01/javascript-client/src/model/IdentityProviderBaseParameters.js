/**
 * ApiManagementClient
 * Use these REST APIs for performing operations on Identity Provider entity associated with your Azure API Management deployment. Setting up an external Identity Provider for authentication can help you manage the developer portal logins using the OAuth2 flow.
 *
 * The version of the OpenAPI document: 2017-03-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The IdentityProviderBaseParameters model module.
 * @module model/IdentityProviderBaseParameters
 * @version 2017-03-01
 */
class IdentityProviderBaseParameters {
    /**
     * Constructs a new <code>IdentityProviderBaseParameters</code>.
     * Identity Provider Base Parameter Properties.
     * @alias module:model/IdentityProviderBaseParameters
     */
    constructor() { 
        
        IdentityProviderBaseParameters.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>IdentityProviderBaseParameters</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IdentityProviderBaseParameters} obj Optional instance to populate.
     * @return {module:model/IdentityProviderBaseParameters} The populated <code>IdentityProviderBaseParameters</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IdentityProviderBaseParameters();

            if (data.hasOwnProperty('allowedTenants')) {
                obj['allowedTenants'] = ApiClient.convertToType(data['allowedTenants'], ['String']);
            }
            if (data.hasOwnProperty('passwordResetPolicyName')) {
                obj['passwordResetPolicyName'] = ApiClient.convertToType(data['passwordResetPolicyName'], 'String');
            }
            if (data.hasOwnProperty('profileEditingPolicyName')) {
                obj['profileEditingPolicyName'] = ApiClient.convertToType(data['profileEditingPolicyName'], 'String');
            }
            if (data.hasOwnProperty('signinPolicyName')) {
                obj['signinPolicyName'] = ApiClient.convertToType(data['signinPolicyName'], 'String');
            }
            if (data.hasOwnProperty('signupPolicyName')) {
                obj['signupPolicyName'] = ApiClient.convertToType(data['signupPolicyName'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>IdentityProviderBaseParameters</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>IdentityProviderBaseParameters</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['allowedTenants'])) {
            throw new Error("Expected the field `allowedTenants` to be an array in the JSON data but got " + data['allowedTenants']);
        }
        // ensure the json data is a string
        if (data['passwordResetPolicyName'] && !(typeof data['passwordResetPolicyName'] === 'string' || data['passwordResetPolicyName'] instanceof String)) {
            throw new Error("Expected the field `passwordResetPolicyName` to be a primitive type in the JSON string but got " + data['passwordResetPolicyName']);
        }
        // ensure the json data is a string
        if (data['profileEditingPolicyName'] && !(typeof data['profileEditingPolicyName'] === 'string' || data['profileEditingPolicyName'] instanceof String)) {
            throw new Error("Expected the field `profileEditingPolicyName` to be a primitive type in the JSON string but got " + data['profileEditingPolicyName']);
        }
        // ensure the json data is a string
        if (data['signinPolicyName'] && !(typeof data['signinPolicyName'] === 'string' || data['signinPolicyName'] instanceof String)) {
            throw new Error("Expected the field `signinPolicyName` to be a primitive type in the JSON string but got " + data['signinPolicyName']);
        }
        // ensure the json data is a string
        if (data['signupPolicyName'] && !(typeof data['signupPolicyName'] === 'string' || data['signupPolicyName'] instanceof String)) {
            throw new Error("Expected the field `signupPolicyName` to be a primitive type in the JSON string but got " + data['signupPolicyName']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * List of Allowed Tenants when configuring Azure Active Directory login.
 * @member {Array.<String>} allowedTenants
 */
IdentityProviderBaseParameters.prototype['allowedTenants'] = undefined;

/**
 * Password Reset Policy Name. Only applies to AAD B2C Identity Provider.
 * @member {String} passwordResetPolicyName
 */
IdentityProviderBaseParameters.prototype['passwordResetPolicyName'] = undefined;

/**
 * Profile Editing Policy Name. Only applies to AAD B2C Identity Provider.
 * @member {String} profileEditingPolicyName
 */
IdentityProviderBaseParameters.prototype['profileEditingPolicyName'] = undefined;

/**
 * Signin Policy Name. Only applies to AAD B2C Identity Provider.
 * @member {String} signinPolicyName
 */
IdentityProviderBaseParameters.prototype['signinPolicyName'] = undefined;

/**
 * Signup Policy Name. Only applies to AAD B2C Identity Provider.
 * @member {String} signupPolicyName
 */
IdentityProviderBaseParameters.prototype['signupPolicyName'] = undefined;

/**
 * Identity Provider Type identifier.
 * @member {module:model/IdentityProviderBaseParameters.TypeEnum} type
 */
IdentityProviderBaseParameters.prototype['type'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
IdentityProviderBaseParameters['TypeEnum'] = {

    /**
     * value: "facebook"
     * @const
     */
    "facebook": "facebook",

    /**
     * value: "google"
     * @const
     */
    "google": "google",

    /**
     * value: "microsoft"
     * @const
     */
    "microsoft": "microsoft",

    /**
     * value: "twitter"
     * @const
     */
    "twitter": "twitter",

    /**
     * value: "aad"
     * @const
     */
    "aad": "aad",

    /**
     * value: "aadB2C"
     * @const
     */
    "aadB2C": "aadB2C"
};



export default IdentityProviderBaseParameters;

