/**
 * ApiManagementClient
 * Use these REST APIs for performing operations on Identity Provider entity associated with your Azure API Management deployment. Setting up an external Identity Provider for authentication can help you manage the developer portal logins using the OAuth2 flow.
 *
 * The version of the OpenAPI document: 2017-03-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import IdentityProviderUpdateProperties from './IdentityProviderUpdateProperties';

/**
 * The IdentityProviderUpdateParameters model module.
 * @module model/IdentityProviderUpdateParameters
 * @version 2017-03-01
 */
class IdentityProviderUpdateParameters {
    /**
     * Constructs a new <code>IdentityProviderUpdateParameters</code>.
     * Parameters supplied to update Identity Provider
     * @alias module:model/IdentityProviderUpdateParameters
     */
    constructor() { 
        
        IdentityProviderUpdateParameters.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>IdentityProviderUpdateParameters</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IdentityProviderUpdateParameters} obj Optional instance to populate.
     * @return {module:model/IdentityProviderUpdateParameters} The populated <code>IdentityProviderUpdateParameters</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IdentityProviderUpdateParameters();

            if (data.hasOwnProperty('properties')) {
                obj['properties'] = IdentityProviderUpdateProperties.constructFromObject(data['properties']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>IdentityProviderUpdateParameters</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>IdentityProviderUpdateParameters</code>.
     */
    static validateJSON(data) {
        // validate the optional field `properties`
        if (data['properties']) { // data not null
          IdentityProviderUpdateProperties.validateJSON(data['properties']);
        }

        return true;
    }


}



/**
 * @member {module:model/IdentityProviderUpdateProperties} properties
 */
IdentityProviderUpdateParameters.prototype['properties'] = undefined;






export default IdentityProviderUpdateParameters;

