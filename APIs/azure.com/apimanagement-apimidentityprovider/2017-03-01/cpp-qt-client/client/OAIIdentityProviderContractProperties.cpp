/**
 * ApiManagementClient
 * Use these REST APIs for performing operations on Identity Provider entity associated with your Azure API Management deployment. Setting up an external Identity Provider for authentication can help you manage the developer portal logins using the OAuth2 flow.
 *
 * The version of the OpenAPI document: 2017-03-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIdentityProviderContractProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIdentityProviderContractProperties::OAIIdentityProviderContractProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIdentityProviderContractProperties::OAIIdentityProviderContractProperties() {
    this->initializeModel();
}

OAIIdentityProviderContractProperties::~OAIIdentityProviderContractProperties() {}

void OAIIdentityProviderContractProperties::initializeModel() {

    m_client_id_isSet = false;
    m_client_id_isValid = false;

    m_client_secret_isSet = false;
    m_client_secret_isValid = false;

    m_allowed_tenants_isSet = false;
    m_allowed_tenants_isValid = false;

    m_password_reset_policy_name_isSet = false;
    m_password_reset_policy_name_isValid = false;

    m_profile_editing_policy_name_isSet = false;
    m_profile_editing_policy_name_isValid = false;

    m_signin_policy_name_isSet = false;
    m_signin_policy_name_isValid = false;

    m_signup_policy_name_isSet = false;
    m_signup_policy_name_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIIdentityProviderContractProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIdentityProviderContractProperties::fromJsonObject(QJsonObject json) {

    m_client_id_isValid = ::OpenAPI::fromJsonValue(m_client_id, json[QString("clientId")]);
    m_client_id_isSet = !json[QString("clientId")].isNull() && m_client_id_isValid;

    m_client_secret_isValid = ::OpenAPI::fromJsonValue(m_client_secret, json[QString("clientSecret")]);
    m_client_secret_isSet = !json[QString("clientSecret")].isNull() && m_client_secret_isValid;

    m_allowed_tenants_isValid = ::OpenAPI::fromJsonValue(m_allowed_tenants, json[QString("allowedTenants")]);
    m_allowed_tenants_isSet = !json[QString("allowedTenants")].isNull() && m_allowed_tenants_isValid;

    m_password_reset_policy_name_isValid = ::OpenAPI::fromJsonValue(m_password_reset_policy_name, json[QString("passwordResetPolicyName")]);
    m_password_reset_policy_name_isSet = !json[QString("passwordResetPolicyName")].isNull() && m_password_reset_policy_name_isValid;

    m_profile_editing_policy_name_isValid = ::OpenAPI::fromJsonValue(m_profile_editing_policy_name, json[QString("profileEditingPolicyName")]);
    m_profile_editing_policy_name_isSet = !json[QString("profileEditingPolicyName")].isNull() && m_profile_editing_policy_name_isValid;

    m_signin_policy_name_isValid = ::OpenAPI::fromJsonValue(m_signin_policy_name, json[QString("signinPolicyName")]);
    m_signin_policy_name_isSet = !json[QString("signinPolicyName")].isNull() && m_signin_policy_name_isValid;

    m_signup_policy_name_isValid = ::OpenAPI::fromJsonValue(m_signup_policy_name, json[QString("signupPolicyName")]);
    m_signup_policy_name_isSet = !json[QString("signupPolicyName")].isNull() && m_signup_policy_name_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIIdentityProviderContractProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIdentityProviderContractProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_client_id_isSet) {
        obj.insert(QString("clientId"), ::OpenAPI::toJsonValue(m_client_id));
    }
    if (m_client_secret_isSet) {
        obj.insert(QString("clientSecret"), ::OpenAPI::toJsonValue(m_client_secret));
    }
    if (m_allowed_tenants.size() > 0) {
        obj.insert(QString("allowedTenants"), ::OpenAPI::toJsonValue(m_allowed_tenants));
    }
    if (m_password_reset_policy_name_isSet) {
        obj.insert(QString("passwordResetPolicyName"), ::OpenAPI::toJsonValue(m_password_reset_policy_name));
    }
    if (m_profile_editing_policy_name_isSet) {
        obj.insert(QString("profileEditingPolicyName"), ::OpenAPI::toJsonValue(m_profile_editing_policy_name));
    }
    if (m_signin_policy_name_isSet) {
        obj.insert(QString("signinPolicyName"), ::OpenAPI::toJsonValue(m_signin_policy_name));
    }
    if (m_signup_policy_name_isSet) {
        obj.insert(QString("signupPolicyName"), ::OpenAPI::toJsonValue(m_signup_policy_name));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIIdentityProviderContractProperties::getClientId() const {
    return m_client_id;
}
void OAIIdentityProviderContractProperties::setClientId(const QString &client_id) {
    m_client_id = client_id;
    m_client_id_isSet = true;
}

bool OAIIdentityProviderContractProperties::is_client_id_Set() const{
    return m_client_id_isSet;
}

bool OAIIdentityProviderContractProperties::is_client_id_Valid() const{
    return m_client_id_isValid;
}

QString OAIIdentityProviderContractProperties::getClientSecret() const {
    return m_client_secret;
}
void OAIIdentityProviderContractProperties::setClientSecret(const QString &client_secret) {
    m_client_secret = client_secret;
    m_client_secret_isSet = true;
}

bool OAIIdentityProviderContractProperties::is_client_secret_Set() const{
    return m_client_secret_isSet;
}

bool OAIIdentityProviderContractProperties::is_client_secret_Valid() const{
    return m_client_secret_isValid;
}

QList<QString> OAIIdentityProviderContractProperties::getAllowedTenants() const {
    return m_allowed_tenants;
}
void OAIIdentityProviderContractProperties::setAllowedTenants(const QList<QString> &allowed_tenants) {
    m_allowed_tenants = allowed_tenants;
    m_allowed_tenants_isSet = true;
}

bool OAIIdentityProviderContractProperties::is_allowed_tenants_Set() const{
    return m_allowed_tenants_isSet;
}

bool OAIIdentityProviderContractProperties::is_allowed_tenants_Valid() const{
    return m_allowed_tenants_isValid;
}

QString OAIIdentityProviderContractProperties::getPasswordResetPolicyName() const {
    return m_password_reset_policy_name;
}
void OAIIdentityProviderContractProperties::setPasswordResetPolicyName(const QString &password_reset_policy_name) {
    m_password_reset_policy_name = password_reset_policy_name;
    m_password_reset_policy_name_isSet = true;
}

bool OAIIdentityProviderContractProperties::is_password_reset_policy_name_Set() const{
    return m_password_reset_policy_name_isSet;
}

bool OAIIdentityProviderContractProperties::is_password_reset_policy_name_Valid() const{
    return m_password_reset_policy_name_isValid;
}

QString OAIIdentityProviderContractProperties::getProfileEditingPolicyName() const {
    return m_profile_editing_policy_name;
}
void OAIIdentityProviderContractProperties::setProfileEditingPolicyName(const QString &profile_editing_policy_name) {
    m_profile_editing_policy_name = profile_editing_policy_name;
    m_profile_editing_policy_name_isSet = true;
}

bool OAIIdentityProviderContractProperties::is_profile_editing_policy_name_Set() const{
    return m_profile_editing_policy_name_isSet;
}

bool OAIIdentityProviderContractProperties::is_profile_editing_policy_name_Valid() const{
    return m_profile_editing_policy_name_isValid;
}

QString OAIIdentityProviderContractProperties::getSigninPolicyName() const {
    return m_signin_policy_name;
}
void OAIIdentityProviderContractProperties::setSigninPolicyName(const QString &signin_policy_name) {
    m_signin_policy_name = signin_policy_name;
    m_signin_policy_name_isSet = true;
}

bool OAIIdentityProviderContractProperties::is_signin_policy_name_Set() const{
    return m_signin_policy_name_isSet;
}

bool OAIIdentityProviderContractProperties::is_signin_policy_name_Valid() const{
    return m_signin_policy_name_isValid;
}

QString OAIIdentityProviderContractProperties::getSignupPolicyName() const {
    return m_signup_policy_name;
}
void OAIIdentityProviderContractProperties::setSignupPolicyName(const QString &signup_policy_name) {
    m_signup_policy_name = signup_policy_name;
    m_signup_policy_name_isSet = true;
}

bool OAIIdentityProviderContractProperties::is_signup_policy_name_Set() const{
    return m_signup_policy_name_isSet;
}

bool OAIIdentityProviderContractProperties::is_signup_policy_name_Valid() const{
    return m_signup_policy_name_isValid;
}

QString OAIIdentityProviderContractProperties::getType() const {
    return m_type;
}
void OAIIdentityProviderContractProperties::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIIdentityProviderContractProperties::is_type_Set() const{
    return m_type_isSet;
}

bool OAIIdentityProviderContractProperties::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIIdentityProviderContractProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_secret_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allowed_tenants.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_reset_policy_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_profile_editing_policy_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_signin_policy_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_signup_policy_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIdentityProviderContractProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_client_id_isValid && m_client_secret_isValid && true;
}

} // namespace OpenAPI
