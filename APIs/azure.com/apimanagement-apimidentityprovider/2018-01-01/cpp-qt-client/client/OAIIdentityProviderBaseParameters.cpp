/**
 * ApiManagementClient
 * Use these REST APIs for performing operations on Identity Provider entity associated with your Azure API Management deployment. Setting up an external Identity Provider for authentication can help you manage the developer portal logins using the OAuth2 flow.
 *
 * The version of the OpenAPI document: 2018-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIdentityProviderBaseParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIdentityProviderBaseParameters::OAIIdentityProviderBaseParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIdentityProviderBaseParameters::OAIIdentityProviderBaseParameters() {
    this->initializeModel();
}

OAIIdentityProviderBaseParameters::~OAIIdentityProviderBaseParameters() {}

void OAIIdentityProviderBaseParameters::initializeModel() {

    m_allowed_tenants_isSet = false;
    m_allowed_tenants_isValid = false;

    m_password_reset_policy_name_isSet = false;
    m_password_reset_policy_name_isValid = false;

    m_profile_editing_policy_name_isSet = false;
    m_profile_editing_policy_name_isValid = false;

    m_signin_policy_name_isSet = false;
    m_signin_policy_name_isValid = false;

    m_signup_policy_name_isSet = false;
    m_signup_policy_name_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIIdentityProviderBaseParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIdentityProviderBaseParameters::fromJsonObject(QJsonObject json) {

    m_allowed_tenants_isValid = ::OpenAPI::fromJsonValue(m_allowed_tenants, json[QString("allowedTenants")]);
    m_allowed_tenants_isSet = !json[QString("allowedTenants")].isNull() && m_allowed_tenants_isValid;

    m_password_reset_policy_name_isValid = ::OpenAPI::fromJsonValue(m_password_reset_policy_name, json[QString("passwordResetPolicyName")]);
    m_password_reset_policy_name_isSet = !json[QString("passwordResetPolicyName")].isNull() && m_password_reset_policy_name_isValid;

    m_profile_editing_policy_name_isValid = ::OpenAPI::fromJsonValue(m_profile_editing_policy_name, json[QString("profileEditingPolicyName")]);
    m_profile_editing_policy_name_isSet = !json[QString("profileEditingPolicyName")].isNull() && m_profile_editing_policy_name_isValid;

    m_signin_policy_name_isValid = ::OpenAPI::fromJsonValue(m_signin_policy_name, json[QString("signinPolicyName")]);
    m_signin_policy_name_isSet = !json[QString("signinPolicyName")].isNull() && m_signin_policy_name_isValid;

    m_signup_policy_name_isValid = ::OpenAPI::fromJsonValue(m_signup_policy_name, json[QString("signupPolicyName")]);
    m_signup_policy_name_isSet = !json[QString("signupPolicyName")].isNull() && m_signup_policy_name_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIIdentityProviderBaseParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIdentityProviderBaseParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_allowed_tenants.size() > 0) {
        obj.insert(QString("allowedTenants"), ::OpenAPI::toJsonValue(m_allowed_tenants));
    }
    if (m_password_reset_policy_name_isSet) {
        obj.insert(QString("passwordResetPolicyName"), ::OpenAPI::toJsonValue(m_password_reset_policy_name));
    }
    if (m_profile_editing_policy_name_isSet) {
        obj.insert(QString("profileEditingPolicyName"), ::OpenAPI::toJsonValue(m_profile_editing_policy_name));
    }
    if (m_signin_policy_name_isSet) {
        obj.insert(QString("signinPolicyName"), ::OpenAPI::toJsonValue(m_signin_policy_name));
    }
    if (m_signup_policy_name_isSet) {
        obj.insert(QString("signupPolicyName"), ::OpenAPI::toJsonValue(m_signup_policy_name));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QList<QString> OAIIdentityProviderBaseParameters::getAllowedTenants() const {
    return m_allowed_tenants;
}
void OAIIdentityProviderBaseParameters::setAllowedTenants(const QList<QString> &allowed_tenants) {
    m_allowed_tenants = allowed_tenants;
    m_allowed_tenants_isSet = true;
}

bool OAIIdentityProviderBaseParameters::is_allowed_tenants_Set() const{
    return m_allowed_tenants_isSet;
}

bool OAIIdentityProviderBaseParameters::is_allowed_tenants_Valid() const{
    return m_allowed_tenants_isValid;
}

QString OAIIdentityProviderBaseParameters::getPasswordResetPolicyName() const {
    return m_password_reset_policy_name;
}
void OAIIdentityProviderBaseParameters::setPasswordResetPolicyName(const QString &password_reset_policy_name) {
    m_password_reset_policy_name = password_reset_policy_name;
    m_password_reset_policy_name_isSet = true;
}

bool OAIIdentityProviderBaseParameters::is_password_reset_policy_name_Set() const{
    return m_password_reset_policy_name_isSet;
}

bool OAIIdentityProviderBaseParameters::is_password_reset_policy_name_Valid() const{
    return m_password_reset_policy_name_isValid;
}

QString OAIIdentityProviderBaseParameters::getProfileEditingPolicyName() const {
    return m_profile_editing_policy_name;
}
void OAIIdentityProviderBaseParameters::setProfileEditingPolicyName(const QString &profile_editing_policy_name) {
    m_profile_editing_policy_name = profile_editing_policy_name;
    m_profile_editing_policy_name_isSet = true;
}

bool OAIIdentityProviderBaseParameters::is_profile_editing_policy_name_Set() const{
    return m_profile_editing_policy_name_isSet;
}

bool OAIIdentityProviderBaseParameters::is_profile_editing_policy_name_Valid() const{
    return m_profile_editing_policy_name_isValid;
}

QString OAIIdentityProviderBaseParameters::getSigninPolicyName() const {
    return m_signin_policy_name;
}
void OAIIdentityProviderBaseParameters::setSigninPolicyName(const QString &signin_policy_name) {
    m_signin_policy_name = signin_policy_name;
    m_signin_policy_name_isSet = true;
}

bool OAIIdentityProviderBaseParameters::is_signin_policy_name_Set() const{
    return m_signin_policy_name_isSet;
}

bool OAIIdentityProviderBaseParameters::is_signin_policy_name_Valid() const{
    return m_signin_policy_name_isValid;
}

QString OAIIdentityProviderBaseParameters::getSignupPolicyName() const {
    return m_signup_policy_name;
}
void OAIIdentityProviderBaseParameters::setSignupPolicyName(const QString &signup_policy_name) {
    m_signup_policy_name = signup_policy_name;
    m_signup_policy_name_isSet = true;
}

bool OAIIdentityProviderBaseParameters::is_signup_policy_name_Set() const{
    return m_signup_policy_name_isSet;
}

bool OAIIdentityProviderBaseParameters::is_signup_policy_name_Valid() const{
    return m_signup_policy_name_isValid;
}

QString OAIIdentityProviderBaseParameters::getType() const {
    return m_type;
}
void OAIIdentityProviderBaseParameters::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIIdentityProviderBaseParameters::is_type_Set() const{
    return m_type_isSet;
}

bool OAIIdentityProviderBaseParameters::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIIdentityProviderBaseParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allowed_tenants.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_reset_policy_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_profile_editing_policy_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_signin_policy_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_signup_policy_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIdentityProviderBaseParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
