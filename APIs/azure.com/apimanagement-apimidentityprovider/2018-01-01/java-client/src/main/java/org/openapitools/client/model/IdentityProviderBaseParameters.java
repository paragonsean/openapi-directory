/*
 * ApiManagementClient
 * Use these REST APIs for performing operations on Identity Provider entity associated with your Azure API Management deployment. Setting up an external Identity Provider for authentication can help you manage the developer portal logins using the OAuth2 flow.
 *
 * The version of the OpenAPI document: 2018-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Identity Provider Base Parameter Properties.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:41:14.009991-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class IdentityProviderBaseParameters {
  public static final String SERIALIZED_NAME_ALLOWED_TENANTS = "allowedTenants";
  @SerializedName(SERIALIZED_NAME_ALLOWED_TENANTS)
  private List<String> allowedTenants = new ArrayList<>();

  public static final String SERIALIZED_NAME_PASSWORD_RESET_POLICY_NAME = "passwordResetPolicyName";
  @SerializedName(SERIALIZED_NAME_PASSWORD_RESET_POLICY_NAME)
  private String passwordResetPolicyName;

  public static final String SERIALIZED_NAME_PROFILE_EDITING_POLICY_NAME = "profileEditingPolicyName";
  @SerializedName(SERIALIZED_NAME_PROFILE_EDITING_POLICY_NAME)
  private String profileEditingPolicyName;

  public static final String SERIALIZED_NAME_SIGNIN_POLICY_NAME = "signinPolicyName";
  @SerializedName(SERIALIZED_NAME_SIGNIN_POLICY_NAME)
  private String signinPolicyName;

  public static final String SERIALIZED_NAME_SIGNUP_POLICY_NAME = "signupPolicyName";
  @SerializedName(SERIALIZED_NAME_SIGNUP_POLICY_NAME)
  private String signupPolicyName;

  /**
   * Identity Provider Type identifier.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    FACEBOOK("facebook"),
    
    GOOGLE("google"),
    
    MICROSOFT("microsoft"),
    
    TWITTER("twitter"),
    
    AAD("aad"),
    
    AAD_B2_C("aadB2C");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public IdentityProviderBaseParameters() {
  }

  public IdentityProviderBaseParameters allowedTenants(List<String> allowedTenants) {
    this.allowedTenants = allowedTenants;
    return this;
  }

  public IdentityProviderBaseParameters addAllowedTenantsItem(String allowedTenantsItem) {
    if (this.allowedTenants == null) {
      this.allowedTenants = new ArrayList<>();
    }
    this.allowedTenants.add(allowedTenantsItem);
    return this;
  }

  /**
   * List of Allowed Tenants when configuring Azure Active Directory login.
   * @return allowedTenants
   */
  @javax.annotation.Nullable
  public List<String> getAllowedTenants() {
    return allowedTenants;
  }

  public void setAllowedTenants(List<String> allowedTenants) {
    this.allowedTenants = allowedTenants;
  }


  public IdentityProviderBaseParameters passwordResetPolicyName(String passwordResetPolicyName) {
    this.passwordResetPolicyName = passwordResetPolicyName;
    return this;
  }

  /**
   * Password Reset Policy Name. Only applies to AAD B2C Identity Provider.
   * @return passwordResetPolicyName
   */
  @javax.annotation.Nullable
  public String getPasswordResetPolicyName() {
    return passwordResetPolicyName;
  }

  public void setPasswordResetPolicyName(String passwordResetPolicyName) {
    this.passwordResetPolicyName = passwordResetPolicyName;
  }


  public IdentityProviderBaseParameters profileEditingPolicyName(String profileEditingPolicyName) {
    this.profileEditingPolicyName = profileEditingPolicyName;
    return this;
  }

  /**
   * Profile Editing Policy Name. Only applies to AAD B2C Identity Provider.
   * @return profileEditingPolicyName
   */
  @javax.annotation.Nullable
  public String getProfileEditingPolicyName() {
    return profileEditingPolicyName;
  }

  public void setProfileEditingPolicyName(String profileEditingPolicyName) {
    this.profileEditingPolicyName = profileEditingPolicyName;
  }


  public IdentityProviderBaseParameters signinPolicyName(String signinPolicyName) {
    this.signinPolicyName = signinPolicyName;
    return this;
  }

  /**
   * Signin Policy Name. Only applies to AAD B2C Identity Provider.
   * @return signinPolicyName
   */
  @javax.annotation.Nullable
  public String getSigninPolicyName() {
    return signinPolicyName;
  }

  public void setSigninPolicyName(String signinPolicyName) {
    this.signinPolicyName = signinPolicyName;
  }


  public IdentityProviderBaseParameters signupPolicyName(String signupPolicyName) {
    this.signupPolicyName = signupPolicyName;
    return this;
  }

  /**
   * Signup Policy Name. Only applies to AAD B2C Identity Provider.
   * @return signupPolicyName
   */
  @javax.annotation.Nullable
  public String getSignupPolicyName() {
    return signupPolicyName;
  }

  public void setSignupPolicyName(String signupPolicyName) {
    this.signupPolicyName = signupPolicyName;
  }


  public IdentityProviderBaseParameters type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Identity Provider Type identifier.
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IdentityProviderBaseParameters identityProviderBaseParameters = (IdentityProviderBaseParameters) o;
    return Objects.equals(this.allowedTenants, identityProviderBaseParameters.allowedTenants) &&
        Objects.equals(this.passwordResetPolicyName, identityProviderBaseParameters.passwordResetPolicyName) &&
        Objects.equals(this.profileEditingPolicyName, identityProviderBaseParameters.profileEditingPolicyName) &&
        Objects.equals(this.signinPolicyName, identityProviderBaseParameters.signinPolicyName) &&
        Objects.equals(this.signupPolicyName, identityProviderBaseParameters.signupPolicyName) &&
        Objects.equals(this.type, identityProviderBaseParameters.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowedTenants, passwordResetPolicyName, profileEditingPolicyName, signinPolicyName, signupPolicyName, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IdentityProviderBaseParameters {\n");
    sb.append("    allowedTenants: ").append(toIndentedString(allowedTenants)).append("\n");
    sb.append("    passwordResetPolicyName: ").append(toIndentedString(passwordResetPolicyName)).append("\n");
    sb.append("    profileEditingPolicyName: ").append(toIndentedString(profileEditingPolicyName)).append("\n");
    sb.append("    signinPolicyName: ").append(toIndentedString(signinPolicyName)).append("\n");
    sb.append("    signupPolicyName: ").append(toIndentedString(signupPolicyName)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allowedTenants");
    openapiFields.add("passwordResetPolicyName");
    openapiFields.add("profileEditingPolicyName");
    openapiFields.add("signinPolicyName");
    openapiFields.add("signupPolicyName");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IdentityProviderBaseParameters
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IdentityProviderBaseParameters.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IdentityProviderBaseParameters is not found in the empty JSON string", IdentityProviderBaseParameters.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IdentityProviderBaseParameters.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IdentityProviderBaseParameters` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("allowedTenants") != null && !jsonObj.get("allowedTenants").isJsonNull() && !jsonObj.get("allowedTenants").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `allowedTenants` to be an array in the JSON string but got `%s`", jsonObj.get("allowedTenants").toString()));
      }
      if ((jsonObj.get("passwordResetPolicyName") != null && !jsonObj.get("passwordResetPolicyName").isJsonNull()) && !jsonObj.get("passwordResetPolicyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `passwordResetPolicyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("passwordResetPolicyName").toString()));
      }
      if ((jsonObj.get("profileEditingPolicyName") != null && !jsonObj.get("profileEditingPolicyName").isJsonNull()) && !jsonObj.get("profileEditingPolicyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `profileEditingPolicyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("profileEditingPolicyName").toString()));
      }
      if ((jsonObj.get("signinPolicyName") != null && !jsonObj.get("signinPolicyName").isJsonNull()) && !jsonObj.get("signinPolicyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `signinPolicyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("signinPolicyName").toString()));
      }
      if ((jsonObj.get("signupPolicyName") != null && !jsonObj.get("signupPolicyName").isJsonNull()) && !jsonObj.get("signupPolicyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `signupPolicyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("signupPolicyName").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IdentityProviderBaseParameters.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IdentityProviderBaseParameters' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IdentityProviderBaseParameters> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IdentityProviderBaseParameters.class));

       return (TypeAdapter<T>) new TypeAdapter<IdentityProviderBaseParameters>() {
           @Override
           public void write(JsonWriter out, IdentityProviderBaseParameters value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IdentityProviderBaseParameters read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IdentityProviderBaseParameters given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IdentityProviderBaseParameters
   * @throws IOException if the JSON string is invalid with respect to IdentityProviderBaseParameters
   */
  public static IdentityProviderBaseParameters fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IdentityProviderBaseParameters.class);
  }

  /**
   * Convert an instance of IdentityProviderBaseParameters to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

