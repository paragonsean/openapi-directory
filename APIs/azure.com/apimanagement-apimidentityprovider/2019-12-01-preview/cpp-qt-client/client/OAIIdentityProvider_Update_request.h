/**
 * ApiManagementClient
 * Use these REST APIs for performing operations on Identity Provider entity associated with your Azure API Management deployment. Setting up an external Identity Provider for authentication can help you manage the developer portal logins using the OAuth2 flow.
 *
 * The version of the OpenAPI document: 2019-12-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIIdentityProvider_Update_request.h
 *
 * Parameters supplied to update Identity Provider
 */

#ifndef OAIIdentityProvider_Update_request_H
#define OAIIdentityProvider_Update_request_H

#include <QJsonObject>

#include "OAIIdentityProvider_Update_request_properties.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIIdentityProvider_Update_request_properties;

class OAIIdentityProvider_Update_request : public OAIObject {
public:
    OAIIdentityProvider_Update_request();
    OAIIdentityProvider_Update_request(QString json);
    ~OAIIdentityProvider_Update_request() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIIdentityProvider_Update_request_properties getProperties() const;
    void setProperties(const OAIIdentityProvider_Update_request_properties &properties);
    bool is_properties_Set() const;
    bool is_properties_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIIdentityProvider_Update_request_properties m_properties;
    bool m_properties_isSet;
    bool m_properties_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIIdentityProvider_Update_request)

#endif // OAIIdentityProvider_Update_request_H
