/**
 * ApiManagementClient
 * Use these REST APIs for performing operations on Identity Provider entity associated with your Azure API Management deployment. Setting up an external Identity Provider for authentication can help you manage the developer portal logins using the OAuth2 flow.
 *
 * The version of the OpenAPI document: 2019-12-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIIdentityProviderApi_H
#define OAI_OAIIdentityProviderApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIIdentityProvider_Get_200_response.h"
#include "OAIIdentityProvider_ListByService_200_response.h"
#include "OAIIdentityProvider_ListByService_default_response.h"
#include "OAIIdentityProvider_ListSecrets_200_response.h"
#include "OAIIdentityProvider_Update_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIIdentityProviderApi : public QObject {
    Q_OBJECT

public:
    OAIIdentityProviderApi(const int timeOut = 0);
    ~OAIIdentityProviderApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  identity_provider_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIIdentityProvider_Get_200_response [required]
    * @param[in]  if_match QString [optional]
    */
    virtual void identityProviderCreateOrUpdate(const QString &resource_group_name, const QString &service_name, const QString &identity_provider_name, const QString &api_version, const QString &subscription_id, const OAIIdentityProvider_Get_200_response &parameters, const ::OpenAPI::OptionalParam<QString> &if_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  identity_provider_name QString [required]
    * @param[in]  if_match QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void identityProviderDelete(const QString &resource_group_name, const QString &service_name, const QString &identity_provider_name, const QString &if_match, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  identity_provider_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void identityProviderGet(const QString &resource_group_name, const QString &service_name, const QString &identity_provider_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  identity_provider_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void identityProviderGetEntityTag(const QString &resource_group_name, const QString &service_name, const QString &identity_provider_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void identityProviderListByService(const QString &resource_group_name, const QString &service_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  identity_provider_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void identityProviderListSecrets(const QString &resource_group_name, const QString &service_name, const QString &identity_provider_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  identity_provider_name QString [required]
    * @param[in]  if_match QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIIdentityProvider_Update_request [required]
    */
    virtual void identityProviderUpdate(const QString &resource_group_name, const QString &service_name, const QString &identity_provider_name, const QString &if_match, const QString &api_version, const QString &subscription_id, const OAIIdentityProvider_Update_request &parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void identityProviderCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void identityProviderDeleteCallback(OAIHttpRequestWorker *worker);
    void identityProviderGetCallback(OAIHttpRequestWorker *worker);
    void identityProviderGetEntityTagCallback(OAIHttpRequestWorker *worker);
    void identityProviderListByServiceCallback(OAIHttpRequestWorker *worker);
    void identityProviderListSecretsCallback(OAIHttpRequestWorker *worker);
    void identityProviderUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void identityProviderCreateOrUpdateSignal(OAIIdentityProvider_Get_200_response summary);
    void identityProviderDeleteSignal();
    void identityProviderGetSignal(OAIIdentityProvider_Get_200_response summary);
    void identityProviderGetEntityTagSignal();
    void identityProviderListByServiceSignal(OAIIdentityProvider_ListByService_200_response summary);
    void identityProviderListSecretsSignal(OAIIdentityProvider_ListSecrets_200_response summary);
    void identityProviderUpdateSignal();


    void identityProviderCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIIdentityProvider_Get_200_response summary);
    void identityProviderDeleteSignalFull(OAIHttpRequestWorker *worker);
    void identityProviderGetSignalFull(OAIHttpRequestWorker *worker, OAIIdentityProvider_Get_200_response summary);
    void identityProviderGetEntityTagSignalFull(OAIHttpRequestWorker *worker);
    void identityProviderListByServiceSignalFull(OAIHttpRequestWorker *worker, OAIIdentityProvider_ListByService_200_response summary);
    void identityProviderListSecretsSignalFull(OAIHttpRequestWorker *worker, OAIIdentityProvider_ListSecrets_200_response summary);
    void identityProviderUpdateSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use identityProviderCreateOrUpdateSignalError() instead")
    void identityProviderCreateOrUpdateSignalE(OAIIdentityProvider_Get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void identityProviderCreateOrUpdateSignalError(OAIIdentityProvider_Get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use identityProviderDeleteSignalError() instead")
    void identityProviderDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void identityProviderDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use identityProviderGetSignalError() instead")
    void identityProviderGetSignalE(OAIIdentityProvider_Get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void identityProviderGetSignalError(OAIIdentityProvider_Get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use identityProviderGetEntityTagSignalError() instead")
    void identityProviderGetEntityTagSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void identityProviderGetEntityTagSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use identityProviderListByServiceSignalError() instead")
    void identityProviderListByServiceSignalE(OAIIdentityProvider_ListByService_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void identityProviderListByServiceSignalError(OAIIdentityProvider_ListByService_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use identityProviderListSecretsSignalError() instead")
    void identityProviderListSecretsSignalE(OAIIdentityProvider_ListSecrets_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void identityProviderListSecretsSignalError(OAIIdentityProvider_ListSecrets_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use identityProviderUpdateSignalError() instead")
    void identityProviderUpdateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void identityProviderUpdateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use identityProviderCreateOrUpdateSignalErrorFull() instead")
    void identityProviderCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void identityProviderCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use identityProviderDeleteSignalErrorFull() instead")
    void identityProviderDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void identityProviderDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use identityProviderGetSignalErrorFull() instead")
    void identityProviderGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void identityProviderGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use identityProviderGetEntityTagSignalErrorFull() instead")
    void identityProviderGetEntityTagSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void identityProviderGetEntityTagSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use identityProviderListByServiceSignalErrorFull() instead")
    void identityProviderListByServiceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void identityProviderListByServiceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use identityProviderListSecretsSignalErrorFull() instead")
    void identityProviderListSecretsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void identityProviderListSecretsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use identityProviderUpdateSignalErrorFull() instead")
    void identityProviderUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void identityProviderUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
