/**
 * ApiManagementClient
 * Use these REST APIs for performing operations on Identity Provider entity associated with your Azure API Management deployment. Setting up an external Identity Provider for authentication can help you manage the developer portal logins using the OAuth2 flow.
 *
 * The version of the OpenAPI document: 2019-12-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIdentityProvider_ListSecrets_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIdentityProvider_ListSecrets_200_response::OAIIdentityProvider_ListSecrets_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIdentityProvider_ListSecrets_200_response::OAIIdentityProvider_ListSecrets_200_response() {
    this->initializeModel();
}

OAIIdentityProvider_ListSecrets_200_response::~OAIIdentityProvider_ListSecrets_200_response() {}

void OAIIdentityProvider_ListSecrets_200_response::initializeModel() {

    m_client_secret_isSet = false;
    m_client_secret_isValid = false;
}

void OAIIdentityProvider_ListSecrets_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIdentityProvider_ListSecrets_200_response::fromJsonObject(QJsonObject json) {

    m_client_secret_isValid = ::OpenAPI::fromJsonValue(m_client_secret, json[QString("clientSecret")]);
    m_client_secret_isSet = !json[QString("clientSecret")].isNull() && m_client_secret_isValid;
}

QString OAIIdentityProvider_ListSecrets_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIdentityProvider_ListSecrets_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_client_secret_isSet) {
        obj.insert(QString("clientSecret"), ::OpenAPI::toJsonValue(m_client_secret));
    }
    return obj;
}

QString OAIIdentityProvider_ListSecrets_200_response::getClientSecret() const {
    return m_client_secret;
}
void OAIIdentityProvider_ListSecrets_200_response::setClientSecret(const QString &client_secret) {
    m_client_secret = client_secret;
    m_client_secret_isSet = true;
}

bool OAIIdentityProvider_ListSecrets_200_response::is_client_secret_Set() const{
    return m_client_secret_isSet;
}

bool OAIIdentityProvider_ListSecrets_200_response::is_client_secret_Valid() const{
    return m_client_secret_isValid;
}

bool OAIIdentityProvider_ListSecrets_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_secret_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIdentityProvider_ListSecrets_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
