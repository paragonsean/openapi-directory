/**
 * ApiManagementClient
 * Use these REST APIs for performing operations on Identity Provider entity associated with your Azure API Management deployment. Setting up an external Identity Provider for authentication can help you manage the developer portal logins using the OAuth2 flow.
 *
 * The version of the OpenAPI document: 2019-12-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ApiManagementClient);
  }
}(this, function(expect, ApiManagementClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ApiManagementClient.IdentityProviderApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('IdentityProviderApi', function() {
    describe('identityProviderCreateOrUpdate', function() {
      it('should call identityProviderCreateOrUpdate successfully', function(done) {
        //uncomment below and update the code to test identityProviderCreateOrUpdate
        //instance.identityProviderCreateOrUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('identityProviderDelete', function() {
      it('should call identityProviderDelete successfully', function(done) {
        //uncomment below and update the code to test identityProviderDelete
        //instance.identityProviderDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('identityProviderGet', function() {
      it('should call identityProviderGet successfully', function(done) {
        //uncomment below and update the code to test identityProviderGet
        //instance.identityProviderGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('identityProviderGetEntityTag', function() {
      it('should call identityProviderGetEntityTag successfully', function(done) {
        //uncomment below and update the code to test identityProviderGetEntityTag
        //instance.identityProviderGetEntityTag(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('identityProviderListByService', function() {
      it('should call identityProviderListByService successfully', function(done) {
        //uncomment below and update the code to test identityProviderListByService
        //instance.identityProviderListByService(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('identityProviderListSecrets', function() {
      it('should call identityProviderListSecrets successfully', function(done) {
        //uncomment below and update the code to test identityProviderListSecrets
        //instance.identityProviderListSecrets(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('identityProviderUpdate', function() {
      it('should call identityProviderUpdate successfully', function(done) {
        //uncomment below and update the code to test identityProviderUpdate
        //instance.identityProviderUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
