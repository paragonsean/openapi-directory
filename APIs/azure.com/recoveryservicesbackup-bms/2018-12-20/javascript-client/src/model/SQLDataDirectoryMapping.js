/**
 * RecoveryServicesBackupClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-12-20
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SQLDataDirectoryMapping model module.
 * @module model/SQLDataDirectoryMapping
 * @version 2018-12-20
 */
class SQLDataDirectoryMapping {
    /**
     * Constructs a new <code>SQLDataDirectoryMapping</code>.
     * Encapsulates information regarding data directory
     * @alias module:model/SQLDataDirectoryMapping
     */
    constructor() { 
        
        SQLDataDirectoryMapping.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SQLDataDirectoryMapping</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SQLDataDirectoryMapping} obj Optional instance to populate.
     * @return {module:model/SQLDataDirectoryMapping} The populated <code>SQLDataDirectoryMapping</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SQLDataDirectoryMapping();

            if (data.hasOwnProperty('mappingType')) {
                obj['mappingType'] = ApiClient.convertToType(data['mappingType'], 'String');
            }
            if (data.hasOwnProperty('sourceLogicalName')) {
                obj['sourceLogicalName'] = ApiClient.convertToType(data['sourceLogicalName'], 'String');
            }
            if (data.hasOwnProperty('sourcePath')) {
                obj['sourcePath'] = ApiClient.convertToType(data['sourcePath'], 'String');
            }
            if (data.hasOwnProperty('targetPath')) {
                obj['targetPath'] = ApiClient.convertToType(data['targetPath'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SQLDataDirectoryMapping</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SQLDataDirectoryMapping</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['mappingType'] && !(typeof data['mappingType'] === 'string' || data['mappingType'] instanceof String)) {
            throw new Error("Expected the field `mappingType` to be a primitive type in the JSON string but got " + data['mappingType']);
        }
        // ensure the json data is a string
        if (data['sourceLogicalName'] && !(typeof data['sourceLogicalName'] === 'string' || data['sourceLogicalName'] instanceof String)) {
            throw new Error("Expected the field `sourceLogicalName` to be a primitive type in the JSON string but got " + data['sourceLogicalName']);
        }
        // ensure the json data is a string
        if (data['sourcePath'] && !(typeof data['sourcePath'] === 'string' || data['sourcePath'] instanceof String)) {
            throw new Error("Expected the field `sourcePath` to be a primitive type in the JSON string but got " + data['sourcePath']);
        }
        // ensure the json data is a string
        if (data['targetPath'] && !(typeof data['targetPath'] === 'string' || data['targetPath'] instanceof String)) {
            throw new Error("Expected the field `targetPath` to be a primitive type in the JSON string but got " + data['targetPath']);
        }

        return true;
    }


}



/**
 * Type of data directory mapping
 * @member {module:model/SQLDataDirectoryMapping.MappingTypeEnum} mappingType
 */
SQLDataDirectoryMapping.prototype['mappingType'] = undefined;

/**
 * Restore source logical name path
 * @member {String} sourceLogicalName
 */
SQLDataDirectoryMapping.prototype['sourceLogicalName'] = undefined;

/**
 * Restore source path
 * @member {String} sourcePath
 */
SQLDataDirectoryMapping.prototype['sourcePath'] = undefined;

/**
 * Target path
 * @member {String} targetPath
 */
SQLDataDirectoryMapping.prototype['targetPath'] = undefined;





/**
 * Allowed values for the <code>mappingType</code> property.
 * @enum {String}
 * @readonly
 */
SQLDataDirectoryMapping['MappingTypeEnum'] = {

    /**
     * value: "Invalid"
     * @const
     */
    "Invalid": "Invalid",

    /**
     * value: "Data"
     * @const
     */
    "Data": "Data",

    /**
     * value: "Log"
     * @const
     */
    "Log": "Log"
};



export default SQLDataDirectoryMapping;

