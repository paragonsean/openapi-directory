# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ProtectedItemQueryObject(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, backup_engine_name: str=None, backup_management_type: str=None, backup_set_name: str=None, container_name: str=None, fabric_name: str=None, friendly_name: str=None, health_state: str=None, item_type: str=None, policy_name: str=None):
        """ProtectedItemQueryObject - a model defined in OpenAPI

        :param backup_engine_name: The backup_engine_name of this ProtectedItemQueryObject.
        :param backup_management_type: The backup_management_type of this ProtectedItemQueryObject.
        :param backup_set_name: The backup_set_name of this ProtectedItemQueryObject.
        :param container_name: The container_name of this ProtectedItemQueryObject.
        :param fabric_name: The fabric_name of this ProtectedItemQueryObject.
        :param friendly_name: The friendly_name of this ProtectedItemQueryObject.
        :param health_state: The health_state of this ProtectedItemQueryObject.
        :param item_type: The item_type of this ProtectedItemQueryObject.
        :param policy_name: The policy_name of this ProtectedItemQueryObject.
        """
        self.openapi_types = {
            'backup_engine_name': str,
            'backup_management_type': str,
            'backup_set_name': str,
            'container_name': str,
            'fabric_name': str,
            'friendly_name': str,
            'health_state': str,
            'item_type': str,
            'policy_name': str
        }

        self.attribute_map = {
            'backup_engine_name': 'backupEngineName',
            'backup_management_type': 'backupManagementType',
            'backup_set_name': 'backupSetName',
            'container_name': 'containerName',
            'fabric_name': 'fabricName',
            'friendly_name': 'friendlyName',
            'health_state': 'healthState',
            'item_type': 'itemType',
            'policy_name': 'policyName'
        }

        self._backup_engine_name = backup_engine_name
        self._backup_management_type = backup_management_type
        self._backup_set_name = backup_set_name
        self._container_name = container_name
        self._fabric_name = fabric_name
        self._friendly_name = friendly_name
        self._health_state = health_state
        self._item_type = item_type
        self._policy_name = policy_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProtectedItemQueryObject':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProtectedItemQueryObject of this ProtectedItemQueryObject.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def backup_engine_name(self):
        """Gets the backup_engine_name of this ProtectedItemQueryObject.

        Backup Engine name

        :return: The backup_engine_name of this ProtectedItemQueryObject.
        :rtype: str
        """
        return self._backup_engine_name

    @backup_engine_name.setter
    def backup_engine_name(self, backup_engine_name):
        """Sets the backup_engine_name of this ProtectedItemQueryObject.

        Backup Engine name

        :param backup_engine_name: The backup_engine_name of this ProtectedItemQueryObject.
        :type backup_engine_name: str
        """

        self._backup_engine_name = backup_engine_name

    @property
    def backup_management_type(self):
        """Gets the backup_management_type of this ProtectedItemQueryObject.

        Backup management type for the backed up item.

        :return: The backup_management_type of this ProtectedItemQueryObject.
        :rtype: str
        """
        return self._backup_management_type

    @backup_management_type.setter
    def backup_management_type(self, backup_management_type):
        """Sets the backup_management_type of this ProtectedItemQueryObject.

        Backup management type for the backed up item.

        :param backup_management_type: The backup_management_type of this ProtectedItemQueryObject.
        :type backup_management_type: str
        """
        allowed_values = ["Invalid", "AzureIaasVM", "MAB", "DPM", "AzureBackupServer", "AzureSql", "AzureStorage", "AzureWorkload", "DefaultBackup"]  # noqa: E501
        if backup_management_type not in allowed_values:
            raise ValueError(
                "Invalid value for `backup_management_type` ({0}), must be one of {1}"
                .format(backup_management_type, allowed_values)
            )

        self._backup_management_type = backup_management_type

    @property
    def backup_set_name(self):
        """Gets the backup_set_name of this ProtectedItemQueryObject.

        Name of the backup set.

        :return: The backup_set_name of this ProtectedItemQueryObject.
        :rtype: str
        """
        return self._backup_set_name

    @backup_set_name.setter
    def backup_set_name(self, backup_set_name):
        """Sets the backup_set_name of this ProtectedItemQueryObject.

        Name of the backup set.

        :param backup_set_name: The backup_set_name of this ProtectedItemQueryObject.
        :type backup_set_name: str
        """

        self._backup_set_name = backup_set_name

    @property
    def container_name(self):
        """Gets the container_name of this ProtectedItemQueryObject.

        Name of the container.

        :return: The container_name of this ProtectedItemQueryObject.
        :rtype: str
        """
        return self._container_name

    @container_name.setter
    def container_name(self, container_name):
        """Sets the container_name of this ProtectedItemQueryObject.

        Name of the container.

        :param container_name: The container_name of this ProtectedItemQueryObject.
        :type container_name: str
        """

        self._container_name = container_name

    @property
    def fabric_name(self):
        """Gets the fabric_name of this ProtectedItemQueryObject.

        Name of the fabric.

        :return: The fabric_name of this ProtectedItemQueryObject.
        :rtype: str
        """
        return self._fabric_name

    @fabric_name.setter
    def fabric_name(self, fabric_name):
        """Sets the fabric_name of this ProtectedItemQueryObject.

        Name of the fabric.

        :param fabric_name: The fabric_name of this ProtectedItemQueryObject.
        :type fabric_name: str
        """

        self._fabric_name = fabric_name

    @property
    def friendly_name(self):
        """Gets the friendly_name of this ProtectedItemQueryObject.

        Friendly name of protected item

        :return: The friendly_name of this ProtectedItemQueryObject.
        :rtype: str
        """
        return self._friendly_name

    @friendly_name.setter
    def friendly_name(self, friendly_name):
        """Sets the friendly_name of this ProtectedItemQueryObject.

        Friendly name of protected item

        :param friendly_name: The friendly_name of this ProtectedItemQueryObject.
        :type friendly_name: str
        """

        self._friendly_name = friendly_name

    @property
    def health_state(self):
        """Gets the health_state of this ProtectedItemQueryObject.

        Health State for the backed up item.

        :return: The health_state of this ProtectedItemQueryObject.
        :rtype: str
        """
        return self._health_state

    @health_state.setter
    def health_state(self, health_state):
        """Sets the health_state of this ProtectedItemQueryObject.

        Health State for the backed up item.

        :param health_state: The health_state of this ProtectedItemQueryObject.
        :type health_state: str
        """
        allowed_values = ["Passed", "ActionRequired", "ActionSuggested", "Invalid"]  # noqa: E501
        if health_state not in allowed_values:
            raise ValueError(
                "Invalid value for `health_state` ({0}), must be one of {1}"
                .format(health_state, allowed_values)
            )

        self._health_state = health_state

    @property
    def item_type(self):
        """Gets the item_type of this ProtectedItemQueryObject.

        Type of workload this item represents.

        :return: The item_type of this ProtectedItemQueryObject.
        :rtype: str
        """
        return self._item_type

    @item_type.setter
    def item_type(self, item_type):
        """Sets the item_type of this ProtectedItemQueryObject.

        Type of workload this item represents.

        :param item_type: The item_type of this ProtectedItemQueryObject.
        :type item_type: str
        """
        allowed_values = ["Invalid", "VM", "FileFolder", "AzureSqlDb", "SQLDB", "Exchange", "Sharepoint", "VMwareVM", "SystemState", "Client", "GenericDataSource", "SQLDataBase", "AzureFileShare", "SAPHanaDatabase", "SAPAseDatabase"]  # noqa: E501
        if item_type not in allowed_values:
            raise ValueError(
                "Invalid value for `item_type` ({0}), must be one of {1}"
                .format(item_type, allowed_values)
            )

        self._item_type = item_type

    @property
    def policy_name(self):
        """Gets the policy_name of this ProtectedItemQueryObject.

        Backup policy name associated with the backup item.

        :return: The policy_name of this ProtectedItemQueryObject.
        :rtype: str
        """
        return self._policy_name

    @policy_name.setter
    def policy_name(self, policy_name):
        """Sets the policy_name of this ProtectedItemQueryObject.

        Backup policy name associated with the backup item.

        :param policy_name: The policy_name of this ProtectedItemQueryObject.
        :type policy_name: str
        """

        self._policy_name = policy_name
