# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TargetRestoreInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, container_id: str=None, database_name: str=None, overwrite_option: str=None, target_directory_mapping: Dict[str, str]=None):
        """TargetRestoreInfo - a model defined in OpenAPI

        :param container_id: The container_id of this TargetRestoreInfo.
        :param database_name: The database_name of this TargetRestoreInfo.
        :param overwrite_option: The overwrite_option of this TargetRestoreInfo.
        :param target_directory_mapping: The target_directory_mapping of this TargetRestoreInfo.
        """
        self.openapi_types = {
            'container_id': str,
            'database_name': str,
            'overwrite_option': str,
            'target_directory_mapping': Dict[str, str]
        }

        self.attribute_map = {
            'container_id': 'containerId',
            'database_name': 'databaseName',
            'overwrite_option': 'overwriteOption',
            'target_directory_mapping': 'targetDirectoryMapping'
        }

        self._container_id = container_id
        self._database_name = database_name
        self._overwrite_option = overwrite_option
        self._target_directory_mapping = target_directory_mapping

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TargetRestoreInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TargetRestoreInfo of this TargetRestoreInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def container_id(self):
        """Gets the container_id of this TargetRestoreInfo.

        Resource Id name of the container in which Target DataBase resides

        :return: The container_id of this TargetRestoreInfo.
        :rtype: str
        """
        return self._container_id

    @container_id.setter
    def container_id(self, container_id):
        """Sets the container_id of this TargetRestoreInfo.

        Resource Id name of the container in which Target DataBase resides

        :param container_id: The container_id of this TargetRestoreInfo.
        :type container_id: str
        """

        self._container_id = container_id

    @property
    def database_name(self):
        """Gets the database_name of this TargetRestoreInfo.

        Database name InstanceName/DataBaseName for SQL or System/DbName for SAP Hana

        :return: The database_name of this TargetRestoreInfo.
        :rtype: str
        """
        return self._database_name

    @database_name.setter
    def database_name(self, database_name):
        """Sets the database_name of this TargetRestoreInfo.

        Database name InstanceName/DataBaseName for SQL or System/DbName for SAP Hana

        :param database_name: The database_name of this TargetRestoreInfo.
        :type database_name: str
        """

        self._database_name = database_name

    @property
    def overwrite_option(self):
        """Gets the overwrite_option of this TargetRestoreInfo.

        Can Overwrite if Target DataBase already exists

        :return: The overwrite_option of this TargetRestoreInfo.
        :rtype: str
        """
        return self._overwrite_option

    @overwrite_option.setter
    def overwrite_option(self, overwrite_option):
        """Sets the overwrite_option of this TargetRestoreInfo.

        Can Overwrite if Target DataBase already exists

        :param overwrite_option: The overwrite_option of this TargetRestoreInfo.
        :type overwrite_option: str
        """
        allowed_values = ["Invalid", "FailOnConflict", "Overwrite"]  # noqa: E501
        if overwrite_option not in allowed_values:
            raise ValueError(
                "Invalid value for `overwrite_option` ({0}), must be one of {1}"
                .format(overwrite_option, allowed_values)
            )

        self._overwrite_option = overwrite_option

    @property
    def target_directory_mapping(self):
        """Gets the target_directory_mapping of this TargetRestoreInfo.

        This will contain the target folder mapping for the Full/Diff/Log/Incremental pits.

        :return: The target_directory_mapping of this TargetRestoreInfo.
        :rtype: Dict[str, str]
        """
        return self._target_directory_mapping

    @target_directory_mapping.setter
    def target_directory_mapping(self, target_directory_mapping):
        """Sets the target_directory_mapping of this TargetRestoreInfo.

        This will contain the target folder mapping for the Full/Diff/Log/Incremental pits.

        :param target_directory_mapping: The target_directory_mapping of this TargetRestoreInfo.
        :type target_directory_mapping: Dict[str, str]
        """

        self._target_directory_mapping = target_directory_mapping
