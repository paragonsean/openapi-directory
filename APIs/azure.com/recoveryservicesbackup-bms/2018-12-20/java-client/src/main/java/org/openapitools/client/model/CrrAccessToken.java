/*
 * RecoveryServicesBackupClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-12-20
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Container level access token for CRR
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:08:52.760745-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CrrAccessToken {
  public static final String SERIALIZED_NAME_ACCESS_TOKEN_STRING = "accessTokenString";
  @SerializedName(SERIALIZED_NAME_ACCESS_TOKEN_STRING)
  private String accessTokenString;

  public static final String SERIALIZED_NAME_BACKUP_MANAGEMENT_TYPE = "backupManagementType";
  @SerializedName(SERIALIZED_NAME_BACKUP_MANAGEMENT_TYPE)
  private String backupManagementType;

  public static final String SERIALIZED_NAME_CONTAINER_NAME = "containerName";
  @SerializedName(SERIALIZED_NAME_CONTAINER_NAME)
  private String containerName;

  public static final String SERIALIZED_NAME_CONTAINER_TYPE = "containerType";
  @SerializedName(SERIALIZED_NAME_CONTAINER_TYPE)
  private String containerType;

  public static final String SERIALIZED_NAME_COORDINATOR_SERVICE_STAMP_ID = "coordinatorServiceStampId";
  @SerializedName(SERIALIZED_NAME_COORDINATOR_SERVICE_STAMP_ID)
  private String coordinatorServiceStampId;

  public static final String SERIALIZED_NAME_COORDINATOR_SERVICE_STAMP_URI = "coordinatorServiceStampUri";
  @SerializedName(SERIALIZED_NAME_COORDINATOR_SERVICE_STAMP_URI)
  private String coordinatorServiceStampUri;

  public static final String SERIALIZED_NAME_DATASOURCE_CONTAINER_NAME = "datasourceContainerName";
  @SerializedName(SERIALIZED_NAME_DATASOURCE_CONTAINER_NAME)
  private String datasourceContainerName;

  public static final String SERIALIZED_NAME_DATASOURCE_ID = "datasourceId";
  @SerializedName(SERIALIZED_NAME_DATASOURCE_ID)
  private String datasourceId;

  public static final String SERIALIZED_NAME_DATASOURCE_NAME = "datasourceName";
  @SerializedName(SERIALIZED_NAME_DATASOURCE_NAME)
  private String datasourceName;

  public static final String SERIALIZED_NAME_DATASOURCE_TYPE = "datasourceType";
  @SerializedName(SERIALIZED_NAME_DATASOURCE_TYPE)
  private String datasourceType;

  public static final String SERIALIZED_NAME_PROTECTION_SERVICE_STAMP_ID = "protectionServiceStampId";
  @SerializedName(SERIALIZED_NAME_PROTECTION_SERVICE_STAMP_ID)
  private String protectionServiceStampId;

  public static final String SERIALIZED_NAME_PROTECTION_SERVICE_STAMP_URI = "protectionServiceStampUri";
  @SerializedName(SERIALIZED_NAME_PROTECTION_SERVICE_STAMP_URI)
  private String protectionServiceStampUri;

  public static final String SERIALIZED_NAME_RECOVERY_POINT_ID = "recoveryPointId";
  @SerializedName(SERIALIZED_NAME_RECOVERY_POINT_ID)
  private String recoveryPointId;

  public static final String SERIALIZED_NAME_RECOVERY_POINT_TIME = "recoveryPointTime";
  @SerializedName(SERIALIZED_NAME_RECOVERY_POINT_TIME)
  private String recoveryPointTime;

  public static final String SERIALIZED_NAME_RESOURCE_GROUP_NAME = "resourceGroupName";
  @SerializedName(SERIALIZED_NAME_RESOURCE_GROUP_NAME)
  private String resourceGroupName;

  public static final String SERIALIZED_NAME_RESOURCE_ID = "resourceId";
  @SerializedName(SERIALIZED_NAME_RESOURCE_ID)
  private String resourceId;

  public static final String SERIALIZED_NAME_RESOURCE_NAME = "resourceName";
  @SerializedName(SERIALIZED_NAME_RESOURCE_NAME)
  private String resourceName;

  public static final String SERIALIZED_NAME_SUBSCRIPTION_ID = "subscriptionId";
  @SerializedName(SERIALIZED_NAME_SUBSCRIPTION_ID)
  private String subscriptionId;

  public static final String SERIALIZED_NAME_TOKEN_EXTENDED_INFORMATION = "tokenExtendedInformation";
  @SerializedName(SERIALIZED_NAME_TOKEN_EXTENDED_INFORMATION)
  private String tokenExtendedInformation;

  public CrrAccessToken() {
  }

  public CrrAccessToken accessTokenString(String accessTokenString) {
    this.accessTokenString = accessTokenString;
    return this;
  }

  /**
   * Access token used for authentication
   * @return accessTokenString
   */
  @javax.annotation.Nullable
  public String getAccessTokenString() {
    return accessTokenString;
  }

  public void setAccessTokenString(String accessTokenString) {
    this.accessTokenString = accessTokenString;
  }


  public CrrAccessToken backupManagementType(String backupManagementType) {
    this.backupManagementType = backupManagementType;
    return this;
  }

  /**
   * Backup Management Type
   * @return backupManagementType
   */
  @javax.annotation.Nullable
  public String getBackupManagementType() {
    return backupManagementType;
  }

  public void setBackupManagementType(String backupManagementType) {
    this.backupManagementType = backupManagementType;
  }


  public CrrAccessToken containerName(String containerName) {
    this.containerName = containerName;
    return this;
  }

  /**
   * Container Unique name
   * @return containerName
   */
  @javax.annotation.Nullable
  public String getContainerName() {
    return containerName;
  }

  public void setContainerName(String containerName) {
    this.containerName = containerName;
  }


  public CrrAccessToken containerType(String containerType) {
    this.containerType = containerType;
    return this;
  }

  /**
   * Container Type
   * @return containerType
   */
  @javax.annotation.Nullable
  public String getContainerType() {
    return containerType;
  }

  public void setContainerType(String containerType) {
    this.containerType = containerType;
  }


  public CrrAccessToken coordinatorServiceStampId(String coordinatorServiceStampId) {
    this.coordinatorServiceStampId = coordinatorServiceStampId;
    return this;
  }

  /**
   * CoordinatorServiceStampId to be used by BCM in restore call
   * @return coordinatorServiceStampId
   */
  @javax.annotation.Nullable
  public String getCoordinatorServiceStampId() {
    return coordinatorServiceStampId;
  }

  public void setCoordinatorServiceStampId(String coordinatorServiceStampId) {
    this.coordinatorServiceStampId = coordinatorServiceStampId;
  }


  public CrrAccessToken coordinatorServiceStampUri(String coordinatorServiceStampUri) {
    this.coordinatorServiceStampUri = coordinatorServiceStampUri;
    return this;
  }

  /**
   * CoordinatorServiceStampUri to be used by BCM in restore call
   * @return coordinatorServiceStampUri
   */
  @javax.annotation.Nullable
  public String getCoordinatorServiceStampUri() {
    return coordinatorServiceStampUri;
  }

  public void setCoordinatorServiceStampUri(String coordinatorServiceStampUri) {
    this.coordinatorServiceStampUri = coordinatorServiceStampUri;
  }


  public CrrAccessToken datasourceContainerName(String datasourceContainerName) {
    this.datasourceContainerName = datasourceContainerName;
    return this;
  }

  /**
   * Datasource Container Unique Name
   * @return datasourceContainerName
   */
  @javax.annotation.Nullable
  public String getDatasourceContainerName() {
    return datasourceContainerName;
  }

  public void setDatasourceContainerName(String datasourceContainerName) {
    this.datasourceContainerName = datasourceContainerName;
  }


  public CrrAccessToken datasourceId(String datasourceId) {
    this.datasourceId = datasourceId;
    return this;
  }

  /**
   * Datasource Id
   * @return datasourceId
   */
  @javax.annotation.Nullable
  public String getDatasourceId() {
    return datasourceId;
  }

  public void setDatasourceId(String datasourceId) {
    this.datasourceId = datasourceId;
  }


  public CrrAccessToken datasourceName(String datasourceName) {
    this.datasourceName = datasourceName;
    return this;
  }

  /**
   * Datasource Friendly Name
   * @return datasourceName
   */
  @javax.annotation.Nullable
  public String getDatasourceName() {
    return datasourceName;
  }

  public void setDatasourceName(String datasourceName) {
    this.datasourceName = datasourceName;
  }


  public CrrAccessToken datasourceType(String datasourceType) {
    this.datasourceType = datasourceType;
    return this;
  }

  /**
   * Datasource Type
   * @return datasourceType
   */
  @javax.annotation.Nullable
  public String getDatasourceType() {
    return datasourceType;
  }

  public void setDatasourceType(String datasourceType) {
    this.datasourceType = datasourceType;
  }


  public CrrAccessToken protectionServiceStampId(String protectionServiceStampId) {
    this.protectionServiceStampId = protectionServiceStampId;
    return this;
  }

  /**
   * ProtectionServiceStampId to be used by BCM in restore call
   * @return protectionServiceStampId
   */
  @javax.annotation.Nullable
  public String getProtectionServiceStampId() {
    return protectionServiceStampId;
  }

  public void setProtectionServiceStampId(String protectionServiceStampId) {
    this.protectionServiceStampId = protectionServiceStampId;
  }


  public CrrAccessToken protectionServiceStampUri(String protectionServiceStampUri) {
    this.protectionServiceStampUri = protectionServiceStampUri;
    return this;
  }

  /**
   * ProtectionServiceStampUri to be used by BCM in restore call
   * @return protectionServiceStampUri
   */
  @javax.annotation.Nullable
  public String getProtectionServiceStampUri() {
    return protectionServiceStampUri;
  }

  public void setProtectionServiceStampUri(String protectionServiceStampUri) {
    this.protectionServiceStampUri = protectionServiceStampUri;
  }


  public CrrAccessToken recoveryPointId(String recoveryPointId) {
    this.recoveryPointId = recoveryPointId;
    return this;
  }

  /**
   * Recovery Point Id
   * @return recoveryPointId
   */
  @javax.annotation.Nullable
  public String getRecoveryPointId() {
    return recoveryPointId;
  }

  public void setRecoveryPointId(String recoveryPointId) {
    this.recoveryPointId = recoveryPointId;
  }


  public CrrAccessToken recoveryPointTime(String recoveryPointTime) {
    this.recoveryPointTime = recoveryPointTime;
    return this;
  }

  /**
   * Recovery Point Time
   * @return recoveryPointTime
   */
  @javax.annotation.Nullable
  public String getRecoveryPointTime() {
    return recoveryPointTime;
  }

  public void setRecoveryPointTime(String recoveryPointTime) {
    this.recoveryPointTime = recoveryPointTime;
  }


  public CrrAccessToken resourceGroupName(String resourceGroupName) {
    this.resourceGroupName = resourceGroupName;
    return this;
  }

  /**
   * Resource Group name of the source vault
   * @return resourceGroupName
   */
  @javax.annotation.Nullable
  public String getResourceGroupName() {
    return resourceGroupName;
  }

  public void setResourceGroupName(String resourceGroupName) {
    this.resourceGroupName = resourceGroupName;
  }


  public CrrAccessToken resourceId(String resourceId) {
    this.resourceId = resourceId;
    return this;
  }

  /**
   * Resource Id of the source vault
   * @return resourceId
   */
  @javax.annotation.Nullable
  public String getResourceId() {
    return resourceId;
  }

  public void setResourceId(String resourceId) {
    this.resourceId = resourceId;
  }


  public CrrAccessToken resourceName(String resourceName) {
    this.resourceName = resourceName;
    return this;
  }

  /**
   * Resource Name of the source vault
   * @return resourceName
   */
  @javax.annotation.Nullable
  public String getResourceName() {
    return resourceName;
  }

  public void setResourceName(String resourceName) {
    this.resourceName = resourceName;
  }


  public CrrAccessToken subscriptionId(String subscriptionId) {
    this.subscriptionId = subscriptionId;
    return this;
  }

  /**
   * Subscription Id of the source vault
   * @return subscriptionId
   */
  @javax.annotation.Nullable
  public String getSubscriptionId() {
    return subscriptionId;
  }

  public void setSubscriptionId(String subscriptionId) {
    this.subscriptionId = subscriptionId;
  }


  public CrrAccessToken tokenExtendedInformation(String tokenExtendedInformation) {
    this.tokenExtendedInformation = tokenExtendedInformation;
    return this;
  }

  /**
   * Extended Information about the token like FileSpec etc.
   * @return tokenExtendedInformation
   */
  @javax.annotation.Nullable
  public String getTokenExtendedInformation() {
    return tokenExtendedInformation;
  }

  public void setTokenExtendedInformation(String tokenExtendedInformation) {
    this.tokenExtendedInformation = tokenExtendedInformation;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CrrAccessToken crrAccessToken = (CrrAccessToken) o;
    return Objects.equals(this.accessTokenString, crrAccessToken.accessTokenString) &&
        Objects.equals(this.backupManagementType, crrAccessToken.backupManagementType) &&
        Objects.equals(this.containerName, crrAccessToken.containerName) &&
        Objects.equals(this.containerType, crrAccessToken.containerType) &&
        Objects.equals(this.coordinatorServiceStampId, crrAccessToken.coordinatorServiceStampId) &&
        Objects.equals(this.coordinatorServiceStampUri, crrAccessToken.coordinatorServiceStampUri) &&
        Objects.equals(this.datasourceContainerName, crrAccessToken.datasourceContainerName) &&
        Objects.equals(this.datasourceId, crrAccessToken.datasourceId) &&
        Objects.equals(this.datasourceName, crrAccessToken.datasourceName) &&
        Objects.equals(this.datasourceType, crrAccessToken.datasourceType) &&
        Objects.equals(this.protectionServiceStampId, crrAccessToken.protectionServiceStampId) &&
        Objects.equals(this.protectionServiceStampUri, crrAccessToken.protectionServiceStampUri) &&
        Objects.equals(this.recoveryPointId, crrAccessToken.recoveryPointId) &&
        Objects.equals(this.recoveryPointTime, crrAccessToken.recoveryPointTime) &&
        Objects.equals(this.resourceGroupName, crrAccessToken.resourceGroupName) &&
        Objects.equals(this.resourceId, crrAccessToken.resourceId) &&
        Objects.equals(this.resourceName, crrAccessToken.resourceName) &&
        Objects.equals(this.subscriptionId, crrAccessToken.subscriptionId) &&
        Objects.equals(this.tokenExtendedInformation, crrAccessToken.tokenExtendedInformation);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessTokenString, backupManagementType, containerName, containerType, coordinatorServiceStampId, coordinatorServiceStampUri, datasourceContainerName, datasourceId, datasourceName, datasourceType, protectionServiceStampId, protectionServiceStampUri, recoveryPointId, recoveryPointTime, resourceGroupName, resourceId, resourceName, subscriptionId, tokenExtendedInformation);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CrrAccessToken {\n");
    sb.append("    accessTokenString: ").append(toIndentedString(accessTokenString)).append("\n");
    sb.append("    backupManagementType: ").append(toIndentedString(backupManagementType)).append("\n");
    sb.append("    containerName: ").append(toIndentedString(containerName)).append("\n");
    sb.append("    containerType: ").append(toIndentedString(containerType)).append("\n");
    sb.append("    coordinatorServiceStampId: ").append(toIndentedString(coordinatorServiceStampId)).append("\n");
    sb.append("    coordinatorServiceStampUri: ").append(toIndentedString(coordinatorServiceStampUri)).append("\n");
    sb.append("    datasourceContainerName: ").append(toIndentedString(datasourceContainerName)).append("\n");
    sb.append("    datasourceId: ").append(toIndentedString(datasourceId)).append("\n");
    sb.append("    datasourceName: ").append(toIndentedString(datasourceName)).append("\n");
    sb.append("    datasourceType: ").append(toIndentedString(datasourceType)).append("\n");
    sb.append("    protectionServiceStampId: ").append(toIndentedString(protectionServiceStampId)).append("\n");
    sb.append("    protectionServiceStampUri: ").append(toIndentedString(protectionServiceStampUri)).append("\n");
    sb.append("    recoveryPointId: ").append(toIndentedString(recoveryPointId)).append("\n");
    sb.append("    recoveryPointTime: ").append(toIndentedString(recoveryPointTime)).append("\n");
    sb.append("    resourceGroupName: ").append(toIndentedString(resourceGroupName)).append("\n");
    sb.append("    resourceId: ").append(toIndentedString(resourceId)).append("\n");
    sb.append("    resourceName: ").append(toIndentedString(resourceName)).append("\n");
    sb.append("    subscriptionId: ").append(toIndentedString(subscriptionId)).append("\n");
    sb.append("    tokenExtendedInformation: ").append(toIndentedString(tokenExtendedInformation)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accessTokenString");
    openapiFields.add("backupManagementType");
    openapiFields.add("containerName");
    openapiFields.add("containerType");
    openapiFields.add("coordinatorServiceStampId");
    openapiFields.add("coordinatorServiceStampUri");
    openapiFields.add("datasourceContainerName");
    openapiFields.add("datasourceId");
    openapiFields.add("datasourceName");
    openapiFields.add("datasourceType");
    openapiFields.add("protectionServiceStampId");
    openapiFields.add("protectionServiceStampUri");
    openapiFields.add("recoveryPointId");
    openapiFields.add("recoveryPointTime");
    openapiFields.add("resourceGroupName");
    openapiFields.add("resourceId");
    openapiFields.add("resourceName");
    openapiFields.add("subscriptionId");
    openapiFields.add("tokenExtendedInformation");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CrrAccessToken
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CrrAccessToken.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CrrAccessToken is not found in the empty JSON string", CrrAccessToken.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CrrAccessToken.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CrrAccessToken` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("accessTokenString") != null && !jsonObj.get("accessTokenString").isJsonNull()) && !jsonObj.get("accessTokenString").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accessTokenString` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accessTokenString").toString()));
      }
      if ((jsonObj.get("backupManagementType") != null && !jsonObj.get("backupManagementType").isJsonNull()) && !jsonObj.get("backupManagementType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `backupManagementType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("backupManagementType").toString()));
      }
      if ((jsonObj.get("containerName") != null && !jsonObj.get("containerName").isJsonNull()) && !jsonObj.get("containerName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `containerName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("containerName").toString()));
      }
      if ((jsonObj.get("containerType") != null && !jsonObj.get("containerType").isJsonNull()) && !jsonObj.get("containerType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `containerType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("containerType").toString()));
      }
      if ((jsonObj.get("coordinatorServiceStampId") != null && !jsonObj.get("coordinatorServiceStampId").isJsonNull()) && !jsonObj.get("coordinatorServiceStampId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `coordinatorServiceStampId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("coordinatorServiceStampId").toString()));
      }
      if ((jsonObj.get("coordinatorServiceStampUri") != null && !jsonObj.get("coordinatorServiceStampUri").isJsonNull()) && !jsonObj.get("coordinatorServiceStampUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `coordinatorServiceStampUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("coordinatorServiceStampUri").toString()));
      }
      if ((jsonObj.get("datasourceContainerName") != null && !jsonObj.get("datasourceContainerName").isJsonNull()) && !jsonObj.get("datasourceContainerName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `datasourceContainerName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("datasourceContainerName").toString()));
      }
      if ((jsonObj.get("datasourceId") != null && !jsonObj.get("datasourceId").isJsonNull()) && !jsonObj.get("datasourceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `datasourceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("datasourceId").toString()));
      }
      if ((jsonObj.get("datasourceName") != null && !jsonObj.get("datasourceName").isJsonNull()) && !jsonObj.get("datasourceName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `datasourceName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("datasourceName").toString()));
      }
      if ((jsonObj.get("datasourceType") != null && !jsonObj.get("datasourceType").isJsonNull()) && !jsonObj.get("datasourceType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `datasourceType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("datasourceType").toString()));
      }
      if ((jsonObj.get("protectionServiceStampId") != null && !jsonObj.get("protectionServiceStampId").isJsonNull()) && !jsonObj.get("protectionServiceStampId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `protectionServiceStampId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("protectionServiceStampId").toString()));
      }
      if ((jsonObj.get("protectionServiceStampUri") != null && !jsonObj.get("protectionServiceStampUri").isJsonNull()) && !jsonObj.get("protectionServiceStampUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `protectionServiceStampUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("protectionServiceStampUri").toString()));
      }
      if ((jsonObj.get("recoveryPointId") != null && !jsonObj.get("recoveryPointId").isJsonNull()) && !jsonObj.get("recoveryPointId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recoveryPointId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recoveryPointId").toString()));
      }
      if ((jsonObj.get("recoveryPointTime") != null && !jsonObj.get("recoveryPointTime").isJsonNull()) && !jsonObj.get("recoveryPointTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recoveryPointTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recoveryPointTime").toString()));
      }
      if ((jsonObj.get("resourceGroupName") != null && !jsonObj.get("resourceGroupName").isJsonNull()) && !jsonObj.get("resourceGroupName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceGroupName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourceGroupName").toString()));
      }
      if ((jsonObj.get("resourceId") != null && !jsonObj.get("resourceId").isJsonNull()) && !jsonObj.get("resourceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourceId").toString()));
      }
      if ((jsonObj.get("resourceName") != null && !jsonObj.get("resourceName").isJsonNull()) && !jsonObj.get("resourceName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourceName").toString()));
      }
      if ((jsonObj.get("subscriptionId") != null && !jsonObj.get("subscriptionId").isJsonNull()) && !jsonObj.get("subscriptionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subscriptionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subscriptionId").toString()));
      }
      if ((jsonObj.get("tokenExtendedInformation") != null && !jsonObj.get("tokenExtendedInformation").isJsonNull()) && !jsonObj.get("tokenExtendedInformation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tokenExtendedInformation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tokenExtendedInformation").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CrrAccessToken.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CrrAccessToken' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CrrAccessToken> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CrrAccessToken.class));

       return (TypeAdapter<T>) new TypeAdapter<CrrAccessToken>() {
           @Override
           public void write(JsonWriter out, CrrAccessToken value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CrrAccessToken read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CrrAccessToken given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CrrAccessToken
   * @throws IOException if the JSON string is invalid with respect to CrrAccessToken
   */
  public static CrrAccessToken fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CrrAccessToken.class);
  }

  /**
   * Convert an instance of CrrAccessToken to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

