/*
 * RecoveryServicesBackupClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-12-20
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.RestoreFileSpecs;
import org.openapitools.client.model.RestoreRequest;
import org.openapitools.client.model.TargetAFSRestoreInfo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AzureFileShare Restore Request
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:08:52.760745-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AzureFileShareRestoreRequest extends RestoreRequest {
  /**
   * Options to resolve copy conflicts.
   */
  @JsonAdapter(CopyOptionsEnum.Adapter.class)
  public enum CopyOptionsEnum {
    INVALID("Invalid"),
    
    CREATE_COPY("CreateCopy"),
    
    SKIP("Skip"),
    
    OVERWRITE("Overwrite"),
    
    FAIL_ON_CONFLICT("FailOnConflict");

    private String value;

    CopyOptionsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CopyOptionsEnum fromValue(String value) {
      for (CopyOptionsEnum b : CopyOptionsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CopyOptionsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CopyOptionsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CopyOptionsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CopyOptionsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CopyOptionsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_COPY_OPTIONS = "copyOptions";
  @SerializedName(SERIALIZED_NAME_COPY_OPTIONS)
  private CopyOptionsEnum copyOptions;

  /**
   * Type of this recovery.
   */
  @JsonAdapter(RecoveryTypeEnum.Adapter.class)
  public enum RecoveryTypeEnum {
    INVALID("Invalid"),
    
    ORIGINAL_LOCATION("OriginalLocation"),
    
    ALTERNATE_LOCATION("AlternateLocation"),
    
    RESTORE_DISKS("RestoreDisks"),
    
    OFFLINE("Offline");

    private String value;

    RecoveryTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RecoveryTypeEnum fromValue(String value) {
      for (RecoveryTypeEnum b : RecoveryTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RecoveryTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RecoveryTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RecoveryTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RecoveryTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RecoveryTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RECOVERY_TYPE = "recoveryType";
  @SerializedName(SERIALIZED_NAME_RECOVERY_TYPE)
  private RecoveryTypeEnum recoveryType;

  public static final String SERIALIZED_NAME_RESTORE_FILE_SPECS = "restoreFileSpecs";
  @SerializedName(SERIALIZED_NAME_RESTORE_FILE_SPECS)
  private List<RestoreFileSpecs> restoreFileSpecs = new ArrayList<>();

  /**
   * Restore Type (FullShareRestore or ItemLevelRestore)
   */
  @JsonAdapter(RestoreRequestTypeEnum.Adapter.class)
  public enum RestoreRequestTypeEnum {
    INVALID("Invalid"),
    
    FULL_SHARE_RESTORE("FullShareRestore"),
    
    ITEM_LEVEL_RESTORE("ItemLevelRestore");

    private String value;

    RestoreRequestTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RestoreRequestTypeEnum fromValue(String value) {
      for (RestoreRequestTypeEnum b : RestoreRequestTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RestoreRequestTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RestoreRequestTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RestoreRequestTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RestoreRequestTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RestoreRequestTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RESTORE_REQUEST_TYPE = "restoreRequestType";
  @SerializedName(SERIALIZED_NAME_RESTORE_REQUEST_TYPE)
  private RestoreRequestTypeEnum restoreRequestType;

  public static final String SERIALIZED_NAME_SOURCE_RESOURCE_ID = "sourceResourceId";
  @SerializedName(SERIALIZED_NAME_SOURCE_RESOURCE_ID)
  private String sourceResourceId;

  public static final String SERIALIZED_NAME_TARGET_DETAILS = "targetDetails";
  @SerializedName(SERIALIZED_NAME_TARGET_DETAILS)
  private TargetAFSRestoreInfo targetDetails;

  public AzureFileShareRestoreRequest() {
    this.objectType = this.getClass().getSimpleName();
  }

  public AzureFileShareRestoreRequest copyOptions(CopyOptionsEnum copyOptions) {
    this.copyOptions = copyOptions;
    return this;
  }

  /**
   * Options to resolve copy conflicts.
   * @return copyOptions
   */
  @javax.annotation.Nullable
  public CopyOptionsEnum getCopyOptions() {
    return copyOptions;
  }

  public void setCopyOptions(CopyOptionsEnum copyOptions) {
    this.copyOptions = copyOptions;
  }


  public AzureFileShareRestoreRequest recoveryType(RecoveryTypeEnum recoveryType) {
    this.recoveryType = recoveryType;
    return this;
  }

  /**
   * Type of this recovery.
   * @return recoveryType
   */
  @javax.annotation.Nullable
  public RecoveryTypeEnum getRecoveryType() {
    return recoveryType;
  }

  public void setRecoveryType(RecoveryTypeEnum recoveryType) {
    this.recoveryType = recoveryType;
  }


  public AzureFileShareRestoreRequest restoreFileSpecs(List<RestoreFileSpecs> restoreFileSpecs) {
    this.restoreFileSpecs = restoreFileSpecs;
    return this;
  }

  public AzureFileShareRestoreRequest addRestoreFileSpecsItem(RestoreFileSpecs restoreFileSpecsItem) {
    if (this.restoreFileSpecs == null) {
      this.restoreFileSpecs = new ArrayList<>();
    }
    this.restoreFileSpecs.add(restoreFileSpecsItem);
    return this;
  }

  /**
   * List of Source Files/Folders(which need to recover) and TargetFolderPath details
   * @return restoreFileSpecs
   */
  @javax.annotation.Nullable
  public List<RestoreFileSpecs> getRestoreFileSpecs() {
    return restoreFileSpecs;
  }

  public void setRestoreFileSpecs(List<RestoreFileSpecs> restoreFileSpecs) {
    this.restoreFileSpecs = restoreFileSpecs;
  }


  public AzureFileShareRestoreRequest restoreRequestType(RestoreRequestTypeEnum restoreRequestType) {
    this.restoreRequestType = restoreRequestType;
    return this;
  }

  /**
   * Restore Type (FullShareRestore or ItemLevelRestore)
   * @return restoreRequestType
   */
  @javax.annotation.Nullable
  public RestoreRequestTypeEnum getRestoreRequestType() {
    return restoreRequestType;
  }

  public void setRestoreRequestType(RestoreRequestTypeEnum restoreRequestType) {
    this.restoreRequestType = restoreRequestType;
  }


  public AzureFileShareRestoreRequest sourceResourceId(String sourceResourceId) {
    this.sourceResourceId = sourceResourceId;
    return this;
  }

  /**
   * Source storage account ARM Id
   * @return sourceResourceId
   */
  @javax.annotation.Nullable
  public String getSourceResourceId() {
    return sourceResourceId;
  }

  public void setSourceResourceId(String sourceResourceId) {
    this.sourceResourceId = sourceResourceId;
  }


  public AzureFileShareRestoreRequest targetDetails(TargetAFSRestoreInfo targetDetails) {
    this.targetDetails = targetDetails;
    return this;
  }

  /**
   * Get targetDetails
   * @return targetDetails
   */
  @javax.annotation.Nullable
  public TargetAFSRestoreInfo getTargetDetails() {
    return targetDetails;
  }

  public void setTargetDetails(TargetAFSRestoreInfo targetDetails) {
    this.targetDetails = targetDetails;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AzureFileShareRestoreRequest azureFileShareRestoreRequest = (AzureFileShareRestoreRequest) o;
    return Objects.equals(this.copyOptions, azureFileShareRestoreRequest.copyOptions) &&
        Objects.equals(this.recoveryType, azureFileShareRestoreRequest.recoveryType) &&
        Objects.equals(this.restoreFileSpecs, azureFileShareRestoreRequest.restoreFileSpecs) &&
        Objects.equals(this.restoreRequestType, azureFileShareRestoreRequest.restoreRequestType) &&
        Objects.equals(this.sourceResourceId, azureFileShareRestoreRequest.sourceResourceId) &&
        Objects.equals(this.targetDetails, azureFileShareRestoreRequest.targetDetails) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(copyOptions, recoveryType, restoreFileSpecs, restoreRequestType, sourceResourceId, targetDetails, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AzureFileShareRestoreRequest {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    copyOptions: ").append(toIndentedString(copyOptions)).append("\n");
    sb.append("    recoveryType: ").append(toIndentedString(recoveryType)).append("\n");
    sb.append("    restoreFileSpecs: ").append(toIndentedString(restoreFileSpecs)).append("\n");
    sb.append("    restoreRequestType: ").append(toIndentedString(restoreRequestType)).append("\n");
    sb.append("    sourceResourceId: ").append(toIndentedString(sourceResourceId)).append("\n");
    sb.append("    targetDetails: ").append(toIndentedString(targetDetails)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("objectType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("objectType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AzureFileShareRestoreRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AzureFileShareRestoreRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AzureFileShareRestoreRequest is not found in the empty JSON string", AzureFileShareRestoreRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AzureFileShareRestoreRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AzureFileShareRestoreRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AzureFileShareRestoreRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AzureFileShareRestoreRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AzureFileShareRestoreRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AzureFileShareRestoreRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AzureFileShareRestoreRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<AzureFileShareRestoreRequest>() {
           @Override
           public void write(JsonWriter out, AzureFileShareRestoreRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AzureFileShareRestoreRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AzureFileShareRestoreRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AzureFileShareRestoreRequest
   * @throws IOException if the JSON string is invalid with respect to AzureFileShareRestoreRequest
   */
  public static AzureFileShareRestoreRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AzureFileShareRestoreRequest.class);
  }

  /**
   * Convert an instance of AzureFileShareRestoreRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

