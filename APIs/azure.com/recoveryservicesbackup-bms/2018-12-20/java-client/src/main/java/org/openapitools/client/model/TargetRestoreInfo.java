/*
 * RecoveryServicesBackupClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-12-20
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Details about target workload during restore operation.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:08:52.760745-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TargetRestoreInfo {
  public static final String SERIALIZED_NAME_CONTAINER_ID = "containerId";
  @SerializedName(SERIALIZED_NAME_CONTAINER_ID)
  private String containerId;

  public static final String SERIALIZED_NAME_DATABASE_NAME = "databaseName";
  @SerializedName(SERIALIZED_NAME_DATABASE_NAME)
  private String databaseName;

  /**
   * Can Overwrite if Target DataBase already exists
   */
  @JsonAdapter(OverwriteOptionEnum.Adapter.class)
  public enum OverwriteOptionEnum {
    INVALID("Invalid"),
    
    FAIL_ON_CONFLICT("FailOnConflict"),
    
    OVERWRITE("Overwrite");

    private String value;

    OverwriteOptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OverwriteOptionEnum fromValue(String value) {
      for (OverwriteOptionEnum b : OverwriteOptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OverwriteOptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OverwriteOptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OverwriteOptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OverwriteOptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OverwriteOptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_OVERWRITE_OPTION = "overwriteOption";
  @SerializedName(SERIALIZED_NAME_OVERWRITE_OPTION)
  private OverwriteOptionEnum overwriteOption;

  public static final String SERIALIZED_NAME_TARGET_DIRECTORY_MAPPING = "targetDirectoryMapping";
  @SerializedName(SERIALIZED_NAME_TARGET_DIRECTORY_MAPPING)
  private Map<String, String> targetDirectoryMapping = new HashMap<>();

  public TargetRestoreInfo() {
  }

  public TargetRestoreInfo containerId(String containerId) {
    this.containerId = containerId;
    return this;
  }

  /**
   * Resource Id name of the container in which Target DataBase resides
   * @return containerId
   */
  @javax.annotation.Nullable
  public String getContainerId() {
    return containerId;
  }

  public void setContainerId(String containerId) {
    this.containerId = containerId;
  }


  public TargetRestoreInfo databaseName(String databaseName) {
    this.databaseName = databaseName;
    return this;
  }

  /**
   * Database name InstanceName/DataBaseName for SQL or System/DbName for SAP Hana
   * @return databaseName
   */
  @javax.annotation.Nullable
  public String getDatabaseName() {
    return databaseName;
  }

  public void setDatabaseName(String databaseName) {
    this.databaseName = databaseName;
  }


  public TargetRestoreInfo overwriteOption(OverwriteOptionEnum overwriteOption) {
    this.overwriteOption = overwriteOption;
    return this;
  }

  /**
   * Can Overwrite if Target DataBase already exists
   * @return overwriteOption
   */
  @javax.annotation.Nullable
  public OverwriteOptionEnum getOverwriteOption() {
    return overwriteOption;
  }

  public void setOverwriteOption(OverwriteOptionEnum overwriteOption) {
    this.overwriteOption = overwriteOption;
  }


  public TargetRestoreInfo targetDirectoryMapping(Map<String, String> targetDirectoryMapping) {
    this.targetDirectoryMapping = targetDirectoryMapping;
    return this;
  }

  public TargetRestoreInfo putTargetDirectoryMappingItem(String key, String targetDirectoryMappingItem) {
    if (this.targetDirectoryMapping == null) {
      this.targetDirectoryMapping = new HashMap<>();
    }
    this.targetDirectoryMapping.put(key, targetDirectoryMappingItem);
    return this;
  }

  /**
   * This will contain the target folder mapping for the Full/Diff/Log/Incremental pits.
   * @return targetDirectoryMapping
   */
  @javax.annotation.Nullable
  public Map<String, String> getTargetDirectoryMapping() {
    return targetDirectoryMapping;
  }

  public void setTargetDirectoryMapping(Map<String, String> targetDirectoryMapping) {
    this.targetDirectoryMapping = targetDirectoryMapping;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TargetRestoreInfo targetRestoreInfo = (TargetRestoreInfo) o;
    return Objects.equals(this.containerId, targetRestoreInfo.containerId) &&
        Objects.equals(this.databaseName, targetRestoreInfo.databaseName) &&
        Objects.equals(this.overwriteOption, targetRestoreInfo.overwriteOption) &&
        Objects.equals(this.targetDirectoryMapping, targetRestoreInfo.targetDirectoryMapping);
  }

  @Override
  public int hashCode() {
    return Objects.hash(containerId, databaseName, overwriteOption, targetDirectoryMapping);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TargetRestoreInfo {\n");
    sb.append("    containerId: ").append(toIndentedString(containerId)).append("\n");
    sb.append("    databaseName: ").append(toIndentedString(databaseName)).append("\n");
    sb.append("    overwriteOption: ").append(toIndentedString(overwriteOption)).append("\n");
    sb.append("    targetDirectoryMapping: ").append(toIndentedString(targetDirectoryMapping)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("containerId");
    openapiFields.add("databaseName");
    openapiFields.add("overwriteOption");
    openapiFields.add("targetDirectoryMapping");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TargetRestoreInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TargetRestoreInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TargetRestoreInfo is not found in the empty JSON string", TargetRestoreInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TargetRestoreInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TargetRestoreInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("containerId") != null && !jsonObj.get("containerId").isJsonNull()) && !jsonObj.get("containerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `containerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("containerId").toString()));
      }
      if ((jsonObj.get("databaseName") != null && !jsonObj.get("databaseName").isJsonNull()) && !jsonObj.get("databaseName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `databaseName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("databaseName").toString()));
      }
      if ((jsonObj.get("overwriteOption") != null && !jsonObj.get("overwriteOption").isJsonNull()) && !jsonObj.get("overwriteOption").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `overwriteOption` to be a primitive type in the JSON string but got `%s`", jsonObj.get("overwriteOption").toString()));
      }
      // validate the optional field `overwriteOption`
      if (jsonObj.get("overwriteOption") != null && !jsonObj.get("overwriteOption").isJsonNull()) {
        OverwriteOptionEnum.validateJsonElement(jsonObj.get("overwriteOption"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TargetRestoreInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TargetRestoreInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TargetRestoreInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TargetRestoreInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<TargetRestoreInfo>() {
           @Override
           public void write(JsonWriter out, TargetRestoreInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TargetRestoreInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TargetRestoreInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TargetRestoreInfo
   * @throws IOException if the JSON string is invalid with respect to TargetRestoreInfo
   */
  public static TargetRestoreInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TargetRestoreInfo.class);
  }

  /**
   * Convert an instance of TargetRestoreInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

