/*
 * RecoveryServicesBackupClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-12-20
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AADProperties
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:08:52.760745-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AADProperties {
  public static final String SERIALIZED_NAME_AUDIENCE = "audience";
  @SerializedName(SERIALIZED_NAME_AUDIENCE)
  private String audience;

  public static final String SERIALIZED_NAME_AUTHORITY = "authority";
  @SerializedName(SERIALIZED_NAME_AUTHORITY)
  private String authority;

  public static final String SERIALIZED_NAME_SERVICE_PRINCIPAL_CLIENT_ID = "servicePrincipalClientId";
  @SerializedName(SERIALIZED_NAME_SERVICE_PRINCIPAL_CLIENT_ID)
  private String servicePrincipalClientId;

  public static final String SERIALIZED_NAME_SERVICE_PRINCIPAL_OBJECT_ID = "servicePrincipalObjectId";
  @SerializedName(SERIALIZED_NAME_SERVICE_PRINCIPAL_OBJECT_ID)
  private String servicePrincipalObjectId;

  public static final String SERIALIZED_NAME_TENANT_ID = "tenantId";
  @SerializedName(SERIALIZED_NAME_TENANT_ID)
  private String tenantId;

  public AADProperties() {
  }

  public AADProperties audience(String audience) {
    this.audience = audience;
    return this;
  }

  /**
   * Get audience
   * @return audience
   */
  @javax.annotation.Nullable
  public String getAudience() {
    return audience;
  }

  public void setAudience(String audience) {
    this.audience = audience;
  }


  public AADProperties authority(String authority) {
    this.authority = authority;
    return this;
  }

  /**
   * Get authority
   * @return authority
   */
  @javax.annotation.Nullable
  public String getAuthority() {
    return authority;
  }

  public void setAuthority(String authority) {
    this.authority = authority;
  }


  public AADProperties servicePrincipalClientId(String servicePrincipalClientId) {
    this.servicePrincipalClientId = servicePrincipalClientId;
    return this;
  }

  /**
   * Get servicePrincipalClientId
   * @return servicePrincipalClientId
   */
  @javax.annotation.Nullable
  public String getServicePrincipalClientId() {
    return servicePrincipalClientId;
  }

  public void setServicePrincipalClientId(String servicePrincipalClientId) {
    this.servicePrincipalClientId = servicePrincipalClientId;
  }


  public AADProperties servicePrincipalObjectId(String servicePrincipalObjectId) {
    this.servicePrincipalObjectId = servicePrincipalObjectId;
    return this;
  }

  /**
   * Get servicePrincipalObjectId
   * @return servicePrincipalObjectId
   */
  @javax.annotation.Nullable
  public String getServicePrincipalObjectId() {
    return servicePrincipalObjectId;
  }

  public void setServicePrincipalObjectId(String servicePrincipalObjectId) {
    this.servicePrincipalObjectId = servicePrincipalObjectId;
  }


  public AADProperties tenantId(String tenantId) {
    this.tenantId = tenantId;
    return this;
  }

  /**
   * Get tenantId
   * @return tenantId
   */
  @javax.annotation.Nullable
  public String getTenantId() {
    return tenantId;
  }

  public void setTenantId(String tenantId) {
    this.tenantId = tenantId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AADProperties aaDProperties = (AADProperties) o;
    return Objects.equals(this.audience, aaDProperties.audience) &&
        Objects.equals(this.authority, aaDProperties.authority) &&
        Objects.equals(this.servicePrincipalClientId, aaDProperties.servicePrincipalClientId) &&
        Objects.equals(this.servicePrincipalObjectId, aaDProperties.servicePrincipalObjectId) &&
        Objects.equals(this.tenantId, aaDProperties.tenantId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(audience, authority, servicePrincipalClientId, servicePrincipalObjectId, tenantId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AADProperties {\n");
    sb.append("    audience: ").append(toIndentedString(audience)).append("\n");
    sb.append("    authority: ").append(toIndentedString(authority)).append("\n");
    sb.append("    servicePrincipalClientId: ").append(toIndentedString(servicePrincipalClientId)).append("\n");
    sb.append("    servicePrincipalObjectId: ").append(toIndentedString(servicePrincipalObjectId)).append("\n");
    sb.append("    tenantId: ").append(toIndentedString(tenantId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("audience");
    openapiFields.add("authority");
    openapiFields.add("servicePrincipalClientId");
    openapiFields.add("servicePrincipalObjectId");
    openapiFields.add("tenantId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AADProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AADProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AADProperties is not found in the empty JSON string", AADProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AADProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AADProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("audience") != null && !jsonObj.get("audience").isJsonNull()) && !jsonObj.get("audience").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `audience` to be a primitive type in the JSON string but got `%s`", jsonObj.get("audience").toString()));
      }
      if ((jsonObj.get("authority") != null && !jsonObj.get("authority").isJsonNull()) && !jsonObj.get("authority").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authority` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authority").toString()));
      }
      if ((jsonObj.get("servicePrincipalClientId") != null && !jsonObj.get("servicePrincipalClientId").isJsonNull()) && !jsonObj.get("servicePrincipalClientId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `servicePrincipalClientId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("servicePrincipalClientId").toString()));
      }
      if ((jsonObj.get("servicePrincipalObjectId") != null && !jsonObj.get("servicePrincipalObjectId").isJsonNull()) && !jsonObj.get("servicePrincipalObjectId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `servicePrincipalObjectId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("servicePrincipalObjectId").toString()));
      }
      if ((jsonObj.get("tenantId") != null && !jsonObj.get("tenantId").isJsonNull()) && !jsonObj.get("tenantId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tenantId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tenantId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AADProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AADProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AADProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AADProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<AADProperties>() {
           @Override
           public void write(JsonWriter out, AADProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AADProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AADProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AADProperties
   * @throws IOException if the JSON string is invalid with respect to AADProperties
   */
  public static AADProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AADProperties.class);
  }

  /**
   * Convert an instance of AADProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

