/*
 * RecoveryServicesBackupClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-12-20
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.ProtectedItem;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Base class for backup items.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:08:52.760745-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GenericProtectedItem extends ProtectedItem {
  public static final String SERIALIZED_NAME_FABRIC_NAME = "fabricName";
  @SerializedName(SERIALIZED_NAME_FABRIC_NAME)
  private String fabricName;

  public static final String SERIALIZED_NAME_FRIENDLY_NAME = "friendlyName";
  @SerializedName(SERIALIZED_NAME_FRIENDLY_NAME)
  private String friendlyName;

  public static final String SERIALIZED_NAME_POLICY_STATE = "policyState";
  @SerializedName(SERIALIZED_NAME_POLICY_STATE)
  private String policyState;

  public static final String SERIALIZED_NAME_PROTECTED_ITEM_ID = "protectedItemId";
  @SerializedName(SERIALIZED_NAME_PROTECTED_ITEM_ID)
  private Long protectedItemId;

  /**
   * Backup state of this backup item.
   */
  @JsonAdapter(ProtectionStateEnum.Adapter.class)
  public enum ProtectionStateEnum {
    INVALID("Invalid"),
    
    IR_PENDING("IRPending"),
    
    PROTECTED("Protected"),
    
    PROTECTION_ERROR("ProtectionError"),
    
    PROTECTION_STOPPED("ProtectionStopped"),
    
    PROTECTION_PAUSED("ProtectionPaused");

    private String value;

    ProtectionStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProtectionStateEnum fromValue(String value) {
      for (ProtectionStateEnum b : ProtectionStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProtectionStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProtectionStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProtectionStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProtectionStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProtectionStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROTECTION_STATE = "protectionState";
  @SerializedName(SERIALIZED_NAME_PROTECTION_STATE)
  private ProtectionStateEnum protectionState;

  public static final String SERIALIZED_NAME_SOURCE_ASSOCIATIONS = "sourceAssociations";
  @SerializedName(SERIALIZED_NAME_SOURCE_ASSOCIATIONS)
  private Map<String, String> sourceAssociations = new HashMap<>();

  public GenericProtectedItem() {
    this.protectedItemType = this.getClass().getSimpleName();
  }

  public GenericProtectedItem fabricName(String fabricName) {
    this.fabricName = fabricName;
    return this;
  }

  /**
   * Name of this backup item&#39;s fabric.
   * @return fabricName
   */
  @javax.annotation.Nullable
  public String getFabricName() {
    return fabricName;
  }

  public void setFabricName(String fabricName) {
    this.fabricName = fabricName;
  }


  public GenericProtectedItem friendlyName(String friendlyName) {
    this.friendlyName = friendlyName;
    return this;
  }

  /**
   * Friendly name of the container.
   * @return friendlyName
   */
  @javax.annotation.Nullable
  public String getFriendlyName() {
    return friendlyName;
  }

  public void setFriendlyName(String friendlyName) {
    this.friendlyName = friendlyName;
  }


  public GenericProtectedItem policyState(String policyState) {
    this.policyState = policyState;
    return this;
  }

  /**
   * Indicates consistency of policy object and policy applied to this backup item.
   * @return policyState
   */
  @javax.annotation.Nullable
  public String getPolicyState() {
    return policyState;
  }

  public void setPolicyState(String policyState) {
    this.policyState = policyState;
  }


  public GenericProtectedItem protectedItemId(Long protectedItemId) {
    this.protectedItemId = protectedItemId;
    return this;
  }

  /**
   * Data Plane Service ID of the protected item.
   * @return protectedItemId
   */
  @javax.annotation.Nullable
  public Long getProtectedItemId() {
    return protectedItemId;
  }

  public void setProtectedItemId(Long protectedItemId) {
    this.protectedItemId = protectedItemId;
  }


  public GenericProtectedItem protectionState(ProtectionStateEnum protectionState) {
    this.protectionState = protectionState;
    return this;
  }

  /**
   * Backup state of this backup item.
   * @return protectionState
   */
  @javax.annotation.Nullable
  public ProtectionStateEnum getProtectionState() {
    return protectionState;
  }

  public void setProtectionState(ProtectionStateEnum protectionState) {
    this.protectionState = protectionState;
  }


  public GenericProtectedItem sourceAssociations(Map<String, String> sourceAssociations) {
    this.sourceAssociations = sourceAssociations;
    return this;
  }

  public GenericProtectedItem putSourceAssociationsItem(String key, String sourceAssociationsItem) {
    if (this.sourceAssociations == null) {
      this.sourceAssociations = new HashMap<>();
    }
    this.sourceAssociations.put(key, sourceAssociationsItem);
    return this;
  }

  /**
   * Loosely coupled (type, value) associations (example - parent of a protected item)
   * @return sourceAssociations
   */
  @javax.annotation.Nullable
  public Map<String, String> getSourceAssociations() {
    return sourceAssociations;
  }

  public void setSourceAssociations(Map<String, String> sourceAssociations) {
    this.sourceAssociations = sourceAssociations;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GenericProtectedItem genericProtectedItem = (GenericProtectedItem) o;
    return Objects.equals(this.fabricName, genericProtectedItem.fabricName) &&
        Objects.equals(this.friendlyName, genericProtectedItem.friendlyName) &&
        Objects.equals(this.policyState, genericProtectedItem.policyState) &&
        Objects.equals(this.protectedItemId, genericProtectedItem.protectedItemId) &&
        Objects.equals(this.protectionState, genericProtectedItem.protectionState) &&
        Objects.equals(this.sourceAssociations, genericProtectedItem.sourceAssociations) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fabricName, friendlyName, policyState, protectedItemId, protectionState, sourceAssociations, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GenericProtectedItem {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    fabricName: ").append(toIndentedString(fabricName)).append("\n");
    sb.append("    friendlyName: ").append(toIndentedString(friendlyName)).append("\n");
    sb.append("    policyState: ").append(toIndentedString(policyState)).append("\n");
    sb.append("    protectedItemId: ").append(toIndentedString(protectedItemId)).append("\n");
    sb.append("    protectionState: ").append(toIndentedString(protectionState)).append("\n");
    sb.append("    sourceAssociations: ").append(toIndentedString(sourceAssociations)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("backupManagementType");
    openapiFields.add("backupSetName");
    openapiFields.add("containerName");
    openapiFields.add("createMode");
    openapiFields.add("deferredDeleteTimeInUTC");
    openapiFields.add("deferredDeleteTimeRemaining");
    openapiFields.add("isDeferredDeleteScheduleUpcoming");
    openapiFields.add("isRehydrate");
    openapiFields.add("isScheduledForDeferredDelete");
    openapiFields.add("lastRecoveryPoint");
    openapiFields.add("policyId");
    openapiFields.add("protectedItemType");
    openapiFields.add("sourceResourceId");
    openapiFields.add("workloadType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("protectedItemType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GenericProtectedItem
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GenericProtectedItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GenericProtectedItem is not found in the empty JSON string", GenericProtectedItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GenericProtectedItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GenericProtectedItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GenericProtectedItem.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GenericProtectedItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GenericProtectedItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GenericProtectedItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GenericProtectedItem.class));

       return (TypeAdapter<T>) new TypeAdapter<GenericProtectedItem>() {
           @Override
           public void write(JsonWriter out, GenericProtectedItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GenericProtectedItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GenericProtectedItem given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GenericProtectedItem
   * @throws IOException if the JSON string is invalid with respect to GenericProtectedItem
   */
  public static GenericProtectedItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GenericProtectedItem.class);
  }

  /**
   * Convert an instance of GenericProtectedItem to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

