/*
 * RecoveryServicesBackupClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-12-20
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.AzureWorkloadRestoreRequest;
import org.openapitools.client.model.SQLDataDirectoryMapping;
import org.openapitools.client.model.TargetRestoreInfo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AzureWorkload SQL -specific restore. Specifically for full/diff restore
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:08:52.760745-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AzureWorkloadSQLRestoreRequest extends AzureWorkloadRestoreRequest {
  public static final String SERIALIZED_NAME_ALTERNATE_DIRECTORY_PATHS = "alternateDirectoryPaths";
  @SerializedName(SERIALIZED_NAME_ALTERNATE_DIRECTORY_PATHS)
  private List<SQLDataDirectoryMapping> alternateDirectoryPaths = new ArrayList<>();

  public static final String SERIALIZED_NAME_IS_NON_RECOVERABLE = "isNonRecoverable";
  @SerializedName(SERIALIZED_NAME_IS_NON_RECOVERABLE)
  private Boolean isNonRecoverable;

  public static final String SERIALIZED_NAME_SHOULD_USE_ALTERNATE_TARGET_LOCATION = "shouldUseAlternateTargetLocation";
  @SerializedName(SERIALIZED_NAME_SHOULD_USE_ALTERNATE_TARGET_LOCATION)
  private Boolean shouldUseAlternateTargetLocation;

  public AzureWorkloadSQLRestoreRequest() {
    this.objectType = this.getClass().getSimpleName();
  }

  public AzureWorkloadSQLRestoreRequest alternateDirectoryPaths(List<SQLDataDirectoryMapping> alternateDirectoryPaths) {
    this.alternateDirectoryPaths = alternateDirectoryPaths;
    return this;
  }

  public AzureWorkloadSQLRestoreRequest addAlternateDirectoryPathsItem(SQLDataDirectoryMapping alternateDirectoryPathsItem) {
    if (this.alternateDirectoryPaths == null) {
      this.alternateDirectoryPaths = new ArrayList<>();
    }
    this.alternateDirectoryPaths.add(alternateDirectoryPathsItem);
    return this;
  }

  /**
   * Data directory details
   * @return alternateDirectoryPaths
   */
  @javax.annotation.Nullable
  public List<SQLDataDirectoryMapping> getAlternateDirectoryPaths() {
    return alternateDirectoryPaths;
  }

  public void setAlternateDirectoryPaths(List<SQLDataDirectoryMapping> alternateDirectoryPaths) {
    this.alternateDirectoryPaths = alternateDirectoryPaths;
  }


  public AzureWorkloadSQLRestoreRequest isNonRecoverable(Boolean isNonRecoverable) {
    this.isNonRecoverable = isNonRecoverable;
    return this;
  }

  /**
   * SQL specific property where user can chose to set no-recovery when restore operation is tried
   * @return isNonRecoverable
   */
  @javax.annotation.Nullable
  public Boolean getIsNonRecoverable() {
    return isNonRecoverable;
  }

  public void setIsNonRecoverable(Boolean isNonRecoverable) {
    this.isNonRecoverable = isNonRecoverable;
  }


  public AzureWorkloadSQLRestoreRequest shouldUseAlternateTargetLocation(Boolean shouldUseAlternateTargetLocation) {
    this.shouldUseAlternateTargetLocation = shouldUseAlternateTargetLocation;
    return this;
  }

  /**
   * Default option set to true. If this is set to false, alternate data directory must be provided
   * @return shouldUseAlternateTargetLocation
   */
  @javax.annotation.Nullable
  public Boolean getShouldUseAlternateTargetLocation() {
    return shouldUseAlternateTargetLocation;
  }

  public void setShouldUseAlternateTargetLocation(Boolean shouldUseAlternateTargetLocation) {
    this.shouldUseAlternateTargetLocation = shouldUseAlternateTargetLocation;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AzureWorkloadSQLRestoreRequest azureWorkloadSQLRestoreRequest = (AzureWorkloadSQLRestoreRequest) o;
    return Objects.equals(this.alternateDirectoryPaths, azureWorkloadSQLRestoreRequest.alternateDirectoryPaths) &&
        Objects.equals(this.isNonRecoverable, azureWorkloadSQLRestoreRequest.isNonRecoverable) &&
        Objects.equals(this.shouldUseAlternateTargetLocation, azureWorkloadSQLRestoreRequest.shouldUseAlternateTargetLocation) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(alternateDirectoryPaths, isNonRecoverable, shouldUseAlternateTargetLocation, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AzureWorkloadSQLRestoreRequest {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    alternateDirectoryPaths: ").append(toIndentedString(alternateDirectoryPaths)).append("\n");
    sb.append("    isNonRecoverable: ").append(toIndentedString(isNonRecoverable)).append("\n");
    sb.append("    shouldUseAlternateTargetLocation: ").append(toIndentedString(shouldUseAlternateTargetLocation)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("propertyBag");
    openapiFields.add("recoveryMode");
    openapiFields.add("recoveryType");
    openapiFields.add("sourceResourceId");
    openapiFields.add("targetInfo");
    openapiFields.add("objectType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("objectType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AzureWorkloadSQLRestoreRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AzureWorkloadSQLRestoreRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AzureWorkloadSQLRestoreRequest is not found in the empty JSON string", AzureWorkloadSQLRestoreRequest.openapiRequiredFields.toString()));
        }
      }

      String discriminatorValue = jsonElement.getAsJsonObject().get("objectType").getAsString();
      switch (discriminatorValue) {
        case "AzureWorkloadSQLPointInTimeRestoreRequest":
          AzureWorkloadSQLPointInTimeRestoreRequest.validateJsonElement(jsonElement);
          break;
        default:
          throw new IllegalArgumentException(String.format("The value of the `objectType` field `%s` does not match any key defined in the discriminator's mapping.", discriminatorValue));
      }
  }


  /**
   * Create an instance of AzureWorkloadSQLRestoreRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AzureWorkloadSQLRestoreRequest
   * @throws IOException if the JSON string is invalid with respect to AzureWorkloadSQLRestoreRequest
   */
  public static AzureWorkloadSQLRestoreRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AzureWorkloadSQLRestoreRequest.class);
  }

  /**
   * Convert an instance of AzureWorkloadSQLRestoreRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

