/*
 * RecoveryServicesBackupClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-12-20
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Filters to list backup items.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:08:52.760745-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ProtectedItemQueryObject {
  public static final String SERIALIZED_NAME_BACKUP_ENGINE_NAME = "backupEngineName";
  @SerializedName(SERIALIZED_NAME_BACKUP_ENGINE_NAME)
  private String backupEngineName;

  /**
   * Backup management type for the backed up item.
   */
  @JsonAdapter(BackupManagementTypeEnum.Adapter.class)
  public enum BackupManagementTypeEnum {
    INVALID("Invalid"),
    
    AZURE_IAAS_VM("AzureIaasVM"),
    
    MAB("MAB"),
    
    DPM("DPM"),
    
    AZURE_BACKUP_SERVER("AzureBackupServer"),
    
    AZURE_SQL("AzureSql"),
    
    AZURE_STORAGE("AzureStorage"),
    
    AZURE_WORKLOAD("AzureWorkload"),
    
    DEFAULT_BACKUP("DefaultBackup");

    private String value;

    BackupManagementTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BackupManagementTypeEnum fromValue(String value) {
      for (BackupManagementTypeEnum b : BackupManagementTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BackupManagementTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BackupManagementTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BackupManagementTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BackupManagementTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      BackupManagementTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_BACKUP_MANAGEMENT_TYPE = "backupManagementType";
  @SerializedName(SERIALIZED_NAME_BACKUP_MANAGEMENT_TYPE)
  private BackupManagementTypeEnum backupManagementType;

  public static final String SERIALIZED_NAME_BACKUP_SET_NAME = "backupSetName";
  @SerializedName(SERIALIZED_NAME_BACKUP_SET_NAME)
  private String backupSetName;

  public static final String SERIALIZED_NAME_CONTAINER_NAME = "containerName";
  @SerializedName(SERIALIZED_NAME_CONTAINER_NAME)
  private String containerName;

  public static final String SERIALIZED_NAME_FABRIC_NAME = "fabricName";
  @SerializedName(SERIALIZED_NAME_FABRIC_NAME)
  private String fabricName;

  public static final String SERIALIZED_NAME_FRIENDLY_NAME = "friendlyName";
  @SerializedName(SERIALIZED_NAME_FRIENDLY_NAME)
  private String friendlyName;

  /**
   * Health State for the backed up item.
   */
  @JsonAdapter(HealthStateEnum.Adapter.class)
  public enum HealthStateEnum {
    PASSED("Passed"),
    
    ACTION_REQUIRED("ActionRequired"),
    
    ACTION_SUGGESTED("ActionSuggested"),
    
    INVALID("Invalid");

    private String value;

    HealthStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static HealthStateEnum fromValue(String value) {
      for (HealthStateEnum b : HealthStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<HealthStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final HealthStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public HealthStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return HealthStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      HealthStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_HEALTH_STATE = "healthState";
  @SerializedName(SERIALIZED_NAME_HEALTH_STATE)
  private HealthStateEnum healthState;

  /**
   * Type of workload this item represents.
   */
  @JsonAdapter(ItemTypeEnum.Adapter.class)
  public enum ItemTypeEnum {
    INVALID("Invalid"),
    
    VM("VM"),
    
    FILE_FOLDER("FileFolder"),
    
    AZURE_SQL_DB("AzureSqlDb"),
    
    SQLDB("SQLDB"),
    
    EXCHANGE("Exchange"),
    
    SHAREPOINT("Sharepoint"),
    
    V_MWARE_VM("VMwareVM"),
    
    SYSTEM_STATE("SystemState"),
    
    CLIENT("Client"),
    
    GENERIC_DATA_SOURCE("GenericDataSource"),
    
    SQL_DATA_BASE("SQLDataBase"),
    
    AZURE_FILE_SHARE("AzureFileShare"),
    
    SAP_HANA_DATABASE("SAPHanaDatabase"),
    
    SAP_ASE_DATABASE("SAPAseDatabase");

    private String value;

    ItemTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ItemTypeEnum fromValue(String value) {
      for (ItemTypeEnum b : ItemTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ItemTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ItemTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ItemTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ItemTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ItemTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ITEM_TYPE = "itemType";
  @SerializedName(SERIALIZED_NAME_ITEM_TYPE)
  private ItemTypeEnum itemType;

  public static final String SERIALIZED_NAME_POLICY_NAME = "policyName";
  @SerializedName(SERIALIZED_NAME_POLICY_NAME)
  private String policyName;

  public ProtectedItemQueryObject() {
  }

  public ProtectedItemQueryObject backupEngineName(String backupEngineName) {
    this.backupEngineName = backupEngineName;
    return this;
  }

  /**
   * Backup Engine name
   * @return backupEngineName
   */
  @javax.annotation.Nullable
  public String getBackupEngineName() {
    return backupEngineName;
  }

  public void setBackupEngineName(String backupEngineName) {
    this.backupEngineName = backupEngineName;
  }


  public ProtectedItemQueryObject backupManagementType(BackupManagementTypeEnum backupManagementType) {
    this.backupManagementType = backupManagementType;
    return this;
  }

  /**
   * Backup management type for the backed up item.
   * @return backupManagementType
   */
  @javax.annotation.Nullable
  public BackupManagementTypeEnum getBackupManagementType() {
    return backupManagementType;
  }

  public void setBackupManagementType(BackupManagementTypeEnum backupManagementType) {
    this.backupManagementType = backupManagementType;
  }


  public ProtectedItemQueryObject backupSetName(String backupSetName) {
    this.backupSetName = backupSetName;
    return this;
  }

  /**
   * Name of the backup set.
   * @return backupSetName
   */
  @javax.annotation.Nullable
  public String getBackupSetName() {
    return backupSetName;
  }

  public void setBackupSetName(String backupSetName) {
    this.backupSetName = backupSetName;
  }


  public ProtectedItemQueryObject containerName(String containerName) {
    this.containerName = containerName;
    return this;
  }

  /**
   * Name of the container.
   * @return containerName
   */
  @javax.annotation.Nullable
  public String getContainerName() {
    return containerName;
  }

  public void setContainerName(String containerName) {
    this.containerName = containerName;
  }


  public ProtectedItemQueryObject fabricName(String fabricName) {
    this.fabricName = fabricName;
    return this;
  }

  /**
   * Name of the fabric.
   * @return fabricName
   */
  @javax.annotation.Nullable
  public String getFabricName() {
    return fabricName;
  }

  public void setFabricName(String fabricName) {
    this.fabricName = fabricName;
  }


  public ProtectedItemQueryObject friendlyName(String friendlyName) {
    this.friendlyName = friendlyName;
    return this;
  }

  /**
   * Friendly name of protected item
   * @return friendlyName
   */
  @javax.annotation.Nullable
  public String getFriendlyName() {
    return friendlyName;
  }

  public void setFriendlyName(String friendlyName) {
    this.friendlyName = friendlyName;
  }


  public ProtectedItemQueryObject healthState(HealthStateEnum healthState) {
    this.healthState = healthState;
    return this;
  }

  /**
   * Health State for the backed up item.
   * @return healthState
   */
  @javax.annotation.Nullable
  public HealthStateEnum getHealthState() {
    return healthState;
  }

  public void setHealthState(HealthStateEnum healthState) {
    this.healthState = healthState;
  }


  public ProtectedItemQueryObject itemType(ItemTypeEnum itemType) {
    this.itemType = itemType;
    return this;
  }

  /**
   * Type of workload this item represents.
   * @return itemType
   */
  @javax.annotation.Nullable
  public ItemTypeEnum getItemType() {
    return itemType;
  }

  public void setItemType(ItemTypeEnum itemType) {
    this.itemType = itemType;
  }


  public ProtectedItemQueryObject policyName(String policyName) {
    this.policyName = policyName;
    return this;
  }

  /**
   * Backup policy name associated with the backup item.
   * @return policyName
   */
  @javax.annotation.Nullable
  public String getPolicyName() {
    return policyName;
  }

  public void setPolicyName(String policyName) {
    this.policyName = policyName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProtectedItemQueryObject protectedItemQueryObject = (ProtectedItemQueryObject) o;
    return Objects.equals(this.backupEngineName, protectedItemQueryObject.backupEngineName) &&
        Objects.equals(this.backupManagementType, protectedItemQueryObject.backupManagementType) &&
        Objects.equals(this.backupSetName, protectedItemQueryObject.backupSetName) &&
        Objects.equals(this.containerName, protectedItemQueryObject.containerName) &&
        Objects.equals(this.fabricName, protectedItemQueryObject.fabricName) &&
        Objects.equals(this.friendlyName, protectedItemQueryObject.friendlyName) &&
        Objects.equals(this.healthState, protectedItemQueryObject.healthState) &&
        Objects.equals(this.itemType, protectedItemQueryObject.itemType) &&
        Objects.equals(this.policyName, protectedItemQueryObject.policyName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(backupEngineName, backupManagementType, backupSetName, containerName, fabricName, friendlyName, healthState, itemType, policyName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProtectedItemQueryObject {\n");
    sb.append("    backupEngineName: ").append(toIndentedString(backupEngineName)).append("\n");
    sb.append("    backupManagementType: ").append(toIndentedString(backupManagementType)).append("\n");
    sb.append("    backupSetName: ").append(toIndentedString(backupSetName)).append("\n");
    sb.append("    containerName: ").append(toIndentedString(containerName)).append("\n");
    sb.append("    fabricName: ").append(toIndentedString(fabricName)).append("\n");
    sb.append("    friendlyName: ").append(toIndentedString(friendlyName)).append("\n");
    sb.append("    healthState: ").append(toIndentedString(healthState)).append("\n");
    sb.append("    itemType: ").append(toIndentedString(itemType)).append("\n");
    sb.append("    policyName: ").append(toIndentedString(policyName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("backupEngineName");
    openapiFields.add("backupManagementType");
    openapiFields.add("backupSetName");
    openapiFields.add("containerName");
    openapiFields.add("fabricName");
    openapiFields.add("friendlyName");
    openapiFields.add("healthState");
    openapiFields.add("itemType");
    openapiFields.add("policyName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProtectedItemQueryObject
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProtectedItemQueryObject.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProtectedItemQueryObject is not found in the empty JSON string", ProtectedItemQueryObject.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProtectedItemQueryObject.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProtectedItemQueryObject` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("backupEngineName") != null && !jsonObj.get("backupEngineName").isJsonNull()) && !jsonObj.get("backupEngineName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `backupEngineName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("backupEngineName").toString()));
      }
      if ((jsonObj.get("backupManagementType") != null && !jsonObj.get("backupManagementType").isJsonNull()) && !jsonObj.get("backupManagementType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `backupManagementType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("backupManagementType").toString()));
      }
      // validate the optional field `backupManagementType`
      if (jsonObj.get("backupManagementType") != null && !jsonObj.get("backupManagementType").isJsonNull()) {
        BackupManagementTypeEnum.validateJsonElement(jsonObj.get("backupManagementType"));
      }
      if ((jsonObj.get("backupSetName") != null && !jsonObj.get("backupSetName").isJsonNull()) && !jsonObj.get("backupSetName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `backupSetName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("backupSetName").toString()));
      }
      if ((jsonObj.get("containerName") != null && !jsonObj.get("containerName").isJsonNull()) && !jsonObj.get("containerName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `containerName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("containerName").toString()));
      }
      if ((jsonObj.get("fabricName") != null && !jsonObj.get("fabricName").isJsonNull()) && !jsonObj.get("fabricName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fabricName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fabricName").toString()));
      }
      if ((jsonObj.get("friendlyName") != null && !jsonObj.get("friendlyName").isJsonNull()) && !jsonObj.get("friendlyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `friendlyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("friendlyName").toString()));
      }
      if ((jsonObj.get("healthState") != null && !jsonObj.get("healthState").isJsonNull()) && !jsonObj.get("healthState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `healthState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("healthState").toString()));
      }
      // validate the optional field `healthState`
      if (jsonObj.get("healthState") != null && !jsonObj.get("healthState").isJsonNull()) {
        HealthStateEnum.validateJsonElement(jsonObj.get("healthState"));
      }
      if ((jsonObj.get("itemType") != null && !jsonObj.get("itemType").isJsonNull()) && !jsonObj.get("itemType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `itemType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("itemType").toString()));
      }
      // validate the optional field `itemType`
      if (jsonObj.get("itemType") != null && !jsonObj.get("itemType").isJsonNull()) {
        ItemTypeEnum.validateJsonElement(jsonObj.get("itemType"));
      }
      if ((jsonObj.get("policyName") != null && !jsonObj.get("policyName").isJsonNull()) && !jsonObj.get("policyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `policyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("policyName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProtectedItemQueryObject.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProtectedItemQueryObject' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProtectedItemQueryObject> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProtectedItemQueryObject.class));

       return (TypeAdapter<T>) new TypeAdapter<ProtectedItemQueryObject>() {
           @Override
           public void write(JsonWriter out, ProtectedItemQueryObject value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProtectedItemQueryObject read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ProtectedItemQueryObject given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProtectedItemQueryObject
   * @throws IOException if the JSON string is invalid with respect to ProtectedItemQueryObject
   */
  public static ProtectedItemQueryObject fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProtectedItemQueryObject.class);
  }

  /**
   * Convert an instance of ProtectedItemQueryObject to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

