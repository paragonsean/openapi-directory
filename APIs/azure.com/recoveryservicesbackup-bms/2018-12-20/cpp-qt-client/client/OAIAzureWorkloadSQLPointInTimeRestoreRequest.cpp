/**
 * RecoveryServicesBackupClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-12-20
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAzureWorkloadSQLPointInTimeRestoreRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAzureWorkloadSQLPointInTimeRestoreRequest::OAIAzureWorkloadSQLPointInTimeRestoreRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAzureWorkloadSQLPointInTimeRestoreRequest::OAIAzureWorkloadSQLPointInTimeRestoreRequest() {
    this->initializeModel();
}

OAIAzureWorkloadSQLPointInTimeRestoreRequest::~OAIAzureWorkloadSQLPointInTimeRestoreRequest() {}

void OAIAzureWorkloadSQLPointInTimeRestoreRequest::initializeModel() {

    m_point_in_time_isSet = false;
    m_point_in_time_isValid = false;

    m_alternate_directory_paths_isSet = false;
    m_alternate_directory_paths_isValid = false;

    m_is_non_recoverable_isSet = false;
    m_is_non_recoverable_isValid = false;

    m_should_use_alternate_target_location_isSet = false;
    m_should_use_alternate_target_location_isValid = false;

    m_property_bag_isSet = false;
    m_property_bag_isValid = false;

    m_recovery_mode_isSet = false;
    m_recovery_mode_isValid = false;

    m_recovery_type_isSet = false;
    m_recovery_type_isValid = false;

    m_source_resource_id_isSet = false;
    m_source_resource_id_isValid = false;

    m_target_info_isSet = false;
    m_target_info_isValid = false;

    m_object_type_isSet = false;
    m_object_type_isValid = false;
}

void OAIAzureWorkloadSQLPointInTimeRestoreRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAzureWorkloadSQLPointInTimeRestoreRequest::fromJsonObject(QJsonObject json) {

    m_point_in_time_isValid = ::OpenAPI::fromJsonValue(m_point_in_time, json[QString("pointInTime")]);
    m_point_in_time_isSet = !json[QString("pointInTime")].isNull() && m_point_in_time_isValid;

    m_alternate_directory_paths_isValid = ::OpenAPI::fromJsonValue(m_alternate_directory_paths, json[QString("alternateDirectoryPaths")]);
    m_alternate_directory_paths_isSet = !json[QString("alternateDirectoryPaths")].isNull() && m_alternate_directory_paths_isValid;

    m_is_non_recoverable_isValid = ::OpenAPI::fromJsonValue(m_is_non_recoverable, json[QString("isNonRecoverable")]);
    m_is_non_recoverable_isSet = !json[QString("isNonRecoverable")].isNull() && m_is_non_recoverable_isValid;

    m_should_use_alternate_target_location_isValid = ::OpenAPI::fromJsonValue(m_should_use_alternate_target_location, json[QString("shouldUseAlternateTargetLocation")]);
    m_should_use_alternate_target_location_isSet = !json[QString("shouldUseAlternateTargetLocation")].isNull() && m_should_use_alternate_target_location_isValid;

    m_property_bag_isValid = ::OpenAPI::fromJsonValue(m_property_bag, json[QString("propertyBag")]);
    m_property_bag_isSet = !json[QString("propertyBag")].isNull() && m_property_bag_isValid;

    m_recovery_mode_isValid = ::OpenAPI::fromJsonValue(m_recovery_mode, json[QString("recoveryMode")]);
    m_recovery_mode_isSet = !json[QString("recoveryMode")].isNull() && m_recovery_mode_isValid;

    m_recovery_type_isValid = ::OpenAPI::fromJsonValue(m_recovery_type, json[QString("recoveryType")]);
    m_recovery_type_isSet = !json[QString("recoveryType")].isNull() && m_recovery_type_isValid;

    m_source_resource_id_isValid = ::OpenAPI::fromJsonValue(m_source_resource_id, json[QString("sourceResourceId")]);
    m_source_resource_id_isSet = !json[QString("sourceResourceId")].isNull() && m_source_resource_id_isValid;

    m_target_info_isValid = ::OpenAPI::fromJsonValue(m_target_info, json[QString("targetInfo")]);
    m_target_info_isSet = !json[QString("targetInfo")].isNull() && m_target_info_isValid;

    m_object_type_isValid = ::OpenAPI::fromJsonValue(m_object_type, json[QString("objectType")]);
    m_object_type_isSet = !json[QString("objectType")].isNull() && m_object_type_isValid;
}

QString OAIAzureWorkloadSQLPointInTimeRestoreRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAzureWorkloadSQLPointInTimeRestoreRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_point_in_time_isSet) {
        obj.insert(QString("pointInTime"), ::OpenAPI::toJsonValue(m_point_in_time));
    }
    if (m_alternate_directory_paths.size() > 0) {
        obj.insert(QString("alternateDirectoryPaths"), ::OpenAPI::toJsonValue(m_alternate_directory_paths));
    }
    if (m_is_non_recoverable_isSet) {
        obj.insert(QString("isNonRecoverable"), ::OpenAPI::toJsonValue(m_is_non_recoverable));
    }
    if (m_should_use_alternate_target_location_isSet) {
        obj.insert(QString("shouldUseAlternateTargetLocation"), ::OpenAPI::toJsonValue(m_should_use_alternate_target_location));
    }
    if (m_property_bag.size() > 0) {
        obj.insert(QString("propertyBag"), ::OpenAPI::toJsonValue(m_property_bag));
    }
    if (m_recovery_mode_isSet) {
        obj.insert(QString("recoveryMode"), ::OpenAPI::toJsonValue(m_recovery_mode));
    }
    if (m_recovery_type_isSet) {
        obj.insert(QString("recoveryType"), ::OpenAPI::toJsonValue(m_recovery_type));
    }
    if (m_source_resource_id_isSet) {
        obj.insert(QString("sourceResourceId"), ::OpenAPI::toJsonValue(m_source_resource_id));
    }
    if (m_target_info.isSet()) {
        obj.insert(QString("targetInfo"), ::OpenAPI::toJsonValue(m_target_info));
    }
    if (m_object_type_isSet) {
        obj.insert(QString("objectType"), ::OpenAPI::toJsonValue(m_object_type));
    }
    return obj;
}

QDateTime OAIAzureWorkloadSQLPointInTimeRestoreRequest::getPointInTime() const {
    return m_point_in_time;
}
void OAIAzureWorkloadSQLPointInTimeRestoreRequest::setPointInTime(const QDateTime &point_in_time) {
    m_point_in_time = point_in_time;
    m_point_in_time_isSet = true;
}

bool OAIAzureWorkloadSQLPointInTimeRestoreRequest::is_point_in_time_Set() const{
    return m_point_in_time_isSet;
}

bool OAIAzureWorkloadSQLPointInTimeRestoreRequest::is_point_in_time_Valid() const{
    return m_point_in_time_isValid;
}

QList<OAISQLDataDirectoryMapping> OAIAzureWorkloadSQLPointInTimeRestoreRequest::getAlternateDirectoryPaths() const {
    return m_alternate_directory_paths;
}
void OAIAzureWorkloadSQLPointInTimeRestoreRequest::setAlternateDirectoryPaths(const QList<OAISQLDataDirectoryMapping> &alternate_directory_paths) {
    m_alternate_directory_paths = alternate_directory_paths;
    m_alternate_directory_paths_isSet = true;
}

bool OAIAzureWorkloadSQLPointInTimeRestoreRequest::is_alternate_directory_paths_Set() const{
    return m_alternate_directory_paths_isSet;
}

bool OAIAzureWorkloadSQLPointInTimeRestoreRequest::is_alternate_directory_paths_Valid() const{
    return m_alternate_directory_paths_isValid;
}

bool OAIAzureWorkloadSQLPointInTimeRestoreRequest::isIsNonRecoverable() const {
    return m_is_non_recoverable;
}
void OAIAzureWorkloadSQLPointInTimeRestoreRequest::setIsNonRecoverable(const bool &is_non_recoverable) {
    m_is_non_recoverable = is_non_recoverable;
    m_is_non_recoverable_isSet = true;
}

bool OAIAzureWorkloadSQLPointInTimeRestoreRequest::is_is_non_recoverable_Set() const{
    return m_is_non_recoverable_isSet;
}

bool OAIAzureWorkloadSQLPointInTimeRestoreRequest::is_is_non_recoverable_Valid() const{
    return m_is_non_recoverable_isValid;
}

bool OAIAzureWorkloadSQLPointInTimeRestoreRequest::isShouldUseAlternateTargetLocation() const {
    return m_should_use_alternate_target_location;
}
void OAIAzureWorkloadSQLPointInTimeRestoreRequest::setShouldUseAlternateTargetLocation(const bool &should_use_alternate_target_location) {
    m_should_use_alternate_target_location = should_use_alternate_target_location;
    m_should_use_alternate_target_location_isSet = true;
}

bool OAIAzureWorkloadSQLPointInTimeRestoreRequest::is_should_use_alternate_target_location_Set() const{
    return m_should_use_alternate_target_location_isSet;
}

bool OAIAzureWorkloadSQLPointInTimeRestoreRequest::is_should_use_alternate_target_location_Valid() const{
    return m_should_use_alternate_target_location_isValid;
}

QMap<QString, QString> OAIAzureWorkloadSQLPointInTimeRestoreRequest::getPropertyBag() const {
    return m_property_bag;
}
void OAIAzureWorkloadSQLPointInTimeRestoreRequest::setPropertyBag(const QMap<QString, QString> &property_bag) {
    m_property_bag = property_bag;
    m_property_bag_isSet = true;
}

bool OAIAzureWorkloadSQLPointInTimeRestoreRequest::is_property_bag_Set() const{
    return m_property_bag_isSet;
}

bool OAIAzureWorkloadSQLPointInTimeRestoreRequest::is_property_bag_Valid() const{
    return m_property_bag_isValid;
}

QString OAIAzureWorkloadSQLPointInTimeRestoreRequest::getRecoveryMode() const {
    return m_recovery_mode;
}
void OAIAzureWorkloadSQLPointInTimeRestoreRequest::setRecoveryMode(const QString &recovery_mode) {
    m_recovery_mode = recovery_mode;
    m_recovery_mode_isSet = true;
}

bool OAIAzureWorkloadSQLPointInTimeRestoreRequest::is_recovery_mode_Set() const{
    return m_recovery_mode_isSet;
}

bool OAIAzureWorkloadSQLPointInTimeRestoreRequest::is_recovery_mode_Valid() const{
    return m_recovery_mode_isValid;
}

QString OAIAzureWorkloadSQLPointInTimeRestoreRequest::getRecoveryType() const {
    return m_recovery_type;
}
void OAIAzureWorkloadSQLPointInTimeRestoreRequest::setRecoveryType(const QString &recovery_type) {
    m_recovery_type = recovery_type;
    m_recovery_type_isSet = true;
}

bool OAIAzureWorkloadSQLPointInTimeRestoreRequest::is_recovery_type_Set() const{
    return m_recovery_type_isSet;
}

bool OAIAzureWorkloadSQLPointInTimeRestoreRequest::is_recovery_type_Valid() const{
    return m_recovery_type_isValid;
}

QString OAIAzureWorkloadSQLPointInTimeRestoreRequest::getSourceResourceId() const {
    return m_source_resource_id;
}
void OAIAzureWorkloadSQLPointInTimeRestoreRequest::setSourceResourceId(const QString &source_resource_id) {
    m_source_resource_id = source_resource_id;
    m_source_resource_id_isSet = true;
}

bool OAIAzureWorkloadSQLPointInTimeRestoreRequest::is_source_resource_id_Set() const{
    return m_source_resource_id_isSet;
}

bool OAIAzureWorkloadSQLPointInTimeRestoreRequest::is_source_resource_id_Valid() const{
    return m_source_resource_id_isValid;
}

OAITargetRestoreInfo OAIAzureWorkloadSQLPointInTimeRestoreRequest::getTargetInfo() const {
    return m_target_info;
}
void OAIAzureWorkloadSQLPointInTimeRestoreRequest::setTargetInfo(const OAITargetRestoreInfo &target_info) {
    m_target_info = target_info;
    m_target_info_isSet = true;
}

bool OAIAzureWorkloadSQLPointInTimeRestoreRequest::is_target_info_Set() const{
    return m_target_info_isSet;
}

bool OAIAzureWorkloadSQLPointInTimeRestoreRequest::is_target_info_Valid() const{
    return m_target_info_isValid;
}

QString OAIAzureWorkloadSQLPointInTimeRestoreRequest::getObjectType() const {
    return m_object_type;
}
void OAIAzureWorkloadSQLPointInTimeRestoreRequest::setObjectType(const QString &object_type) {
    m_object_type = object_type;
    m_object_type_isSet = true;
}

bool OAIAzureWorkloadSQLPointInTimeRestoreRequest::is_object_type_Set() const{
    return m_object_type_isSet;
}

bool OAIAzureWorkloadSQLPointInTimeRestoreRequest::is_object_type_Valid() const{
    return m_object_type_isValid;
}

bool OAIAzureWorkloadSQLPointInTimeRestoreRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_point_in_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_alternate_directory_paths.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_non_recoverable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_should_use_alternate_target_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_property_bag.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_recovery_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recovery_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAzureWorkloadSQLPointInTimeRestoreRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_object_type_isValid && true;
}

} // namespace OpenAPI
