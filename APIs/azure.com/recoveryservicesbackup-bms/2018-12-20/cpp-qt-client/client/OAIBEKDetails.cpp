/**
 * RecoveryServicesBackupClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-12-20
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBEKDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBEKDetails::OAIBEKDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBEKDetails::OAIBEKDetails() {
    this->initializeModel();
}

OAIBEKDetails::~OAIBEKDetails() {}

void OAIBEKDetails::initializeModel() {

    m_secret_data_isSet = false;
    m_secret_data_isValid = false;

    m_secret_url_isSet = false;
    m_secret_url_isValid = false;

    m_secret_vault_id_isSet = false;
    m_secret_vault_id_isValid = false;
}

void OAIBEKDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBEKDetails::fromJsonObject(QJsonObject json) {

    m_secret_data_isValid = ::OpenAPI::fromJsonValue(m_secret_data, json[QString("secretData")]);
    m_secret_data_isSet = !json[QString("secretData")].isNull() && m_secret_data_isValid;

    m_secret_url_isValid = ::OpenAPI::fromJsonValue(m_secret_url, json[QString("secretUrl")]);
    m_secret_url_isSet = !json[QString("secretUrl")].isNull() && m_secret_url_isValid;

    m_secret_vault_id_isValid = ::OpenAPI::fromJsonValue(m_secret_vault_id, json[QString("secretVaultId")]);
    m_secret_vault_id_isSet = !json[QString("secretVaultId")].isNull() && m_secret_vault_id_isValid;
}

QString OAIBEKDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBEKDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_secret_data_isSet) {
        obj.insert(QString("secretData"), ::OpenAPI::toJsonValue(m_secret_data));
    }
    if (m_secret_url_isSet) {
        obj.insert(QString("secretUrl"), ::OpenAPI::toJsonValue(m_secret_url));
    }
    if (m_secret_vault_id_isSet) {
        obj.insert(QString("secretVaultId"), ::OpenAPI::toJsonValue(m_secret_vault_id));
    }
    return obj;
}

QString OAIBEKDetails::getSecretData() const {
    return m_secret_data;
}
void OAIBEKDetails::setSecretData(const QString &secret_data) {
    m_secret_data = secret_data;
    m_secret_data_isSet = true;
}

bool OAIBEKDetails::is_secret_data_Set() const{
    return m_secret_data_isSet;
}

bool OAIBEKDetails::is_secret_data_Valid() const{
    return m_secret_data_isValid;
}

QString OAIBEKDetails::getSecretUrl() const {
    return m_secret_url;
}
void OAIBEKDetails::setSecretUrl(const QString &secret_url) {
    m_secret_url = secret_url;
    m_secret_url_isSet = true;
}

bool OAIBEKDetails::is_secret_url_Set() const{
    return m_secret_url_isSet;
}

bool OAIBEKDetails::is_secret_url_Valid() const{
    return m_secret_url_isValid;
}

QString OAIBEKDetails::getSecretVaultId() const {
    return m_secret_vault_id;
}
void OAIBEKDetails::setSecretVaultId(const QString &secret_vault_id) {
    m_secret_vault_id = secret_vault_id;
    m_secret_vault_id_isSet = true;
}

bool OAIBEKDetails::is_secret_vault_id_Set() const{
    return m_secret_vault_id_isSet;
}

bool OAIBEKDetails::is_secret_vault_id_Valid() const{
    return m_secret_vault_id_isValid;
}

bool OAIBEKDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_secret_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secret_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secret_vault_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBEKDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
