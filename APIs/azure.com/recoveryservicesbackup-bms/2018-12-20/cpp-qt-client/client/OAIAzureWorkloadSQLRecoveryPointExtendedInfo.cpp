/**
 * RecoveryServicesBackupClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-12-20
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAzureWorkloadSQLRecoveryPointExtendedInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAzureWorkloadSQLRecoveryPointExtendedInfo::OAIAzureWorkloadSQLRecoveryPointExtendedInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAzureWorkloadSQLRecoveryPointExtendedInfo::OAIAzureWorkloadSQLRecoveryPointExtendedInfo() {
    this->initializeModel();
}

OAIAzureWorkloadSQLRecoveryPointExtendedInfo::~OAIAzureWorkloadSQLRecoveryPointExtendedInfo() {}

void OAIAzureWorkloadSQLRecoveryPointExtendedInfo::initializeModel() {

    m_data_directory_paths_isSet = false;
    m_data_directory_paths_isValid = false;

    m_data_directory_time_in_utc_isSet = false;
    m_data_directory_time_in_utc_isValid = false;
}

void OAIAzureWorkloadSQLRecoveryPointExtendedInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAzureWorkloadSQLRecoveryPointExtendedInfo::fromJsonObject(QJsonObject json) {

    m_data_directory_paths_isValid = ::OpenAPI::fromJsonValue(m_data_directory_paths, json[QString("dataDirectoryPaths")]);
    m_data_directory_paths_isSet = !json[QString("dataDirectoryPaths")].isNull() && m_data_directory_paths_isValid;

    m_data_directory_time_in_utc_isValid = ::OpenAPI::fromJsonValue(m_data_directory_time_in_utc, json[QString("dataDirectoryTimeInUTC")]);
    m_data_directory_time_in_utc_isSet = !json[QString("dataDirectoryTimeInUTC")].isNull() && m_data_directory_time_in_utc_isValid;
}

QString OAIAzureWorkloadSQLRecoveryPointExtendedInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAzureWorkloadSQLRecoveryPointExtendedInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_data_directory_paths.size() > 0) {
        obj.insert(QString("dataDirectoryPaths"), ::OpenAPI::toJsonValue(m_data_directory_paths));
    }
    if (m_data_directory_time_in_utc_isSet) {
        obj.insert(QString("dataDirectoryTimeInUTC"), ::OpenAPI::toJsonValue(m_data_directory_time_in_utc));
    }
    return obj;
}

QList<OAISQLDataDirectory> OAIAzureWorkloadSQLRecoveryPointExtendedInfo::getDataDirectoryPaths() const {
    return m_data_directory_paths;
}
void OAIAzureWorkloadSQLRecoveryPointExtendedInfo::setDataDirectoryPaths(const QList<OAISQLDataDirectory> &data_directory_paths) {
    m_data_directory_paths = data_directory_paths;
    m_data_directory_paths_isSet = true;
}

bool OAIAzureWorkloadSQLRecoveryPointExtendedInfo::is_data_directory_paths_Set() const{
    return m_data_directory_paths_isSet;
}

bool OAIAzureWorkloadSQLRecoveryPointExtendedInfo::is_data_directory_paths_Valid() const{
    return m_data_directory_paths_isValid;
}

QDateTime OAIAzureWorkloadSQLRecoveryPointExtendedInfo::getDataDirectoryTimeInUtc() const {
    return m_data_directory_time_in_utc;
}
void OAIAzureWorkloadSQLRecoveryPointExtendedInfo::setDataDirectoryTimeInUtc(const QDateTime &data_directory_time_in_utc) {
    m_data_directory_time_in_utc = data_directory_time_in_utc;
    m_data_directory_time_in_utc_isSet = true;
}

bool OAIAzureWorkloadSQLRecoveryPointExtendedInfo::is_data_directory_time_in_utc_Set() const{
    return m_data_directory_time_in_utc_isSet;
}

bool OAIAzureWorkloadSQLRecoveryPointExtendedInfo::is_data_directory_time_in_utc_Valid() const{
    return m_data_directory_time_in_utc_isValid;
}

bool OAIAzureWorkloadSQLRecoveryPointExtendedInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_directory_paths.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_directory_time_in_utc_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAzureWorkloadSQLRecoveryPointExtendedInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
