/**
 * RecoveryServicesBackupClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-12-20
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAzureWorkloadPointInTimeRecoveryPoint.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAzureWorkloadPointInTimeRecoveryPoint::OAIAzureWorkloadPointInTimeRecoveryPoint(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAzureWorkloadPointInTimeRecoveryPoint::OAIAzureWorkloadPointInTimeRecoveryPoint() {
    this->initializeModel();
}

OAIAzureWorkloadPointInTimeRecoveryPoint::~OAIAzureWorkloadPointInTimeRecoveryPoint() {}

void OAIAzureWorkloadPointInTimeRecoveryPoint::initializeModel() {

    m_time_ranges_isSet = false;
    m_time_ranges_isValid = false;

    m_recovery_point_time_in_utc_isSet = false;
    m_recovery_point_time_in_utc_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_object_type_isSet = false;
    m_object_type_isValid = false;
}

void OAIAzureWorkloadPointInTimeRecoveryPoint::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAzureWorkloadPointInTimeRecoveryPoint::fromJsonObject(QJsonObject json) {

    m_time_ranges_isValid = ::OpenAPI::fromJsonValue(m_time_ranges, json[QString("timeRanges")]);
    m_time_ranges_isSet = !json[QString("timeRanges")].isNull() && m_time_ranges_isValid;

    m_recovery_point_time_in_utc_isValid = ::OpenAPI::fromJsonValue(m_recovery_point_time_in_utc, json[QString("recoveryPointTimeInUTC")]);
    m_recovery_point_time_in_utc_isSet = !json[QString("recoveryPointTimeInUTC")].isNull() && m_recovery_point_time_in_utc_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_object_type_isValid = ::OpenAPI::fromJsonValue(m_object_type, json[QString("objectType")]);
    m_object_type_isSet = !json[QString("objectType")].isNull() && m_object_type_isValid;
}

QString OAIAzureWorkloadPointInTimeRecoveryPoint::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAzureWorkloadPointInTimeRecoveryPoint::asJsonObject() const {
    QJsonObject obj;
    if (m_time_ranges.size() > 0) {
        obj.insert(QString("timeRanges"), ::OpenAPI::toJsonValue(m_time_ranges));
    }
    if (m_recovery_point_time_in_utc_isSet) {
        obj.insert(QString("recoveryPointTimeInUTC"), ::OpenAPI::toJsonValue(m_recovery_point_time_in_utc));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_object_type_isSet) {
        obj.insert(QString("objectType"), ::OpenAPI::toJsonValue(m_object_type));
    }
    return obj;
}

QList<OAIPointInTimeRange> OAIAzureWorkloadPointInTimeRecoveryPoint::getTimeRanges() const {
    return m_time_ranges;
}
void OAIAzureWorkloadPointInTimeRecoveryPoint::setTimeRanges(const QList<OAIPointInTimeRange> &time_ranges) {
    m_time_ranges = time_ranges;
    m_time_ranges_isSet = true;
}

bool OAIAzureWorkloadPointInTimeRecoveryPoint::is_time_ranges_Set() const{
    return m_time_ranges_isSet;
}

bool OAIAzureWorkloadPointInTimeRecoveryPoint::is_time_ranges_Valid() const{
    return m_time_ranges_isValid;
}

QDateTime OAIAzureWorkloadPointInTimeRecoveryPoint::getRecoveryPointTimeInUtc() const {
    return m_recovery_point_time_in_utc;
}
void OAIAzureWorkloadPointInTimeRecoveryPoint::setRecoveryPointTimeInUtc(const QDateTime &recovery_point_time_in_utc) {
    m_recovery_point_time_in_utc = recovery_point_time_in_utc;
    m_recovery_point_time_in_utc_isSet = true;
}

bool OAIAzureWorkloadPointInTimeRecoveryPoint::is_recovery_point_time_in_utc_Set() const{
    return m_recovery_point_time_in_utc_isSet;
}

bool OAIAzureWorkloadPointInTimeRecoveryPoint::is_recovery_point_time_in_utc_Valid() const{
    return m_recovery_point_time_in_utc_isValid;
}

QString OAIAzureWorkloadPointInTimeRecoveryPoint::getType() const {
    return m_type;
}
void OAIAzureWorkloadPointInTimeRecoveryPoint::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIAzureWorkloadPointInTimeRecoveryPoint::is_type_Set() const{
    return m_type_isSet;
}

bool OAIAzureWorkloadPointInTimeRecoveryPoint::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIAzureWorkloadPointInTimeRecoveryPoint::getObjectType() const {
    return m_object_type;
}
void OAIAzureWorkloadPointInTimeRecoveryPoint::setObjectType(const QString &object_type) {
    m_object_type = object_type;
    m_object_type_isSet = true;
}

bool OAIAzureWorkloadPointInTimeRecoveryPoint::is_object_type_Set() const{
    return m_object_type_isSet;
}

bool OAIAzureWorkloadPointInTimeRecoveryPoint::is_object_type_Valid() const{
    return m_object_type_isValid;
}

bool OAIAzureWorkloadPointInTimeRecoveryPoint::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_time_ranges.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_recovery_point_time_in_utc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAzureWorkloadPointInTimeRecoveryPoint::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_object_type_isValid && true;
}

} // namespace OpenAPI
