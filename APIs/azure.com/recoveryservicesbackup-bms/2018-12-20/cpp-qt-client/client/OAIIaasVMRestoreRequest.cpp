/**
 * RecoveryServicesBackupClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-12-20
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIaasVMRestoreRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIaasVMRestoreRequest::OAIIaasVMRestoreRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIaasVMRestoreRequest::OAIIaasVMRestoreRequest() {
    this->initializeModel();
}

OAIIaasVMRestoreRequest::~OAIIaasVMRestoreRequest() {}

void OAIIaasVMRestoreRequest::initializeModel() {

    m_affinity_group_isSet = false;
    m_affinity_group_isValid = false;

    m_create_new_cloud_service_isSet = false;
    m_create_new_cloud_service_isValid = false;

    m_encryption_details_isSet = false;
    m_encryption_details_isValid = false;

    m_original_storage_account_option_isSet = false;
    m_original_storage_account_option_isValid = false;

    m_recovery_point_id_isSet = false;
    m_recovery_point_id_isValid = false;

    m_recovery_type_isSet = false;
    m_recovery_type_isValid = false;

    m_region_isSet = false;
    m_region_isValid = false;

    m_restore_disk_lun_list_isSet = false;
    m_restore_disk_lun_list_isValid = false;

    m_source_resource_id_isSet = false;
    m_source_resource_id_isValid = false;

    m_storage_account_id_isSet = false;
    m_storage_account_id_isValid = false;

    m_subnet_id_isSet = false;
    m_subnet_id_isValid = false;

    m_target_domain_name_id_isSet = false;
    m_target_domain_name_id_isValid = false;

    m_target_resource_group_id_isSet = false;
    m_target_resource_group_id_isValid = false;

    m_target_virtual_machine_id_isSet = false;
    m_target_virtual_machine_id_isValid = false;

    m_virtual_network_id_isSet = false;
    m_virtual_network_id_isValid = false;

    m_object_type_isSet = false;
    m_object_type_isValid = false;
}

void OAIIaasVMRestoreRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIaasVMRestoreRequest::fromJsonObject(QJsonObject json) {

    m_affinity_group_isValid = ::OpenAPI::fromJsonValue(m_affinity_group, json[QString("affinityGroup")]);
    m_affinity_group_isSet = !json[QString("affinityGroup")].isNull() && m_affinity_group_isValid;

    m_create_new_cloud_service_isValid = ::OpenAPI::fromJsonValue(m_create_new_cloud_service, json[QString("createNewCloudService")]);
    m_create_new_cloud_service_isSet = !json[QString("createNewCloudService")].isNull() && m_create_new_cloud_service_isValid;

    m_encryption_details_isValid = ::OpenAPI::fromJsonValue(m_encryption_details, json[QString("encryptionDetails")]);
    m_encryption_details_isSet = !json[QString("encryptionDetails")].isNull() && m_encryption_details_isValid;

    m_original_storage_account_option_isValid = ::OpenAPI::fromJsonValue(m_original_storage_account_option, json[QString("originalStorageAccountOption")]);
    m_original_storage_account_option_isSet = !json[QString("originalStorageAccountOption")].isNull() && m_original_storage_account_option_isValid;

    m_recovery_point_id_isValid = ::OpenAPI::fromJsonValue(m_recovery_point_id, json[QString("recoveryPointId")]);
    m_recovery_point_id_isSet = !json[QString("recoveryPointId")].isNull() && m_recovery_point_id_isValid;

    m_recovery_type_isValid = ::OpenAPI::fromJsonValue(m_recovery_type, json[QString("recoveryType")]);
    m_recovery_type_isSet = !json[QString("recoveryType")].isNull() && m_recovery_type_isValid;

    m_region_isValid = ::OpenAPI::fromJsonValue(m_region, json[QString("region")]);
    m_region_isSet = !json[QString("region")].isNull() && m_region_isValid;

    m_restore_disk_lun_list_isValid = ::OpenAPI::fromJsonValue(m_restore_disk_lun_list, json[QString("restoreDiskLunList")]);
    m_restore_disk_lun_list_isSet = !json[QString("restoreDiskLunList")].isNull() && m_restore_disk_lun_list_isValid;

    m_source_resource_id_isValid = ::OpenAPI::fromJsonValue(m_source_resource_id, json[QString("sourceResourceId")]);
    m_source_resource_id_isSet = !json[QString("sourceResourceId")].isNull() && m_source_resource_id_isValid;

    m_storage_account_id_isValid = ::OpenAPI::fromJsonValue(m_storage_account_id, json[QString("storageAccountId")]);
    m_storage_account_id_isSet = !json[QString("storageAccountId")].isNull() && m_storage_account_id_isValid;

    m_subnet_id_isValid = ::OpenAPI::fromJsonValue(m_subnet_id, json[QString("subnetId")]);
    m_subnet_id_isSet = !json[QString("subnetId")].isNull() && m_subnet_id_isValid;

    m_target_domain_name_id_isValid = ::OpenAPI::fromJsonValue(m_target_domain_name_id, json[QString("targetDomainNameId")]);
    m_target_domain_name_id_isSet = !json[QString("targetDomainNameId")].isNull() && m_target_domain_name_id_isValid;

    m_target_resource_group_id_isValid = ::OpenAPI::fromJsonValue(m_target_resource_group_id, json[QString("targetResourceGroupId")]);
    m_target_resource_group_id_isSet = !json[QString("targetResourceGroupId")].isNull() && m_target_resource_group_id_isValid;

    m_target_virtual_machine_id_isValid = ::OpenAPI::fromJsonValue(m_target_virtual_machine_id, json[QString("targetVirtualMachineId")]);
    m_target_virtual_machine_id_isSet = !json[QString("targetVirtualMachineId")].isNull() && m_target_virtual_machine_id_isValid;

    m_virtual_network_id_isValid = ::OpenAPI::fromJsonValue(m_virtual_network_id, json[QString("virtualNetworkId")]);
    m_virtual_network_id_isSet = !json[QString("virtualNetworkId")].isNull() && m_virtual_network_id_isValid;

    m_object_type_isValid = ::OpenAPI::fromJsonValue(m_object_type, json[QString("objectType")]);
    m_object_type_isSet = !json[QString("objectType")].isNull() && m_object_type_isValid;
}

QString OAIIaasVMRestoreRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIaasVMRestoreRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_affinity_group_isSet) {
        obj.insert(QString("affinityGroup"), ::OpenAPI::toJsonValue(m_affinity_group));
    }
    if (m_create_new_cloud_service_isSet) {
        obj.insert(QString("createNewCloudService"), ::OpenAPI::toJsonValue(m_create_new_cloud_service));
    }
    if (m_encryption_details.isSet()) {
        obj.insert(QString("encryptionDetails"), ::OpenAPI::toJsonValue(m_encryption_details));
    }
    if (m_original_storage_account_option_isSet) {
        obj.insert(QString("originalStorageAccountOption"), ::OpenAPI::toJsonValue(m_original_storage_account_option));
    }
    if (m_recovery_point_id_isSet) {
        obj.insert(QString("recoveryPointId"), ::OpenAPI::toJsonValue(m_recovery_point_id));
    }
    if (m_recovery_type_isSet) {
        obj.insert(QString("recoveryType"), ::OpenAPI::toJsonValue(m_recovery_type));
    }
    if (m_region_isSet) {
        obj.insert(QString("region"), ::OpenAPI::toJsonValue(m_region));
    }
    if (m_restore_disk_lun_list.size() > 0) {
        obj.insert(QString("restoreDiskLunList"), ::OpenAPI::toJsonValue(m_restore_disk_lun_list));
    }
    if (m_source_resource_id_isSet) {
        obj.insert(QString("sourceResourceId"), ::OpenAPI::toJsonValue(m_source_resource_id));
    }
    if (m_storage_account_id_isSet) {
        obj.insert(QString("storageAccountId"), ::OpenAPI::toJsonValue(m_storage_account_id));
    }
    if (m_subnet_id_isSet) {
        obj.insert(QString("subnetId"), ::OpenAPI::toJsonValue(m_subnet_id));
    }
    if (m_target_domain_name_id_isSet) {
        obj.insert(QString("targetDomainNameId"), ::OpenAPI::toJsonValue(m_target_domain_name_id));
    }
    if (m_target_resource_group_id_isSet) {
        obj.insert(QString("targetResourceGroupId"), ::OpenAPI::toJsonValue(m_target_resource_group_id));
    }
    if (m_target_virtual_machine_id_isSet) {
        obj.insert(QString("targetVirtualMachineId"), ::OpenAPI::toJsonValue(m_target_virtual_machine_id));
    }
    if (m_virtual_network_id_isSet) {
        obj.insert(QString("virtualNetworkId"), ::OpenAPI::toJsonValue(m_virtual_network_id));
    }
    if (m_object_type_isSet) {
        obj.insert(QString("objectType"), ::OpenAPI::toJsonValue(m_object_type));
    }
    return obj;
}

QString OAIIaasVMRestoreRequest::getAffinityGroup() const {
    return m_affinity_group;
}
void OAIIaasVMRestoreRequest::setAffinityGroup(const QString &affinity_group) {
    m_affinity_group = affinity_group;
    m_affinity_group_isSet = true;
}

bool OAIIaasVMRestoreRequest::is_affinity_group_Set() const{
    return m_affinity_group_isSet;
}

bool OAIIaasVMRestoreRequest::is_affinity_group_Valid() const{
    return m_affinity_group_isValid;
}

bool OAIIaasVMRestoreRequest::isCreateNewCloudService() const {
    return m_create_new_cloud_service;
}
void OAIIaasVMRestoreRequest::setCreateNewCloudService(const bool &create_new_cloud_service) {
    m_create_new_cloud_service = create_new_cloud_service;
    m_create_new_cloud_service_isSet = true;
}

bool OAIIaasVMRestoreRequest::is_create_new_cloud_service_Set() const{
    return m_create_new_cloud_service_isSet;
}

bool OAIIaasVMRestoreRequest::is_create_new_cloud_service_Valid() const{
    return m_create_new_cloud_service_isValid;
}

OAIEncryptionDetails OAIIaasVMRestoreRequest::getEncryptionDetails() const {
    return m_encryption_details;
}
void OAIIaasVMRestoreRequest::setEncryptionDetails(const OAIEncryptionDetails &encryption_details) {
    m_encryption_details = encryption_details;
    m_encryption_details_isSet = true;
}

bool OAIIaasVMRestoreRequest::is_encryption_details_Set() const{
    return m_encryption_details_isSet;
}

bool OAIIaasVMRestoreRequest::is_encryption_details_Valid() const{
    return m_encryption_details_isValid;
}

bool OAIIaasVMRestoreRequest::isOriginalStorageAccountOption() const {
    return m_original_storage_account_option;
}
void OAIIaasVMRestoreRequest::setOriginalStorageAccountOption(const bool &original_storage_account_option) {
    m_original_storage_account_option = original_storage_account_option;
    m_original_storage_account_option_isSet = true;
}

bool OAIIaasVMRestoreRequest::is_original_storage_account_option_Set() const{
    return m_original_storage_account_option_isSet;
}

bool OAIIaasVMRestoreRequest::is_original_storage_account_option_Valid() const{
    return m_original_storage_account_option_isValid;
}

QString OAIIaasVMRestoreRequest::getRecoveryPointId() const {
    return m_recovery_point_id;
}
void OAIIaasVMRestoreRequest::setRecoveryPointId(const QString &recovery_point_id) {
    m_recovery_point_id = recovery_point_id;
    m_recovery_point_id_isSet = true;
}

bool OAIIaasVMRestoreRequest::is_recovery_point_id_Set() const{
    return m_recovery_point_id_isSet;
}

bool OAIIaasVMRestoreRequest::is_recovery_point_id_Valid() const{
    return m_recovery_point_id_isValid;
}

QString OAIIaasVMRestoreRequest::getRecoveryType() const {
    return m_recovery_type;
}
void OAIIaasVMRestoreRequest::setRecoveryType(const QString &recovery_type) {
    m_recovery_type = recovery_type;
    m_recovery_type_isSet = true;
}

bool OAIIaasVMRestoreRequest::is_recovery_type_Set() const{
    return m_recovery_type_isSet;
}

bool OAIIaasVMRestoreRequest::is_recovery_type_Valid() const{
    return m_recovery_type_isValid;
}

QString OAIIaasVMRestoreRequest::getRegion() const {
    return m_region;
}
void OAIIaasVMRestoreRequest::setRegion(const QString &region) {
    m_region = region;
    m_region_isSet = true;
}

bool OAIIaasVMRestoreRequest::is_region_Set() const{
    return m_region_isSet;
}

bool OAIIaasVMRestoreRequest::is_region_Valid() const{
    return m_region_isValid;
}

QList<qint32> OAIIaasVMRestoreRequest::getRestoreDiskLunList() const {
    return m_restore_disk_lun_list;
}
void OAIIaasVMRestoreRequest::setRestoreDiskLunList(const QList<qint32> &restore_disk_lun_list) {
    m_restore_disk_lun_list = restore_disk_lun_list;
    m_restore_disk_lun_list_isSet = true;
}

bool OAIIaasVMRestoreRequest::is_restore_disk_lun_list_Set() const{
    return m_restore_disk_lun_list_isSet;
}

bool OAIIaasVMRestoreRequest::is_restore_disk_lun_list_Valid() const{
    return m_restore_disk_lun_list_isValid;
}

QString OAIIaasVMRestoreRequest::getSourceResourceId() const {
    return m_source_resource_id;
}
void OAIIaasVMRestoreRequest::setSourceResourceId(const QString &source_resource_id) {
    m_source_resource_id = source_resource_id;
    m_source_resource_id_isSet = true;
}

bool OAIIaasVMRestoreRequest::is_source_resource_id_Set() const{
    return m_source_resource_id_isSet;
}

bool OAIIaasVMRestoreRequest::is_source_resource_id_Valid() const{
    return m_source_resource_id_isValid;
}

QString OAIIaasVMRestoreRequest::getStorageAccountId() const {
    return m_storage_account_id;
}
void OAIIaasVMRestoreRequest::setStorageAccountId(const QString &storage_account_id) {
    m_storage_account_id = storage_account_id;
    m_storage_account_id_isSet = true;
}

bool OAIIaasVMRestoreRequest::is_storage_account_id_Set() const{
    return m_storage_account_id_isSet;
}

bool OAIIaasVMRestoreRequest::is_storage_account_id_Valid() const{
    return m_storage_account_id_isValid;
}

QString OAIIaasVMRestoreRequest::getSubnetId() const {
    return m_subnet_id;
}
void OAIIaasVMRestoreRequest::setSubnetId(const QString &subnet_id) {
    m_subnet_id = subnet_id;
    m_subnet_id_isSet = true;
}

bool OAIIaasVMRestoreRequest::is_subnet_id_Set() const{
    return m_subnet_id_isSet;
}

bool OAIIaasVMRestoreRequest::is_subnet_id_Valid() const{
    return m_subnet_id_isValid;
}

QString OAIIaasVMRestoreRequest::getTargetDomainNameId() const {
    return m_target_domain_name_id;
}
void OAIIaasVMRestoreRequest::setTargetDomainNameId(const QString &target_domain_name_id) {
    m_target_domain_name_id = target_domain_name_id;
    m_target_domain_name_id_isSet = true;
}

bool OAIIaasVMRestoreRequest::is_target_domain_name_id_Set() const{
    return m_target_domain_name_id_isSet;
}

bool OAIIaasVMRestoreRequest::is_target_domain_name_id_Valid() const{
    return m_target_domain_name_id_isValid;
}

QString OAIIaasVMRestoreRequest::getTargetResourceGroupId() const {
    return m_target_resource_group_id;
}
void OAIIaasVMRestoreRequest::setTargetResourceGroupId(const QString &target_resource_group_id) {
    m_target_resource_group_id = target_resource_group_id;
    m_target_resource_group_id_isSet = true;
}

bool OAIIaasVMRestoreRequest::is_target_resource_group_id_Set() const{
    return m_target_resource_group_id_isSet;
}

bool OAIIaasVMRestoreRequest::is_target_resource_group_id_Valid() const{
    return m_target_resource_group_id_isValid;
}

QString OAIIaasVMRestoreRequest::getTargetVirtualMachineId() const {
    return m_target_virtual_machine_id;
}
void OAIIaasVMRestoreRequest::setTargetVirtualMachineId(const QString &target_virtual_machine_id) {
    m_target_virtual_machine_id = target_virtual_machine_id;
    m_target_virtual_machine_id_isSet = true;
}

bool OAIIaasVMRestoreRequest::is_target_virtual_machine_id_Set() const{
    return m_target_virtual_machine_id_isSet;
}

bool OAIIaasVMRestoreRequest::is_target_virtual_machine_id_Valid() const{
    return m_target_virtual_machine_id_isValid;
}

QString OAIIaasVMRestoreRequest::getVirtualNetworkId() const {
    return m_virtual_network_id;
}
void OAIIaasVMRestoreRequest::setVirtualNetworkId(const QString &virtual_network_id) {
    m_virtual_network_id = virtual_network_id;
    m_virtual_network_id_isSet = true;
}

bool OAIIaasVMRestoreRequest::is_virtual_network_id_Set() const{
    return m_virtual_network_id_isSet;
}

bool OAIIaasVMRestoreRequest::is_virtual_network_id_Valid() const{
    return m_virtual_network_id_isValid;
}

QString OAIIaasVMRestoreRequest::getObjectType() const {
    return m_object_type;
}
void OAIIaasVMRestoreRequest::setObjectType(const QString &object_type) {
    m_object_type = object_type;
    m_object_type_isSet = true;
}

bool OAIIaasVMRestoreRequest::is_object_type_Set() const{
    return m_object_type_isSet;
}

bool OAIIaasVMRestoreRequest::is_object_type_Valid() const{
    return m_object_type_isValid;
}

bool OAIIaasVMRestoreRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_affinity_group_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_new_cloud_service_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encryption_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_storage_account_option_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recovery_point_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recovery_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_restore_disk_lun_list.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subnet_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_domain_name_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_resource_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_virtual_machine_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_virtual_network_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIaasVMRestoreRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_object_type_isValid && true;
}

} // namespace OpenAPI
