/**
 * RecoveryServicesBackupClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-12-20
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDPMProtectedItemExtendedInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDPMProtectedItemExtendedInfo::OAIDPMProtectedItemExtendedInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDPMProtectedItemExtendedInfo::OAIDPMProtectedItemExtendedInfo() {
    this->initializeModel();
}

OAIDPMProtectedItemExtendedInfo::~OAIDPMProtectedItemExtendedInfo() {}

void OAIDPMProtectedItemExtendedInfo::initializeModel() {

    m_disk_storage_used_in_bytes_isSet = false;
    m_disk_storage_used_in_bytes_isValid = false;

    m_is_collocated_isSet = false;
    m_is_collocated_isValid = false;

    m_is_present_on_cloud_isSet = false;
    m_is_present_on_cloud_isValid = false;

    m_last_backup_status_isSet = false;
    m_last_backup_status_isValid = false;

    m_last_refreshed_at_isSet = false;
    m_last_refreshed_at_isValid = false;

    m_oldest_recovery_point_isSet = false;
    m_oldest_recovery_point_isValid = false;

    m_on_premise_latest_recovery_point_isSet = false;
    m_on_premise_latest_recovery_point_isValid = false;

    m_on_premise_oldest_recovery_point_isSet = false;
    m_on_premise_oldest_recovery_point_isValid = false;

    m_on_premise_recovery_point_count_isSet = false;
    m_on_premise_recovery_point_count_isValid = false;

    m_protectable_object_load_path_isSet = false;
    m_protectable_object_load_path_isValid = false;

    m_r_protected_isSet = false;
    m_r_protected_isValid = false;

    m_protection_group_name_isSet = false;
    m_protection_group_name_isValid = false;

    m_recovery_point_count_isSet = false;
    m_recovery_point_count_isValid = false;

    m_total_disk_storage_size_in_bytes_isSet = false;
    m_total_disk_storage_size_in_bytes_isValid = false;
}

void OAIDPMProtectedItemExtendedInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDPMProtectedItemExtendedInfo::fromJsonObject(QJsonObject json) {

    m_disk_storage_used_in_bytes_isValid = ::OpenAPI::fromJsonValue(m_disk_storage_used_in_bytes, json[QString("diskStorageUsedInBytes")]);
    m_disk_storage_used_in_bytes_isSet = !json[QString("diskStorageUsedInBytes")].isNull() && m_disk_storage_used_in_bytes_isValid;

    m_is_collocated_isValid = ::OpenAPI::fromJsonValue(m_is_collocated, json[QString("isCollocated")]);
    m_is_collocated_isSet = !json[QString("isCollocated")].isNull() && m_is_collocated_isValid;

    m_is_present_on_cloud_isValid = ::OpenAPI::fromJsonValue(m_is_present_on_cloud, json[QString("isPresentOnCloud")]);
    m_is_present_on_cloud_isSet = !json[QString("isPresentOnCloud")].isNull() && m_is_present_on_cloud_isValid;

    m_last_backup_status_isValid = ::OpenAPI::fromJsonValue(m_last_backup_status, json[QString("lastBackupStatus")]);
    m_last_backup_status_isSet = !json[QString("lastBackupStatus")].isNull() && m_last_backup_status_isValid;

    m_last_refreshed_at_isValid = ::OpenAPI::fromJsonValue(m_last_refreshed_at, json[QString("lastRefreshedAt")]);
    m_last_refreshed_at_isSet = !json[QString("lastRefreshedAt")].isNull() && m_last_refreshed_at_isValid;

    m_oldest_recovery_point_isValid = ::OpenAPI::fromJsonValue(m_oldest_recovery_point, json[QString("oldestRecoveryPoint")]);
    m_oldest_recovery_point_isSet = !json[QString("oldestRecoveryPoint")].isNull() && m_oldest_recovery_point_isValid;

    m_on_premise_latest_recovery_point_isValid = ::OpenAPI::fromJsonValue(m_on_premise_latest_recovery_point, json[QString("onPremiseLatestRecoveryPoint")]);
    m_on_premise_latest_recovery_point_isSet = !json[QString("onPremiseLatestRecoveryPoint")].isNull() && m_on_premise_latest_recovery_point_isValid;

    m_on_premise_oldest_recovery_point_isValid = ::OpenAPI::fromJsonValue(m_on_premise_oldest_recovery_point, json[QString("onPremiseOldestRecoveryPoint")]);
    m_on_premise_oldest_recovery_point_isSet = !json[QString("onPremiseOldestRecoveryPoint")].isNull() && m_on_premise_oldest_recovery_point_isValid;

    m_on_premise_recovery_point_count_isValid = ::OpenAPI::fromJsonValue(m_on_premise_recovery_point_count, json[QString("onPremiseRecoveryPointCount")]);
    m_on_premise_recovery_point_count_isSet = !json[QString("onPremiseRecoveryPointCount")].isNull() && m_on_premise_recovery_point_count_isValid;

    m_protectable_object_load_path_isValid = ::OpenAPI::fromJsonValue(m_protectable_object_load_path, json[QString("protectableObjectLoadPath")]);
    m_protectable_object_load_path_isSet = !json[QString("protectableObjectLoadPath")].isNull() && m_protectable_object_load_path_isValid;

    m_r_protected_isValid = ::OpenAPI::fromJsonValue(m_r_protected, json[QString("protected")]);
    m_r_protected_isSet = !json[QString("protected")].isNull() && m_r_protected_isValid;

    m_protection_group_name_isValid = ::OpenAPI::fromJsonValue(m_protection_group_name, json[QString("protectionGroupName")]);
    m_protection_group_name_isSet = !json[QString("protectionGroupName")].isNull() && m_protection_group_name_isValid;

    m_recovery_point_count_isValid = ::OpenAPI::fromJsonValue(m_recovery_point_count, json[QString("recoveryPointCount")]);
    m_recovery_point_count_isSet = !json[QString("recoveryPointCount")].isNull() && m_recovery_point_count_isValid;

    m_total_disk_storage_size_in_bytes_isValid = ::OpenAPI::fromJsonValue(m_total_disk_storage_size_in_bytes, json[QString("totalDiskStorageSizeInBytes")]);
    m_total_disk_storage_size_in_bytes_isSet = !json[QString("totalDiskStorageSizeInBytes")].isNull() && m_total_disk_storage_size_in_bytes_isValid;
}

QString OAIDPMProtectedItemExtendedInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDPMProtectedItemExtendedInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_disk_storage_used_in_bytes_isSet) {
        obj.insert(QString("diskStorageUsedInBytes"), ::OpenAPI::toJsonValue(m_disk_storage_used_in_bytes));
    }
    if (m_is_collocated_isSet) {
        obj.insert(QString("isCollocated"), ::OpenAPI::toJsonValue(m_is_collocated));
    }
    if (m_is_present_on_cloud_isSet) {
        obj.insert(QString("isPresentOnCloud"), ::OpenAPI::toJsonValue(m_is_present_on_cloud));
    }
    if (m_last_backup_status_isSet) {
        obj.insert(QString("lastBackupStatus"), ::OpenAPI::toJsonValue(m_last_backup_status));
    }
    if (m_last_refreshed_at_isSet) {
        obj.insert(QString("lastRefreshedAt"), ::OpenAPI::toJsonValue(m_last_refreshed_at));
    }
    if (m_oldest_recovery_point_isSet) {
        obj.insert(QString("oldestRecoveryPoint"), ::OpenAPI::toJsonValue(m_oldest_recovery_point));
    }
    if (m_on_premise_latest_recovery_point_isSet) {
        obj.insert(QString("onPremiseLatestRecoveryPoint"), ::OpenAPI::toJsonValue(m_on_premise_latest_recovery_point));
    }
    if (m_on_premise_oldest_recovery_point_isSet) {
        obj.insert(QString("onPremiseOldestRecoveryPoint"), ::OpenAPI::toJsonValue(m_on_premise_oldest_recovery_point));
    }
    if (m_on_premise_recovery_point_count_isSet) {
        obj.insert(QString("onPremiseRecoveryPointCount"), ::OpenAPI::toJsonValue(m_on_premise_recovery_point_count));
    }
    if (m_protectable_object_load_path.size() > 0) {
        obj.insert(QString("protectableObjectLoadPath"), ::OpenAPI::toJsonValue(m_protectable_object_load_path));
    }
    if (m_r_protected_isSet) {
        obj.insert(QString("protected"), ::OpenAPI::toJsonValue(m_r_protected));
    }
    if (m_protection_group_name_isSet) {
        obj.insert(QString("protectionGroupName"), ::OpenAPI::toJsonValue(m_protection_group_name));
    }
    if (m_recovery_point_count_isSet) {
        obj.insert(QString("recoveryPointCount"), ::OpenAPI::toJsonValue(m_recovery_point_count));
    }
    if (m_total_disk_storage_size_in_bytes_isSet) {
        obj.insert(QString("totalDiskStorageSizeInBytes"), ::OpenAPI::toJsonValue(m_total_disk_storage_size_in_bytes));
    }
    return obj;
}

QString OAIDPMProtectedItemExtendedInfo::getDiskStorageUsedInBytes() const {
    return m_disk_storage_used_in_bytes;
}
void OAIDPMProtectedItemExtendedInfo::setDiskStorageUsedInBytes(const QString &disk_storage_used_in_bytes) {
    m_disk_storage_used_in_bytes = disk_storage_used_in_bytes;
    m_disk_storage_used_in_bytes_isSet = true;
}

bool OAIDPMProtectedItemExtendedInfo::is_disk_storage_used_in_bytes_Set() const{
    return m_disk_storage_used_in_bytes_isSet;
}

bool OAIDPMProtectedItemExtendedInfo::is_disk_storage_used_in_bytes_Valid() const{
    return m_disk_storage_used_in_bytes_isValid;
}

bool OAIDPMProtectedItemExtendedInfo::isIsCollocated() const {
    return m_is_collocated;
}
void OAIDPMProtectedItemExtendedInfo::setIsCollocated(const bool &is_collocated) {
    m_is_collocated = is_collocated;
    m_is_collocated_isSet = true;
}

bool OAIDPMProtectedItemExtendedInfo::is_is_collocated_Set() const{
    return m_is_collocated_isSet;
}

bool OAIDPMProtectedItemExtendedInfo::is_is_collocated_Valid() const{
    return m_is_collocated_isValid;
}

bool OAIDPMProtectedItemExtendedInfo::isIsPresentOnCloud() const {
    return m_is_present_on_cloud;
}
void OAIDPMProtectedItemExtendedInfo::setIsPresentOnCloud(const bool &is_present_on_cloud) {
    m_is_present_on_cloud = is_present_on_cloud;
    m_is_present_on_cloud_isSet = true;
}

bool OAIDPMProtectedItemExtendedInfo::is_is_present_on_cloud_Set() const{
    return m_is_present_on_cloud_isSet;
}

bool OAIDPMProtectedItemExtendedInfo::is_is_present_on_cloud_Valid() const{
    return m_is_present_on_cloud_isValid;
}

QString OAIDPMProtectedItemExtendedInfo::getLastBackupStatus() const {
    return m_last_backup_status;
}
void OAIDPMProtectedItemExtendedInfo::setLastBackupStatus(const QString &last_backup_status) {
    m_last_backup_status = last_backup_status;
    m_last_backup_status_isSet = true;
}

bool OAIDPMProtectedItemExtendedInfo::is_last_backup_status_Set() const{
    return m_last_backup_status_isSet;
}

bool OAIDPMProtectedItemExtendedInfo::is_last_backup_status_Valid() const{
    return m_last_backup_status_isValid;
}

QDateTime OAIDPMProtectedItemExtendedInfo::getLastRefreshedAt() const {
    return m_last_refreshed_at;
}
void OAIDPMProtectedItemExtendedInfo::setLastRefreshedAt(const QDateTime &last_refreshed_at) {
    m_last_refreshed_at = last_refreshed_at;
    m_last_refreshed_at_isSet = true;
}

bool OAIDPMProtectedItemExtendedInfo::is_last_refreshed_at_Set() const{
    return m_last_refreshed_at_isSet;
}

bool OAIDPMProtectedItemExtendedInfo::is_last_refreshed_at_Valid() const{
    return m_last_refreshed_at_isValid;
}

QDateTime OAIDPMProtectedItemExtendedInfo::getOldestRecoveryPoint() const {
    return m_oldest_recovery_point;
}
void OAIDPMProtectedItemExtendedInfo::setOldestRecoveryPoint(const QDateTime &oldest_recovery_point) {
    m_oldest_recovery_point = oldest_recovery_point;
    m_oldest_recovery_point_isSet = true;
}

bool OAIDPMProtectedItemExtendedInfo::is_oldest_recovery_point_Set() const{
    return m_oldest_recovery_point_isSet;
}

bool OAIDPMProtectedItemExtendedInfo::is_oldest_recovery_point_Valid() const{
    return m_oldest_recovery_point_isValid;
}

QDateTime OAIDPMProtectedItemExtendedInfo::getOnPremiseLatestRecoveryPoint() const {
    return m_on_premise_latest_recovery_point;
}
void OAIDPMProtectedItemExtendedInfo::setOnPremiseLatestRecoveryPoint(const QDateTime &on_premise_latest_recovery_point) {
    m_on_premise_latest_recovery_point = on_premise_latest_recovery_point;
    m_on_premise_latest_recovery_point_isSet = true;
}

bool OAIDPMProtectedItemExtendedInfo::is_on_premise_latest_recovery_point_Set() const{
    return m_on_premise_latest_recovery_point_isSet;
}

bool OAIDPMProtectedItemExtendedInfo::is_on_premise_latest_recovery_point_Valid() const{
    return m_on_premise_latest_recovery_point_isValid;
}

QDateTime OAIDPMProtectedItemExtendedInfo::getOnPremiseOldestRecoveryPoint() const {
    return m_on_premise_oldest_recovery_point;
}
void OAIDPMProtectedItemExtendedInfo::setOnPremiseOldestRecoveryPoint(const QDateTime &on_premise_oldest_recovery_point) {
    m_on_premise_oldest_recovery_point = on_premise_oldest_recovery_point;
    m_on_premise_oldest_recovery_point_isSet = true;
}

bool OAIDPMProtectedItemExtendedInfo::is_on_premise_oldest_recovery_point_Set() const{
    return m_on_premise_oldest_recovery_point_isSet;
}

bool OAIDPMProtectedItemExtendedInfo::is_on_premise_oldest_recovery_point_Valid() const{
    return m_on_premise_oldest_recovery_point_isValid;
}

qint32 OAIDPMProtectedItemExtendedInfo::getOnPremiseRecoveryPointCount() const {
    return m_on_premise_recovery_point_count;
}
void OAIDPMProtectedItemExtendedInfo::setOnPremiseRecoveryPointCount(const qint32 &on_premise_recovery_point_count) {
    m_on_premise_recovery_point_count = on_premise_recovery_point_count;
    m_on_premise_recovery_point_count_isSet = true;
}

bool OAIDPMProtectedItemExtendedInfo::is_on_premise_recovery_point_count_Set() const{
    return m_on_premise_recovery_point_count_isSet;
}

bool OAIDPMProtectedItemExtendedInfo::is_on_premise_recovery_point_count_Valid() const{
    return m_on_premise_recovery_point_count_isValid;
}

QMap<QString, QString> OAIDPMProtectedItemExtendedInfo::getProtectableObjectLoadPath() const {
    return m_protectable_object_load_path;
}
void OAIDPMProtectedItemExtendedInfo::setProtectableObjectLoadPath(const QMap<QString, QString> &protectable_object_load_path) {
    m_protectable_object_load_path = protectable_object_load_path;
    m_protectable_object_load_path_isSet = true;
}

bool OAIDPMProtectedItemExtendedInfo::is_protectable_object_load_path_Set() const{
    return m_protectable_object_load_path_isSet;
}

bool OAIDPMProtectedItemExtendedInfo::is_protectable_object_load_path_Valid() const{
    return m_protectable_object_load_path_isValid;
}

bool OAIDPMProtectedItemExtendedInfo::isRProtected() const {
    return m_r_protected;
}
void OAIDPMProtectedItemExtendedInfo::setRProtected(const bool &r_protected) {
    m_r_protected = r_protected;
    m_r_protected_isSet = true;
}

bool OAIDPMProtectedItemExtendedInfo::is_r_protected_Set() const{
    return m_r_protected_isSet;
}

bool OAIDPMProtectedItemExtendedInfo::is_r_protected_Valid() const{
    return m_r_protected_isValid;
}

QString OAIDPMProtectedItemExtendedInfo::getProtectionGroupName() const {
    return m_protection_group_name;
}
void OAIDPMProtectedItemExtendedInfo::setProtectionGroupName(const QString &protection_group_name) {
    m_protection_group_name = protection_group_name;
    m_protection_group_name_isSet = true;
}

bool OAIDPMProtectedItemExtendedInfo::is_protection_group_name_Set() const{
    return m_protection_group_name_isSet;
}

bool OAIDPMProtectedItemExtendedInfo::is_protection_group_name_Valid() const{
    return m_protection_group_name_isValid;
}

qint32 OAIDPMProtectedItemExtendedInfo::getRecoveryPointCount() const {
    return m_recovery_point_count;
}
void OAIDPMProtectedItemExtendedInfo::setRecoveryPointCount(const qint32 &recovery_point_count) {
    m_recovery_point_count = recovery_point_count;
    m_recovery_point_count_isSet = true;
}

bool OAIDPMProtectedItemExtendedInfo::is_recovery_point_count_Set() const{
    return m_recovery_point_count_isSet;
}

bool OAIDPMProtectedItemExtendedInfo::is_recovery_point_count_Valid() const{
    return m_recovery_point_count_isValid;
}

QString OAIDPMProtectedItemExtendedInfo::getTotalDiskStorageSizeInBytes() const {
    return m_total_disk_storage_size_in_bytes;
}
void OAIDPMProtectedItemExtendedInfo::setTotalDiskStorageSizeInBytes(const QString &total_disk_storage_size_in_bytes) {
    m_total_disk_storage_size_in_bytes = total_disk_storage_size_in_bytes;
    m_total_disk_storage_size_in_bytes_isSet = true;
}

bool OAIDPMProtectedItemExtendedInfo::is_total_disk_storage_size_in_bytes_Set() const{
    return m_total_disk_storage_size_in_bytes_isSet;
}

bool OAIDPMProtectedItemExtendedInfo::is_total_disk_storage_size_in_bytes_Valid() const{
    return m_total_disk_storage_size_in_bytes_isValid;
}

bool OAIDPMProtectedItemExtendedInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_disk_storage_used_in_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_collocated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_present_on_cloud_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_backup_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_refreshed_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_oldest_recovery_point_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_on_premise_latest_recovery_point_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_on_premise_oldest_recovery_point_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_on_premise_recovery_point_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protectable_object_load_path.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_protected_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protection_group_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recovery_point_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_disk_storage_size_in_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDPMProtectedItemExtendedInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
