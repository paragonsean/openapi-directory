/**
 * RecoveryServicesBackupClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-12-20
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDiskExclusionProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDiskExclusionProperties::OAIDiskExclusionProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDiskExclusionProperties::OAIDiskExclusionProperties() {
    this->initializeModel();
}

OAIDiskExclusionProperties::~OAIDiskExclusionProperties() {}

void OAIDiskExclusionProperties::initializeModel() {

    m_disk_lun_list_isSet = false;
    m_disk_lun_list_isValid = false;

    m_is_inclusion_list_isSet = false;
    m_is_inclusion_list_isValid = false;
}

void OAIDiskExclusionProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDiskExclusionProperties::fromJsonObject(QJsonObject json) {

    m_disk_lun_list_isValid = ::OpenAPI::fromJsonValue(m_disk_lun_list, json[QString("diskLunList")]);
    m_disk_lun_list_isSet = !json[QString("diskLunList")].isNull() && m_disk_lun_list_isValid;

    m_is_inclusion_list_isValid = ::OpenAPI::fromJsonValue(m_is_inclusion_list, json[QString("isInclusionList")]);
    m_is_inclusion_list_isSet = !json[QString("isInclusionList")].isNull() && m_is_inclusion_list_isValid;
}

QString OAIDiskExclusionProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDiskExclusionProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_disk_lun_list.size() > 0) {
        obj.insert(QString("diskLunList"), ::OpenAPI::toJsonValue(m_disk_lun_list));
    }
    if (m_is_inclusion_list_isSet) {
        obj.insert(QString("isInclusionList"), ::OpenAPI::toJsonValue(m_is_inclusion_list));
    }
    return obj;
}

QList<qint32> OAIDiskExclusionProperties::getDiskLunList() const {
    return m_disk_lun_list;
}
void OAIDiskExclusionProperties::setDiskLunList(const QList<qint32> &disk_lun_list) {
    m_disk_lun_list = disk_lun_list;
    m_disk_lun_list_isSet = true;
}

bool OAIDiskExclusionProperties::is_disk_lun_list_Set() const{
    return m_disk_lun_list_isSet;
}

bool OAIDiskExclusionProperties::is_disk_lun_list_Valid() const{
    return m_disk_lun_list_isValid;
}

bool OAIDiskExclusionProperties::isIsInclusionList() const {
    return m_is_inclusion_list;
}
void OAIDiskExclusionProperties::setIsInclusionList(const bool &is_inclusion_list) {
    m_is_inclusion_list = is_inclusion_list;
    m_is_inclusion_list_isSet = true;
}

bool OAIDiskExclusionProperties::is_is_inclusion_list_Set() const{
    return m_is_inclusion_list_isSet;
}

bool OAIDiskExclusionProperties::is_is_inclusion_list_Valid() const{
    return m_is_inclusion_list_isValid;
}

bool OAIDiskExclusionProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_disk_lun_list.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_inclusion_list_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDiskExclusionProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
