/**
 * RecoveryServicesBackupClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-12-20
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITargetRestoreInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITargetRestoreInfo::OAITargetRestoreInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITargetRestoreInfo::OAITargetRestoreInfo() {
    this->initializeModel();
}

OAITargetRestoreInfo::~OAITargetRestoreInfo() {}

void OAITargetRestoreInfo::initializeModel() {

    m_container_id_isSet = false;
    m_container_id_isValid = false;

    m_database_name_isSet = false;
    m_database_name_isValid = false;

    m_overwrite_option_isSet = false;
    m_overwrite_option_isValid = false;

    m_target_directory_mapping_isSet = false;
    m_target_directory_mapping_isValid = false;
}

void OAITargetRestoreInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITargetRestoreInfo::fromJsonObject(QJsonObject json) {

    m_container_id_isValid = ::OpenAPI::fromJsonValue(m_container_id, json[QString("containerId")]);
    m_container_id_isSet = !json[QString("containerId")].isNull() && m_container_id_isValid;

    m_database_name_isValid = ::OpenAPI::fromJsonValue(m_database_name, json[QString("databaseName")]);
    m_database_name_isSet = !json[QString("databaseName")].isNull() && m_database_name_isValid;

    m_overwrite_option_isValid = ::OpenAPI::fromJsonValue(m_overwrite_option, json[QString("overwriteOption")]);
    m_overwrite_option_isSet = !json[QString("overwriteOption")].isNull() && m_overwrite_option_isValid;

    m_target_directory_mapping_isValid = ::OpenAPI::fromJsonValue(m_target_directory_mapping, json[QString("targetDirectoryMapping")]);
    m_target_directory_mapping_isSet = !json[QString("targetDirectoryMapping")].isNull() && m_target_directory_mapping_isValid;
}

QString OAITargetRestoreInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITargetRestoreInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_container_id_isSet) {
        obj.insert(QString("containerId"), ::OpenAPI::toJsonValue(m_container_id));
    }
    if (m_database_name_isSet) {
        obj.insert(QString("databaseName"), ::OpenAPI::toJsonValue(m_database_name));
    }
    if (m_overwrite_option_isSet) {
        obj.insert(QString("overwriteOption"), ::OpenAPI::toJsonValue(m_overwrite_option));
    }
    if (m_target_directory_mapping.size() > 0) {
        obj.insert(QString("targetDirectoryMapping"), ::OpenAPI::toJsonValue(m_target_directory_mapping));
    }
    return obj;
}

QString OAITargetRestoreInfo::getContainerId() const {
    return m_container_id;
}
void OAITargetRestoreInfo::setContainerId(const QString &container_id) {
    m_container_id = container_id;
    m_container_id_isSet = true;
}

bool OAITargetRestoreInfo::is_container_id_Set() const{
    return m_container_id_isSet;
}

bool OAITargetRestoreInfo::is_container_id_Valid() const{
    return m_container_id_isValid;
}

QString OAITargetRestoreInfo::getDatabaseName() const {
    return m_database_name;
}
void OAITargetRestoreInfo::setDatabaseName(const QString &database_name) {
    m_database_name = database_name;
    m_database_name_isSet = true;
}

bool OAITargetRestoreInfo::is_database_name_Set() const{
    return m_database_name_isSet;
}

bool OAITargetRestoreInfo::is_database_name_Valid() const{
    return m_database_name_isValid;
}

QString OAITargetRestoreInfo::getOverwriteOption() const {
    return m_overwrite_option;
}
void OAITargetRestoreInfo::setOverwriteOption(const QString &overwrite_option) {
    m_overwrite_option = overwrite_option;
    m_overwrite_option_isSet = true;
}

bool OAITargetRestoreInfo::is_overwrite_option_Set() const{
    return m_overwrite_option_isSet;
}

bool OAITargetRestoreInfo::is_overwrite_option_Valid() const{
    return m_overwrite_option_isValid;
}

QMap<QString, QString> OAITargetRestoreInfo::getTargetDirectoryMapping() const {
    return m_target_directory_mapping;
}
void OAITargetRestoreInfo::setTargetDirectoryMapping(const QMap<QString, QString> &target_directory_mapping) {
    m_target_directory_mapping = target_directory_mapping;
    m_target_directory_mapping_isSet = true;
}

bool OAITargetRestoreInfo::is_target_directory_mapping_Set() const{
    return m_target_directory_mapping_isSet;
}

bool OAITargetRestoreInfo::is_target_directory_mapping_Valid() const{
    return m_target_directory_mapping_isValid;
}

bool OAITargetRestoreInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_container_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_database_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_overwrite_option_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_directory_mapping.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITargetRestoreInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
