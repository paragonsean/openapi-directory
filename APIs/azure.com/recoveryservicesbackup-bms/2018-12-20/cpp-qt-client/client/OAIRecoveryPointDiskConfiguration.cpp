/**
 * RecoveryServicesBackupClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-12-20
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRecoveryPointDiskConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRecoveryPointDiskConfiguration::OAIRecoveryPointDiskConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRecoveryPointDiskConfiguration::OAIRecoveryPointDiskConfiguration() {
    this->initializeModel();
}

OAIRecoveryPointDiskConfiguration::~OAIRecoveryPointDiskConfiguration() {}

void OAIRecoveryPointDiskConfiguration::initializeModel() {

    m_excluded_disk_list_isSet = false;
    m_excluded_disk_list_isValid = false;

    m_included_disk_list_isSet = false;
    m_included_disk_list_isValid = false;

    m_number_of_disks_attached_to_vm_isSet = false;
    m_number_of_disks_attached_to_vm_isValid = false;

    m_number_of_disks_included_in_backup_isSet = false;
    m_number_of_disks_included_in_backup_isValid = false;
}

void OAIRecoveryPointDiskConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRecoveryPointDiskConfiguration::fromJsonObject(QJsonObject json) {

    m_excluded_disk_list_isValid = ::OpenAPI::fromJsonValue(m_excluded_disk_list, json[QString("excludedDiskList")]);
    m_excluded_disk_list_isSet = !json[QString("excludedDiskList")].isNull() && m_excluded_disk_list_isValid;

    m_included_disk_list_isValid = ::OpenAPI::fromJsonValue(m_included_disk_list, json[QString("includedDiskList")]);
    m_included_disk_list_isSet = !json[QString("includedDiskList")].isNull() && m_included_disk_list_isValid;

    m_number_of_disks_attached_to_vm_isValid = ::OpenAPI::fromJsonValue(m_number_of_disks_attached_to_vm, json[QString("numberOfDisksAttachedToVm")]);
    m_number_of_disks_attached_to_vm_isSet = !json[QString("numberOfDisksAttachedToVm")].isNull() && m_number_of_disks_attached_to_vm_isValid;

    m_number_of_disks_included_in_backup_isValid = ::OpenAPI::fromJsonValue(m_number_of_disks_included_in_backup, json[QString("numberOfDisksIncludedInBackup")]);
    m_number_of_disks_included_in_backup_isSet = !json[QString("numberOfDisksIncludedInBackup")].isNull() && m_number_of_disks_included_in_backup_isValid;
}

QString OAIRecoveryPointDiskConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRecoveryPointDiskConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_excluded_disk_list.size() > 0) {
        obj.insert(QString("excludedDiskList"), ::OpenAPI::toJsonValue(m_excluded_disk_list));
    }
    if (m_included_disk_list.size() > 0) {
        obj.insert(QString("includedDiskList"), ::OpenAPI::toJsonValue(m_included_disk_list));
    }
    if (m_number_of_disks_attached_to_vm_isSet) {
        obj.insert(QString("numberOfDisksAttachedToVm"), ::OpenAPI::toJsonValue(m_number_of_disks_attached_to_vm));
    }
    if (m_number_of_disks_included_in_backup_isSet) {
        obj.insert(QString("numberOfDisksIncludedInBackup"), ::OpenAPI::toJsonValue(m_number_of_disks_included_in_backup));
    }
    return obj;
}

QList<OAIDiskInformation> OAIRecoveryPointDiskConfiguration::getExcludedDiskList() const {
    return m_excluded_disk_list;
}
void OAIRecoveryPointDiskConfiguration::setExcludedDiskList(const QList<OAIDiskInformation> &excluded_disk_list) {
    m_excluded_disk_list = excluded_disk_list;
    m_excluded_disk_list_isSet = true;
}

bool OAIRecoveryPointDiskConfiguration::is_excluded_disk_list_Set() const{
    return m_excluded_disk_list_isSet;
}

bool OAIRecoveryPointDiskConfiguration::is_excluded_disk_list_Valid() const{
    return m_excluded_disk_list_isValid;
}

QList<OAIDiskInformation> OAIRecoveryPointDiskConfiguration::getIncludedDiskList() const {
    return m_included_disk_list;
}
void OAIRecoveryPointDiskConfiguration::setIncludedDiskList(const QList<OAIDiskInformation> &included_disk_list) {
    m_included_disk_list = included_disk_list;
    m_included_disk_list_isSet = true;
}

bool OAIRecoveryPointDiskConfiguration::is_included_disk_list_Set() const{
    return m_included_disk_list_isSet;
}

bool OAIRecoveryPointDiskConfiguration::is_included_disk_list_Valid() const{
    return m_included_disk_list_isValid;
}

qint32 OAIRecoveryPointDiskConfiguration::getNumberOfDisksAttachedToVm() const {
    return m_number_of_disks_attached_to_vm;
}
void OAIRecoveryPointDiskConfiguration::setNumberOfDisksAttachedToVm(const qint32 &number_of_disks_attached_to_vm) {
    m_number_of_disks_attached_to_vm = number_of_disks_attached_to_vm;
    m_number_of_disks_attached_to_vm_isSet = true;
}

bool OAIRecoveryPointDiskConfiguration::is_number_of_disks_attached_to_vm_Set() const{
    return m_number_of_disks_attached_to_vm_isSet;
}

bool OAIRecoveryPointDiskConfiguration::is_number_of_disks_attached_to_vm_Valid() const{
    return m_number_of_disks_attached_to_vm_isValid;
}

qint32 OAIRecoveryPointDiskConfiguration::getNumberOfDisksIncludedInBackup() const {
    return m_number_of_disks_included_in_backup;
}
void OAIRecoveryPointDiskConfiguration::setNumberOfDisksIncludedInBackup(const qint32 &number_of_disks_included_in_backup) {
    m_number_of_disks_included_in_backup = number_of_disks_included_in_backup;
    m_number_of_disks_included_in_backup_isSet = true;
}

bool OAIRecoveryPointDiskConfiguration::is_number_of_disks_included_in_backup_Set() const{
    return m_number_of_disks_included_in_backup_isSet;
}

bool OAIRecoveryPointDiskConfiguration::is_number_of_disks_included_in_backup_Valid() const{
    return m_number_of_disks_included_in_backup_isValid;
}

bool OAIRecoveryPointDiskConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_excluded_disk_list.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_included_disk_list.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_disks_attached_to_vm_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_disks_included_in_backup_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRecoveryPointDiskConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
