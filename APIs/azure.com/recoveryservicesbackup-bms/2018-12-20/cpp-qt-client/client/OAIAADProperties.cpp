/**
 * RecoveryServicesBackupClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-12-20
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAADProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAADProperties::OAIAADProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAADProperties::OAIAADProperties() {
    this->initializeModel();
}

OAIAADProperties::~OAIAADProperties() {}

void OAIAADProperties::initializeModel() {

    m_audience_isSet = false;
    m_audience_isValid = false;

    m_authority_isSet = false;
    m_authority_isValid = false;

    m_service_principal_client_id_isSet = false;
    m_service_principal_client_id_isValid = false;

    m_service_principal_object_id_isSet = false;
    m_service_principal_object_id_isValid = false;

    m_tenant_id_isSet = false;
    m_tenant_id_isValid = false;
}

void OAIAADProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAADProperties::fromJsonObject(QJsonObject json) {

    m_audience_isValid = ::OpenAPI::fromJsonValue(m_audience, json[QString("audience")]);
    m_audience_isSet = !json[QString("audience")].isNull() && m_audience_isValid;

    m_authority_isValid = ::OpenAPI::fromJsonValue(m_authority, json[QString("authority")]);
    m_authority_isSet = !json[QString("authority")].isNull() && m_authority_isValid;

    m_service_principal_client_id_isValid = ::OpenAPI::fromJsonValue(m_service_principal_client_id, json[QString("servicePrincipalClientId")]);
    m_service_principal_client_id_isSet = !json[QString("servicePrincipalClientId")].isNull() && m_service_principal_client_id_isValid;

    m_service_principal_object_id_isValid = ::OpenAPI::fromJsonValue(m_service_principal_object_id, json[QString("servicePrincipalObjectId")]);
    m_service_principal_object_id_isSet = !json[QString("servicePrincipalObjectId")].isNull() && m_service_principal_object_id_isValid;

    m_tenant_id_isValid = ::OpenAPI::fromJsonValue(m_tenant_id, json[QString("tenantId")]);
    m_tenant_id_isSet = !json[QString("tenantId")].isNull() && m_tenant_id_isValid;
}

QString OAIAADProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAADProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_audience_isSet) {
        obj.insert(QString("audience"), ::OpenAPI::toJsonValue(m_audience));
    }
    if (m_authority_isSet) {
        obj.insert(QString("authority"), ::OpenAPI::toJsonValue(m_authority));
    }
    if (m_service_principal_client_id_isSet) {
        obj.insert(QString("servicePrincipalClientId"), ::OpenAPI::toJsonValue(m_service_principal_client_id));
    }
    if (m_service_principal_object_id_isSet) {
        obj.insert(QString("servicePrincipalObjectId"), ::OpenAPI::toJsonValue(m_service_principal_object_id));
    }
    if (m_tenant_id_isSet) {
        obj.insert(QString("tenantId"), ::OpenAPI::toJsonValue(m_tenant_id));
    }
    return obj;
}

QString OAIAADProperties::getAudience() const {
    return m_audience;
}
void OAIAADProperties::setAudience(const QString &audience) {
    m_audience = audience;
    m_audience_isSet = true;
}

bool OAIAADProperties::is_audience_Set() const{
    return m_audience_isSet;
}

bool OAIAADProperties::is_audience_Valid() const{
    return m_audience_isValid;
}

QString OAIAADProperties::getAuthority() const {
    return m_authority;
}
void OAIAADProperties::setAuthority(const QString &authority) {
    m_authority = authority;
    m_authority_isSet = true;
}

bool OAIAADProperties::is_authority_Set() const{
    return m_authority_isSet;
}

bool OAIAADProperties::is_authority_Valid() const{
    return m_authority_isValid;
}

QString OAIAADProperties::getServicePrincipalClientId() const {
    return m_service_principal_client_id;
}
void OAIAADProperties::setServicePrincipalClientId(const QString &service_principal_client_id) {
    m_service_principal_client_id = service_principal_client_id;
    m_service_principal_client_id_isSet = true;
}

bool OAIAADProperties::is_service_principal_client_id_Set() const{
    return m_service_principal_client_id_isSet;
}

bool OAIAADProperties::is_service_principal_client_id_Valid() const{
    return m_service_principal_client_id_isValid;
}

QString OAIAADProperties::getServicePrincipalObjectId() const {
    return m_service_principal_object_id;
}
void OAIAADProperties::setServicePrincipalObjectId(const QString &service_principal_object_id) {
    m_service_principal_object_id = service_principal_object_id;
    m_service_principal_object_id_isSet = true;
}

bool OAIAADProperties::is_service_principal_object_id_Set() const{
    return m_service_principal_object_id_isSet;
}

bool OAIAADProperties::is_service_principal_object_id_Valid() const{
    return m_service_principal_object_id_isValid;
}

QString OAIAADProperties::getTenantId() const {
    return m_tenant_id;
}
void OAIAADProperties::setTenantId(const QString &tenant_id) {
    m_tenant_id = tenant_id;
    m_tenant_id_isSet = true;
}

bool OAIAADProperties::is_tenant_id_Set() const{
    return m_tenant_id_isSet;
}

bool OAIAADProperties::is_tenant_id_Valid() const{
    return m_tenant_id_isValid;
}

bool OAIAADProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_audience_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_authority_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_principal_client_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_principal_object_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tenant_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAADProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
