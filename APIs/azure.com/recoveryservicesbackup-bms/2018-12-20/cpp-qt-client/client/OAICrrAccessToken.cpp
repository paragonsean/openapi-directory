/**
 * RecoveryServicesBackupClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-12-20
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICrrAccessToken.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICrrAccessToken::OAICrrAccessToken(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICrrAccessToken::OAICrrAccessToken() {
    this->initializeModel();
}

OAICrrAccessToken::~OAICrrAccessToken() {}

void OAICrrAccessToken::initializeModel() {

    m_access_token_string_isSet = false;
    m_access_token_string_isValid = false;

    m_backup_management_type_isSet = false;
    m_backup_management_type_isValid = false;

    m_container_name_isSet = false;
    m_container_name_isValid = false;

    m_container_type_isSet = false;
    m_container_type_isValid = false;

    m_coordinator_service_stamp_id_isSet = false;
    m_coordinator_service_stamp_id_isValid = false;

    m_coordinator_service_stamp_uri_isSet = false;
    m_coordinator_service_stamp_uri_isValid = false;

    m_datasource_container_name_isSet = false;
    m_datasource_container_name_isValid = false;

    m_datasource_id_isSet = false;
    m_datasource_id_isValid = false;

    m_datasource_name_isSet = false;
    m_datasource_name_isValid = false;

    m_datasource_type_isSet = false;
    m_datasource_type_isValid = false;

    m_protection_service_stamp_id_isSet = false;
    m_protection_service_stamp_id_isValid = false;

    m_protection_service_stamp_uri_isSet = false;
    m_protection_service_stamp_uri_isValid = false;

    m_recovery_point_id_isSet = false;
    m_recovery_point_id_isValid = false;

    m_recovery_point_time_isSet = false;
    m_recovery_point_time_isValid = false;

    m_resource_group_name_isSet = false;
    m_resource_group_name_isValid = false;

    m_resource_id_isSet = false;
    m_resource_id_isValid = false;

    m_resource_name_isSet = false;
    m_resource_name_isValid = false;

    m_subscription_id_isSet = false;
    m_subscription_id_isValid = false;

    m_token_extended_information_isSet = false;
    m_token_extended_information_isValid = false;
}

void OAICrrAccessToken::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICrrAccessToken::fromJsonObject(QJsonObject json) {

    m_access_token_string_isValid = ::OpenAPI::fromJsonValue(m_access_token_string, json[QString("accessTokenString")]);
    m_access_token_string_isSet = !json[QString("accessTokenString")].isNull() && m_access_token_string_isValid;

    m_backup_management_type_isValid = ::OpenAPI::fromJsonValue(m_backup_management_type, json[QString("backupManagementType")]);
    m_backup_management_type_isSet = !json[QString("backupManagementType")].isNull() && m_backup_management_type_isValid;

    m_container_name_isValid = ::OpenAPI::fromJsonValue(m_container_name, json[QString("containerName")]);
    m_container_name_isSet = !json[QString("containerName")].isNull() && m_container_name_isValid;

    m_container_type_isValid = ::OpenAPI::fromJsonValue(m_container_type, json[QString("containerType")]);
    m_container_type_isSet = !json[QString("containerType")].isNull() && m_container_type_isValid;

    m_coordinator_service_stamp_id_isValid = ::OpenAPI::fromJsonValue(m_coordinator_service_stamp_id, json[QString("coordinatorServiceStampId")]);
    m_coordinator_service_stamp_id_isSet = !json[QString("coordinatorServiceStampId")].isNull() && m_coordinator_service_stamp_id_isValid;

    m_coordinator_service_stamp_uri_isValid = ::OpenAPI::fromJsonValue(m_coordinator_service_stamp_uri, json[QString("coordinatorServiceStampUri")]);
    m_coordinator_service_stamp_uri_isSet = !json[QString("coordinatorServiceStampUri")].isNull() && m_coordinator_service_stamp_uri_isValid;

    m_datasource_container_name_isValid = ::OpenAPI::fromJsonValue(m_datasource_container_name, json[QString("datasourceContainerName")]);
    m_datasource_container_name_isSet = !json[QString("datasourceContainerName")].isNull() && m_datasource_container_name_isValid;

    m_datasource_id_isValid = ::OpenAPI::fromJsonValue(m_datasource_id, json[QString("datasourceId")]);
    m_datasource_id_isSet = !json[QString("datasourceId")].isNull() && m_datasource_id_isValid;

    m_datasource_name_isValid = ::OpenAPI::fromJsonValue(m_datasource_name, json[QString("datasourceName")]);
    m_datasource_name_isSet = !json[QString("datasourceName")].isNull() && m_datasource_name_isValid;

    m_datasource_type_isValid = ::OpenAPI::fromJsonValue(m_datasource_type, json[QString("datasourceType")]);
    m_datasource_type_isSet = !json[QString("datasourceType")].isNull() && m_datasource_type_isValid;

    m_protection_service_stamp_id_isValid = ::OpenAPI::fromJsonValue(m_protection_service_stamp_id, json[QString("protectionServiceStampId")]);
    m_protection_service_stamp_id_isSet = !json[QString("protectionServiceStampId")].isNull() && m_protection_service_stamp_id_isValid;

    m_protection_service_stamp_uri_isValid = ::OpenAPI::fromJsonValue(m_protection_service_stamp_uri, json[QString("protectionServiceStampUri")]);
    m_protection_service_stamp_uri_isSet = !json[QString("protectionServiceStampUri")].isNull() && m_protection_service_stamp_uri_isValid;

    m_recovery_point_id_isValid = ::OpenAPI::fromJsonValue(m_recovery_point_id, json[QString("recoveryPointId")]);
    m_recovery_point_id_isSet = !json[QString("recoveryPointId")].isNull() && m_recovery_point_id_isValid;

    m_recovery_point_time_isValid = ::OpenAPI::fromJsonValue(m_recovery_point_time, json[QString("recoveryPointTime")]);
    m_recovery_point_time_isSet = !json[QString("recoveryPointTime")].isNull() && m_recovery_point_time_isValid;

    m_resource_group_name_isValid = ::OpenAPI::fromJsonValue(m_resource_group_name, json[QString("resourceGroupName")]);
    m_resource_group_name_isSet = !json[QString("resourceGroupName")].isNull() && m_resource_group_name_isValid;

    m_resource_id_isValid = ::OpenAPI::fromJsonValue(m_resource_id, json[QString("resourceId")]);
    m_resource_id_isSet = !json[QString("resourceId")].isNull() && m_resource_id_isValid;

    m_resource_name_isValid = ::OpenAPI::fromJsonValue(m_resource_name, json[QString("resourceName")]);
    m_resource_name_isSet = !json[QString("resourceName")].isNull() && m_resource_name_isValid;

    m_subscription_id_isValid = ::OpenAPI::fromJsonValue(m_subscription_id, json[QString("subscriptionId")]);
    m_subscription_id_isSet = !json[QString("subscriptionId")].isNull() && m_subscription_id_isValid;

    m_token_extended_information_isValid = ::OpenAPI::fromJsonValue(m_token_extended_information, json[QString("tokenExtendedInformation")]);
    m_token_extended_information_isSet = !json[QString("tokenExtendedInformation")].isNull() && m_token_extended_information_isValid;
}

QString OAICrrAccessToken::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICrrAccessToken::asJsonObject() const {
    QJsonObject obj;
    if (m_access_token_string_isSet) {
        obj.insert(QString("accessTokenString"), ::OpenAPI::toJsonValue(m_access_token_string));
    }
    if (m_backup_management_type_isSet) {
        obj.insert(QString("backupManagementType"), ::OpenAPI::toJsonValue(m_backup_management_type));
    }
    if (m_container_name_isSet) {
        obj.insert(QString("containerName"), ::OpenAPI::toJsonValue(m_container_name));
    }
    if (m_container_type_isSet) {
        obj.insert(QString("containerType"), ::OpenAPI::toJsonValue(m_container_type));
    }
    if (m_coordinator_service_stamp_id_isSet) {
        obj.insert(QString("coordinatorServiceStampId"), ::OpenAPI::toJsonValue(m_coordinator_service_stamp_id));
    }
    if (m_coordinator_service_stamp_uri_isSet) {
        obj.insert(QString("coordinatorServiceStampUri"), ::OpenAPI::toJsonValue(m_coordinator_service_stamp_uri));
    }
    if (m_datasource_container_name_isSet) {
        obj.insert(QString("datasourceContainerName"), ::OpenAPI::toJsonValue(m_datasource_container_name));
    }
    if (m_datasource_id_isSet) {
        obj.insert(QString("datasourceId"), ::OpenAPI::toJsonValue(m_datasource_id));
    }
    if (m_datasource_name_isSet) {
        obj.insert(QString("datasourceName"), ::OpenAPI::toJsonValue(m_datasource_name));
    }
    if (m_datasource_type_isSet) {
        obj.insert(QString("datasourceType"), ::OpenAPI::toJsonValue(m_datasource_type));
    }
    if (m_protection_service_stamp_id_isSet) {
        obj.insert(QString("protectionServiceStampId"), ::OpenAPI::toJsonValue(m_protection_service_stamp_id));
    }
    if (m_protection_service_stamp_uri_isSet) {
        obj.insert(QString("protectionServiceStampUri"), ::OpenAPI::toJsonValue(m_protection_service_stamp_uri));
    }
    if (m_recovery_point_id_isSet) {
        obj.insert(QString("recoveryPointId"), ::OpenAPI::toJsonValue(m_recovery_point_id));
    }
    if (m_recovery_point_time_isSet) {
        obj.insert(QString("recoveryPointTime"), ::OpenAPI::toJsonValue(m_recovery_point_time));
    }
    if (m_resource_group_name_isSet) {
        obj.insert(QString("resourceGroupName"), ::OpenAPI::toJsonValue(m_resource_group_name));
    }
    if (m_resource_id_isSet) {
        obj.insert(QString("resourceId"), ::OpenAPI::toJsonValue(m_resource_id));
    }
    if (m_resource_name_isSet) {
        obj.insert(QString("resourceName"), ::OpenAPI::toJsonValue(m_resource_name));
    }
    if (m_subscription_id_isSet) {
        obj.insert(QString("subscriptionId"), ::OpenAPI::toJsonValue(m_subscription_id));
    }
    if (m_token_extended_information_isSet) {
        obj.insert(QString("tokenExtendedInformation"), ::OpenAPI::toJsonValue(m_token_extended_information));
    }
    return obj;
}

QString OAICrrAccessToken::getAccessTokenString() const {
    return m_access_token_string;
}
void OAICrrAccessToken::setAccessTokenString(const QString &access_token_string) {
    m_access_token_string = access_token_string;
    m_access_token_string_isSet = true;
}

bool OAICrrAccessToken::is_access_token_string_Set() const{
    return m_access_token_string_isSet;
}

bool OAICrrAccessToken::is_access_token_string_Valid() const{
    return m_access_token_string_isValid;
}

QString OAICrrAccessToken::getBackupManagementType() const {
    return m_backup_management_type;
}
void OAICrrAccessToken::setBackupManagementType(const QString &backup_management_type) {
    m_backup_management_type = backup_management_type;
    m_backup_management_type_isSet = true;
}

bool OAICrrAccessToken::is_backup_management_type_Set() const{
    return m_backup_management_type_isSet;
}

bool OAICrrAccessToken::is_backup_management_type_Valid() const{
    return m_backup_management_type_isValid;
}

QString OAICrrAccessToken::getContainerName() const {
    return m_container_name;
}
void OAICrrAccessToken::setContainerName(const QString &container_name) {
    m_container_name = container_name;
    m_container_name_isSet = true;
}

bool OAICrrAccessToken::is_container_name_Set() const{
    return m_container_name_isSet;
}

bool OAICrrAccessToken::is_container_name_Valid() const{
    return m_container_name_isValid;
}

QString OAICrrAccessToken::getContainerType() const {
    return m_container_type;
}
void OAICrrAccessToken::setContainerType(const QString &container_type) {
    m_container_type = container_type;
    m_container_type_isSet = true;
}

bool OAICrrAccessToken::is_container_type_Set() const{
    return m_container_type_isSet;
}

bool OAICrrAccessToken::is_container_type_Valid() const{
    return m_container_type_isValid;
}

QString OAICrrAccessToken::getCoordinatorServiceStampId() const {
    return m_coordinator_service_stamp_id;
}
void OAICrrAccessToken::setCoordinatorServiceStampId(const QString &coordinator_service_stamp_id) {
    m_coordinator_service_stamp_id = coordinator_service_stamp_id;
    m_coordinator_service_stamp_id_isSet = true;
}

bool OAICrrAccessToken::is_coordinator_service_stamp_id_Set() const{
    return m_coordinator_service_stamp_id_isSet;
}

bool OAICrrAccessToken::is_coordinator_service_stamp_id_Valid() const{
    return m_coordinator_service_stamp_id_isValid;
}

QString OAICrrAccessToken::getCoordinatorServiceStampUri() const {
    return m_coordinator_service_stamp_uri;
}
void OAICrrAccessToken::setCoordinatorServiceStampUri(const QString &coordinator_service_stamp_uri) {
    m_coordinator_service_stamp_uri = coordinator_service_stamp_uri;
    m_coordinator_service_stamp_uri_isSet = true;
}

bool OAICrrAccessToken::is_coordinator_service_stamp_uri_Set() const{
    return m_coordinator_service_stamp_uri_isSet;
}

bool OAICrrAccessToken::is_coordinator_service_stamp_uri_Valid() const{
    return m_coordinator_service_stamp_uri_isValid;
}

QString OAICrrAccessToken::getDatasourceContainerName() const {
    return m_datasource_container_name;
}
void OAICrrAccessToken::setDatasourceContainerName(const QString &datasource_container_name) {
    m_datasource_container_name = datasource_container_name;
    m_datasource_container_name_isSet = true;
}

bool OAICrrAccessToken::is_datasource_container_name_Set() const{
    return m_datasource_container_name_isSet;
}

bool OAICrrAccessToken::is_datasource_container_name_Valid() const{
    return m_datasource_container_name_isValid;
}

QString OAICrrAccessToken::getDatasourceId() const {
    return m_datasource_id;
}
void OAICrrAccessToken::setDatasourceId(const QString &datasource_id) {
    m_datasource_id = datasource_id;
    m_datasource_id_isSet = true;
}

bool OAICrrAccessToken::is_datasource_id_Set() const{
    return m_datasource_id_isSet;
}

bool OAICrrAccessToken::is_datasource_id_Valid() const{
    return m_datasource_id_isValid;
}

QString OAICrrAccessToken::getDatasourceName() const {
    return m_datasource_name;
}
void OAICrrAccessToken::setDatasourceName(const QString &datasource_name) {
    m_datasource_name = datasource_name;
    m_datasource_name_isSet = true;
}

bool OAICrrAccessToken::is_datasource_name_Set() const{
    return m_datasource_name_isSet;
}

bool OAICrrAccessToken::is_datasource_name_Valid() const{
    return m_datasource_name_isValid;
}

QString OAICrrAccessToken::getDatasourceType() const {
    return m_datasource_type;
}
void OAICrrAccessToken::setDatasourceType(const QString &datasource_type) {
    m_datasource_type = datasource_type;
    m_datasource_type_isSet = true;
}

bool OAICrrAccessToken::is_datasource_type_Set() const{
    return m_datasource_type_isSet;
}

bool OAICrrAccessToken::is_datasource_type_Valid() const{
    return m_datasource_type_isValid;
}

QString OAICrrAccessToken::getProtectionServiceStampId() const {
    return m_protection_service_stamp_id;
}
void OAICrrAccessToken::setProtectionServiceStampId(const QString &protection_service_stamp_id) {
    m_protection_service_stamp_id = protection_service_stamp_id;
    m_protection_service_stamp_id_isSet = true;
}

bool OAICrrAccessToken::is_protection_service_stamp_id_Set() const{
    return m_protection_service_stamp_id_isSet;
}

bool OAICrrAccessToken::is_protection_service_stamp_id_Valid() const{
    return m_protection_service_stamp_id_isValid;
}

QString OAICrrAccessToken::getProtectionServiceStampUri() const {
    return m_protection_service_stamp_uri;
}
void OAICrrAccessToken::setProtectionServiceStampUri(const QString &protection_service_stamp_uri) {
    m_protection_service_stamp_uri = protection_service_stamp_uri;
    m_protection_service_stamp_uri_isSet = true;
}

bool OAICrrAccessToken::is_protection_service_stamp_uri_Set() const{
    return m_protection_service_stamp_uri_isSet;
}

bool OAICrrAccessToken::is_protection_service_stamp_uri_Valid() const{
    return m_protection_service_stamp_uri_isValid;
}

QString OAICrrAccessToken::getRecoveryPointId() const {
    return m_recovery_point_id;
}
void OAICrrAccessToken::setRecoveryPointId(const QString &recovery_point_id) {
    m_recovery_point_id = recovery_point_id;
    m_recovery_point_id_isSet = true;
}

bool OAICrrAccessToken::is_recovery_point_id_Set() const{
    return m_recovery_point_id_isSet;
}

bool OAICrrAccessToken::is_recovery_point_id_Valid() const{
    return m_recovery_point_id_isValid;
}

QString OAICrrAccessToken::getRecoveryPointTime() const {
    return m_recovery_point_time;
}
void OAICrrAccessToken::setRecoveryPointTime(const QString &recovery_point_time) {
    m_recovery_point_time = recovery_point_time;
    m_recovery_point_time_isSet = true;
}

bool OAICrrAccessToken::is_recovery_point_time_Set() const{
    return m_recovery_point_time_isSet;
}

bool OAICrrAccessToken::is_recovery_point_time_Valid() const{
    return m_recovery_point_time_isValid;
}

QString OAICrrAccessToken::getResourceGroupName() const {
    return m_resource_group_name;
}
void OAICrrAccessToken::setResourceGroupName(const QString &resource_group_name) {
    m_resource_group_name = resource_group_name;
    m_resource_group_name_isSet = true;
}

bool OAICrrAccessToken::is_resource_group_name_Set() const{
    return m_resource_group_name_isSet;
}

bool OAICrrAccessToken::is_resource_group_name_Valid() const{
    return m_resource_group_name_isValid;
}

QString OAICrrAccessToken::getResourceId() const {
    return m_resource_id;
}
void OAICrrAccessToken::setResourceId(const QString &resource_id) {
    m_resource_id = resource_id;
    m_resource_id_isSet = true;
}

bool OAICrrAccessToken::is_resource_id_Set() const{
    return m_resource_id_isSet;
}

bool OAICrrAccessToken::is_resource_id_Valid() const{
    return m_resource_id_isValid;
}

QString OAICrrAccessToken::getResourceName() const {
    return m_resource_name;
}
void OAICrrAccessToken::setResourceName(const QString &resource_name) {
    m_resource_name = resource_name;
    m_resource_name_isSet = true;
}

bool OAICrrAccessToken::is_resource_name_Set() const{
    return m_resource_name_isSet;
}

bool OAICrrAccessToken::is_resource_name_Valid() const{
    return m_resource_name_isValid;
}

QString OAICrrAccessToken::getSubscriptionId() const {
    return m_subscription_id;
}
void OAICrrAccessToken::setSubscriptionId(const QString &subscription_id) {
    m_subscription_id = subscription_id;
    m_subscription_id_isSet = true;
}

bool OAICrrAccessToken::is_subscription_id_Set() const{
    return m_subscription_id_isSet;
}

bool OAICrrAccessToken::is_subscription_id_Valid() const{
    return m_subscription_id_isValid;
}

QString OAICrrAccessToken::getTokenExtendedInformation() const {
    return m_token_extended_information;
}
void OAICrrAccessToken::setTokenExtendedInformation(const QString &token_extended_information) {
    m_token_extended_information = token_extended_information;
    m_token_extended_information_isSet = true;
}

bool OAICrrAccessToken::is_token_extended_information_Set() const{
    return m_token_extended_information_isSet;
}

bool OAICrrAccessToken::is_token_extended_information_Valid() const{
    return m_token_extended_information_isValid;
}

bool OAICrrAccessToken::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_access_token_string_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_backup_management_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_container_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_container_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_coordinator_service_stamp_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_coordinator_service_stamp_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_datasource_container_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_datasource_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_datasource_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_datasource_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protection_service_stamp_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protection_service_stamp_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recovery_point_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recovery_point_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_group_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscription_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_extended_information_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICrrAccessToken::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
