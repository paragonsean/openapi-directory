/**
 * RecoveryServicesBackupClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-12-20
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIClientScriptForConnect.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIClientScriptForConnect::OAIClientScriptForConnect(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIClientScriptForConnect::OAIClientScriptForConnect() {
    this->initializeModel();
}

OAIClientScriptForConnect::~OAIClientScriptForConnect() {}

void OAIClientScriptForConnect::initializeModel() {

    m_os_type_isSet = false;
    m_os_type_isValid = false;

    m_script_content_isSet = false;
    m_script_content_isValid = false;

    m_script_extension_isSet = false;
    m_script_extension_isValid = false;

    m_script_name_suffix_isSet = false;
    m_script_name_suffix_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIClientScriptForConnect::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIClientScriptForConnect::fromJsonObject(QJsonObject json) {

    m_os_type_isValid = ::OpenAPI::fromJsonValue(m_os_type, json[QString("osType")]);
    m_os_type_isSet = !json[QString("osType")].isNull() && m_os_type_isValid;

    m_script_content_isValid = ::OpenAPI::fromJsonValue(m_script_content, json[QString("scriptContent")]);
    m_script_content_isSet = !json[QString("scriptContent")].isNull() && m_script_content_isValid;

    m_script_extension_isValid = ::OpenAPI::fromJsonValue(m_script_extension, json[QString("scriptExtension")]);
    m_script_extension_isSet = !json[QString("scriptExtension")].isNull() && m_script_extension_isValid;

    m_script_name_suffix_isValid = ::OpenAPI::fromJsonValue(m_script_name_suffix, json[QString("scriptNameSuffix")]);
    m_script_name_suffix_isSet = !json[QString("scriptNameSuffix")].isNull() && m_script_name_suffix_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIClientScriptForConnect::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIClientScriptForConnect::asJsonObject() const {
    QJsonObject obj;
    if (m_os_type_isSet) {
        obj.insert(QString("osType"), ::OpenAPI::toJsonValue(m_os_type));
    }
    if (m_script_content_isSet) {
        obj.insert(QString("scriptContent"), ::OpenAPI::toJsonValue(m_script_content));
    }
    if (m_script_extension_isSet) {
        obj.insert(QString("scriptExtension"), ::OpenAPI::toJsonValue(m_script_extension));
    }
    if (m_script_name_suffix_isSet) {
        obj.insert(QString("scriptNameSuffix"), ::OpenAPI::toJsonValue(m_script_name_suffix));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIClientScriptForConnect::getOsType() const {
    return m_os_type;
}
void OAIClientScriptForConnect::setOsType(const QString &os_type) {
    m_os_type = os_type;
    m_os_type_isSet = true;
}

bool OAIClientScriptForConnect::is_os_type_Set() const{
    return m_os_type_isSet;
}

bool OAIClientScriptForConnect::is_os_type_Valid() const{
    return m_os_type_isValid;
}

QString OAIClientScriptForConnect::getScriptContent() const {
    return m_script_content;
}
void OAIClientScriptForConnect::setScriptContent(const QString &script_content) {
    m_script_content = script_content;
    m_script_content_isSet = true;
}

bool OAIClientScriptForConnect::is_script_content_Set() const{
    return m_script_content_isSet;
}

bool OAIClientScriptForConnect::is_script_content_Valid() const{
    return m_script_content_isValid;
}

QString OAIClientScriptForConnect::getScriptExtension() const {
    return m_script_extension;
}
void OAIClientScriptForConnect::setScriptExtension(const QString &script_extension) {
    m_script_extension = script_extension;
    m_script_extension_isSet = true;
}

bool OAIClientScriptForConnect::is_script_extension_Set() const{
    return m_script_extension_isSet;
}

bool OAIClientScriptForConnect::is_script_extension_Valid() const{
    return m_script_extension_isValid;
}

QString OAIClientScriptForConnect::getScriptNameSuffix() const {
    return m_script_name_suffix;
}
void OAIClientScriptForConnect::setScriptNameSuffix(const QString &script_name_suffix) {
    m_script_name_suffix = script_name_suffix;
    m_script_name_suffix_isSet = true;
}

bool OAIClientScriptForConnect::is_script_name_suffix_Set() const{
    return m_script_name_suffix_isSet;
}

bool OAIClientScriptForConnect::is_script_name_suffix_Valid() const{
    return m_script_name_suffix_isValid;
}

QString OAIClientScriptForConnect::getUrl() const {
    return m_url;
}
void OAIClientScriptForConnect::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIClientScriptForConnect::is_url_Set() const{
    return m_url_isSet;
}

bool OAIClientScriptForConnect::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIClientScriptForConnect::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_os_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_script_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_script_extension_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_script_name_suffix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIClientScriptForConnect::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
