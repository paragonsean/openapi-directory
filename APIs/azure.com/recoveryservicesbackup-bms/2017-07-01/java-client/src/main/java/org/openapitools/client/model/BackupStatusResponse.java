/*
 * RecoveryServicesBackupClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-07-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * BackupStatus response.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:09:02.098697-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BackupStatusResponse {
  public static final String SERIALIZED_NAME_CONTAINER_NAME = "containerName";
  @SerializedName(SERIALIZED_NAME_CONTAINER_NAME)
  private String containerName;

  public static final String SERIALIZED_NAME_ERROR_CODE = "errorCode";
  @SerializedName(SERIALIZED_NAME_ERROR_CODE)
  private String errorCode;

  public static final String SERIALIZED_NAME_ERROR_MESSAGE = "errorMessage";
  @SerializedName(SERIALIZED_NAME_ERROR_MESSAGE)
  private String errorMessage;

  /**
   * Specifies the fabric name - Azure or AD
   */
  @JsonAdapter(FabricNameEnum.Adapter.class)
  public enum FabricNameEnum {
    INVALID("Invalid"),
    
    AZURE("Azure");

    private String value;

    FabricNameEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FabricNameEnum fromValue(String value) {
      for (FabricNameEnum b : FabricNameEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FabricNameEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FabricNameEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FabricNameEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FabricNameEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FabricNameEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FABRIC_NAME = "fabricName";
  @SerializedName(SERIALIZED_NAME_FABRIC_NAME)
  private FabricNameEnum fabricName;

  public static final String SERIALIZED_NAME_POLICY_NAME = "policyName";
  @SerializedName(SERIALIZED_NAME_POLICY_NAME)
  private String policyName;

  public static final String SERIALIZED_NAME_PROTECTED_ITEM_NAME = "protectedItemName";
  @SerializedName(SERIALIZED_NAME_PROTECTED_ITEM_NAME)
  private String protectedItemName;

  /**
   * Specifies whether the container is registered or not
   */
  @JsonAdapter(ProtectionStatusEnum.Adapter.class)
  public enum ProtectionStatusEnum {
    INVALID("Invalid"),
    
    NOT_PROTECTED("NotProtected"),
    
    PROTECTING("Protecting"),
    
    PROTECTED("Protected"),
    
    PROTECTION_FAILED("ProtectionFailed");

    private String value;

    ProtectionStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProtectionStatusEnum fromValue(String value) {
      for (ProtectionStatusEnum b : ProtectionStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProtectionStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProtectionStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProtectionStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProtectionStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProtectionStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROTECTION_STATUS = "protectionStatus";
  @SerializedName(SERIALIZED_NAME_PROTECTION_STATUS)
  private ProtectionStatusEnum protectionStatus;

  public static final String SERIALIZED_NAME_REGISTRATION_STATUS = "registrationStatus";
  @SerializedName(SERIALIZED_NAME_REGISTRATION_STATUS)
  private String registrationStatus;

  public static final String SERIALIZED_NAME_VAULT_ID = "vaultId";
  @SerializedName(SERIALIZED_NAME_VAULT_ID)
  private String vaultId;

  public BackupStatusResponse() {
  }

  public BackupStatusResponse containerName(String containerName) {
    this.containerName = containerName;
    return this;
  }

  /**
   * Specifies the product specific container name. E.g. iaasvmcontainer;iaasvmcontainer;csname;vmname.
   * @return containerName
   */
  @javax.annotation.Nullable
  public String getContainerName() {
    return containerName;
  }

  public void setContainerName(String containerName) {
    this.containerName = containerName;
  }


  public BackupStatusResponse errorCode(String errorCode) {
    this.errorCode = errorCode;
    return this;
  }

  /**
   * ErrorCode in case of intent failed
   * @return errorCode
   */
  @javax.annotation.Nullable
  public String getErrorCode() {
    return errorCode;
  }

  public void setErrorCode(String errorCode) {
    this.errorCode = errorCode;
  }


  public BackupStatusResponse errorMessage(String errorMessage) {
    this.errorMessage = errorMessage;
    return this;
  }

  /**
   * ErrorMessage in case of intent failed.
   * @return errorMessage
   */
  @javax.annotation.Nullable
  public String getErrorMessage() {
    return errorMessage;
  }

  public void setErrorMessage(String errorMessage) {
    this.errorMessage = errorMessage;
  }


  public BackupStatusResponse fabricName(FabricNameEnum fabricName) {
    this.fabricName = fabricName;
    return this;
  }

  /**
   * Specifies the fabric name - Azure or AD
   * @return fabricName
   */
  @javax.annotation.Nullable
  public FabricNameEnum getFabricName() {
    return fabricName;
  }

  public void setFabricName(FabricNameEnum fabricName) {
    this.fabricName = fabricName;
  }


  public BackupStatusResponse policyName(String policyName) {
    this.policyName = policyName;
    return this;
  }

  /**
   * Specifies the policy name which is used for protection
   * @return policyName
   */
  @javax.annotation.Nullable
  public String getPolicyName() {
    return policyName;
  }

  public void setPolicyName(String policyName) {
    this.policyName = policyName;
  }


  public BackupStatusResponse protectedItemName(String protectedItemName) {
    this.protectedItemName = protectedItemName;
    return this;
  }

  /**
   * Specifies the product specific ds name. E.g. vm;iaasvmcontainer;csname;vmname.
   * @return protectedItemName
   */
  @javax.annotation.Nullable
  public String getProtectedItemName() {
    return protectedItemName;
  }

  public void setProtectedItemName(String protectedItemName) {
    this.protectedItemName = protectedItemName;
  }


  public BackupStatusResponse protectionStatus(ProtectionStatusEnum protectionStatus) {
    this.protectionStatus = protectionStatus;
    return this;
  }

  /**
   * Specifies whether the container is registered or not
   * @return protectionStatus
   */
  @javax.annotation.Nullable
  public ProtectionStatusEnum getProtectionStatus() {
    return protectionStatus;
  }

  public void setProtectionStatus(ProtectionStatusEnum protectionStatus) {
    this.protectionStatus = protectionStatus;
  }


  public BackupStatusResponse registrationStatus(String registrationStatus) {
    this.registrationStatus = registrationStatus;
    return this;
  }

  /**
   * Container registration status
   * @return registrationStatus
   */
  @javax.annotation.Nullable
  public String getRegistrationStatus() {
    return registrationStatus;
  }

  public void setRegistrationStatus(String registrationStatus) {
    this.registrationStatus = registrationStatus;
  }


  public BackupStatusResponse vaultId(String vaultId) {
    this.vaultId = vaultId;
    return this;
  }

  /**
   * Specifies the arm resource id of the vault
   * @return vaultId
   */
  @javax.annotation.Nullable
  public String getVaultId() {
    return vaultId;
  }

  public void setVaultId(String vaultId) {
    this.vaultId = vaultId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BackupStatusResponse backupStatusResponse = (BackupStatusResponse) o;
    return Objects.equals(this.containerName, backupStatusResponse.containerName) &&
        Objects.equals(this.errorCode, backupStatusResponse.errorCode) &&
        Objects.equals(this.errorMessage, backupStatusResponse.errorMessage) &&
        Objects.equals(this.fabricName, backupStatusResponse.fabricName) &&
        Objects.equals(this.policyName, backupStatusResponse.policyName) &&
        Objects.equals(this.protectedItemName, backupStatusResponse.protectedItemName) &&
        Objects.equals(this.protectionStatus, backupStatusResponse.protectionStatus) &&
        Objects.equals(this.registrationStatus, backupStatusResponse.registrationStatus) &&
        Objects.equals(this.vaultId, backupStatusResponse.vaultId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(containerName, errorCode, errorMessage, fabricName, policyName, protectedItemName, protectionStatus, registrationStatus, vaultId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BackupStatusResponse {\n");
    sb.append("    containerName: ").append(toIndentedString(containerName)).append("\n");
    sb.append("    errorCode: ").append(toIndentedString(errorCode)).append("\n");
    sb.append("    errorMessage: ").append(toIndentedString(errorMessage)).append("\n");
    sb.append("    fabricName: ").append(toIndentedString(fabricName)).append("\n");
    sb.append("    policyName: ").append(toIndentedString(policyName)).append("\n");
    sb.append("    protectedItemName: ").append(toIndentedString(protectedItemName)).append("\n");
    sb.append("    protectionStatus: ").append(toIndentedString(protectionStatus)).append("\n");
    sb.append("    registrationStatus: ").append(toIndentedString(registrationStatus)).append("\n");
    sb.append("    vaultId: ").append(toIndentedString(vaultId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("containerName");
    openapiFields.add("errorCode");
    openapiFields.add("errorMessage");
    openapiFields.add("fabricName");
    openapiFields.add("policyName");
    openapiFields.add("protectedItemName");
    openapiFields.add("protectionStatus");
    openapiFields.add("registrationStatus");
    openapiFields.add("vaultId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BackupStatusResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BackupStatusResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BackupStatusResponse is not found in the empty JSON string", BackupStatusResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BackupStatusResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BackupStatusResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("containerName") != null && !jsonObj.get("containerName").isJsonNull()) && !jsonObj.get("containerName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `containerName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("containerName").toString()));
      }
      if ((jsonObj.get("errorCode") != null && !jsonObj.get("errorCode").isJsonNull()) && !jsonObj.get("errorCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `errorCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("errorCode").toString()));
      }
      if ((jsonObj.get("errorMessage") != null && !jsonObj.get("errorMessage").isJsonNull()) && !jsonObj.get("errorMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `errorMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("errorMessage").toString()));
      }
      if ((jsonObj.get("fabricName") != null && !jsonObj.get("fabricName").isJsonNull()) && !jsonObj.get("fabricName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fabricName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fabricName").toString()));
      }
      // validate the optional field `fabricName`
      if (jsonObj.get("fabricName") != null && !jsonObj.get("fabricName").isJsonNull()) {
        FabricNameEnum.validateJsonElement(jsonObj.get("fabricName"));
      }
      if ((jsonObj.get("policyName") != null && !jsonObj.get("policyName").isJsonNull()) && !jsonObj.get("policyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `policyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("policyName").toString()));
      }
      if ((jsonObj.get("protectedItemName") != null && !jsonObj.get("protectedItemName").isJsonNull()) && !jsonObj.get("protectedItemName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `protectedItemName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("protectedItemName").toString()));
      }
      if ((jsonObj.get("protectionStatus") != null && !jsonObj.get("protectionStatus").isJsonNull()) && !jsonObj.get("protectionStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `protectionStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("protectionStatus").toString()));
      }
      // validate the optional field `protectionStatus`
      if (jsonObj.get("protectionStatus") != null && !jsonObj.get("protectionStatus").isJsonNull()) {
        ProtectionStatusEnum.validateJsonElement(jsonObj.get("protectionStatus"));
      }
      if ((jsonObj.get("registrationStatus") != null && !jsonObj.get("registrationStatus").isJsonNull()) && !jsonObj.get("registrationStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `registrationStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("registrationStatus").toString()));
      }
      if ((jsonObj.get("vaultId") != null && !jsonObj.get("vaultId").isJsonNull()) && !jsonObj.get("vaultId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vaultId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vaultId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BackupStatusResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BackupStatusResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BackupStatusResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BackupStatusResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<BackupStatusResponse>() {
           @Override
           public void write(JsonWriter out, BackupStatusResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BackupStatusResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BackupStatusResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BackupStatusResponse
   * @throws IOException if the JSON string is invalid with respect to BackupStatusResponse
   */
  public static BackupStatusResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BackupStatusResponse.class);
  }

  /**
   * Convert an instance of BackupStatusResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

