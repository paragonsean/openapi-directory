/*
 * RecoveryServicesBackupClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-07-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DpmErrorInfo;
import org.openapitools.client.model.DpmJobExtendedInfo;
import org.openapitools.client.model.Job;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DPM workload-specific job object.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:09:02.098697-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DpmJob extends Job {
  /**
   * Gets or Sets actionsInfo
   */
  @JsonAdapter(ActionsInfoEnum.Adapter.class)
  public enum ActionsInfoEnum {
    INVALID("Invalid"),
    
    CANCELLABLE("Cancellable"),
    
    RETRIABLE("Retriable");

    private String value;

    ActionsInfoEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ActionsInfoEnum fromValue(String value) {
      for (ActionsInfoEnum b : ActionsInfoEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ActionsInfoEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ActionsInfoEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ActionsInfoEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ActionsInfoEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ActionsInfoEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ACTIONS_INFO = "actionsInfo";
  @SerializedName(SERIALIZED_NAME_ACTIONS_INFO)
  private List<ActionsInfoEnum> actionsInfo = new ArrayList<>();

  public static final String SERIALIZED_NAME_CONTAINER_NAME = "containerName";
  @SerializedName(SERIALIZED_NAME_CONTAINER_NAME)
  private String containerName;

  public static final String SERIALIZED_NAME_CONTAINER_TYPE = "containerType";
  @SerializedName(SERIALIZED_NAME_CONTAINER_TYPE)
  private String containerType;

  public static final String SERIALIZED_NAME_DPM_SERVER_NAME = "dpmServerName";
  @SerializedName(SERIALIZED_NAME_DPM_SERVER_NAME)
  private String dpmServerName;

  public static final String SERIALIZED_NAME_DURATION = "duration";
  @SerializedName(SERIALIZED_NAME_DURATION)
  private String duration;

  public static final String SERIALIZED_NAME_ERROR_DETAILS = "errorDetails";
  @SerializedName(SERIALIZED_NAME_ERROR_DETAILS)
  private List<DpmErrorInfo> errorDetails = new ArrayList<>();

  public static final String SERIALIZED_NAME_EXTENDED_INFO = "extendedInfo";
  @SerializedName(SERIALIZED_NAME_EXTENDED_INFO)
  private DpmJobExtendedInfo extendedInfo;

  public static final String SERIALIZED_NAME_WORKLOAD_TYPE = "workloadType";
  @SerializedName(SERIALIZED_NAME_WORKLOAD_TYPE)
  private String workloadType;

  public DpmJob() {
    this.jobType = this.getClass().getSimpleName();
  }

  public DpmJob actionsInfo(List<ActionsInfoEnum> actionsInfo) {
    this.actionsInfo = actionsInfo;
    return this;
  }

  public DpmJob addActionsInfoItem(ActionsInfoEnum actionsInfoItem) {
    if (this.actionsInfo == null) {
      this.actionsInfo = new ArrayList<>();
    }
    this.actionsInfo.add(actionsInfoItem);
    return this;
  }

  /**
   * The state/actions applicable on this job like cancel/retry.
   * @return actionsInfo
   */
  @javax.annotation.Nullable
  public List<ActionsInfoEnum> getActionsInfo() {
    return actionsInfo;
  }

  public void setActionsInfo(List<ActionsInfoEnum> actionsInfo) {
    this.actionsInfo = actionsInfo;
  }


  public DpmJob containerName(String containerName) {
    this.containerName = containerName;
    return this;
  }

  /**
   * Name of cluster/server protecting current backup item, if any.
   * @return containerName
   */
  @javax.annotation.Nullable
  public String getContainerName() {
    return containerName;
  }

  public void setContainerName(String containerName) {
    this.containerName = containerName;
  }


  public DpmJob containerType(String containerType) {
    this.containerType = containerType;
    return this;
  }

  /**
   * Type of container.
   * @return containerType
   */
  @javax.annotation.Nullable
  public String getContainerType() {
    return containerType;
  }

  public void setContainerType(String containerType) {
    this.containerType = containerType;
  }


  public DpmJob dpmServerName(String dpmServerName) {
    this.dpmServerName = dpmServerName;
    return this;
  }

  /**
   * DPM server name managing the backup item or backup job.
   * @return dpmServerName
   */
  @javax.annotation.Nullable
  public String getDpmServerName() {
    return dpmServerName;
  }

  public void setDpmServerName(String dpmServerName) {
    this.dpmServerName = dpmServerName;
  }


  public DpmJob duration(String duration) {
    this.duration = duration;
    return this;
  }

  /**
   * Time elapsed for job.
   * @return duration
   */
  @javax.annotation.Nullable
  public String getDuration() {
    return duration;
  }

  public void setDuration(String duration) {
    this.duration = duration;
  }


  public DpmJob errorDetails(List<DpmErrorInfo> errorDetails) {
    this.errorDetails = errorDetails;
    return this;
  }

  public DpmJob addErrorDetailsItem(DpmErrorInfo errorDetailsItem) {
    if (this.errorDetails == null) {
      this.errorDetails = new ArrayList<>();
    }
    this.errorDetails.add(errorDetailsItem);
    return this;
  }

  /**
   * The errors.
   * @return errorDetails
   */
  @javax.annotation.Nullable
  public List<DpmErrorInfo> getErrorDetails() {
    return errorDetails;
  }

  public void setErrorDetails(List<DpmErrorInfo> errorDetails) {
    this.errorDetails = errorDetails;
  }


  public DpmJob extendedInfo(DpmJobExtendedInfo extendedInfo) {
    this.extendedInfo = extendedInfo;
    return this;
  }

  /**
   * Get extendedInfo
   * @return extendedInfo
   */
  @javax.annotation.Nullable
  public DpmJobExtendedInfo getExtendedInfo() {
    return extendedInfo;
  }

  public void setExtendedInfo(DpmJobExtendedInfo extendedInfo) {
    this.extendedInfo = extendedInfo;
  }


  public DpmJob workloadType(String workloadType) {
    this.workloadType = workloadType;
    return this;
  }

  /**
   * Type of backup item.
   * @return workloadType
   */
  @javax.annotation.Nullable
  public String getWorkloadType() {
    return workloadType;
  }

  public void setWorkloadType(String workloadType) {
    this.workloadType = workloadType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DpmJob dpmJob = (DpmJob) o;
    return Objects.equals(this.actionsInfo, dpmJob.actionsInfo) &&
        Objects.equals(this.containerName, dpmJob.containerName) &&
        Objects.equals(this.containerType, dpmJob.containerType) &&
        Objects.equals(this.dpmServerName, dpmJob.dpmServerName) &&
        Objects.equals(this.duration, dpmJob.duration) &&
        Objects.equals(this.errorDetails, dpmJob.errorDetails) &&
        Objects.equals(this.extendedInfo, dpmJob.extendedInfo) &&
        Objects.equals(this.workloadType, dpmJob.workloadType) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(actionsInfo, containerName, containerType, dpmServerName, duration, errorDetails, extendedInfo, workloadType, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DpmJob {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    actionsInfo: ").append(toIndentedString(actionsInfo)).append("\n");
    sb.append("    containerName: ").append(toIndentedString(containerName)).append("\n");
    sb.append("    containerType: ").append(toIndentedString(containerType)).append("\n");
    sb.append("    dpmServerName: ").append(toIndentedString(dpmServerName)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    errorDetails: ").append(toIndentedString(errorDetails)).append("\n");
    sb.append("    extendedInfo: ").append(toIndentedString(extendedInfo)).append("\n");
    sb.append("    workloadType: ").append(toIndentedString(workloadType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("activityId");
    openapiFields.add("backupManagementType");
    openapiFields.add("endTime");
    openapiFields.add("entityFriendlyName");
    openapiFields.add("jobType");
    openapiFields.add("operation");
    openapiFields.add("startTime");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("jobType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DpmJob
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DpmJob.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DpmJob is not found in the empty JSON string", DpmJob.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DpmJob.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DpmJob` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DpmJob.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DpmJob.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DpmJob' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DpmJob> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DpmJob.class));

       return (TypeAdapter<T>) new TypeAdapter<DpmJob>() {
           @Override
           public void write(JsonWriter out, DpmJob value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DpmJob read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DpmJob given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DpmJob
   * @throws IOException if the JSON string is invalid with respect to DpmJob
   */
  public static DpmJob fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DpmJob.class);
  }

  /**
   * Convert an instance of DpmJob to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

