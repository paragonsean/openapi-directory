# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AzureVMResourceFeatureSupportResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, support_status: str=None):
        """AzureVMResourceFeatureSupportResponse - a model defined in OpenAPI

        :param support_status: The support_status of this AzureVMResourceFeatureSupportResponse.
        """
        self.openapi_types = {
            'support_status': str
        }

        self.attribute_map = {
            'support_status': 'supportStatus'
        }

        self._support_status = support_status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AzureVMResourceFeatureSupportResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AzureVMResourceFeatureSupportResponse of this AzureVMResourceFeatureSupportResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def support_status(self):
        """Gets the support_status of this AzureVMResourceFeatureSupportResponse.

        Support status of feature

        :return: The support_status of this AzureVMResourceFeatureSupportResponse.
        :rtype: str
        """
        return self._support_status

    @support_status.setter
    def support_status(self, support_status):
        """Sets the support_status of this AzureVMResourceFeatureSupportResponse.

        Support status of feature

        :param support_status: The support_status of this AzureVMResourceFeatureSupportResponse.
        :type support_status: str
        """
        allowed_values = ["Invalid", "Supported", "DefaultOFF", "DefaultON", "NotSupported"]  # noqa: E501
        if support_status not in allowed_values:
            raise ValueError(
                "Invalid value for `support_status` ({0}), must be one of {1}"
                .format(support_status, allowed_values)
            )

        self._support_status = support_status
