# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PreValidateEnableBackupResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, container_name: str=None, error_code: str=None, error_message: str=None, protected_item_name: str=None, recommendation: str=None, status: str=None):
        """PreValidateEnableBackupResponse - a model defined in OpenAPI

        :param container_name: The container_name of this PreValidateEnableBackupResponse.
        :param error_code: The error_code of this PreValidateEnableBackupResponse.
        :param error_message: The error_message of this PreValidateEnableBackupResponse.
        :param protected_item_name: The protected_item_name of this PreValidateEnableBackupResponse.
        :param recommendation: The recommendation of this PreValidateEnableBackupResponse.
        :param status: The status of this PreValidateEnableBackupResponse.
        """
        self.openapi_types = {
            'container_name': str,
            'error_code': str,
            'error_message': str,
            'protected_item_name': str,
            'recommendation': str,
            'status': str
        }

        self.attribute_map = {
            'container_name': 'containerName',
            'error_code': 'errorCode',
            'error_message': 'errorMessage',
            'protected_item_name': 'protectedItemName',
            'recommendation': 'recommendation',
            'status': 'status'
        }

        self._container_name = container_name
        self._error_code = error_code
        self._error_message = error_message
        self._protected_item_name = protected_item_name
        self._recommendation = recommendation
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PreValidateEnableBackupResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PreValidateEnableBackupResponse of this PreValidateEnableBackupResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def container_name(self):
        """Gets the container_name of this PreValidateEnableBackupResponse.

        Specifies the product specific container name. E.g. iaasvmcontainer;iaasvmcontainer;rgname;vmname. This is required  for portal

        :return: The container_name of this PreValidateEnableBackupResponse.
        :rtype: str
        """
        return self._container_name

    @container_name.setter
    def container_name(self, container_name):
        """Sets the container_name of this PreValidateEnableBackupResponse.

        Specifies the product specific container name. E.g. iaasvmcontainer;iaasvmcontainer;rgname;vmname. This is required  for portal

        :param container_name: The container_name of this PreValidateEnableBackupResponse.
        :type container_name: str
        """

        self._container_name = container_name

    @property
    def error_code(self):
        """Gets the error_code of this PreValidateEnableBackupResponse.

        Response error code

        :return: The error_code of this PreValidateEnableBackupResponse.
        :rtype: str
        """
        return self._error_code

    @error_code.setter
    def error_code(self, error_code):
        """Sets the error_code of this PreValidateEnableBackupResponse.

        Response error code

        :param error_code: The error_code of this PreValidateEnableBackupResponse.
        :type error_code: str
        """

        self._error_code = error_code

    @property
    def error_message(self):
        """Gets the error_message of this PreValidateEnableBackupResponse.

        Response error message

        :return: The error_message of this PreValidateEnableBackupResponse.
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this PreValidateEnableBackupResponse.

        Response error message

        :param error_message: The error_message of this PreValidateEnableBackupResponse.
        :type error_message: str
        """

        self._error_message = error_message

    @property
    def protected_item_name(self):
        """Gets the protected_item_name of this PreValidateEnableBackupResponse.

        Specifies the product specific ds name. E.g. vm;iaasvmcontainer;rgname;vmname. This is required for portal

        :return: The protected_item_name of this PreValidateEnableBackupResponse.
        :rtype: str
        """
        return self._protected_item_name

    @protected_item_name.setter
    def protected_item_name(self, protected_item_name):
        """Sets the protected_item_name of this PreValidateEnableBackupResponse.

        Specifies the product specific ds name. E.g. vm;iaasvmcontainer;rgname;vmname. This is required for portal

        :param protected_item_name: The protected_item_name of this PreValidateEnableBackupResponse.
        :type protected_item_name: str
        """

        self._protected_item_name = protected_item_name

    @property
    def recommendation(self):
        """Gets the recommendation of this PreValidateEnableBackupResponse.

        Recommended action for user

        :return: The recommendation of this PreValidateEnableBackupResponse.
        :rtype: str
        """
        return self._recommendation

    @recommendation.setter
    def recommendation(self, recommendation):
        """Sets the recommendation of this PreValidateEnableBackupResponse.

        Recommended action for user

        :param recommendation: The recommendation of this PreValidateEnableBackupResponse.
        :type recommendation: str
        """

        self._recommendation = recommendation

    @property
    def status(self):
        """Gets the status of this PreValidateEnableBackupResponse.

        Validation Status

        :return: The status of this PreValidateEnableBackupResponse.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this PreValidateEnableBackupResponse.

        Validation Status

        :param status: The status of this PreValidateEnableBackupResponse.
        :type status: str
        """
        allowed_values = ["Invalid", "Succeeded", "Failed"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
