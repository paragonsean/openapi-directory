# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BackupStatusResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, container_name: str=None, error_code: str=None, error_message: str=None, fabric_name: str=None, policy_name: str=None, protected_item_name: str=None, protection_status: str=None, registration_status: str=None, vault_id: str=None):
        """BackupStatusResponse - a model defined in OpenAPI

        :param container_name: The container_name of this BackupStatusResponse.
        :param error_code: The error_code of this BackupStatusResponse.
        :param error_message: The error_message of this BackupStatusResponse.
        :param fabric_name: The fabric_name of this BackupStatusResponse.
        :param policy_name: The policy_name of this BackupStatusResponse.
        :param protected_item_name: The protected_item_name of this BackupStatusResponse.
        :param protection_status: The protection_status of this BackupStatusResponse.
        :param registration_status: The registration_status of this BackupStatusResponse.
        :param vault_id: The vault_id of this BackupStatusResponse.
        """
        self.openapi_types = {
            'container_name': str,
            'error_code': str,
            'error_message': str,
            'fabric_name': str,
            'policy_name': str,
            'protected_item_name': str,
            'protection_status': str,
            'registration_status': str,
            'vault_id': str
        }

        self.attribute_map = {
            'container_name': 'containerName',
            'error_code': 'errorCode',
            'error_message': 'errorMessage',
            'fabric_name': 'fabricName',
            'policy_name': 'policyName',
            'protected_item_name': 'protectedItemName',
            'protection_status': 'protectionStatus',
            'registration_status': 'registrationStatus',
            'vault_id': 'vaultId'
        }

        self._container_name = container_name
        self._error_code = error_code
        self._error_message = error_message
        self._fabric_name = fabric_name
        self._policy_name = policy_name
        self._protected_item_name = protected_item_name
        self._protection_status = protection_status
        self._registration_status = registration_status
        self._vault_id = vault_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BackupStatusResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BackupStatusResponse of this BackupStatusResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def container_name(self):
        """Gets the container_name of this BackupStatusResponse.

        Specifies the product specific container name. E.g. iaasvmcontainer;iaasvmcontainer;csname;vmname.

        :return: The container_name of this BackupStatusResponse.
        :rtype: str
        """
        return self._container_name

    @container_name.setter
    def container_name(self, container_name):
        """Sets the container_name of this BackupStatusResponse.

        Specifies the product specific container name. E.g. iaasvmcontainer;iaasvmcontainer;csname;vmname.

        :param container_name: The container_name of this BackupStatusResponse.
        :type container_name: str
        """

        self._container_name = container_name

    @property
    def error_code(self):
        """Gets the error_code of this BackupStatusResponse.

        ErrorCode in case of intent failed

        :return: The error_code of this BackupStatusResponse.
        :rtype: str
        """
        return self._error_code

    @error_code.setter
    def error_code(self, error_code):
        """Sets the error_code of this BackupStatusResponse.

        ErrorCode in case of intent failed

        :param error_code: The error_code of this BackupStatusResponse.
        :type error_code: str
        """

        self._error_code = error_code

    @property
    def error_message(self):
        """Gets the error_message of this BackupStatusResponse.

        ErrorMessage in case of intent failed.

        :return: The error_message of this BackupStatusResponse.
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this BackupStatusResponse.

        ErrorMessage in case of intent failed.

        :param error_message: The error_message of this BackupStatusResponse.
        :type error_message: str
        """

        self._error_message = error_message

    @property
    def fabric_name(self):
        """Gets the fabric_name of this BackupStatusResponse.

        Specifies the fabric name - Azure or AD

        :return: The fabric_name of this BackupStatusResponse.
        :rtype: str
        """
        return self._fabric_name

    @fabric_name.setter
    def fabric_name(self, fabric_name):
        """Sets the fabric_name of this BackupStatusResponse.

        Specifies the fabric name - Azure or AD

        :param fabric_name: The fabric_name of this BackupStatusResponse.
        :type fabric_name: str
        """
        allowed_values = ["Invalid", "Azure"]  # noqa: E501
        if fabric_name not in allowed_values:
            raise ValueError(
                "Invalid value for `fabric_name` ({0}), must be one of {1}"
                .format(fabric_name, allowed_values)
            )

        self._fabric_name = fabric_name

    @property
    def policy_name(self):
        """Gets the policy_name of this BackupStatusResponse.

        Specifies the policy name which is used for protection

        :return: The policy_name of this BackupStatusResponse.
        :rtype: str
        """
        return self._policy_name

    @policy_name.setter
    def policy_name(self, policy_name):
        """Sets the policy_name of this BackupStatusResponse.

        Specifies the policy name which is used for protection

        :param policy_name: The policy_name of this BackupStatusResponse.
        :type policy_name: str
        """

        self._policy_name = policy_name

    @property
    def protected_item_name(self):
        """Gets the protected_item_name of this BackupStatusResponse.

        Specifies the product specific ds name. E.g. vm;iaasvmcontainer;csname;vmname.

        :return: The protected_item_name of this BackupStatusResponse.
        :rtype: str
        """
        return self._protected_item_name

    @protected_item_name.setter
    def protected_item_name(self, protected_item_name):
        """Sets the protected_item_name of this BackupStatusResponse.

        Specifies the product specific ds name. E.g. vm;iaasvmcontainer;csname;vmname.

        :param protected_item_name: The protected_item_name of this BackupStatusResponse.
        :type protected_item_name: str
        """

        self._protected_item_name = protected_item_name

    @property
    def protection_status(self):
        """Gets the protection_status of this BackupStatusResponse.

        Specifies whether the container is registered or not

        :return: The protection_status of this BackupStatusResponse.
        :rtype: str
        """
        return self._protection_status

    @protection_status.setter
    def protection_status(self, protection_status):
        """Sets the protection_status of this BackupStatusResponse.

        Specifies whether the container is registered or not

        :param protection_status: The protection_status of this BackupStatusResponse.
        :type protection_status: str
        """
        allowed_values = ["Invalid", "NotProtected", "Protecting", "Protected", "ProtectionFailed"]  # noqa: E501
        if protection_status not in allowed_values:
            raise ValueError(
                "Invalid value for `protection_status` ({0}), must be one of {1}"
                .format(protection_status, allowed_values)
            )

        self._protection_status = protection_status

    @property
    def registration_status(self):
        """Gets the registration_status of this BackupStatusResponse.

        Container registration status

        :return: The registration_status of this BackupStatusResponse.
        :rtype: str
        """
        return self._registration_status

    @registration_status.setter
    def registration_status(self, registration_status):
        """Sets the registration_status of this BackupStatusResponse.

        Container registration status

        :param registration_status: The registration_status of this BackupStatusResponse.
        :type registration_status: str
        """

        self._registration_status = registration_status

    @property
    def vault_id(self):
        """Gets the vault_id of this BackupStatusResponse.

        Specifies the arm resource id of the vault

        :return: The vault_id of this BackupStatusResponse.
        :rtype: str
        """
        return self._vault_id

    @vault_id.setter
    def vault_id(self, vault_id):
        """Sets the vault_id of this BackupStatusResponse.

        Specifies the arm resource id of the vault

        :param vault_id: The vault_id of this BackupStatusResponse.
        :type vault_id: str
        """

        self._vault_id = vault_id
