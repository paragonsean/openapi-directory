/**
 * RecoveryServicesBackupClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-07-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBackupStatusResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBackupStatusResponse::OAIBackupStatusResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBackupStatusResponse::OAIBackupStatusResponse() {
    this->initializeModel();
}

OAIBackupStatusResponse::~OAIBackupStatusResponse() {}

void OAIBackupStatusResponse::initializeModel() {

    m_container_name_isSet = false;
    m_container_name_isValid = false;

    m_error_code_isSet = false;
    m_error_code_isValid = false;

    m_error_message_isSet = false;
    m_error_message_isValid = false;

    m_fabric_name_isSet = false;
    m_fabric_name_isValid = false;

    m_policy_name_isSet = false;
    m_policy_name_isValid = false;

    m_protected_item_name_isSet = false;
    m_protected_item_name_isValid = false;

    m_protection_status_isSet = false;
    m_protection_status_isValid = false;

    m_registration_status_isSet = false;
    m_registration_status_isValid = false;

    m_vault_id_isSet = false;
    m_vault_id_isValid = false;
}

void OAIBackupStatusResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBackupStatusResponse::fromJsonObject(QJsonObject json) {

    m_container_name_isValid = ::OpenAPI::fromJsonValue(m_container_name, json[QString("containerName")]);
    m_container_name_isSet = !json[QString("containerName")].isNull() && m_container_name_isValid;

    m_error_code_isValid = ::OpenAPI::fromJsonValue(m_error_code, json[QString("errorCode")]);
    m_error_code_isSet = !json[QString("errorCode")].isNull() && m_error_code_isValid;

    m_error_message_isValid = ::OpenAPI::fromJsonValue(m_error_message, json[QString("errorMessage")]);
    m_error_message_isSet = !json[QString("errorMessage")].isNull() && m_error_message_isValid;

    m_fabric_name_isValid = ::OpenAPI::fromJsonValue(m_fabric_name, json[QString("fabricName")]);
    m_fabric_name_isSet = !json[QString("fabricName")].isNull() && m_fabric_name_isValid;

    m_policy_name_isValid = ::OpenAPI::fromJsonValue(m_policy_name, json[QString("policyName")]);
    m_policy_name_isSet = !json[QString("policyName")].isNull() && m_policy_name_isValid;

    m_protected_item_name_isValid = ::OpenAPI::fromJsonValue(m_protected_item_name, json[QString("protectedItemName")]);
    m_protected_item_name_isSet = !json[QString("protectedItemName")].isNull() && m_protected_item_name_isValid;

    m_protection_status_isValid = ::OpenAPI::fromJsonValue(m_protection_status, json[QString("protectionStatus")]);
    m_protection_status_isSet = !json[QString("protectionStatus")].isNull() && m_protection_status_isValid;

    m_registration_status_isValid = ::OpenAPI::fromJsonValue(m_registration_status, json[QString("registrationStatus")]);
    m_registration_status_isSet = !json[QString("registrationStatus")].isNull() && m_registration_status_isValid;

    m_vault_id_isValid = ::OpenAPI::fromJsonValue(m_vault_id, json[QString("vaultId")]);
    m_vault_id_isSet = !json[QString("vaultId")].isNull() && m_vault_id_isValid;
}

QString OAIBackupStatusResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBackupStatusResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_container_name_isSet) {
        obj.insert(QString("containerName"), ::OpenAPI::toJsonValue(m_container_name));
    }
    if (m_error_code_isSet) {
        obj.insert(QString("errorCode"), ::OpenAPI::toJsonValue(m_error_code));
    }
    if (m_error_message_isSet) {
        obj.insert(QString("errorMessage"), ::OpenAPI::toJsonValue(m_error_message));
    }
    if (m_fabric_name_isSet) {
        obj.insert(QString("fabricName"), ::OpenAPI::toJsonValue(m_fabric_name));
    }
    if (m_policy_name_isSet) {
        obj.insert(QString("policyName"), ::OpenAPI::toJsonValue(m_policy_name));
    }
    if (m_protected_item_name_isSet) {
        obj.insert(QString("protectedItemName"), ::OpenAPI::toJsonValue(m_protected_item_name));
    }
    if (m_protection_status_isSet) {
        obj.insert(QString("protectionStatus"), ::OpenAPI::toJsonValue(m_protection_status));
    }
    if (m_registration_status_isSet) {
        obj.insert(QString("registrationStatus"), ::OpenAPI::toJsonValue(m_registration_status));
    }
    if (m_vault_id_isSet) {
        obj.insert(QString("vaultId"), ::OpenAPI::toJsonValue(m_vault_id));
    }
    return obj;
}

QString OAIBackupStatusResponse::getContainerName() const {
    return m_container_name;
}
void OAIBackupStatusResponse::setContainerName(const QString &container_name) {
    m_container_name = container_name;
    m_container_name_isSet = true;
}

bool OAIBackupStatusResponse::is_container_name_Set() const{
    return m_container_name_isSet;
}

bool OAIBackupStatusResponse::is_container_name_Valid() const{
    return m_container_name_isValid;
}

QString OAIBackupStatusResponse::getErrorCode() const {
    return m_error_code;
}
void OAIBackupStatusResponse::setErrorCode(const QString &error_code) {
    m_error_code = error_code;
    m_error_code_isSet = true;
}

bool OAIBackupStatusResponse::is_error_code_Set() const{
    return m_error_code_isSet;
}

bool OAIBackupStatusResponse::is_error_code_Valid() const{
    return m_error_code_isValid;
}

QString OAIBackupStatusResponse::getErrorMessage() const {
    return m_error_message;
}
void OAIBackupStatusResponse::setErrorMessage(const QString &error_message) {
    m_error_message = error_message;
    m_error_message_isSet = true;
}

bool OAIBackupStatusResponse::is_error_message_Set() const{
    return m_error_message_isSet;
}

bool OAIBackupStatusResponse::is_error_message_Valid() const{
    return m_error_message_isValid;
}

QString OAIBackupStatusResponse::getFabricName() const {
    return m_fabric_name;
}
void OAIBackupStatusResponse::setFabricName(const QString &fabric_name) {
    m_fabric_name = fabric_name;
    m_fabric_name_isSet = true;
}

bool OAIBackupStatusResponse::is_fabric_name_Set() const{
    return m_fabric_name_isSet;
}

bool OAIBackupStatusResponse::is_fabric_name_Valid() const{
    return m_fabric_name_isValid;
}

QString OAIBackupStatusResponse::getPolicyName() const {
    return m_policy_name;
}
void OAIBackupStatusResponse::setPolicyName(const QString &policy_name) {
    m_policy_name = policy_name;
    m_policy_name_isSet = true;
}

bool OAIBackupStatusResponse::is_policy_name_Set() const{
    return m_policy_name_isSet;
}

bool OAIBackupStatusResponse::is_policy_name_Valid() const{
    return m_policy_name_isValid;
}

QString OAIBackupStatusResponse::getProtectedItemName() const {
    return m_protected_item_name;
}
void OAIBackupStatusResponse::setProtectedItemName(const QString &protected_item_name) {
    m_protected_item_name = protected_item_name;
    m_protected_item_name_isSet = true;
}

bool OAIBackupStatusResponse::is_protected_item_name_Set() const{
    return m_protected_item_name_isSet;
}

bool OAIBackupStatusResponse::is_protected_item_name_Valid() const{
    return m_protected_item_name_isValid;
}

QString OAIBackupStatusResponse::getProtectionStatus() const {
    return m_protection_status;
}
void OAIBackupStatusResponse::setProtectionStatus(const QString &protection_status) {
    m_protection_status = protection_status;
    m_protection_status_isSet = true;
}

bool OAIBackupStatusResponse::is_protection_status_Set() const{
    return m_protection_status_isSet;
}

bool OAIBackupStatusResponse::is_protection_status_Valid() const{
    return m_protection_status_isValid;
}

QString OAIBackupStatusResponse::getRegistrationStatus() const {
    return m_registration_status;
}
void OAIBackupStatusResponse::setRegistrationStatus(const QString &registration_status) {
    m_registration_status = registration_status;
    m_registration_status_isSet = true;
}

bool OAIBackupStatusResponse::is_registration_status_Set() const{
    return m_registration_status_isSet;
}

bool OAIBackupStatusResponse::is_registration_status_Valid() const{
    return m_registration_status_isValid;
}

QString OAIBackupStatusResponse::getVaultId() const {
    return m_vault_id;
}
void OAIBackupStatusResponse::setVaultId(const QString &vault_id) {
    m_vault_id = vault_id;
    m_vault_id_isSet = true;
}

bool OAIBackupStatusResponse::is_vault_id_Set() const{
    return m_vault_id_isSet;
}

bool OAIBackupStatusResponse::is_vault_id_Valid() const{
    return m_vault_id_isValid;
}

bool OAIBackupStatusResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_container_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fabric_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protected_item_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protection_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_registration_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vault_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBackupStatusResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
