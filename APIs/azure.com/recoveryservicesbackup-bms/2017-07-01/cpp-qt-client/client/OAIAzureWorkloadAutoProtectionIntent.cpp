/**
 * RecoveryServicesBackupClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-07-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAzureWorkloadAutoProtectionIntent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAzureWorkloadAutoProtectionIntent::OAIAzureWorkloadAutoProtectionIntent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAzureWorkloadAutoProtectionIntent::OAIAzureWorkloadAutoProtectionIntent() {
    this->initializeModel();
}

OAIAzureWorkloadAutoProtectionIntent::~OAIAzureWorkloadAutoProtectionIntent() {}

void OAIAzureWorkloadAutoProtectionIntent::initializeModel() {

    m_backup_management_type_isSet = false;
    m_backup_management_type_isValid = false;

    m_item_id_isSet = false;
    m_item_id_isValid = false;

    m_policy_id_isSet = false;
    m_policy_id_isValid = false;

    m_protection_intent_item_type_isSet = false;
    m_protection_intent_item_type_isValid = false;

    m_protection_state_isSet = false;
    m_protection_state_isValid = false;

    m_source_resource_id_isSet = false;
    m_source_resource_id_isValid = false;
}

void OAIAzureWorkloadAutoProtectionIntent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAzureWorkloadAutoProtectionIntent::fromJsonObject(QJsonObject json) {

    m_backup_management_type_isValid = ::OpenAPI::fromJsonValue(m_backup_management_type, json[QString("backupManagementType")]);
    m_backup_management_type_isSet = !json[QString("backupManagementType")].isNull() && m_backup_management_type_isValid;

    m_item_id_isValid = ::OpenAPI::fromJsonValue(m_item_id, json[QString("itemId")]);
    m_item_id_isSet = !json[QString("itemId")].isNull() && m_item_id_isValid;

    m_policy_id_isValid = ::OpenAPI::fromJsonValue(m_policy_id, json[QString("policyId")]);
    m_policy_id_isSet = !json[QString("policyId")].isNull() && m_policy_id_isValid;

    m_protection_intent_item_type_isValid = ::OpenAPI::fromJsonValue(m_protection_intent_item_type, json[QString("protectionIntentItemType")]);
    m_protection_intent_item_type_isSet = !json[QString("protectionIntentItemType")].isNull() && m_protection_intent_item_type_isValid;

    m_protection_state_isValid = ::OpenAPI::fromJsonValue(m_protection_state, json[QString("protectionState")]);
    m_protection_state_isSet = !json[QString("protectionState")].isNull() && m_protection_state_isValid;

    m_source_resource_id_isValid = ::OpenAPI::fromJsonValue(m_source_resource_id, json[QString("sourceResourceId")]);
    m_source_resource_id_isSet = !json[QString("sourceResourceId")].isNull() && m_source_resource_id_isValid;
}

QString OAIAzureWorkloadAutoProtectionIntent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAzureWorkloadAutoProtectionIntent::asJsonObject() const {
    QJsonObject obj;
    if (m_backup_management_type_isSet) {
        obj.insert(QString("backupManagementType"), ::OpenAPI::toJsonValue(m_backup_management_type));
    }
    if (m_item_id_isSet) {
        obj.insert(QString("itemId"), ::OpenAPI::toJsonValue(m_item_id));
    }
    if (m_policy_id_isSet) {
        obj.insert(QString("policyId"), ::OpenAPI::toJsonValue(m_policy_id));
    }
    if (m_protection_intent_item_type_isSet) {
        obj.insert(QString("protectionIntentItemType"), ::OpenAPI::toJsonValue(m_protection_intent_item_type));
    }
    if (m_protection_state_isSet) {
        obj.insert(QString("protectionState"), ::OpenAPI::toJsonValue(m_protection_state));
    }
    if (m_source_resource_id_isSet) {
        obj.insert(QString("sourceResourceId"), ::OpenAPI::toJsonValue(m_source_resource_id));
    }
    return obj;
}

QString OAIAzureWorkloadAutoProtectionIntent::getBackupManagementType() const {
    return m_backup_management_type;
}
void OAIAzureWorkloadAutoProtectionIntent::setBackupManagementType(const QString &backup_management_type) {
    m_backup_management_type = backup_management_type;
    m_backup_management_type_isSet = true;
}

bool OAIAzureWorkloadAutoProtectionIntent::is_backup_management_type_Set() const{
    return m_backup_management_type_isSet;
}

bool OAIAzureWorkloadAutoProtectionIntent::is_backup_management_type_Valid() const{
    return m_backup_management_type_isValid;
}

QString OAIAzureWorkloadAutoProtectionIntent::getItemId() const {
    return m_item_id;
}
void OAIAzureWorkloadAutoProtectionIntent::setItemId(const QString &item_id) {
    m_item_id = item_id;
    m_item_id_isSet = true;
}

bool OAIAzureWorkloadAutoProtectionIntent::is_item_id_Set() const{
    return m_item_id_isSet;
}

bool OAIAzureWorkloadAutoProtectionIntent::is_item_id_Valid() const{
    return m_item_id_isValid;
}

QString OAIAzureWorkloadAutoProtectionIntent::getPolicyId() const {
    return m_policy_id;
}
void OAIAzureWorkloadAutoProtectionIntent::setPolicyId(const QString &policy_id) {
    m_policy_id = policy_id;
    m_policy_id_isSet = true;
}

bool OAIAzureWorkloadAutoProtectionIntent::is_policy_id_Set() const{
    return m_policy_id_isSet;
}

bool OAIAzureWorkloadAutoProtectionIntent::is_policy_id_Valid() const{
    return m_policy_id_isValid;
}

QString OAIAzureWorkloadAutoProtectionIntent::getProtectionIntentItemType() const {
    return m_protection_intent_item_type;
}
void OAIAzureWorkloadAutoProtectionIntent::setProtectionIntentItemType(const QString &protection_intent_item_type) {
    m_protection_intent_item_type = protection_intent_item_type;
    m_protection_intent_item_type_isSet = true;
}

bool OAIAzureWorkloadAutoProtectionIntent::is_protection_intent_item_type_Set() const{
    return m_protection_intent_item_type_isSet;
}

bool OAIAzureWorkloadAutoProtectionIntent::is_protection_intent_item_type_Valid() const{
    return m_protection_intent_item_type_isValid;
}

QString OAIAzureWorkloadAutoProtectionIntent::getProtectionState() const {
    return m_protection_state;
}
void OAIAzureWorkloadAutoProtectionIntent::setProtectionState(const QString &protection_state) {
    m_protection_state = protection_state;
    m_protection_state_isSet = true;
}

bool OAIAzureWorkloadAutoProtectionIntent::is_protection_state_Set() const{
    return m_protection_state_isSet;
}

bool OAIAzureWorkloadAutoProtectionIntent::is_protection_state_Valid() const{
    return m_protection_state_isValid;
}

QString OAIAzureWorkloadAutoProtectionIntent::getSourceResourceId() const {
    return m_source_resource_id;
}
void OAIAzureWorkloadAutoProtectionIntent::setSourceResourceId(const QString &source_resource_id) {
    m_source_resource_id = source_resource_id;
    m_source_resource_id_isSet = true;
}

bool OAIAzureWorkloadAutoProtectionIntent::is_source_resource_id_Set() const{
    return m_source_resource_id_isSet;
}

bool OAIAzureWorkloadAutoProtectionIntent::is_source_resource_id_Valid() const{
    return m_source_resource_id_isValid;
}

bool OAIAzureWorkloadAutoProtectionIntent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_backup_management_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protection_intent_item_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protection_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAzureWorkloadAutoProtectionIntent::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
