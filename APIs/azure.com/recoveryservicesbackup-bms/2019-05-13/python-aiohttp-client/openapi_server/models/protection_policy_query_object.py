# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ProtectionPolicyQueryObject(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, backup_management_type: str=None, fabric_name: str=None, workload_type: str=None):
        """ProtectionPolicyQueryObject - a model defined in OpenAPI

        :param backup_management_type: The backup_management_type of this ProtectionPolicyQueryObject.
        :param fabric_name: The fabric_name of this ProtectionPolicyQueryObject.
        :param workload_type: The workload_type of this ProtectionPolicyQueryObject.
        """
        self.openapi_types = {
            'backup_management_type': str,
            'fabric_name': str,
            'workload_type': str
        }

        self.attribute_map = {
            'backup_management_type': 'backupManagementType',
            'fabric_name': 'fabricName',
            'workload_type': 'workloadType'
        }

        self._backup_management_type = backup_management_type
        self._fabric_name = fabric_name
        self._workload_type = workload_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProtectionPolicyQueryObject':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProtectionPolicyQueryObject of this ProtectionPolicyQueryObject.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def backup_management_type(self):
        """Gets the backup_management_type of this ProtectionPolicyQueryObject.

        Backup management type for the backup policy.

        :return: The backup_management_type of this ProtectionPolicyQueryObject.
        :rtype: str
        """
        return self._backup_management_type

    @backup_management_type.setter
    def backup_management_type(self, backup_management_type):
        """Sets the backup_management_type of this ProtectionPolicyQueryObject.

        Backup management type for the backup policy.

        :param backup_management_type: The backup_management_type of this ProtectionPolicyQueryObject.
        :type backup_management_type: str
        """
        allowed_values = ["Invalid", "AzureIaasVM", "MAB", "DPM", "AzureBackupServer", "AzureSql", "AzureStorage", "AzureWorkload", "DefaultBackup"]  # noqa: E501
        if backup_management_type not in allowed_values:
            raise ValueError(
                "Invalid value for `backup_management_type` ({0}), must be one of {1}"
                .format(backup_management_type, allowed_values)
            )

        self._backup_management_type = backup_management_type

    @property
    def fabric_name(self):
        """Gets the fabric_name of this ProtectionPolicyQueryObject.

        Fabric name for filter

        :return: The fabric_name of this ProtectionPolicyQueryObject.
        :rtype: str
        """
        return self._fabric_name

    @fabric_name.setter
    def fabric_name(self, fabric_name):
        """Sets the fabric_name of this ProtectionPolicyQueryObject.

        Fabric name for filter

        :param fabric_name: The fabric_name of this ProtectionPolicyQueryObject.
        :type fabric_name: str
        """

        self._fabric_name = fabric_name

    @property
    def workload_type(self):
        """Gets the workload_type of this ProtectionPolicyQueryObject.

        Workload type for the backup policy.

        :return: The workload_type of this ProtectionPolicyQueryObject.
        :rtype: str
        """
        return self._workload_type

    @workload_type.setter
    def workload_type(self, workload_type):
        """Sets the workload_type of this ProtectionPolicyQueryObject.

        Workload type for the backup policy.

        :param workload_type: The workload_type of this ProtectionPolicyQueryObject.
        :type workload_type: str
        """
        allowed_values = ["Invalid", "VM", "FileFolder", "AzureSqlDb", "SQLDB", "Exchange", "Sharepoint", "VMwareVM", "SystemState", "Client", "GenericDataSource", "SQLDataBase", "AzureFileShare", "SAPHanaDatabase", "SAPAseDatabase"]  # noqa: E501
        if workload_type not in allowed_values:
            raise ValueError(
                "Invalid value for `workload_type` ({0}), must be one of {1}"
                .format(workload_type, allowed_values)
            )

        self._workload_type = workload_type
