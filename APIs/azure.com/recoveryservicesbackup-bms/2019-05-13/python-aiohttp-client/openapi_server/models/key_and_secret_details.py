# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.bek_details import BEKDetails
from openapi_server.models.kek_details import KEKDetails
from openapi_server import util


class KeyAndSecretDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bek_details: BEKDetails=None, encryption_mechanism: str=None, kek_details: KEKDetails=None):
        """KeyAndSecretDetails - a model defined in OpenAPI

        :param bek_details: The bek_details of this KeyAndSecretDetails.
        :param encryption_mechanism: The encryption_mechanism of this KeyAndSecretDetails.
        :param kek_details: The kek_details of this KeyAndSecretDetails.
        """
        self.openapi_types = {
            'bek_details': BEKDetails,
            'encryption_mechanism': str,
            'kek_details': KEKDetails
        }

        self.attribute_map = {
            'bek_details': 'bekDetails',
            'encryption_mechanism': 'encryptionMechanism',
            'kek_details': 'kekDetails'
        }

        self._bek_details = bek_details
        self._encryption_mechanism = encryption_mechanism
        self._kek_details = kek_details

    @classmethod
    def from_dict(cls, dikt: dict) -> 'KeyAndSecretDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The KeyAndSecretDetails of this KeyAndSecretDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bek_details(self):
        """Gets the bek_details of this KeyAndSecretDetails.


        :return: The bek_details of this KeyAndSecretDetails.
        :rtype: BEKDetails
        """
        return self._bek_details

    @bek_details.setter
    def bek_details(self, bek_details):
        """Sets the bek_details of this KeyAndSecretDetails.


        :param bek_details: The bek_details of this KeyAndSecretDetails.
        :type bek_details: BEKDetails
        """

        self._bek_details = bek_details

    @property
    def encryption_mechanism(self):
        """Gets the encryption_mechanism of this KeyAndSecretDetails.

        Encryption mechanism: None/ SinglePass/ DoublePass

        :return: The encryption_mechanism of this KeyAndSecretDetails.
        :rtype: str
        """
        return self._encryption_mechanism

    @encryption_mechanism.setter
    def encryption_mechanism(self, encryption_mechanism):
        """Sets the encryption_mechanism of this KeyAndSecretDetails.

        Encryption mechanism: None/ SinglePass/ DoublePass

        :param encryption_mechanism: The encryption_mechanism of this KeyAndSecretDetails.
        :type encryption_mechanism: str
        """

        self._encryption_mechanism = encryption_mechanism

    @property
    def kek_details(self):
        """Gets the kek_details of this KeyAndSecretDetails.


        :return: The kek_details of this KeyAndSecretDetails.
        :rtype: KEKDetails
        """
        return self._kek_details

    @kek_details.setter
    def kek_details(self, kek_details):
        """Sets the kek_details of this KeyAndSecretDetails.


        :param kek_details: The kek_details of this KeyAndSecretDetails.
        :type kek_details: KEKDetails
        """

        self._kek_details = kek_details
