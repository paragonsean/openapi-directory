# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EncryptionDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, encryption_enabled: bool=None, kek_url: str=None, kek_vault_id: str=None, secret_key_url: str=None, secret_key_vault_id: str=None):
        """EncryptionDetails - a model defined in OpenAPI

        :param encryption_enabled: The encryption_enabled of this EncryptionDetails.
        :param kek_url: The kek_url of this EncryptionDetails.
        :param kek_vault_id: The kek_vault_id of this EncryptionDetails.
        :param secret_key_url: The secret_key_url of this EncryptionDetails.
        :param secret_key_vault_id: The secret_key_vault_id of this EncryptionDetails.
        """
        self.openapi_types = {
            'encryption_enabled': bool,
            'kek_url': str,
            'kek_vault_id': str,
            'secret_key_url': str,
            'secret_key_vault_id': str
        }

        self.attribute_map = {
            'encryption_enabled': 'encryptionEnabled',
            'kek_url': 'kekUrl',
            'kek_vault_id': 'kekVaultId',
            'secret_key_url': 'secretKeyUrl',
            'secret_key_vault_id': 'secretKeyVaultId'
        }

        self._encryption_enabled = encryption_enabled
        self._kek_url = kek_url
        self._kek_vault_id = kek_vault_id
        self._secret_key_url = secret_key_url
        self._secret_key_vault_id = secret_key_vault_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EncryptionDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EncryptionDetails of this EncryptionDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def encryption_enabled(self):
        """Gets the encryption_enabled of this EncryptionDetails.

        Identifies whether this backup copy represents an encrypted VM at the time of backup.

        :return: The encryption_enabled of this EncryptionDetails.
        :rtype: bool
        """
        return self._encryption_enabled

    @encryption_enabled.setter
    def encryption_enabled(self, encryption_enabled):
        """Sets the encryption_enabled of this EncryptionDetails.

        Identifies whether this backup copy represents an encrypted VM at the time of backup.

        :param encryption_enabled: The encryption_enabled of this EncryptionDetails.
        :type encryption_enabled: bool
        """

        self._encryption_enabled = encryption_enabled

    @property
    def kek_url(self):
        """Gets the kek_url of this EncryptionDetails.

        Key Url.

        :return: The kek_url of this EncryptionDetails.
        :rtype: str
        """
        return self._kek_url

    @kek_url.setter
    def kek_url(self, kek_url):
        """Sets the kek_url of this EncryptionDetails.

        Key Url.

        :param kek_url: The kek_url of this EncryptionDetails.
        :type kek_url: str
        """

        self._kek_url = kek_url

    @property
    def kek_vault_id(self):
        """Gets the kek_vault_id of this EncryptionDetails.

        ID of Key Vault where KEK is stored.

        :return: The kek_vault_id of this EncryptionDetails.
        :rtype: str
        """
        return self._kek_vault_id

    @kek_vault_id.setter
    def kek_vault_id(self, kek_vault_id):
        """Sets the kek_vault_id of this EncryptionDetails.

        ID of Key Vault where KEK is stored.

        :param kek_vault_id: The kek_vault_id of this EncryptionDetails.
        :type kek_vault_id: str
        """

        self._kek_vault_id = kek_vault_id

    @property
    def secret_key_url(self):
        """Gets the secret_key_url of this EncryptionDetails.

        Secret Url.

        :return: The secret_key_url of this EncryptionDetails.
        :rtype: str
        """
        return self._secret_key_url

    @secret_key_url.setter
    def secret_key_url(self, secret_key_url):
        """Sets the secret_key_url of this EncryptionDetails.

        Secret Url.

        :param secret_key_url: The secret_key_url of this EncryptionDetails.
        :type secret_key_url: str
        """

        self._secret_key_url = secret_key_url

    @property
    def secret_key_vault_id(self):
        """Gets the secret_key_vault_id of this EncryptionDetails.

        ID of Key Vault where Secret is stored.

        :return: The secret_key_vault_id of this EncryptionDetails.
        :rtype: str
        """
        return self._secret_key_vault_id

    @secret_key_vault_id.setter
    def secret_key_vault_id(self, secret_key_vault_id):
        """Sets the secret_key_vault_id of this EncryptionDetails.

        ID of Key Vault where Secret is stored.

        :param secret_key_vault_id: The secret_key_vault_id of this EncryptionDetails.
        :type secret_key_vault_id: str
        """

        self._secret_key_vault_id = secret_key_vault_id
