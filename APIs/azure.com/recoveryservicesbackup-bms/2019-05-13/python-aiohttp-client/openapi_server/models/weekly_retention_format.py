# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class WeeklyRetentionFormat(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, days_of_the_week: List[str]=None, weeks_of_the_month: List[str]=None):
        """WeeklyRetentionFormat - a model defined in OpenAPI

        :param days_of_the_week: The days_of_the_week of this WeeklyRetentionFormat.
        :param weeks_of_the_month: The weeks_of_the_month of this WeeklyRetentionFormat.
        """
        self.openapi_types = {
            'days_of_the_week': List[str],
            'weeks_of_the_month': List[str]
        }

        self.attribute_map = {
            'days_of_the_week': 'daysOfTheWeek',
            'weeks_of_the_month': 'weeksOfTheMonth'
        }

        self._days_of_the_week = days_of_the_week
        self._weeks_of_the_month = weeks_of_the_month

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WeeklyRetentionFormat':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WeeklyRetentionFormat of this WeeklyRetentionFormat.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def days_of_the_week(self):
        """Gets the days_of_the_week of this WeeklyRetentionFormat.

        List of days of the week.

        :return: The days_of_the_week of this WeeklyRetentionFormat.
        :rtype: List[str]
        """
        return self._days_of_the_week

    @days_of_the_week.setter
    def days_of_the_week(self, days_of_the_week):
        """Sets the days_of_the_week of this WeeklyRetentionFormat.

        List of days of the week.

        :param days_of_the_week: The days_of_the_week of this WeeklyRetentionFormat.
        :type days_of_the_week: List[str]
        """
        allowed_values = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]  # noqa: E501
        if not set(days_of_the_week).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `days_of_the_week` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(days_of_the_week) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._days_of_the_week = days_of_the_week

    @property
    def weeks_of_the_month(self):
        """Gets the weeks_of_the_month of this WeeklyRetentionFormat.

        List of weeks of month.

        :return: The weeks_of_the_month of this WeeklyRetentionFormat.
        :rtype: List[str]
        """
        return self._weeks_of_the_month

    @weeks_of_the_month.setter
    def weeks_of_the_month(self, weeks_of_the_month):
        """Sets the weeks_of_the_month of this WeeklyRetentionFormat.

        List of weeks of month.

        :param weeks_of_the_month: The weeks_of_the_month of this WeeklyRetentionFormat.
        :type weeks_of_the_month: List[str]
        """
        allowed_values = ["First", "Second", "Third", "Fourth", "Last", "Invalid"]  # noqa: E501
        if not set(weeks_of_the_month).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `weeks_of_the_month` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(weeks_of_the_month) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._weeks_of_the_month = weeks_of_the_month
