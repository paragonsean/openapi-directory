/*
 * RecoveryServicesBackupClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-05-13
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Azure IaaS VM workload-specific error information.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:08:52.489852-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AzureIaaSVMErrorInfo {
  public static final String SERIALIZED_NAME_ERROR_CODE = "errorCode";
  @SerializedName(SERIALIZED_NAME_ERROR_CODE)
  private Integer errorCode;

  public static final String SERIALIZED_NAME_ERROR_STRING = "errorString";
  @SerializedName(SERIALIZED_NAME_ERROR_STRING)
  private String errorString;

  public static final String SERIALIZED_NAME_ERROR_TITLE = "errorTitle";
  @SerializedName(SERIALIZED_NAME_ERROR_TITLE)
  private String errorTitle;

  public static final String SERIALIZED_NAME_RECOMMENDATIONS = "recommendations";
  @SerializedName(SERIALIZED_NAME_RECOMMENDATIONS)
  private List<String> recommendations = new ArrayList<>();

  public AzureIaaSVMErrorInfo() {
  }

  public AzureIaaSVMErrorInfo(
     Integer errorCode, 
     String errorString, 
     String errorTitle, 
     List<String> recommendations
  ) {
    this();
    this.errorCode = errorCode;
    this.errorString = errorString;
    this.errorTitle = errorTitle;
    this.recommendations = recommendations;
  }

  /**
   * Error code.
   * @return errorCode
   */
  @javax.annotation.Nullable
  public Integer getErrorCode() {
    return errorCode;
  }



  /**
   * Localized error string.
   * @return errorString
   */
  @javax.annotation.Nullable
  public String getErrorString() {
    return errorString;
  }



  /**
   * Title: Typically, the entity that the error pertains to.
   * @return errorTitle
   */
  @javax.annotation.Nullable
  public String getErrorTitle() {
    return errorTitle;
  }



  /**
   * List of localized recommendations for above error code.
   * @return recommendations
   */
  @javax.annotation.Nullable
  public List<String> getRecommendations() {
    return recommendations;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AzureIaaSVMErrorInfo azureIaaSVMErrorInfo = (AzureIaaSVMErrorInfo) o;
    return Objects.equals(this.errorCode, azureIaaSVMErrorInfo.errorCode) &&
        Objects.equals(this.errorString, azureIaaSVMErrorInfo.errorString) &&
        Objects.equals(this.errorTitle, azureIaaSVMErrorInfo.errorTitle) &&
        Objects.equals(this.recommendations, azureIaaSVMErrorInfo.recommendations);
  }

  @Override
  public int hashCode() {
    return Objects.hash(errorCode, errorString, errorTitle, recommendations);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AzureIaaSVMErrorInfo {\n");
    sb.append("    errorCode: ").append(toIndentedString(errorCode)).append("\n");
    sb.append("    errorString: ").append(toIndentedString(errorString)).append("\n");
    sb.append("    errorTitle: ").append(toIndentedString(errorTitle)).append("\n");
    sb.append("    recommendations: ").append(toIndentedString(recommendations)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("errorCode");
    openapiFields.add("errorString");
    openapiFields.add("errorTitle");
    openapiFields.add("recommendations");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AzureIaaSVMErrorInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AzureIaaSVMErrorInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AzureIaaSVMErrorInfo is not found in the empty JSON string", AzureIaaSVMErrorInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AzureIaaSVMErrorInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AzureIaaSVMErrorInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("errorString") != null && !jsonObj.get("errorString").isJsonNull()) && !jsonObj.get("errorString").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `errorString` to be a primitive type in the JSON string but got `%s`", jsonObj.get("errorString").toString()));
      }
      if ((jsonObj.get("errorTitle") != null && !jsonObj.get("errorTitle").isJsonNull()) && !jsonObj.get("errorTitle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `errorTitle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("errorTitle").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("recommendations") != null && !jsonObj.get("recommendations").isJsonNull() && !jsonObj.get("recommendations").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `recommendations` to be an array in the JSON string but got `%s`", jsonObj.get("recommendations").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AzureIaaSVMErrorInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AzureIaaSVMErrorInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AzureIaaSVMErrorInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AzureIaaSVMErrorInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<AzureIaaSVMErrorInfo>() {
           @Override
           public void write(JsonWriter out, AzureIaaSVMErrorInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AzureIaaSVMErrorInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AzureIaaSVMErrorInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AzureIaaSVMErrorInfo
   * @throws IOException if the JSON string is invalid with respect to AzureIaaSVMErrorInfo
   */
  public static AzureIaaSVMErrorInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AzureIaaSVMErrorInfo.class);
  }

  /**
   * Convert an instance of AzureIaaSVMErrorInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

