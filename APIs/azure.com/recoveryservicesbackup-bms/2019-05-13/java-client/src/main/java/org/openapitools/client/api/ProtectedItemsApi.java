/*
 * RecoveryServicesBackupClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-05-13
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ProtectedItemResource;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ProtectedItemsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ProtectedItemsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ProtectedItemsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for protectedItemsCreateOrUpdate
     * @param apiVersion Client Api Version. (required)
     * @param vaultName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Fabric name associated with the backup item. (required)
     * @param containerName Container name associated with the backup item. (required)
     * @param protectedItemName Item name to be backed up. (required)
     * @param parameters resource backed up item (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protectedItemsCreateOrUpdateCall(String apiVersion, String vaultName, String resourceGroupName, String subscriptionId, String fabricName, String containerName, String protectedItemName, ProtectedItemResource parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/backupFabrics/{fabricName}/protectionContainers/{containerName}/protectedItems/{protectedItemName}"
            .replace("{" + "vaultName" + "}", localVarApiClient.escapeString(vaultName.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "fabricName" + "}", localVarApiClient.escapeString(fabricName.toString()))
            .replace("{" + "containerName" + "}", localVarApiClient.escapeString(containerName.toString()))
            .replace("{" + "protectedItemName" + "}", localVarApiClient.escapeString(protectedItemName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call protectedItemsCreateOrUpdateValidateBeforeCall(String apiVersion, String vaultName, String resourceGroupName, String subscriptionId, String fabricName, String containerName, String protectedItemName, ProtectedItemResource parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling protectedItemsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'vaultName' is set
        if (vaultName == null) {
            throw new ApiException("Missing the required parameter 'vaultName' when calling protectedItemsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling protectedItemsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling protectedItemsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'fabricName' is set
        if (fabricName == null) {
            throw new ApiException("Missing the required parameter 'fabricName' when calling protectedItemsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'containerName' is set
        if (containerName == null) {
            throw new ApiException("Missing the required parameter 'containerName' when calling protectedItemsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'protectedItemName' is set
        if (protectedItemName == null) {
            throw new ApiException("Missing the required parameter 'protectedItemName' when calling protectedItemsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling protectedItemsCreateOrUpdate(Async)");
        }

        return protectedItemsCreateOrUpdateCall(apiVersion, vaultName, resourceGroupName, subscriptionId, fabricName, containerName, protectedItemName, parameters, _callback);

    }

    /**
     * 
     * Enables backup of an item or to modifies the backup policy information of an already backed up item. This is an  asynchronous operation. To know the status of the operation, call the GetItemOperationResult API.
     * @param apiVersion Client Api Version. (required)
     * @param vaultName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Fabric name associated with the backup item. (required)
     * @param containerName Container name associated with the backup item. (required)
     * @param protectedItemName Item name to be backed up. (required)
     * @param parameters resource backed up item (required)
     * @return ProtectedItemResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public ProtectedItemResource protectedItemsCreateOrUpdate(String apiVersion, String vaultName, String resourceGroupName, String subscriptionId, String fabricName, String containerName, String protectedItemName, ProtectedItemResource parameters) throws ApiException {
        ApiResponse<ProtectedItemResource> localVarResp = protectedItemsCreateOrUpdateWithHttpInfo(apiVersion, vaultName, resourceGroupName, subscriptionId, fabricName, containerName, protectedItemName, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Enables backup of an item or to modifies the backup policy information of an already backed up item. This is an  asynchronous operation. To know the status of the operation, call the GetItemOperationResult API.
     * @param apiVersion Client Api Version. (required)
     * @param vaultName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Fabric name associated with the backup item. (required)
     * @param containerName Container name associated with the backup item. (required)
     * @param protectedItemName Item name to be backed up. (required)
     * @param parameters resource backed up item (required)
     * @return ApiResponse&lt;ProtectedItemResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProtectedItemResource> protectedItemsCreateOrUpdateWithHttpInfo(String apiVersion, String vaultName, String resourceGroupName, String subscriptionId, String fabricName, String containerName, String protectedItemName, ProtectedItemResource parameters) throws ApiException {
        okhttp3.Call localVarCall = protectedItemsCreateOrUpdateValidateBeforeCall(apiVersion, vaultName, resourceGroupName, subscriptionId, fabricName, containerName, protectedItemName, parameters, null);
        Type localVarReturnType = new TypeToken<ProtectedItemResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Enables backup of an item or to modifies the backup policy information of an already backed up item. This is an  asynchronous operation. To know the status of the operation, call the GetItemOperationResult API.
     * @param apiVersion Client Api Version. (required)
     * @param vaultName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Fabric name associated with the backup item. (required)
     * @param containerName Container name associated with the backup item. (required)
     * @param protectedItemName Item name to be backed up. (required)
     * @param parameters resource backed up item (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protectedItemsCreateOrUpdateAsync(String apiVersion, String vaultName, String resourceGroupName, String subscriptionId, String fabricName, String containerName, String protectedItemName, ProtectedItemResource parameters, final ApiCallback<ProtectedItemResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = protectedItemsCreateOrUpdateValidateBeforeCall(apiVersion, vaultName, resourceGroupName, subscriptionId, fabricName, containerName, protectedItemName, parameters, _callback);
        Type localVarReturnType = new TypeToken<ProtectedItemResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for protectedItemsDelete
     * @param apiVersion Client Api Version. (required)
     * @param vaultName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Fabric name associated with the backed up item. (required)
     * @param containerName Container name associated with the backed up item. (required)
     * @param protectedItemName Backed up item to be deleted. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> NoContent </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protectedItemsDeleteCall(String apiVersion, String vaultName, String resourceGroupName, String subscriptionId, String fabricName, String containerName, String protectedItemName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/backupFabrics/{fabricName}/protectionContainers/{containerName}/protectedItems/{protectedItemName}"
            .replace("{" + "vaultName" + "}", localVarApiClient.escapeString(vaultName.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "fabricName" + "}", localVarApiClient.escapeString(fabricName.toString()))
            .replace("{" + "containerName" + "}", localVarApiClient.escapeString(containerName.toString()))
            .replace("{" + "protectedItemName" + "}", localVarApiClient.escapeString(protectedItemName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call protectedItemsDeleteValidateBeforeCall(String apiVersion, String vaultName, String resourceGroupName, String subscriptionId, String fabricName, String containerName, String protectedItemName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling protectedItemsDelete(Async)");
        }

        // verify the required parameter 'vaultName' is set
        if (vaultName == null) {
            throw new ApiException("Missing the required parameter 'vaultName' when calling protectedItemsDelete(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling protectedItemsDelete(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling protectedItemsDelete(Async)");
        }

        // verify the required parameter 'fabricName' is set
        if (fabricName == null) {
            throw new ApiException("Missing the required parameter 'fabricName' when calling protectedItemsDelete(Async)");
        }

        // verify the required parameter 'containerName' is set
        if (containerName == null) {
            throw new ApiException("Missing the required parameter 'containerName' when calling protectedItemsDelete(Async)");
        }

        // verify the required parameter 'protectedItemName' is set
        if (protectedItemName == null) {
            throw new ApiException("Missing the required parameter 'protectedItemName' when calling protectedItemsDelete(Async)");
        }

        return protectedItemsDeleteCall(apiVersion, vaultName, resourceGroupName, subscriptionId, fabricName, containerName, protectedItemName, _callback);

    }

    /**
     * 
     * Used to disable backup of an item within a container. This is an asynchronous operation. To know the status of the  request, call the GetItemOperationResult API.
     * @param apiVersion Client Api Version. (required)
     * @param vaultName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Fabric name associated with the backed up item. (required)
     * @param containerName Container name associated with the backed up item. (required)
     * @param protectedItemName Backed up item to be deleted. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> NoContent </td><td>  -  </td></tr>
     </table>
     */
    public void protectedItemsDelete(String apiVersion, String vaultName, String resourceGroupName, String subscriptionId, String fabricName, String containerName, String protectedItemName) throws ApiException {
        protectedItemsDeleteWithHttpInfo(apiVersion, vaultName, resourceGroupName, subscriptionId, fabricName, containerName, protectedItemName);
    }

    /**
     * 
     * Used to disable backup of an item within a container. This is an asynchronous operation. To know the status of the  request, call the GetItemOperationResult API.
     * @param apiVersion Client Api Version. (required)
     * @param vaultName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Fabric name associated with the backed up item. (required)
     * @param containerName Container name associated with the backed up item. (required)
     * @param protectedItemName Backed up item to be deleted. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> NoContent </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> protectedItemsDeleteWithHttpInfo(String apiVersion, String vaultName, String resourceGroupName, String subscriptionId, String fabricName, String containerName, String protectedItemName) throws ApiException {
        okhttp3.Call localVarCall = protectedItemsDeleteValidateBeforeCall(apiVersion, vaultName, resourceGroupName, subscriptionId, fabricName, containerName, protectedItemName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Used to disable backup of an item within a container. This is an asynchronous operation. To know the status of the  request, call the GetItemOperationResult API.
     * @param apiVersion Client Api Version. (required)
     * @param vaultName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Fabric name associated with the backed up item. (required)
     * @param containerName Container name associated with the backed up item. (required)
     * @param protectedItemName Backed up item to be deleted. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> NoContent </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protectedItemsDeleteAsync(String apiVersion, String vaultName, String resourceGroupName, String subscriptionId, String fabricName, String containerName, String protectedItemName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = protectedItemsDeleteValidateBeforeCall(apiVersion, vaultName, resourceGroupName, subscriptionId, fabricName, containerName, protectedItemName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for protectedItemsGet
     * @param apiVersion Client Api Version. (required)
     * @param vaultName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Fabric name associated with the backed up item. (required)
     * @param containerName Container name associated with the backed up item. (required)
     * @param protectedItemName Backed up item name whose details are to be fetched. (required)
     * @param $filter OData filter options. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protectedItemsGetCall(String apiVersion, String vaultName, String resourceGroupName, String subscriptionId, String fabricName, String containerName, String protectedItemName, String $filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/backupFabrics/{fabricName}/protectionContainers/{containerName}/protectedItems/{protectedItemName}"
            .replace("{" + "vaultName" + "}", localVarApiClient.escapeString(vaultName.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "fabricName" + "}", localVarApiClient.escapeString(fabricName.toString()))
            .replace("{" + "containerName" + "}", localVarApiClient.escapeString(containerName.toString()))
            .replace("{" + "protectedItemName" + "}", localVarApiClient.escapeString(protectedItemName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call protectedItemsGetValidateBeforeCall(String apiVersion, String vaultName, String resourceGroupName, String subscriptionId, String fabricName, String containerName, String protectedItemName, String $filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling protectedItemsGet(Async)");
        }

        // verify the required parameter 'vaultName' is set
        if (vaultName == null) {
            throw new ApiException("Missing the required parameter 'vaultName' when calling protectedItemsGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling protectedItemsGet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling protectedItemsGet(Async)");
        }

        // verify the required parameter 'fabricName' is set
        if (fabricName == null) {
            throw new ApiException("Missing the required parameter 'fabricName' when calling protectedItemsGet(Async)");
        }

        // verify the required parameter 'containerName' is set
        if (containerName == null) {
            throw new ApiException("Missing the required parameter 'containerName' when calling protectedItemsGet(Async)");
        }

        // verify the required parameter 'protectedItemName' is set
        if (protectedItemName == null) {
            throw new ApiException("Missing the required parameter 'protectedItemName' when calling protectedItemsGet(Async)");
        }

        return protectedItemsGetCall(apiVersion, vaultName, resourceGroupName, subscriptionId, fabricName, containerName, protectedItemName, $filter, _callback);

    }

    /**
     * 
     * Provides the details of the backed up item. This is an asynchronous operation. To know the status of the operation,  call the GetItemOperationResult API.
     * @param apiVersion Client Api Version. (required)
     * @param vaultName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Fabric name associated with the backed up item. (required)
     * @param containerName Container name associated with the backed up item. (required)
     * @param protectedItemName Backed up item name whose details are to be fetched. (required)
     * @param $filter OData filter options. (optional)
     * @return ProtectedItemResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ProtectedItemResource protectedItemsGet(String apiVersion, String vaultName, String resourceGroupName, String subscriptionId, String fabricName, String containerName, String protectedItemName, String $filter) throws ApiException {
        ApiResponse<ProtectedItemResource> localVarResp = protectedItemsGetWithHttpInfo(apiVersion, vaultName, resourceGroupName, subscriptionId, fabricName, containerName, protectedItemName, $filter);
        return localVarResp.getData();
    }

    /**
     * 
     * Provides the details of the backed up item. This is an asynchronous operation. To know the status of the operation,  call the GetItemOperationResult API.
     * @param apiVersion Client Api Version. (required)
     * @param vaultName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Fabric name associated with the backed up item. (required)
     * @param containerName Container name associated with the backed up item. (required)
     * @param protectedItemName Backed up item name whose details are to be fetched. (required)
     * @param $filter OData filter options. (optional)
     * @return ApiResponse&lt;ProtectedItemResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProtectedItemResource> protectedItemsGetWithHttpInfo(String apiVersion, String vaultName, String resourceGroupName, String subscriptionId, String fabricName, String containerName, String protectedItemName, String $filter) throws ApiException {
        okhttp3.Call localVarCall = protectedItemsGetValidateBeforeCall(apiVersion, vaultName, resourceGroupName, subscriptionId, fabricName, containerName, protectedItemName, $filter, null);
        Type localVarReturnType = new TypeToken<ProtectedItemResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Provides the details of the backed up item. This is an asynchronous operation. To know the status of the operation,  call the GetItemOperationResult API.
     * @param apiVersion Client Api Version. (required)
     * @param vaultName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Fabric name associated with the backed up item. (required)
     * @param containerName Container name associated with the backed up item. (required)
     * @param protectedItemName Backed up item name whose details are to be fetched. (required)
     * @param $filter OData filter options. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protectedItemsGetAsync(String apiVersion, String vaultName, String resourceGroupName, String subscriptionId, String fabricName, String containerName, String protectedItemName, String $filter, final ApiCallback<ProtectedItemResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = protectedItemsGetValidateBeforeCall(apiVersion, vaultName, resourceGroupName, subscriptionId, fabricName, containerName, protectedItemName, $filter, _callback);
        Type localVarReturnType = new TypeToken<ProtectedItemResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
