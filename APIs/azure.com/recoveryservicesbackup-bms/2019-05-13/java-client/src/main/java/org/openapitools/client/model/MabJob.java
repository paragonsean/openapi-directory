/*
 * RecoveryServicesBackupClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-05-13
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Job;
import org.openapitools.client.model.MabErrorInfo;
import org.openapitools.client.model.MabJobExtendedInfo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * MAB workload-specific job.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:08:52.489852-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MabJob extends Job {
  /**
   * Gets or Sets actionsInfo
   */
  @JsonAdapter(ActionsInfoEnum.Adapter.class)
  public enum ActionsInfoEnum {
    INVALID("Invalid"),
    
    CANCELLABLE("Cancellable"),
    
    RETRIABLE("Retriable");

    private String value;

    ActionsInfoEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ActionsInfoEnum fromValue(String value) {
      for (ActionsInfoEnum b : ActionsInfoEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ActionsInfoEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ActionsInfoEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ActionsInfoEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ActionsInfoEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ActionsInfoEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ACTIONS_INFO = "actionsInfo";
  @SerializedName(SERIALIZED_NAME_ACTIONS_INFO)
  private List<ActionsInfoEnum> actionsInfo = new ArrayList<>();

  public static final String SERIALIZED_NAME_DURATION = "duration";
  @SerializedName(SERIALIZED_NAME_DURATION)
  private String duration;

  public static final String SERIALIZED_NAME_ERROR_DETAILS = "errorDetails";
  @SerializedName(SERIALIZED_NAME_ERROR_DETAILS)
  private List<MabErrorInfo> errorDetails = new ArrayList<>();

  public static final String SERIALIZED_NAME_EXTENDED_INFO = "extendedInfo";
  @SerializedName(SERIALIZED_NAME_EXTENDED_INFO)
  private MabJobExtendedInfo extendedInfo;

  public static final String SERIALIZED_NAME_MAB_SERVER_NAME = "mabServerName";
  @SerializedName(SERIALIZED_NAME_MAB_SERVER_NAME)
  private String mabServerName;

  /**
   * Server type of MAB container.
   */
  @JsonAdapter(MabServerTypeEnum.Adapter.class)
  public enum MabServerTypeEnum {
    INVALID("Invalid"),
    
    UNKNOWN("Unknown"),
    
    IAAS_VM_CONTAINER("IaasVMContainer"),
    
    IAAS_VM_SERVICE_CONTAINER("IaasVMServiceContainer"),
    
    DPM_CONTAINER("DPMContainer"),
    
    AZURE_BACKUP_SERVER_CONTAINER("AzureBackupServerContainer"),
    
    MAB_CONTAINER("MABContainer"),
    
    CLUSTER("Cluster"),
    
    AZURE_SQL_CONTAINER("AzureSqlContainer"),
    
    WINDOWS("Windows"),
    
    V_CENTER("VCenter"),
    
    VM_APP_CONTAINER("VMAppContainer"),
    
    SQLAG_WORK_LOAD_CONTAINER("SQLAGWorkLoadContainer"),
    
    STORAGE_CONTAINER("StorageContainer"),
    
    GENERIC_CONTAINER("GenericContainer");

    private String value;

    MabServerTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MabServerTypeEnum fromValue(String value) {
      for (MabServerTypeEnum b : MabServerTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MabServerTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MabServerTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MabServerTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MabServerTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MabServerTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MAB_SERVER_TYPE = "mabServerType";
  @SerializedName(SERIALIZED_NAME_MAB_SERVER_TYPE)
  private MabServerTypeEnum mabServerType;

  /**
   * Workload type of backup item.
   */
  @JsonAdapter(WorkloadTypeEnum.Adapter.class)
  public enum WorkloadTypeEnum {
    INVALID("Invalid"),
    
    VM("VM"),
    
    FILE_FOLDER("FileFolder"),
    
    AZURE_SQL_DB("AzureSqlDb"),
    
    SQLDB("SQLDB"),
    
    EXCHANGE("Exchange"),
    
    SHAREPOINT("Sharepoint"),
    
    V_MWARE_VM("VMwareVM"),
    
    SYSTEM_STATE("SystemState"),
    
    CLIENT("Client"),
    
    GENERIC_DATA_SOURCE("GenericDataSource"),
    
    SQL_DATA_BASE("SQLDataBase"),
    
    AZURE_FILE_SHARE("AzureFileShare"),
    
    SAP_HANA_DATABASE("SAPHanaDatabase"),
    
    SAP_ASE_DATABASE("SAPAseDatabase");

    private String value;

    WorkloadTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static WorkloadTypeEnum fromValue(String value) {
      for (WorkloadTypeEnum b : WorkloadTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<WorkloadTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final WorkloadTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public WorkloadTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return WorkloadTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      WorkloadTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_WORKLOAD_TYPE = "workloadType";
  @SerializedName(SERIALIZED_NAME_WORKLOAD_TYPE)
  private WorkloadTypeEnum workloadType;

  public MabJob() {
    this.jobType = this.getClass().getSimpleName();
  }

  public MabJob actionsInfo(List<ActionsInfoEnum> actionsInfo) {
    this.actionsInfo = actionsInfo;
    return this;
  }

  public MabJob addActionsInfoItem(ActionsInfoEnum actionsInfoItem) {
    if (this.actionsInfo == null) {
      this.actionsInfo = new ArrayList<>();
    }
    this.actionsInfo.add(actionsInfoItem);
    return this;
  }

  /**
   * The state/actions applicable on jobs like cancel/retry.
   * @return actionsInfo
   */
  @javax.annotation.Nullable
  public List<ActionsInfoEnum> getActionsInfo() {
    return actionsInfo;
  }

  public void setActionsInfo(List<ActionsInfoEnum> actionsInfo) {
    this.actionsInfo = actionsInfo;
  }


  public MabJob duration(String duration) {
    this.duration = duration;
    return this;
  }

  /**
   * Time taken by job to run.
   * @return duration
   */
  @javax.annotation.Nullable
  public String getDuration() {
    return duration;
  }

  public void setDuration(String duration) {
    this.duration = duration;
  }


  public MabJob errorDetails(List<MabErrorInfo> errorDetails) {
    this.errorDetails = errorDetails;
    return this;
  }

  public MabJob addErrorDetailsItem(MabErrorInfo errorDetailsItem) {
    if (this.errorDetails == null) {
      this.errorDetails = new ArrayList<>();
    }
    this.errorDetails.add(errorDetailsItem);
    return this;
  }

  /**
   * The errors.
   * @return errorDetails
   */
  @javax.annotation.Nullable
  public List<MabErrorInfo> getErrorDetails() {
    return errorDetails;
  }

  public void setErrorDetails(List<MabErrorInfo> errorDetails) {
    this.errorDetails = errorDetails;
  }


  public MabJob extendedInfo(MabJobExtendedInfo extendedInfo) {
    this.extendedInfo = extendedInfo;
    return this;
  }

  /**
   * Get extendedInfo
   * @return extendedInfo
   */
  @javax.annotation.Nullable
  public MabJobExtendedInfo getExtendedInfo() {
    return extendedInfo;
  }

  public void setExtendedInfo(MabJobExtendedInfo extendedInfo) {
    this.extendedInfo = extendedInfo;
  }


  public MabJob mabServerName(String mabServerName) {
    this.mabServerName = mabServerName;
    return this;
  }

  /**
   * Name of server protecting the DS.
   * @return mabServerName
   */
  @javax.annotation.Nullable
  public String getMabServerName() {
    return mabServerName;
  }

  public void setMabServerName(String mabServerName) {
    this.mabServerName = mabServerName;
  }


  public MabJob mabServerType(MabServerTypeEnum mabServerType) {
    this.mabServerType = mabServerType;
    return this;
  }

  /**
   * Server type of MAB container.
   * @return mabServerType
   */
  @javax.annotation.Nullable
  public MabServerTypeEnum getMabServerType() {
    return mabServerType;
  }

  public void setMabServerType(MabServerTypeEnum mabServerType) {
    this.mabServerType = mabServerType;
  }


  public MabJob workloadType(WorkloadTypeEnum workloadType) {
    this.workloadType = workloadType;
    return this;
  }

  /**
   * Workload type of backup item.
   * @return workloadType
   */
  @javax.annotation.Nullable
  public WorkloadTypeEnum getWorkloadType() {
    return workloadType;
  }

  public void setWorkloadType(WorkloadTypeEnum workloadType) {
    this.workloadType = workloadType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MabJob mabJob = (MabJob) o;
    return Objects.equals(this.actionsInfo, mabJob.actionsInfo) &&
        Objects.equals(this.duration, mabJob.duration) &&
        Objects.equals(this.errorDetails, mabJob.errorDetails) &&
        Objects.equals(this.extendedInfo, mabJob.extendedInfo) &&
        Objects.equals(this.mabServerName, mabJob.mabServerName) &&
        Objects.equals(this.mabServerType, mabJob.mabServerType) &&
        Objects.equals(this.workloadType, mabJob.workloadType) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(actionsInfo, duration, errorDetails, extendedInfo, mabServerName, mabServerType, workloadType, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MabJob {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    actionsInfo: ").append(toIndentedString(actionsInfo)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    errorDetails: ").append(toIndentedString(errorDetails)).append("\n");
    sb.append("    extendedInfo: ").append(toIndentedString(extendedInfo)).append("\n");
    sb.append("    mabServerName: ").append(toIndentedString(mabServerName)).append("\n");
    sb.append("    mabServerType: ").append(toIndentedString(mabServerType)).append("\n");
    sb.append("    workloadType: ").append(toIndentedString(workloadType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("activityId");
    openapiFields.add("backupManagementType");
    openapiFields.add("endTime");
    openapiFields.add("entityFriendlyName");
    openapiFields.add("jobType");
    openapiFields.add("operation");
    openapiFields.add("startTime");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("jobType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MabJob
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MabJob.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MabJob is not found in the empty JSON string", MabJob.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MabJob.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MabJob` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : MabJob.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MabJob.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MabJob' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MabJob> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MabJob.class));

       return (TypeAdapter<T>) new TypeAdapter<MabJob>() {
           @Override
           public void write(JsonWriter out, MabJob value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MabJob read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MabJob given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MabJob
   * @throws IOException if the JSON string is invalid with respect to MabJob
   */
  public static MabJob fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MabJob.class);
  }

  /**
   * Convert an instance of MabJob to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

