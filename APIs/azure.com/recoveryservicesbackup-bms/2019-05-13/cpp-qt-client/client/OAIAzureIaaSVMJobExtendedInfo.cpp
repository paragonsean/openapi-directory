/**
 * RecoveryServicesBackupClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-05-13
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAzureIaaSVMJobExtendedInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAzureIaaSVMJobExtendedInfo::OAIAzureIaaSVMJobExtendedInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAzureIaaSVMJobExtendedInfo::OAIAzureIaaSVMJobExtendedInfo() {
    this->initializeModel();
}

OAIAzureIaaSVMJobExtendedInfo::~OAIAzureIaaSVMJobExtendedInfo() {}

void OAIAzureIaaSVMJobExtendedInfo::initializeModel() {

    m_dynamic_error_message_isSet = false;
    m_dynamic_error_message_isValid = false;

    m_estimated_remaining_duration_isSet = false;
    m_estimated_remaining_duration_isValid = false;

    m_internal_property_bag_isSet = false;
    m_internal_property_bag_isValid = false;

    m_progress_percentage_isSet = false;
    m_progress_percentage_isValid = false;

    m_property_bag_isSet = false;
    m_property_bag_isValid = false;

    m_tasks_list_isSet = false;
    m_tasks_list_isValid = false;
}

void OAIAzureIaaSVMJobExtendedInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAzureIaaSVMJobExtendedInfo::fromJsonObject(QJsonObject json) {

    m_dynamic_error_message_isValid = ::OpenAPI::fromJsonValue(m_dynamic_error_message, json[QString("dynamicErrorMessage")]);
    m_dynamic_error_message_isSet = !json[QString("dynamicErrorMessage")].isNull() && m_dynamic_error_message_isValid;

    m_estimated_remaining_duration_isValid = ::OpenAPI::fromJsonValue(m_estimated_remaining_duration, json[QString("estimatedRemainingDuration")]);
    m_estimated_remaining_duration_isSet = !json[QString("estimatedRemainingDuration")].isNull() && m_estimated_remaining_duration_isValid;

    m_internal_property_bag_isValid = ::OpenAPI::fromJsonValue(m_internal_property_bag, json[QString("internalPropertyBag")]);
    m_internal_property_bag_isSet = !json[QString("internalPropertyBag")].isNull() && m_internal_property_bag_isValid;

    m_progress_percentage_isValid = ::OpenAPI::fromJsonValue(m_progress_percentage, json[QString("progressPercentage")]);
    m_progress_percentage_isSet = !json[QString("progressPercentage")].isNull() && m_progress_percentage_isValid;

    m_property_bag_isValid = ::OpenAPI::fromJsonValue(m_property_bag, json[QString("propertyBag")]);
    m_property_bag_isSet = !json[QString("propertyBag")].isNull() && m_property_bag_isValid;

    m_tasks_list_isValid = ::OpenAPI::fromJsonValue(m_tasks_list, json[QString("tasksList")]);
    m_tasks_list_isSet = !json[QString("tasksList")].isNull() && m_tasks_list_isValid;
}

QString OAIAzureIaaSVMJobExtendedInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAzureIaaSVMJobExtendedInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_dynamic_error_message_isSet) {
        obj.insert(QString("dynamicErrorMessage"), ::OpenAPI::toJsonValue(m_dynamic_error_message));
    }
    if (m_estimated_remaining_duration_isSet) {
        obj.insert(QString("estimatedRemainingDuration"), ::OpenAPI::toJsonValue(m_estimated_remaining_duration));
    }
    if (m_internal_property_bag.size() > 0) {
        obj.insert(QString("internalPropertyBag"), ::OpenAPI::toJsonValue(m_internal_property_bag));
    }
    if (m_progress_percentage_isSet) {
        obj.insert(QString("progressPercentage"), ::OpenAPI::toJsonValue(m_progress_percentage));
    }
    if (m_property_bag.size() > 0) {
        obj.insert(QString("propertyBag"), ::OpenAPI::toJsonValue(m_property_bag));
    }
    if (m_tasks_list.size() > 0) {
        obj.insert(QString("tasksList"), ::OpenAPI::toJsonValue(m_tasks_list));
    }
    return obj;
}

QString OAIAzureIaaSVMJobExtendedInfo::getDynamicErrorMessage() const {
    return m_dynamic_error_message;
}
void OAIAzureIaaSVMJobExtendedInfo::setDynamicErrorMessage(const QString &dynamic_error_message) {
    m_dynamic_error_message = dynamic_error_message;
    m_dynamic_error_message_isSet = true;
}

bool OAIAzureIaaSVMJobExtendedInfo::is_dynamic_error_message_Set() const{
    return m_dynamic_error_message_isSet;
}

bool OAIAzureIaaSVMJobExtendedInfo::is_dynamic_error_message_Valid() const{
    return m_dynamic_error_message_isValid;
}

QString OAIAzureIaaSVMJobExtendedInfo::getEstimatedRemainingDuration() const {
    return m_estimated_remaining_duration;
}
void OAIAzureIaaSVMJobExtendedInfo::setEstimatedRemainingDuration(const QString &estimated_remaining_duration) {
    m_estimated_remaining_duration = estimated_remaining_duration;
    m_estimated_remaining_duration_isSet = true;
}

bool OAIAzureIaaSVMJobExtendedInfo::is_estimated_remaining_duration_Set() const{
    return m_estimated_remaining_duration_isSet;
}

bool OAIAzureIaaSVMJobExtendedInfo::is_estimated_remaining_duration_Valid() const{
    return m_estimated_remaining_duration_isValid;
}

QMap<QString, QString> OAIAzureIaaSVMJobExtendedInfo::getInternalPropertyBag() const {
    return m_internal_property_bag;
}
void OAIAzureIaaSVMJobExtendedInfo::setInternalPropertyBag(const QMap<QString, QString> &internal_property_bag) {
    m_internal_property_bag = internal_property_bag;
    m_internal_property_bag_isSet = true;
}

bool OAIAzureIaaSVMJobExtendedInfo::is_internal_property_bag_Set() const{
    return m_internal_property_bag_isSet;
}

bool OAIAzureIaaSVMJobExtendedInfo::is_internal_property_bag_Valid() const{
    return m_internal_property_bag_isValid;
}

double OAIAzureIaaSVMJobExtendedInfo::getProgressPercentage() const {
    return m_progress_percentage;
}
void OAIAzureIaaSVMJobExtendedInfo::setProgressPercentage(const double &progress_percentage) {
    m_progress_percentage = progress_percentage;
    m_progress_percentage_isSet = true;
}

bool OAIAzureIaaSVMJobExtendedInfo::is_progress_percentage_Set() const{
    return m_progress_percentage_isSet;
}

bool OAIAzureIaaSVMJobExtendedInfo::is_progress_percentage_Valid() const{
    return m_progress_percentage_isValid;
}

QMap<QString, QString> OAIAzureIaaSVMJobExtendedInfo::getPropertyBag() const {
    return m_property_bag;
}
void OAIAzureIaaSVMJobExtendedInfo::setPropertyBag(const QMap<QString, QString> &property_bag) {
    m_property_bag = property_bag;
    m_property_bag_isSet = true;
}

bool OAIAzureIaaSVMJobExtendedInfo::is_property_bag_Set() const{
    return m_property_bag_isSet;
}

bool OAIAzureIaaSVMJobExtendedInfo::is_property_bag_Valid() const{
    return m_property_bag_isValid;
}

QList<OAIAzureIaaSVMJobTaskDetails> OAIAzureIaaSVMJobExtendedInfo::getTasksList() const {
    return m_tasks_list;
}
void OAIAzureIaaSVMJobExtendedInfo::setTasksList(const QList<OAIAzureIaaSVMJobTaskDetails> &tasks_list) {
    m_tasks_list = tasks_list;
    m_tasks_list_isSet = true;
}

bool OAIAzureIaaSVMJobExtendedInfo::is_tasks_list_Set() const{
    return m_tasks_list_isSet;
}

bool OAIAzureIaaSVMJobExtendedInfo::is_tasks_list_Valid() const{
    return m_tasks_list_isValid;
}

bool OAIAzureIaaSVMJobExtendedInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dynamic_error_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_estimated_remaining_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_internal_property_bag.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_progress_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_property_bag.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tasks_list.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAzureIaaSVMJobExtendedInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
