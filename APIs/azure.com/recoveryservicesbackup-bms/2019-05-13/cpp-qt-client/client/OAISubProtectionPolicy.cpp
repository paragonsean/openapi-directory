/**
 * RecoveryServicesBackupClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-05-13
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISubProtectionPolicy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISubProtectionPolicy::OAISubProtectionPolicy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISubProtectionPolicy::OAISubProtectionPolicy() {
    this->initializeModel();
}

OAISubProtectionPolicy::~OAISubProtectionPolicy() {}

void OAISubProtectionPolicy::initializeModel() {

    m_policy_type_isSet = false;
    m_policy_type_isValid = false;

    m_retention_policy_isSet = false;
    m_retention_policy_isValid = false;

    m_schedule_policy_isSet = false;
    m_schedule_policy_isValid = false;
}

void OAISubProtectionPolicy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISubProtectionPolicy::fromJsonObject(QJsonObject json) {

    m_policy_type_isValid = ::OpenAPI::fromJsonValue(m_policy_type, json[QString("policyType")]);
    m_policy_type_isSet = !json[QString("policyType")].isNull() && m_policy_type_isValid;

    m_retention_policy_isValid = ::OpenAPI::fromJsonValue(m_retention_policy, json[QString("retentionPolicy")]);
    m_retention_policy_isSet = !json[QString("retentionPolicy")].isNull() && m_retention_policy_isValid;

    m_schedule_policy_isValid = ::OpenAPI::fromJsonValue(m_schedule_policy, json[QString("schedulePolicy")]);
    m_schedule_policy_isSet = !json[QString("schedulePolicy")].isNull() && m_schedule_policy_isValid;
}

QString OAISubProtectionPolicy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISubProtectionPolicy::asJsonObject() const {
    QJsonObject obj;
    if (m_policy_type_isSet) {
        obj.insert(QString("policyType"), ::OpenAPI::toJsonValue(m_policy_type));
    }
    if (m_retention_policy.isSet()) {
        obj.insert(QString("retentionPolicy"), ::OpenAPI::toJsonValue(m_retention_policy));
    }
    if (m_schedule_policy.isSet()) {
        obj.insert(QString("schedulePolicy"), ::OpenAPI::toJsonValue(m_schedule_policy));
    }
    return obj;
}

QString OAISubProtectionPolicy::getPolicyType() const {
    return m_policy_type;
}
void OAISubProtectionPolicy::setPolicyType(const QString &policy_type) {
    m_policy_type = policy_type;
    m_policy_type_isSet = true;
}

bool OAISubProtectionPolicy::is_policy_type_Set() const{
    return m_policy_type_isSet;
}

bool OAISubProtectionPolicy::is_policy_type_Valid() const{
    return m_policy_type_isValid;
}

OAIRetentionPolicy OAISubProtectionPolicy::getRetentionPolicy() const {
    return m_retention_policy;
}
void OAISubProtectionPolicy::setRetentionPolicy(const OAIRetentionPolicy &retention_policy) {
    m_retention_policy = retention_policy;
    m_retention_policy_isSet = true;
}

bool OAISubProtectionPolicy::is_retention_policy_Set() const{
    return m_retention_policy_isSet;
}

bool OAISubProtectionPolicy::is_retention_policy_Valid() const{
    return m_retention_policy_isValid;
}

OAISchedulePolicy OAISubProtectionPolicy::getSchedulePolicy() const {
    return m_schedule_policy;
}
void OAISubProtectionPolicy::setSchedulePolicy(const OAISchedulePolicy &schedule_policy) {
    m_schedule_policy = schedule_policy;
    m_schedule_policy_isSet = true;
}

bool OAISubProtectionPolicy::is_schedule_policy_Set() const{
    return m_schedule_policy_isSet;
}

bool OAISubProtectionPolicy::is_schedule_policy_Valid() const{
    return m_schedule_policy_isValid;
}

bool OAISubProtectionPolicy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_policy_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_retention_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedule_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISubProtectionPolicy::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
