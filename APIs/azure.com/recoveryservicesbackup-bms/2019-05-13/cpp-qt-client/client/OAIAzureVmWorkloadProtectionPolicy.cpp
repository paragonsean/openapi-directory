/**
 * RecoveryServicesBackupClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-05-13
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAzureVmWorkloadProtectionPolicy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAzureVmWorkloadProtectionPolicy::OAIAzureVmWorkloadProtectionPolicy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAzureVmWorkloadProtectionPolicy::OAIAzureVmWorkloadProtectionPolicy() {
    this->initializeModel();
}

OAIAzureVmWorkloadProtectionPolicy::~OAIAzureVmWorkloadProtectionPolicy() {}

void OAIAzureVmWorkloadProtectionPolicy::initializeModel() {

    m_make_policy_consistent_isSet = false;
    m_make_policy_consistent_isValid = false;

    m_settings_isSet = false;
    m_settings_isValid = false;

    m_sub_protection_policy_isSet = false;
    m_sub_protection_policy_isValid = false;

    m_work_load_type_isSet = false;
    m_work_load_type_isValid = false;

    m_backup_management_type_isSet = false;
    m_backup_management_type_isValid = false;

    m_protected_items_count_isSet = false;
    m_protected_items_count_isValid = false;
}

void OAIAzureVmWorkloadProtectionPolicy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAzureVmWorkloadProtectionPolicy::fromJsonObject(QJsonObject json) {

    m_make_policy_consistent_isValid = ::OpenAPI::fromJsonValue(m_make_policy_consistent, json[QString("makePolicyConsistent")]);
    m_make_policy_consistent_isSet = !json[QString("makePolicyConsistent")].isNull() && m_make_policy_consistent_isValid;

    m_settings_isValid = ::OpenAPI::fromJsonValue(m_settings, json[QString("settings")]);
    m_settings_isSet = !json[QString("settings")].isNull() && m_settings_isValid;

    m_sub_protection_policy_isValid = ::OpenAPI::fromJsonValue(m_sub_protection_policy, json[QString("subProtectionPolicy")]);
    m_sub_protection_policy_isSet = !json[QString("subProtectionPolicy")].isNull() && m_sub_protection_policy_isValid;

    m_work_load_type_isValid = ::OpenAPI::fromJsonValue(m_work_load_type, json[QString("workLoadType")]);
    m_work_load_type_isSet = !json[QString("workLoadType")].isNull() && m_work_load_type_isValid;

    m_backup_management_type_isValid = ::OpenAPI::fromJsonValue(m_backup_management_type, json[QString("backupManagementType")]);
    m_backup_management_type_isSet = !json[QString("backupManagementType")].isNull() && m_backup_management_type_isValid;

    m_protected_items_count_isValid = ::OpenAPI::fromJsonValue(m_protected_items_count, json[QString("protectedItemsCount")]);
    m_protected_items_count_isSet = !json[QString("protectedItemsCount")].isNull() && m_protected_items_count_isValid;
}

QString OAIAzureVmWorkloadProtectionPolicy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAzureVmWorkloadProtectionPolicy::asJsonObject() const {
    QJsonObject obj;
    if (m_make_policy_consistent_isSet) {
        obj.insert(QString("makePolicyConsistent"), ::OpenAPI::toJsonValue(m_make_policy_consistent));
    }
    if (m_settings.isSet()) {
        obj.insert(QString("settings"), ::OpenAPI::toJsonValue(m_settings));
    }
    if (m_sub_protection_policy.size() > 0) {
        obj.insert(QString("subProtectionPolicy"), ::OpenAPI::toJsonValue(m_sub_protection_policy));
    }
    if (m_work_load_type_isSet) {
        obj.insert(QString("workLoadType"), ::OpenAPI::toJsonValue(m_work_load_type));
    }
    if (m_backup_management_type_isSet) {
        obj.insert(QString("backupManagementType"), ::OpenAPI::toJsonValue(m_backup_management_type));
    }
    if (m_protected_items_count_isSet) {
        obj.insert(QString("protectedItemsCount"), ::OpenAPI::toJsonValue(m_protected_items_count));
    }
    return obj;
}

bool OAIAzureVmWorkloadProtectionPolicy::isMakePolicyConsistent() const {
    return m_make_policy_consistent;
}
void OAIAzureVmWorkloadProtectionPolicy::setMakePolicyConsistent(const bool &make_policy_consistent) {
    m_make_policy_consistent = make_policy_consistent;
    m_make_policy_consistent_isSet = true;
}

bool OAIAzureVmWorkloadProtectionPolicy::is_make_policy_consistent_Set() const{
    return m_make_policy_consistent_isSet;
}

bool OAIAzureVmWorkloadProtectionPolicy::is_make_policy_consistent_Valid() const{
    return m_make_policy_consistent_isValid;
}

OAISettings OAIAzureVmWorkloadProtectionPolicy::getSettings() const {
    return m_settings;
}
void OAIAzureVmWorkloadProtectionPolicy::setSettings(const OAISettings &settings) {
    m_settings = settings;
    m_settings_isSet = true;
}

bool OAIAzureVmWorkloadProtectionPolicy::is_settings_Set() const{
    return m_settings_isSet;
}

bool OAIAzureVmWorkloadProtectionPolicy::is_settings_Valid() const{
    return m_settings_isValid;
}

QList<OAISubProtectionPolicy> OAIAzureVmWorkloadProtectionPolicy::getSubProtectionPolicy() const {
    return m_sub_protection_policy;
}
void OAIAzureVmWorkloadProtectionPolicy::setSubProtectionPolicy(const QList<OAISubProtectionPolicy> &sub_protection_policy) {
    m_sub_protection_policy = sub_protection_policy;
    m_sub_protection_policy_isSet = true;
}

bool OAIAzureVmWorkloadProtectionPolicy::is_sub_protection_policy_Set() const{
    return m_sub_protection_policy_isSet;
}

bool OAIAzureVmWorkloadProtectionPolicy::is_sub_protection_policy_Valid() const{
    return m_sub_protection_policy_isValid;
}

QString OAIAzureVmWorkloadProtectionPolicy::getWorkLoadType() const {
    return m_work_load_type;
}
void OAIAzureVmWorkloadProtectionPolicy::setWorkLoadType(const QString &work_load_type) {
    m_work_load_type = work_load_type;
    m_work_load_type_isSet = true;
}

bool OAIAzureVmWorkloadProtectionPolicy::is_work_load_type_Set() const{
    return m_work_load_type_isSet;
}

bool OAIAzureVmWorkloadProtectionPolicy::is_work_load_type_Valid() const{
    return m_work_load_type_isValid;
}

QString OAIAzureVmWorkloadProtectionPolicy::getBackupManagementType() const {
    return m_backup_management_type;
}
void OAIAzureVmWorkloadProtectionPolicy::setBackupManagementType(const QString &backup_management_type) {
    m_backup_management_type = backup_management_type;
    m_backup_management_type_isSet = true;
}

bool OAIAzureVmWorkloadProtectionPolicy::is_backup_management_type_Set() const{
    return m_backup_management_type_isSet;
}

bool OAIAzureVmWorkloadProtectionPolicy::is_backup_management_type_Valid() const{
    return m_backup_management_type_isValid;
}

qint32 OAIAzureVmWorkloadProtectionPolicy::getProtectedItemsCount() const {
    return m_protected_items_count;
}
void OAIAzureVmWorkloadProtectionPolicy::setProtectedItemsCount(const qint32 &protected_items_count) {
    m_protected_items_count = protected_items_count;
    m_protected_items_count_isSet = true;
}

bool OAIAzureVmWorkloadProtectionPolicy::is_protected_items_count_Set() const{
    return m_protected_items_count_isSet;
}

bool OAIAzureVmWorkloadProtectionPolicy::is_protected_items_count_Valid() const{
    return m_protected_items_count_isValid;
}

bool OAIAzureVmWorkloadProtectionPolicy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_make_policy_consistent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_protection_policy.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_work_load_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_backup_management_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protected_items_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAzureVmWorkloadProtectionPolicy::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_backup_management_type_isValid && true;
}

} // namespace OpenAPI
