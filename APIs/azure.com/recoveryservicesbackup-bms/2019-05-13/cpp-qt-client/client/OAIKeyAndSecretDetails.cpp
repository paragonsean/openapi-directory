/**
 * RecoveryServicesBackupClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-05-13
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIKeyAndSecretDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIKeyAndSecretDetails::OAIKeyAndSecretDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIKeyAndSecretDetails::OAIKeyAndSecretDetails() {
    this->initializeModel();
}

OAIKeyAndSecretDetails::~OAIKeyAndSecretDetails() {}

void OAIKeyAndSecretDetails::initializeModel() {

    m_bek_details_isSet = false;
    m_bek_details_isValid = false;

    m_encryption_mechanism_isSet = false;
    m_encryption_mechanism_isValid = false;

    m_kek_details_isSet = false;
    m_kek_details_isValid = false;
}

void OAIKeyAndSecretDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIKeyAndSecretDetails::fromJsonObject(QJsonObject json) {

    m_bek_details_isValid = ::OpenAPI::fromJsonValue(m_bek_details, json[QString("bekDetails")]);
    m_bek_details_isSet = !json[QString("bekDetails")].isNull() && m_bek_details_isValid;

    m_encryption_mechanism_isValid = ::OpenAPI::fromJsonValue(m_encryption_mechanism, json[QString("encryptionMechanism")]);
    m_encryption_mechanism_isSet = !json[QString("encryptionMechanism")].isNull() && m_encryption_mechanism_isValid;

    m_kek_details_isValid = ::OpenAPI::fromJsonValue(m_kek_details, json[QString("kekDetails")]);
    m_kek_details_isSet = !json[QString("kekDetails")].isNull() && m_kek_details_isValid;
}

QString OAIKeyAndSecretDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIKeyAndSecretDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_bek_details.isSet()) {
        obj.insert(QString("bekDetails"), ::OpenAPI::toJsonValue(m_bek_details));
    }
    if (m_encryption_mechanism_isSet) {
        obj.insert(QString("encryptionMechanism"), ::OpenAPI::toJsonValue(m_encryption_mechanism));
    }
    if (m_kek_details.isSet()) {
        obj.insert(QString("kekDetails"), ::OpenAPI::toJsonValue(m_kek_details));
    }
    return obj;
}

OAIBEKDetails OAIKeyAndSecretDetails::getBekDetails() const {
    return m_bek_details;
}
void OAIKeyAndSecretDetails::setBekDetails(const OAIBEKDetails &bek_details) {
    m_bek_details = bek_details;
    m_bek_details_isSet = true;
}

bool OAIKeyAndSecretDetails::is_bek_details_Set() const{
    return m_bek_details_isSet;
}

bool OAIKeyAndSecretDetails::is_bek_details_Valid() const{
    return m_bek_details_isValid;
}

QString OAIKeyAndSecretDetails::getEncryptionMechanism() const {
    return m_encryption_mechanism;
}
void OAIKeyAndSecretDetails::setEncryptionMechanism(const QString &encryption_mechanism) {
    m_encryption_mechanism = encryption_mechanism;
    m_encryption_mechanism_isSet = true;
}

bool OAIKeyAndSecretDetails::is_encryption_mechanism_Set() const{
    return m_encryption_mechanism_isSet;
}

bool OAIKeyAndSecretDetails::is_encryption_mechanism_Valid() const{
    return m_encryption_mechanism_isValid;
}

OAIKEKDetails OAIKeyAndSecretDetails::getKekDetails() const {
    return m_kek_details;
}
void OAIKeyAndSecretDetails::setKekDetails(const OAIKEKDetails &kek_details) {
    m_kek_details = kek_details;
    m_kek_details_isSet = true;
}

bool OAIKeyAndSecretDetails::is_kek_details_Set() const{
    return m_kek_details_isSet;
}

bool OAIKeyAndSecretDetails::is_kek_details_Valid() const{
    return m_kek_details_isValid;
}

bool OAIKeyAndSecretDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bek_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_encryption_mechanism_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kek_details.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIKeyAndSecretDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
