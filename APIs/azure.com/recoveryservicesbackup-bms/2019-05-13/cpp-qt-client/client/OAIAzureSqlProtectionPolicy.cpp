/**
 * RecoveryServicesBackupClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-05-13
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAzureSqlProtectionPolicy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAzureSqlProtectionPolicy::OAIAzureSqlProtectionPolicy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAzureSqlProtectionPolicy::OAIAzureSqlProtectionPolicy() {
    this->initializeModel();
}

OAIAzureSqlProtectionPolicy::~OAIAzureSqlProtectionPolicy() {}

void OAIAzureSqlProtectionPolicy::initializeModel() {

    m_retention_policy_isSet = false;
    m_retention_policy_isValid = false;

    m_backup_management_type_isSet = false;
    m_backup_management_type_isValid = false;

    m_protected_items_count_isSet = false;
    m_protected_items_count_isValid = false;
}

void OAIAzureSqlProtectionPolicy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAzureSqlProtectionPolicy::fromJsonObject(QJsonObject json) {

    m_retention_policy_isValid = ::OpenAPI::fromJsonValue(m_retention_policy, json[QString("retentionPolicy")]);
    m_retention_policy_isSet = !json[QString("retentionPolicy")].isNull() && m_retention_policy_isValid;

    m_backup_management_type_isValid = ::OpenAPI::fromJsonValue(m_backup_management_type, json[QString("backupManagementType")]);
    m_backup_management_type_isSet = !json[QString("backupManagementType")].isNull() && m_backup_management_type_isValid;

    m_protected_items_count_isValid = ::OpenAPI::fromJsonValue(m_protected_items_count, json[QString("protectedItemsCount")]);
    m_protected_items_count_isSet = !json[QString("protectedItemsCount")].isNull() && m_protected_items_count_isValid;
}

QString OAIAzureSqlProtectionPolicy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAzureSqlProtectionPolicy::asJsonObject() const {
    QJsonObject obj;
    if (m_retention_policy.isSet()) {
        obj.insert(QString("retentionPolicy"), ::OpenAPI::toJsonValue(m_retention_policy));
    }
    if (m_backup_management_type_isSet) {
        obj.insert(QString("backupManagementType"), ::OpenAPI::toJsonValue(m_backup_management_type));
    }
    if (m_protected_items_count_isSet) {
        obj.insert(QString("protectedItemsCount"), ::OpenAPI::toJsonValue(m_protected_items_count));
    }
    return obj;
}

OAIRetentionPolicy OAIAzureSqlProtectionPolicy::getRetentionPolicy() const {
    return m_retention_policy;
}
void OAIAzureSqlProtectionPolicy::setRetentionPolicy(const OAIRetentionPolicy &retention_policy) {
    m_retention_policy = retention_policy;
    m_retention_policy_isSet = true;
}

bool OAIAzureSqlProtectionPolicy::is_retention_policy_Set() const{
    return m_retention_policy_isSet;
}

bool OAIAzureSqlProtectionPolicy::is_retention_policy_Valid() const{
    return m_retention_policy_isValid;
}

QString OAIAzureSqlProtectionPolicy::getBackupManagementType() const {
    return m_backup_management_type;
}
void OAIAzureSqlProtectionPolicy::setBackupManagementType(const QString &backup_management_type) {
    m_backup_management_type = backup_management_type;
    m_backup_management_type_isSet = true;
}

bool OAIAzureSqlProtectionPolicy::is_backup_management_type_Set() const{
    return m_backup_management_type_isSet;
}

bool OAIAzureSqlProtectionPolicy::is_backup_management_type_Valid() const{
    return m_backup_management_type_isValid;
}

qint32 OAIAzureSqlProtectionPolicy::getProtectedItemsCount() const {
    return m_protected_items_count;
}
void OAIAzureSqlProtectionPolicy::setProtectedItemsCount(const qint32 &protected_items_count) {
    m_protected_items_count = protected_items_count;
    m_protected_items_count_isSet = true;
}

bool OAIAzureSqlProtectionPolicy::is_protected_items_count_Set() const{
    return m_protected_items_count_isSet;
}

bool OAIAzureSqlProtectionPolicy::is_protected_items_count_Valid() const{
    return m_protected_items_count_isValid;
}

bool OAIAzureSqlProtectionPolicy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_retention_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_backup_management_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protected_items_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAzureSqlProtectionPolicy::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_backup_management_type_isValid && true;
}

} // namespace OpenAPI
