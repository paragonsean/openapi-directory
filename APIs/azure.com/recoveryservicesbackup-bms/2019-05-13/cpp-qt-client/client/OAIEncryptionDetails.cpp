/**
 * RecoveryServicesBackupClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-05-13
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEncryptionDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEncryptionDetails::OAIEncryptionDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEncryptionDetails::OAIEncryptionDetails() {
    this->initializeModel();
}

OAIEncryptionDetails::~OAIEncryptionDetails() {}

void OAIEncryptionDetails::initializeModel() {

    m_encryption_enabled_isSet = false;
    m_encryption_enabled_isValid = false;

    m_kek_url_isSet = false;
    m_kek_url_isValid = false;

    m_kek_vault_id_isSet = false;
    m_kek_vault_id_isValid = false;

    m_secret_key_url_isSet = false;
    m_secret_key_url_isValid = false;

    m_secret_key_vault_id_isSet = false;
    m_secret_key_vault_id_isValid = false;
}

void OAIEncryptionDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEncryptionDetails::fromJsonObject(QJsonObject json) {

    m_encryption_enabled_isValid = ::OpenAPI::fromJsonValue(m_encryption_enabled, json[QString("encryptionEnabled")]);
    m_encryption_enabled_isSet = !json[QString("encryptionEnabled")].isNull() && m_encryption_enabled_isValid;

    m_kek_url_isValid = ::OpenAPI::fromJsonValue(m_kek_url, json[QString("kekUrl")]);
    m_kek_url_isSet = !json[QString("kekUrl")].isNull() && m_kek_url_isValid;

    m_kek_vault_id_isValid = ::OpenAPI::fromJsonValue(m_kek_vault_id, json[QString("kekVaultId")]);
    m_kek_vault_id_isSet = !json[QString("kekVaultId")].isNull() && m_kek_vault_id_isValid;

    m_secret_key_url_isValid = ::OpenAPI::fromJsonValue(m_secret_key_url, json[QString("secretKeyUrl")]);
    m_secret_key_url_isSet = !json[QString("secretKeyUrl")].isNull() && m_secret_key_url_isValid;

    m_secret_key_vault_id_isValid = ::OpenAPI::fromJsonValue(m_secret_key_vault_id, json[QString("secretKeyVaultId")]);
    m_secret_key_vault_id_isSet = !json[QString("secretKeyVaultId")].isNull() && m_secret_key_vault_id_isValid;
}

QString OAIEncryptionDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEncryptionDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_encryption_enabled_isSet) {
        obj.insert(QString("encryptionEnabled"), ::OpenAPI::toJsonValue(m_encryption_enabled));
    }
    if (m_kek_url_isSet) {
        obj.insert(QString("kekUrl"), ::OpenAPI::toJsonValue(m_kek_url));
    }
    if (m_kek_vault_id_isSet) {
        obj.insert(QString("kekVaultId"), ::OpenAPI::toJsonValue(m_kek_vault_id));
    }
    if (m_secret_key_url_isSet) {
        obj.insert(QString("secretKeyUrl"), ::OpenAPI::toJsonValue(m_secret_key_url));
    }
    if (m_secret_key_vault_id_isSet) {
        obj.insert(QString("secretKeyVaultId"), ::OpenAPI::toJsonValue(m_secret_key_vault_id));
    }
    return obj;
}

bool OAIEncryptionDetails::isEncryptionEnabled() const {
    return m_encryption_enabled;
}
void OAIEncryptionDetails::setEncryptionEnabled(const bool &encryption_enabled) {
    m_encryption_enabled = encryption_enabled;
    m_encryption_enabled_isSet = true;
}

bool OAIEncryptionDetails::is_encryption_enabled_Set() const{
    return m_encryption_enabled_isSet;
}

bool OAIEncryptionDetails::is_encryption_enabled_Valid() const{
    return m_encryption_enabled_isValid;
}

QString OAIEncryptionDetails::getKekUrl() const {
    return m_kek_url;
}
void OAIEncryptionDetails::setKekUrl(const QString &kek_url) {
    m_kek_url = kek_url;
    m_kek_url_isSet = true;
}

bool OAIEncryptionDetails::is_kek_url_Set() const{
    return m_kek_url_isSet;
}

bool OAIEncryptionDetails::is_kek_url_Valid() const{
    return m_kek_url_isValid;
}

QString OAIEncryptionDetails::getKekVaultId() const {
    return m_kek_vault_id;
}
void OAIEncryptionDetails::setKekVaultId(const QString &kek_vault_id) {
    m_kek_vault_id = kek_vault_id;
    m_kek_vault_id_isSet = true;
}

bool OAIEncryptionDetails::is_kek_vault_id_Set() const{
    return m_kek_vault_id_isSet;
}

bool OAIEncryptionDetails::is_kek_vault_id_Valid() const{
    return m_kek_vault_id_isValid;
}

QString OAIEncryptionDetails::getSecretKeyUrl() const {
    return m_secret_key_url;
}
void OAIEncryptionDetails::setSecretKeyUrl(const QString &secret_key_url) {
    m_secret_key_url = secret_key_url;
    m_secret_key_url_isSet = true;
}

bool OAIEncryptionDetails::is_secret_key_url_Set() const{
    return m_secret_key_url_isSet;
}

bool OAIEncryptionDetails::is_secret_key_url_Valid() const{
    return m_secret_key_url_isValid;
}

QString OAIEncryptionDetails::getSecretKeyVaultId() const {
    return m_secret_key_vault_id;
}
void OAIEncryptionDetails::setSecretKeyVaultId(const QString &secret_key_vault_id) {
    m_secret_key_vault_id = secret_key_vault_id;
    m_secret_key_vault_id_isSet = true;
}

bool OAIEncryptionDetails::is_secret_key_vault_id_Set() const{
    return m_secret_key_vault_id_isSet;
}

bool OAIEncryptionDetails::is_secret_key_vault_id_Valid() const{
    return m_secret_key_vault_id_isValid;
}

bool OAIEncryptionDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_encryption_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kek_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kek_vault_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secret_key_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secret_key_vault_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEncryptionDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
