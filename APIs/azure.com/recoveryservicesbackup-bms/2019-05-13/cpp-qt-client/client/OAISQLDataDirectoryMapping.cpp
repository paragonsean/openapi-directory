/**
 * RecoveryServicesBackupClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-05-13
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISQLDataDirectoryMapping.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISQLDataDirectoryMapping::OAISQLDataDirectoryMapping(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISQLDataDirectoryMapping::OAISQLDataDirectoryMapping() {
    this->initializeModel();
}

OAISQLDataDirectoryMapping::~OAISQLDataDirectoryMapping() {}

void OAISQLDataDirectoryMapping::initializeModel() {

    m_mapping_type_isSet = false;
    m_mapping_type_isValid = false;

    m_source_logical_name_isSet = false;
    m_source_logical_name_isValid = false;

    m_source_path_isSet = false;
    m_source_path_isValid = false;

    m_target_path_isSet = false;
    m_target_path_isValid = false;
}

void OAISQLDataDirectoryMapping::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISQLDataDirectoryMapping::fromJsonObject(QJsonObject json) {

    m_mapping_type_isValid = ::OpenAPI::fromJsonValue(m_mapping_type, json[QString("mappingType")]);
    m_mapping_type_isSet = !json[QString("mappingType")].isNull() && m_mapping_type_isValid;

    m_source_logical_name_isValid = ::OpenAPI::fromJsonValue(m_source_logical_name, json[QString("sourceLogicalName")]);
    m_source_logical_name_isSet = !json[QString("sourceLogicalName")].isNull() && m_source_logical_name_isValid;

    m_source_path_isValid = ::OpenAPI::fromJsonValue(m_source_path, json[QString("sourcePath")]);
    m_source_path_isSet = !json[QString("sourcePath")].isNull() && m_source_path_isValid;

    m_target_path_isValid = ::OpenAPI::fromJsonValue(m_target_path, json[QString("targetPath")]);
    m_target_path_isSet = !json[QString("targetPath")].isNull() && m_target_path_isValid;
}

QString OAISQLDataDirectoryMapping::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISQLDataDirectoryMapping::asJsonObject() const {
    QJsonObject obj;
    if (m_mapping_type_isSet) {
        obj.insert(QString("mappingType"), ::OpenAPI::toJsonValue(m_mapping_type));
    }
    if (m_source_logical_name_isSet) {
        obj.insert(QString("sourceLogicalName"), ::OpenAPI::toJsonValue(m_source_logical_name));
    }
    if (m_source_path_isSet) {
        obj.insert(QString("sourcePath"), ::OpenAPI::toJsonValue(m_source_path));
    }
    if (m_target_path_isSet) {
        obj.insert(QString("targetPath"), ::OpenAPI::toJsonValue(m_target_path));
    }
    return obj;
}

QString OAISQLDataDirectoryMapping::getMappingType() const {
    return m_mapping_type;
}
void OAISQLDataDirectoryMapping::setMappingType(const QString &mapping_type) {
    m_mapping_type = mapping_type;
    m_mapping_type_isSet = true;
}

bool OAISQLDataDirectoryMapping::is_mapping_type_Set() const{
    return m_mapping_type_isSet;
}

bool OAISQLDataDirectoryMapping::is_mapping_type_Valid() const{
    return m_mapping_type_isValid;
}

QString OAISQLDataDirectoryMapping::getSourceLogicalName() const {
    return m_source_logical_name;
}
void OAISQLDataDirectoryMapping::setSourceLogicalName(const QString &source_logical_name) {
    m_source_logical_name = source_logical_name;
    m_source_logical_name_isSet = true;
}

bool OAISQLDataDirectoryMapping::is_source_logical_name_Set() const{
    return m_source_logical_name_isSet;
}

bool OAISQLDataDirectoryMapping::is_source_logical_name_Valid() const{
    return m_source_logical_name_isValid;
}

QString OAISQLDataDirectoryMapping::getSourcePath() const {
    return m_source_path;
}
void OAISQLDataDirectoryMapping::setSourcePath(const QString &source_path) {
    m_source_path = source_path;
    m_source_path_isSet = true;
}

bool OAISQLDataDirectoryMapping::is_source_path_Set() const{
    return m_source_path_isSet;
}

bool OAISQLDataDirectoryMapping::is_source_path_Valid() const{
    return m_source_path_isValid;
}

QString OAISQLDataDirectoryMapping::getTargetPath() const {
    return m_target_path;
}
void OAISQLDataDirectoryMapping::setTargetPath(const QString &target_path) {
    m_target_path = target_path;
    m_target_path_isSet = true;
}

bool OAISQLDataDirectoryMapping::is_target_path_Set() const{
    return m_target_path_isSet;
}

bool OAISQLDataDirectoryMapping::is_target_path_Valid() const{
    return m_target_path_isValid;
}

bool OAISQLDataDirectoryMapping::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_mapping_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_logical_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_path_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISQLDataDirectoryMapping::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
