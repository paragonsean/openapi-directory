/**
 * RecoveryServicesBackupClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-05-13
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOperationWorkerResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOperationWorkerResponse::OAIOperationWorkerResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOperationWorkerResponse::OAIOperationWorkerResponse() {
    this->initializeModel();
}

OAIOperationWorkerResponse::~OAIOperationWorkerResponse() {}

void OAIOperationWorkerResponse::initializeModel() {

    m_headers_isSet = false;
    m_headers_isValid = false;

    m_status_code_isSet = false;
    m_status_code_isValid = false;
}

void OAIOperationWorkerResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOperationWorkerResponse::fromJsonObject(QJsonObject json) {

    if(json["headers"].isObject()){
        auto varmap = json["headers"].toObject().toVariantMap();
        m_headers_isValid = true;
        if(varmap.count() > 0){
            for(auto val : varmap.keys()){
                QList<QString> item;
                auto jval = QJsonValue::fromVariant(varmap.value(val));
                m_headers_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_headers_isSet &= !jval.isNull() && m_headers_isValid;
                m_headers.insert(m_headers.end(), val, item);
            }
        }
    }

    m_status_code_isValid = ::OpenAPI::fromJsonValue(m_status_code, json[QString("statusCode")]);
    m_status_code_isSet = !json[QString("statusCode")].isNull() && m_status_code_isValid;
}

QString OAIOperationWorkerResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOperationWorkerResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_headers.size() > 0) {
        
        obj.insert(QString("headers"), toJsonValue(m_headers));
    }
    if (m_status_code_isSet) {
        obj.insert(QString("statusCode"), ::OpenAPI::toJsonValue(m_status_code));
    }
    return obj;
}

QMap<QString, QList<QString>> OAIOperationWorkerResponse::getHeaders() const {
    return m_headers;
}
void OAIOperationWorkerResponse::setHeaders(const QMap<QString, QList<QString>> &headers) {
    m_headers = headers;
    m_headers_isSet = true;
}

bool OAIOperationWorkerResponse::is_headers_Set() const{
    return m_headers_isSet;
}

bool OAIOperationWorkerResponse::is_headers_Valid() const{
    return m_headers_isValid;
}

QString OAIOperationWorkerResponse::getStatusCode() const {
    return m_status_code;
}
void OAIOperationWorkerResponse::setStatusCode(const QString &status_code) {
    m_status_code = status_code;
    m_status_code_isSet = true;
}

bool OAIOperationWorkerResponse::is_status_code_Set() const{
    return m_status_code_isSet;
}

bool OAIOperationWorkerResponse::is_status_code_Valid() const{
    return m_status_code_isValid;
}

bool OAIOperationWorkerResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_headers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_code_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOperationWorkerResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
