/**
 * RecoveryServicesBackupClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-05-13
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAzureIaaSVMProtectedItemExtendedInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAzureIaaSVMProtectedItemExtendedInfo::OAIAzureIaaSVMProtectedItemExtendedInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAzureIaaSVMProtectedItemExtendedInfo::OAIAzureIaaSVMProtectedItemExtendedInfo() {
    this->initializeModel();
}

OAIAzureIaaSVMProtectedItemExtendedInfo::~OAIAzureIaaSVMProtectedItemExtendedInfo() {}

void OAIAzureIaaSVMProtectedItemExtendedInfo::initializeModel() {

    m_oldest_recovery_point_isSet = false;
    m_oldest_recovery_point_isValid = false;

    m_policy_inconsistent_isSet = false;
    m_policy_inconsistent_isValid = false;

    m_recovery_point_count_isSet = false;
    m_recovery_point_count_isValid = false;
}

void OAIAzureIaaSVMProtectedItemExtendedInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAzureIaaSVMProtectedItemExtendedInfo::fromJsonObject(QJsonObject json) {

    m_oldest_recovery_point_isValid = ::OpenAPI::fromJsonValue(m_oldest_recovery_point, json[QString("oldestRecoveryPoint")]);
    m_oldest_recovery_point_isSet = !json[QString("oldestRecoveryPoint")].isNull() && m_oldest_recovery_point_isValid;

    m_policy_inconsistent_isValid = ::OpenAPI::fromJsonValue(m_policy_inconsistent, json[QString("policyInconsistent")]);
    m_policy_inconsistent_isSet = !json[QString("policyInconsistent")].isNull() && m_policy_inconsistent_isValid;

    m_recovery_point_count_isValid = ::OpenAPI::fromJsonValue(m_recovery_point_count, json[QString("recoveryPointCount")]);
    m_recovery_point_count_isSet = !json[QString("recoveryPointCount")].isNull() && m_recovery_point_count_isValid;
}

QString OAIAzureIaaSVMProtectedItemExtendedInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAzureIaaSVMProtectedItemExtendedInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_oldest_recovery_point_isSet) {
        obj.insert(QString("oldestRecoveryPoint"), ::OpenAPI::toJsonValue(m_oldest_recovery_point));
    }
    if (m_policy_inconsistent_isSet) {
        obj.insert(QString("policyInconsistent"), ::OpenAPI::toJsonValue(m_policy_inconsistent));
    }
    if (m_recovery_point_count_isSet) {
        obj.insert(QString("recoveryPointCount"), ::OpenAPI::toJsonValue(m_recovery_point_count));
    }
    return obj;
}

QDateTime OAIAzureIaaSVMProtectedItemExtendedInfo::getOldestRecoveryPoint() const {
    return m_oldest_recovery_point;
}
void OAIAzureIaaSVMProtectedItemExtendedInfo::setOldestRecoveryPoint(const QDateTime &oldest_recovery_point) {
    m_oldest_recovery_point = oldest_recovery_point;
    m_oldest_recovery_point_isSet = true;
}

bool OAIAzureIaaSVMProtectedItemExtendedInfo::is_oldest_recovery_point_Set() const{
    return m_oldest_recovery_point_isSet;
}

bool OAIAzureIaaSVMProtectedItemExtendedInfo::is_oldest_recovery_point_Valid() const{
    return m_oldest_recovery_point_isValid;
}

bool OAIAzureIaaSVMProtectedItemExtendedInfo::isPolicyInconsistent() const {
    return m_policy_inconsistent;
}
void OAIAzureIaaSVMProtectedItemExtendedInfo::setPolicyInconsistent(const bool &policy_inconsistent) {
    m_policy_inconsistent = policy_inconsistent;
    m_policy_inconsistent_isSet = true;
}

bool OAIAzureIaaSVMProtectedItemExtendedInfo::is_policy_inconsistent_Set() const{
    return m_policy_inconsistent_isSet;
}

bool OAIAzureIaaSVMProtectedItemExtendedInfo::is_policy_inconsistent_Valid() const{
    return m_policy_inconsistent_isValid;
}

qint32 OAIAzureIaaSVMProtectedItemExtendedInfo::getRecoveryPointCount() const {
    return m_recovery_point_count;
}
void OAIAzureIaaSVMProtectedItemExtendedInfo::setRecoveryPointCount(const qint32 &recovery_point_count) {
    m_recovery_point_count = recovery_point_count;
    m_recovery_point_count_isSet = true;
}

bool OAIAzureIaaSVMProtectedItemExtendedInfo::is_recovery_point_count_Set() const{
    return m_recovery_point_count_isSet;
}

bool OAIAzureIaaSVMProtectedItemExtendedInfo::is_recovery_point_count_Valid() const{
    return m_recovery_point_count_isValid;
}

bool OAIAzureIaaSVMProtectedItemExtendedInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_oldest_recovery_point_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy_inconsistent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recovery_point_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAzureIaaSVMProtectedItemExtendedInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
