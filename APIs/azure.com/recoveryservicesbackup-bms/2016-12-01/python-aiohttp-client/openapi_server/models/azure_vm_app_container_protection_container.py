# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.azure_workload_container import AzureWorkloadContainer
from openapi_server.models.azure_workload_container_extended_info import AzureWorkloadContainerExtendedInfo
from openapi_server import util


class AzureVMAppContainerProtectionContainer(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, extended_info: AzureWorkloadContainerExtendedInfo=None, last_updated_time: datetime=None, operation_type: str=None, source_resource_id: str=None, workload_type: str=None, backup_management_type: str=None, container_type: str=None, friendly_name: str=None, health_status: str=None, registration_status: str=None):
        """AzureVMAppContainerProtectionContainer - a model defined in OpenAPI

        :param extended_info: The extended_info of this AzureVMAppContainerProtectionContainer.
        :param last_updated_time: The last_updated_time of this AzureVMAppContainerProtectionContainer.
        :param operation_type: The operation_type of this AzureVMAppContainerProtectionContainer.
        :param source_resource_id: The source_resource_id of this AzureVMAppContainerProtectionContainer.
        :param workload_type: The workload_type of this AzureVMAppContainerProtectionContainer.
        :param backup_management_type: The backup_management_type of this AzureVMAppContainerProtectionContainer.
        :param container_type: The container_type of this AzureVMAppContainerProtectionContainer.
        :param friendly_name: The friendly_name of this AzureVMAppContainerProtectionContainer.
        :param health_status: The health_status of this AzureVMAppContainerProtectionContainer.
        :param registration_status: The registration_status of this AzureVMAppContainerProtectionContainer.
        """
        self.openapi_types = {
            'extended_info': AzureWorkloadContainerExtendedInfo,
            'last_updated_time': datetime,
            'operation_type': str,
            'source_resource_id': str,
            'workload_type': str,
            'backup_management_type': str,
            'container_type': str,
            'friendly_name': str,
            'health_status': str,
            'registration_status': str
        }

        self.attribute_map = {
            'extended_info': 'extendedInfo',
            'last_updated_time': 'lastUpdatedTime',
            'operation_type': 'operationType',
            'source_resource_id': 'sourceResourceId',
            'workload_type': 'workloadType',
            'backup_management_type': 'backupManagementType',
            'container_type': 'containerType',
            'friendly_name': 'friendlyName',
            'health_status': 'healthStatus',
            'registration_status': 'registrationStatus'
        }

        self._extended_info = extended_info
        self._last_updated_time = last_updated_time
        self._operation_type = operation_type
        self._source_resource_id = source_resource_id
        self._workload_type = workload_type
        self._backup_management_type = backup_management_type
        self._container_type = container_type
        self._friendly_name = friendly_name
        self._health_status = health_status
        self._registration_status = registration_status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AzureVMAppContainerProtectionContainer':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AzureVMAppContainerProtectionContainer of this AzureVMAppContainerProtectionContainer.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def extended_info(self):
        """Gets the extended_info of this AzureVMAppContainerProtectionContainer.


        :return: The extended_info of this AzureVMAppContainerProtectionContainer.
        :rtype: AzureWorkloadContainerExtendedInfo
        """
        return self._extended_info

    @extended_info.setter
    def extended_info(self, extended_info):
        """Sets the extended_info of this AzureVMAppContainerProtectionContainer.


        :param extended_info: The extended_info of this AzureVMAppContainerProtectionContainer.
        :type extended_info: AzureWorkloadContainerExtendedInfo
        """

        self._extended_info = extended_info

    @property
    def last_updated_time(self):
        """Gets the last_updated_time of this AzureVMAppContainerProtectionContainer.

        Time stamp when this container was updated.

        :return: The last_updated_time of this AzureVMAppContainerProtectionContainer.
        :rtype: datetime
        """
        return self._last_updated_time

    @last_updated_time.setter
    def last_updated_time(self, last_updated_time):
        """Sets the last_updated_time of this AzureVMAppContainerProtectionContainer.

        Time stamp when this container was updated.

        :param last_updated_time: The last_updated_time of this AzureVMAppContainerProtectionContainer.
        :type last_updated_time: datetime
        """

        self._last_updated_time = last_updated_time

    @property
    def operation_type(self):
        """Gets the operation_type of this AzureVMAppContainerProtectionContainer.

        Re-Do Operation

        :return: The operation_type of this AzureVMAppContainerProtectionContainer.
        :rtype: str
        """
        return self._operation_type

    @operation_type.setter
    def operation_type(self, operation_type):
        """Sets the operation_type of this AzureVMAppContainerProtectionContainer.

        Re-Do Operation

        :param operation_type: The operation_type of this AzureVMAppContainerProtectionContainer.
        :type operation_type: str
        """
        allowed_values = ["Invalid", "Register", "Reregister"]  # noqa: E501
        if operation_type not in allowed_values:
            raise ValueError(
                "Invalid value for `operation_type` ({0}), must be one of {1}"
                .format(operation_type, allowed_values)
            )

        self._operation_type = operation_type

    @property
    def source_resource_id(self):
        """Gets the source_resource_id of this AzureVMAppContainerProtectionContainer.

        ARM ID of the virtual machine represented by this Azure Workload Container

        :return: The source_resource_id of this AzureVMAppContainerProtectionContainer.
        :rtype: str
        """
        return self._source_resource_id

    @source_resource_id.setter
    def source_resource_id(self, source_resource_id):
        """Sets the source_resource_id of this AzureVMAppContainerProtectionContainer.

        ARM ID of the virtual machine represented by this Azure Workload Container

        :param source_resource_id: The source_resource_id of this AzureVMAppContainerProtectionContainer.
        :type source_resource_id: str
        """

        self._source_resource_id = source_resource_id

    @property
    def workload_type(self):
        """Gets the workload_type of this AzureVMAppContainerProtectionContainer.

        Workload type for which registration was sent.

        :return: The workload_type of this AzureVMAppContainerProtectionContainer.
        :rtype: str
        """
        return self._workload_type

    @workload_type.setter
    def workload_type(self, workload_type):
        """Sets the workload_type of this AzureVMAppContainerProtectionContainer.

        Workload type for which registration was sent.

        :param workload_type: The workload_type of this AzureVMAppContainerProtectionContainer.
        :type workload_type: str
        """
        allowed_values = ["Invalid", "VM", "FileFolder", "AzureSqlDb", "SQLDB", "Exchange", "Sharepoint", "VMwareVM", "SystemState", "Client", "GenericDataSource", "SQLDataBase", "AzureFileShare", "SAPHanaDatabase", "SAPAseDatabase"]  # noqa: E501
        if workload_type not in allowed_values:
            raise ValueError(
                "Invalid value for `workload_type` ({0}), must be one of {1}"
                .format(workload_type, allowed_values)
            )

        self._workload_type = workload_type

    @property
    def backup_management_type(self):
        """Gets the backup_management_type of this AzureVMAppContainerProtectionContainer.

        Type of backup management for the container.

        :return: The backup_management_type of this AzureVMAppContainerProtectionContainer.
        :rtype: str
        """
        return self._backup_management_type

    @backup_management_type.setter
    def backup_management_type(self, backup_management_type):
        """Sets the backup_management_type of this AzureVMAppContainerProtectionContainer.

        Type of backup management for the container.

        :param backup_management_type: The backup_management_type of this AzureVMAppContainerProtectionContainer.
        :type backup_management_type: str
        """
        allowed_values = ["Invalid", "AzureIaasVM", "MAB", "DPM", "AzureBackupServer", "AzureSql", "AzureStorage", "AzureWorkload", "DefaultBackup"]  # noqa: E501
        if backup_management_type not in allowed_values:
            raise ValueError(
                "Invalid value for `backup_management_type` ({0}), must be one of {1}"
                .format(backup_management_type, allowed_values)
            )

        self._backup_management_type = backup_management_type

    @property
    def container_type(self):
        """Gets the container_type of this AzureVMAppContainerProtectionContainer.

        Type of the container. The value of this property for: 1. Compute Azure VM is Microsoft.Compute/virtualMachines 2.  Classic Compute Azure VM is Microsoft.ClassicCompute/virtualMachines 3. Windows machines (like MAB, DPM etc) is  Windows 4. Azure SQL instance is AzureSqlContainer. 5. Storage containers is StorageContainer. 6. Azure workload  Backup is VMAppContainer

        :return: The container_type of this AzureVMAppContainerProtectionContainer.
        :rtype: str
        """
        return self._container_type

    @container_type.setter
    def container_type(self, container_type):
        """Sets the container_type of this AzureVMAppContainerProtectionContainer.

        Type of the container. The value of this property for: 1. Compute Azure VM is Microsoft.Compute/virtualMachines 2.  Classic Compute Azure VM is Microsoft.ClassicCompute/virtualMachines 3. Windows machines (like MAB, DPM etc) is  Windows 4. Azure SQL instance is AzureSqlContainer. 5. Storage containers is StorageContainer. 6. Azure workload  Backup is VMAppContainer

        :param container_type: The container_type of this AzureVMAppContainerProtectionContainer.
        :type container_type: str
        """
        allowed_values = ["Invalid", "Unknown", "IaasVMContainer", "IaasVMServiceContainer", "DPMContainer", "AzureBackupServerContainer", "MABContainer", "Cluster", "AzureSqlContainer", "Windows", "VCenter", "VMAppContainer", "SQLAGWorkLoadContainer", "StorageContainer", "GenericContainer"]  # noqa: E501
        if container_type not in allowed_values:
            raise ValueError(
                "Invalid value for `container_type` ({0}), must be one of {1}"
                .format(container_type, allowed_values)
            )

        self._container_type = container_type

    @property
    def friendly_name(self):
        """Gets the friendly_name of this AzureVMAppContainerProtectionContainer.

        Friendly name of the container.

        :return: The friendly_name of this AzureVMAppContainerProtectionContainer.
        :rtype: str
        """
        return self._friendly_name

    @friendly_name.setter
    def friendly_name(self, friendly_name):
        """Sets the friendly_name of this AzureVMAppContainerProtectionContainer.

        Friendly name of the container.

        :param friendly_name: The friendly_name of this AzureVMAppContainerProtectionContainer.
        :type friendly_name: str
        """

        self._friendly_name = friendly_name

    @property
    def health_status(self):
        """Gets the health_status of this AzureVMAppContainerProtectionContainer.

        Status of health of the container.

        :return: The health_status of this AzureVMAppContainerProtectionContainer.
        :rtype: str
        """
        return self._health_status

    @health_status.setter
    def health_status(self, health_status):
        """Sets the health_status of this AzureVMAppContainerProtectionContainer.

        Status of health of the container.

        :param health_status: The health_status of this AzureVMAppContainerProtectionContainer.
        :type health_status: str
        """

        self._health_status = health_status

    @property
    def registration_status(self):
        """Gets the registration_status of this AzureVMAppContainerProtectionContainer.

        Status of registration of the container with the Recovery Services Vault.

        :return: The registration_status of this AzureVMAppContainerProtectionContainer.
        :rtype: str
        """
        return self._registration_status

    @registration_status.setter
    def registration_status(self, registration_status):
        """Sets the registration_status of this AzureVMAppContainerProtectionContainer.

        Status of registration of the container with the Recovery Services Vault.

        :param registration_status: The registration_status of this AzureVMAppContainerProtectionContainer.
        :type registration_status: str
        """

        self._registration_status = registration_status
