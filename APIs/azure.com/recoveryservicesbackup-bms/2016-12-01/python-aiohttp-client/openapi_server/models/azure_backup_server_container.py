# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.dpm_container_extended_info import DPMContainerExtendedInfo
from openapi_server.models.dpm_container import DpmContainer
from openapi_server import util


class AzureBackupServerContainer(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, can_re_register: bool=None, container_id: str=None, dpm_agent_version: str=None, dpm_servers: List[str]=None, extended_info: DPMContainerExtendedInfo=None, protected_item_count: int=None, protection_status: str=None, upgrade_available: bool=None, backup_management_type: str=None, container_type: str=None, friendly_name: str=None, health_status: str=None, registration_status: str=None):
        """AzureBackupServerContainer - a model defined in OpenAPI

        :param can_re_register: The can_re_register of this AzureBackupServerContainer.
        :param container_id: The container_id of this AzureBackupServerContainer.
        :param dpm_agent_version: The dpm_agent_version of this AzureBackupServerContainer.
        :param dpm_servers: The dpm_servers of this AzureBackupServerContainer.
        :param extended_info: The extended_info of this AzureBackupServerContainer.
        :param protected_item_count: The protected_item_count of this AzureBackupServerContainer.
        :param protection_status: The protection_status of this AzureBackupServerContainer.
        :param upgrade_available: The upgrade_available of this AzureBackupServerContainer.
        :param backup_management_type: The backup_management_type of this AzureBackupServerContainer.
        :param container_type: The container_type of this AzureBackupServerContainer.
        :param friendly_name: The friendly_name of this AzureBackupServerContainer.
        :param health_status: The health_status of this AzureBackupServerContainer.
        :param registration_status: The registration_status of this AzureBackupServerContainer.
        """
        self.openapi_types = {
            'can_re_register': bool,
            'container_id': str,
            'dpm_agent_version': str,
            'dpm_servers': List[str],
            'extended_info': DPMContainerExtendedInfo,
            'protected_item_count': int,
            'protection_status': str,
            'upgrade_available': bool,
            'backup_management_type': str,
            'container_type': str,
            'friendly_name': str,
            'health_status': str,
            'registration_status': str
        }

        self.attribute_map = {
            'can_re_register': 'canReRegister',
            'container_id': 'containerId',
            'dpm_agent_version': 'dpmAgentVersion',
            'dpm_servers': 'dpmServers',
            'extended_info': 'extendedInfo',
            'protected_item_count': 'protectedItemCount',
            'protection_status': 'protectionStatus',
            'upgrade_available': 'upgradeAvailable',
            'backup_management_type': 'backupManagementType',
            'container_type': 'containerType',
            'friendly_name': 'friendlyName',
            'health_status': 'healthStatus',
            'registration_status': 'registrationStatus'
        }

        self._can_re_register = can_re_register
        self._container_id = container_id
        self._dpm_agent_version = dpm_agent_version
        self._dpm_servers = dpm_servers
        self._extended_info = extended_info
        self._protected_item_count = protected_item_count
        self._protection_status = protection_status
        self._upgrade_available = upgrade_available
        self._backup_management_type = backup_management_type
        self._container_type = container_type
        self._friendly_name = friendly_name
        self._health_status = health_status
        self._registration_status = registration_status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AzureBackupServerContainer':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AzureBackupServerContainer of this AzureBackupServerContainer.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def can_re_register(self):
        """Gets the can_re_register of this AzureBackupServerContainer.

        Specifies whether the container is re-registrable.

        :return: The can_re_register of this AzureBackupServerContainer.
        :rtype: bool
        """
        return self._can_re_register

    @can_re_register.setter
    def can_re_register(self, can_re_register):
        """Sets the can_re_register of this AzureBackupServerContainer.

        Specifies whether the container is re-registrable.

        :param can_re_register: The can_re_register of this AzureBackupServerContainer.
        :type can_re_register: bool
        """

        self._can_re_register = can_re_register

    @property
    def container_id(self):
        """Gets the container_id of this AzureBackupServerContainer.

        ID of container.

        :return: The container_id of this AzureBackupServerContainer.
        :rtype: str
        """
        return self._container_id

    @container_id.setter
    def container_id(self, container_id):
        """Sets the container_id of this AzureBackupServerContainer.

        ID of container.

        :param container_id: The container_id of this AzureBackupServerContainer.
        :type container_id: str
        """

        self._container_id = container_id

    @property
    def dpm_agent_version(self):
        """Gets the dpm_agent_version of this AzureBackupServerContainer.

        Backup engine Agent version

        :return: The dpm_agent_version of this AzureBackupServerContainer.
        :rtype: str
        """
        return self._dpm_agent_version

    @dpm_agent_version.setter
    def dpm_agent_version(self, dpm_agent_version):
        """Sets the dpm_agent_version of this AzureBackupServerContainer.

        Backup engine Agent version

        :param dpm_agent_version: The dpm_agent_version of this AzureBackupServerContainer.
        :type dpm_agent_version: str
        """

        self._dpm_agent_version = dpm_agent_version

    @property
    def dpm_servers(self):
        """Gets the dpm_servers of this AzureBackupServerContainer.

        List of BackupEngines protecting the container

        :return: The dpm_servers of this AzureBackupServerContainer.
        :rtype: List[str]
        """
        return self._dpm_servers

    @dpm_servers.setter
    def dpm_servers(self, dpm_servers):
        """Sets the dpm_servers of this AzureBackupServerContainer.

        List of BackupEngines protecting the container

        :param dpm_servers: The dpm_servers of this AzureBackupServerContainer.
        :type dpm_servers: List[str]
        """

        self._dpm_servers = dpm_servers

    @property
    def extended_info(self):
        """Gets the extended_info of this AzureBackupServerContainer.


        :return: The extended_info of this AzureBackupServerContainer.
        :rtype: DPMContainerExtendedInfo
        """
        return self._extended_info

    @extended_info.setter
    def extended_info(self, extended_info):
        """Sets the extended_info of this AzureBackupServerContainer.


        :param extended_info: The extended_info of this AzureBackupServerContainer.
        :type extended_info: DPMContainerExtendedInfo
        """

        self._extended_info = extended_info

    @property
    def protected_item_count(self):
        """Gets the protected_item_count of this AzureBackupServerContainer.

        Number of protected items in the BackupEngine

        :return: The protected_item_count of this AzureBackupServerContainer.
        :rtype: int
        """
        return self._protected_item_count

    @protected_item_count.setter
    def protected_item_count(self, protected_item_count):
        """Sets the protected_item_count of this AzureBackupServerContainer.

        Number of protected items in the BackupEngine

        :param protected_item_count: The protected_item_count of this AzureBackupServerContainer.
        :type protected_item_count: int
        """

        self._protected_item_count = protected_item_count

    @property
    def protection_status(self):
        """Gets the protection_status of this AzureBackupServerContainer.

        Protection status of the container.

        :return: The protection_status of this AzureBackupServerContainer.
        :rtype: str
        """
        return self._protection_status

    @protection_status.setter
    def protection_status(self, protection_status):
        """Sets the protection_status of this AzureBackupServerContainer.

        Protection status of the container.

        :param protection_status: The protection_status of this AzureBackupServerContainer.
        :type protection_status: str
        """

        self._protection_status = protection_status

    @property
    def upgrade_available(self):
        """Gets the upgrade_available of this AzureBackupServerContainer.

        To check if upgrade available

        :return: The upgrade_available of this AzureBackupServerContainer.
        :rtype: bool
        """
        return self._upgrade_available

    @upgrade_available.setter
    def upgrade_available(self, upgrade_available):
        """Sets the upgrade_available of this AzureBackupServerContainer.

        To check if upgrade available

        :param upgrade_available: The upgrade_available of this AzureBackupServerContainer.
        :type upgrade_available: bool
        """

        self._upgrade_available = upgrade_available

    @property
    def backup_management_type(self):
        """Gets the backup_management_type of this AzureBackupServerContainer.

        Type of backup management for the container.

        :return: The backup_management_type of this AzureBackupServerContainer.
        :rtype: str
        """
        return self._backup_management_type

    @backup_management_type.setter
    def backup_management_type(self, backup_management_type):
        """Sets the backup_management_type of this AzureBackupServerContainer.

        Type of backup management for the container.

        :param backup_management_type: The backup_management_type of this AzureBackupServerContainer.
        :type backup_management_type: str
        """
        allowed_values = ["Invalid", "AzureIaasVM", "MAB", "DPM", "AzureBackupServer", "AzureSql", "AzureStorage", "AzureWorkload", "DefaultBackup"]  # noqa: E501
        if backup_management_type not in allowed_values:
            raise ValueError(
                "Invalid value for `backup_management_type` ({0}), must be one of {1}"
                .format(backup_management_type, allowed_values)
            )

        self._backup_management_type = backup_management_type

    @property
    def container_type(self):
        """Gets the container_type of this AzureBackupServerContainer.

        Type of the container. The value of this property for: 1. Compute Azure VM is Microsoft.Compute/virtualMachines 2.  Classic Compute Azure VM is Microsoft.ClassicCompute/virtualMachines 3. Windows machines (like MAB, DPM etc) is  Windows 4. Azure SQL instance is AzureSqlContainer. 5. Storage containers is StorageContainer. 6. Azure workload  Backup is VMAppContainer

        :return: The container_type of this AzureBackupServerContainer.
        :rtype: str
        """
        return self._container_type

    @container_type.setter
    def container_type(self, container_type):
        """Sets the container_type of this AzureBackupServerContainer.

        Type of the container. The value of this property for: 1. Compute Azure VM is Microsoft.Compute/virtualMachines 2.  Classic Compute Azure VM is Microsoft.ClassicCompute/virtualMachines 3. Windows machines (like MAB, DPM etc) is  Windows 4. Azure SQL instance is AzureSqlContainer. 5. Storage containers is StorageContainer. 6. Azure workload  Backup is VMAppContainer

        :param container_type: The container_type of this AzureBackupServerContainer.
        :type container_type: str
        """
        allowed_values = ["Invalid", "Unknown", "IaasVMContainer", "IaasVMServiceContainer", "DPMContainer", "AzureBackupServerContainer", "MABContainer", "Cluster", "AzureSqlContainer", "Windows", "VCenter", "VMAppContainer", "SQLAGWorkLoadContainer", "StorageContainer", "GenericContainer"]  # noqa: E501
        if container_type not in allowed_values:
            raise ValueError(
                "Invalid value for `container_type` ({0}), must be one of {1}"
                .format(container_type, allowed_values)
            )

        self._container_type = container_type

    @property
    def friendly_name(self):
        """Gets the friendly_name of this AzureBackupServerContainer.

        Friendly name of the container.

        :return: The friendly_name of this AzureBackupServerContainer.
        :rtype: str
        """
        return self._friendly_name

    @friendly_name.setter
    def friendly_name(self, friendly_name):
        """Sets the friendly_name of this AzureBackupServerContainer.

        Friendly name of the container.

        :param friendly_name: The friendly_name of this AzureBackupServerContainer.
        :type friendly_name: str
        """

        self._friendly_name = friendly_name

    @property
    def health_status(self):
        """Gets the health_status of this AzureBackupServerContainer.

        Status of health of the container.

        :return: The health_status of this AzureBackupServerContainer.
        :rtype: str
        """
        return self._health_status

    @health_status.setter
    def health_status(self, health_status):
        """Sets the health_status of this AzureBackupServerContainer.

        Status of health of the container.

        :param health_status: The health_status of this AzureBackupServerContainer.
        :type health_status: str
        """

        self._health_status = health_status

    @property
    def registration_status(self):
        """Gets the registration_status of this AzureBackupServerContainer.

        Status of registration of the container with the Recovery Services Vault.

        :return: The registration_status of this AzureBackupServerContainer.
        :rtype: str
        """
        return self._registration_status

    @registration_status.setter
    def registration_status(self, registration_status):
        """Sets the registration_status of this AzureBackupServerContainer.

        Status of registration of the container with the Recovery Services Vault.

        :param registration_status: The registration_status of this AzureBackupServerContainer.
        :type registration_status: str
        """

        self._registration_status = registration_status
