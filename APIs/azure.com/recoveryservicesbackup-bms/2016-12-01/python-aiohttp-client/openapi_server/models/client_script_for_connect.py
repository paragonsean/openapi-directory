# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ClientScriptForConnect(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, os_type: str=None, script_content: str=None, script_extension: str=None, script_name_suffix: str=None, url: str=None):
        """ClientScriptForConnect - a model defined in OpenAPI

        :param os_type: The os_type of this ClientScriptForConnect.
        :param script_content: The script_content of this ClientScriptForConnect.
        :param script_extension: The script_extension of this ClientScriptForConnect.
        :param script_name_suffix: The script_name_suffix of this ClientScriptForConnect.
        :param url: The url of this ClientScriptForConnect.
        """
        self.openapi_types = {
            'os_type': str,
            'script_content': str,
            'script_extension': str,
            'script_name_suffix': str,
            'url': str
        }

        self.attribute_map = {
            'os_type': 'osType',
            'script_content': 'scriptContent',
            'script_extension': 'scriptExtension',
            'script_name_suffix': 'scriptNameSuffix',
            'url': 'url'
        }

        self._os_type = os_type
        self._script_content = script_content
        self._script_extension = script_extension
        self._script_name_suffix = script_name_suffix
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ClientScriptForConnect':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ClientScriptForConnect of this ClientScriptForConnect.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def os_type(self):
        """Gets the os_type of this ClientScriptForConnect.

        OS type - Windows, Linux etc. for which this file / folder restore client script works.

        :return: The os_type of this ClientScriptForConnect.
        :rtype: str
        """
        return self._os_type

    @os_type.setter
    def os_type(self, os_type):
        """Sets the os_type of this ClientScriptForConnect.

        OS type - Windows, Linux etc. for which this file / folder restore client script works.

        :param os_type: The os_type of this ClientScriptForConnect.
        :type os_type: str
        """

        self._os_type = os_type

    @property
    def script_content(self):
        """Gets the script_content of this ClientScriptForConnect.

        File content of the client script for file / folder restore.

        :return: The script_content of this ClientScriptForConnect.
        :rtype: str
        """
        return self._script_content

    @script_content.setter
    def script_content(self, script_content):
        """Sets the script_content of this ClientScriptForConnect.

        File content of the client script for file / folder restore.

        :param script_content: The script_content of this ClientScriptForConnect.
        :type script_content: str
        """

        self._script_content = script_content

    @property
    def script_extension(self):
        """Gets the script_extension of this ClientScriptForConnect.

        File extension of the client script for file / folder restore - .ps1 , .sh , etc.

        :return: The script_extension of this ClientScriptForConnect.
        :rtype: str
        """
        return self._script_extension

    @script_extension.setter
    def script_extension(self, script_extension):
        """Sets the script_extension of this ClientScriptForConnect.

        File extension of the client script for file / folder restore - .ps1 , .sh , etc.

        :param script_extension: The script_extension of this ClientScriptForConnect.
        :type script_extension: str
        """

        self._script_extension = script_extension

    @property
    def script_name_suffix(self):
        """Gets the script_name_suffix of this ClientScriptForConnect.

        Mandatory suffix that should be added to the name of script that is given for download to user.  If its null or empty then , ignore it.

        :return: The script_name_suffix of this ClientScriptForConnect.
        :rtype: str
        """
        return self._script_name_suffix

    @script_name_suffix.setter
    def script_name_suffix(self, script_name_suffix):
        """Sets the script_name_suffix of this ClientScriptForConnect.

        Mandatory suffix that should be added to the name of script that is given for download to user.  If its null or empty then , ignore it.

        :param script_name_suffix: The script_name_suffix of this ClientScriptForConnect.
        :type script_name_suffix: str
        """

        self._script_name_suffix = script_name_suffix

    @property
    def url(self):
        """Gets the url of this ClientScriptForConnect.

        URL of Executable from where to source the content. If this is not null then ScriptContent should not be used

        :return: The url of this ClientScriptForConnect.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ClientScriptForConnect.

        URL of Executable from where to source the content. If this is not null then ScriptContent should not be used

        :param url: The url of this ClientScriptForConnect.
        :type url: str
        """

        self._url = url
