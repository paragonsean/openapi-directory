/**
 * RecoveryServicesBackupClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-12-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBackupEngineBase.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBackupEngineBase::OAIBackupEngineBase(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBackupEngineBase::OAIBackupEngineBase() {
    this->initializeModel();
}

OAIBackupEngineBase::~OAIBackupEngineBase() {}

void OAIBackupEngineBase::initializeModel() {

    m_azure_backup_agent_version_isSet = false;
    m_azure_backup_agent_version_isValid = false;

    m_backup_engine_id_isSet = false;
    m_backup_engine_id_isValid = false;

    m_backup_engine_state_isSet = false;
    m_backup_engine_state_isValid = false;

    m_backup_engine_type_isSet = false;
    m_backup_engine_type_isValid = false;

    m_backup_management_type_isSet = false;
    m_backup_management_type_isValid = false;

    m_can_re_register_isSet = false;
    m_can_re_register_isValid = false;

    m_dpm_version_isSet = false;
    m_dpm_version_isValid = false;

    m_extended_info_isSet = false;
    m_extended_info_isValid = false;

    m_friendly_name_isSet = false;
    m_friendly_name_isValid = false;

    m_health_status_isSet = false;
    m_health_status_isValid = false;

    m_is_azure_backup_agent_upgrade_available_isSet = false;
    m_is_azure_backup_agent_upgrade_available_isValid = false;

    m_is_dpm_upgrade_available_isSet = false;
    m_is_dpm_upgrade_available_isValid = false;

    m_registration_status_isSet = false;
    m_registration_status_isValid = false;
}

void OAIBackupEngineBase::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBackupEngineBase::fromJsonObject(QJsonObject json) {

    m_azure_backup_agent_version_isValid = ::OpenAPI::fromJsonValue(m_azure_backup_agent_version, json[QString("azureBackupAgentVersion")]);
    m_azure_backup_agent_version_isSet = !json[QString("azureBackupAgentVersion")].isNull() && m_azure_backup_agent_version_isValid;

    m_backup_engine_id_isValid = ::OpenAPI::fromJsonValue(m_backup_engine_id, json[QString("backupEngineId")]);
    m_backup_engine_id_isSet = !json[QString("backupEngineId")].isNull() && m_backup_engine_id_isValid;

    m_backup_engine_state_isValid = ::OpenAPI::fromJsonValue(m_backup_engine_state, json[QString("backupEngineState")]);
    m_backup_engine_state_isSet = !json[QString("backupEngineState")].isNull() && m_backup_engine_state_isValid;

    m_backup_engine_type_isValid = ::OpenAPI::fromJsonValue(m_backup_engine_type, json[QString("backupEngineType")]);
    m_backup_engine_type_isSet = !json[QString("backupEngineType")].isNull() && m_backup_engine_type_isValid;

    m_backup_management_type_isValid = ::OpenAPI::fromJsonValue(m_backup_management_type, json[QString("backupManagementType")]);
    m_backup_management_type_isSet = !json[QString("backupManagementType")].isNull() && m_backup_management_type_isValid;

    m_can_re_register_isValid = ::OpenAPI::fromJsonValue(m_can_re_register, json[QString("canReRegister")]);
    m_can_re_register_isSet = !json[QString("canReRegister")].isNull() && m_can_re_register_isValid;

    m_dpm_version_isValid = ::OpenAPI::fromJsonValue(m_dpm_version, json[QString("dpmVersion")]);
    m_dpm_version_isSet = !json[QString("dpmVersion")].isNull() && m_dpm_version_isValid;

    m_extended_info_isValid = ::OpenAPI::fromJsonValue(m_extended_info, json[QString("extendedInfo")]);
    m_extended_info_isSet = !json[QString("extendedInfo")].isNull() && m_extended_info_isValid;

    m_friendly_name_isValid = ::OpenAPI::fromJsonValue(m_friendly_name, json[QString("friendlyName")]);
    m_friendly_name_isSet = !json[QString("friendlyName")].isNull() && m_friendly_name_isValid;

    m_health_status_isValid = ::OpenAPI::fromJsonValue(m_health_status, json[QString("healthStatus")]);
    m_health_status_isSet = !json[QString("healthStatus")].isNull() && m_health_status_isValid;

    m_is_azure_backup_agent_upgrade_available_isValid = ::OpenAPI::fromJsonValue(m_is_azure_backup_agent_upgrade_available, json[QString("isAzureBackupAgentUpgradeAvailable")]);
    m_is_azure_backup_agent_upgrade_available_isSet = !json[QString("isAzureBackupAgentUpgradeAvailable")].isNull() && m_is_azure_backup_agent_upgrade_available_isValid;

    m_is_dpm_upgrade_available_isValid = ::OpenAPI::fromJsonValue(m_is_dpm_upgrade_available, json[QString("isDpmUpgradeAvailable")]);
    m_is_dpm_upgrade_available_isSet = !json[QString("isDpmUpgradeAvailable")].isNull() && m_is_dpm_upgrade_available_isValid;

    m_registration_status_isValid = ::OpenAPI::fromJsonValue(m_registration_status, json[QString("registrationStatus")]);
    m_registration_status_isSet = !json[QString("registrationStatus")].isNull() && m_registration_status_isValid;
}

QString OAIBackupEngineBase::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBackupEngineBase::asJsonObject() const {
    QJsonObject obj;
    if (m_azure_backup_agent_version_isSet) {
        obj.insert(QString("azureBackupAgentVersion"), ::OpenAPI::toJsonValue(m_azure_backup_agent_version));
    }
    if (m_backup_engine_id_isSet) {
        obj.insert(QString("backupEngineId"), ::OpenAPI::toJsonValue(m_backup_engine_id));
    }
    if (m_backup_engine_state_isSet) {
        obj.insert(QString("backupEngineState"), ::OpenAPI::toJsonValue(m_backup_engine_state));
    }
    if (m_backup_engine_type_isSet) {
        obj.insert(QString("backupEngineType"), ::OpenAPI::toJsonValue(m_backup_engine_type));
    }
    if (m_backup_management_type_isSet) {
        obj.insert(QString("backupManagementType"), ::OpenAPI::toJsonValue(m_backup_management_type));
    }
    if (m_can_re_register_isSet) {
        obj.insert(QString("canReRegister"), ::OpenAPI::toJsonValue(m_can_re_register));
    }
    if (m_dpm_version_isSet) {
        obj.insert(QString("dpmVersion"), ::OpenAPI::toJsonValue(m_dpm_version));
    }
    if (m_extended_info.isSet()) {
        obj.insert(QString("extendedInfo"), ::OpenAPI::toJsonValue(m_extended_info));
    }
    if (m_friendly_name_isSet) {
        obj.insert(QString("friendlyName"), ::OpenAPI::toJsonValue(m_friendly_name));
    }
    if (m_health_status_isSet) {
        obj.insert(QString("healthStatus"), ::OpenAPI::toJsonValue(m_health_status));
    }
    if (m_is_azure_backup_agent_upgrade_available_isSet) {
        obj.insert(QString("isAzureBackupAgentUpgradeAvailable"), ::OpenAPI::toJsonValue(m_is_azure_backup_agent_upgrade_available));
    }
    if (m_is_dpm_upgrade_available_isSet) {
        obj.insert(QString("isDpmUpgradeAvailable"), ::OpenAPI::toJsonValue(m_is_dpm_upgrade_available));
    }
    if (m_registration_status_isSet) {
        obj.insert(QString("registrationStatus"), ::OpenAPI::toJsonValue(m_registration_status));
    }
    return obj;
}

QString OAIBackupEngineBase::getAzureBackupAgentVersion() const {
    return m_azure_backup_agent_version;
}
void OAIBackupEngineBase::setAzureBackupAgentVersion(const QString &azure_backup_agent_version) {
    m_azure_backup_agent_version = azure_backup_agent_version;
    m_azure_backup_agent_version_isSet = true;
}

bool OAIBackupEngineBase::is_azure_backup_agent_version_Set() const{
    return m_azure_backup_agent_version_isSet;
}

bool OAIBackupEngineBase::is_azure_backup_agent_version_Valid() const{
    return m_azure_backup_agent_version_isValid;
}

QString OAIBackupEngineBase::getBackupEngineId() const {
    return m_backup_engine_id;
}
void OAIBackupEngineBase::setBackupEngineId(const QString &backup_engine_id) {
    m_backup_engine_id = backup_engine_id;
    m_backup_engine_id_isSet = true;
}

bool OAIBackupEngineBase::is_backup_engine_id_Set() const{
    return m_backup_engine_id_isSet;
}

bool OAIBackupEngineBase::is_backup_engine_id_Valid() const{
    return m_backup_engine_id_isValid;
}

QString OAIBackupEngineBase::getBackupEngineState() const {
    return m_backup_engine_state;
}
void OAIBackupEngineBase::setBackupEngineState(const QString &backup_engine_state) {
    m_backup_engine_state = backup_engine_state;
    m_backup_engine_state_isSet = true;
}

bool OAIBackupEngineBase::is_backup_engine_state_Set() const{
    return m_backup_engine_state_isSet;
}

bool OAIBackupEngineBase::is_backup_engine_state_Valid() const{
    return m_backup_engine_state_isValid;
}

QString OAIBackupEngineBase::getBackupEngineType() const {
    return m_backup_engine_type;
}
void OAIBackupEngineBase::setBackupEngineType(const QString &backup_engine_type) {
    m_backup_engine_type = backup_engine_type;
    m_backup_engine_type_isSet = true;
}

bool OAIBackupEngineBase::is_backup_engine_type_Set() const{
    return m_backup_engine_type_isSet;
}

bool OAIBackupEngineBase::is_backup_engine_type_Valid() const{
    return m_backup_engine_type_isValid;
}

QString OAIBackupEngineBase::getBackupManagementType() const {
    return m_backup_management_type;
}
void OAIBackupEngineBase::setBackupManagementType(const QString &backup_management_type) {
    m_backup_management_type = backup_management_type;
    m_backup_management_type_isSet = true;
}

bool OAIBackupEngineBase::is_backup_management_type_Set() const{
    return m_backup_management_type_isSet;
}

bool OAIBackupEngineBase::is_backup_management_type_Valid() const{
    return m_backup_management_type_isValid;
}

bool OAIBackupEngineBase::isCanReRegister() const {
    return m_can_re_register;
}
void OAIBackupEngineBase::setCanReRegister(const bool &can_re_register) {
    m_can_re_register = can_re_register;
    m_can_re_register_isSet = true;
}

bool OAIBackupEngineBase::is_can_re_register_Set() const{
    return m_can_re_register_isSet;
}

bool OAIBackupEngineBase::is_can_re_register_Valid() const{
    return m_can_re_register_isValid;
}

QString OAIBackupEngineBase::getDpmVersion() const {
    return m_dpm_version;
}
void OAIBackupEngineBase::setDpmVersion(const QString &dpm_version) {
    m_dpm_version = dpm_version;
    m_dpm_version_isSet = true;
}

bool OAIBackupEngineBase::is_dpm_version_Set() const{
    return m_dpm_version_isSet;
}

bool OAIBackupEngineBase::is_dpm_version_Valid() const{
    return m_dpm_version_isValid;
}

OAIBackupEngineExtendedInfo OAIBackupEngineBase::getExtendedInfo() const {
    return m_extended_info;
}
void OAIBackupEngineBase::setExtendedInfo(const OAIBackupEngineExtendedInfo &extended_info) {
    m_extended_info = extended_info;
    m_extended_info_isSet = true;
}

bool OAIBackupEngineBase::is_extended_info_Set() const{
    return m_extended_info_isSet;
}

bool OAIBackupEngineBase::is_extended_info_Valid() const{
    return m_extended_info_isValid;
}

QString OAIBackupEngineBase::getFriendlyName() const {
    return m_friendly_name;
}
void OAIBackupEngineBase::setFriendlyName(const QString &friendly_name) {
    m_friendly_name = friendly_name;
    m_friendly_name_isSet = true;
}

bool OAIBackupEngineBase::is_friendly_name_Set() const{
    return m_friendly_name_isSet;
}

bool OAIBackupEngineBase::is_friendly_name_Valid() const{
    return m_friendly_name_isValid;
}

QString OAIBackupEngineBase::getHealthStatus() const {
    return m_health_status;
}
void OAIBackupEngineBase::setHealthStatus(const QString &health_status) {
    m_health_status = health_status;
    m_health_status_isSet = true;
}

bool OAIBackupEngineBase::is_health_status_Set() const{
    return m_health_status_isSet;
}

bool OAIBackupEngineBase::is_health_status_Valid() const{
    return m_health_status_isValid;
}

bool OAIBackupEngineBase::isIsAzureBackupAgentUpgradeAvailable() const {
    return m_is_azure_backup_agent_upgrade_available;
}
void OAIBackupEngineBase::setIsAzureBackupAgentUpgradeAvailable(const bool &is_azure_backup_agent_upgrade_available) {
    m_is_azure_backup_agent_upgrade_available = is_azure_backup_agent_upgrade_available;
    m_is_azure_backup_agent_upgrade_available_isSet = true;
}

bool OAIBackupEngineBase::is_is_azure_backup_agent_upgrade_available_Set() const{
    return m_is_azure_backup_agent_upgrade_available_isSet;
}

bool OAIBackupEngineBase::is_is_azure_backup_agent_upgrade_available_Valid() const{
    return m_is_azure_backup_agent_upgrade_available_isValid;
}

bool OAIBackupEngineBase::isIsDpmUpgradeAvailable() const {
    return m_is_dpm_upgrade_available;
}
void OAIBackupEngineBase::setIsDpmUpgradeAvailable(const bool &is_dpm_upgrade_available) {
    m_is_dpm_upgrade_available = is_dpm_upgrade_available;
    m_is_dpm_upgrade_available_isSet = true;
}

bool OAIBackupEngineBase::is_is_dpm_upgrade_available_Set() const{
    return m_is_dpm_upgrade_available_isSet;
}

bool OAIBackupEngineBase::is_is_dpm_upgrade_available_Valid() const{
    return m_is_dpm_upgrade_available_isValid;
}

QString OAIBackupEngineBase::getRegistrationStatus() const {
    return m_registration_status;
}
void OAIBackupEngineBase::setRegistrationStatus(const QString &registration_status) {
    m_registration_status = registration_status;
    m_registration_status_isSet = true;
}

bool OAIBackupEngineBase::is_registration_status_Set() const{
    return m_registration_status_isSet;
}

bool OAIBackupEngineBase::is_registration_status_Valid() const{
    return m_registration_status_isValid;
}

bool OAIBackupEngineBase::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_azure_backup_agent_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_backup_engine_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_backup_engine_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_backup_engine_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_backup_management_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_re_register_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dpm_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extended_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_friendly_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_health_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_azure_backup_agent_upgrade_available_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_dpm_upgrade_available_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_registration_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBackupEngineBase::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
