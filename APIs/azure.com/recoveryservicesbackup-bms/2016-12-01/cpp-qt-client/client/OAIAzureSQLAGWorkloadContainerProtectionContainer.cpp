/**
 * RecoveryServicesBackupClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-12-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAzureSQLAGWorkloadContainerProtectionContainer.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAzureSQLAGWorkloadContainerProtectionContainer::OAIAzureSQLAGWorkloadContainerProtectionContainer(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAzureSQLAGWorkloadContainerProtectionContainer::OAIAzureSQLAGWorkloadContainerProtectionContainer() {
    this->initializeModel();
}

OAIAzureSQLAGWorkloadContainerProtectionContainer::~OAIAzureSQLAGWorkloadContainerProtectionContainer() {}

void OAIAzureSQLAGWorkloadContainerProtectionContainer::initializeModel() {

    m_extended_info_isSet = false;
    m_extended_info_isValid = false;

    m_last_updated_time_isSet = false;
    m_last_updated_time_isValid = false;

    m_operation_type_isSet = false;
    m_operation_type_isValid = false;

    m_source_resource_id_isSet = false;
    m_source_resource_id_isValid = false;

    m_workload_type_isSet = false;
    m_workload_type_isValid = false;

    m_backup_management_type_isSet = false;
    m_backup_management_type_isValid = false;

    m_container_type_isSet = false;
    m_container_type_isValid = false;

    m_friendly_name_isSet = false;
    m_friendly_name_isValid = false;

    m_health_status_isSet = false;
    m_health_status_isValid = false;

    m_registration_status_isSet = false;
    m_registration_status_isValid = false;
}

void OAIAzureSQLAGWorkloadContainerProtectionContainer::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAzureSQLAGWorkloadContainerProtectionContainer::fromJsonObject(QJsonObject json) {

    m_extended_info_isValid = ::OpenAPI::fromJsonValue(m_extended_info, json[QString("extendedInfo")]);
    m_extended_info_isSet = !json[QString("extendedInfo")].isNull() && m_extended_info_isValid;

    m_last_updated_time_isValid = ::OpenAPI::fromJsonValue(m_last_updated_time, json[QString("lastUpdatedTime")]);
    m_last_updated_time_isSet = !json[QString("lastUpdatedTime")].isNull() && m_last_updated_time_isValid;

    m_operation_type_isValid = ::OpenAPI::fromJsonValue(m_operation_type, json[QString("operationType")]);
    m_operation_type_isSet = !json[QString("operationType")].isNull() && m_operation_type_isValid;

    m_source_resource_id_isValid = ::OpenAPI::fromJsonValue(m_source_resource_id, json[QString("sourceResourceId")]);
    m_source_resource_id_isSet = !json[QString("sourceResourceId")].isNull() && m_source_resource_id_isValid;

    m_workload_type_isValid = ::OpenAPI::fromJsonValue(m_workload_type, json[QString("workloadType")]);
    m_workload_type_isSet = !json[QString("workloadType")].isNull() && m_workload_type_isValid;

    m_backup_management_type_isValid = ::OpenAPI::fromJsonValue(m_backup_management_type, json[QString("backupManagementType")]);
    m_backup_management_type_isSet = !json[QString("backupManagementType")].isNull() && m_backup_management_type_isValid;

    m_container_type_isValid = ::OpenAPI::fromJsonValue(m_container_type, json[QString("containerType")]);
    m_container_type_isSet = !json[QString("containerType")].isNull() && m_container_type_isValid;

    m_friendly_name_isValid = ::OpenAPI::fromJsonValue(m_friendly_name, json[QString("friendlyName")]);
    m_friendly_name_isSet = !json[QString("friendlyName")].isNull() && m_friendly_name_isValid;

    m_health_status_isValid = ::OpenAPI::fromJsonValue(m_health_status, json[QString("healthStatus")]);
    m_health_status_isSet = !json[QString("healthStatus")].isNull() && m_health_status_isValid;

    m_registration_status_isValid = ::OpenAPI::fromJsonValue(m_registration_status, json[QString("registrationStatus")]);
    m_registration_status_isSet = !json[QString("registrationStatus")].isNull() && m_registration_status_isValid;
}

QString OAIAzureSQLAGWorkloadContainerProtectionContainer::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAzureSQLAGWorkloadContainerProtectionContainer::asJsonObject() const {
    QJsonObject obj;
    if (m_extended_info.isSet()) {
        obj.insert(QString("extendedInfo"), ::OpenAPI::toJsonValue(m_extended_info));
    }
    if (m_last_updated_time_isSet) {
        obj.insert(QString("lastUpdatedTime"), ::OpenAPI::toJsonValue(m_last_updated_time));
    }
    if (m_operation_type_isSet) {
        obj.insert(QString("operationType"), ::OpenAPI::toJsonValue(m_operation_type));
    }
    if (m_source_resource_id_isSet) {
        obj.insert(QString("sourceResourceId"), ::OpenAPI::toJsonValue(m_source_resource_id));
    }
    if (m_workload_type_isSet) {
        obj.insert(QString("workloadType"), ::OpenAPI::toJsonValue(m_workload_type));
    }
    if (m_backup_management_type_isSet) {
        obj.insert(QString("backupManagementType"), ::OpenAPI::toJsonValue(m_backup_management_type));
    }
    if (m_container_type_isSet) {
        obj.insert(QString("containerType"), ::OpenAPI::toJsonValue(m_container_type));
    }
    if (m_friendly_name_isSet) {
        obj.insert(QString("friendlyName"), ::OpenAPI::toJsonValue(m_friendly_name));
    }
    if (m_health_status_isSet) {
        obj.insert(QString("healthStatus"), ::OpenAPI::toJsonValue(m_health_status));
    }
    if (m_registration_status_isSet) {
        obj.insert(QString("registrationStatus"), ::OpenAPI::toJsonValue(m_registration_status));
    }
    return obj;
}

OAIAzureWorkloadContainerExtendedInfo OAIAzureSQLAGWorkloadContainerProtectionContainer::getExtendedInfo() const {
    return m_extended_info;
}
void OAIAzureSQLAGWorkloadContainerProtectionContainer::setExtendedInfo(const OAIAzureWorkloadContainerExtendedInfo &extended_info) {
    m_extended_info = extended_info;
    m_extended_info_isSet = true;
}

bool OAIAzureSQLAGWorkloadContainerProtectionContainer::is_extended_info_Set() const{
    return m_extended_info_isSet;
}

bool OAIAzureSQLAGWorkloadContainerProtectionContainer::is_extended_info_Valid() const{
    return m_extended_info_isValid;
}

QDateTime OAIAzureSQLAGWorkloadContainerProtectionContainer::getLastUpdatedTime() const {
    return m_last_updated_time;
}
void OAIAzureSQLAGWorkloadContainerProtectionContainer::setLastUpdatedTime(const QDateTime &last_updated_time) {
    m_last_updated_time = last_updated_time;
    m_last_updated_time_isSet = true;
}

bool OAIAzureSQLAGWorkloadContainerProtectionContainer::is_last_updated_time_Set() const{
    return m_last_updated_time_isSet;
}

bool OAIAzureSQLAGWorkloadContainerProtectionContainer::is_last_updated_time_Valid() const{
    return m_last_updated_time_isValid;
}

QString OAIAzureSQLAGWorkloadContainerProtectionContainer::getOperationType() const {
    return m_operation_type;
}
void OAIAzureSQLAGWorkloadContainerProtectionContainer::setOperationType(const QString &operation_type) {
    m_operation_type = operation_type;
    m_operation_type_isSet = true;
}

bool OAIAzureSQLAGWorkloadContainerProtectionContainer::is_operation_type_Set() const{
    return m_operation_type_isSet;
}

bool OAIAzureSQLAGWorkloadContainerProtectionContainer::is_operation_type_Valid() const{
    return m_operation_type_isValid;
}

QString OAIAzureSQLAGWorkloadContainerProtectionContainer::getSourceResourceId() const {
    return m_source_resource_id;
}
void OAIAzureSQLAGWorkloadContainerProtectionContainer::setSourceResourceId(const QString &source_resource_id) {
    m_source_resource_id = source_resource_id;
    m_source_resource_id_isSet = true;
}

bool OAIAzureSQLAGWorkloadContainerProtectionContainer::is_source_resource_id_Set() const{
    return m_source_resource_id_isSet;
}

bool OAIAzureSQLAGWorkloadContainerProtectionContainer::is_source_resource_id_Valid() const{
    return m_source_resource_id_isValid;
}

QString OAIAzureSQLAGWorkloadContainerProtectionContainer::getWorkloadType() const {
    return m_workload_type;
}
void OAIAzureSQLAGWorkloadContainerProtectionContainer::setWorkloadType(const QString &workload_type) {
    m_workload_type = workload_type;
    m_workload_type_isSet = true;
}

bool OAIAzureSQLAGWorkloadContainerProtectionContainer::is_workload_type_Set() const{
    return m_workload_type_isSet;
}

bool OAIAzureSQLAGWorkloadContainerProtectionContainer::is_workload_type_Valid() const{
    return m_workload_type_isValid;
}

QString OAIAzureSQLAGWorkloadContainerProtectionContainer::getBackupManagementType() const {
    return m_backup_management_type;
}
void OAIAzureSQLAGWorkloadContainerProtectionContainer::setBackupManagementType(const QString &backup_management_type) {
    m_backup_management_type = backup_management_type;
    m_backup_management_type_isSet = true;
}

bool OAIAzureSQLAGWorkloadContainerProtectionContainer::is_backup_management_type_Set() const{
    return m_backup_management_type_isSet;
}

bool OAIAzureSQLAGWorkloadContainerProtectionContainer::is_backup_management_type_Valid() const{
    return m_backup_management_type_isValid;
}

QString OAIAzureSQLAGWorkloadContainerProtectionContainer::getContainerType() const {
    return m_container_type;
}
void OAIAzureSQLAGWorkloadContainerProtectionContainer::setContainerType(const QString &container_type) {
    m_container_type = container_type;
    m_container_type_isSet = true;
}

bool OAIAzureSQLAGWorkloadContainerProtectionContainer::is_container_type_Set() const{
    return m_container_type_isSet;
}

bool OAIAzureSQLAGWorkloadContainerProtectionContainer::is_container_type_Valid() const{
    return m_container_type_isValid;
}

QString OAIAzureSQLAGWorkloadContainerProtectionContainer::getFriendlyName() const {
    return m_friendly_name;
}
void OAIAzureSQLAGWorkloadContainerProtectionContainer::setFriendlyName(const QString &friendly_name) {
    m_friendly_name = friendly_name;
    m_friendly_name_isSet = true;
}

bool OAIAzureSQLAGWorkloadContainerProtectionContainer::is_friendly_name_Set() const{
    return m_friendly_name_isSet;
}

bool OAIAzureSQLAGWorkloadContainerProtectionContainer::is_friendly_name_Valid() const{
    return m_friendly_name_isValid;
}

QString OAIAzureSQLAGWorkloadContainerProtectionContainer::getHealthStatus() const {
    return m_health_status;
}
void OAIAzureSQLAGWorkloadContainerProtectionContainer::setHealthStatus(const QString &health_status) {
    m_health_status = health_status;
    m_health_status_isSet = true;
}

bool OAIAzureSQLAGWorkloadContainerProtectionContainer::is_health_status_Set() const{
    return m_health_status_isSet;
}

bool OAIAzureSQLAGWorkloadContainerProtectionContainer::is_health_status_Valid() const{
    return m_health_status_isValid;
}

QString OAIAzureSQLAGWorkloadContainerProtectionContainer::getRegistrationStatus() const {
    return m_registration_status;
}
void OAIAzureSQLAGWorkloadContainerProtectionContainer::setRegistrationStatus(const QString &registration_status) {
    m_registration_status = registration_status;
    m_registration_status_isSet = true;
}

bool OAIAzureSQLAGWorkloadContainerProtectionContainer::is_registration_status_Set() const{
    return m_registration_status_isSet;
}

bool OAIAzureSQLAGWorkloadContainerProtectionContainer::is_registration_status_Valid() const{
    return m_registration_status_isValid;
}

bool OAIAzureSQLAGWorkloadContainerProtectionContainer::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_extended_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operation_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_workload_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_backup_management_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_container_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_friendly_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_health_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_registration_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAzureSQLAGWorkloadContainerProtectionContainer::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
