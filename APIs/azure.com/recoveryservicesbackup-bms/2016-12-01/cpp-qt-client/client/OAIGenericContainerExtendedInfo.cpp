/**
 * RecoveryServicesBackupClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-12-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGenericContainerExtendedInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGenericContainerExtendedInfo::OAIGenericContainerExtendedInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGenericContainerExtendedInfo::OAIGenericContainerExtendedInfo() {
    this->initializeModel();
}

OAIGenericContainerExtendedInfo::~OAIGenericContainerExtendedInfo() {}

void OAIGenericContainerExtendedInfo::initializeModel() {

    m_container_identity_info_isSet = false;
    m_container_identity_info_isValid = false;

    m_raw_cert_data_isSet = false;
    m_raw_cert_data_isValid = false;

    m_service_endpoints_isSet = false;
    m_service_endpoints_isValid = false;
}

void OAIGenericContainerExtendedInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGenericContainerExtendedInfo::fromJsonObject(QJsonObject json) {

    m_container_identity_info_isValid = ::OpenAPI::fromJsonValue(m_container_identity_info, json[QString("containerIdentityInfo")]);
    m_container_identity_info_isSet = !json[QString("containerIdentityInfo")].isNull() && m_container_identity_info_isValid;

    m_raw_cert_data_isValid = ::OpenAPI::fromJsonValue(m_raw_cert_data, json[QString("rawCertData")]);
    m_raw_cert_data_isSet = !json[QString("rawCertData")].isNull() && m_raw_cert_data_isValid;

    m_service_endpoints_isValid = ::OpenAPI::fromJsonValue(m_service_endpoints, json[QString("serviceEndpoints")]);
    m_service_endpoints_isSet = !json[QString("serviceEndpoints")].isNull() && m_service_endpoints_isValid;
}

QString OAIGenericContainerExtendedInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGenericContainerExtendedInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_container_identity_info.isSet()) {
        obj.insert(QString("containerIdentityInfo"), ::OpenAPI::toJsonValue(m_container_identity_info));
    }
    if (m_raw_cert_data_isSet) {
        obj.insert(QString("rawCertData"), ::OpenAPI::toJsonValue(m_raw_cert_data));
    }
    if (m_service_endpoints.size() > 0) {
        obj.insert(QString("serviceEndpoints"), ::OpenAPI::toJsonValue(m_service_endpoints));
    }
    return obj;
}

OAIContainerIdentityInfo OAIGenericContainerExtendedInfo::getContainerIdentityInfo() const {
    return m_container_identity_info;
}
void OAIGenericContainerExtendedInfo::setContainerIdentityInfo(const OAIContainerIdentityInfo &container_identity_info) {
    m_container_identity_info = container_identity_info;
    m_container_identity_info_isSet = true;
}

bool OAIGenericContainerExtendedInfo::is_container_identity_info_Set() const{
    return m_container_identity_info_isSet;
}

bool OAIGenericContainerExtendedInfo::is_container_identity_info_Valid() const{
    return m_container_identity_info_isValid;
}

QString OAIGenericContainerExtendedInfo::getRawCertData() const {
    return m_raw_cert_data;
}
void OAIGenericContainerExtendedInfo::setRawCertData(const QString &raw_cert_data) {
    m_raw_cert_data = raw_cert_data;
    m_raw_cert_data_isSet = true;
}

bool OAIGenericContainerExtendedInfo::is_raw_cert_data_Set() const{
    return m_raw_cert_data_isSet;
}

bool OAIGenericContainerExtendedInfo::is_raw_cert_data_Valid() const{
    return m_raw_cert_data_isValid;
}

QMap<QString, QString> OAIGenericContainerExtendedInfo::getServiceEndpoints() const {
    return m_service_endpoints;
}
void OAIGenericContainerExtendedInfo::setServiceEndpoints(const QMap<QString, QString> &service_endpoints) {
    m_service_endpoints = service_endpoints;
    m_service_endpoints_isSet = true;
}

bool OAIGenericContainerExtendedInfo::is_service_endpoints_Set() const{
    return m_service_endpoints_isSet;
}

bool OAIGenericContainerExtendedInfo::is_service_endpoints_Valid() const{
    return m_service_endpoints_isValid;
}

bool OAIGenericContainerExtendedInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_container_identity_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_raw_cert_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_endpoints.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGenericContainerExtendedInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
