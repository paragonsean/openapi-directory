/**
 * RecoveryServicesBackupClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-12-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIaasVMILRRegistrationRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIaasVMILRRegistrationRequest::OAIIaasVMILRRegistrationRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIaasVMILRRegistrationRequest::OAIIaasVMILRRegistrationRequest() {
    this->initializeModel();
}

OAIIaasVMILRRegistrationRequest::~OAIIaasVMILRRegistrationRequest() {}

void OAIIaasVMILRRegistrationRequest::initializeModel() {

    m_initiator_name_isSet = false;
    m_initiator_name_isValid = false;

    m_recovery_point_id_isSet = false;
    m_recovery_point_id_isValid = false;

    m_renew_existing_registration_isSet = false;
    m_renew_existing_registration_isValid = false;

    m_virtual_machine_id_isSet = false;
    m_virtual_machine_id_isValid = false;

    m_object_type_isSet = false;
    m_object_type_isValid = false;
}

void OAIIaasVMILRRegistrationRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIaasVMILRRegistrationRequest::fromJsonObject(QJsonObject json) {

    m_initiator_name_isValid = ::OpenAPI::fromJsonValue(m_initiator_name, json[QString("initiatorName")]);
    m_initiator_name_isSet = !json[QString("initiatorName")].isNull() && m_initiator_name_isValid;

    m_recovery_point_id_isValid = ::OpenAPI::fromJsonValue(m_recovery_point_id, json[QString("recoveryPointId")]);
    m_recovery_point_id_isSet = !json[QString("recoveryPointId")].isNull() && m_recovery_point_id_isValid;

    m_renew_existing_registration_isValid = ::OpenAPI::fromJsonValue(m_renew_existing_registration, json[QString("renewExistingRegistration")]);
    m_renew_existing_registration_isSet = !json[QString("renewExistingRegistration")].isNull() && m_renew_existing_registration_isValid;

    m_virtual_machine_id_isValid = ::OpenAPI::fromJsonValue(m_virtual_machine_id, json[QString("virtualMachineId")]);
    m_virtual_machine_id_isSet = !json[QString("virtualMachineId")].isNull() && m_virtual_machine_id_isValid;

    m_object_type_isValid = ::OpenAPI::fromJsonValue(m_object_type, json[QString("objectType")]);
    m_object_type_isSet = !json[QString("objectType")].isNull() && m_object_type_isValid;
}

QString OAIIaasVMILRRegistrationRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIaasVMILRRegistrationRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_initiator_name_isSet) {
        obj.insert(QString("initiatorName"), ::OpenAPI::toJsonValue(m_initiator_name));
    }
    if (m_recovery_point_id_isSet) {
        obj.insert(QString("recoveryPointId"), ::OpenAPI::toJsonValue(m_recovery_point_id));
    }
    if (m_renew_existing_registration_isSet) {
        obj.insert(QString("renewExistingRegistration"), ::OpenAPI::toJsonValue(m_renew_existing_registration));
    }
    if (m_virtual_machine_id_isSet) {
        obj.insert(QString("virtualMachineId"), ::OpenAPI::toJsonValue(m_virtual_machine_id));
    }
    if (m_object_type_isSet) {
        obj.insert(QString("objectType"), ::OpenAPI::toJsonValue(m_object_type));
    }
    return obj;
}

QString OAIIaasVMILRRegistrationRequest::getInitiatorName() const {
    return m_initiator_name;
}
void OAIIaasVMILRRegistrationRequest::setInitiatorName(const QString &initiator_name) {
    m_initiator_name = initiator_name;
    m_initiator_name_isSet = true;
}

bool OAIIaasVMILRRegistrationRequest::is_initiator_name_Set() const{
    return m_initiator_name_isSet;
}

bool OAIIaasVMILRRegistrationRequest::is_initiator_name_Valid() const{
    return m_initiator_name_isValid;
}

QString OAIIaasVMILRRegistrationRequest::getRecoveryPointId() const {
    return m_recovery_point_id;
}
void OAIIaasVMILRRegistrationRequest::setRecoveryPointId(const QString &recovery_point_id) {
    m_recovery_point_id = recovery_point_id;
    m_recovery_point_id_isSet = true;
}

bool OAIIaasVMILRRegistrationRequest::is_recovery_point_id_Set() const{
    return m_recovery_point_id_isSet;
}

bool OAIIaasVMILRRegistrationRequest::is_recovery_point_id_Valid() const{
    return m_recovery_point_id_isValid;
}

bool OAIIaasVMILRRegistrationRequest::isRenewExistingRegistration() const {
    return m_renew_existing_registration;
}
void OAIIaasVMILRRegistrationRequest::setRenewExistingRegistration(const bool &renew_existing_registration) {
    m_renew_existing_registration = renew_existing_registration;
    m_renew_existing_registration_isSet = true;
}

bool OAIIaasVMILRRegistrationRequest::is_renew_existing_registration_Set() const{
    return m_renew_existing_registration_isSet;
}

bool OAIIaasVMILRRegistrationRequest::is_renew_existing_registration_Valid() const{
    return m_renew_existing_registration_isValid;
}

QString OAIIaasVMILRRegistrationRequest::getVirtualMachineId() const {
    return m_virtual_machine_id;
}
void OAIIaasVMILRRegistrationRequest::setVirtualMachineId(const QString &virtual_machine_id) {
    m_virtual_machine_id = virtual_machine_id;
    m_virtual_machine_id_isSet = true;
}

bool OAIIaasVMILRRegistrationRequest::is_virtual_machine_id_Set() const{
    return m_virtual_machine_id_isSet;
}

bool OAIIaasVMILRRegistrationRequest::is_virtual_machine_id_Valid() const{
    return m_virtual_machine_id_isValid;
}

QString OAIIaasVMILRRegistrationRequest::getObjectType() const {
    return m_object_type;
}
void OAIIaasVMILRRegistrationRequest::setObjectType(const QString &object_type) {
    m_object_type = object_type;
    m_object_type_isSet = true;
}

bool OAIIaasVMILRRegistrationRequest::is_object_type_Set() const{
    return m_object_type_isSet;
}

bool OAIIaasVMILRRegistrationRequest::is_object_type_Valid() const{
    return m_object_type_isValid;
}

bool OAIIaasVMILRRegistrationRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_initiator_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recovery_point_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_renew_existing_registration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_virtual_machine_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIaasVMILRRegistrationRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_object_type_isValid && true;
}

} // namespace OpenAPI
