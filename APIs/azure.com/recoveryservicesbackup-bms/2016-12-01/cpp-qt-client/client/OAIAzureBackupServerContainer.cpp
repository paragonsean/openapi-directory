/**
 * RecoveryServicesBackupClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-12-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAzureBackupServerContainer.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAzureBackupServerContainer::OAIAzureBackupServerContainer(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAzureBackupServerContainer::OAIAzureBackupServerContainer() {
    this->initializeModel();
}

OAIAzureBackupServerContainer::~OAIAzureBackupServerContainer() {}

void OAIAzureBackupServerContainer::initializeModel() {

    m_can_re_register_isSet = false;
    m_can_re_register_isValid = false;

    m_container_id_isSet = false;
    m_container_id_isValid = false;

    m_dpm_agent_version_isSet = false;
    m_dpm_agent_version_isValid = false;

    m_dpm_servers_isSet = false;
    m_dpm_servers_isValid = false;

    m_extended_info_isSet = false;
    m_extended_info_isValid = false;

    m_protected_item_count_isSet = false;
    m_protected_item_count_isValid = false;

    m_protection_status_isSet = false;
    m_protection_status_isValid = false;

    m_upgrade_available_isSet = false;
    m_upgrade_available_isValid = false;

    m_backup_management_type_isSet = false;
    m_backup_management_type_isValid = false;

    m_container_type_isSet = false;
    m_container_type_isValid = false;

    m_friendly_name_isSet = false;
    m_friendly_name_isValid = false;

    m_health_status_isSet = false;
    m_health_status_isValid = false;

    m_registration_status_isSet = false;
    m_registration_status_isValid = false;
}

void OAIAzureBackupServerContainer::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAzureBackupServerContainer::fromJsonObject(QJsonObject json) {

    m_can_re_register_isValid = ::OpenAPI::fromJsonValue(m_can_re_register, json[QString("canReRegister")]);
    m_can_re_register_isSet = !json[QString("canReRegister")].isNull() && m_can_re_register_isValid;

    m_container_id_isValid = ::OpenAPI::fromJsonValue(m_container_id, json[QString("containerId")]);
    m_container_id_isSet = !json[QString("containerId")].isNull() && m_container_id_isValid;

    m_dpm_agent_version_isValid = ::OpenAPI::fromJsonValue(m_dpm_agent_version, json[QString("dpmAgentVersion")]);
    m_dpm_agent_version_isSet = !json[QString("dpmAgentVersion")].isNull() && m_dpm_agent_version_isValid;

    m_dpm_servers_isValid = ::OpenAPI::fromJsonValue(m_dpm_servers, json[QString("dpmServers")]);
    m_dpm_servers_isSet = !json[QString("dpmServers")].isNull() && m_dpm_servers_isValid;

    m_extended_info_isValid = ::OpenAPI::fromJsonValue(m_extended_info, json[QString("extendedInfo")]);
    m_extended_info_isSet = !json[QString("extendedInfo")].isNull() && m_extended_info_isValid;

    m_protected_item_count_isValid = ::OpenAPI::fromJsonValue(m_protected_item_count, json[QString("protectedItemCount")]);
    m_protected_item_count_isSet = !json[QString("protectedItemCount")].isNull() && m_protected_item_count_isValid;

    m_protection_status_isValid = ::OpenAPI::fromJsonValue(m_protection_status, json[QString("protectionStatus")]);
    m_protection_status_isSet = !json[QString("protectionStatus")].isNull() && m_protection_status_isValid;

    m_upgrade_available_isValid = ::OpenAPI::fromJsonValue(m_upgrade_available, json[QString("upgradeAvailable")]);
    m_upgrade_available_isSet = !json[QString("upgradeAvailable")].isNull() && m_upgrade_available_isValid;

    m_backup_management_type_isValid = ::OpenAPI::fromJsonValue(m_backup_management_type, json[QString("backupManagementType")]);
    m_backup_management_type_isSet = !json[QString("backupManagementType")].isNull() && m_backup_management_type_isValid;

    m_container_type_isValid = ::OpenAPI::fromJsonValue(m_container_type, json[QString("containerType")]);
    m_container_type_isSet = !json[QString("containerType")].isNull() && m_container_type_isValid;

    m_friendly_name_isValid = ::OpenAPI::fromJsonValue(m_friendly_name, json[QString("friendlyName")]);
    m_friendly_name_isSet = !json[QString("friendlyName")].isNull() && m_friendly_name_isValid;

    m_health_status_isValid = ::OpenAPI::fromJsonValue(m_health_status, json[QString("healthStatus")]);
    m_health_status_isSet = !json[QString("healthStatus")].isNull() && m_health_status_isValid;

    m_registration_status_isValid = ::OpenAPI::fromJsonValue(m_registration_status, json[QString("registrationStatus")]);
    m_registration_status_isSet = !json[QString("registrationStatus")].isNull() && m_registration_status_isValid;
}

QString OAIAzureBackupServerContainer::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAzureBackupServerContainer::asJsonObject() const {
    QJsonObject obj;
    if (m_can_re_register_isSet) {
        obj.insert(QString("canReRegister"), ::OpenAPI::toJsonValue(m_can_re_register));
    }
    if (m_container_id_isSet) {
        obj.insert(QString("containerId"), ::OpenAPI::toJsonValue(m_container_id));
    }
    if (m_dpm_agent_version_isSet) {
        obj.insert(QString("dpmAgentVersion"), ::OpenAPI::toJsonValue(m_dpm_agent_version));
    }
    if (m_dpm_servers.size() > 0) {
        obj.insert(QString("dpmServers"), ::OpenAPI::toJsonValue(m_dpm_servers));
    }
    if (m_extended_info.isSet()) {
        obj.insert(QString("extendedInfo"), ::OpenAPI::toJsonValue(m_extended_info));
    }
    if (m_protected_item_count_isSet) {
        obj.insert(QString("protectedItemCount"), ::OpenAPI::toJsonValue(m_protected_item_count));
    }
    if (m_protection_status_isSet) {
        obj.insert(QString("protectionStatus"), ::OpenAPI::toJsonValue(m_protection_status));
    }
    if (m_upgrade_available_isSet) {
        obj.insert(QString("upgradeAvailable"), ::OpenAPI::toJsonValue(m_upgrade_available));
    }
    if (m_backup_management_type_isSet) {
        obj.insert(QString("backupManagementType"), ::OpenAPI::toJsonValue(m_backup_management_type));
    }
    if (m_container_type_isSet) {
        obj.insert(QString("containerType"), ::OpenAPI::toJsonValue(m_container_type));
    }
    if (m_friendly_name_isSet) {
        obj.insert(QString("friendlyName"), ::OpenAPI::toJsonValue(m_friendly_name));
    }
    if (m_health_status_isSet) {
        obj.insert(QString("healthStatus"), ::OpenAPI::toJsonValue(m_health_status));
    }
    if (m_registration_status_isSet) {
        obj.insert(QString("registrationStatus"), ::OpenAPI::toJsonValue(m_registration_status));
    }
    return obj;
}

bool OAIAzureBackupServerContainer::isCanReRegister() const {
    return m_can_re_register;
}
void OAIAzureBackupServerContainer::setCanReRegister(const bool &can_re_register) {
    m_can_re_register = can_re_register;
    m_can_re_register_isSet = true;
}

bool OAIAzureBackupServerContainer::is_can_re_register_Set() const{
    return m_can_re_register_isSet;
}

bool OAIAzureBackupServerContainer::is_can_re_register_Valid() const{
    return m_can_re_register_isValid;
}

QString OAIAzureBackupServerContainer::getContainerId() const {
    return m_container_id;
}
void OAIAzureBackupServerContainer::setContainerId(const QString &container_id) {
    m_container_id = container_id;
    m_container_id_isSet = true;
}

bool OAIAzureBackupServerContainer::is_container_id_Set() const{
    return m_container_id_isSet;
}

bool OAIAzureBackupServerContainer::is_container_id_Valid() const{
    return m_container_id_isValid;
}

QString OAIAzureBackupServerContainer::getDpmAgentVersion() const {
    return m_dpm_agent_version;
}
void OAIAzureBackupServerContainer::setDpmAgentVersion(const QString &dpm_agent_version) {
    m_dpm_agent_version = dpm_agent_version;
    m_dpm_agent_version_isSet = true;
}

bool OAIAzureBackupServerContainer::is_dpm_agent_version_Set() const{
    return m_dpm_agent_version_isSet;
}

bool OAIAzureBackupServerContainer::is_dpm_agent_version_Valid() const{
    return m_dpm_agent_version_isValid;
}

QList<QString> OAIAzureBackupServerContainer::getDpmServers() const {
    return m_dpm_servers;
}
void OAIAzureBackupServerContainer::setDpmServers(const QList<QString> &dpm_servers) {
    m_dpm_servers = dpm_servers;
    m_dpm_servers_isSet = true;
}

bool OAIAzureBackupServerContainer::is_dpm_servers_Set() const{
    return m_dpm_servers_isSet;
}

bool OAIAzureBackupServerContainer::is_dpm_servers_Valid() const{
    return m_dpm_servers_isValid;
}

OAIDPMContainerExtendedInfo OAIAzureBackupServerContainer::getExtendedInfo() const {
    return m_extended_info;
}
void OAIAzureBackupServerContainer::setExtendedInfo(const OAIDPMContainerExtendedInfo &extended_info) {
    m_extended_info = extended_info;
    m_extended_info_isSet = true;
}

bool OAIAzureBackupServerContainer::is_extended_info_Set() const{
    return m_extended_info_isSet;
}

bool OAIAzureBackupServerContainer::is_extended_info_Valid() const{
    return m_extended_info_isValid;
}

qint64 OAIAzureBackupServerContainer::getProtectedItemCount() const {
    return m_protected_item_count;
}
void OAIAzureBackupServerContainer::setProtectedItemCount(const qint64 &protected_item_count) {
    m_protected_item_count = protected_item_count;
    m_protected_item_count_isSet = true;
}

bool OAIAzureBackupServerContainer::is_protected_item_count_Set() const{
    return m_protected_item_count_isSet;
}

bool OAIAzureBackupServerContainer::is_protected_item_count_Valid() const{
    return m_protected_item_count_isValid;
}

QString OAIAzureBackupServerContainer::getProtectionStatus() const {
    return m_protection_status;
}
void OAIAzureBackupServerContainer::setProtectionStatus(const QString &protection_status) {
    m_protection_status = protection_status;
    m_protection_status_isSet = true;
}

bool OAIAzureBackupServerContainer::is_protection_status_Set() const{
    return m_protection_status_isSet;
}

bool OAIAzureBackupServerContainer::is_protection_status_Valid() const{
    return m_protection_status_isValid;
}

bool OAIAzureBackupServerContainer::isUpgradeAvailable() const {
    return m_upgrade_available;
}
void OAIAzureBackupServerContainer::setUpgradeAvailable(const bool &upgrade_available) {
    m_upgrade_available = upgrade_available;
    m_upgrade_available_isSet = true;
}

bool OAIAzureBackupServerContainer::is_upgrade_available_Set() const{
    return m_upgrade_available_isSet;
}

bool OAIAzureBackupServerContainer::is_upgrade_available_Valid() const{
    return m_upgrade_available_isValid;
}

QString OAIAzureBackupServerContainer::getBackupManagementType() const {
    return m_backup_management_type;
}
void OAIAzureBackupServerContainer::setBackupManagementType(const QString &backup_management_type) {
    m_backup_management_type = backup_management_type;
    m_backup_management_type_isSet = true;
}

bool OAIAzureBackupServerContainer::is_backup_management_type_Set() const{
    return m_backup_management_type_isSet;
}

bool OAIAzureBackupServerContainer::is_backup_management_type_Valid() const{
    return m_backup_management_type_isValid;
}

QString OAIAzureBackupServerContainer::getContainerType() const {
    return m_container_type;
}
void OAIAzureBackupServerContainer::setContainerType(const QString &container_type) {
    m_container_type = container_type;
    m_container_type_isSet = true;
}

bool OAIAzureBackupServerContainer::is_container_type_Set() const{
    return m_container_type_isSet;
}

bool OAIAzureBackupServerContainer::is_container_type_Valid() const{
    return m_container_type_isValid;
}

QString OAIAzureBackupServerContainer::getFriendlyName() const {
    return m_friendly_name;
}
void OAIAzureBackupServerContainer::setFriendlyName(const QString &friendly_name) {
    m_friendly_name = friendly_name;
    m_friendly_name_isSet = true;
}

bool OAIAzureBackupServerContainer::is_friendly_name_Set() const{
    return m_friendly_name_isSet;
}

bool OAIAzureBackupServerContainer::is_friendly_name_Valid() const{
    return m_friendly_name_isValid;
}

QString OAIAzureBackupServerContainer::getHealthStatus() const {
    return m_health_status;
}
void OAIAzureBackupServerContainer::setHealthStatus(const QString &health_status) {
    m_health_status = health_status;
    m_health_status_isSet = true;
}

bool OAIAzureBackupServerContainer::is_health_status_Set() const{
    return m_health_status_isSet;
}

bool OAIAzureBackupServerContainer::is_health_status_Valid() const{
    return m_health_status_isValid;
}

QString OAIAzureBackupServerContainer::getRegistrationStatus() const {
    return m_registration_status;
}
void OAIAzureBackupServerContainer::setRegistrationStatus(const QString &registration_status) {
    m_registration_status = registration_status;
    m_registration_status_isSet = true;
}

bool OAIAzureBackupServerContainer::is_registration_status_Set() const{
    return m_registration_status_isSet;
}

bool OAIAzureBackupServerContainer::is_registration_status_Valid() const{
    return m_registration_status_isValid;
}

bool OAIAzureBackupServerContainer::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_can_re_register_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_container_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dpm_agent_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dpm_servers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_extended_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_protected_item_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protection_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_upgrade_available_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_backup_management_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_container_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_friendly_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_health_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_registration_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAzureBackupServerContainer::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
