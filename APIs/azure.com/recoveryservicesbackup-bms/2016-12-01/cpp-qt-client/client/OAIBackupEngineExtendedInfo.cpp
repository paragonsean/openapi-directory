/**
 * RecoveryServicesBackupClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-12-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBackupEngineExtendedInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBackupEngineExtendedInfo::OAIBackupEngineExtendedInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBackupEngineExtendedInfo::OAIBackupEngineExtendedInfo() {
    this->initializeModel();
}

OAIBackupEngineExtendedInfo::~OAIBackupEngineExtendedInfo() {}

void OAIBackupEngineExtendedInfo::initializeModel() {

    m_available_disk_space_isSet = false;
    m_available_disk_space_isValid = false;

    m_azure_protected_instances_isSet = false;
    m_azure_protected_instances_isValid = false;

    m_database_name_isSet = false;
    m_database_name_isValid = false;

    m_disk_count_isSet = false;
    m_disk_count_isValid = false;

    m_protected_items_count_isSet = false;
    m_protected_items_count_isValid = false;

    m_protected_servers_count_isSet = false;
    m_protected_servers_count_isValid = false;

    m_refreshed_at_isSet = false;
    m_refreshed_at_isValid = false;

    m_used_disk_space_isSet = false;
    m_used_disk_space_isValid = false;
}

void OAIBackupEngineExtendedInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBackupEngineExtendedInfo::fromJsonObject(QJsonObject json) {

    m_available_disk_space_isValid = ::OpenAPI::fromJsonValue(m_available_disk_space, json[QString("availableDiskSpace")]);
    m_available_disk_space_isSet = !json[QString("availableDiskSpace")].isNull() && m_available_disk_space_isValid;

    m_azure_protected_instances_isValid = ::OpenAPI::fromJsonValue(m_azure_protected_instances, json[QString("azureProtectedInstances")]);
    m_azure_protected_instances_isSet = !json[QString("azureProtectedInstances")].isNull() && m_azure_protected_instances_isValid;

    m_database_name_isValid = ::OpenAPI::fromJsonValue(m_database_name, json[QString("databaseName")]);
    m_database_name_isSet = !json[QString("databaseName")].isNull() && m_database_name_isValid;

    m_disk_count_isValid = ::OpenAPI::fromJsonValue(m_disk_count, json[QString("diskCount")]);
    m_disk_count_isSet = !json[QString("diskCount")].isNull() && m_disk_count_isValid;

    m_protected_items_count_isValid = ::OpenAPI::fromJsonValue(m_protected_items_count, json[QString("protectedItemsCount")]);
    m_protected_items_count_isSet = !json[QString("protectedItemsCount")].isNull() && m_protected_items_count_isValid;

    m_protected_servers_count_isValid = ::OpenAPI::fromJsonValue(m_protected_servers_count, json[QString("protectedServersCount")]);
    m_protected_servers_count_isSet = !json[QString("protectedServersCount")].isNull() && m_protected_servers_count_isValid;

    m_refreshed_at_isValid = ::OpenAPI::fromJsonValue(m_refreshed_at, json[QString("refreshedAt")]);
    m_refreshed_at_isSet = !json[QString("refreshedAt")].isNull() && m_refreshed_at_isValid;

    m_used_disk_space_isValid = ::OpenAPI::fromJsonValue(m_used_disk_space, json[QString("usedDiskSpace")]);
    m_used_disk_space_isSet = !json[QString("usedDiskSpace")].isNull() && m_used_disk_space_isValid;
}

QString OAIBackupEngineExtendedInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBackupEngineExtendedInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_available_disk_space_isSet) {
        obj.insert(QString("availableDiskSpace"), ::OpenAPI::toJsonValue(m_available_disk_space));
    }
    if (m_azure_protected_instances_isSet) {
        obj.insert(QString("azureProtectedInstances"), ::OpenAPI::toJsonValue(m_azure_protected_instances));
    }
    if (m_database_name_isSet) {
        obj.insert(QString("databaseName"), ::OpenAPI::toJsonValue(m_database_name));
    }
    if (m_disk_count_isSet) {
        obj.insert(QString("diskCount"), ::OpenAPI::toJsonValue(m_disk_count));
    }
    if (m_protected_items_count_isSet) {
        obj.insert(QString("protectedItemsCount"), ::OpenAPI::toJsonValue(m_protected_items_count));
    }
    if (m_protected_servers_count_isSet) {
        obj.insert(QString("protectedServersCount"), ::OpenAPI::toJsonValue(m_protected_servers_count));
    }
    if (m_refreshed_at_isSet) {
        obj.insert(QString("refreshedAt"), ::OpenAPI::toJsonValue(m_refreshed_at));
    }
    if (m_used_disk_space_isSet) {
        obj.insert(QString("usedDiskSpace"), ::OpenAPI::toJsonValue(m_used_disk_space));
    }
    return obj;
}

double OAIBackupEngineExtendedInfo::getAvailableDiskSpace() const {
    return m_available_disk_space;
}
void OAIBackupEngineExtendedInfo::setAvailableDiskSpace(const double &available_disk_space) {
    m_available_disk_space = available_disk_space;
    m_available_disk_space_isSet = true;
}

bool OAIBackupEngineExtendedInfo::is_available_disk_space_Set() const{
    return m_available_disk_space_isSet;
}

bool OAIBackupEngineExtendedInfo::is_available_disk_space_Valid() const{
    return m_available_disk_space_isValid;
}

qint32 OAIBackupEngineExtendedInfo::getAzureProtectedInstances() const {
    return m_azure_protected_instances;
}
void OAIBackupEngineExtendedInfo::setAzureProtectedInstances(const qint32 &azure_protected_instances) {
    m_azure_protected_instances = azure_protected_instances;
    m_azure_protected_instances_isSet = true;
}

bool OAIBackupEngineExtendedInfo::is_azure_protected_instances_Set() const{
    return m_azure_protected_instances_isSet;
}

bool OAIBackupEngineExtendedInfo::is_azure_protected_instances_Valid() const{
    return m_azure_protected_instances_isValid;
}

QString OAIBackupEngineExtendedInfo::getDatabaseName() const {
    return m_database_name;
}
void OAIBackupEngineExtendedInfo::setDatabaseName(const QString &database_name) {
    m_database_name = database_name;
    m_database_name_isSet = true;
}

bool OAIBackupEngineExtendedInfo::is_database_name_Set() const{
    return m_database_name_isSet;
}

bool OAIBackupEngineExtendedInfo::is_database_name_Valid() const{
    return m_database_name_isValid;
}

qint32 OAIBackupEngineExtendedInfo::getDiskCount() const {
    return m_disk_count;
}
void OAIBackupEngineExtendedInfo::setDiskCount(const qint32 &disk_count) {
    m_disk_count = disk_count;
    m_disk_count_isSet = true;
}

bool OAIBackupEngineExtendedInfo::is_disk_count_Set() const{
    return m_disk_count_isSet;
}

bool OAIBackupEngineExtendedInfo::is_disk_count_Valid() const{
    return m_disk_count_isValid;
}

qint32 OAIBackupEngineExtendedInfo::getProtectedItemsCount() const {
    return m_protected_items_count;
}
void OAIBackupEngineExtendedInfo::setProtectedItemsCount(const qint32 &protected_items_count) {
    m_protected_items_count = protected_items_count;
    m_protected_items_count_isSet = true;
}

bool OAIBackupEngineExtendedInfo::is_protected_items_count_Set() const{
    return m_protected_items_count_isSet;
}

bool OAIBackupEngineExtendedInfo::is_protected_items_count_Valid() const{
    return m_protected_items_count_isValid;
}

qint32 OAIBackupEngineExtendedInfo::getProtectedServersCount() const {
    return m_protected_servers_count;
}
void OAIBackupEngineExtendedInfo::setProtectedServersCount(const qint32 &protected_servers_count) {
    m_protected_servers_count = protected_servers_count;
    m_protected_servers_count_isSet = true;
}

bool OAIBackupEngineExtendedInfo::is_protected_servers_count_Set() const{
    return m_protected_servers_count_isSet;
}

bool OAIBackupEngineExtendedInfo::is_protected_servers_count_Valid() const{
    return m_protected_servers_count_isValid;
}

QDateTime OAIBackupEngineExtendedInfo::getRefreshedAt() const {
    return m_refreshed_at;
}
void OAIBackupEngineExtendedInfo::setRefreshedAt(const QDateTime &refreshed_at) {
    m_refreshed_at = refreshed_at;
    m_refreshed_at_isSet = true;
}

bool OAIBackupEngineExtendedInfo::is_refreshed_at_Set() const{
    return m_refreshed_at_isSet;
}

bool OAIBackupEngineExtendedInfo::is_refreshed_at_Valid() const{
    return m_refreshed_at_isValid;
}

double OAIBackupEngineExtendedInfo::getUsedDiskSpace() const {
    return m_used_disk_space;
}
void OAIBackupEngineExtendedInfo::setUsedDiskSpace(const double &used_disk_space) {
    m_used_disk_space = used_disk_space;
    m_used_disk_space_isSet = true;
}

bool OAIBackupEngineExtendedInfo::is_used_disk_space_Set() const{
    return m_used_disk_space_isSet;
}

bool OAIBackupEngineExtendedInfo::is_used_disk_space_Valid() const{
    return m_used_disk_space_isValid;
}

bool OAIBackupEngineExtendedInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_available_disk_space_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_azure_protected_instances_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_database_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disk_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protected_items_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protected_servers_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_refreshed_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_used_disk_space_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBackupEngineExtendedInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
