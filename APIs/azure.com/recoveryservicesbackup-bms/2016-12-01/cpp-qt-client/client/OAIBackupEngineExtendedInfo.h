/**
 * RecoveryServicesBackupClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-12-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIBackupEngineExtendedInfo.h
 *
 * Additional information on backup engine.
 */

#ifndef OAIBackupEngineExtendedInfo_H
#define OAIBackupEngineExtendedInfo_H

#include <QJsonObject>

#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIBackupEngineExtendedInfo : public OAIObject {
public:
    OAIBackupEngineExtendedInfo();
    OAIBackupEngineExtendedInfo(QString json);
    ~OAIBackupEngineExtendedInfo() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    double getAvailableDiskSpace() const;
    void setAvailableDiskSpace(const double &available_disk_space);
    bool is_available_disk_space_Set() const;
    bool is_available_disk_space_Valid() const;

    qint32 getAzureProtectedInstances() const;
    void setAzureProtectedInstances(const qint32 &azure_protected_instances);
    bool is_azure_protected_instances_Set() const;
    bool is_azure_protected_instances_Valid() const;

    QString getDatabaseName() const;
    void setDatabaseName(const QString &database_name);
    bool is_database_name_Set() const;
    bool is_database_name_Valid() const;

    qint32 getDiskCount() const;
    void setDiskCount(const qint32 &disk_count);
    bool is_disk_count_Set() const;
    bool is_disk_count_Valid() const;

    qint32 getProtectedItemsCount() const;
    void setProtectedItemsCount(const qint32 &protected_items_count);
    bool is_protected_items_count_Set() const;
    bool is_protected_items_count_Valid() const;

    qint32 getProtectedServersCount() const;
    void setProtectedServersCount(const qint32 &protected_servers_count);
    bool is_protected_servers_count_Set() const;
    bool is_protected_servers_count_Valid() const;

    QDateTime getRefreshedAt() const;
    void setRefreshedAt(const QDateTime &refreshed_at);
    bool is_refreshed_at_Set() const;
    bool is_refreshed_at_Valid() const;

    double getUsedDiskSpace() const;
    void setUsedDiskSpace(const double &used_disk_space);
    bool is_used_disk_space_Set() const;
    bool is_used_disk_space_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    double m_available_disk_space;
    bool m_available_disk_space_isSet;
    bool m_available_disk_space_isValid;

    qint32 m_azure_protected_instances;
    bool m_azure_protected_instances_isSet;
    bool m_azure_protected_instances_isValid;

    QString m_database_name;
    bool m_database_name_isSet;
    bool m_database_name_isValid;

    qint32 m_disk_count;
    bool m_disk_count_isSet;
    bool m_disk_count_isValid;

    qint32 m_protected_items_count;
    bool m_protected_items_count_isSet;
    bool m_protected_items_count_isValid;

    qint32 m_protected_servers_count;
    bool m_protected_servers_count_isSet;
    bool m_protected_servers_count_isValid;

    QDateTime m_refreshed_at;
    bool m_refreshed_at_isSet;
    bool m_refreshed_at_isValid;

    double m_used_disk_space;
    bool m_used_disk_space_isSet;
    bool m_used_disk_space_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIBackupEngineExtendedInfo)

#endif // OAIBackupEngineExtendedInfo_H
