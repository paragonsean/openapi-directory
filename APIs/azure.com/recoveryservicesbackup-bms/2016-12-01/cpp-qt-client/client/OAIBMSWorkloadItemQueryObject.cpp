/**
 * RecoveryServicesBackupClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-12-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBMSWorkloadItemQueryObject.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBMSWorkloadItemQueryObject::OAIBMSWorkloadItemQueryObject(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBMSWorkloadItemQueryObject::OAIBMSWorkloadItemQueryObject() {
    this->initializeModel();
}

OAIBMSWorkloadItemQueryObject::~OAIBMSWorkloadItemQueryObject() {}

void OAIBMSWorkloadItemQueryObject::initializeModel() {

    m_backup_management_type_isSet = false;
    m_backup_management_type_isValid = false;

    m_protection_status_isSet = false;
    m_protection_status_isValid = false;

    m_workload_item_type_isSet = false;
    m_workload_item_type_isValid = false;

    m_workload_type_isSet = false;
    m_workload_type_isValid = false;
}

void OAIBMSWorkloadItemQueryObject::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBMSWorkloadItemQueryObject::fromJsonObject(QJsonObject json) {

    m_backup_management_type_isValid = ::OpenAPI::fromJsonValue(m_backup_management_type, json[QString("backupManagementType")]);
    m_backup_management_type_isSet = !json[QString("backupManagementType")].isNull() && m_backup_management_type_isValid;

    m_protection_status_isValid = ::OpenAPI::fromJsonValue(m_protection_status, json[QString("protectionStatus")]);
    m_protection_status_isSet = !json[QString("protectionStatus")].isNull() && m_protection_status_isValid;

    m_workload_item_type_isValid = ::OpenAPI::fromJsonValue(m_workload_item_type, json[QString("workloadItemType")]);
    m_workload_item_type_isSet = !json[QString("workloadItemType")].isNull() && m_workload_item_type_isValid;

    m_workload_type_isValid = ::OpenAPI::fromJsonValue(m_workload_type, json[QString("workloadType")]);
    m_workload_type_isSet = !json[QString("workloadType")].isNull() && m_workload_type_isValid;
}

QString OAIBMSWorkloadItemQueryObject::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBMSWorkloadItemQueryObject::asJsonObject() const {
    QJsonObject obj;
    if (m_backup_management_type_isSet) {
        obj.insert(QString("backupManagementType"), ::OpenAPI::toJsonValue(m_backup_management_type));
    }
    if (m_protection_status_isSet) {
        obj.insert(QString("protectionStatus"), ::OpenAPI::toJsonValue(m_protection_status));
    }
    if (m_workload_item_type_isSet) {
        obj.insert(QString("workloadItemType"), ::OpenAPI::toJsonValue(m_workload_item_type));
    }
    if (m_workload_type_isSet) {
        obj.insert(QString("workloadType"), ::OpenAPI::toJsonValue(m_workload_type));
    }
    return obj;
}

QString OAIBMSWorkloadItemQueryObject::getBackupManagementType() const {
    return m_backup_management_type;
}
void OAIBMSWorkloadItemQueryObject::setBackupManagementType(const QString &backup_management_type) {
    m_backup_management_type = backup_management_type;
    m_backup_management_type_isSet = true;
}

bool OAIBMSWorkloadItemQueryObject::is_backup_management_type_Set() const{
    return m_backup_management_type_isSet;
}

bool OAIBMSWorkloadItemQueryObject::is_backup_management_type_Valid() const{
    return m_backup_management_type_isValid;
}

QString OAIBMSWorkloadItemQueryObject::getProtectionStatus() const {
    return m_protection_status;
}
void OAIBMSWorkloadItemQueryObject::setProtectionStatus(const QString &protection_status) {
    m_protection_status = protection_status;
    m_protection_status_isSet = true;
}

bool OAIBMSWorkloadItemQueryObject::is_protection_status_Set() const{
    return m_protection_status_isSet;
}

bool OAIBMSWorkloadItemQueryObject::is_protection_status_Valid() const{
    return m_protection_status_isValid;
}

QString OAIBMSWorkloadItemQueryObject::getWorkloadItemType() const {
    return m_workload_item_type;
}
void OAIBMSWorkloadItemQueryObject::setWorkloadItemType(const QString &workload_item_type) {
    m_workload_item_type = workload_item_type;
    m_workload_item_type_isSet = true;
}

bool OAIBMSWorkloadItemQueryObject::is_workload_item_type_Set() const{
    return m_workload_item_type_isSet;
}

bool OAIBMSWorkloadItemQueryObject::is_workload_item_type_Valid() const{
    return m_workload_item_type_isValid;
}

QString OAIBMSWorkloadItemQueryObject::getWorkloadType() const {
    return m_workload_type;
}
void OAIBMSWorkloadItemQueryObject::setWorkloadType(const QString &workload_type) {
    m_workload_type = workload_type;
    m_workload_type_isSet = true;
}

bool OAIBMSWorkloadItemQueryObject::is_workload_type_Set() const{
    return m_workload_type_isSet;
}

bool OAIBMSWorkloadItemQueryObject::is_workload_type_Valid() const{
    return m_workload_type_isValid;
}

bool OAIBMSWorkloadItemQueryObject::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_backup_management_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protection_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_workload_item_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_workload_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBMSWorkloadItemQueryObject::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
