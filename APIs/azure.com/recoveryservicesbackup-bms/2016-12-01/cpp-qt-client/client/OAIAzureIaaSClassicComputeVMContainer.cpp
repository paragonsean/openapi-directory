/**
 * RecoveryServicesBackupClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-12-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAzureIaaSClassicComputeVMContainer.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAzureIaaSClassicComputeVMContainer::OAIAzureIaaSClassicComputeVMContainer(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAzureIaaSClassicComputeVMContainer::OAIAzureIaaSClassicComputeVMContainer() {
    this->initializeModel();
}

OAIAzureIaaSClassicComputeVMContainer::~OAIAzureIaaSClassicComputeVMContainer() {}

void OAIAzureIaaSClassicComputeVMContainer::initializeModel() {

    m_resource_group_isSet = false;
    m_resource_group_isValid = false;

    m_virtual_machine_id_isSet = false;
    m_virtual_machine_id_isValid = false;

    m_virtual_machine_version_isSet = false;
    m_virtual_machine_version_isValid = false;

    m_backup_management_type_isSet = false;
    m_backup_management_type_isValid = false;

    m_container_type_isSet = false;
    m_container_type_isValid = false;

    m_friendly_name_isSet = false;
    m_friendly_name_isValid = false;

    m_health_status_isSet = false;
    m_health_status_isValid = false;

    m_registration_status_isSet = false;
    m_registration_status_isValid = false;
}

void OAIAzureIaaSClassicComputeVMContainer::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAzureIaaSClassicComputeVMContainer::fromJsonObject(QJsonObject json) {

    m_resource_group_isValid = ::OpenAPI::fromJsonValue(m_resource_group, json[QString("resourceGroup")]);
    m_resource_group_isSet = !json[QString("resourceGroup")].isNull() && m_resource_group_isValid;

    m_virtual_machine_id_isValid = ::OpenAPI::fromJsonValue(m_virtual_machine_id, json[QString("virtualMachineId")]);
    m_virtual_machine_id_isSet = !json[QString("virtualMachineId")].isNull() && m_virtual_machine_id_isValid;

    m_virtual_machine_version_isValid = ::OpenAPI::fromJsonValue(m_virtual_machine_version, json[QString("virtualMachineVersion")]);
    m_virtual_machine_version_isSet = !json[QString("virtualMachineVersion")].isNull() && m_virtual_machine_version_isValid;

    m_backup_management_type_isValid = ::OpenAPI::fromJsonValue(m_backup_management_type, json[QString("backupManagementType")]);
    m_backup_management_type_isSet = !json[QString("backupManagementType")].isNull() && m_backup_management_type_isValid;

    m_container_type_isValid = ::OpenAPI::fromJsonValue(m_container_type, json[QString("containerType")]);
    m_container_type_isSet = !json[QString("containerType")].isNull() && m_container_type_isValid;

    m_friendly_name_isValid = ::OpenAPI::fromJsonValue(m_friendly_name, json[QString("friendlyName")]);
    m_friendly_name_isSet = !json[QString("friendlyName")].isNull() && m_friendly_name_isValid;

    m_health_status_isValid = ::OpenAPI::fromJsonValue(m_health_status, json[QString("healthStatus")]);
    m_health_status_isSet = !json[QString("healthStatus")].isNull() && m_health_status_isValid;

    m_registration_status_isValid = ::OpenAPI::fromJsonValue(m_registration_status, json[QString("registrationStatus")]);
    m_registration_status_isSet = !json[QString("registrationStatus")].isNull() && m_registration_status_isValid;
}

QString OAIAzureIaaSClassicComputeVMContainer::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAzureIaaSClassicComputeVMContainer::asJsonObject() const {
    QJsonObject obj;
    if (m_resource_group_isSet) {
        obj.insert(QString("resourceGroup"), ::OpenAPI::toJsonValue(m_resource_group));
    }
    if (m_virtual_machine_id_isSet) {
        obj.insert(QString("virtualMachineId"), ::OpenAPI::toJsonValue(m_virtual_machine_id));
    }
    if (m_virtual_machine_version_isSet) {
        obj.insert(QString("virtualMachineVersion"), ::OpenAPI::toJsonValue(m_virtual_machine_version));
    }
    if (m_backup_management_type_isSet) {
        obj.insert(QString("backupManagementType"), ::OpenAPI::toJsonValue(m_backup_management_type));
    }
    if (m_container_type_isSet) {
        obj.insert(QString("containerType"), ::OpenAPI::toJsonValue(m_container_type));
    }
    if (m_friendly_name_isSet) {
        obj.insert(QString("friendlyName"), ::OpenAPI::toJsonValue(m_friendly_name));
    }
    if (m_health_status_isSet) {
        obj.insert(QString("healthStatus"), ::OpenAPI::toJsonValue(m_health_status));
    }
    if (m_registration_status_isSet) {
        obj.insert(QString("registrationStatus"), ::OpenAPI::toJsonValue(m_registration_status));
    }
    return obj;
}

QString OAIAzureIaaSClassicComputeVMContainer::getResourceGroup() const {
    return m_resource_group;
}
void OAIAzureIaaSClassicComputeVMContainer::setResourceGroup(const QString &resource_group) {
    m_resource_group = resource_group;
    m_resource_group_isSet = true;
}

bool OAIAzureIaaSClassicComputeVMContainer::is_resource_group_Set() const{
    return m_resource_group_isSet;
}

bool OAIAzureIaaSClassicComputeVMContainer::is_resource_group_Valid() const{
    return m_resource_group_isValid;
}

QString OAIAzureIaaSClassicComputeVMContainer::getVirtualMachineId() const {
    return m_virtual_machine_id;
}
void OAIAzureIaaSClassicComputeVMContainer::setVirtualMachineId(const QString &virtual_machine_id) {
    m_virtual_machine_id = virtual_machine_id;
    m_virtual_machine_id_isSet = true;
}

bool OAIAzureIaaSClassicComputeVMContainer::is_virtual_machine_id_Set() const{
    return m_virtual_machine_id_isSet;
}

bool OAIAzureIaaSClassicComputeVMContainer::is_virtual_machine_id_Valid() const{
    return m_virtual_machine_id_isValid;
}

QString OAIAzureIaaSClassicComputeVMContainer::getVirtualMachineVersion() const {
    return m_virtual_machine_version;
}
void OAIAzureIaaSClassicComputeVMContainer::setVirtualMachineVersion(const QString &virtual_machine_version) {
    m_virtual_machine_version = virtual_machine_version;
    m_virtual_machine_version_isSet = true;
}

bool OAIAzureIaaSClassicComputeVMContainer::is_virtual_machine_version_Set() const{
    return m_virtual_machine_version_isSet;
}

bool OAIAzureIaaSClassicComputeVMContainer::is_virtual_machine_version_Valid() const{
    return m_virtual_machine_version_isValid;
}

QString OAIAzureIaaSClassicComputeVMContainer::getBackupManagementType() const {
    return m_backup_management_type;
}
void OAIAzureIaaSClassicComputeVMContainer::setBackupManagementType(const QString &backup_management_type) {
    m_backup_management_type = backup_management_type;
    m_backup_management_type_isSet = true;
}

bool OAIAzureIaaSClassicComputeVMContainer::is_backup_management_type_Set() const{
    return m_backup_management_type_isSet;
}

bool OAIAzureIaaSClassicComputeVMContainer::is_backup_management_type_Valid() const{
    return m_backup_management_type_isValid;
}

QString OAIAzureIaaSClassicComputeVMContainer::getContainerType() const {
    return m_container_type;
}
void OAIAzureIaaSClassicComputeVMContainer::setContainerType(const QString &container_type) {
    m_container_type = container_type;
    m_container_type_isSet = true;
}

bool OAIAzureIaaSClassicComputeVMContainer::is_container_type_Set() const{
    return m_container_type_isSet;
}

bool OAIAzureIaaSClassicComputeVMContainer::is_container_type_Valid() const{
    return m_container_type_isValid;
}

QString OAIAzureIaaSClassicComputeVMContainer::getFriendlyName() const {
    return m_friendly_name;
}
void OAIAzureIaaSClassicComputeVMContainer::setFriendlyName(const QString &friendly_name) {
    m_friendly_name = friendly_name;
    m_friendly_name_isSet = true;
}

bool OAIAzureIaaSClassicComputeVMContainer::is_friendly_name_Set() const{
    return m_friendly_name_isSet;
}

bool OAIAzureIaaSClassicComputeVMContainer::is_friendly_name_Valid() const{
    return m_friendly_name_isValid;
}

QString OAIAzureIaaSClassicComputeVMContainer::getHealthStatus() const {
    return m_health_status;
}
void OAIAzureIaaSClassicComputeVMContainer::setHealthStatus(const QString &health_status) {
    m_health_status = health_status;
    m_health_status_isSet = true;
}

bool OAIAzureIaaSClassicComputeVMContainer::is_health_status_Set() const{
    return m_health_status_isSet;
}

bool OAIAzureIaaSClassicComputeVMContainer::is_health_status_Valid() const{
    return m_health_status_isValid;
}

QString OAIAzureIaaSClassicComputeVMContainer::getRegistrationStatus() const {
    return m_registration_status;
}
void OAIAzureIaaSClassicComputeVMContainer::setRegistrationStatus(const QString &registration_status) {
    m_registration_status = registration_status;
    m_registration_status_isSet = true;
}

bool OAIAzureIaaSClassicComputeVMContainer::is_registration_status_Set() const{
    return m_registration_status_isSet;
}

bool OAIAzureIaaSClassicComputeVMContainer::is_registration_status_Valid() const{
    return m_registration_status_isValid;
}

bool OAIAzureIaaSClassicComputeVMContainer::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_resource_group_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_virtual_machine_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_virtual_machine_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_backup_management_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_container_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_friendly_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_health_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_registration_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAzureIaaSClassicComputeVMContainer::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
