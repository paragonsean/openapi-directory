/**
 * RecoveryServicesBackupClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-12-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAzureWorkloadContainerExtendedInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAzureWorkloadContainerExtendedInfo::OAIAzureWorkloadContainerExtendedInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAzureWorkloadContainerExtendedInfo::OAIAzureWorkloadContainerExtendedInfo() {
    this->initializeModel();
}

OAIAzureWorkloadContainerExtendedInfo::~OAIAzureWorkloadContainerExtendedInfo() {}

void OAIAzureWorkloadContainerExtendedInfo::initializeModel() {

    m_host_server_name_isSet = false;
    m_host_server_name_isValid = false;

    m_inquiry_info_isSet = false;
    m_inquiry_info_isValid = false;

    m_nodes_list_isSet = false;
    m_nodes_list_isValid = false;
}

void OAIAzureWorkloadContainerExtendedInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAzureWorkloadContainerExtendedInfo::fromJsonObject(QJsonObject json) {

    m_host_server_name_isValid = ::OpenAPI::fromJsonValue(m_host_server_name, json[QString("hostServerName")]);
    m_host_server_name_isSet = !json[QString("hostServerName")].isNull() && m_host_server_name_isValid;

    m_inquiry_info_isValid = ::OpenAPI::fromJsonValue(m_inquiry_info, json[QString("inquiryInfo")]);
    m_inquiry_info_isSet = !json[QString("inquiryInfo")].isNull() && m_inquiry_info_isValid;

    m_nodes_list_isValid = ::OpenAPI::fromJsonValue(m_nodes_list, json[QString("nodesList")]);
    m_nodes_list_isSet = !json[QString("nodesList")].isNull() && m_nodes_list_isValid;
}

QString OAIAzureWorkloadContainerExtendedInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAzureWorkloadContainerExtendedInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_host_server_name_isSet) {
        obj.insert(QString("hostServerName"), ::OpenAPI::toJsonValue(m_host_server_name));
    }
    if (m_inquiry_info.isSet()) {
        obj.insert(QString("inquiryInfo"), ::OpenAPI::toJsonValue(m_inquiry_info));
    }
    if (m_nodes_list.size() > 0) {
        obj.insert(QString("nodesList"), ::OpenAPI::toJsonValue(m_nodes_list));
    }
    return obj;
}

QString OAIAzureWorkloadContainerExtendedInfo::getHostServerName() const {
    return m_host_server_name;
}
void OAIAzureWorkloadContainerExtendedInfo::setHostServerName(const QString &host_server_name) {
    m_host_server_name = host_server_name;
    m_host_server_name_isSet = true;
}

bool OAIAzureWorkloadContainerExtendedInfo::is_host_server_name_Set() const{
    return m_host_server_name_isSet;
}

bool OAIAzureWorkloadContainerExtendedInfo::is_host_server_name_Valid() const{
    return m_host_server_name_isValid;
}

OAIInquiryInfo OAIAzureWorkloadContainerExtendedInfo::getInquiryInfo() const {
    return m_inquiry_info;
}
void OAIAzureWorkloadContainerExtendedInfo::setInquiryInfo(const OAIInquiryInfo &inquiry_info) {
    m_inquiry_info = inquiry_info;
    m_inquiry_info_isSet = true;
}

bool OAIAzureWorkloadContainerExtendedInfo::is_inquiry_info_Set() const{
    return m_inquiry_info_isSet;
}

bool OAIAzureWorkloadContainerExtendedInfo::is_inquiry_info_Valid() const{
    return m_inquiry_info_isValid;
}

QList<OAIDistributedNodesInfo> OAIAzureWorkloadContainerExtendedInfo::getNodesList() const {
    return m_nodes_list;
}
void OAIAzureWorkloadContainerExtendedInfo::setNodesList(const QList<OAIDistributedNodesInfo> &nodes_list) {
    m_nodes_list = nodes_list;
    m_nodes_list_isSet = true;
}

bool OAIAzureWorkloadContainerExtendedInfo::is_nodes_list_Set() const{
    return m_nodes_list_isSet;
}

bool OAIAzureWorkloadContainerExtendedInfo::is_nodes_list_Valid() const{
    return m_nodes_list_isValid;
}

bool OAIAzureWorkloadContainerExtendedInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_host_server_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inquiry_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_nodes_list.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAzureWorkloadContainerExtendedInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
