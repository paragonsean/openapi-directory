/**
 * RecoveryServicesBackupClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-12-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAzureVmWorkloadSQLDatabaseProtectableItem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAzureVmWorkloadSQLDatabaseProtectableItem::OAIAzureVmWorkloadSQLDatabaseProtectableItem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAzureVmWorkloadSQLDatabaseProtectableItem::OAIAzureVmWorkloadSQLDatabaseProtectableItem() {
    this->initializeModel();
}

OAIAzureVmWorkloadSQLDatabaseProtectableItem::~OAIAzureVmWorkloadSQLDatabaseProtectableItem() {}

void OAIAzureVmWorkloadSQLDatabaseProtectableItem::initializeModel() {

    m_is_auto_protectable_isSet = false;
    m_is_auto_protectable_isValid = false;

    m_is_auto_protected_isSet = false;
    m_is_auto_protected_isValid = false;

    m_parent_name_isSet = false;
    m_parent_name_isValid = false;

    m_parent_unique_name_isSet = false;
    m_parent_unique_name_isValid = false;

    m_prebackupvalidation_isSet = false;
    m_prebackupvalidation_isValid = false;

    m_server_name_isSet = false;
    m_server_name_isValid = false;

    m_subinquireditemcount_isSet = false;
    m_subinquireditemcount_isValid = false;

    m_subprotectableitemcount_isSet = false;
    m_subprotectableitemcount_isValid = false;

    m_backup_management_type_isSet = false;
    m_backup_management_type_isValid = false;

    m_friendly_name_isSet = false;
    m_friendly_name_isValid = false;

    m_protectable_item_type_isSet = false;
    m_protectable_item_type_isValid = false;

    m_protection_state_isSet = false;
    m_protection_state_isValid = false;

    m_workload_type_isSet = false;
    m_workload_type_isValid = false;
}

void OAIAzureVmWorkloadSQLDatabaseProtectableItem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAzureVmWorkloadSQLDatabaseProtectableItem::fromJsonObject(QJsonObject json) {

    m_is_auto_protectable_isValid = ::OpenAPI::fromJsonValue(m_is_auto_protectable, json[QString("isAutoProtectable")]);
    m_is_auto_protectable_isSet = !json[QString("isAutoProtectable")].isNull() && m_is_auto_protectable_isValid;

    m_is_auto_protected_isValid = ::OpenAPI::fromJsonValue(m_is_auto_protected, json[QString("isAutoProtected")]);
    m_is_auto_protected_isSet = !json[QString("isAutoProtected")].isNull() && m_is_auto_protected_isValid;

    m_parent_name_isValid = ::OpenAPI::fromJsonValue(m_parent_name, json[QString("parentName")]);
    m_parent_name_isSet = !json[QString("parentName")].isNull() && m_parent_name_isValid;

    m_parent_unique_name_isValid = ::OpenAPI::fromJsonValue(m_parent_unique_name, json[QString("parentUniqueName")]);
    m_parent_unique_name_isSet = !json[QString("parentUniqueName")].isNull() && m_parent_unique_name_isValid;

    m_prebackupvalidation_isValid = ::OpenAPI::fromJsonValue(m_prebackupvalidation, json[QString("prebackupvalidation")]);
    m_prebackupvalidation_isSet = !json[QString("prebackupvalidation")].isNull() && m_prebackupvalidation_isValid;

    m_server_name_isValid = ::OpenAPI::fromJsonValue(m_server_name, json[QString("serverName")]);
    m_server_name_isSet = !json[QString("serverName")].isNull() && m_server_name_isValid;

    m_subinquireditemcount_isValid = ::OpenAPI::fromJsonValue(m_subinquireditemcount, json[QString("subinquireditemcount")]);
    m_subinquireditemcount_isSet = !json[QString("subinquireditemcount")].isNull() && m_subinquireditemcount_isValid;

    m_subprotectableitemcount_isValid = ::OpenAPI::fromJsonValue(m_subprotectableitemcount, json[QString("subprotectableitemcount")]);
    m_subprotectableitemcount_isSet = !json[QString("subprotectableitemcount")].isNull() && m_subprotectableitemcount_isValid;

    m_backup_management_type_isValid = ::OpenAPI::fromJsonValue(m_backup_management_type, json[QString("backupManagementType")]);
    m_backup_management_type_isSet = !json[QString("backupManagementType")].isNull() && m_backup_management_type_isValid;

    m_friendly_name_isValid = ::OpenAPI::fromJsonValue(m_friendly_name, json[QString("friendlyName")]);
    m_friendly_name_isSet = !json[QString("friendlyName")].isNull() && m_friendly_name_isValid;

    m_protectable_item_type_isValid = ::OpenAPI::fromJsonValue(m_protectable_item_type, json[QString("protectableItemType")]);
    m_protectable_item_type_isSet = !json[QString("protectableItemType")].isNull() && m_protectable_item_type_isValid;

    m_protection_state_isValid = ::OpenAPI::fromJsonValue(m_protection_state, json[QString("protectionState")]);
    m_protection_state_isSet = !json[QString("protectionState")].isNull() && m_protection_state_isValid;

    m_workload_type_isValid = ::OpenAPI::fromJsonValue(m_workload_type, json[QString("workloadType")]);
    m_workload_type_isSet = !json[QString("workloadType")].isNull() && m_workload_type_isValid;
}

QString OAIAzureVmWorkloadSQLDatabaseProtectableItem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAzureVmWorkloadSQLDatabaseProtectableItem::asJsonObject() const {
    QJsonObject obj;
    if (m_is_auto_protectable_isSet) {
        obj.insert(QString("isAutoProtectable"), ::OpenAPI::toJsonValue(m_is_auto_protectable));
    }
    if (m_is_auto_protected_isSet) {
        obj.insert(QString("isAutoProtected"), ::OpenAPI::toJsonValue(m_is_auto_protected));
    }
    if (m_parent_name_isSet) {
        obj.insert(QString("parentName"), ::OpenAPI::toJsonValue(m_parent_name));
    }
    if (m_parent_unique_name_isSet) {
        obj.insert(QString("parentUniqueName"), ::OpenAPI::toJsonValue(m_parent_unique_name));
    }
    if (m_prebackupvalidation.isSet()) {
        obj.insert(QString("prebackupvalidation"), ::OpenAPI::toJsonValue(m_prebackupvalidation));
    }
    if (m_server_name_isSet) {
        obj.insert(QString("serverName"), ::OpenAPI::toJsonValue(m_server_name));
    }
    if (m_subinquireditemcount_isSet) {
        obj.insert(QString("subinquireditemcount"), ::OpenAPI::toJsonValue(m_subinquireditemcount));
    }
    if (m_subprotectableitemcount_isSet) {
        obj.insert(QString("subprotectableitemcount"), ::OpenAPI::toJsonValue(m_subprotectableitemcount));
    }
    if (m_backup_management_type_isSet) {
        obj.insert(QString("backupManagementType"), ::OpenAPI::toJsonValue(m_backup_management_type));
    }
    if (m_friendly_name_isSet) {
        obj.insert(QString("friendlyName"), ::OpenAPI::toJsonValue(m_friendly_name));
    }
    if (m_protectable_item_type_isSet) {
        obj.insert(QString("protectableItemType"), ::OpenAPI::toJsonValue(m_protectable_item_type));
    }
    if (m_protection_state_isSet) {
        obj.insert(QString("protectionState"), ::OpenAPI::toJsonValue(m_protection_state));
    }
    if (m_workload_type_isSet) {
        obj.insert(QString("workloadType"), ::OpenAPI::toJsonValue(m_workload_type));
    }
    return obj;
}

bool OAIAzureVmWorkloadSQLDatabaseProtectableItem::isIsAutoProtectable() const {
    return m_is_auto_protectable;
}
void OAIAzureVmWorkloadSQLDatabaseProtectableItem::setIsAutoProtectable(const bool &is_auto_protectable) {
    m_is_auto_protectable = is_auto_protectable;
    m_is_auto_protectable_isSet = true;
}

bool OAIAzureVmWorkloadSQLDatabaseProtectableItem::is_is_auto_protectable_Set() const{
    return m_is_auto_protectable_isSet;
}

bool OAIAzureVmWorkloadSQLDatabaseProtectableItem::is_is_auto_protectable_Valid() const{
    return m_is_auto_protectable_isValid;
}

bool OAIAzureVmWorkloadSQLDatabaseProtectableItem::isIsAutoProtected() const {
    return m_is_auto_protected;
}
void OAIAzureVmWorkloadSQLDatabaseProtectableItem::setIsAutoProtected(const bool &is_auto_protected) {
    m_is_auto_protected = is_auto_protected;
    m_is_auto_protected_isSet = true;
}

bool OAIAzureVmWorkloadSQLDatabaseProtectableItem::is_is_auto_protected_Set() const{
    return m_is_auto_protected_isSet;
}

bool OAIAzureVmWorkloadSQLDatabaseProtectableItem::is_is_auto_protected_Valid() const{
    return m_is_auto_protected_isValid;
}

QString OAIAzureVmWorkloadSQLDatabaseProtectableItem::getParentName() const {
    return m_parent_name;
}
void OAIAzureVmWorkloadSQLDatabaseProtectableItem::setParentName(const QString &parent_name) {
    m_parent_name = parent_name;
    m_parent_name_isSet = true;
}

bool OAIAzureVmWorkloadSQLDatabaseProtectableItem::is_parent_name_Set() const{
    return m_parent_name_isSet;
}

bool OAIAzureVmWorkloadSQLDatabaseProtectableItem::is_parent_name_Valid() const{
    return m_parent_name_isValid;
}

QString OAIAzureVmWorkloadSQLDatabaseProtectableItem::getParentUniqueName() const {
    return m_parent_unique_name;
}
void OAIAzureVmWorkloadSQLDatabaseProtectableItem::setParentUniqueName(const QString &parent_unique_name) {
    m_parent_unique_name = parent_unique_name;
    m_parent_unique_name_isSet = true;
}

bool OAIAzureVmWorkloadSQLDatabaseProtectableItem::is_parent_unique_name_Set() const{
    return m_parent_unique_name_isSet;
}

bool OAIAzureVmWorkloadSQLDatabaseProtectableItem::is_parent_unique_name_Valid() const{
    return m_parent_unique_name_isValid;
}

OAIPreBackupValidation OAIAzureVmWorkloadSQLDatabaseProtectableItem::getPrebackupvalidation() const {
    return m_prebackupvalidation;
}
void OAIAzureVmWorkloadSQLDatabaseProtectableItem::setPrebackupvalidation(const OAIPreBackupValidation &prebackupvalidation) {
    m_prebackupvalidation = prebackupvalidation;
    m_prebackupvalidation_isSet = true;
}

bool OAIAzureVmWorkloadSQLDatabaseProtectableItem::is_prebackupvalidation_Set() const{
    return m_prebackupvalidation_isSet;
}

bool OAIAzureVmWorkloadSQLDatabaseProtectableItem::is_prebackupvalidation_Valid() const{
    return m_prebackupvalidation_isValid;
}

QString OAIAzureVmWorkloadSQLDatabaseProtectableItem::getServerName() const {
    return m_server_name;
}
void OAIAzureVmWorkloadSQLDatabaseProtectableItem::setServerName(const QString &server_name) {
    m_server_name = server_name;
    m_server_name_isSet = true;
}

bool OAIAzureVmWorkloadSQLDatabaseProtectableItem::is_server_name_Set() const{
    return m_server_name_isSet;
}

bool OAIAzureVmWorkloadSQLDatabaseProtectableItem::is_server_name_Valid() const{
    return m_server_name_isValid;
}

qint32 OAIAzureVmWorkloadSQLDatabaseProtectableItem::getSubinquireditemcount() const {
    return m_subinquireditemcount;
}
void OAIAzureVmWorkloadSQLDatabaseProtectableItem::setSubinquireditemcount(const qint32 &subinquireditemcount) {
    m_subinquireditemcount = subinquireditemcount;
    m_subinquireditemcount_isSet = true;
}

bool OAIAzureVmWorkloadSQLDatabaseProtectableItem::is_subinquireditemcount_Set() const{
    return m_subinquireditemcount_isSet;
}

bool OAIAzureVmWorkloadSQLDatabaseProtectableItem::is_subinquireditemcount_Valid() const{
    return m_subinquireditemcount_isValid;
}

qint32 OAIAzureVmWorkloadSQLDatabaseProtectableItem::getSubprotectableitemcount() const {
    return m_subprotectableitemcount;
}
void OAIAzureVmWorkloadSQLDatabaseProtectableItem::setSubprotectableitemcount(const qint32 &subprotectableitemcount) {
    m_subprotectableitemcount = subprotectableitemcount;
    m_subprotectableitemcount_isSet = true;
}

bool OAIAzureVmWorkloadSQLDatabaseProtectableItem::is_subprotectableitemcount_Set() const{
    return m_subprotectableitemcount_isSet;
}

bool OAIAzureVmWorkloadSQLDatabaseProtectableItem::is_subprotectableitemcount_Valid() const{
    return m_subprotectableitemcount_isValid;
}

QString OAIAzureVmWorkloadSQLDatabaseProtectableItem::getBackupManagementType() const {
    return m_backup_management_type;
}
void OAIAzureVmWorkloadSQLDatabaseProtectableItem::setBackupManagementType(const QString &backup_management_type) {
    m_backup_management_type = backup_management_type;
    m_backup_management_type_isSet = true;
}

bool OAIAzureVmWorkloadSQLDatabaseProtectableItem::is_backup_management_type_Set() const{
    return m_backup_management_type_isSet;
}

bool OAIAzureVmWorkloadSQLDatabaseProtectableItem::is_backup_management_type_Valid() const{
    return m_backup_management_type_isValid;
}

QString OAIAzureVmWorkloadSQLDatabaseProtectableItem::getFriendlyName() const {
    return m_friendly_name;
}
void OAIAzureVmWorkloadSQLDatabaseProtectableItem::setFriendlyName(const QString &friendly_name) {
    m_friendly_name = friendly_name;
    m_friendly_name_isSet = true;
}

bool OAIAzureVmWorkloadSQLDatabaseProtectableItem::is_friendly_name_Set() const{
    return m_friendly_name_isSet;
}

bool OAIAzureVmWorkloadSQLDatabaseProtectableItem::is_friendly_name_Valid() const{
    return m_friendly_name_isValid;
}

QString OAIAzureVmWorkloadSQLDatabaseProtectableItem::getProtectableItemType() const {
    return m_protectable_item_type;
}
void OAIAzureVmWorkloadSQLDatabaseProtectableItem::setProtectableItemType(const QString &protectable_item_type) {
    m_protectable_item_type = protectable_item_type;
    m_protectable_item_type_isSet = true;
}

bool OAIAzureVmWorkloadSQLDatabaseProtectableItem::is_protectable_item_type_Set() const{
    return m_protectable_item_type_isSet;
}

bool OAIAzureVmWorkloadSQLDatabaseProtectableItem::is_protectable_item_type_Valid() const{
    return m_protectable_item_type_isValid;
}

QString OAIAzureVmWorkloadSQLDatabaseProtectableItem::getProtectionState() const {
    return m_protection_state;
}
void OAIAzureVmWorkloadSQLDatabaseProtectableItem::setProtectionState(const QString &protection_state) {
    m_protection_state = protection_state;
    m_protection_state_isSet = true;
}

bool OAIAzureVmWorkloadSQLDatabaseProtectableItem::is_protection_state_Set() const{
    return m_protection_state_isSet;
}

bool OAIAzureVmWorkloadSQLDatabaseProtectableItem::is_protection_state_Valid() const{
    return m_protection_state_isValid;
}

QString OAIAzureVmWorkloadSQLDatabaseProtectableItem::getWorkloadType() const {
    return m_workload_type;
}
void OAIAzureVmWorkloadSQLDatabaseProtectableItem::setWorkloadType(const QString &workload_type) {
    m_workload_type = workload_type;
    m_workload_type_isSet = true;
}

bool OAIAzureVmWorkloadSQLDatabaseProtectableItem::is_workload_type_Set() const{
    return m_workload_type_isSet;
}

bool OAIAzureVmWorkloadSQLDatabaseProtectableItem::is_workload_type_Valid() const{
    return m_workload_type_isValid;
}

bool OAIAzureVmWorkloadSQLDatabaseProtectableItem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_is_auto_protectable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_auto_protected_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_unique_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prebackupvalidation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subinquireditemcount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subprotectableitemcount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_backup_management_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_friendly_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protectable_item_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protection_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_workload_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAzureVmWorkloadSQLDatabaseProtectableItem::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
