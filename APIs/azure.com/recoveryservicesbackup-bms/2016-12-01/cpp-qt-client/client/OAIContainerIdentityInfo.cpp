/**
 * RecoveryServicesBackupClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-12-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContainerIdentityInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContainerIdentityInfo::OAIContainerIdentityInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContainerIdentityInfo::OAIContainerIdentityInfo() {
    this->initializeModel();
}

OAIContainerIdentityInfo::~OAIContainerIdentityInfo() {}

void OAIContainerIdentityInfo::initializeModel() {

    m_aad_tenant_id_isSet = false;
    m_aad_tenant_id_isValid = false;

    m_audience_isSet = false;
    m_audience_isValid = false;

    m_service_principal_client_id_isSet = false;
    m_service_principal_client_id_isValid = false;

    m_unique_name_isSet = false;
    m_unique_name_isValid = false;
}

void OAIContainerIdentityInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContainerIdentityInfo::fromJsonObject(QJsonObject json) {

    m_aad_tenant_id_isValid = ::OpenAPI::fromJsonValue(m_aad_tenant_id, json[QString("aadTenantId")]);
    m_aad_tenant_id_isSet = !json[QString("aadTenantId")].isNull() && m_aad_tenant_id_isValid;

    m_audience_isValid = ::OpenAPI::fromJsonValue(m_audience, json[QString("audience")]);
    m_audience_isSet = !json[QString("audience")].isNull() && m_audience_isValid;

    m_service_principal_client_id_isValid = ::OpenAPI::fromJsonValue(m_service_principal_client_id, json[QString("servicePrincipalClientId")]);
    m_service_principal_client_id_isSet = !json[QString("servicePrincipalClientId")].isNull() && m_service_principal_client_id_isValid;

    m_unique_name_isValid = ::OpenAPI::fromJsonValue(m_unique_name, json[QString("uniqueName")]);
    m_unique_name_isSet = !json[QString("uniqueName")].isNull() && m_unique_name_isValid;
}

QString OAIContainerIdentityInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContainerIdentityInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_aad_tenant_id_isSet) {
        obj.insert(QString("aadTenantId"), ::OpenAPI::toJsonValue(m_aad_tenant_id));
    }
    if (m_audience_isSet) {
        obj.insert(QString("audience"), ::OpenAPI::toJsonValue(m_audience));
    }
    if (m_service_principal_client_id_isSet) {
        obj.insert(QString("servicePrincipalClientId"), ::OpenAPI::toJsonValue(m_service_principal_client_id));
    }
    if (m_unique_name_isSet) {
        obj.insert(QString("uniqueName"), ::OpenAPI::toJsonValue(m_unique_name));
    }
    return obj;
}

QString OAIContainerIdentityInfo::getAadTenantId() const {
    return m_aad_tenant_id;
}
void OAIContainerIdentityInfo::setAadTenantId(const QString &aad_tenant_id) {
    m_aad_tenant_id = aad_tenant_id;
    m_aad_tenant_id_isSet = true;
}

bool OAIContainerIdentityInfo::is_aad_tenant_id_Set() const{
    return m_aad_tenant_id_isSet;
}

bool OAIContainerIdentityInfo::is_aad_tenant_id_Valid() const{
    return m_aad_tenant_id_isValid;
}

QString OAIContainerIdentityInfo::getAudience() const {
    return m_audience;
}
void OAIContainerIdentityInfo::setAudience(const QString &audience) {
    m_audience = audience;
    m_audience_isSet = true;
}

bool OAIContainerIdentityInfo::is_audience_Set() const{
    return m_audience_isSet;
}

bool OAIContainerIdentityInfo::is_audience_Valid() const{
    return m_audience_isValid;
}

QString OAIContainerIdentityInfo::getServicePrincipalClientId() const {
    return m_service_principal_client_id;
}
void OAIContainerIdentityInfo::setServicePrincipalClientId(const QString &service_principal_client_id) {
    m_service_principal_client_id = service_principal_client_id;
    m_service_principal_client_id_isSet = true;
}

bool OAIContainerIdentityInfo::is_service_principal_client_id_Set() const{
    return m_service_principal_client_id_isSet;
}

bool OAIContainerIdentityInfo::is_service_principal_client_id_Valid() const{
    return m_service_principal_client_id_isValid;
}

QString OAIContainerIdentityInfo::getUniqueName() const {
    return m_unique_name;
}
void OAIContainerIdentityInfo::setUniqueName(const QString &unique_name) {
    m_unique_name = unique_name;
    m_unique_name_isSet = true;
}

bool OAIContainerIdentityInfo::is_unique_name_Set() const{
    return m_unique_name_isSet;
}

bool OAIContainerIdentityInfo::is_unique_name_Valid() const{
    return m_unique_name_isValid;
}

bool OAIContainerIdentityInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_aad_tenant_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_audience_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_principal_client_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unique_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContainerIdentityInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
