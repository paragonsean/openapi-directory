/**
 * RecoveryServicesBackupClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-12-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITokenInformation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITokenInformation::OAITokenInformation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITokenInformation::OAITokenInformation() {
    this->initializeModel();
}

OAITokenInformation::~OAITokenInformation() {}

void OAITokenInformation::initializeModel() {

    m_expiry_time_in_utc_ticks_isSet = false;
    m_expiry_time_in_utc_ticks_isValid = false;

    m_security_pin_isSet = false;
    m_security_pin_isValid = false;

    m_token_isSet = false;
    m_token_isValid = false;
}

void OAITokenInformation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITokenInformation::fromJsonObject(QJsonObject json) {

    m_expiry_time_in_utc_ticks_isValid = ::OpenAPI::fromJsonValue(m_expiry_time_in_utc_ticks, json[QString("expiryTimeInUtcTicks")]);
    m_expiry_time_in_utc_ticks_isSet = !json[QString("expiryTimeInUtcTicks")].isNull() && m_expiry_time_in_utc_ticks_isValid;

    m_security_pin_isValid = ::OpenAPI::fromJsonValue(m_security_pin, json[QString("securityPIN")]);
    m_security_pin_isSet = !json[QString("securityPIN")].isNull() && m_security_pin_isValid;

    m_token_isValid = ::OpenAPI::fromJsonValue(m_token, json[QString("token")]);
    m_token_isSet = !json[QString("token")].isNull() && m_token_isValid;
}

QString OAITokenInformation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITokenInformation::asJsonObject() const {
    QJsonObject obj;
    if (m_expiry_time_in_utc_ticks_isSet) {
        obj.insert(QString("expiryTimeInUtcTicks"), ::OpenAPI::toJsonValue(m_expiry_time_in_utc_ticks));
    }
    if (m_security_pin_isSet) {
        obj.insert(QString("securityPIN"), ::OpenAPI::toJsonValue(m_security_pin));
    }
    if (m_token_isSet) {
        obj.insert(QString("token"), ::OpenAPI::toJsonValue(m_token));
    }
    return obj;
}

qint64 OAITokenInformation::getExpiryTimeInUtcTicks() const {
    return m_expiry_time_in_utc_ticks;
}
void OAITokenInformation::setExpiryTimeInUtcTicks(const qint64 &expiry_time_in_utc_ticks) {
    m_expiry_time_in_utc_ticks = expiry_time_in_utc_ticks;
    m_expiry_time_in_utc_ticks_isSet = true;
}

bool OAITokenInformation::is_expiry_time_in_utc_ticks_Set() const{
    return m_expiry_time_in_utc_ticks_isSet;
}

bool OAITokenInformation::is_expiry_time_in_utc_ticks_Valid() const{
    return m_expiry_time_in_utc_ticks_isValid;
}

QString OAITokenInformation::getSecurityPin() const {
    return m_security_pin;
}
void OAITokenInformation::setSecurityPin(const QString &security_pin) {
    m_security_pin = security_pin;
    m_security_pin_isSet = true;
}

bool OAITokenInformation::is_security_pin_Set() const{
    return m_security_pin_isSet;
}

bool OAITokenInformation::is_security_pin_Valid() const{
    return m_security_pin_isValid;
}

QString OAITokenInformation::getToken() const {
    return m_token;
}
void OAITokenInformation::setToken(const QString &token) {
    m_token = token;
    m_token_isSet = true;
}

bool OAITokenInformation::is_token_Set() const{
    return m_token_isSet;
}

bool OAITokenInformation::is_token_Valid() const{
    return m_token_isValid;
}

bool OAITokenInformation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_expiry_time_in_utc_ticks_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_security_pin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITokenInformation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
