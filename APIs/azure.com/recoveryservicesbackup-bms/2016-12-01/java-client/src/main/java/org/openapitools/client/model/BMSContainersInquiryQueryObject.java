/*
 * RecoveryServicesBackupClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-12-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The query filters that can be used with the inquire container API.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:09:00.908826-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BMSContainersInquiryQueryObject {
  /**
   * Backup management type for this container.
   */
  @JsonAdapter(BackupManagementTypeEnum.Adapter.class)
  public enum BackupManagementTypeEnum {
    INVALID("Invalid"),
    
    AZURE_IAAS_VM("AzureIaasVM"),
    
    MAB("MAB"),
    
    DPM("DPM"),
    
    AZURE_BACKUP_SERVER("AzureBackupServer"),
    
    AZURE_SQL("AzureSql"),
    
    AZURE_STORAGE("AzureStorage"),
    
    AZURE_WORKLOAD("AzureWorkload"),
    
    DEFAULT_BACKUP("DefaultBackup");

    private String value;

    BackupManagementTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BackupManagementTypeEnum fromValue(String value) {
      for (BackupManagementTypeEnum b : BackupManagementTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BackupManagementTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BackupManagementTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BackupManagementTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BackupManagementTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      BackupManagementTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_BACKUP_MANAGEMENT_TYPE = "backupManagementType";
  @SerializedName(SERIALIZED_NAME_BACKUP_MANAGEMENT_TYPE)
  private BackupManagementTypeEnum backupManagementType;

  /**
   * Workload type for this container.
   */
  @JsonAdapter(WorkloadTypeEnum.Adapter.class)
  public enum WorkloadTypeEnum {
    INVALID("Invalid"),
    
    VM("VM"),
    
    FILE_FOLDER("FileFolder"),
    
    AZURE_SQL_DB("AzureSqlDb"),
    
    SQLDB("SQLDB"),
    
    EXCHANGE("Exchange"),
    
    SHAREPOINT("Sharepoint"),
    
    V_MWARE_VM("VMwareVM"),
    
    SYSTEM_STATE("SystemState"),
    
    CLIENT("Client"),
    
    GENERIC_DATA_SOURCE("GenericDataSource"),
    
    SQL_DATA_BASE("SQLDataBase"),
    
    AZURE_FILE_SHARE("AzureFileShare"),
    
    SAP_HANA_DATABASE("SAPHanaDatabase"),
    
    SAP_ASE_DATABASE("SAPAseDatabase");

    private String value;

    WorkloadTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static WorkloadTypeEnum fromValue(String value) {
      for (WorkloadTypeEnum b : WorkloadTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<WorkloadTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final WorkloadTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public WorkloadTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return WorkloadTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      WorkloadTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_WORKLOAD_TYPE = "workloadType";
  @SerializedName(SERIALIZED_NAME_WORKLOAD_TYPE)
  private WorkloadTypeEnum workloadType;

  public BMSContainersInquiryQueryObject() {
  }

  public BMSContainersInquiryQueryObject backupManagementType(BackupManagementTypeEnum backupManagementType) {
    this.backupManagementType = backupManagementType;
    return this;
  }

  /**
   * Backup management type for this container.
   * @return backupManagementType
   */
  @javax.annotation.Nullable
  public BackupManagementTypeEnum getBackupManagementType() {
    return backupManagementType;
  }

  public void setBackupManagementType(BackupManagementTypeEnum backupManagementType) {
    this.backupManagementType = backupManagementType;
  }


  public BMSContainersInquiryQueryObject workloadType(WorkloadTypeEnum workloadType) {
    this.workloadType = workloadType;
    return this;
  }

  /**
   * Workload type for this container.
   * @return workloadType
   */
  @javax.annotation.Nullable
  public WorkloadTypeEnum getWorkloadType() {
    return workloadType;
  }

  public void setWorkloadType(WorkloadTypeEnum workloadType) {
    this.workloadType = workloadType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BMSContainersInquiryQueryObject bmSContainersInquiryQueryObject = (BMSContainersInquiryQueryObject) o;
    return Objects.equals(this.backupManagementType, bmSContainersInquiryQueryObject.backupManagementType) &&
        Objects.equals(this.workloadType, bmSContainersInquiryQueryObject.workloadType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(backupManagementType, workloadType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BMSContainersInquiryQueryObject {\n");
    sb.append("    backupManagementType: ").append(toIndentedString(backupManagementType)).append("\n");
    sb.append("    workloadType: ").append(toIndentedString(workloadType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("backupManagementType");
    openapiFields.add("workloadType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BMSContainersInquiryQueryObject
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BMSContainersInquiryQueryObject.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BMSContainersInquiryQueryObject is not found in the empty JSON string", BMSContainersInquiryQueryObject.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BMSContainersInquiryQueryObject.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BMSContainersInquiryQueryObject` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("backupManagementType") != null && !jsonObj.get("backupManagementType").isJsonNull()) && !jsonObj.get("backupManagementType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `backupManagementType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("backupManagementType").toString()));
      }
      // validate the optional field `backupManagementType`
      if (jsonObj.get("backupManagementType") != null && !jsonObj.get("backupManagementType").isJsonNull()) {
        BackupManagementTypeEnum.validateJsonElement(jsonObj.get("backupManagementType"));
      }
      if ((jsonObj.get("workloadType") != null && !jsonObj.get("workloadType").isJsonNull()) && !jsonObj.get("workloadType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `workloadType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("workloadType").toString()));
      }
      // validate the optional field `workloadType`
      if (jsonObj.get("workloadType") != null && !jsonObj.get("workloadType").isJsonNull()) {
        WorkloadTypeEnum.validateJsonElement(jsonObj.get("workloadType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BMSContainersInquiryQueryObject.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BMSContainersInquiryQueryObject' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BMSContainersInquiryQueryObject> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BMSContainersInquiryQueryObject.class));

       return (TypeAdapter<T>) new TypeAdapter<BMSContainersInquiryQueryObject>() {
           @Override
           public void write(JsonWriter out, BMSContainersInquiryQueryObject value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BMSContainersInquiryQueryObject read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BMSContainersInquiryQueryObject given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BMSContainersInquiryQueryObject
   * @throws IOException if the JSON string is invalid with respect to BMSContainersInquiryQueryObject
   */
  public static BMSContainersInquiryQueryObject fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BMSContainersInquiryQueryObject.class);
  }

  /**
   * Convert an instance of BMSContainersInquiryQueryObject to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

