/*
 * RecoveryServicesBackupClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-12-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.AzureWorkloadContainerExtendedInfo;
import org.openapitools.client.model.ProtectionContainer;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Container for the workloads running inside Azure Compute or Classic Compute.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:09:00.908826-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AzureWorkloadContainer extends ProtectionContainer {
  public static final String SERIALIZED_NAME_EXTENDED_INFO = "extendedInfo";
  @SerializedName(SERIALIZED_NAME_EXTENDED_INFO)
  private AzureWorkloadContainerExtendedInfo extendedInfo;

  public static final String SERIALIZED_NAME_LAST_UPDATED_TIME = "lastUpdatedTime";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED_TIME)
  private OffsetDateTime lastUpdatedTime;

  /**
   * Re-Do Operation
   */
  @JsonAdapter(OperationTypeEnum.Adapter.class)
  public enum OperationTypeEnum {
    INVALID("Invalid"),
    
    REGISTER("Register"),
    
    REREGISTER("Reregister");

    private String value;

    OperationTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OperationTypeEnum fromValue(String value) {
      for (OperationTypeEnum b : OperationTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OperationTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OperationTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OperationTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OperationTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OperationTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_OPERATION_TYPE = "operationType";
  @SerializedName(SERIALIZED_NAME_OPERATION_TYPE)
  private OperationTypeEnum operationType;

  public static final String SERIALIZED_NAME_SOURCE_RESOURCE_ID = "sourceResourceId";
  @SerializedName(SERIALIZED_NAME_SOURCE_RESOURCE_ID)
  private String sourceResourceId;

  /**
   * Workload type for which registration was sent.
   */
  @JsonAdapter(WorkloadTypeEnum.Adapter.class)
  public enum WorkloadTypeEnum {
    INVALID("Invalid"),
    
    VM("VM"),
    
    FILE_FOLDER("FileFolder"),
    
    AZURE_SQL_DB("AzureSqlDb"),
    
    SQLDB("SQLDB"),
    
    EXCHANGE("Exchange"),
    
    SHAREPOINT("Sharepoint"),
    
    V_MWARE_VM("VMwareVM"),
    
    SYSTEM_STATE("SystemState"),
    
    CLIENT("Client"),
    
    GENERIC_DATA_SOURCE("GenericDataSource"),
    
    SQL_DATA_BASE("SQLDataBase"),
    
    AZURE_FILE_SHARE("AzureFileShare"),
    
    SAP_HANA_DATABASE("SAPHanaDatabase"),
    
    SAP_ASE_DATABASE("SAPAseDatabase");

    private String value;

    WorkloadTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static WorkloadTypeEnum fromValue(String value) {
      for (WorkloadTypeEnum b : WorkloadTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<WorkloadTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final WorkloadTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public WorkloadTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return WorkloadTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      WorkloadTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_WORKLOAD_TYPE = "workloadType";
  @SerializedName(SERIALIZED_NAME_WORKLOAD_TYPE)
  private WorkloadTypeEnum workloadType;

  public AzureWorkloadContainer() {
    this.containerType = this.getClass().getSimpleName();
  }

  public AzureWorkloadContainer extendedInfo(AzureWorkloadContainerExtendedInfo extendedInfo) {
    this.extendedInfo = extendedInfo;
    return this;
  }

  /**
   * Get extendedInfo
   * @return extendedInfo
   */
  @javax.annotation.Nullable
  public AzureWorkloadContainerExtendedInfo getExtendedInfo() {
    return extendedInfo;
  }

  public void setExtendedInfo(AzureWorkloadContainerExtendedInfo extendedInfo) {
    this.extendedInfo = extendedInfo;
  }


  public AzureWorkloadContainer lastUpdatedTime(OffsetDateTime lastUpdatedTime) {
    this.lastUpdatedTime = lastUpdatedTime;
    return this;
  }

  /**
   * Time stamp when this container was updated.
   * @return lastUpdatedTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastUpdatedTime() {
    return lastUpdatedTime;
  }

  public void setLastUpdatedTime(OffsetDateTime lastUpdatedTime) {
    this.lastUpdatedTime = lastUpdatedTime;
  }


  public AzureWorkloadContainer operationType(OperationTypeEnum operationType) {
    this.operationType = operationType;
    return this;
  }

  /**
   * Re-Do Operation
   * @return operationType
   */
  @javax.annotation.Nullable
  public OperationTypeEnum getOperationType() {
    return operationType;
  }

  public void setOperationType(OperationTypeEnum operationType) {
    this.operationType = operationType;
  }


  public AzureWorkloadContainer sourceResourceId(String sourceResourceId) {
    this.sourceResourceId = sourceResourceId;
    return this;
  }

  /**
   * ARM ID of the virtual machine represented by this Azure Workload Container
   * @return sourceResourceId
   */
  @javax.annotation.Nullable
  public String getSourceResourceId() {
    return sourceResourceId;
  }

  public void setSourceResourceId(String sourceResourceId) {
    this.sourceResourceId = sourceResourceId;
  }


  public AzureWorkloadContainer workloadType(WorkloadTypeEnum workloadType) {
    this.workloadType = workloadType;
    return this;
  }

  /**
   * Workload type for which registration was sent.
   * @return workloadType
   */
  @javax.annotation.Nullable
  public WorkloadTypeEnum getWorkloadType() {
    return workloadType;
  }

  public void setWorkloadType(WorkloadTypeEnum workloadType) {
    this.workloadType = workloadType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AzureWorkloadContainer azureWorkloadContainer = (AzureWorkloadContainer) o;
    return Objects.equals(this.extendedInfo, azureWorkloadContainer.extendedInfo) &&
        Objects.equals(this.lastUpdatedTime, azureWorkloadContainer.lastUpdatedTime) &&
        Objects.equals(this.operationType, azureWorkloadContainer.operationType) &&
        Objects.equals(this.sourceResourceId, azureWorkloadContainer.sourceResourceId) &&
        Objects.equals(this.workloadType, azureWorkloadContainer.workloadType) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(extendedInfo, lastUpdatedTime, operationType, sourceResourceId, workloadType, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AzureWorkloadContainer {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    extendedInfo: ").append(toIndentedString(extendedInfo)).append("\n");
    sb.append("    lastUpdatedTime: ").append(toIndentedString(lastUpdatedTime)).append("\n");
    sb.append("    operationType: ").append(toIndentedString(operationType)).append("\n");
    sb.append("    sourceResourceId: ").append(toIndentedString(sourceResourceId)).append("\n");
    sb.append("    workloadType: ").append(toIndentedString(workloadType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("backupManagementType");
    openapiFields.add("containerType");
    openapiFields.add("friendlyName");
    openapiFields.add("healthStatus");
    openapiFields.add("registrationStatus");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AzureWorkloadContainer
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AzureWorkloadContainer.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AzureWorkloadContainer is not found in the empty JSON string", AzureWorkloadContainer.openapiRequiredFields.toString()));
        }
      }

      String discriminatorValue = jsonElement.getAsJsonObject().get("containerType").getAsString();
      switch (discriminatorValue) {
        case "AzureSQLAGWorkloadContainerProtectionContainer":
          AzureSQLAGWorkloadContainerProtectionContainer.validateJsonElement(jsonElement);
          break;
        case "AzureVMAppContainerProtectionContainer":
          AzureVMAppContainerProtectionContainer.validateJsonElement(jsonElement);
          break;
        default:
          throw new IllegalArgumentException(String.format("The value of the `containerType` field `%s` does not match any key defined in the discriminator's mapping.", discriminatorValue));
      }
  }


  /**
   * Create an instance of AzureWorkloadContainer given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AzureWorkloadContainer
   * @throws IOException if the JSON string is invalid with respect to AzureWorkloadContainer
   */
  public static AzureWorkloadContainer fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AzureWorkloadContainer.class);
  }

  /**
   * Convert an instance of AzureWorkloadContainer to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

