/*
 * RecoveryServicesBackupClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-12-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Additional information on backup engine.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:09:00.908826-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BackupEngineExtendedInfo {
  public static final String SERIALIZED_NAME_AVAILABLE_DISK_SPACE = "availableDiskSpace";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_DISK_SPACE)
  private Double availableDiskSpace;

  public static final String SERIALIZED_NAME_AZURE_PROTECTED_INSTANCES = "azureProtectedInstances";
  @SerializedName(SERIALIZED_NAME_AZURE_PROTECTED_INSTANCES)
  private Integer azureProtectedInstances;

  public static final String SERIALIZED_NAME_DATABASE_NAME = "databaseName";
  @SerializedName(SERIALIZED_NAME_DATABASE_NAME)
  private String databaseName;

  public static final String SERIALIZED_NAME_DISK_COUNT = "diskCount";
  @SerializedName(SERIALIZED_NAME_DISK_COUNT)
  private Integer diskCount;

  public static final String SERIALIZED_NAME_PROTECTED_ITEMS_COUNT = "protectedItemsCount";
  @SerializedName(SERIALIZED_NAME_PROTECTED_ITEMS_COUNT)
  private Integer protectedItemsCount;

  public static final String SERIALIZED_NAME_PROTECTED_SERVERS_COUNT = "protectedServersCount";
  @SerializedName(SERIALIZED_NAME_PROTECTED_SERVERS_COUNT)
  private Integer protectedServersCount;

  public static final String SERIALIZED_NAME_REFRESHED_AT = "refreshedAt";
  @SerializedName(SERIALIZED_NAME_REFRESHED_AT)
  private OffsetDateTime refreshedAt;

  public static final String SERIALIZED_NAME_USED_DISK_SPACE = "usedDiskSpace";
  @SerializedName(SERIALIZED_NAME_USED_DISK_SPACE)
  private Double usedDiskSpace;

  public BackupEngineExtendedInfo() {
  }

  public BackupEngineExtendedInfo availableDiskSpace(Double availableDiskSpace) {
    this.availableDiskSpace = availableDiskSpace;
    return this;
  }

  /**
   * Disk space currently available in the backup engine.
   * @return availableDiskSpace
   */
  @javax.annotation.Nullable
  public Double getAvailableDiskSpace() {
    return availableDiskSpace;
  }

  public void setAvailableDiskSpace(Double availableDiskSpace) {
    this.availableDiskSpace = availableDiskSpace;
  }


  public BackupEngineExtendedInfo azureProtectedInstances(Integer azureProtectedInstances) {
    this.azureProtectedInstances = azureProtectedInstances;
    return this;
  }

  /**
   * Protected instances in the backup engine.
   * @return azureProtectedInstances
   */
  @javax.annotation.Nullable
  public Integer getAzureProtectedInstances() {
    return azureProtectedInstances;
  }

  public void setAzureProtectedInstances(Integer azureProtectedInstances) {
    this.azureProtectedInstances = azureProtectedInstances;
  }


  public BackupEngineExtendedInfo databaseName(String databaseName) {
    this.databaseName = databaseName;
    return this;
  }

  /**
   * Database name of backup engine.
   * @return databaseName
   */
  @javax.annotation.Nullable
  public String getDatabaseName() {
    return databaseName;
  }

  public void setDatabaseName(String databaseName) {
    this.databaseName = databaseName;
  }


  public BackupEngineExtendedInfo diskCount(Integer diskCount) {
    this.diskCount = diskCount;
    return this;
  }

  /**
   * Number of disks in the backup engine.
   * @return diskCount
   */
  @javax.annotation.Nullable
  public Integer getDiskCount() {
    return diskCount;
  }

  public void setDiskCount(Integer diskCount) {
    this.diskCount = diskCount;
  }


  public BackupEngineExtendedInfo protectedItemsCount(Integer protectedItemsCount) {
    this.protectedItemsCount = protectedItemsCount;
    return this;
  }

  /**
   * Number of protected items in the backup engine.
   * @return protectedItemsCount
   */
  @javax.annotation.Nullable
  public Integer getProtectedItemsCount() {
    return protectedItemsCount;
  }

  public void setProtectedItemsCount(Integer protectedItemsCount) {
    this.protectedItemsCount = protectedItemsCount;
  }


  public BackupEngineExtendedInfo protectedServersCount(Integer protectedServersCount) {
    this.protectedServersCount = protectedServersCount;
    return this;
  }

  /**
   * Number of protected servers in the backup engine.
   * @return protectedServersCount
   */
  @javax.annotation.Nullable
  public Integer getProtectedServersCount() {
    return protectedServersCount;
  }

  public void setProtectedServersCount(Integer protectedServersCount) {
    this.protectedServersCount = protectedServersCount;
  }


  public BackupEngineExtendedInfo refreshedAt(OffsetDateTime refreshedAt) {
    this.refreshedAt = refreshedAt;
    return this;
  }

  /**
   * Last refresh time in the backup engine.
   * @return refreshedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getRefreshedAt() {
    return refreshedAt;
  }

  public void setRefreshedAt(OffsetDateTime refreshedAt) {
    this.refreshedAt = refreshedAt;
  }


  public BackupEngineExtendedInfo usedDiskSpace(Double usedDiskSpace) {
    this.usedDiskSpace = usedDiskSpace;
    return this;
  }

  /**
   * Disk space used in the backup engine.
   * @return usedDiskSpace
   */
  @javax.annotation.Nullable
  public Double getUsedDiskSpace() {
    return usedDiskSpace;
  }

  public void setUsedDiskSpace(Double usedDiskSpace) {
    this.usedDiskSpace = usedDiskSpace;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BackupEngineExtendedInfo backupEngineExtendedInfo = (BackupEngineExtendedInfo) o;
    return Objects.equals(this.availableDiskSpace, backupEngineExtendedInfo.availableDiskSpace) &&
        Objects.equals(this.azureProtectedInstances, backupEngineExtendedInfo.azureProtectedInstances) &&
        Objects.equals(this.databaseName, backupEngineExtendedInfo.databaseName) &&
        Objects.equals(this.diskCount, backupEngineExtendedInfo.diskCount) &&
        Objects.equals(this.protectedItemsCount, backupEngineExtendedInfo.protectedItemsCount) &&
        Objects.equals(this.protectedServersCount, backupEngineExtendedInfo.protectedServersCount) &&
        Objects.equals(this.refreshedAt, backupEngineExtendedInfo.refreshedAt) &&
        Objects.equals(this.usedDiskSpace, backupEngineExtendedInfo.usedDiskSpace);
  }

  @Override
  public int hashCode() {
    return Objects.hash(availableDiskSpace, azureProtectedInstances, databaseName, diskCount, protectedItemsCount, protectedServersCount, refreshedAt, usedDiskSpace);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BackupEngineExtendedInfo {\n");
    sb.append("    availableDiskSpace: ").append(toIndentedString(availableDiskSpace)).append("\n");
    sb.append("    azureProtectedInstances: ").append(toIndentedString(azureProtectedInstances)).append("\n");
    sb.append("    databaseName: ").append(toIndentedString(databaseName)).append("\n");
    sb.append("    diskCount: ").append(toIndentedString(diskCount)).append("\n");
    sb.append("    protectedItemsCount: ").append(toIndentedString(protectedItemsCount)).append("\n");
    sb.append("    protectedServersCount: ").append(toIndentedString(protectedServersCount)).append("\n");
    sb.append("    refreshedAt: ").append(toIndentedString(refreshedAt)).append("\n");
    sb.append("    usedDiskSpace: ").append(toIndentedString(usedDiskSpace)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("availableDiskSpace");
    openapiFields.add("azureProtectedInstances");
    openapiFields.add("databaseName");
    openapiFields.add("diskCount");
    openapiFields.add("protectedItemsCount");
    openapiFields.add("protectedServersCount");
    openapiFields.add("refreshedAt");
    openapiFields.add("usedDiskSpace");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BackupEngineExtendedInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BackupEngineExtendedInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BackupEngineExtendedInfo is not found in the empty JSON string", BackupEngineExtendedInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BackupEngineExtendedInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BackupEngineExtendedInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("databaseName") != null && !jsonObj.get("databaseName").isJsonNull()) && !jsonObj.get("databaseName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `databaseName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("databaseName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BackupEngineExtendedInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BackupEngineExtendedInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BackupEngineExtendedInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BackupEngineExtendedInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<BackupEngineExtendedInfo>() {
           @Override
           public void write(JsonWriter out, BackupEngineExtendedInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BackupEngineExtendedInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BackupEngineExtendedInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BackupEngineExtendedInfo
   * @throws IOException if the JSON string is invalid with respect to BackupEngineExtendedInfo
   */
  public static BackupEngineExtendedInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BackupEngineExtendedInfo.class);
  }

  /**
   * Convert an instance of BackupEngineExtendedInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

