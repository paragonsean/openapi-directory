/*
 * RecoveryServicesBackupClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-12-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DPMContainerExtendedInfo;
import org.openapitools.client.model.ProtectionContainer;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DPM workload-specific protection container.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:09:00.908826-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DpmContainer extends ProtectionContainer {
  public static final String SERIALIZED_NAME_CAN_RE_REGISTER = "canReRegister";
  @SerializedName(SERIALIZED_NAME_CAN_RE_REGISTER)
  private Boolean canReRegister;

  public static final String SERIALIZED_NAME_CONTAINER_ID = "containerId";
  @SerializedName(SERIALIZED_NAME_CONTAINER_ID)
  private String containerId;

  public static final String SERIALIZED_NAME_DPM_AGENT_VERSION = "dpmAgentVersion";
  @SerializedName(SERIALIZED_NAME_DPM_AGENT_VERSION)
  private String dpmAgentVersion;

  public static final String SERIALIZED_NAME_DPM_SERVERS = "dpmServers";
  @SerializedName(SERIALIZED_NAME_DPM_SERVERS)
  private List<String> dpmServers = new ArrayList<>();

  public static final String SERIALIZED_NAME_EXTENDED_INFO = "extendedInfo";
  @SerializedName(SERIALIZED_NAME_EXTENDED_INFO)
  private DPMContainerExtendedInfo extendedInfo;

  public static final String SERIALIZED_NAME_PROTECTED_ITEM_COUNT = "protectedItemCount";
  @SerializedName(SERIALIZED_NAME_PROTECTED_ITEM_COUNT)
  private Long protectedItemCount;

  public static final String SERIALIZED_NAME_PROTECTION_STATUS = "protectionStatus";
  @SerializedName(SERIALIZED_NAME_PROTECTION_STATUS)
  private String protectionStatus;

  public static final String SERIALIZED_NAME_UPGRADE_AVAILABLE = "upgradeAvailable";
  @SerializedName(SERIALIZED_NAME_UPGRADE_AVAILABLE)
  private Boolean upgradeAvailable;

  public DpmContainer() {
    this.containerType = this.getClass().getSimpleName();
  }

  public DpmContainer canReRegister(Boolean canReRegister) {
    this.canReRegister = canReRegister;
    return this;
  }

  /**
   * Specifies whether the container is re-registrable.
   * @return canReRegister
   */
  @javax.annotation.Nullable
  public Boolean getCanReRegister() {
    return canReRegister;
  }

  public void setCanReRegister(Boolean canReRegister) {
    this.canReRegister = canReRegister;
  }


  public DpmContainer containerId(String containerId) {
    this.containerId = containerId;
    return this;
  }

  /**
   * ID of container.
   * @return containerId
   */
  @javax.annotation.Nullable
  public String getContainerId() {
    return containerId;
  }

  public void setContainerId(String containerId) {
    this.containerId = containerId;
  }


  public DpmContainer dpmAgentVersion(String dpmAgentVersion) {
    this.dpmAgentVersion = dpmAgentVersion;
    return this;
  }

  /**
   * Backup engine Agent version
   * @return dpmAgentVersion
   */
  @javax.annotation.Nullable
  public String getDpmAgentVersion() {
    return dpmAgentVersion;
  }

  public void setDpmAgentVersion(String dpmAgentVersion) {
    this.dpmAgentVersion = dpmAgentVersion;
  }


  public DpmContainer dpmServers(List<String> dpmServers) {
    this.dpmServers = dpmServers;
    return this;
  }

  public DpmContainer addDpmServersItem(String dpmServersItem) {
    if (this.dpmServers == null) {
      this.dpmServers = new ArrayList<>();
    }
    this.dpmServers.add(dpmServersItem);
    return this;
  }

  /**
   * List of BackupEngines protecting the container
   * @return dpmServers
   */
  @javax.annotation.Nullable
  public List<String> getDpmServers() {
    return dpmServers;
  }

  public void setDpmServers(List<String> dpmServers) {
    this.dpmServers = dpmServers;
  }


  public DpmContainer extendedInfo(DPMContainerExtendedInfo extendedInfo) {
    this.extendedInfo = extendedInfo;
    return this;
  }

  /**
   * Get extendedInfo
   * @return extendedInfo
   */
  @javax.annotation.Nullable
  public DPMContainerExtendedInfo getExtendedInfo() {
    return extendedInfo;
  }

  public void setExtendedInfo(DPMContainerExtendedInfo extendedInfo) {
    this.extendedInfo = extendedInfo;
  }


  public DpmContainer protectedItemCount(Long protectedItemCount) {
    this.protectedItemCount = protectedItemCount;
    return this;
  }

  /**
   * Number of protected items in the BackupEngine
   * @return protectedItemCount
   */
  @javax.annotation.Nullable
  public Long getProtectedItemCount() {
    return protectedItemCount;
  }

  public void setProtectedItemCount(Long protectedItemCount) {
    this.protectedItemCount = protectedItemCount;
  }


  public DpmContainer protectionStatus(String protectionStatus) {
    this.protectionStatus = protectionStatus;
    return this;
  }

  /**
   * Protection status of the container.
   * @return protectionStatus
   */
  @javax.annotation.Nullable
  public String getProtectionStatus() {
    return protectionStatus;
  }

  public void setProtectionStatus(String protectionStatus) {
    this.protectionStatus = protectionStatus;
  }


  public DpmContainer upgradeAvailable(Boolean upgradeAvailable) {
    this.upgradeAvailable = upgradeAvailable;
    return this;
  }

  /**
   * To check if upgrade available
   * @return upgradeAvailable
   */
  @javax.annotation.Nullable
  public Boolean getUpgradeAvailable() {
    return upgradeAvailable;
  }

  public void setUpgradeAvailable(Boolean upgradeAvailable) {
    this.upgradeAvailable = upgradeAvailable;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DpmContainer dpmContainer = (DpmContainer) o;
    return Objects.equals(this.canReRegister, dpmContainer.canReRegister) &&
        Objects.equals(this.containerId, dpmContainer.containerId) &&
        Objects.equals(this.dpmAgentVersion, dpmContainer.dpmAgentVersion) &&
        Objects.equals(this.dpmServers, dpmContainer.dpmServers) &&
        Objects.equals(this.extendedInfo, dpmContainer.extendedInfo) &&
        Objects.equals(this.protectedItemCount, dpmContainer.protectedItemCount) &&
        Objects.equals(this.protectionStatus, dpmContainer.protectionStatus) &&
        Objects.equals(this.upgradeAvailable, dpmContainer.upgradeAvailable) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(canReRegister, containerId, dpmAgentVersion, dpmServers, extendedInfo, protectedItemCount, protectionStatus, upgradeAvailable, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DpmContainer {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    canReRegister: ").append(toIndentedString(canReRegister)).append("\n");
    sb.append("    containerId: ").append(toIndentedString(containerId)).append("\n");
    sb.append("    dpmAgentVersion: ").append(toIndentedString(dpmAgentVersion)).append("\n");
    sb.append("    dpmServers: ").append(toIndentedString(dpmServers)).append("\n");
    sb.append("    extendedInfo: ").append(toIndentedString(extendedInfo)).append("\n");
    sb.append("    protectedItemCount: ").append(toIndentedString(protectedItemCount)).append("\n");
    sb.append("    protectionStatus: ").append(toIndentedString(protectionStatus)).append("\n");
    sb.append("    upgradeAvailable: ").append(toIndentedString(upgradeAvailable)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("backupManagementType");
    openapiFields.add("containerType");
    openapiFields.add("friendlyName");
    openapiFields.add("healthStatus");
    openapiFields.add("registrationStatus");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DpmContainer
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DpmContainer.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DpmContainer is not found in the empty JSON string", DpmContainer.openapiRequiredFields.toString()));
        }
      }

      String discriminatorValue = jsonElement.getAsJsonObject().get("containerType").getAsString();
      switch (discriminatorValue) {
        case "AzureBackupServerContainer":
          AzureBackupServerContainer.validateJsonElement(jsonElement);
          break;
        default:
          throw new IllegalArgumentException(String.format("The value of the `containerType` field `%s` does not match any key defined in the discriminator's mapping.", discriminatorValue));
      }
  }


  /**
   * Create an instance of DpmContainer given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DpmContainer
   * @throws IOException if the JSON string is invalid with respect to DpmContainer
   */
  public static DpmContainer fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DpmContainer.class);
  }

  /**
   * Convert an instance of DpmContainer to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

