/*
 * RecoveryServicesBackupClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-12-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Protectable Container Class.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:09:00.908826-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ProtectableContainer {
  /**
   * Type of backup management for the container.
   */
  @JsonAdapter(BackupManagementTypeEnum.Adapter.class)
  public enum BackupManagementTypeEnum {
    INVALID("Invalid"),
    
    AZURE_IAAS_VM("AzureIaasVM"),
    
    MAB("MAB"),
    
    DPM("DPM"),
    
    AZURE_BACKUP_SERVER("AzureBackupServer"),
    
    AZURE_SQL("AzureSql"),
    
    AZURE_STORAGE("AzureStorage"),
    
    AZURE_WORKLOAD("AzureWorkload"),
    
    DEFAULT_BACKUP("DefaultBackup");

    private String value;

    BackupManagementTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BackupManagementTypeEnum fromValue(String value) {
      for (BackupManagementTypeEnum b : BackupManagementTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BackupManagementTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BackupManagementTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BackupManagementTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BackupManagementTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      BackupManagementTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_BACKUP_MANAGEMENT_TYPE = "backupManagementType";
  @SerializedName(SERIALIZED_NAME_BACKUP_MANAGEMENT_TYPE)
  private BackupManagementTypeEnum backupManagementType;

  public static final String SERIALIZED_NAME_CONTAINER_ID = "containerId";
  @SerializedName(SERIALIZED_NAME_CONTAINER_ID)
  private String containerId;

  public static final String SERIALIZED_NAME_FRIENDLY_NAME = "friendlyName";
  @SerializedName(SERIALIZED_NAME_FRIENDLY_NAME)
  private String friendlyName;

  public static final String SERIALIZED_NAME_HEALTH_STATUS = "healthStatus";
  @SerializedName(SERIALIZED_NAME_HEALTH_STATUS)
  private String healthStatus;

  /**
   * Type of the container. The value of this property for  1. Compute Azure VM is Microsoft.Compute/virtualMachines  2. Classic Compute Azure VM is Microsoft.ClassicCompute/virtualMachines
   */
  @JsonAdapter(ProtectableContainerTypeEnum.Adapter.class)
  public enum ProtectableContainerTypeEnum {
    INVALID("Invalid"),
    
    UNKNOWN("Unknown"),
    
    IAAS_VM_CONTAINER("IaasVMContainer"),
    
    IAAS_VM_SERVICE_CONTAINER("IaasVMServiceContainer"),
    
    DPM_CONTAINER("DPMContainer"),
    
    AZURE_BACKUP_SERVER_CONTAINER("AzureBackupServerContainer"),
    
    MAB_CONTAINER("MABContainer"),
    
    CLUSTER("Cluster"),
    
    AZURE_SQL_CONTAINER("AzureSqlContainer"),
    
    WINDOWS("Windows"),
    
    V_CENTER("VCenter"),
    
    VM_APP_CONTAINER("VMAppContainer"),
    
    SQLAG_WORK_LOAD_CONTAINER("SQLAGWorkLoadContainer"),
    
    STORAGE_CONTAINER("StorageContainer"),
    
    GENERIC_CONTAINER("GenericContainer");

    private String value;

    ProtectableContainerTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProtectableContainerTypeEnum fromValue(String value) {
      for (ProtectableContainerTypeEnum b : ProtectableContainerTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProtectableContainerTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProtectableContainerTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProtectableContainerTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProtectableContainerTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProtectableContainerTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROTECTABLE_CONTAINER_TYPE = "protectableContainerType";
  @SerializedName(SERIALIZED_NAME_PROTECTABLE_CONTAINER_TYPE)
  protected ProtectableContainerTypeEnum protectableContainerType;

  public ProtectableContainer() {
  }

  public ProtectableContainer(
     ProtectableContainerTypeEnum protectableContainerType
  ) {
    this();
    this.protectableContainerType = protectableContainerType;
  }

  public ProtectableContainer backupManagementType(BackupManagementTypeEnum backupManagementType) {
    this.backupManagementType = backupManagementType;
    return this;
  }

  /**
   * Type of backup management for the container.
   * @return backupManagementType
   */
  @javax.annotation.Nullable
  public BackupManagementTypeEnum getBackupManagementType() {
    return backupManagementType;
  }

  public void setBackupManagementType(BackupManagementTypeEnum backupManagementType) {
    this.backupManagementType = backupManagementType;
  }


  public ProtectableContainer containerId(String containerId) {
    this.containerId = containerId;
    return this;
  }

  /**
   * Fabric Id of the container such as ARM Id.
   * @return containerId
   */
  @javax.annotation.Nullable
  public String getContainerId() {
    return containerId;
  }

  public void setContainerId(String containerId) {
    this.containerId = containerId;
  }


  public ProtectableContainer friendlyName(String friendlyName) {
    this.friendlyName = friendlyName;
    return this;
  }

  /**
   * Friendly name of the container.
   * @return friendlyName
   */
  @javax.annotation.Nullable
  public String getFriendlyName() {
    return friendlyName;
  }

  public void setFriendlyName(String friendlyName) {
    this.friendlyName = friendlyName;
  }


  public ProtectableContainer healthStatus(String healthStatus) {
    this.healthStatus = healthStatus;
    return this;
  }

  /**
   * Status of health of the container.
   * @return healthStatus
   */
  @javax.annotation.Nullable
  public String getHealthStatus() {
    return healthStatus;
  }

  public void setHealthStatus(String healthStatus) {
    this.healthStatus = healthStatus;
  }


  /**
   * Type of the container. The value of this property for  1. Compute Azure VM is Microsoft.Compute/virtualMachines  2. Classic Compute Azure VM is Microsoft.ClassicCompute/virtualMachines
   * @return protectableContainerType
   */
  @javax.annotation.Nullable
  public ProtectableContainerTypeEnum getProtectableContainerType() {
    return protectableContainerType;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProtectableContainer protectableContainer = (ProtectableContainer) o;
    return Objects.equals(this.backupManagementType, protectableContainer.backupManagementType) &&
        Objects.equals(this.containerId, protectableContainer.containerId) &&
        Objects.equals(this.friendlyName, protectableContainer.friendlyName) &&
        Objects.equals(this.healthStatus, protectableContainer.healthStatus) &&
        Objects.equals(this.protectableContainerType, protectableContainer.protectableContainerType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(backupManagementType, containerId, friendlyName, healthStatus, protectableContainerType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProtectableContainer {\n");
    sb.append("    backupManagementType: ").append(toIndentedString(backupManagementType)).append("\n");
    sb.append("    containerId: ").append(toIndentedString(containerId)).append("\n");
    sb.append("    friendlyName: ").append(toIndentedString(friendlyName)).append("\n");
    sb.append("    healthStatus: ").append(toIndentedString(healthStatus)).append("\n");
    sb.append("    protectableContainerType: ").append(toIndentedString(protectableContainerType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("backupManagementType");
    openapiFields.add("containerId");
    openapiFields.add("friendlyName");
    openapiFields.add("healthStatus");
    openapiFields.add("protectableContainerType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProtectableContainer
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProtectableContainer.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProtectableContainer is not found in the empty JSON string", ProtectableContainer.openapiRequiredFields.toString()));
        }
      }

      String discriminatorValue = jsonElement.getAsJsonObject().get("protectableContainerType").getAsString();
      switch (discriminatorValue) {
        case "AzureStorageProtectableContainer":
          AzureStorageProtectableContainer.validateJsonElement(jsonElement);
          break;
        case "AzureVMAppContainerProtectableContainer":
          AzureVMAppContainerProtectableContainer.validateJsonElement(jsonElement);
          break;
        default:
          throw new IllegalArgumentException(String.format("The value of the `protectableContainerType` field `%s` does not match any key defined in the discriminator's mapping.", discriminatorValue));
      }
  }


  /**
   * Create an instance of ProtectableContainer given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProtectableContainer
   * @throws IOException if the JSON string is invalid with respect to ProtectableContainer
   */
  public static ProtectableContainer fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProtectableContainer.class);
  }

  /**
   * Convert an instance of ProtectableContainer to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

