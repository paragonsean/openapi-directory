/*
 * RecoveryServicesBackupClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-12-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Client script details for file / folder restore.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:09:00.908826-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ClientScriptForConnect {
  public static final String SERIALIZED_NAME_OS_TYPE = "osType";
  @SerializedName(SERIALIZED_NAME_OS_TYPE)
  private String osType;

  public static final String SERIALIZED_NAME_SCRIPT_CONTENT = "scriptContent";
  @SerializedName(SERIALIZED_NAME_SCRIPT_CONTENT)
  private String scriptContent;

  public static final String SERIALIZED_NAME_SCRIPT_EXTENSION = "scriptExtension";
  @SerializedName(SERIALIZED_NAME_SCRIPT_EXTENSION)
  private String scriptExtension;

  public static final String SERIALIZED_NAME_SCRIPT_NAME_SUFFIX = "scriptNameSuffix";
  @SerializedName(SERIALIZED_NAME_SCRIPT_NAME_SUFFIX)
  private String scriptNameSuffix;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public ClientScriptForConnect() {
  }

  public ClientScriptForConnect osType(String osType) {
    this.osType = osType;
    return this;
  }

  /**
   * OS type - Windows, Linux etc. for which this file / folder restore client script works.
   * @return osType
   */
  @javax.annotation.Nullable
  public String getOsType() {
    return osType;
  }

  public void setOsType(String osType) {
    this.osType = osType;
  }


  public ClientScriptForConnect scriptContent(String scriptContent) {
    this.scriptContent = scriptContent;
    return this;
  }

  /**
   * File content of the client script for file / folder restore.
   * @return scriptContent
   */
  @javax.annotation.Nullable
  public String getScriptContent() {
    return scriptContent;
  }

  public void setScriptContent(String scriptContent) {
    this.scriptContent = scriptContent;
  }


  public ClientScriptForConnect scriptExtension(String scriptExtension) {
    this.scriptExtension = scriptExtension;
    return this;
  }

  /**
   * File extension of the client script for file / folder restore - .ps1 , .sh , etc.
   * @return scriptExtension
   */
  @javax.annotation.Nullable
  public String getScriptExtension() {
    return scriptExtension;
  }

  public void setScriptExtension(String scriptExtension) {
    this.scriptExtension = scriptExtension;
  }


  public ClientScriptForConnect scriptNameSuffix(String scriptNameSuffix) {
    this.scriptNameSuffix = scriptNameSuffix;
    return this;
  }

  /**
   * Mandatory suffix that should be added to the name of script that is given for download to user.  If its null or empty then , ignore it.
   * @return scriptNameSuffix
   */
  @javax.annotation.Nullable
  public String getScriptNameSuffix() {
    return scriptNameSuffix;
  }

  public void setScriptNameSuffix(String scriptNameSuffix) {
    this.scriptNameSuffix = scriptNameSuffix;
  }


  public ClientScriptForConnect url(String url) {
    this.url = url;
    return this;
  }

  /**
   * URL of Executable from where to source the content. If this is not null then ScriptContent should not be used
   * @return url
   */
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ClientScriptForConnect clientScriptForConnect = (ClientScriptForConnect) o;
    return Objects.equals(this.osType, clientScriptForConnect.osType) &&
        Objects.equals(this.scriptContent, clientScriptForConnect.scriptContent) &&
        Objects.equals(this.scriptExtension, clientScriptForConnect.scriptExtension) &&
        Objects.equals(this.scriptNameSuffix, clientScriptForConnect.scriptNameSuffix) &&
        Objects.equals(this.url, clientScriptForConnect.url);
  }

  @Override
  public int hashCode() {
    return Objects.hash(osType, scriptContent, scriptExtension, scriptNameSuffix, url);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ClientScriptForConnect {\n");
    sb.append("    osType: ").append(toIndentedString(osType)).append("\n");
    sb.append("    scriptContent: ").append(toIndentedString(scriptContent)).append("\n");
    sb.append("    scriptExtension: ").append(toIndentedString(scriptExtension)).append("\n");
    sb.append("    scriptNameSuffix: ").append(toIndentedString(scriptNameSuffix)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("osType");
    openapiFields.add("scriptContent");
    openapiFields.add("scriptExtension");
    openapiFields.add("scriptNameSuffix");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ClientScriptForConnect
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ClientScriptForConnect.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ClientScriptForConnect is not found in the empty JSON string", ClientScriptForConnect.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ClientScriptForConnect.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ClientScriptForConnect` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("osType") != null && !jsonObj.get("osType").isJsonNull()) && !jsonObj.get("osType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `osType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("osType").toString()));
      }
      if ((jsonObj.get("scriptContent") != null && !jsonObj.get("scriptContent").isJsonNull()) && !jsonObj.get("scriptContent").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scriptContent` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scriptContent").toString()));
      }
      if ((jsonObj.get("scriptExtension") != null && !jsonObj.get("scriptExtension").isJsonNull()) && !jsonObj.get("scriptExtension").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scriptExtension` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scriptExtension").toString()));
      }
      if ((jsonObj.get("scriptNameSuffix") != null && !jsonObj.get("scriptNameSuffix").isJsonNull()) && !jsonObj.get("scriptNameSuffix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scriptNameSuffix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scriptNameSuffix").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ClientScriptForConnect.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ClientScriptForConnect' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ClientScriptForConnect> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ClientScriptForConnect.class));

       return (TypeAdapter<T>) new TypeAdapter<ClientScriptForConnect>() {
           @Override
           public void write(JsonWriter out, ClientScriptForConnect value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ClientScriptForConnect read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ClientScriptForConnect given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ClientScriptForConnect
   * @throws IOException if the JSON string is invalid with respect to ClientScriptForConnect
   */
  public static ClientScriptForConnect fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ClientScriptForConnect.class);
  }

  /**
   * Convert an instance of ClientScriptForConnect to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

