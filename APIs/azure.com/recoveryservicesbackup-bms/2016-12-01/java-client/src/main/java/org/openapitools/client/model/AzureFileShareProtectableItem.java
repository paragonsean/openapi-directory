/*
 * RecoveryServicesBackupClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-12-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.WorkloadProtectableItem;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Protectable item for Azure Fileshare workloads.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:09:00.908826-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AzureFileShareProtectableItem extends WorkloadProtectableItem {
  /**
   * File Share type XSync or XSMB.
   */
  @JsonAdapter(AzureFileShareTypeEnum.Adapter.class)
  public enum AzureFileShareTypeEnum {
    INVALID("Invalid"),
    
    XSMB("XSMB"),
    
    X_SYNC("XSync");

    private String value;

    AzureFileShareTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AzureFileShareTypeEnum fromValue(String value) {
      for (AzureFileShareTypeEnum b : AzureFileShareTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AzureFileShareTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AzureFileShareTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AzureFileShareTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AzureFileShareTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AzureFileShareTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AZURE_FILE_SHARE_TYPE = "azureFileShareType";
  @SerializedName(SERIALIZED_NAME_AZURE_FILE_SHARE_TYPE)
  private AzureFileShareTypeEnum azureFileShareType;

  public static final String SERIALIZED_NAME_PARENT_CONTAINER_FABRIC_ID = "parentContainerFabricId";
  @SerializedName(SERIALIZED_NAME_PARENT_CONTAINER_FABRIC_ID)
  private String parentContainerFabricId;

  public static final String SERIALIZED_NAME_PARENT_CONTAINER_FRIENDLY_NAME = "parentContainerFriendlyName";
  @SerializedName(SERIALIZED_NAME_PARENT_CONTAINER_FRIENDLY_NAME)
  private String parentContainerFriendlyName;

  public AzureFileShareProtectableItem() {
    this.protectableItemType = this.getClass().getSimpleName();
  }

  public AzureFileShareProtectableItem azureFileShareType(AzureFileShareTypeEnum azureFileShareType) {
    this.azureFileShareType = azureFileShareType;
    return this;
  }

  /**
   * File Share type XSync or XSMB.
   * @return azureFileShareType
   */
  @javax.annotation.Nullable
  public AzureFileShareTypeEnum getAzureFileShareType() {
    return azureFileShareType;
  }

  public void setAzureFileShareType(AzureFileShareTypeEnum azureFileShareType) {
    this.azureFileShareType = azureFileShareType;
  }


  public AzureFileShareProtectableItem parentContainerFabricId(String parentContainerFabricId) {
    this.parentContainerFabricId = parentContainerFabricId;
    return this;
  }

  /**
   * Full Fabric ID of container to which this protectable item belongs. For example, ARM ID.
   * @return parentContainerFabricId
   */
  @javax.annotation.Nullable
  public String getParentContainerFabricId() {
    return parentContainerFabricId;
  }

  public void setParentContainerFabricId(String parentContainerFabricId) {
    this.parentContainerFabricId = parentContainerFabricId;
  }


  public AzureFileShareProtectableItem parentContainerFriendlyName(String parentContainerFriendlyName) {
    this.parentContainerFriendlyName = parentContainerFriendlyName;
    return this;
  }

  /**
   * Friendly name of container to which this protectable item belongs.
   * @return parentContainerFriendlyName
   */
  @javax.annotation.Nullable
  public String getParentContainerFriendlyName() {
    return parentContainerFriendlyName;
  }

  public void setParentContainerFriendlyName(String parentContainerFriendlyName) {
    this.parentContainerFriendlyName = parentContainerFriendlyName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AzureFileShareProtectableItem azureFileShareProtectableItem = (AzureFileShareProtectableItem) o;
    return Objects.equals(this.azureFileShareType, azureFileShareProtectableItem.azureFileShareType) &&
        Objects.equals(this.parentContainerFabricId, azureFileShareProtectableItem.parentContainerFabricId) &&
        Objects.equals(this.parentContainerFriendlyName, azureFileShareProtectableItem.parentContainerFriendlyName) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(azureFileShareType, parentContainerFabricId, parentContainerFriendlyName, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AzureFileShareProtectableItem {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    azureFileShareType: ").append(toIndentedString(azureFileShareType)).append("\n");
    sb.append("    parentContainerFabricId: ").append(toIndentedString(parentContainerFabricId)).append("\n");
    sb.append("    parentContainerFriendlyName: ").append(toIndentedString(parentContainerFriendlyName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("backupManagementType");
    openapiFields.add("friendlyName");
    openapiFields.add("protectableItemType");
    openapiFields.add("protectionState");
    openapiFields.add("workloadType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AzureFileShareProtectableItem
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AzureFileShareProtectableItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AzureFileShareProtectableItem is not found in the empty JSON string", AzureFileShareProtectableItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AzureFileShareProtectableItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AzureFileShareProtectableItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AzureFileShareProtectableItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AzureFileShareProtectableItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AzureFileShareProtectableItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AzureFileShareProtectableItem.class));

       return (TypeAdapter<T>) new TypeAdapter<AzureFileShareProtectableItem>() {
           @Override
           public void write(JsonWriter out, AzureFileShareProtectableItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AzureFileShareProtectableItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AzureFileShareProtectableItem given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AzureFileShareProtectableItem
   * @throws IOException if the JSON string is invalid with respect to AzureFileShareProtectableItem
   */
  public static AzureFileShareProtectableItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AzureFileShareProtectableItem.class);
  }

  /**
   * Convert an instance of AzureFileShareProtectableItem to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

