/*
 * RecoveryServicesBackupClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-12-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.BackupEngineExtendedInfo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The base backup engine class. All workload specific backup engines derive from this class.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:09:00.908826-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BackupEngineBase {
  public static final String SERIALIZED_NAME_AZURE_BACKUP_AGENT_VERSION = "azureBackupAgentVersion";
  @SerializedName(SERIALIZED_NAME_AZURE_BACKUP_AGENT_VERSION)
  private String azureBackupAgentVersion;

  public static final String SERIALIZED_NAME_BACKUP_ENGINE_ID = "backupEngineId";
  @SerializedName(SERIALIZED_NAME_BACKUP_ENGINE_ID)
  private String backupEngineId;

  public static final String SERIALIZED_NAME_BACKUP_ENGINE_STATE = "backupEngineState";
  @SerializedName(SERIALIZED_NAME_BACKUP_ENGINE_STATE)
  private String backupEngineState;

  /**
   * Type of the backup engine.
   */
  @JsonAdapter(BackupEngineTypeEnum.Adapter.class)
  public enum BackupEngineTypeEnum {
    INVALID("Invalid"),
    
    DPM_BACKUP_ENGINE("DpmBackupEngine"),
    
    AZURE_BACKUP_SERVER_ENGINE("AzureBackupServerEngine");

    private String value;

    BackupEngineTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BackupEngineTypeEnum fromValue(String value) {
      for (BackupEngineTypeEnum b : BackupEngineTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BackupEngineTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BackupEngineTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BackupEngineTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BackupEngineTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      BackupEngineTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_BACKUP_ENGINE_TYPE = "backupEngineType";
  @SerializedName(SERIALIZED_NAME_BACKUP_ENGINE_TYPE)
  protected BackupEngineTypeEnum backupEngineType;

  /**
   * Type of backup management for the backup engine.
   */
  @JsonAdapter(BackupManagementTypeEnum.Adapter.class)
  public enum BackupManagementTypeEnum {
    INVALID("Invalid"),
    
    AZURE_IAAS_VM("AzureIaasVM"),
    
    MAB("MAB"),
    
    DPM("DPM"),
    
    AZURE_BACKUP_SERVER("AzureBackupServer"),
    
    AZURE_SQL("AzureSql"),
    
    AZURE_STORAGE("AzureStorage"),
    
    AZURE_WORKLOAD("AzureWorkload"),
    
    DEFAULT_BACKUP("DefaultBackup");

    private String value;

    BackupManagementTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BackupManagementTypeEnum fromValue(String value) {
      for (BackupManagementTypeEnum b : BackupManagementTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BackupManagementTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BackupManagementTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BackupManagementTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BackupManagementTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      BackupManagementTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_BACKUP_MANAGEMENT_TYPE = "backupManagementType";
  @SerializedName(SERIALIZED_NAME_BACKUP_MANAGEMENT_TYPE)
  private BackupManagementTypeEnum backupManagementType;

  public static final String SERIALIZED_NAME_CAN_RE_REGISTER = "canReRegister";
  @SerializedName(SERIALIZED_NAME_CAN_RE_REGISTER)
  private Boolean canReRegister;

  public static final String SERIALIZED_NAME_DPM_VERSION = "dpmVersion";
  @SerializedName(SERIALIZED_NAME_DPM_VERSION)
  private String dpmVersion;

  public static final String SERIALIZED_NAME_EXTENDED_INFO = "extendedInfo";
  @SerializedName(SERIALIZED_NAME_EXTENDED_INFO)
  private BackupEngineExtendedInfo extendedInfo;

  public static final String SERIALIZED_NAME_FRIENDLY_NAME = "friendlyName";
  @SerializedName(SERIALIZED_NAME_FRIENDLY_NAME)
  private String friendlyName;

  public static final String SERIALIZED_NAME_HEALTH_STATUS = "healthStatus";
  @SerializedName(SERIALIZED_NAME_HEALTH_STATUS)
  private String healthStatus;

  public static final String SERIALIZED_NAME_IS_AZURE_BACKUP_AGENT_UPGRADE_AVAILABLE = "isAzureBackupAgentUpgradeAvailable";
  @SerializedName(SERIALIZED_NAME_IS_AZURE_BACKUP_AGENT_UPGRADE_AVAILABLE)
  private Boolean isAzureBackupAgentUpgradeAvailable;

  public static final String SERIALIZED_NAME_IS_DPM_UPGRADE_AVAILABLE = "isDpmUpgradeAvailable";
  @SerializedName(SERIALIZED_NAME_IS_DPM_UPGRADE_AVAILABLE)
  private Boolean isDpmUpgradeAvailable;

  public static final String SERIALIZED_NAME_REGISTRATION_STATUS = "registrationStatus";
  @SerializedName(SERIALIZED_NAME_REGISTRATION_STATUS)
  private String registrationStatus;

  public BackupEngineBase() {
  }

  public BackupEngineBase azureBackupAgentVersion(String azureBackupAgentVersion) {
    this.azureBackupAgentVersion = azureBackupAgentVersion;
    return this;
  }

  /**
   * Backup agent version
   * @return azureBackupAgentVersion
   */
  @javax.annotation.Nullable
  public String getAzureBackupAgentVersion() {
    return azureBackupAgentVersion;
  }

  public void setAzureBackupAgentVersion(String azureBackupAgentVersion) {
    this.azureBackupAgentVersion = azureBackupAgentVersion;
  }


  public BackupEngineBase backupEngineId(String backupEngineId) {
    this.backupEngineId = backupEngineId;
    return this;
  }

  /**
   * ID of the backup engine.
   * @return backupEngineId
   */
  @javax.annotation.Nullable
  public String getBackupEngineId() {
    return backupEngineId;
  }

  public void setBackupEngineId(String backupEngineId) {
    this.backupEngineId = backupEngineId;
  }


  public BackupEngineBase backupEngineState(String backupEngineState) {
    this.backupEngineState = backupEngineState;
    return this;
  }

  /**
   * Status of the backup engine with the Recovery Services Vault. &#x3D; {Active/Deleting/DeleteFailed}
   * @return backupEngineState
   */
  @javax.annotation.Nullable
  public String getBackupEngineState() {
    return backupEngineState;
  }

  public void setBackupEngineState(String backupEngineState) {
    this.backupEngineState = backupEngineState;
  }


  public BackupEngineBase backupEngineType(BackupEngineTypeEnum backupEngineType) {
    this.backupEngineType = backupEngineType;
    return this;
  }

  /**
   * Type of the backup engine.
   * @return backupEngineType
   */
  @javax.annotation.Nullable
  public BackupEngineTypeEnum getBackupEngineType() {
    return backupEngineType;
  }

  public void setBackupEngineType(BackupEngineTypeEnum backupEngineType) {
    this.backupEngineType = backupEngineType;
  }


  public BackupEngineBase backupManagementType(BackupManagementTypeEnum backupManagementType) {
    this.backupManagementType = backupManagementType;
    return this;
  }

  /**
   * Type of backup management for the backup engine.
   * @return backupManagementType
   */
  @javax.annotation.Nullable
  public BackupManagementTypeEnum getBackupManagementType() {
    return backupManagementType;
  }

  public void setBackupManagementType(BackupManagementTypeEnum backupManagementType) {
    this.backupManagementType = backupManagementType;
  }


  public BackupEngineBase canReRegister(Boolean canReRegister) {
    this.canReRegister = canReRegister;
    return this;
  }

  /**
   * Flag indicating if the backup engine be registered, once already registered.
   * @return canReRegister
   */
  @javax.annotation.Nullable
  public Boolean getCanReRegister() {
    return canReRegister;
  }

  public void setCanReRegister(Boolean canReRegister) {
    this.canReRegister = canReRegister;
  }


  public BackupEngineBase dpmVersion(String dpmVersion) {
    this.dpmVersion = dpmVersion;
    return this;
  }

  /**
   * Backup engine version
   * @return dpmVersion
   */
  @javax.annotation.Nullable
  public String getDpmVersion() {
    return dpmVersion;
  }

  public void setDpmVersion(String dpmVersion) {
    this.dpmVersion = dpmVersion;
  }


  public BackupEngineBase extendedInfo(BackupEngineExtendedInfo extendedInfo) {
    this.extendedInfo = extendedInfo;
    return this;
  }

  /**
   * Get extendedInfo
   * @return extendedInfo
   */
  @javax.annotation.Nullable
  public BackupEngineExtendedInfo getExtendedInfo() {
    return extendedInfo;
  }

  public void setExtendedInfo(BackupEngineExtendedInfo extendedInfo) {
    this.extendedInfo = extendedInfo;
  }


  public BackupEngineBase friendlyName(String friendlyName) {
    this.friendlyName = friendlyName;
    return this;
  }

  /**
   * Friendly name of the backup engine.
   * @return friendlyName
   */
  @javax.annotation.Nullable
  public String getFriendlyName() {
    return friendlyName;
  }

  public void setFriendlyName(String friendlyName) {
    this.friendlyName = friendlyName;
  }


  public BackupEngineBase healthStatus(String healthStatus) {
    this.healthStatus = healthStatus;
    return this;
  }

  /**
   * Backup status of the backup engine.
   * @return healthStatus
   */
  @javax.annotation.Nullable
  public String getHealthStatus() {
    return healthStatus;
  }

  public void setHealthStatus(String healthStatus) {
    this.healthStatus = healthStatus;
  }


  public BackupEngineBase isAzureBackupAgentUpgradeAvailable(Boolean isAzureBackupAgentUpgradeAvailable) {
    this.isAzureBackupAgentUpgradeAvailable = isAzureBackupAgentUpgradeAvailable;
    return this;
  }

  /**
   * To check if backup agent upgrade available
   * @return isAzureBackupAgentUpgradeAvailable
   */
  @javax.annotation.Nullable
  public Boolean getIsAzureBackupAgentUpgradeAvailable() {
    return isAzureBackupAgentUpgradeAvailable;
  }

  public void setIsAzureBackupAgentUpgradeAvailable(Boolean isAzureBackupAgentUpgradeAvailable) {
    this.isAzureBackupAgentUpgradeAvailable = isAzureBackupAgentUpgradeAvailable;
  }


  public BackupEngineBase isDpmUpgradeAvailable(Boolean isDpmUpgradeAvailable) {
    this.isDpmUpgradeAvailable = isDpmUpgradeAvailable;
    return this;
  }

  /**
   * To check if backup engine upgrade available
   * @return isDpmUpgradeAvailable
   */
  @javax.annotation.Nullable
  public Boolean getIsDpmUpgradeAvailable() {
    return isDpmUpgradeAvailable;
  }

  public void setIsDpmUpgradeAvailable(Boolean isDpmUpgradeAvailable) {
    this.isDpmUpgradeAvailable = isDpmUpgradeAvailable;
  }


  public BackupEngineBase registrationStatus(String registrationStatus) {
    this.registrationStatus = registrationStatus;
    return this;
  }

  /**
   * Registration status of the backup engine with the Recovery Services Vault.
   * @return registrationStatus
   */
  @javax.annotation.Nullable
  public String getRegistrationStatus() {
    return registrationStatus;
  }

  public void setRegistrationStatus(String registrationStatus) {
    this.registrationStatus = registrationStatus;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BackupEngineBase backupEngineBase = (BackupEngineBase) o;
    return Objects.equals(this.azureBackupAgentVersion, backupEngineBase.azureBackupAgentVersion) &&
        Objects.equals(this.backupEngineId, backupEngineBase.backupEngineId) &&
        Objects.equals(this.backupEngineState, backupEngineBase.backupEngineState) &&
        Objects.equals(this.backupEngineType, backupEngineBase.backupEngineType) &&
        Objects.equals(this.backupManagementType, backupEngineBase.backupManagementType) &&
        Objects.equals(this.canReRegister, backupEngineBase.canReRegister) &&
        Objects.equals(this.dpmVersion, backupEngineBase.dpmVersion) &&
        Objects.equals(this.extendedInfo, backupEngineBase.extendedInfo) &&
        Objects.equals(this.friendlyName, backupEngineBase.friendlyName) &&
        Objects.equals(this.healthStatus, backupEngineBase.healthStatus) &&
        Objects.equals(this.isAzureBackupAgentUpgradeAvailable, backupEngineBase.isAzureBackupAgentUpgradeAvailable) &&
        Objects.equals(this.isDpmUpgradeAvailable, backupEngineBase.isDpmUpgradeAvailable) &&
        Objects.equals(this.registrationStatus, backupEngineBase.registrationStatus);
  }

  @Override
  public int hashCode() {
    return Objects.hash(azureBackupAgentVersion, backupEngineId, backupEngineState, backupEngineType, backupManagementType, canReRegister, dpmVersion, extendedInfo, friendlyName, healthStatus, isAzureBackupAgentUpgradeAvailable, isDpmUpgradeAvailable, registrationStatus);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BackupEngineBase {\n");
    sb.append("    azureBackupAgentVersion: ").append(toIndentedString(azureBackupAgentVersion)).append("\n");
    sb.append("    backupEngineId: ").append(toIndentedString(backupEngineId)).append("\n");
    sb.append("    backupEngineState: ").append(toIndentedString(backupEngineState)).append("\n");
    sb.append("    backupEngineType: ").append(toIndentedString(backupEngineType)).append("\n");
    sb.append("    backupManagementType: ").append(toIndentedString(backupManagementType)).append("\n");
    sb.append("    canReRegister: ").append(toIndentedString(canReRegister)).append("\n");
    sb.append("    dpmVersion: ").append(toIndentedString(dpmVersion)).append("\n");
    sb.append("    extendedInfo: ").append(toIndentedString(extendedInfo)).append("\n");
    sb.append("    friendlyName: ").append(toIndentedString(friendlyName)).append("\n");
    sb.append("    healthStatus: ").append(toIndentedString(healthStatus)).append("\n");
    sb.append("    isAzureBackupAgentUpgradeAvailable: ").append(toIndentedString(isAzureBackupAgentUpgradeAvailable)).append("\n");
    sb.append("    isDpmUpgradeAvailable: ").append(toIndentedString(isDpmUpgradeAvailable)).append("\n");
    sb.append("    registrationStatus: ").append(toIndentedString(registrationStatus)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("azureBackupAgentVersion");
    openapiFields.add("backupEngineId");
    openapiFields.add("backupEngineState");
    openapiFields.add("backupEngineType");
    openapiFields.add("backupManagementType");
    openapiFields.add("canReRegister");
    openapiFields.add("dpmVersion");
    openapiFields.add("extendedInfo");
    openapiFields.add("friendlyName");
    openapiFields.add("healthStatus");
    openapiFields.add("isAzureBackupAgentUpgradeAvailable");
    openapiFields.add("isDpmUpgradeAvailable");
    openapiFields.add("registrationStatus");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BackupEngineBase
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BackupEngineBase.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BackupEngineBase is not found in the empty JSON string", BackupEngineBase.openapiRequiredFields.toString()));
        }
      }

      String discriminatorValue = jsonElement.getAsJsonObject().get("backupEngineType").getAsString();
      switch (discriminatorValue) {
        case "AzureBackupServerEngine":
          AzureBackupServerEngine.validateJsonElement(jsonElement);
          break;
        case "DpmBackupEngine":
          DpmBackupEngine.validateJsonElement(jsonElement);
          break;
        default:
          throw new IllegalArgumentException(String.format("The value of the `backupEngineType` field `%s` does not match any key defined in the discriminator's mapping.", discriminatorValue));
      }
  }


  /**
   * Create an instance of BackupEngineBase given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BackupEngineBase
   * @throws IOException if the JSON string is invalid with respect to BackupEngineBase
   */
  public static BackupEngineBase fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BackupEngineBase.class);
  }

  /**
   * Convert an instance of BackupEngineBase to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

