/**
 * RecoveryServicesBackupClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-12-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ProtectionContainer model module.
 * @module model/ProtectionContainer
 * @version 2016-12-01
 */
class ProtectionContainer {
    /**
     * Constructs a new <code>ProtectionContainer</code>.
     * Base class for container with backup items. Containers with specific workloads are derived from this class.
     * @alias module:model/ProtectionContainer
     */
    constructor() { 
        
        ProtectionContainer.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ProtectionContainer</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ProtectionContainer} obj Optional instance to populate.
     * @return {module:model/ProtectionContainer} The populated <code>ProtectionContainer</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ProtectionContainer();

            if (data.hasOwnProperty('backupManagementType')) {
                obj['backupManagementType'] = ApiClient.convertToType(data['backupManagementType'], 'String');
            }
            if (data.hasOwnProperty('containerType')) {
                obj['containerType'] = ApiClient.convertToType(data['containerType'], 'String');
            }
            if (data.hasOwnProperty('friendlyName')) {
                obj['friendlyName'] = ApiClient.convertToType(data['friendlyName'], 'String');
            }
            if (data.hasOwnProperty('healthStatus')) {
                obj['healthStatus'] = ApiClient.convertToType(data['healthStatus'], 'String');
            }
            if (data.hasOwnProperty('registrationStatus')) {
                obj['registrationStatus'] = ApiClient.convertToType(data['registrationStatus'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ProtectionContainer</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ProtectionContainer</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['backupManagementType'] && !(typeof data['backupManagementType'] === 'string' || data['backupManagementType'] instanceof String)) {
            throw new Error("Expected the field `backupManagementType` to be a primitive type in the JSON string but got " + data['backupManagementType']);
        }
        // ensure the json data is a string
        if (data['containerType'] && !(typeof data['containerType'] === 'string' || data['containerType'] instanceof String)) {
            throw new Error("Expected the field `containerType` to be a primitive type in the JSON string but got " + data['containerType']);
        }
        // ensure the json data is a string
        if (data['friendlyName'] && !(typeof data['friendlyName'] === 'string' || data['friendlyName'] instanceof String)) {
            throw new Error("Expected the field `friendlyName` to be a primitive type in the JSON string but got " + data['friendlyName']);
        }
        // ensure the json data is a string
        if (data['healthStatus'] && !(typeof data['healthStatus'] === 'string' || data['healthStatus'] instanceof String)) {
            throw new Error("Expected the field `healthStatus` to be a primitive type in the JSON string but got " + data['healthStatus']);
        }
        // ensure the json data is a string
        if (data['registrationStatus'] && !(typeof data['registrationStatus'] === 'string' || data['registrationStatus'] instanceof String)) {
            throw new Error("Expected the field `registrationStatus` to be a primitive type in the JSON string but got " + data['registrationStatus']);
        }

        return true;
    }


}



/**
 * Type of backup management for the container.
 * @member {module:model/ProtectionContainer.BackupManagementTypeEnum} backupManagementType
 */
ProtectionContainer.prototype['backupManagementType'] = undefined;

/**
 * Type of the container. The value of this property for: 1. Compute Azure VM is Microsoft.Compute/virtualMachines 2.  Classic Compute Azure VM is Microsoft.ClassicCompute/virtualMachines 3. Windows machines (like MAB, DPM etc) is  Windows 4. Azure SQL instance is AzureSqlContainer. 5. Storage containers is StorageContainer. 6. Azure workload  Backup is VMAppContainer
 * @member {module:model/ProtectionContainer.ContainerTypeEnum} containerType
 */
ProtectionContainer.prototype['containerType'] = undefined;

/**
 * Friendly name of the container.
 * @member {String} friendlyName
 */
ProtectionContainer.prototype['friendlyName'] = undefined;

/**
 * Status of health of the container.
 * @member {String} healthStatus
 */
ProtectionContainer.prototype['healthStatus'] = undefined;

/**
 * Status of registration of the container with the Recovery Services Vault.
 * @member {String} registrationStatus
 */
ProtectionContainer.prototype['registrationStatus'] = undefined;





/**
 * Allowed values for the <code>backupManagementType</code> property.
 * @enum {String}
 * @readonly
 */
ProtectionContainer['BackupManagementTypeEnum'] = {

    /**
     * value: "Invalid"
     * @const
     */
    "Invalid": "Invalid",

    /**
     * value: "AzureIaasVM"
     * @const
     */
    "AzureIaasVM": "AzureIaasVM",

    /**
     * value: "MAB"
     * @const
     */
    "MAB": "MAB",

    /**
     * value: "DPM"
     * @const
     */
    "DPM": "DPM",

    /**
     * value: "AzureBackupServer"
     * @const
     */
    "AzureBackupServer": "AzureBackupServer",

    /**
     * value: "AzureSql"
     * @const
     */
    "AzureSql": "AzureSql",

    /**
     * value: "AzureStorage"
     * @const
     */
    "AzureStorage": "AzureStorage",

    /**
     * value: "AzureWorkload"
     * @const
     */
    "AzureWorkload": "AzureWorkload",

    /**
     * value: "DefaultBackup"
     * @const
     */
    "DefaultBackup": "DefaultBackup"
};


/**
 * Allowed values for the <code>containerType</code> property.
 * @enum {String}
 * @readonly
 */
ProtectionContainer['ContainerTypeEnum'] = {

    /**
     * value: "Invalid"
     * @const
     */
    "Invalid": "Invalid",

    /**
     * value: "Unknown"
     * @const
     */
    "Unknown": "Unknown",

    /**
     * value: "IaasVMContainer"
     * @const
     */
    "IaasVMContainer": "IaasVMContainer",

    /**
     * value: "IaasVMServiceContainer"
     * @const
     */
    "IaasVMServiceContainer": "IaasVMServiceContainer",

    /**
     * value: "DPMContainer"
     * @const
     */
    "DPMContainer": "DPMContainer",

    /**
     * value: "AzureBackupServerContainer"
     * @const
     */
    "AzureBackupServerContainer": "AzureBackupServerContainer",

    /**
     * value: "MABContainer"
     * @const
     */
    "MABContainer": "MABContainer",

    /**
     * value: "Cluster"
     * @const
     */
    "Cluster": "Cluster",

    /**
     * value: "AzureSqlContainer"
     * @const
     */
    "AzureSqlContainer": "AzureSqlContainer",

    /**
     * value: "Windows"
     * @const
     */
    "Windows": "Windows",

    /**
     * value: "VCenter"
     * @const
     */
    "VCenter": "VCenter",

    /**
     * value: "VMAppContainer"
     * @const
     */
    "VMAppContainer": "VMAppContainer",

    /**
     * value: "SQLAGWorkLoadContainer"
     * @const
     */
    "SQLAGWorkLoadContainer": "SQLAGWorkLoadContainer",

    /**
     * value: "StorageContainer"
     * @const
     */
    "StorageContainer": "StorageContainer",

    /**
     * value: "GenericContainer"
     * @const
     */
    "GenericContainer": "GenericContainer"
};



export default ProtectionContainer;

