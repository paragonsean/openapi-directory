/**
 * RecoveryServicesBackupClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-12-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The BMSContainerQueryObject model module.
 * @module model/BMSContainerQueryObject
 * @version 2016-12-01
 */
class BMSContainerQueryObject {
    /**
     * Constructs a new <code>BMSContainerQueryObject</code>.
     * The query filters that can be used with the list containers API.
     * @alias module:model/BMSContainerQueryObject
     * @param backupManagementType {module:model/BMSContainerQueryObject.BackupManagementTypeEnum} Backup management type for this container.
     */
    constructor(backupManagementType) { 
        
        BMSContainerQueryObject.initialize(this, backupManagementType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, backupManagementType) { 
        obj['backupManagementType'] = backupManagementType;
    }

    /**
     * Constructs a <code>BMSContainerQueryObject</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BMSContainerQueryObject} obj Optional instance to populate.
     * @return {module:model/BMSContainerQueryObject} The populated <code>BMSContainerQueryObject</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BMSContainerQueryObject();

            if (data.hasOwnProperty('backupEngineName')) {
                obj['backupEngineName'] = ApiClient.convertToType(data['backupEngineName'], 'String');
            }
            if (data.hasOwnProperty('backupManagementType')) {
                obj['backupManagementType'] = ApiClient.convertToType(data['backupManagementType'], 'String');
            }
            if (data.hasOwnProperty('containerType')) {
                obj['containerType'] = ApiClient.convertToType(data['containerType'], 'String');
            }
            if (data.hasOwnProperty('fabricName')) {
                obj['fabricName'] = ApiClient.convertToType(data['fabricName'], 'String');
            }
            if (data.hasOwnProperty('friendlyName')) {
                obj['friendlyName'] = ApiClient.convertToType(data['friendlyName'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BMSContainerQueryObject</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BMSContainerQueryObject</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of BMSContainerQueryObject.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['backupEngineName'] && !(typeof data['backupEngineName'] === 'string' || data['backupEngineName'] instanceof String)) {
            throw new Error("Expected the field `backupEngineName` to be a primitive type in the JSON string but got " + data['backupEngineName']);
        }
        // ensure the json data is a string
        if (data['backupManagementType'] && !(typeof data['backupManagementType'] === 'string' || data['backupManagementType'] instanceof String)) {
            throw new Error("Expected the field `backupManagementType` to be a primitive type in the JSON string but got " + data['backupManagementType']);
        }
        // ensure the json data is a string
        if (data['containerType'] && !(typeof data['containerType'] === 'string' || data['containerType'] instanceof String)) {
            throw new Error("Expected the field `containerType` to be a primitive type in the JSON string but got " + data['containerType']);
        }
        // ensure the json data is a string
        if (data['fabricName'] && !(typeof data['fabricName'] === 'string' || data['fabricName'] instanceof String)) {
            throw new Error("Expected the field `fabricName` to be a primitive type in the JSON string but got " + data['fabricName']);
        }
        // ensure the json data is a string
        if (data['friendlyName'] && !(typeof data['friendlyName'] === 'string' || data['friendlyName'] instanceof String)) {
            throw new Error("Expected the field `friendlyName` to be a primitive type in the JSON string but got " + data['friendlyName']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }

        return true;
    }


}

BMSContainerQueryObject.RequiredProperties = ["backupManagementType"];

/**
 * Backup engine name
 * @member {String} backupEngineName
 */
BMSContainerQueryObject.prototype['backupEngineName'] = undefined;

/**
 * Backup management type for this container.
 * @member {module:model/BMSContainerQueryObject.BackupManagementTypeEnum} backupManagementType
 */
BMSContainerQueryObject.prototype['backupManagementType'] = undefined;

/**
 * Type of container for filter
 * @member {module:model/BMSContainerQueryObject.ContainerTypeEnum} containerType
 */
BMSContainerQueryObject.prototype['containerType'] = undefined;

/**
 * Fabric name for filter
 * @member {String} fabricName
 */
BMSContainerQueryObject.prototype['fabricName'] = undefined;

/**
 * Friendly name of this container.
 * @member {String} friendlyName
 */
BMSContainerQueryObject.prototype['friendlyName'] = undefined;

/**
 * Status of registration of this container with the Recovery Services Vault.
 * @member {String} status
 */
BMSContainerQueryObject.prototype['status'] = undefined;





/**
 * Allowed values for the <code>backupManagementType</code> property.
 * @enum {String}
 * @readonly
 */
BMSContainerQueryObject['BackupManagementTypeEnum'] = {

    /**
     * value: "Invalid"
     * @const
     */
    "Invalid": "Invalid",

    /**
     * value: "AzureIaasVM"
     * @const
     */
    "AzureIaasVM": "AzureIaasVM",

    /**
     * value: "MAB"
     * @const
     */
    "MAB": "MAB",

    /**
     * value: "DPM"
     * @const
     */
    "DPM": "DPM",

    /**
     * value: "AzureBackupServer"
     * @const
     */
    "AzureBackupServer": "AzureBackupServer",

    /**
     * value: "AzureSql"
     * @const
     */
    "AzureSql": "AzureSql",

    /**
     * value: "AzureStorage"
     * @const
     */
    "AzureStorage": "AzureStorage",

    /**
     * value: "AzureWorkload"
     * @const
     */
    "AzureWorkload": "AzureWorkload",

    /**
     * value: "DefaultBackup"
     * @const
     */
    "DefaultBackup": "DefaultBackup"
};


/**
 * Allowed values for the <code>containerType</code> property.
 * @enum {String}
 * @readonly
 */
BMSContainerQueryObject['ContainerTypeEnum'] = {

    /**
     * value: "Invalid"
     * @const
     */
    "Invalid": "Invalid",

    /**
     * value: "Unknown"
     * @const
     */
    "Unknown": "Unknown",

    /**
     * value: "IaasVMContainer"
     * @const
     */
    "IaasVMContainer": "IaasVMContainer",

    /**
     * value: "IaasVMServiceContainer"
     * @const
     */
    "IaasVMServiceContainer": "IaasVMServiceContainer",

    /**
     * value: "DPMContainer"
     * @const
     */
    "DPMContainer": "DPMContainer",

    /**
     * value: "AzureBackupServerContainer"
     * @const
     */
    "AzureBackupServerContainer": "AzureBackupServerContainer",

    /**
     * value: "MABContainer"
     * @const
     */
    "MABContainer": "MABContainer",

    /**
     * value: "Cluster"
     * @const
     */
    "Cluster": "Cluster",

    /**
     * value: "AzureSqlContainer"
     * @const
     */
    "AzureSqlContainer": "AzureSqlContainer",

    /**
     * value: "Windows"
     * @const
     */
    "Windows": "Windows",

    /**
     * value: "VCenter"
     * @const
     */
    "VCenter": "VCenter",

    /**
     * value: "VMAppContainer"
     * @const
     */
    "VMAppContainer": "VMAppContainer",

    /**
     * value: "SQLAGWorkLoadContainer"
     * @const
     */
    "SQLAGWorkLoadContainer": "SQLAGWorkLoadContainer",

    /**
     * value: "StorageContainer"
     * @const
     */
    "StorageContainer": "StorageContainer",

    /**
     * value: "GenericContainer"
     * @const
     */
    "GenericContainer": "GenericContainer"
};



export default BMSContainerQueryObject;

