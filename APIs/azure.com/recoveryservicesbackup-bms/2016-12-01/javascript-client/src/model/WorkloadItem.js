/**
 * RecoveryServicesBackupClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-12-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The WorkloadItem model module.
 * @module model/WorkloadItem
 * @version 2016-12-01
 */
class WorkloadItem {
    /**
     * Constructs a new <code>WorkloadItem</code>.
     * Base class for backup item. Workload-specific backup items are derived from this class.
     * @alias module:model/WorkloadItem
     */
    constructor() { 
        
        WorkloadItem.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>WorkloadItem</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WorkloadItem} obj Optional instance to populate.
     * @return {module:model/WorkloadItem} The populated <code>WorkloadItem</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WorkloadItem();

            if (data.hasOwnProperty('backupManagementType')) {
                obj['backupManagementType'] = ApiClient.convertToType(data['backupManagementType'], 'String');
            }
            if (data.hasOwnProperty('friendlyName')) {
                obj['friendlyName'] = ApiClient.convertToType(data['friendlyName'], 'String');
            }
            if (data.hasOwnProperty('protectionState')) {
                obj['protectionState'] = ApiClient.convertToType(data['protectionState'], 'String');
            }
            if (data.hasOwnProperty('workloadItemType')) {
                obj['workloadItemType'] = ApiClient.convertToType(data['workloadItemType'], 'String');
            }
            if (data.hasOwnProperty('workloadType')) {
                obj['workloadType'] = ApiClient.convertToType(data['workloadType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WorkloadItem</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WorkloadItem</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['backupManagementType'] && !(typeof data['backupManagementType'] === 'string' || data['backupManagementType'] instanceof String)) {
            throw new Error("Expected the field `backupManagementType` to be a primitive type in the JSON string but got " + data['backupManagementType']);
        }
        // ensure the json data is a string
        if (data['friendlyName'] && !(typeof data['friendlyName'] === 'string' || data['friendlyName'] instanceof String)) {
            throw new Error("Expected the field `friendlyName` to be a primitive type in the JSON string but got " + data['friendlyName']);
        }
        // ensure the json data is a string
        if (data['protectionState'] && !(typeof data['protectionState'] === 'string' || data['protectionState'] instanceof String)) {
            throw new Error("Expected the field `protectionState` to be a primitive type in the JSON string but got " + data['protectionState']);
        }
        // ensure the json data is a string
        if (data['workloadItemType'] && !(typeof data['workloadItemType'] === 'string' || data['workloadItemType'] instanceof String)) {
            throw new Error("Expected the field `workloadItemType` to be a primitive type in the JSON string but got " + data['workloadItemType']);
        }
        // ensure the json data is a string
        if (data['workloadType'] && !(typeof data['workloadType'] === 'string' || data['workloadType'] instanceof String)) {
            throw new Error("Expected the field `workloadType` to be a primitive type in the JSON string but got " + data['workloadType']);
        }

        return true;
    }


}



/**
 * Type of backup management to backup an item.
 * @member {String} backupManagementType
 */
WorkloadItem.prototype['backupManagementType'] = undefined;

/**
 * Friendly name of the backup item.
 * @member {String} friendlyName
 */
WorkloadItem.prototype['friendlyName'] = undefined;

/**
 * State of the back up item.
 * @member {module:model/WorkloadItem.ProtectionStateEnum} protectionState
 */
WorkloadItem.prototype['protectionState'] = undefined;

/**
 * Type of the backup item.
 * @member {String} workloadItemType
 */
WorkloadItem.prototype['workloadItemType'] = undefined;

/**
 * Type of workload for the backup management
 * @member {String} workloadType
 */
WorkloadItem.prototype['workloadType'] = undefined;





/**
 * Allowed values for the <code>protectionState</code> property.
 * @enum {String}
 * @readonly
 */
WorkloadItem['ProtectionStateEnum'] = {

    /**
     * value: "Invalid"
     * @const
     */
    "Invalid": "Invalid",

    /**
     * value: "NotProtected"
     * @const
     */
    "NotProtected": "NotProtected",

    /**
     * value: "Protecting"
     * @const
     */
    "Protecting": "Protecting",

    /**
     * value: "Protected"
     * @const
     */
    "Protected": "Protected",

    /**
     * value: "ProtectionFailed"
     * @const
     */
    "ProtectionFailed": "ProtectionFailed"
};



export default WorkloadItem;

