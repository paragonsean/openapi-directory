/*
 * RecoveryServicesBackupClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-06-15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Details needed if the VM was encrypted at the time of backup.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:08:58.744593-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EncryptionDetails {
  public static final String SERIALIZED_NAME_ENCRYPTION_ENABLED = "encryptionEnabled";
  @SerializedName(SERIALIZED_NAME_ENCRYPTION_ENABLED)
  private Boolean encryptionEnabled;

  public static final String SERIALIZED_NAME_KEK_URL = "kekUrl";
  @SerializedName(SERIALIZED_NAME_KEK_URL)
  private String kekUrl;

  public static final String SERIALIZED_NAME_KEK_VAULT_ID = "kekVaultId";
  @SerializedName(SERIALIZED_NAME_KEK_VAULT_ID)
  private String kekVaultId;

  public static final String SERIALIZED_NAME_SECRET_KEY_URL = "secretKeyUrl";
  @SerializedName(SERIALIZED_NAME_SECRET_KEY_URL)
  private String secretKeyUrl;

  public static final String SERIALIZED_NAME_SECRET_KEY_VAULT_ID = "secretKeyVaultId";
  @SerializedName(SERIALIZED_NAME_SECRET_KEY_VAULT_ID)
  private String secretKeyVaultId;

  public EncryptionDetails() {
  }

  public EncryptionDetails encryptionEnabled(Boolean encryptionEnabled) {
    this.encryptionEnabled = encryptionEnabled;
    return this;
  }

  /**
   * Identifies whether this backup copy represents an encrypted VM at the time of backup.
   * @return encryptionEnabled
   */
  @javax.annotation.Nullable
  public Boolean getEncryptionEnabled() {
    return encryptionEnabled;
  }

  public void setEncryptionEnabled(Boolean encryptionEnabled) {
    this.encryptionEnabled = encryptionEnabled;
  }


  public EncryptionDetails kekUrl(String kekUrl) {
    this.kekUrl = kekUrl;
    return this;
  }

  /**
   * Key Url.
   * @return kekUrl
   */
  @javax.annotation.Nullable
  public String getKekUrl() {
    return kekUrl;
  }

  public void setKekUrl(String kekUrl) {
    this.kekUrl = kekUrl;
  }


  public EncryptionDetails kekVaultId(String kekVaultId) {
    this.kekVaultId = kekVaultId;
    return this;
  }

  /**
   * ID of Key Vault where KEK is stored.
   * @return kekVaultId
   */
  @javax.annotation.Nullable
  public String getKekVaultId() {
    return kekVaultId;
  }

  public void setKekVaultId(String kekVaultId) {
    this.kekVaultId = kekVaultId;
  }


  public EncryptionDetails secretKeyUrl(String secretKeyUrl) {
    this.secretKeyUrl = secretKeyUrl;
    return this;
  }

  /**
   * Secret Url.
   * @return secretKeyUrl
   */
  @javax.annotation.Nullable
  public String getSecretKeyUrl() {
    return secretKeyUrl;
  }

  public void setSecretKeyUrl(String secretKeyUrl) {
    this.secretKeyUrl = secretKeyUrl;
  }


  public EncryptionDetails secretKeyVaultId(String secretKeyVaultId) {
    this.secretKeyVaultId = secretKeyVaultId;
    return this;
  }

  /**
   * ID of Key Vault where Secret is stored.
   * @return secretKeyVaultId
   */
  @javax.annotation.Nullable
  public String getSecretKeyVaultId() {
    return secretKeyVaultId;
  }

  public void setSecretKeyVaultId(String secretKeyVaultId) {
    this.secretKeyVaultId = secretKeyVaultId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EncryptionDetails encryptionDetails = (EncryptionDetails) o;
    return Objects.equals(this.encryptionEnabled, encryptionDetails.encryptionEnabled) &&
        Objects.equals(this.kekUrl, encryptionDetails.kekUrl) &&
        Objects.equals(this.kekVaultId, encryptionDetails.kekVaultId) &&
        Objects.equals(this.secretKeyUrl, encryptionDetails.secretKeyUrl) &&
        Objects.equals(this.secretKeyVaultId, encryptionDetails.secretKeyVaultId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(encryptionEnabled, kekUrl, kekVaultId, secretKeyUrl, secretKeyVaultId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EncryptionDetails {\n");
    sb.append("    encryptionEnabled: ").append(toIndentedString(encryptionEnabled)).append("\n");
    sb.append("    kekUrl: ").append(toIndentedString(kekUrl)).append("\n");
    sb.append("    kekVaultId: ").append(toIndentedString(kekVaultId)).append("\n");
    sb.append("    secretKeyUrl: ").append(toIndentedString(secretKeyUrl)).append("\n");
    sb.append("    secretKeyVaultId: ").append(toIndentedString(secretKeyVaultId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("encryptionEnabled");
    openapiFields.add("kekUrl");
    openapiFields.add("kekVaultId");
    openapiFields.add("secretKeyUrl");
    openapiFields.add("secretKeyVaultId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EncryptionDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EncryptionDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EncryptionDetails is not found in the empty JSON string", EncryptionDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EncryptionDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EncryptionDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("kekUrl") != null && !jsonObj.get("kekUrl").isJsonNull()) && !jsonObj.get("kekUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kekUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kekUrl").toString()));
      }
      if ((jsonObj.get("kekVaultId") != null && !jsonObj.get("kekVaultId").isJsonNull()) && !jsonObj.get("kekVaultId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kekVaultId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kekVaultId").toString()));
      }
      if ((jsonObj.get("secretKeyUrl") != null && !jsonObj.get("secretKeyUrl").isJsonNull()) && !jsonObj.get("secretKeyUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secretKeyUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secretKeyUrl").toString()));
      }
      if ((jsonObj.get("secretKeyVaultId") != null && !jsonObj.get("secretKeyVaultId").isJsonNull()) && !jsonObj.get("secretKeyVaultId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secretKeyVaultId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secretKeyVaultId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EncryptionDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EncryptionDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EncryptionDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EncryptionDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<EncryptionDetails>() {
           @Override
           public void write(JsonWriter out, EncryptionDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EncryptionDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EncryptionDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EncryptionDetails
   * @throws IOException if the JSON string is invalid with respect to EncryptionDetails
   */
  public static EncryptionDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EncryptionDetails.class);
  }

  /**
   * Convert an instance of EncryptionDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

