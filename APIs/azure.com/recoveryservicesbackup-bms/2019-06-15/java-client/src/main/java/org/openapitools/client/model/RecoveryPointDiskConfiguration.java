/*
 * RecoveryServicesBackupClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-06-15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DiskInformation;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Disk configuration
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:08:58.744593-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RecoveryPointDiskConfiguration {
  public static final String SERIALIZED_NAME_EXCLUDED_DISK_LIST = "excludedDiskList";
  @SerializedName(SERIALIZED_NAME_EXCLUDED_DISK_LIST)
  private List<DiskInformation> excludedDiskList = new ArrayList<>();

  public static final String SERIALIZED_NAME_INCLUDED_DISK_LIST = "includedDiskList";
  @SerializedName(SERIALIZED_NAME_INCLUDED_DISK_LIST)
  private List<DiskInformation> includedDiskList = new ArrayList<>();

  public static final String SERIALIZED_NAME_NUMBER_OF_DISKS_ATTACHED_TO_VM = "numberOfDisksAttachedToVm";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_DISKS_ATTACHED_TO_VM)
  private Integer numberOfDisksAttachedToVm;

  public static final String SERIALIZED_NAME_NUMBER_OF_DISKS_INCLUDED_IN_BACKUP = "numberOfDisksIncludedInBackup";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_DISKS_INCLUDED_IN_BACKUP)
  private Integer numberOfDisksIncludedInBackup;

  public RecoveryPointDiskConfiguration() {
  }

  public RecoveryPointDiskConfiguration excludedDiskList(List<DiskInformation> excludedDiskList) {
    this.excludedDiskList = excludedDiskList;
    return this;
  }

  public RecoveryPointDiskConfiguration addExcludedDiskListItem(DiskInformation excludedDiskListItem) {
    if (this.excludedDiskList == null) {
      this.excludedDiskList = new ArrayList<>();
    }
    this.excludedDiskList.add(excludedDiskListItem);
    return this;
  }

  /**
   * Information of disks excluded from backup
   * @return excludedDiskList
   */
  @javax.annotation.Nullable
  public List<DiskInformation> getExcludedDiskList() {
    return excludedDiskList;
  }

  public void setExcludedDiskList(List<DiskInformation> excludedDiskList) {
    this.excludedDiskList = excludedDiskList;
  }


  public RecoveryPointDiskConfiguration includedDiskList(List<DiskInformation> includedDiskList) {
    this.includedDiskList = includedDiskList;
    return this;
  }

  public RecoveryPointDiskConfiguration addIncludedDiskListItem(DiskInformation includedDiskListItem) {
    if (this.includedDiskList == null) {
      this.includedDiskList = new ArrayList<>();
    }
    this.includedDiskList.add(includedDiskListItem);
    return this;
  }

  /**
   * Information of disks included in backup
   * @return includedDiskList
   */
  @javax.annotation.Nullable
  public List<DiskInformation> getIncludedDiskList() {
    return includedDiskList;
  }

  public void setIncludedDiskList(List<DiskInformation> includedDiskList) {
    this.includedDiskList = includedDiskList;
  }


  public RecoveryPointDiskConfiguration numberOfDisksAttachedToVm(Integer numberOfDisksAttachedToVm) {
    this.numberOfDisksAttachedToVm = numberOfDisksAttachedToVm;
    return this;
  }

  /**
   * Number of disks attached to the VM
   * @return numberOfDisksAttachedToVm
   */
  @javax.annotation.Nullable
  public Integer getNumberOfDisksAttachedToVm() {
    return numberOfDisksAttachedToVm;
  }

  public void setNumberOfDisksAttachedToVm(Integer numberOfDisksAttachedToVm) {
    this.numberOfDisksAttachedToVm = numberOfDisksAttachedToVm;
  }


  public RecoveryPointDiskConfiguration numberOfDisksIncludedInBackup(Integer numberOfDisksIncludedInBackup) {
    this.numberOfDisksIncludedInBackup = numberOfDisksIncludedInBackup;
    return this;
  }

  /**
   * Number of disks included in backup
   * @return numberOfDisksIncludedInBackup
   */
  @javax.annotation.Nullable
  public Integer getNumberOfDisksIncludedInBackup() {
    return numberOfDisksIncludedInBackup;
  }

  public void setNumberOfDisksIncludedInBackup(Integer numberOfDisksIncludedInBackup) {
    this.numberOfDisksIncludedInBackup = numberOfDisksIncludedInBackup;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RecoveryPointDiskConfiguration recoveryPointDiskConfiguration = (RecoveryPointDiskConfiguration) o;
    return Objects.equals(this.excludedDiskList, recoveryPointDiskConfiguration.excludedDiskList) &&
        Objects.equals(this.includedDiskList, recoveryPointDiskConfiguration.includedDiskList) &&
        Objects.equals(this.numberOfDisksAttachedToVm, recoveryPointDiskConfiguration.numberOfDisksAttachedToVm) &&
        Objects.equals(this.numberOfDisksIncludedInBackup, recoveryPointDiskConfiguration.numberOfDisksIncludedInBackup);
  }

  @Override
  public int hashCode() {
    return Objects.hash(excludedDiskList, includedDiskList, numberOfDisksAttachedToVm, numberOfDisksIncludedInBackup);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RecoveryPointDiskConfiguration {\n");
    sb.append("    excludedDiskList: ").append(toIndentedString(excludedDiskList)).append("\n");
    sb.append("    includedDiskList: ").append(toIndentedString(includedDiskList)).append("\n");
    sb.append("    numberOfDisksAttachedToVm: ").append(toIndentedString(numberOfDisksAttachedToVm)).append("\n");
    sb.append("    numberOfDisksIncludedInBackup: ").append(toIndentedString(numberOfDisksIncludedInBackup)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("excludedDiskList");
    openapiFields.add("includedDiskList");
    openapiFields.add("numberOfDisksAttachedToVm");
    openapiFields.add("numberOfDisksIncludedInBackup");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RecoveryPointDiskConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RecoveryPointDiskConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RecoveryPointDiskConfiguration is not found in the empty JSON string", RecoveryPointDiskConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RecoveryPointDiskConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RecoveryPointDiskConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("excludedDiskList") != null && !jsonObj.get("excludedDiskList").isJsonNull()) {
        JsonArray jsonArrayexcludedDiskList = jsonObj.getAsJsonArray("excludedDiskList");
        if (jsonArrayexcludedDiskList != null) {
          // ensure the json data is an array
          if (!jsonObj.get("excludedDiskList").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `excludedDiskList` to be an array in the JSON string but got `%s`", jsonObj.get("excludedDiskList").toString()));
          }

          // validate the optional field `excludedDiskList` (array)
          for (int i = 0; i < jsonArrayexcludedDiskList.size(); i++) {
            DiskInformation.validateJsonElement(jsonArrayexcludedDiskList.get(i));
          };
        }
      }
      if (jsonObj.get("includedDiskList") != null && !jsonObj.get("includedDiskList").isJsonNull()) {
        JsonArray jsonArrayincludedDiskList = jsonObj.getAsJsonArray("includedDiskList");
        if (jsonArrayincludedDiskList != null) {
          // ensure the json data is an array
          if (!jsonObj.get("includedDiskList").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `includedDiskList` to be an array in the JSON string but got `%s`", jsonObj.get("includedDiskList").toString()));
          }

          // validate the optional field `includedDiskList` (array)
          for (int i = 0; i < jsonArrayincludedDiskList.size(); i++) {
            DiskInformation.validateJsonElement(jsonArrayincludedDiskList.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RecoveryPointDiskConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RecoveryPointDiskConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RecoveryPointDiskConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RecoveryPointDiskConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<RecoveryPointDiskConfiguration>() {
           @Override
           public void write(JsonWriter out, RecoveryPointDiskConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RecoveryPointDiskConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RecoveryPointDiskConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RecoveryPointDiskConfiguration
   * @throws IOException if the JSON string is invalid with respect to RecoveryPointDiskConfiguration
   */
  public static RecoveryPointDiskConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RecoveryPointDiskConfiguration.class);
  }

  /**
   * Convert an instance of RecoveryPointDiskConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

