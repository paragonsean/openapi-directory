/*
 * RecoveryServicesBackupClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-06-15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Filters to list the jobs.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:08:58.744593-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class JobQueryObject {
  /**
   * Type of backup management for the job.
   */
  @JsonAdapter(BackupManagementTypeEnum.Adapter.class)
  public enum BackupManagementTypeEnum {
    INVALID("Invalid"),
    
    AZURE_IAAS_VM("AzureIaasVM"),
    
    MAB("MAB"),
    
    DPM("DPM"),
    
    AZURE_BACKUP_SERVER("AzureBackupServer"),
    
    AZURE_SQL("AzureSql"),
    
    AZURE_STORAGE("AzureStorage"),
    
    AZURE_WORKLOAD("AzureWorkload"),
    
    DEFAULT_BACKUP("DefaultBackup");

    private String value;

    BackupManagementTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BackupManagementTypeEnum fromValue(String value) {
      for (BackupManagementTypeEnum b : BackupManagementTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BackupManagementTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BackupManagementTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BackupManagementTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BackupManagementTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      BackupManagementTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_BACKUP_MANAGEMENT_TYPE = "backupManagementType";
  @SerializedName(SERIALIZED_NAME_BACKUP_MANAGEMENT_TYPE)
  private BackupManagementTypeEnum backupManagementType;

  public static final String SERIALIZED_NAME_END_TIME = "endTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private OffsetDateTime endTime;

  public static final String SERIALIZED_NAME_JOB_ID = "jobId";
  @SerializedName(SERIALIZED_NAME_JOB_ID)
  private String jobId;

  /**
   * Type of operation.
   */
  @JsonAdapter(OperationEnum.Adapter.class)
  public enum OperationEnum {
    INVALID("Invalid"),
    
    REGISTER("Register"),
    
    UN_REGISTER("UnRegister"),
    
    CONFIGURE_BACKUP("ConfigureBackup"),
    
    BACKUP("Backup"),
    
    RESTORE("Restore"),
    
    DISABLE_BACKUP("DisableBackup"),
    
    DELETE_BACKUP_DATA("DeleteBackupData"),
    
    CROSS_REGION_RESTORE("CrossRegionRestore"),
    
    UNDELETE("Undelete");

    private String value;

    OperationEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OperationEnum fromValue(String value) {
      for (OperationEnum b : OperationEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OperationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OperationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OperationEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OperationEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OperationEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_OPERATION = "operation";
  @SerializedName(SERIALIZED_NAME_OPERATION)
  private OperationEnum operation;

  public static final String SERIALIZED_NAME_START_TIME = "startTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private OffsetDateTime startTime;

  /**
   * Status of the job.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    INVALID("Invalid"),
    
    IN_PROGRESS("InProgress"),
    
    COMPLETED("Completed"),
    
    FAILED("Failed"),
    
    COMPLETED_WITH_WARNINGS("CompletedWithWarnings"),
    
    CANCELLED("Cancelled"),
    
    CANCELLING("Cancelling");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public JobQueryObject() {
  }

  public JobQueryObject backupManagementType(BackupManagementTypeEnum backupManagementType) {
    this.backupManagementType = backupManagementType;
    return this;
  }

  /**
   * Type of backup management for the job.
   * @return backupManagementType
   */
  @javax.annotation.Nullable
  public BackupManagementTypeEnum getBackupManagementType() {
    return backupManagementType;
  }

  public void setBackupManagementType(BackupManagementTypeEnum backupManagementType) {
    this.backupManagementType = backupManagementType;
  }


  public JobQueryObject endTime(OffsetDateTime endTime) {
    this.endTime = endTime;
    return this;
  }

  /**
   * Job has ended at this time. Value is in UTC.
   * @return endTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEndTime() {
    return endTime;
  }

  public void setEndTime(OffsetDateTime endTime) {
    this.endTime = endTime;
  }


  public JobQueryObject jobId(String jobId) {
    this.jobId = jobId;
    return this;
  }

  /**
   * JobID represents the job uniquely.
   * @return jobId
   */
  @javax.annotation.Nullable
  public String getJobId() {
    return jobId;
  }

  public void setJobId(String jobId) {
    this.jobId = jobId;
  }


  public JobQueryObject operation(OperationEnum operation) {
    this.operation = operation;
    return this;
  }

  /**
   * Type of operation.
   * @return operation
   */
  @javax.annotation.Nullable
  public OperationEnum getOperation() {
    return operation;
  }

  public void setOperation(OperationEnum operation) {
    this.operation = operation;
  }


  public JobQueryObject startTime(OffsetDateTime startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * Job has started at this time. Value is in UTC.
   * @return startTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartTime() {
    return startTime;
  }

  public void setStartTime(OffsetDateTime startTime) {
    this.startTime = startTime;
  }


  public JobQueryObject status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * Status of the job.
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JobQueryObject jobQueryObject = (JobQueryObject) o;
    return Objects.equals(this.backupManagementType, jobQueryObject.backupManagementType) &&
        Objects.equals(this.endTime, jobQueryObject.endTime) &&
        Objects.equals(this.jobId, jobQueryObject.jobId) &&
        Objects.equals(this.operation, jobQueryObject.operation) &&
        Objects.equals(this.startTime, jobQueryObject.startTime) &&
        Objects.equals(this.status, jobQueryObject.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(backupManagementType, endTime, jobId, operation, startTime, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JobQueryObject {\n");
    sb.append("    backupManagementType: ").append(toIndentedString(backupManagementType)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    jobId: ").append(toIndentedString(jobId)).append("\n");
    sb.append("    operation: ").append(toIndentedString(operation)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("backupManagementType");
    openapiFields.add("endTime");
    openapiFields.add("jobId");
    openapiFields.add("operation");
    openapiFields.add("startTime");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to JobQueryObject
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!JobQueryObject.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in JobQueryObject is not found in the empty JSON string", JobQueryObject.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!JobQueryObject.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `JobQueryObject` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("backupManagementType") != null && !jsonObj.get("backupManagementType").isJsonNull()) && !jsonObj.get("backupManagementType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `backupManagementType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("backupManagementType").toString()));
      }
      // validate the optional field `backupManagementType`
      if (jsonObj.get("backupManagementType") != null && !jsonObj.get("backupManagementType").isJsonNull()) {
        BackupManagementTypeEnum.validateJsonElement(jsonObj.get("backupManagementType"));
      }
      if ((jsonObj.get("jobId") != null && !jsonObj.get("jobId").isJsonNull()) && !jsonObj.get("jobId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jobId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jobId").toString()));
      }
      if ((jsonObj.get("operation") != null && !jsonObj.get("operation").isJsonNull()) && !jsonObj.get("operation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `operation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("operation").toString()));
      }
      // validate the optional field `operation`
      if (jsonObj.get("operation") != null && !jsonObj.get("operation").isJsonNull()) {
        OperationEnum.validateJsonElement(jsonObj.get("operation"));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!JobQueryObject.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'JobQueryObject' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<JobQueryObject> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(JobQueryObject.class));

       return (TypeAdapter<T>) new TypeAdapter<JobQueryObject>() {
           @Override
           public void write(JsonWriter out, JobQueryObject value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public JobQueryObject read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of JobQueryObject given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of JobQueryObject
   * @throws IOException if the JSON string is invalid with respect to JobQueryObject
   */
  public static JobQueryObject fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, JobQueryObject.class);
  }

  /**
   * Convert an instance of JobQueryObject to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

