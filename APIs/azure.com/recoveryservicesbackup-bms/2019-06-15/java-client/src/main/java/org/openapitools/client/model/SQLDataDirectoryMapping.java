/*
 * RecoveryServicesBackupClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-06-15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Encapsulates information regarding data directory
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:08:58.744593-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SQLDataDirectoryMapping {
  /**
   * Type of data directory mapping
   */
  @JsonAdapter(MappingTypeEnum.Adapter.class)
  public enum MappingTypeEnum {
    INVALID("Invalid"),
    
    DATA("Data"),
    
    LOG("Log");

    private String value;

    MappingTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MappingTypeEnum fromValue(String value) {
      for (MappingTypeEnum b : MappingTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MappingTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MappingTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MappingTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MappingTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MappingTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MAPPING_TYPE = "mappingType";
  @SerializedName(SERIALIZED_NAME_MAPPING_TYPE)
  private MappingTypeEnum mappingType;

  public static final String SERIALIZED_NAME_SOURCE_LOGICAL_NAME = "sourceLogicalName";
  @SerializedName(SERIALIZED_NAME_SOURCE_LOGICAL_NAME)
  private String sourceLogicalName;

  public static final String SERIALIZED_NAME_SOURCE_PATH = "sourcePath";
  @SerializedName(SERIALIZED_NAME_SOURCE_PATH)
  private String sourcePath;

  public static final String SERIALIZED_NAME_TARGET_PATH = "targetPath";
  @SerializedName(SERIALIZED_NAME_TARGET_PATH)
  private String targetPath;

  public SQLDataDirectoryMapping() {
  }

  public SQLDataDirectoryMapping mappingType(MappingTypeEnum mappingType) {
    this.mappingType = mappingType;
    return this;
  }

  /**
   * Type of data directory mapping
   * @return mappingType
   */
  @javax.annotation.Nullable
  public MappingTypeEnum getMappingType() {
    return mappingType;
  }

  public void setMappingType(MappingTypeEnum mappingType) {
    this.mappingType = mappingType;
  }


  public SQLDataDirectoryMapping sourceLogicalName(String sourceLogicalName) {
    this.sourceLogicalName = sourceLogicalName;
    return this;
  }

  /**
   * Restore source logical name path
   * @return sourceLogicalName
   */
  @javax.annotation.Nullable
  public String getSourceLogicalName() {
    return sourceLogicalName;
  }

  public void setSourceLogicalName(String sourceLogicalName) {
    this.sourceLogicalName = sourceLogicalName;
  }


  public SQLDataDirectoryMapping sourcePath(String sourcePath) {
    this.sourcePath = sourcePath;
    return this;
  }

  /**
   * Restore source path
   * @return sourcePath
   */
  @javax.annotation.Nullable
  public String getSourcePath() {
    return sourcePath;
  }

  public void setSourcePath(String sourcePath) {
    this.sourcePath = sourcePath;
  }


  public SQLDataDirectoryMapping targetPath(String targetPath) {
    this.targetPath = targetPath;
    return this;
  }

  /**
   * Target path
   * @return targetPath
   */
  @javax.annotation.Nullable
  public String getTargetPath() {
    return targetPath;
  }

  public void setTargetPath(String targetPath) {
    this.targetPath = targetPath;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SQLDataDirectoryMapping sqLDataDirectoryMapping = (SQLDataDirectoryMapping) o;
    return Objects.equals(this.mappingType, sqLDataDirectoryMapping.mappingType) &&
        Objects.equals(this.sourceLogicalName, sqLDataDirectoryMapping.sourceLogicalName) &&
        Objects.equals(this.sourcePath, sqLDataDirectoryMapping.sourcePath) &&
        Objects.equals(this.targetPath, sqLDataDirectoryMapping.targetPath);
  }

  @Override
  public int hashCode() {
    return Objects.hash(mappingType, sourceLogicalName, sourcePath, targetPath);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SQLDataDirectoryMapping {\n");
    sb.append("    mappingType: ").append(toIndentedString(mappingType)).append("\n");
    sb.append("    sourceLogicalName: ").append(toIndentedString(sourceLogicalName)).append("\n");
    sb.append("    sourcePath: ").append(toIndentedString(sourcePath)).append("\n");
    sb.append("    targetPath: ").append(toIndentedString(targetPath)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("mappingType");
    openapiFields.add("sourceLogicalName");
    openapiFields.add("sourcePath");
    openapiFields.add("targetPath");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SQLDataDirectoryMapping
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SQLDataDirectoryMapping.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SQLDataDirectoryMapping is not found in the empty JSON string", SQLDataDirectoryMapping.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SQLDataDirectoryMapping.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SQLDataDirectoryMapping` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("mappingType") != null && !jsonObj.get("mappingType").isJsonNull()) && !jsonObj.get("mappingType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mappingType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mappingType").toString()));
      }
      // validate the optional field `mappingType`
      if (jsonObj.get("mappingType") != null && !jsonObj.get("mappingType").isJsonNull()) {
        MappingTypeEnum.validateJsonElement(jsonObj.get("mappingType"));
      }
      if ((jsonObj.get("sourceLogicalName") != null && !jsonObj.get("sourceLogicalName").isJsonNull()) && !jsonObj.get("sourceLogicalName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceLogicalName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceLogicalName").toString()));
      }
      if ((jsonObj.get("sourcePath") != null && !jsonObj.get("sourcePath").isJsonNull()) && !jsonObj.get("sourcePath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourcePath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourcePath").toString()));
      }
      if ((jsonObj.get("targetPath") != null && !jsonObj.get("targetPath").isJsonNull()) && !jsonObj.get("targetPath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetPath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("targetPath").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SQLDataDirectoryMapping.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SQLDataDirectoryMapping' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SQLDataDirectoryMapping> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SQLDataDirectoryMapping.class));

       return (TypeAdapter<T>) new TypeAdapter<SQLDataDirectoryMapping>() {
           @Override
           public void write(JsonWriter out, SQLDataDirectoryMapping value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SQLDataDirectoryMapping read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SQLDataDirectoryMapping given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SQLDataDirectoryMapping
   * @throws IOException if the JSON string is invalid with respect to SQLDataDirectoryMapping
   */
  public static SQLDataDirectoryMapping fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SQLDataDirectoryMapping.class);
  }

  /**
   * Convert an instance of SQLDataDirectoryMapping to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

