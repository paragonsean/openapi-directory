/**
 * RecoveryServicesBackupClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-06-15
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISettings::OAISettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISettings::OAISettings() {
    this->initializeModel();
}

OAISettings::~OAISettings() {}

void OAISettings::initializeModel() {

    m_is_compression_isSet = false;
    m_is_compression_isValid = false;

    m_issqlcompression_isSet = false;
    m_issqlcompression_isValid = false;

    m_time_zone_isSet = false;
    m_time_zone_isValid = false;
}

void OAISettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISettings::fromJsonObject(QJsonObject json) {

    m_is_compression_isValid = ::OpenAPI::fromJsonValue(m_is_compression, json[QString("isCompression")]);
    m_is_compression_isSet = !json[QString("isCompression")].isNull() && m_is_compression_isValid;

    m_issqlcompression_isValid = ::OpenAPI::fromJsonValue(m_issqlcompression, json[QString("issqlcompression")]);
    m_issqlcompression_isSet = !json[QString("issqlcompression")].isNull() && m_issqlcompression_isValid;

    m_time_zone_isValid = ::OpenAPI::fromJsonValue(m_time_zone, json[QString("timeZone")]);
    m_time_zone_isSet = !json[QString("timeZone")].isNull() && m_time_zone_isValid;
}

QString OAISettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISettings::asJsonObject() const {
    QJsonObject obj;
    if (m_is_compression_isSet) {
        obj.insert(QString("isCompression"), ::OpenAPI::toJsonValue(m_is_compression));
    }
    if (m_issqlcompression_isSet) {
        obj.insert(QString("issqlcompression"), ::OpenAPI::toJsonValue(m_issqlcompression));
    }
    if (m_time_zone_isSet) {
        obj.insert(QString("timeZone"), ::OpenAPI::toJsonValue(m_time_zone));
    }
    return obj;
}

bool OAISettings::isIsCompression() const {
    return m_is_compression;
}
void OAISettings::setIsCompression(const bool &is_compression) {
    m_is_compression = is_compression;
    m_is_compression_isSet = true;
}

bool OAISettings::is_is_compression_Set() const{
    return m_is_compression_isSet;
}

bool OAISettings::is_is_compression_Valid() const{
    return m_is_compression_isValid;
}

bool OAISettings::isIssqlcompression() const {
    return m_issqlcompression;
}
void OAISettings::setIssqlcompression(const bool &issqlcompression) {
    m_issqlcompression = issqlcompression;
    m_issqlcompression_isSet = true;
}

bool OAISettings::is_issqlcompression_Set() const{
    return m_issqlcompression_isSet;
}

bool OAISettings::is_issqlcompression_Valid() const{
    return m_issqlcompression_isValid;
}

QString OAISettings::getTimeZone() const {
    return m_time_zone;
}
void OAISettings::setTimeZone(const QString &time_zone) {
    m_time_zone = time_zone;
    m_time_zone_isSet = true;
}

bool OAISettings::is_time_zone_Set() const{
    return m_time_zone_isSet;
}

bool OAISettings::is_time_zone_Valid() const{
    return m_time_zone_isValid;
}

bool OAISettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_is_compression_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issqlcompression_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_zone_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
