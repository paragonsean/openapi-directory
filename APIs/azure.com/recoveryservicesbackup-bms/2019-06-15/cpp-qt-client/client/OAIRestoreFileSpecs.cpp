/**
 * RecoveryServicesBackupClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-06-15
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRestoreFileSpecs.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRestoreFileSpecs::OAIRestoreFileSpecs(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRestoreFileSpecs::OAIRestoreFileSpecs() {
    this->initializeModel();
}

OAIRestoreFileSpecs::~OAIRestoreFileSpecs() {}

void OAIRestoreFileSpecs::initializeModel() {

    m_file_spec_type_isSet = false;
    m_file_spec_type_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_target_folder_path_isSet = false;
    m_target_folder_path_isValid = false;
}

void OAIRestoreFileSpecs::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRestoreFileSpecs::fromJsonObject(QJsonObject json) {

    m_file_spec_type_isValid = ::OpenAPI::fromJsonValue(m_file_spec_type, json[QString("fileSpecType")]);
    m_file_spec_type_isSet = !json[QString("fileSpecType")].isNull() && m_file_spec_type_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;

    m_target_folder_path_isValid = ::OpenAPI::fromJsonValue(m_target_folder_path, json[QString("targetFolderPath")]);
    m_target_folder_path_isSet = !json[QString("targetFolderPath")].isNull() && m_target_folder_path_isValid;
}

QString OAIRestoreFileSpecs::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRestoreFileSpecs::asJsonObject() const {
    QJsonObject obj;
    if (m_file_spec_type_isSet) {
        obj.insert(QString("fileSpecType"), ::OpenAPI::toJsonValue(m_file_spec_type));
    }
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_target_folder_path_isSet) {
        obj.insert(QString("targetFolderPath"), ::OpenAPI::toJsonValue(m_target_folder_path));
    }
    return obj;
}

QString OAIRestoreFileSpecs::getFileSpecType() const {
    return m_file_spec_type;
}
void OAIRestoreFileSpecs::setFileSpecType(const QString &file_spec_type) {
    m_file_spec_type = file_spec_type;
    m_file_spec_type_isSet = true;
}

bool OAIRestoreFileSpecs::is_file_spec_type_Set() const{
    return m_file_spec_type_isSet;
}

bool OAIRestoreFileSpecs::is_file_spec_type_Valid() const{
    return m_file_spec_type_isValid;
}

QString OAIRestoreFileSpecs::getPath() const {
    return m_path;
}
void OAIRestoreFileSpecs::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIRestoreFileSpecs::is_path_Set() const{
    return m_path_isSet;
}

bool OAIRestoreFileSpecs::is_path_Valid() const{
    return m_path_isValid;
}

QString OAIRestoreFileSpecs::getTargetFolderPath() const {
    return m_target_folder_path;
}
void OAIRestoreFileSpecs::setTargetFolderPath(const QString &target_folder_path) {
    m_target_folder_path = target_folder_path;
    m_target_folder_path_isSet = true;
}

bool OAIRestoreFileSpecs::is_target_folder_path_Set() const{
    return m_target_folder_path_isSet;
}

bool OAIRestoreFileSpecs::is_target_folder_path_Valid() const{
    return m_target_folder_path_isValid;
}

bool OAIRestoreFileSpecs::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_file_spec_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_folder_path_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRestoreFileSpecs::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
