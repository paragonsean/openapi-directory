/**
 * RecoveryServicesBackupClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-06-15
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAzureFileShareRestoreRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAzureFileShareRestoreRequest::OAIAzureFileShareRestoreRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAzureFileShareRestoreRequest::OAIAzureFileShareRestoreRequest() {
    this->initializeModel();
}

OAIAzureFileShareRestoreRequest::~OAIAzureFileShareRestoreRequest() {}

void OAIAzureFileShareRestoreRequest::initializeModel() {

    m_copy_options_isSet = false;
    m_copy_options_isValid = false;

    m_recovery_type_isSet = false;
    m_recovery_type_isValid = false;

    m_restore_file_specs_isSet = false;
    m_restore_file_specs_isValid = false;

    m_restore_request_type_isSet = false;
    m_restore_request_type_isValid = false;

    m_source_resource_id_isSet = false;
    m_source_resource_id_isValid = false;

    m_target_details_isSet = false;
    m_target_details_isValid = false;

    m_object_type_isSet = false;
    m_object_type_isValid = false;
}

void OAIAzureFileShareRestoreRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAzureFileShareRestoreRequest::fromJsonObject(QJsonObject json) {

    m_copy_options_isValid = ::OpenAPI::fromJsonValue(m_copy_options, json[QString("copyOptions")]);
    m_copy_options_isSet = !json[QString("copyOptions")].isNull() && m_copy_options_isValid;

    m_recovery_type_isValid = ::OpenAPI::fromJsonValue(m_recovery_type, json[QString("recoveryType")]);
    m_recovery_type_isSet = !json[QString("recoveryType")].isNull() && m_recovery_type_isValid;

    m_restore_file_specs_isValid = ::OpenAPI::fromJsonValue(m_restore_file_specs, json[QString("restoreFileSpecs")]);
    m_restore_file_specs_isSet = !json[QString("restoreFileSpecs")].isNull() && m_restore_file_specs_isValid;

    m_restore_request_type_isValid = ::OpenAPI::fromJsonValue(m_restore_request_type, json[QString("restoreRequestType")]);
    m_restore_request_type_isSet = !json[QString("restoreRequestType")].isNull() && m_restore_request_type_isValid;

    m_source_resource_id_isValid = ::OpenAPI::fromJsonValue(m_source_resource_id, json[QString("sourceResourceId")]);
    m_source_resource_id_isSet = !json[QString("sourceResourceId")].isNull() && m_source_resource_id_isValid;

    m_target_details_isValid = ::OpenAPI::fromJsonValue(m_target_details, json[QString("targetDetails")]);
    m_target_details_isSet = !json[QString("targetDetails")].isNull() && m_target_details_isValid;

    m_object_type_isValid = ::OpenAPI::fromJsonValue(m_object_type, json[QString("objectType")]);
    m_object_type_isSet = !json[QString("objectType")].isNull() && m_object_type_isValid;
}

QString OAIAzureFileShareRestoreRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAzureFileShareRestoreRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_copy_options_isSet) {
        obj.insert(QString("copyOptions"), ::OpenAPI::toJsonValue(m_copy_options));
    }
    if (m_recovery_type_isSet) {
        obj.insert(QString("recoveryType"), ::OpenAPI::toJsonValue(m_recovery_type));
    }
    if (m_restore_file_specs.size() > 0) {
        obj.insert(QString("restoreFileSpecs"), ::OpenAPI::toJsonValue(m_restore_file_specs));
    }
    if (m_restore_request_type_isSet) {
        obj.insert(QString("restoreRequestType"), ::OpenAPI::toJsonValue(m_restore_request_type));
    }
    if (m_source_resource_id_isSet) {
        obj.insert(QString("sourceResourceId"), ::OpenAPI::toJsonValue(m_source_resource_id));
    }
    if (m_target_details.isSet()) {
        obj.insert(QString("targetDetails"), ::OpenAPI::toJsonValue(m_target_details));
    }
    if (m_object_type_isSet) {
        obj.insert(QString("objectType"), ::OpenAPI::toJsonValue(m_object_type));
    }
    return obj;
}

QString OAIAzureFileShareRestoreRequest::getCopyOptions() const {
    return m_copy_options;
}
void OAIAzureFileShareRestoreRequest::setCopyOptions(const QString &copy_options) {
    m_copy_options = copy_options;
    m_copy_options_isSet = true;
}

bool OAIAzureFileShareRestoreRequest::is_copy_options_Set() const{
    return m_copy_options_isSet;
}

bool OAIAzureFileShareRestoreRequest::is_copy_options_Valid() const{
    return m_copy_options_isValid;
}

QString OAIAzureFileShareRestoreRequest::getRecoveryType() const {
    return m_recovery_type;
}
void OAIAzureFileShareRestoreRequest::setRecoveryType(const QString &recovery_type) {
    m_recovery_type = recovery_type;
    m_recovery_type_isSet = true;
}

bool OAIAzureFileShareRestoreRequest::is_recovery_type_Set() const{
    return m_recovery_type_isSet;
}

bool OAIAzureFileShareRestoreRequest::is_recovery_type_Valid() const{
    return m_recovery_type_isValid;
}

QList<OAIRestoreFileSpecs> OAIAzureFileShareRestoreRequest::getRestoreFileSpecs() const {
    return m_restore_file_specs;
}
void OAIAzureFileShareRestoreRequest::setRestoreFileSpecs(const QList<OAIRestoreFileSpecs> &restore_file_specs) {
    m_restore_file_specs = restore_file_specs;
    m_restore_file_specs_isSet = true;
}

bool OAIAzureFileShareRestoreRequest::is_restore_file_specs_Set() const{
    return m_restore_file_specs_isSet;
}

bool OAIAzureFileShareRestoreRequest::is_restore_file_specs_Valid() const{
    return m_restore_file_specs_isValid;
}

QString OAIAzureFileShareRestoreRequest::getRestoreRequestType() const {
    return m_restore_request_type;
}
void OAIAzureFileShareRestoreRequest::setRestoreRequestType(const QString &restore_request_type) {
    m_restore_request_type = restore_request_type;
    m_restore_request_type_isSet = true;
}

bool OAIAzureFileShareRestoreRequest::is_restore_request_type_Set() const{
    return m_restore_request_type_isSet;
}

bool OAIAzureFileShareRestoreRequest::is_restore_request_type_Valid() const{
    return m_restore_request_type_isValid;
}

QString OAIAzureFileShareRestoreRequest::getSourceResourceId() const {
    return m_source_resource_id;
}
void OAIAzureFileShareRestoreRequest::setSourceResourceId(const QString &source_resource_id) {
    m_source_resource_id = source_resource_id;
    m_source_resource_id_isSet = true;
}

bool OAIAzureFileShareRestoreRequest::is_source_resource_id_Set() const{
    return m_source_resource_id_isSet;
}

bool OAIAzureFileShareRestoreRequest::is_source_resource_id_Valid() const{
    return m_source_resource_id_isValid;
}

OAITargetAFSRestoreInfo OAIAzureFileShareRestoreRequest::getTargetDetails() const {
    return m_target_details;
}
void OAIAzureFileShareRestoreRequest::setTargetDetails(const OAITargetAFSRestoreInfo &target_details) {
    m_target_details = target_details;
    m_target_details_isSet = true;
}

bool OAIAzureFileShareRestoreRequest::is_target_details_Set() const{
    return m_target_details_isSet;
}

bool OAIAzureFileShareRestoreRequest::is_target_details_Valid() const{
    return m_target_details_isValid;
}

QString OAIAzureFileShareRestoreRequest::getObjectType() const {
    return m_object_type;
}
void OAIAzureFileShareRestoreRequest::setObjectType(const QString &object_type) {
    m_object_type = object_type;
    m_object_type_isSet = true;
}

bool OAIAzureFileShareRestoreRequest::is_object_type_Set() const{
    return m_object_type_isSet;
}

bool OAIAzureFileShareRestoreRequest::is_object_type_Valid() const{
    return m_object_type_isValid;
}

bool OAIAzureFileShareRestoreRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_copy_options_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recovery_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_restore_file_specs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_restore_request_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAzureFileShareRestoreRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_object_type_isValid && true;
}

} // namespace OpenAPI
