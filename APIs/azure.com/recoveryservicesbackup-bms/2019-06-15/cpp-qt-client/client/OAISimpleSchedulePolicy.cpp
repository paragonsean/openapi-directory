/**
 * RecoveryServicesBackupClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-06-15
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISimpleSchedulePolicy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISimpleSchedulePolicy::OAISimpleSchedulePolicy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISimpleSchedulePolicy::OAISimpleSchedulePolicy() {
    this->initializeModel();
}

OAISimpleSchedulePolicy::~OAISimpleSchedulePolicy() {}

void OAISimpleSchedulePolicy::initializeModel() {

    m_schedule_run_days_isSet = false;
    m_schedule_run_days_isValid = false;

    m_schedule_run_frequency_isSet = false;
    m_schedule_run_frequency_isValid = false;

    m_schedule_run_times_isSet = false;
    m_schedule_run_times_isValid = false;

    m_schedule_weekly_frequency_isSet = false;
    m_schedule_weekly_frequency_isValid = false;

    m_schedule_policy_type_isSet = false;
    m_schedule_policy_type_isValid = false;
}

void OAISimpleSchedulePolicy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISimpleSchedulePolicy::fromJsonObject(QJsonObject json) {

    m_schedule_run_days_isValid = ::OpenAPI::fromJsonValue(m_schedule_run_days, json[QString("scheduleRunDays")]);
    m_schedule_run_days_isSet = !json[QString("scheduleRunDays")].isNull() && m_schedule_run_days_isValid;

    m_schedule_run_frequency_isValid = ::OpenAPI::fromJsonValue(m_schedule_run_frequency, json[QString("scheduleRunFrequency")]);
    m_schedule_run_frequency_isSet = !json[QString("scheduleRunFrequency")].isNull() && m_schedule_run_frequency_isValid;

    m_schedule_run_times_isValid = ::OpenAPI::fromJsonValue(m_schedule_run_times, json[QString("scheduleRunTimes")]);
    m_schedule_run_times_isSet = !json[QString("scheduleRunTimes")].isNull() && m_schedule_run_times_isValid;

    m_schedule_weekly_frequency_isValid = ::OpenAPI::fromJsonValue(m_schedule_weekly_frequency, json[QString("scheduleWeeklyFrequency")]);
    m_schedule_weekly_frequency_isSet = !json[QString("scheduleWeeklyFrequency")].isNull() && m_schedule_weekly_frequency_isValid;

    m_schedule_policy_type_isValid = ::OpenAPI::fromJsonValue(m_schedule_policy_type, json[QString("schedulePolicyType")]);
    m_schedule_policy_type_isSet = !json[QString("schedulePolicyType")].isNull() && m_schedule_policy_type_isValid;
}

QString OAISimpleSchedulePolicy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISimpleSchedulePolicy::asJsonObject() const {
    QJsonObject obj;
    if (m_schedule_run_days.size() > 0) {
        obj.insert(QString("scheduleRunDays"), ::OpenAPI::toJsonValue(m_schedule_run_days));
    }
    if (m_schedule_run_frequency_isSet) {
        obj.insert(QString("scheduleRunFrequency"), ::OpenAPI::toJsonValue(m_schedule_run_frequency));
    }
    if (m_schedule_run_times.size() > 0) {
        obj.insert(QString("scheduleRunTimes"), ::OpenAPI::toJsonValue(m_schedule_run_times));
    }
    if (m_schedule_weekly_frequency_isSet) {
        obj.insert(QString("scheduleWeeklyFrequency"), ::OpenAPI::toJsonValue(m_schedule_weekly_frequency));
    }
    if (m_schedule_policy_type_isSet) {
        obj.insert(QString("schedulePolicyType"), ::OpenAPI::toJsonValue(m_schedule_policy_type));
    }
    return obj;
}

QList<QString> OAISimpleSchedulePolicy::getScheduleRunDays() const {
    return m_schedule_run_days;
}
void OAISimpleSchedulePolicy::setScheduleRunDays(const QList<QString> &schedule_run_days) {
    m_schedule_run_days = schedule_run_days;
    m_schedule_run_days_isSet = true;
}

bool OAISimpleSchedulePolicy::is_schedule_run_days_Set() const{
    return m_schedule_run_days_isSet;
}

bool OAISimpleSchedulePolicy::is_schedule_run_days_Valid() const{
    return m_schedule_run_days_isValid;
}

QString OAISimpleSchedulePolicy::getScheduleRunFrequency() const {
    return m_schedule_run_frequency;
}
void OAISimpleSchedulePolicy::setScheduleRunFrequency(const QString &schedule_run_frequency) {
    m_schedule_run_frequency = schedule_run_frequency;
    m_schedule_run_frequency_isSet = true;
}

bool OAISimpleSchedulePolicy::is_schedule_run_frequency_Set() const{
    return m_schedule_run_frequency_isSet;
}

bool OAISimpleSchedulePolicy::is_schedule_run_frequency_Valid() const{
    return m_schedule_run_frequency_isValid;
}

QList<QDateTime> OAISimpleSchedulePolicy::getScheduleRunTimes() const {
    return m_schedule_run_times;
}
void OAISimpleSchedulePolicy::setScheduleRunTimes(const QList<QDateTime> &schedule_run_times) {
    m_schedule_run_times = schedule_run_times;
    m_schedule_run_times_isSet = true;
}

bool OAISimpleSchedulePolicy::is_schedule_run_times_Set() const{
    return m_schedule_run_times_isSet;
}

bool OAISimpleSchedulePolicy::is_schedule_run_times_Valid() const{
    return m_schedule_run_times_isValid;
}

qint32 OAISimpleSchedulePolicy::getScheduleWeeklyFrequency() const {
    return m_schedule_weekly_frequency;
}
void OAISimpleSchedulePolicy::setScheduleWeeklyFrequency(const qint32 &schedule_weekly_frequency) {
    m_schedule_weekly_frequency = schedule_weekly_frequency;
    m_schedule_weekly_frequency_isSet = true;
}

bool OAISimpleSchedulePolicy::is_schedule_weekly_frequency_Set() const{
    return m_schedule_weekly_frequency_isSet;
}

bool OAISimpleSchedulePolicy::is_schedule_weekly_frequency_Valid() const{
    return m_schedule_weekly_frequency_isValid;
}

QString OAISimpleSchedulePolicy::getSchedulePolicyType() const {
    return m_schedule_policy_type;
}
void OAISimpleSchedulePolicy::setSchedulePolicyType(const QString &schedule_policy_type) {
    m_schedule_policy_type = schedule_policy_type;
    m_schedule_policy_type_isSet = true;
}

bool OAISimpleSchedulePolicy::is_schedule_policy_type_Set() const{
    return m_schedule_policy_type_isSet;
}

bool OAISimpleSchedulePolicy::is_schedule_policy_type_Valid() const{
    return m_schedule_policy_type_isValid;
}

bool OAISimpleSchedulePolicy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_schedule_run_days.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedule_run_frequency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedule_run_times.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedule_weekly_frequency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedule_policy_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISimpleSchedulePolicy::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_schedule_policy_type_isValid && true;
}

} // namespace OpenAPI
