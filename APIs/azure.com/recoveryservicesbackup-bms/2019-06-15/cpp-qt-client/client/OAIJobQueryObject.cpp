/**
 * RecoveryServicesBackupClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-06-15
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJobQueryObject.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJobQueryObject::OAIJobQueryObject(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJobQueryObject::OAIJobQueryObject() {
    this->initializeModel();
}

OAIJobQueryObject::~OAIJobQueryObject() {}

void OAIJobQueryObject::initializeModel() {

    m_backup_management_type_isSet = false;
    m_backup_management_type_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_job_id_isSet = false;
    m_job_id_isValid = false;

    m_operation_isSet = false;
    m_operation_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIJobQueryObject::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJobQueryObject::fromJsonObject(QJsonObject json) {

    m_backup_management_type_isValid = ::OpenAPI::fromJsonValue(m_backup_management_type, json[QString("backupManagementType")]);
    m_backup_management_type_isSet = !json[QString("backupManagementType")].isNull() && m_backup_management_type_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("endTime")]);
    m_end_time_isSet = !json[QString("endTime")].isNull() && m_end_time_isValid;

    m_job_id_isValid = ::OpenAPI::fromJsonValue(m_job_id, json[QString("jobId")]);
    m_job_id_isSet = !json[QString("jobId")].isNull() && m_job_id_isValid;

    m_operation_isValid = ::OpenAPI::fromJsonValue(m_operation, json[QString("operation")]);
    m_operation_isSet = !json[QString("operation")].isNull() && m_operation_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIJobQueryObject::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJobQueryObject::asJsonObject() const {
    QJsonObject obj;
    if (m_backup_management_type_isSet) {
        obj.insert(QString("backupManagementType"), ::OpenAPI::toJsonValue(m_backup_management_type));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("endTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_job_id_isSet) {
        obj.insert(QString("jobId"), ::OpenAPI::toJsonValue(m_job_id));
    }
    if (m_operation_isSet) {
        obj.insert(QString("operation"), ::OpenAPI::toJsonValue(m_operation));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAIJobQueryObject::getBackupManagementType() const {
    return m_backup_management_type;
}
void OAIJobQueryObject::setBackupManagementType(const QString &backup_management_type) {
    m_backup_management_type = backup_management_type;
    m_backup_management_type_isSet = true;
}

bool OAIJobQueryObject::is_backup_management_type_Set() const{
    return m_backup_management_type_isSet;
}

bool OAIJobQueryObject::is_backup_management_type_Valid() const{
    return m_backup_management_type_isValid;
}

QDateTime OAIJobQueryObject::getEndTime() const {
    return m_end_time;
}
void OAIJobQueryObject::setEndTime(const QDateTime &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIJobQueryObject::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIJobQueryObject::is_end_time_Valid() const{
    return m_end_time_isValid;
}

QString OAIJobQueryObject::getJobId() const {
    return m_job_id;
}
void OAIJobQueryObject::setJobId(const QString &job_id) {
    m_job_id = job_id;
    m_job_id_isSet = true;
}

bool OAIJobQueryObject::is_job_id_Set() const{
    return m_job_id_isSet;
}

bool OAIJobQueryObject::is_job_id_Valid() const{
    return m_job_id_isValid;
}

QString OAIJobQueryObject::getOperation() const {
    return m_operation;
}
void OAIJobQueryObject::setOperation(const QString &operation) {
    m_operation = operation;
    m_operation_isSet = true;
}

bool OAIJobQueryObject::is_operation_Set() const{
    return m_operation_isSet;
}

bool OAIJobQueryObject::is_operation_Valid() const{
    return m_operation_isValid;
}

QDateTime OAIJobQueryObject::getStartTime() const {
    return m_start_time;
}
void OAIJobQueryObject::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIJobQueryObject::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIJobQueryObject::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QString OAIJobQueryObject::getStatus() const {
    return m_status;
}
void OAIJobQueryObject::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIJobQueryObject::is_status_Set() const{
    return m_status_isSet;
}

bool OAIJobQueryObject::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIJobQueryObject::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_backup_management_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJobQueryObject::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
