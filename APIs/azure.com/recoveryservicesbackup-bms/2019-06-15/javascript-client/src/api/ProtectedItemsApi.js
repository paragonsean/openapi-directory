/**
 * RecoveryServicesBackupClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-06-15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ProtectedItemResource from '../model/ProtectedItemResource';

/**
* ProtectedItems service.
* @module api/ProtectedItemsApi
* @version 2019-06-15
*/
export default class ProtectedItemsApi {

    /**
    * Constructs a new ProtectedItemsApi. 
    * @alias module:api/ProtectedItemsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the protectedItemsCreateOrUpdate operation.
     * @callback module:api/ProtectedItemsApi~protectedItemsCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProtectedItemResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enables backup of an item or to modifies the backup policy information of an already backed up item. This is an  asynchronous operation. To know the status of the operation, call the GetItemOperationResult API.
     * @param {String} apiVersion Client Api Version.
     * @param {String} vaultName The name of the recovery services vault.
     * @param {String} resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param {String} subscriptionId The subscription Id.
     * @param {String} fabricName Fabric name associated with the backup item.
     * @param {String} containerName Container name associated with the backup item.
     * @param {String} protectedItemName Item name to be backed up.
     * @param {module:model/ProtectedItemResource} parameters resource backed up item
     * @param {module:api/ProtectedItemsApi~protectedItemsCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProtectedItemResource}
     */
    protectedItemsCreateOrUpdate(apiVersion, vaultName, resourceGroupName, subscriptionId, fabricName, containerName, protectedItemName, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling protectedItemsCreateOrUpdate");
      }
      // verify the required parameter 'vaultName' is set
      if (vaultName === undefined || vaultName === null) {
        throw new Error("Missing the required parameter 'vaultName' when calling protectedItemsCreateOrUpdate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling protectedItemsCreateOrUpdate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling protectedItemsCreateOrUpdate");
      }
      // verify the required parameter 'fabricName' is set
      if (fabricName === undefined || fabricName === null) {
        throw new Error("Missing the required parameter 'fabricName' when calling protectedItemsCreateOrUpdate");
      }
      // verify the required parameter 'containerName' is set
      if (containerName === undefined || containerName === null) {
        throw new Error("Missing the required parameter 'containerName' when calling protectedItemsCreateOrUpdate");
      }
      // verify the required parameter 'protectedItemName' is set
      if (protectedItemName === undefined || protectedItemName === null) {
        throw new Error("Missing the required parameter 'protectedItemName' when calling protectedItemsCreateOrUpdate");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling protectedItemsCreateOrUpdate");
      }

      let pathParams = {
        'vaultName': vaultName,
        'resourceGroupName': resourceGroupName,
        'subscriptionId': subscriptionId,
        'fabricName': fabricName,
        'containerName': containerName,
        'protectedItemName': protectedItemName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProtectedItemResource;
      return this.apiClient.callApi(
        '/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/backupFabrics/{fabricName}/protectionContainers/{containerName}/protectedItems/{protectedItemName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the protectedItemsDelete operation.
     * @callback module:api/ProtectedItemsApi~protectedItemsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Used to disable backup of an item within a container. This is an asynchronous operation. To know the status of the  request, call the GetItemOperationResult API.
     * @param {String} apiVersion Client Api Version.
     * @param {String} vaultName The name of the recovery services vault.
     * @param {String} resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param {String} subscriptionId The subscription Id.
     * @param {String} fabricName Fabric name associated with the backed up item.
     * @param {String} containerName Container name associated with the backed up item.
     * @param {String} protectedItemName Backed up item to be deleted.
     * @param {module:api/ProtectedItemsApi~protectedItemsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    protectedItemsDelete(apiVersion, vaultName, resourceGroupName, subscriptionId, fabricName, containerName, protectedItemName, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling protectedItemsDelete");
      }
      // verify the required parameter 'vaultName' is set
      if (vaultName === undefined || vaultName === null) {
        throw new Error("Missing the required parameter 'vaultName' when calling protectedItemsDelete");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling protectedItemsDelete");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling protectedItemsDelete");
      }
      // verify the required parameter 'fabricName' is set
      if (fabricName === undefined || fabricName === null) {
        throw new Error("Missing the required parameter 'fabricName' when calling protectedItemsDelete");
      }
      // verify the required parameter 'containerName' is set
      if (containerName === undefined || containerName === null) {
        throw new Error("Missing the required parameter 'containerName' when calling protectedItemsDelete");
      }
      // verify the required parameter 'protectedItemName' is set
      if (protectedItemName === undefined || protectedItemName === null) {
        throw new Error("Missing the required parameter 'protectedItemName' when calling protectedItemsDelete");
      }

      let pathParams = {
        'vaultName': vaultName,
        'resourceGroupName': resourceGroupName,
        'subscriptionId': subscriptionId,
        'fabricName': fabricName,
        'containerName': containerName,
        'protectedItemName': protectedItemName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/backupFabrics/{fabricName}/protectionContainers/{containerName}/protectedItems/{protectedItemName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the protectedItemsGet operation.
     * @callback module:api/ProtectedItemsApi~protectedItemsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProtectedItemResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Provides the details of the backed up item. This is an asynchronous operation. To know the status of the operation,  call the GetItemOperationResult API.
     * @param {String} apiVersion Client Api Version.
     * @param {String} vaultName The name of the recovery services vault.
     * @param {String} resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param {String} subscriptionId The subscription Id.
     * @param {String} fabricName Fabric name associated with the backed up item.
     * @param {String} containerName Container name associated with the backed up item.
     * @param {String} protectedItemName Backed up item name whose details are to be fetched.
     * @param {Object} opts Optional parameters
     * @param {String} [filter] OData filter options.
     * @param {module:api/ProtectedItemsApi~protectedItemsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProtectedItemResource}
     */
    protectedItemsGet(apiVersion, vaultName, resourceGroupName, subscriptionId, fabricName, containerName, protectedItemName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling protectedItemsGet");
      }
      // verify the required parameter 'vaultName' is set
      if (vaultName === undefined || vaultName === null) {
        throw new Error("Missing the required parameter 'vaultName' when calling protectedItemsGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling protectedItemsGet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling protectedItemsGet");
      }
      // verify the required parameter 'fabricName' is set
      if (fabricName === undefined || fabricName === null) {
        throw new Error("Missing the required parameter 'fabricName' when calling protectedItemsGet");
      }
      // verify the required parameter 'containerName' is set
      if (containerName === undefined || containerName === null) {
        throw new Error("Missing the required parameter 'containerName' when calling protectedItemsGet");
      }
      // verify the required parameter 'protectedItemName' is set
      if (protectedItemName === undefined || protectedItemName === null) {
        throw new Error("Missing the required parameter 'protectedItemName' when calling protectedItemsGet");
      }

      let pathParams = {
        'vaultName': vaultName,
        'resourceGroupName': resourceGroupName,
        'subscriptionId': subscriptionId,
        'fabricName': fabricName,
        'containerName': containerName,
        'protectedItemName': protectedItemName
      };
      let queryParams = {
        'api-version': apiVersion,
        '$filter': opts['filter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProtectedItemResource;
      return this.apiClient.callApi(
        '/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/backupFabrics/{fabricName}/protectionContainers/{containerName}/protectedItems/{protectedItemName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
