# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.protection_policy import ProtectionPolicy
from openapi_server.models.settings import Settings
from openapi_server.models.sub_protection_policy import SubProtectionPolicy
from openapi_server import util


class AzureVmWorkloadProtectionPolicy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, make_policy_consistent: bool=None, settings: Settings=None, sub_protection_policy: List[SubProtectionPolicy]=None, work_load_type: str=None, backup_management_type: str=None, protected_items_count: int=None):
        """AzureVmWorkloadProtectionPolicy - a model defined in OpenAPI

        :param make_policy_consistent: The make_policy_consistent of this AzureVmWorkloadProtectionPolicy.
        :param settings: The settings of this AzureVmWorkloadProtectionPolicy.
        :param sub_protection_policy: The sub_protection_policy of this AzureVmWorkloadProtectionPolicy.
        :param work_load_type: The work_load_type of this AzureVmWorkloadProtectionPolicy.
        :param backup_management_type: The backup_management_type of this AzureVmWorkloadProtectionPolicy.
        :param protected_items_count: The protected_items_count of this AzureVmWorkloadProtectionPolicy.
        """
        self.openapi_types = {
            'make_policy_consistent': bool,
            'settings': Settings,
            'sub_protection_policy': List[SubProtectionPolicy],
            'work_load_type': str,
            'backup_management_type': str,
            'protected_items_count': int
        }

        self.attribute_map = {
            'make_policy_consistent': 'makePolicyConsistent',
            'settings': 'settings',
            'sub_protection_policy': 'subProtectionPolicy',
            'work_load_type': 'workLoadType',
            'backup_management_type': 'backupManagementType',
            'protected_items_count': 'protectedItemsCount'
        }

        self._make_policy_consistent = make_policy_consistent
        self._settings = settings
        self._sub_protection_policy = sub_protection_policy
        self._work_load_type = work_load_type
        self._backup_management_type = backup_management_type
        self._protected_items_count = protected_items_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AzureVmWorkloadProtectionPolicy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AzureVmWorkloadProtectionPolicy of this AzureVmWorkloadProtectionPolicy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def make_policy_consistent(self):
        """Gets the make_policy_consistent of this AzureVmWorkloadProtectionPolicy.

        Fix the policy inconsistency

        :return: The make_policy_consistent of this AzureVmWorkloadProtectionPolicy.
        :rtype: bool
        """
        return self._make_policy_consistent

    @make_policy_consistent.setter
    def make_policy_consistent(self, make_policy_consistent):
        """Sets the make_policy_consistent of this AzureVmWorkloadProtectionPolicy.

        Fix the policy inconsistency

        :param make_policy_consistent: The make_policy_consistent of this AzureVmWorkloadProtectionPolicy.
        :type make_policy_consistent: bool
        """

        self._make_policy_consistent = make_policy_consistent

    @property
    def settings(self):
        """Gets the settings of this AzureVmWorkloadProtectionPolicy.


        :return: The settings of this AzureVmWorkloadProtectionPolicy.
        :rtype: Settings
        """
        return self._settings

    @settings.setter
    def settings(self, settings):
        """Sets the settings of this AzureVmWorkloadProtectionPolicy.


        :param settings: The settings of this AzureVmWorkloadProtectionPolicy.
        :type settings: Settings
        """

        self._settings = settings

    @property
    def sub_protection_policy(self):
        """Gets the sub_protection_policy of this AzureVmWorkloadProtectionPolicy.

        List of sub-protection policies which includes schedule and retention

        :return: The sub_protection_policy of this AzureVmWorkloadProtectionPolicy.
        :rtype: List[SubProtectionPolicy]
        """
        return self._sub_protection_policy

    @sub_protection_policy.setter
    def sub_protection_policy(self, sub_protection_policy):
        """Sets the sub_protection_policy of this AzureVmWorkloadProtectionPolicy.

        List of sub-protection policies which includes schedule and retention

        :param sub_protection_policy: The sub_protection_policy of this AzureVmWorkloadProtectionPolicy.
        :type sub_protection_policy: List[SubProtectionPolicy]
        """

        self._sub_protection_policy = sub_protection_policy

    @property
    def work_load_type(self):
        """Gets the work_load_type of this AzureVmWorkloadProtectionPolicy.

        Type of workload for the backup management

        :return: The work_load_type of this AzureVmWorkloadProtectionPolicy.
        :rtype: str
        """
        return self._work_load_type

    @work_load_type.setter
    def work_load_type(self, work_load_type):
        """Sets the work_load_type of this AzureVmWorkloadProtectionPolicy.

        Type of workload for the backup management

        :param work_load_type: The work_load_type of this AzureVmWorkloadProtectionPolicy.
        :type work_load_type: str
        """
        allowed_values = ["Invalid", "VM", "FileFolder", "AzureSqlDb", "SQLDB", "Exchange", "Sharepoint", "VMwareVM", "SystemState", "Client", "GenericDataSource", "SQLDataBase", "AzureFileShare", "SAPHanaDatabase", "SAPAseDatabase"]  # noqa: E501
        if work_load_type not in allowed_values:
            raise ValueError(
                "Invalid value for `work_load_type` ({0}), must be one of {1}"
                .format(work_load_type, allowed_values)
            )

        self._work_load_type = work_load_type

    @property
    def backup_management_type(self):
        """Gets the backup_management_type of this AzureVmWorkloadProtectionPolicy.

        This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.

        :return: The backup_management_type of this AzureVmWorkloadProtectionPolicy.
        :rtype: str
        """
        return self._backup_management_type

    @backup_management_type.setter
    def backup_management_type(self, backup_management_type):
        """Sets the backup_management_type of this AzureVmWorkloadProtectionPolicy.

        This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.

        :param backup_management_type: The backup_management_type of this AzureVmWorkloadProtectionPolicy.
        :type backup_management_type: str
        """
        if backup_management_type is None:
            raise ValueError("Invalid value for `backup_management_type`, must not be `None`")

        self._backup_management_type = backup_management_type

    @property
    def protected_items_count(self):
        """Gets the protected_items_count of this AzureVmWorkloadProtectionPolicy.

        Number of items associated with this policy.

        :return: The protected_items_count of this AzureVmWorkloadProtectionPolicy.
        :rtype: int
        """
        return self._protected_items_count

    @protected_items_count.setter
    def protected_items_count(self, protected_items_count):
        """Sets the protected_items_count of this AzureVmWorkloadProtectionPolicy.

        Number of items associated with this policy.

        :param protected_items_count: The protected_items_count of this AzureVmWorkloadProtectionPolicy.
        :type protected_items_count: int
        """

        self._protected_items_count = protected_items_count
