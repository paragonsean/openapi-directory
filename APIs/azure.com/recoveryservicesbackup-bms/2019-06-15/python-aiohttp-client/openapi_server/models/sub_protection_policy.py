# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.retention_policy import RetentionPolicy
from openapi_server.models.schedule_policy import SchedulePolicy
from openapi_server import util


class SubProtectionPolicy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, policy_type: str=None, retention_policy: RetentionPolicy=None, schedule_policy: SchedulePolicy=None):
        """SubProtectionPolicy - a model defined in OpenAPI

        :param policy_type: The policy_type of this SubProtectionPolicy.
        :param retention_policy: The retention_policy of this SubProtectionPolicy.
        :param schedule_policy: The schedule_policy of this SubProtectionPolicy.
        """
        self.openapi_types = {
            'policy_type': str,
            'retention_policy': RetentionPolicy,
            'schedule_policy': SchedulePolicy
        }

        self.attribute_map = {
            'policy_type': 'policyType',
            'retention_policy': 'retentionPolicy',
            'schedule_policy': 'schedulePolicy'
        }

        self._policy_type = policy_type
        self._retention_policy = retention_policy
        self._schedule_policy = schedule_policy

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SubProtectionPolicy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SubProtectionPolicy of this SubProtectionPolicy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def policy_type(self):
        """Gets the policy_type of this SubProtectionPolicy.

        Type of backup policy type

        :return: The policy_type of this SubProtectionPolicy.
        :rtype: str
        """
        return self._policy_type

    @policy_type.setter
    def policy_type(self, policy_type):
        """Sets the policy_type of this SubProtectionPolicy.

        Type of backup policy type

        :param policy_type: The policy_type of this SubProtectionPolicy.
        :type policy_type: str
        """
        allowed_values = ["Invalid", "Full", "Differential", "Log", "CopyOnlyFull"]  # noqa: E501
        if policy_type not in allowed_values:
            raise ValueError(
                "Invalid value for `policy_type` ({0}), must be one of {1}"
                .format(policy_type, allowed_values)
            )

        self._policy_type = policy_type

    @property
    def retention_policy(self):
        """Gets the retention_policy of this SubProtectionPolicy.


        :return: The retention_policy of this SubProtectionPolicy.
        :rtype: RetentionPolicy
        """
        return self._retention_policy

    @retention_policy.setter
    def retention_policy(self, retention_policy):
        """Sets the retention_policy of this SubProtectionPolicy.


        :param retention_policy: The retention_policy of this SubProtectionPolicy.
        :type retention_policy: RetentionPolicy
        """

        self._retention_policy = retention_policy

    @property
    def schedule_policy(self):
        """Gets the schedule_policy of this SubProtectionPolicy.


        :return: The schedule_policy of this SubProtectionPolicy.
        :rtype: SchedulePolicy
        """
        return self._schedule_policy

    @schedule_policy.setter
    def schedule_policy(self, schedule_policy):
        """Sets the schedule_policy of this SubProtectionPolicy.


        :param schedule_policy: The schedule_policy of this SubProtectionPolicy.
        :type schedule_policy: SchedulePolicy
        """

        self._schedule_policy = schedule_policy
