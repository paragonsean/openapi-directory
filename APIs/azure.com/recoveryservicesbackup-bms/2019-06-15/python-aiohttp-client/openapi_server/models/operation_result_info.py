# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.operation_result_info_base import OperationResultInfoBase
from openapi_server import util


class OperationResultInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, job_list: List[str]=None, object_type: str=None):
        """OperationResultInfo - a model defined in OpenAPI

        :param job_list: The job_list of this OperationResultInfo.
        :param object_type: The object_type of this OperationResultInfo.
        """
        self.openapi_types = {
            'job_list': List[str],
            'object_type': str
        }

        self.attribute_map = {
            'job_list': 'jobList',
            'object_type': 'objectType'
        }

        self._job_list = job_list
        self._object_type = object_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OperationResultInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OperationResultInfo of this OperationResultInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def job_list(self):
        """Gets the job_list of this OperationResultInfo.

        List of jobs created by this operation.

        :return: The job_list of this OperationResultInfo.
        :rtype: List[str]
        """
        return self._job_list

    @job_list.setter
    def job_list(self, job_list):
        """Sets the job_list of this OperationResultInfo.

        List of jobs created by this operation.

        :param job_list: The job_list of this OperationResultInfo.
        :type job_list: List[str]
        """

        self._job_list = job_list

    @property
    def object_type(self):
        """Gets the object_type of this OperationResultInfo.

        This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.

        :return: The object_type of this OperationResultInfo.
        :rtype: str
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """Sets the object_type of this OperationResultInfo.

        This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.

        :param object_type: The object_type of this OperationResultInfo.
        :type object_type: str
        """
        if object_type is None:
            raise ValueError("Invalid value for `object_type`, must not be `None`")

        self._object_type = object_type
