# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SQLDataDirectoryMapping(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, mapping_type: str=None, source_logical_name: str=None, source_path: str=None, target_path: str=None):
        """SQLDataDirectoryMapping - a model defined in OpenAPI

        :param mapping_type: The mapping_type of this SQLDataDirectoryMapping.
        :param source_logical_name: The source_logical_name of this SQLDataDirectoryMapping.
        :param source_path: The source_path of this SQLDataDirectoryMapping.
        :param target_path: The target_path of this SQLDataDirectoryMapping.
        """
        self.openapi_types = {
            'mapping_type': str,
            'source_logical_name': str,
            'source_path': str,
            'target_path': str
        }

        self.attribute_map = {
            'mapping_type': 'mappingType',
            'source_logical_name': 'sourceLogicalName',
            'source_path': 'sourcePath',
            'target_path': 'targetPath'
        }

        self._mapping_type = mapping_type
        self._source_logical_name = source_logical_name
        self._source_path = source_path
        self._target_path = target_path

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SQLDataDirectoryMapping':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SQLDataDirectoryMapping of this SQLDataDirectoryMapping.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def mapping_type(self):
        """Gets the mapping_type of this SQLDataDirectoryMapping.

        Type of data directory mapping

        :return: The mapping_type of this SQLDataDirectoryMapping.
        :rtype: str
        """
        return self._mapping_type

    @mapping_type.setter
    def mapping_type(self, mapping_type):
        """Sets the mapping_type of this SQLDataDirectoryMapping.

        Type of data directory mapping

        :param mapping_type: The mapping_type of this SQLDataDirectoryMapping.
        :type mapping_type: str
        """
        allowed_values = ["Invalid", "Data", "Log"]  # noqa: E501
        if mapping_type not in allowed_values:
            raise ValueError(
                "Invalid value for `mapping_type` ({0}), must be one of {1}"
                .format(mapping_type, allowed_values)
            )

        self._mapping_type = mapping_type

    @property
    def source_logical_name(self):
        """Gets the source_logical_name of this SQLDataDirectoryMapping.

        Restore source logical name path

        :return: The source_logical_name of this SQLDataDirectoryMapping.
        :rtype: str
        """
        return self._source_logical_name

    @source_logical_name.setter
    def source_logical_name(self, source_logical_name):
        """Sets the source_logical_name of this SQLDataDirectoryMapping.

        Restore source logical name path

        :param source_logical_name: The source_logical_name of this SQLDataDirectoryMapping.
        :type source_logical_name: str
        """

        self._source_logical_name = source_logical_name

    @property
    def source_path(self):
        """Gets the source_path of this SQLDataDirectoryMapping.

        Restore source path

        :return: The source_path of this SQLDataDirectoryMapping.
        :rtype: str
        """
        return self._source_path

    @source_path.setter
    def source_path(self, source_path):
        """Sets the source_path of this SQLDataDirectoryMapping.

        Restore source path

        :param source_path: The source_path of this SQLDataDirectoryMapping.
        :type source_path: str
        """

        self._source_path = source_path

    @property
    def target_path(self):
        """Gets the target_path of this SQLDataDirectoryMapping.

        Target path

        :return: The target_path of this SQLDataDirectoryMapping.
        :rtype: str
        """
        return self._target_path

    @target_path.setter
    def target_path(self, target_path):
        """Sets the target_path of this SQLDataDirectoryMapping.

        Target path

        :param target_path: The target_path of this SQLDataDirectoryMapping.
        :type target_path: str
        """

        self._target_path = target_path
