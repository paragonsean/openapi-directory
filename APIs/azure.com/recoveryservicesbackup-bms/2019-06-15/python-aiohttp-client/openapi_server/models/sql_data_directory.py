# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SQLDataDirectory(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, logical_name: str=None, path: str=None, type: str=None):
        """SQLDataDirectory - a model defined in OpenAPI

        :param logical_name: The logical_name of this SQLDataDirectory.
        :param path: The path of this SQLDataDirectory.
        :param type: The type of this SQLDataDirectory.
        """
        self.openapi_types = {
            'logical_name': str,
            'path': str,
            'type': str
        }

        self.attribute_map = {
            'logical_name': 'logicalName',
            'path': 'path',
            'type': 'type'
        }

        self._logical_name = logical_name
        self._path = path
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SQLDataDirectory':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SQLDataDirectory of this SQLDataDirectory.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def logical_name(self):
        """Gets the logical_name of this SQLDataDirectory.

        Logical name of the file

        :return: The logical_name of this SQLDataDirectory.
        :rtype: str
        """
        return self._logical_name

    @logical_name.setter
    def logical_name(self, logical_name):
        """Sets the logical_name of this SQLDataDirectory.

        Logical name of the file

        :param logical_name: The logical_name of this SQLDataDirectory.
        :type logical_name: str
        """

        self._logical_name = logical_name

    @property
    def path(self):
        """Gets the path of this SQLDataDirectory.

        File path

        :return: The path of this SQLDataDirectory.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this SQLDataDirectory.

        File path

        :param path: The path of this SQLDataDirectory.
        :type path: str
        """

        self._path = path

    @property
    def type(self):
        """Gets the type of this SQLDataDirectory.

        Type of data directory mapping

        :return: The type of this SQLDataDirectory.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SQLDataDirectory.

        Type of data directory mapping

        :param type: The type of this SQLDataDirectory.
        :type type: str
        """
        allowed_values = ["Invalid", "Data", "Log"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
