# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.daily_retention_schedule import DailyRetentionSchedule
from openapi_server.models.monthly_retention_schedule import MonthlyRetentionSchedule
from openapi_server.models.retention_policy import RetentionPolicy
from openapi_server.models.weekly_retention_schedule import WeeklyRetentionSchedule
from openapi_server.models.yearly_retention_schedule import YearlyRetentionSchedule
from openapi_server import util


class LongTermRetentionPolicy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, daily_schedule: DailyRetentionSchedule=None, monthly_schedule: MonthlyRetentionSchedule=None, weekly_schedule: WeeklyRetentionSchedule=None, yearly_schedule: YearlyRetentionSchedule=None, retention_policy_type: str=None):
        """LongTermRetentionPolicy - a model defined in OpenAPI

        :param daily_schedule: The daily_schedule of this LongTermRetentionPolicy.
        :param monthly_schedule: The monthly_schedule of this LongTermRetentionPolicy.
        :param weekly_schedule: The weekly_schedule of this LongTermRetentionPolicy.
        :param yearly_schedule: The yearly_schedule of this LongTermRetentionPolicy.
        :param retention_policy_type: The retention_policy_type of this LongTermRetentionPolicy.
        """
        self.openapi_types = {
            'daily_schedule': DailyRetentionSchedule,
            'monthly_schedule': MonthlyRetentionSchedule,
            'weekly_schedule': WeeklyRetentionSchedule,
            'yearly_schedule': YearlyRetentionSchedule,
            'retention_policy_type': str
        }

        self.attribute_map = {
            'daily_schedule': 'dailySchedule',
            'monthly_schedule': 'monthlySchedule',
            'weekly_schedule': 'weeklySchedule',
            'yearly_schedule': 'yearlySchedule',
            'retention_policy_type': 'retentionPolicyType'
        }

        self._daily_schedule = daily_schedule
        self._monthly_schedule = monthly_schedule
        self._weekly_schedule = weekly_schedule
        self._yearly_schedule = yearly_schedule
        self._retention_policy_type = retention_policy_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LongTermRetentionPolicy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LongTermRetentionPolicy of this LongTermRetentionPolicy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def daily_schedule(self):
        """Gets the daily_schedule of this LongTermRetentionPolicy.


        :return: The daily_schedule of this LongTermRetentionPolicy.
        :rtype: DailyRetentionSchedule
        """
        return self._daily_schedule

    @daily_schedule.setter
    def daily_schedule(self, daily_schedule):
        """Sets the daily_schedule of this LongTermRetentionPolicy.


        :param daily_schedule: The daily_schedule of this LongTermRetentionPolicy.
        :type daily_schedule: DailyRetentionSchedule
        """

        self._daily_schedule = daily_schedule

    @property
    def monthly_schedule(self):
        """Gets the monthly_schedule of this LongTermRetentionPolicy.


        :return: The monthly_schedule of this LongTermRetentionPolicy.
        :rtype: MonthlyRetentionSchedule
        """
        return self._monthly_schedule

    @monthly_schedule.setter
    def monthly_schedule(self, monthly_schedule):
        """Sets the monthly_schedule of this LongTermRetentionPolicy.


        :param monthly_schedule: The monthly_schedule of this LongTermRetentionPolicy.
        :type monthly_schedule: MonthlyRetentionSchedule
        """

        self._monthly_schedule = monthly_schedule

    @property
    def weekly_schedule(self):
        """Gets the weekly_schedule of this LongTermRetentionPolicy.


        :return: The weekly_schedule of this LongTermRetentionPolicy.
        :rtype: WeeklyRetentionSchedule
        """
        return self._weekly_schedule

    @weekly_schedule.setter
    def weekly_schedule(self, weekly_schedule):
        """Sets the weekly_schedule of this LongTermRetentionPolicy.


        :param weekly_schedule: The weekly_schedule of this LongTermRetentionPolicy.
        :type weekly_schedule: WeeklyRetentionSchedule
        """

        self._weekly_schedule = weekly_schedule

    @property
    def yearly_schedule(self):
        """Gets the yearly_schedule of this LongTermRetentionPolicy.


        :return: The yearly_schedule of this LongTermRetentionPolicy.
        :rtype: YearlyRetentionSchedule
        """
        return self._yearly_schedule

    @yearly_schedule.setter
    def yearly_schedule(self, yearly_schedule):
        """Sets the yearly_schedule of this LongTermRetentionPolicy.


        :param yearly_schedule: The yearly_schedule of this LongTermRetentionPolicy.
        :type yearly_schedule: YearlyRetentionSchedule
        """

        self._yearly_schedule = yearly_schedule

    @property
    def retention_policy_type(self):
        """Gets the retention_policy_type of this LongTermRetentionPolicy.

        This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.

        :return: The retention_policy_type of this LongTermRetentionPolicy.
        :rtype: str
        """
        return self._retention_policy_type

    @retention_policy_type.setter
    def retention_policy_type(self, retention_policy_type):
        """Sets the retention_policy_type of this LongTermRetentionPolicy.

        This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.

        :param retention_policy_type: The retention_policy_type of this LongTermRetentionPolicy.
        :type retention_policy_type: str
        """
        if retention_policy_type is None:
            raise ValueError("Invalid value for `retention_policy_type`, must not be `None`")

        self._retention_policy_type = retention_policy_type
