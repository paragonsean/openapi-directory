# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RetentionDuration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, count: int=None, duration_type: str=None):
        """RetentionDuration - a model defined in OpenAPI

        :param count: The count of this RetentionDuration.
        :param duration_type: The duration_type of this RetentionDuration.
        """
        self.openapi_types = {
            'count': int,
            'duration_type': str
        }

        self.attribute_map = {
            'count': 'count',
            'duration_type': 'durationType'
        }

        self._count = count
        self._duration_type = duration_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RetentionDuration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RetentionDuration of this RetentionDuration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def count(self):
        """Gets the count of this RetentionDuration.

        Count of duration types. Retention duration is obtained by the counting the duration type Count times.  For example, when Count = 3 and DurationType = Weeks, retention duration will be three weeks.

        :return: The count of this RetentionDuration.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this RetentionDuration.

        Count of duration types. Retention duration is obtained by the counting the duration type Count times.  For example, when Count = 3 and DurationType = Weeks, retention duration will be three weeks.

        :param count: The count of this RetentionDuration.
        :type count: int
        """

        self._count = count

    @property
    def duration_type(self):
        """Gets the duration_type of this RetentionDuration.

        Retention duration type of retention policy.

        :return: The duration_type of this RetentionDuration.
        :rtype: str
        """
        return self._duration_type

    @duration_type.setter
    def duration_type(self, duration_type):
        """Sets the duration_type of this RetentionDuration.

        Retention duration type of retention policy.

        :param duration_type: The duration_type of this RetentionDuration.
        :type duration_type: str
        """
        allowed_values = ["Invalid", "Days", "Weeks", "Months", "Years"]  # noqa: E501
        if duration_type not in allowed_values:
            raise ValueError(
                "Invalid value for `duration_type` ({0}), must be one of {1}"
                .format(duration_type, allowed_values)
            )

        self._duration_type = duration_type
