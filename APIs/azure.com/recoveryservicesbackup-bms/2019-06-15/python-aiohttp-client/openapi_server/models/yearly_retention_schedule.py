# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.daily_retention_format import DailyRetentionFormat
from openapi_server.models.retention_duration import RetentionDuration
from openapi_server.models.weekly_retention_format import WeeklyRetentionFormat
from openapi_server import util


class YearlyRetentionSchedule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, months_of_year: List[str]=None, retention_duration: RetentionDuration=None, retention_schedule_daily: DailyRetentionFormat=None, retention_schedule_format_type: str=None, retention_schedule_weekly: WeeklyRetentionFormat=None, retention_times: List[datetime]=None):
        """YearlyRetentionSchedule - a model defined in OpenAPI

        :param months_of_year: The months_of_year of this YearlyRetentionSchedule.
        :param retention_duration: The retention_duration of this YearlyRetentionSchedule.
        :param retention_schedule_daily: The retention_schedule_daily of this YearlyRetentionSchedule.
        :param retention_schedule_format_type: The retention_schedule_format_type of this YearlyRetentionSchedule.
        :param retention_schedule_weekly: The retention_schedule_weekly of this YearlyRetentionSchedule.
        :param retention_times: The retention_times of this YearlyRetentionSchedule.
        """
        self.openapi_types = {
            'months_of_year': List[str],
            'retention_duration': RetentionDuration,
            'retention_schedule_daily': DailyRetentionFormat,
            'retention_schedule_format_type': str,
            'retention_schedule_weekly': WeeklyRetentionFormat,
            'retention_times': List[datetime]
        }

        self.attribute_map = {
            'months_of_year': 'monthsOfYear',
            'retention_duration': 'retentionDuration',
            'retention_schedule_daily': 'retentionScheduleDaily',
            'retention_schedule_format_type': 'retentionScheduleFormatType',
            'retention_schedule_weekly': 'retentionScheduleWeekly',
            'retention_times': 'retentionTimes'
        }

        self._months_of_year = months_of_year
        self._retention_duration = retention_duration
        self._retention_schedule_daily = retention_schedule_daily
        self._retention_schedule_format_type = retention_schedule_format_type
        self._retention_schedule_weekly = retention_schedule_weekly
        self._retention_times = retention_times

    @classmethod
    def from_dict(cls, dikt: dict) -> 'YearlyRetentionSchedule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The YearlyRetentionSchedule of this YearlyRetentionSchedule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def months_of_year(self):
        """Gets the months_of_year of this YearlyRetentionSchedule.

        List of months of year of yearly retention policy.

        :return: The months_of_year of this YearlyRetentionSchedule.
        :rtype: List[str]
        """
        return self._months_of_year

    @months_of_year.setter
    def months_of_year(self, months_of_year):
        """Sets the months_of_year of this YearlyRetentionSchedule.

        List of months of year of yearly retention policy.

        :param months_of_year: The months_of_year of this YearlyRetentionSchedule.
        :type months_of_year: List[str]
        """
        allowed_values = ["Invalid", "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]  # noqa: E501
        if not set(months_of_year).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `months_of_year` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(months_of_year) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._months_of_year = months_of_year

    @property
    def retention_duration(self):
        """Gets the retention_duration of this YearlyRetentionSchedule.


        :return: The retention_duration of this YearlyRetentionSchedule.
        :rtype: RetentionDuration
        """
        return self._retention_duration

    @retention_duration.setter
    def retention_duration(self, retention_duration):
        """Sets the retention_duration of this YearlyRetentionSchedule.


        :param retention_duration: The retention_duration of this YearlyRetentionSchedule.
        :type retention_duration: RetentionDuration
        """

        self._retention_duration = retention_duration

    @property
    def retention_schedule_daily(self):
        """Gets the retention_schedule_daily of this YearlyRetentionSchedule.


        :return: The retention_schedule_daily of this YearlyRetentionSchedule.
        :rtype: DailyRetentionFormat
        """
        return self._retention_schedule_daily

    @retention_schedule_daily.setter
    def retention_schedule_daily(self, retention_schedule_daily):
        """Sets the retention_schedule_daily of this YearlyRetentionSchedule.


        :param retention_schedule_daily: The retention_schedule_daily of this YearlyRetentionSchedule.
        :type retention_schedule_daily: DailyRetentionFormat
        """

        self._retention_schedule_daily = retention_schedule_daily

    @property
    def retention_schedule_format_type(self):
        """Gets the retention_schedule_format_type of this YearlyRetentionSchedule.

        Retention schedule format for yearly retention policy.

        :return: The retention_schedule_format_type of this YearlyRetentionSchedule.
        :rtype: str
        """
        return self._retention_schedule_format_type

    @retention_schedule_format_type.setter
    def retention_schedule_format_type(self, retention_schedule_format_type):
        """Sets the retention_schedule_format_type of this YearlyRetentionSchedule.

        Retention schedule format for yearly retention policy.

        :param retention_schedule_format_type: The retention_schedule_format_type of this YearlyRetentionSchedule.
        :type retention_schedule_format_type: str
        """
        allowed_values = ["Invalid", "Daily", "Weekly"]  # noqa: E501
        if retention_schedule_format_type not in allowed_values:
            raise ValueError(
                "Invalid value for `retention_schedule_format_type` ({0}), must be one of {1}"
                .format(retention_schedule_format_type, allowed_values)
            )

        self._retention_schedule_format_type = retention_schedule_format_type

    @property
    def retention_schedule_weekly(self):
        """Gets the retention_schedule_weekly of this YearlyRetentionSchedule.


        :return: The retention_schedule_weekly of this YearlyRetentionSchedule.
        :rtype: WeeklyRetentionFormat
        """
        return self._retention_schedule_weekly

    @retention_schedule_weekly.setter
    def retention_schedule_weekly(self, retention_schedule_weekly):
        """Sets the retention_schedule_weekly of this YearlyRetentionSchedule.


        :param retention_schedule_weekly: The retention_schedule_weekly of this YearlyRetentionSchedule.
        :type retention_schedule_weekly: WeeklyRetentionFormat
        """

        self._retention_schedule_weekly = retention_schedule_weekly

    @property
    def retention_times(self):
        """Gets the retention_times of this YearlyRetentionSchedule.

        Retention times of retention policy.

        :return: The retention_times of this YearlyRetentionSchedule.
        :rtype: List[datetime]
        """
        return self._retention_times

    @retention_times.setter
    def retention_times(self, retention_times):
        """Sets the retention_times of this YearlyRetentionSchedule.

        Retention times of retention policy.

        :param retention_times: The retention_times of this YearlyRetentionSchedule.
        :type retention_times: List[datetime]
        """

        self._retention_times = retention_times
