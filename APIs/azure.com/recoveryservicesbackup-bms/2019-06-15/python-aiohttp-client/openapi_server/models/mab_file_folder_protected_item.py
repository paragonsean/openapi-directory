# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.mab_file_folder_protected_item_extended_info import MabFileFolderProtectedItemExtendedInfo
from openapi_server.models.protected_item import ProtectedItem
from openapi_server import util


class MabFileFolderProtectedItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, computer_name: str=None, deferred_delete_sync_time_in_utc: int=None, extended_info: MabFileFolderProtectedItemExtendedInfo=None, friendly_name: str=None, last_backup_status: str=None, last_backup_time: datetime=None, protection_state: str=None, backup_management_type: str=None, backup_set_name: str=None, container_name: str=None, create_mode: str=None, deferred_delete_time_in_utc: datetime=None, deferred_delete_time_remaining: str=None, is_deferred_delete_schedule_upcoming: bool=None, is_rehydrate: bool=None, is_scheduled_for_deferred_delete: bool=None, last_recovery_point: datetime=None, policy_id: str=None, protected_item_type: str=None, source_resource_id: str=None, workload_type: str=None):
        """MabFileFolderProtectedItem - a model defined in OpenAPI

        :param computer_name: The computer_name of this MabFileFolderProtectedItem.
        :param deferred_delete_sync_time_in_utc: The deferred_delete_sync_time_in_utc of this MabFileFolderProtectedItem.
        :param extended_info: The extended_info of this MabFileFolderProtectedItem.
        :param friendly_name: The friendly_name of this MabFileFolderProtectedItem.
        :param last_backup_status: The last_backup_status of this MabFileFolderProtectedItem.
        :param last_backup_time: The last_backup_time of this MabFileFolderProtectedItem.
        :param protection_state: The protection_state of this MabFileFolderProtectedItem.
        :param backup_management_type: The backup_management_type of this MabFileFolderProtectedItem.
        :param backup_set_name: The backup_set_name of this MabFileFolderProtectedItem.
        :param container_name: The container_name of this MabFileFolderProtectedItem.
        :param create_mode: The create_mode of this MabFileFolderProtectedItem.
        :param deferred_delete_time_in_utc: The deferred_delete_time_in_utc of this MabFileFolderProtectedItem.
        :param deferred_delete_time_remaining: The deferred_delete_time_remaining of this MabFileFolderProtectedItem.
        :param is_deferred_delete_schedule_upcoming: The is_deferred_delete_schedule_upcoming of this MabFileFolderProtectedItem.
        :param is_rehydrate: The is_rehydrate of this MabFileFolderProtectedItem.
        :param is_scheduled_for_deferred_delete: The is_scheduled_for_deferred_delete of this MabFileFolderProtectedItem.
        :param last_recovery_point: The last_recovery_point of this MabFileFolderProtectedItem.
        :param policy_id: The policy_id of this MabFileFolderProtectedItem.
        :param protected_item_type: The protected_item_type of this MabFileFolderProtectedItem.
        :param source_resource_id: The source_resource_id of this MabFileFolderProtectedItem.
        :param workload_type: The workload_type of this MabFileFolderProtectedItem.
        """
        self.openapi_types = {
            'computer_name': str,
            'deferred_delete_sync_time_in_utc': int,
            'extended_info': MabFileFolderProtectedItemExtendedInfo,
            'friendly_name': str,
            'last_backup_status': str,
            'last_backup_time': datetime,
            'protection_state': str,
            'backup_management_type': str,
            'backup_set_name': str,
            'container_name': str,
            'create_mode': str,
            'deferred_delete_time_in_utc': datetime,
            'deferred_delete_time_remaining': str,
            'is_deferred_delete_schedule_upcoming': bool,
            'is_rehydrate': bool,
            'is_scheduled_for_deferred_delete': bool,
            'last_recovery_point': datetime,
            'policy_id': str,
            'protected_item_type': str,
            'source_resource_id': str,
            'workload_type': str
        }

        self.attribute_map = {
            'computer_name': 'computerName',
            'deferred_delete_sync_time_in_utc': 'deferredDeleteSyncTimeInUTC',
            'extended_info': 'extendedInfo',
            'friendly_name': 'friendlyName',
            'last_backup_status': 'lastBackupStatus',
            'last_backup_time': 'lastBackupTime',
            'protection_state': 'protectionState',
            'backup_management_type': 'backupManagementType',
            'backup_set_name': 'backupSetName',
            'container_name': 'containerName',
            'create_mode': 'createMode',
            'deferred_delete_time_in_utc': 'deferredDeleteTimeInUTC',
            'deferred_delete_time_remaining': 'deferredDeleteTimeRemaining',
            'is_deferred_delete_schedule_upcoming': 'isDeferredDeleteScheduleUpcoming',
            'is_rehydrate': 'isRehydrate',
            'is_scheduled_for_deferred_delete': 'isScheduledForDeferredDelete',
            'last_recovery_point': 'lastRecoveryPoint',
            'policy_id': 'policyId',
            'protected_item_type': 'protectedItemType',
            'source_resource_id': 'sourceResourceId',
            'workload_type': 'workloadType'
        }

        self._computer_name = computer_name
        self._deferred_delete_sync_time_in_utc = deferred_delete_sync_time_in_utc
        self._extended_info = extended_info
        self._friendly_name = friendly_name
        self._last_backup_status = last_backup_status
        self._last_backup_time = last_backup_time
        self._protection_state = protection_state
        self._backup_management_type = backup_management_type
        self._backup_set_name = backup_set_name
        self._container_name = container_name
        self._create_mode = create_mode
        self._deferred_delete_time_in_utc = deferred_delete_time_in_utc
        self._deferred_delete_time_remaining = deferred_delete_time_remaining
        self._is_deferred_delete_schedule_upcoming = is_deferred_delete_schedule_upcoming
        self._is_rehydrate = is_rehydrate
        self._is_scheduled_for_deferred_delete = is_scheduled_for_deferred_delete
        self._last_recovery_point = last_recovery_point
        self._policy_id = policy_id
        self._protected_item_type = protected_item_type
        self._source_resource_id = source_resource_id
        self._workload_type = workload_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MabFileFolderProtectedItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MabFileFolderProtectedItem of this MabFileFolderProtectedItem.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def computer_name(self):
        """Gets the computer_name of this MabFileFolderProtectedItem.

        Name of the computer associated with this backup item.

        :return: The computer_name of this MabFileFolderProtectedItem.
        :rtype: str
        """
        return self._computer_name

    @computer_name.setter
    def computer_name(self, computer_name):
        """Sets the computer_name of this MabFileFolderProtectedItem.

        Name of the computer associated with this backup item.

        :param computer_name: The computer_name of this MabFileFolderProtectedItem.
        :type computer_name: str
        """

        self._computer_name = computer_name

    @property
    def deferred_delete_sync_time_in_utc(self):
        """Gets the deferred_delete_sync_time_in_utc of this MabFileFolderProtectedItem.

        Sync time for deferred deletion in UTC

        :return: The deferred_delete_sync_time_in_utc of this MabFileFolderProtectedItem.
        :rtype: int
        """
        return self._deferred_delete_sync_time_in_utc

    @deferred_delete_sync_time_in_utc.setter
    def deferred_delete_sync_time_in_utc(self, deferred_delete_sync_time_in_utc):
        """Sets the deferred_delete_sync_time_in_utc of this MabFileFolderProtectedItem.

        Sync time for deferred deletion in UTC

        :param deferred_delete_sync_time_in_utc: The deferred_delete_sync_time_in_utc of this MabFileFolderProtectedItem.
        :type deferred_delete_sync_time_in_utc: int
        """

        self._deferred_delete_sync_time_in_utc = deferred_delete_sync_time_in_utc

    @property
    def extended_info(self):
        """Gets the extended_info of this MabFileFolderProtectedItem.


        :return: The extended_info of this MabFileFolderProtectedItem.
        :rtype: MabFileFolderProtectedItemExtendedInfo
        """
        return self._extended_info

    @extended_info.setter
    def extended_info(self, extended_info):
        """Sets the extended_info of this MabFileFolderProtectedItem.


        :param extended_info: The extended_info of this MabFileFolderProtectedItem.
        :type extended_info: MabFileFolderProtectedItemExtendedInfo
        """

        self._extended_info = extended_info

    @property
    def friendly_name(self):
        """Gets the friendly_name of this MabFileFolderProtectedItem.

        Friendly name of this backup item.

        :return: The friendly_name of this MabFileFolderProtectedItem.
        :rtype: str
        """
        return self._friendly_name

    @friendly_name.setter
    def friendly_name(self, friendly_name):
        """Sets the friendly_name of this MabFileFolderProtectedItem.

        Friendly name of this backup item.

        :param friendly_name: The friendly_name of this MabFileFolderProtectedItem.
        :type friendly_name: str
        """

        self._friendly_name = friendly_name

    @property
    def last_backup_status(self):
        """Gets the last_backup_status of this MabFileFolderProtectedItem.

        Status of last backup operation.

        :return: The last_backup_status of this MabFileFolderProtectedItem.
        :rtype: str
        """
        return self._last_backup_status

    @last_backup_status.setter
    def last_backup_status(self, last_backup_status):
        """Sets the last_backup_status of this MabFileFolderProtectedItem.

        Status of last backup operation.

        :param last_backup_status: The last_backup_status of this MabFileFolderProtectedItem.
        :type last_backup_status: str
        """

        self._last_backup_status = last_backup_status

    @property
    def last_backup_time(self):
        """Gets the last_backup_time of this MabFileFolderProtectedItem.

        Timestamp of the last backup operation on this backup item.

        :return: The last_backup_time of this MabFileFolderProtectedItem.
        :rtype: datetime
        """
        return self._last_backup_time

    @last_backup_time.setter
    def last_backup_time(self, last_backup_time):
        """Sets the last_backup_time of this MabFileFolderProtectedItem.

        Timestamp of the last backup operation on this backup item.

        :param last_backup_time: The last_backup_time of this MabFileFolderProtectedItem.
        :type last_backup_time: datetime
        """

        self._last_backup_time = last_backup_time

    @property
    def protection_state(self):
        """Gets the protection_state of this MabFileFolderProtectedItem.

        Protected, ProtectionStopped, IRPending or ProtectionError

        :return: The protection_state of this MabFileFolderProtectedItem.
        :rtype: str
        """
        return self._protection_state

    @protection_state.setter
    def protection_state(self, protection_state):
        """Sets the protection_state of this MabFileFolderProtectedItem.

        Protected, ProtectionStopped, IRPending or ProtectionError

        :param protection_state: The protection_state of this MabFileFolderProtectedItem.
        :type protection_state: str
        """

        self._protection_state = protection_state

    @property
    def backup_management_type(self):
        """Gets the backup_management_type of this MabFileFolderProtectedItem.

        Type of backup management for the backed up item.

        :return: The backup_management_type of this MabFileFolderProtectedItem.
        :rtype: str
        """
        return self._backup_management_type

    @backup_management_type.setter
    def backup_management_type(self, backup_management_type):
        """Sets the backup_management_type of this MabFileFolderProtectedItem.

        Type of backup management for the backed up item.

        :param backup_management_type: The backup_management_type of this MabFileFolderProtectedItem.
        :type backup_management_type: str
        """
        allowed_values = ["Invalid", "AzureIaasVM", "MAB", "DPM", "AzureBackupServer", "AzureSql", "AzureStorage", "AzureWorkload", "DefaultBackup"]  # noqa: E501
        if backup_management_type not in allowed_values:
            raise ValueError(
                "Invalid value for `backup_management_type` ({0}), must be one of {1}"
                .format(backup_management_type, allowed_values)
            )

        self._backup_management_type = backup_management_type

    @property
    def backup_set_name(self):
        """Gets the backup_set_name of this MabFileFolderProtectedItem.

        Name of the backup set the backup item belongs to

        :return: The backup_set_name of this MabFileFolderProtectedItem.
        :rtype: str
        """
        return self._backup_set_name

    @backup_set_name.setter
    def backup_set_name(self, backup_set_name):
        """Sets the backup_set_name of this MabFileFolderProtectedItem.

        Name of the backup set the backup item belongs to

        :param backup_set_name: The backup_set_name of this MabFileFolderProtectedItem.
        :type backup_set_name: str
        """

        self._backup_set_name = backup_set_name

    @property
    def container_name(self):
        """Gets the container_name of this MabFileFolderProtectedItem.

        Unique name of container

        :return: The container_name of this MabFileFolderProtectedItem.
        :rtype: str
        """
        return self._container_name

    @container_name.setter
    def container_name(self, container_name):
        """Sets the container_name of this MabFileFolderProtectedItem.

        Unique name of container

        :param container_name: The container_name of this MabFileFolderProtectedItem.
        :type container_name: str
        """

        self._container_name = container_name

    @property
    def create_mode(self):
        """Gets the create_mode of this MabFileFolderProtectedItem.

        Create mode to indicate recovery of existing soft deleted data source or creation of new data source.

        :return: The create_mode of this MabFileFolderProtectedItem.
        :rtype: str
        """
        return self._create_mode

    @create_mode.setter
    def create_mode(self, create_mode):
        """Sets the create_mode of this MabFileFolderProtectedItem.

        Create mode to indicate recovery of existing soft deleted data source or creation of new data source.

        :param create_mode: The create_mode of this MabFileFolderProtectedItem.
        :type create_mode: str
        """
        allowed_values = ["Invalid", "Default", "Recover"]  # noqa: E501
        if create_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `create_mode` ({0}), must be one of {1}"
                .format(create_mode, allowed_values)
            )

        self._create_mode = create_mode

    @property
    def deferred_delete_time_in_utc(self):
        """Gets the deferred_delete_time_in_utc of this MabFileFolderProtectedItem.

        Time for deferred deletion in UTC

        :return: The deferred_delete_time_in_utc of this MabFileFolderProtectedItem.
        :rtype: datetime
        """
        return self._deferred_delete_time_in_utc

    @deferred_delete_time_in_utc.setter
    def deferred_delete_time_in_utc(self, deferred_delete_time_in_utc):
        """Sets the deferred_delete_time_in_utc of this MabFileFolderProtectedItem.

        Time for deferred deletion in UTC

        :param deferred_delete_time_in_utc: The deferred_delete_time_in_utc of this MabFileFolderProtectedItem.
        :type deferred_delete_time_in_utc: datetime
        """

        self._deferred_delete_time_in_utc = deferred_delete_time_in_utc

    @property
    def deferred_delete_time_remaining(self):
        """Gets the deferred_delete_time_remaining of this MabFileFolderProtectedItem.

        Time remaining before the DS marked for deferred delete is permanently deleted

        :return: The deferred_delete_time_remaining of this MabFileFolderProtectedItem.
        :rtype: str
        """
        return self._deferred_delete_time_remaining

    @deferred_delete_time_remaining.setter
    def deferred_delete_time_remaining(self, deferred_delete_time_remaining):
        """Sets the deferred_delete_time_remaining of this MabFileFolderProtectedItem.

        Time remaining before the DS marked for deferred delete is permanently deleted

        :param deferred_delete_time_remaining: The deferred_delete_time_remaining of this MabFileFolderProtectedItem.
        :type deferred_delete_time_remaining: str
        """

        self._deferred_delete_time_remaining = deferred_delete_time_remaining

    @property
    def is_deferred_delete_schedule_upcoming(self):
        """Gets the is_deferred_delete_schedule_upcoming of this MabFileFolderProtectedItem.

        Flag to identify whether the deferred deleted DS is to be purged soon

        :return: The is_deferred_delete_schedule_upcoming of this MabFileFolderProtectedItem.
        :rtype: bool
        """
        return self._is_deferred_delete_schedule_upcoming

    @is_deferred_delete_schedule_upcoming.setter
    def is_deferred_delete_schedule_upcoming(self, is_deferred_delete_schedule_upcoming):
        """Sets the is_deferred_delete_schedule_upcoming of this MabFileFolderProtectedItem.

        Flag to identify whether the deferred deleted DS is to be purged soon

        :param is_deferred_delete_schedule_upcoming: The is_deferred_delete_schedule_upcoming of this MabFileFolderProtectedItem.
        :type is_deferred_delete_schedule_upcoming: bool
        """

        self._is_deferred_delete_schedule_upcoming = is_deferred_delete_schedule_upcoming

    @property
    def is_rehydrate(self):
        """Gets the is_rehydrate of this MabFileFolderProtectedItem.

        Flag to identify that deferred deleted DS is to be moved into Pause state

        :return: The is_rehydrate of this MabFileFolderProtectedItem.
        :rtype: bool
        """
        return self._is_rehydrate

    @is_rehydrate.setter
    def is_rehydrate(self, is_rehydrate):
        """Sets the is_rehydrate of this MabFileFolderProtectedItem.

        Flag to identify that deferred deleted DS is to be moved into Pause state

        :param is_rehydrate: The is_rehydrate of this MabFileFolderProtectedItem.
        :type is_rehydrate: bool
        """

        self._is_rehydrate = is_rehydrate

    @property
    def is_scheduled_for_deferred_delete(self):
        """Gets the is_scheduled_for_deferred_delete of this MabFileFolderProtectedItem.

        Flag to identify whether the DS is scheduled for deferred delete

        :return: The is_scheduled_for_deferred_delete of this MabFileFolderProtectedItem.
        :rtype: bool
        """
        return self._is_scheduled_for_deferred_delete

    @is_scheduled_for_deferred_delete.setter
    def is_scheduled_for_deferred_delete(self, is_scheduled_for_deferred_delete):
        """Sets the is_scheduled_for_deferred_delete of this MabFileFolderProtectedItem.

        Flag to identify whether the DS is scheduled for deferred delete

        :param is_scheduled_for_deferred_delete: The is_scheduled_for_deferred_delete of this MabFileFolderProtectedItem.
        :type is_scheduled_for_deferred_delete: bool
        """

        self._is_scheduled_for_deferred_delete = is_scheduled_for_deferred_delete

    @property
    def last_recovery_point(self):
        """Gets the last_recovery_point of this MabFileFolderProtectedItem.

        Timestamp when the last (latest) backup copy was created for this backup item.

        :return: The last_recovery_point of this MabFileFolderProtectedItem.
        :rtype: datetime
        """
        return self._last_recovery_point

    @last_recovery_point.setter
    def last_recovery_point(self, last_recovery_point):
        """Sets the last_recovery_point of this MabFileFolderProtectedItem.

        Timestamp when the last (latest) backup copy was created for this backup item.

        :param last_recovery_point: The last_recovery_point of this MabFileFolderProtectedItem.
        :type last_recovery_point: datetime
        """

        self._last_recovery_point = last_recovery_point

    @property
    def policy_id(self):
        """Gets the policy_id of this MabFileFolderProtectedItem.

        ID of the backup policy with which this item is backed up.

        :return: The policy_id of this MabFileFolderProtectedItem.
        :rtype: str
        """
        return self._policy_id

    @policy_id.setter
    def policy_id(self, policy_id):
        """Sets the policy_id of this MabFileFolderProtectedItem.

        ID of the backup policy with which this item is backed up.

        :param policy_id: The policy_id of this MabFileFolderProtectedItem.
        :type policy_id: str
        """

        self._policy_id = policy_id

    @property
    def protected_item_type(self):
        """Gets the protected_item_type of this MabFileFolderProtectedItem.

        backup item type.

        :return: The protected_item_type of this MabFileFolderProtectedItem.
        :rtype: str
        """
        return self._protected_item_type

    @protected_item_type.setter
    def protected_item_type(self, protected_item_type):
        """Sets the protected_item_type of this MabFileFolderProtectedItem.

        backup item type.

        :param protected_item_type: The protected_item_type of this MabFileFolderProtectedItem.
        :type protected_item_type: str
        """
        if protected_item_type is None:
            raise ValueError("Invalid value for `protected_item_type`, must not be `None`")

        self._protected_item_type = protected_item_type

    @property
    def source_resource_id(self):
        """Gets the source_resource_id of this MabFileFolderProtectedItem.

        ARM ID of the resource to be backed up.

        :return: The source_resource_id of this MabFileFolderProtectedItem.
        :rtype: str
        """
        return self._source_resource_id

    @source_resource_id.setter
    def source_resource_id(self, source_resource_id):
        """Sets the source_resource_id of this MabFileFolderProtectedItem.

        ARM ID of the resource to be backed up.

        :param source_resource_id: The source_resource_id of this MabFileFolderProtectedItem.
        :type source_resource_id: str
        """

        self._source_resource_id = source_resource_id

    @property
    def workload_type(self):
        """Gets the workload_type of this MabFileFolderProtectedItem.

        Type of workload this item represents.

        :return: The workload_type of this MabFileFolderProtectedItem.
        :rtype: str
        """
        return self._workload_type

    @workload_type.setter
    def workload_type(self, workload_type):
        """Sets the workload_type of this MabFileFolderProtectedItem.

        Type of workload this item represents.

        :param workload_type: The workload_type of this MabFileFolderProtectedItem.
        :type workload_type: str
        """
        allowed_values = ["Invalid", "VM", "FileFolder", "AzureSqlDb", "SQLDB", "Exchange", "Sharepoint", "VMwareVM", "SystemState", "Client", "GenericDataSource", "SQLDataBase", "AzureFileShare", "SAPHanaDatabase", "SAPAseDatabase"]  # noqa: E501
        if workload_type not in allowed_values:
            raise ValueError(
                "Invalid value for `workload_type` ({0}), must be one of {1}"
                .format(workload_type, allowed_values)
            )

        self._workload_type = workload_type
