# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Settings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, is_compression: bool=None, issqlcompression: bool=None, time_zone: str=None):
        """Settings - a model defined in OpenAPI

        :param is_compression: The is_compression of this Settings.
        :param issqlcompression: The issqlcompression of this Settings.
        :param time_zone: The time_zone of this Settings.
        """
        self.openapi_types = {
            'is_compression': bool,
            'issqlcompression': bool,
            'time_zone': str
        }

        self.attribute_map = {
            'is_compression': 'isCompression',
            'issqlcompression': 'issqlcompression',
            'time_zone': 'timeZone'
        }

        self._is_compression = is_compression
        self._issqlcompression = issqlcompression
        self._time_zone = time_zone

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Settings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Settings of this Settings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def is_compression(self):
        """Gets the is_compression of this Settings.

        Workload compression flag. This has been added so that 'isSqlCompression'  will be deprecated once clients upgrade to consider this flag.

        :return: The is_compression of this Settings.
        :rtype: bool
        """
        return self._is_compression

    @is_compression.setter
    def is_compression(self, is_compression):
        """Sets the is_compression of this Settings.

        Workload compression flag. This has been added so that 'isSqlCompression'  will be deprecated once clients upgrade to consider this flag.

        :param is_compression: The is_compression of this Settings.
        :type is_compression: bool
        """

        self._is_compression = is_compression

    @property
    def issqlcompression(self):
        """Gets the issqlcompression of this Settings.

        SQL compression flag

        :return: The issqlcompression of this Settings.
        :rtype: bool
        """
        return self._issqlcompression

    @issqlcompression.setter
    def issqlcompression(self, issqlcompression):
        """Sets the issqlcompression of this Settings.

        SQL compression flag

        :param issqlcompression: The issqlcompression of this Settings.
        :type issqlcompression: bool
        """

        self._issqlcompression = issqlcompression

    @property
    def time_zone(self):
        """Gets the time_zone of this Settings.

        TimeZone optional input as string. For example: TimeZone = \"Pacific Standard Time\".

        :return: The time_zone of this Settings.
        :rtype: str
        """
        return self._time_zone

    @time_zone.setter
    def time_zone(self, time_zone):
        """Sets the time_zone of this Settings.

        TimeZone optional input as string. For example: TimeZone = \"Pacific Standard Time\".

        :param time_zone: The time_zone of this Settings.
        :type time_zone: str
        """

        self._time_zone = time_zone
