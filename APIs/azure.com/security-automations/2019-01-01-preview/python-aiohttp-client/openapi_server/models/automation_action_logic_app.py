# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.automation_action import AutomationAction
from openapi_server import util


class AutomationActionLogicApp(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, logic_app_resource_id: str=None, uri: str=None, action_type: str=None):
        """AutomationActionLogicApp - a model defined in OpenAPI

        :param logic_app_resource_id: The logic_app_resource_id of this AutomationActionLogicApp.
        :param uri: The uri of this AutomationActionLogicApp.
        :param action_type: The action_type of this AutomationActionLogicApp.
        """
        self.openapi_types = {
            'logic_app_resource_id': str,
            'uri': str,
            'action_type': str
        }

        self.attribute_map = {
            'logic_app_resource_id': 'logicAppResourceId',
            'uri': 'uri',
            'action_type': 'actionType'
        }

        self._logic_app_resource_id = logic_app_resource_id
        self._uri = uri
        self._action_type = action_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AutomationActionLogicApp':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AutomationActionLogicApp of this AutomationActionLogicApp.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def logic_app_resource_id(self):
        """Gets the logic_app_resource_id of this AutomationActionLogicApp.

        The triggered Logic App Azure Resource ID. This can also reside on other subscriptions, given that you have permissions to trigger the Logic App

        :return: The logic_app_resource_id of this AutomationActionLogicApp.
        :rtype: str
        """
        return self._logic_app_resource_id

    @logic_app_resource_id.setter
    def logic_app_resource_id(self, logic_app_resource_id):
        """Sets the logic_app_resource_id of this AutomationActionLogicApp.

        The triggered Logic App Azure Resource ID. This can also reside on other subscriptions, given that you have permissions to trigger the Logic App

        :param logic_app_resource_id: The logic_app_resource_id of this AutomationActionLogicApp.
        :type logic_app_resource_id: str
        """

        self._logic_app_resource_id = logic_app_resource_id

    @property
    def uri(self):
        """Gets the uri of this AutomationActionLogicApp.

        The Logic App trigger URI endpoint (it will not be included in any response).

        :return: The uri of this AutomationActionLogicApp.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this AutomationActionLogicApp.

        The Logic App trigger URI endpoint (it will not be included in any response).

        :param uri: The uri of this AutomationActionLogicApp.
        :type uri: str
        """

        self._uri = uri

    @property
    def action_type(self):
        """Gets the action_type of this AutomationActionLogicApp.

        The type of the action that will be triggered by the Automation

        :return: The action_type of this AutomationActionLogicApp.
        :rtype: str
        """
        return self._action_type

    @action_type.setter
    def action_type(self, action_type):
        """Sets the action_type of this AutomationActionLogicApp.

        The type of the action that will be triggered by the Automation

        :param action_type: The action_type of this AutomationActionLogicApp.
        :type action_type: str
        """
        allowed_values = ["LogicApp", "EventHub", "Workspace"]  # noqa: E501
        if action_type not in allowed_values:
            raise ValueError(
                "Invalid value for `action_type` ({0}), must be one of {1}"
                .format(action_type, allowed_values)
            )

        self._action_type = action_type
