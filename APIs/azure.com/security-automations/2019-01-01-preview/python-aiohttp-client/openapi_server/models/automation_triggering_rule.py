# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AutomationTriggeringRule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, expected_value: str=None, operator: str=None, property_j_path: str=None, property_type: str=None):
        """AutomationTriggeringRule - a model defined in OpenAPI

        :param expected_value: The expected_value of this AutomationTriggeringRule.
        :param operator: The operator of this AutomationTriggeringRule.
        :param property_j_path: The property_j_path of this AutomationTriggeringRule.
        :param property_type: The property_type of this AutomationTriggeringRule.
        """
        self.openapi_types = {
            'expected_value': str,
            'operator': str,
            'property_j_path': str,
            'property_type': str
        }

        self.attribute_map = {
            'expected_value': 'expectedValue',
            'operator': 'operator',
            'property_j_path': 'propertyJPath',
            'property_type': 'propertyType'
        }

        self._expected_value = expected_value
        self._operator = operator
        self._property_j_path = property_j_path
        self._property_type = property_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AutomationTriggeringRule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AutomationTriggeringRule of this AutomationTriggeringRule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def expected_value(self):
        """Gets the expected_value of this AutomationTriggeringRule.

        The expected value.

        :return: The expected_value of this AutomationTriggeringRule.
        :rtype: str
        """
        return self._expected_value

    @expected_value.setter
    def expected_value(self, expected_value):
        """Sets the expected_value of this AutomationTriggeringRule.

        The expected value.

        :param expected_value: The expected_value of this AutomationTriggeringRule.
        :type expected_value: str
        """

        self._expected_value = expected_value

    @property
    def operator(self):
        """Gets the operator of this AutomationTriggeringRule.

        A valid comparer operator to use. A case-insensitive comparison will be applied for String PropertyType.

        :return: The operator of this AutomationTriggeringRule.
        :rtype: str
        """
        return self._operator

    @operator.setter
    def operator(self, operator):
        """Sets the operator of this AutomationTriggeringRule.

        A valid comparer operator to use. A case-insensitive comparison will be applied for String PropertyType.

        :param operator: The operator of this AutomationTriggeringRule.
        :type operator: str
        """
        allowed_values = ["Equals", "GreaterThan", "GreaterThanOrEqualTo", "LesserThan", "LesserThanOrEqualTo", "NotEquals", "Contains", "StartsWith", "EndsWith"]  # noqa: E501
        if operator not in allowed_values:
            raise ValueError(
                "Invalid value for `operator` ({0}), must be one of {1}"
                .format(operator, allowed_values)
            )

        self._operator = operator

    @property
    def property_j_path(self):
        """Gets the property_j_path of this AutomationTriggeringRule.

        The JPath of the entity model property that should be checked.

        :return: The property_j_path of this AutomationTriggeringRule.
        :rtype: str
        """
        return self._property_j_path

    @property_j_path.setter
    def property_j_path(self, property_j_path):
        """Sets the property_j_path of this AutomationTriggeringRule.

        The JPath of the entity model property that should be checked.

        :param property_j_path: The property_j_path of this AutomationTriggeringRule.
        :type property_j_path: str
        """

        self._property_j_path = property_j_path

    @property
    def property_type(self):
        """Gets the property_type of this AutomationTriggeringRule.

        The data type of the compared operands (string, integer, floating point number or a boolean [true/false]]

        :return: The property_type of this AutomationTriggeringRule.
        :rtype: str
        """
        return self._property_type

    @property_type.setter
    def property_type(self, property_type):
        """Sets the property_type of this AutomationTriggeringRule.

        The data type of the compared operands (string, integer, floating point number or a boolean [true/false]]

        :param property_type: The property_type of this AutomationTriggeringRule.
        :type property_type: str
        """
        allowed_values = ["String", "Integer", "Number", "Boolean"]  # noqa: E501
        if property_type not in allowed_values:
            raise ValueError(
                "Invalid value for `property_type` ({0}), must be one of {1}"
                .format(property_type, allowed_values)
            )

        self._property_type = property_type
