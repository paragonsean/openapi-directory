# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.automation_rule_set import AutomationRuleSet
from openapi_server import util


class AutomationSource(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, event_source: str=None, rule_sets: List[AutomationRuleSet]=None):
        """AutomationSource - a model defined in OpenAPI

        :param event_source: The event_source of this AutomationSource.
        :param rule_sets: The rule_sets of this AutomationSource.
        """
        self.openapi_types = {
            'event_source': str,
            'rule_sets': List[AutomationRuleSet]
        }

        self.attribute_map = {
            'event_source': 'eventSource',
            'rule_sets': 'ruleSets'
        }

        self._event_source = event_source
        self._rule_sets = rule_sets

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AutomationSource':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AutomationSource of this AutomationSource.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def event_source(self):
        """Gets the event_source of this AutomationSource.

        A valid event source type.

        :return: The event_source of this AutomationSource.
        :rtype: str
        """
        return self._event_source

    @event_source.setter
    def event_source(self, event_source):
        """Sets the event_source of this AutomationSource.

        A valid event source type.

        :param event_source: The event_source of this AutomationSource.
        :type event_source: str
        """
        allowed_values = ["Assessments", "Alerts"]  # noqa: E501
        if event_source not in allowed_values:
            raise ValueError(
                "Invalid value for `event_source` ({0}), must be one of {1}"
                .format(event_source, allowed_values)
            )

        self._event_source = event_source

    @property
    def rule_sets(self):
        """Gets the rule_sets of this AutomationSource.

        A set of rules which evaluate upon event interception. A logical disjunction is applied between defined rule sets (logical 'or').

        :return: The rule_sets of this AutomationSource.
        :rtype: List[AutomationRuleSet]
        """
        return self._rule_sets

    @rule_sets.setter
    def rule_sets(self, rule_sets):
        """Sets the rule_sets of this AutomationSource.

        A set of rules which evaluate upon event interception. A logical disjunction is applied between defined rule sets (logical 'or').

        :param rule_sets: The rule_sets of this AutomationSource.
        :type rule_sets: List[AutomationRuleSet]
        """

        self._rule_sets = rule_sets
