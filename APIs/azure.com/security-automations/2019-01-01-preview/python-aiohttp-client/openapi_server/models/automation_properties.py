# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.automation_action import AutomationAction
from openapi_server.models.automation_scope import AutomationScope
from openapi_server.models.automation_source import AutomationSource
from openapi_server import util


class AutomationProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, actions: List[AutomationAction]=None, description: str=None, is_enabled: bool=None, scopes: List[AutomationScope]=None, sources: List[AutomationSource]=None):
        """AutomationProperties - a model defined in OpenAPI

        :param actions: The actions of this AutomationProperties.
        :param description: The description of this AutomationProperties.
        :param is_enabled: The is_enabled of this AutomationProperties.
        :param scopes: The scopes of this AutomationProperties.
        :param sources: The sources of this AutomationProperties.
        """
        self.openapi_types = {
            'actions': List[AutomationAction],
            'description': str,
            'is_enabled': bool,
            'scopes': List[AutomationScope],
            'sources': List[AutomationSource]
        }

        self.attribute_map = {
            'actions': 'actions',
            'description': 'description',
            'is_enabled': 'isEnabled',
            'scopes': 'scopes',
            'sources': 'sources'
        }

        self._actions = actions
        self._description = description
        self._is_enabled = is_enabled
        self._scopes = scopes
        self._sources = sources

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AutomationProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AutomationProperties of this AutomationProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def actions(self):
        """Gets the actions of this AutomationProperties.

        A collection of the actions which are triggered if all the configured rules evaluations, within at least one rule set, are true.

        :return: The actions of this AutomationProperties.
        :rtype: List[AutomationAction]
        """
        return self._actions

    @actions.setter
    def actions(self, actions):
        """Sets the actions of this AutomationProperties.

        A collection of the actions which are triggered if all the configured rules evaluations, within at least one rule set, are true.

        :param actions: The actions of this AutomationProperties.
        :type actions: List[AutomationAction]
        """

        self._actions = actions

    @property
    def description(self):
        """Gets the description of this AutomationProperties.

        The security automation description.

        :return: The description of this AutomationProperties.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AutomationProperties.

        The security automation description.

        :param description: The description of this AutomationProperties.
        :type description: str
        """

        self._description = description

    @property
    def is_enabled(self):
        """Gets the is_enabled of this AutomationProperties.

        Indicates whether the security automation is enabled.

        :return: The is_enabled of this AutomationProperties.
        :rtype: bool
        """
        return self._is_enabled

    @is_enabled.setter
    def is_enabled(self, is_enabled):
        """Sets the is_enabled of this AutomationProperties.

        Indicates whether the security automation is enabled.

        :param is_enabled: The is_enabled of this AutomationProperties.
        :type is_enabled: bool
        """

        self._is_enabled = is_enabled

    @property
    def scopes(self):
        """Gets the scopes of this AutomationProperties.

        A collection of scopes on which the security automations logic is applied. Supported scopes are the subscription itself or a resource group under that subscription. The automation will only apply on defined scopes.

        :return: The scopes of this AutomationProperties.
        :rtype: List[AutomationScope]
        """
        return self._scopes

    @scopes.setter
    def scopes(self, scopes):
        """Sets the scopes of this AutomationProperties.

        A collection of scopes on which the security automations logic is applied. Supported scopes are the subscription itself or a resource group under that subscription. The automation will only apply on defined scopes.

        :param scopes: The scopes of this AutomationProperties.
        :type scopes: List[AutomationScope]
        """

        self._scopes = scopes

    @property
    def sources(self):
        """Gets the sources of this AutomationProperties.

        A collection of the source event types which evaluate the security automation set of rules.

        :return: The sources of this AutomationProperties.
        :rtype: List[AutomationSource]
        """
        return self._sources

    @sources.setter
    def sources(self, sources):
        """Sets the sources of this AutomationProperties.

        A collection of the source event types which evaluate the security automation set of rules.

        :param sources: The sources of this AutomationProperties.
        :type sources: List[AutomationSource]
        """

        self._sources = sources
