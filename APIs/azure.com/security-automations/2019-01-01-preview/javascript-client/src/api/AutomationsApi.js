/**
 * Security Center
 * API spec for Microsoft.Security (Azure Security Center) resource provider
 *
 * The version of the OpenAPI document: 2019-01-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Automation from '../model/Automation';
import AutomationList from '../model/AutomationList';
import AutomationValidationStatus from '../model/AutomationValidationStatus';
import AutomationsListDefaultResponse from '../model/AutomationsListDefaultResponse';

/**
* Automations service.
* @module api/AutomationsApi
* @version 2019-01-01-preview
*/
export default class AutomationsApi {

    /**
    * Constructs a new AutomationsApi. 
    * @alias module:api/AutomationsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the automationsCreateOrUpdate operation.
     * @callback module:api/AutomationsApi~automationsCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Automation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates or updates a security automation. If a security automation is already created and a subsequent request is issued for the same automation id, then it will be updated.
     * @param {String} apiVersion API version for the operation
     * @param {String} subscriptionId Azure subscription ID
     * @param {String} resourceGroupName The name of the resource group within the user's subscription. The name is case insensitive.
     * @param {String} automationName The security automation name.
     * @param {module:model/Automation} automation The security automation resource
     * @param {module:api/AutomationsApi~automationsCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Automation}
     */
    automationsCreateOrUpdate(apiVersion, subscriptionId, resourceGroupName, automationName, automation, callback) {
      let postBody = automation;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling automationsCreateOrUpdate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling automationsCreateOrUpdate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling automationsCreateOrUpdate");
      }
      // verify the required parameter 'automationName' is set
      if (automationName === undefined || automationName === null) {
        throw new Error("Missing the required parameter 'automationName' when calling automationsCreateOrUpdate");
      }
      // verify the required parameter 'automation' is set
      if (automation === undefined || automation === null) {
        throw new Error("Missing the required parameter 'automation' when calling automationsCreateOrUpdate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'automationName': automationName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Automation;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/automations/{automationName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the automationsDelete operation.
     * @callback module:api/AutomationsApi~automationsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a security automation.
     * @param {String} apiVersion API version for the operation
     * @param {String} subscriptionId Azure subscription ID
     * @param {String} resourceGroupName The name of the resource group within the user's subscription. The name is case insensitive.
     * @param {String} automationName The security automation name.
     * @param {module:api/AutomationsApi~automationsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    automationsDelete(apiVersion, subscriptionId, resourceGroupName, automationName, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling automationsDelete");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling automationsDelete");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling automationsDelete");
      }
      // verify the required parameter 'automationName' is set
      if (automationName === undefined || automationName === null) {
        throw new Error("Missing the required parameter 'automationName' when calling automationsDelete");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'automationName': automationName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/automations/{automationName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the automationsGet operation.
     * @callback module:api/AutomationsApi~automationsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Automation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves information about the model of a security automation.
     * @param {String} apiVersion API version for the operation
     * @param {String} subscriptionId Azure subscription ID
     * @param {String} resourceGroupName The name of the resource group within the user's subscription. The name is case insensitive.
     * @param {String} automationName The security automation name.
     * @param {module:api/AutomationsApi~automationsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Automation}
     */
    automationsGet(apiVersion, subscriptionId, resourceGroupName, automationName, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling automationsGet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling automationsGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling automationsGet");
      }
      // verify the required parameter 'automationName' is set
      if (automationName === undefined || automationName === null) {
        throw new Error("Missing the required parameter 'automationName' when calling automationsGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'automationName': automationName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Automation;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/automations/{automationName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the automationsList operation.
     * @callback module:api/AutomationsApi~automationsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AutomationList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all the security automations in the specified subscription. Use the 'nextLink' property in the response to get the next page of security automations for the specified subscription.
     * @param {String} apiVersion API version for the operation
     * @param {String} subscriptionId Azure subscription ID
     * @param {module:api/AutomationsApi~automationsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AutomationList}
     */
    automationsList(apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling automationsList");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling automationsList");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AutomationList;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Security/automations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the automationsListByResourceGroup operation.
     * @callback module:api/AutomationsApi~automationsListByResourceGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AutomationList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all the security automations in the specified resource group. Use the 'nextLink' property in the response to get the next page of security automations for the specified resource group.
     * @param {String} apiVersion API version for the operation
     * @param {String} subscriptionId Azure subscription ID
     * @param {String} resourceGroupName The name of the resource group within the user's subscription. The name is case insensitive.
     * @param {module:api/AutomationsApi~automationsListByResourceGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AutomationList}
     */
    automationsListByResourceGroup(apiVersion, subscriptionId, resourceGroupName, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling automationsListByResourceGroup");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling automationsListByResourceGroup");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling automationsListByResourceGroup");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AutomationList;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/automations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the automationsValidate operation.
     * @callback module:api/AutomationsApi~automationsValidateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AutomationValidationStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Validates the security automation model before create or update. Any validation errors are returned to the client.
     * @param {String} apiVersion API version for the operation
     * @param {String} subscriptionId Azure subscription ID
     * @param {String} resourceGroupName The name of the resource group within the user's subscription. The name is case insensitive.
     * @param {String} automationName The security automation name.
     * @param {module:model/Automation} automation The security automation resource
     * @param {module:api/AutomationsApi~automationsValidateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AutomationValidationStatus}
     */
    automationsValidate(apiVersion, subscriptionId, resourceGroupName, automationName, automation, callback) {
      let postBody = automation;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling automationsValidate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling automationsValidate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling automationsValidate");
      }
      // verify the required parameter 'automationName' is set
      if (automationName === undefined || automationName === null) {
        throw new Error("Missing the required parameter 'automationName' when calling automationsValidate");
      }
      // verify the required parameter 'automation' is set
      if (automation === undefined || automation === null) {
        throw new Error("Missing the required parameter 'automation' when calling automationsValidate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'automationName': automationName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AutomationValidationStatus;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/automations/{automationName}/validate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
