/**
 * Security Center
 * API spec for Microsoft.Security (Azure Security Center) resource provider
 *
 * The version of the OpenAPI document: 2019-01-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AutomationTriggeringRule model module.
 * @module model/AutomationTriggeringRule
 * @version 2019-01-01-preview
 */
class AutomationTriggeringRule {
    /**
     * Constructs a new <code>AutomationTriggeringRule</code>.
     * A rule which is evaluated upon event interception. The rule is configured by comparing a specific value from the event model to an expected value. This comparison is done by using one of the supported operators set.
     * @alias module:model/AutomationTriggeringRule
     */
    constructor() { 
        
        AutomationTriggeringRule.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AutomationTriggeringRule</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AutomationTriggeringRule} obj Optional instance to populate.
     * @return {module:model/AutomationTriggeringRule} The populated <code>AutomationTriggeringRule</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AutomationTriggeringRule();

            if (data.hasOwnProperty('expectedValue')) {
                obj['expectedValue'] = ApiClient.convertToType(data['expectedValue'], 'String');
            }
            if (data.hasOwnProperty('operator')) {
                obj['operator'] = ApiClient.convertToType(data['operator'], 'String');
            }
            if (data.hasOwnProperty('propertyJPath')) {
                obj['propertyJPath'] = ApiClient.convertToType(data['propertyJPath'], 'String');
            }
            if (data.hasOwnProperty('propertyType')) {
                obj['propertyType'] = ApiClient.convertToType(data['propertyType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AutomationTriggeringRule</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AutomationTriggeringRule</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['expectedValue'] && !(typeof data['expectedValue'] === 'string' || data['expectedValue'] instanceof String)) {
            throw new Error("Expected the field `expectedValue` to be a primitive type in the JSON string but got " + data['expectedValue']);
        }
        // ensure the json data is a string
        if (data['operator'] && !(typeof data['operator'] === 'string' || data['operator'] instanceof String)) {
            throw new Error("Expected the field `operator` to be a primitive type in the JSON string but got " + data['operator']);
        }
        // ensure the json data is a string
        if (data['propertyJPath'] && !(typeof data['propertyJPath'] === 'string' || data['propertyJPath'] instanceof String)) {
            throw new Error("Expected the field `propertyJPath` to be a primitive type in the JSON string but got " + data['propertyJPath']);
        }
        // ensure the json data is a string
        if (data['propertyType'] && !(typeof data['propertyType'] === 'string' || data['propertyType'] instanceof String)) {
            throw new Error("Expected the field `propertyType` to be a primitive type in the JSON string but got " + data['propertyType']);
        }

        return true;
    }


}



/**
 * The expected value.
 * @member {String} expectedValue
 */
AutomationTriggeringRule.prototype['expectedValue'] = undefined;

/**
 * A valid comparer operator to use. A case-insensitive comparison will be applied for String PropertyType.
 * @member {module:model/AutomationTriggeringRule.OperatorEnum} operator
 */
AutomationTriggeringRule.prototype['operator'] = undefined;

/**
 * The JPath of the entity model property that should be checked.
 * @member {String} propertyJPath
 */
AutomationTriggeringRule.prototype['propertyJPath'] = undefined;

/**
 * The data type of the compared operands (string, integer, floating point number or a boolean [true/false]]
 * @member {module:model/AutomationTriggeringRule.PropertyTypeEnum} propertyType
 */
AutomationTriggeringRule.prototype['propertyType'] = undefined;





/**
 * Allowed values for the <code>operator</code> property.
 * @enum {String}
 * @readonly
 */
AutomationTriggeringRule['OperatorEnum'] = {

    /**
     * value: "Equals"
     * @const
     */
    "Equals": "Equals",

    /**
     * value: "GreaterThan"
     * @const
     */
    "GreaterThan": "GreaterThan",

    /**
     * value: "GreaterThanOrEqualTo"
     * @const
     */
    "GreaterThanOrEqualTo": "GreaterThanOrEqualTo",

    /**
     * value: "LesserThan"
     * @const
     */
    "LesserThan": "LesserThan",

    /**
     * value: "LesserThanOrEqualTo"
     * @const
     */
    "LesserThanOrEqualTo": "LesserThanOrEqualTo",

    /**
     * value: "NotEquals"
     * @const
     */
    "NotEquals": "NotEquals",

    /**
     * value: "Contains"
     * @const
     */
    "Contains": "Contains",

    /**
     * value: "StartsWith"
     * @const
     */
    "StartsWith": "StartsWith",

    /**
     * value: "EndsWith"
     * @const
     */
    "EndsWith": "EndsWith"
};


/**
 * Allowed values for the <code>propertyType</code> property.
 * @enum {String}
 * @readonly
 */
AutomationTriggeringRule['PropertyTypeEnum'] = {

    /**
     * value: "String"
     * @const
     */
    "String": "String",

    /**
     * value: "Integer"
     * @const
     */
    "Integer": "Integer",

    /**
     * value: "Number"
     * @const
     */
    "Number": "Number",

    /**
     * value: "Boolean"
     * @const
     */
    "Boolean": "Boolean"
};



export default AutomationTriggeringRule;

