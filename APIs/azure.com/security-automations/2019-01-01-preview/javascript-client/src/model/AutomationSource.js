/**
 * Security Center
 * API spec for Microsoft.Security (Azure Security Center) resource provider
 *
 * The version of the OpenAPI document: 2019-01-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AutomationRuleSet from './AutomationRuleSet';

/**
 * The AutomationSource model module.
 * @module model/AutomationSource
 * @version 2019-01-01-preview
 */
class AutomationSource {
    /**
     * Constructs a new <code>AutomationSource</code>.
     * The source event types which evaluate the security automation set of rules. For example - security alerts and security assessments. To learn more about the supported security events data models schemas - please visit https://aka.ms/ASCAutomationSchemas.
     * @alias module:model/AutomationSource
     */
    constructor() { 
        
        AutomationSource.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AutomationSource</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AutomationSource} obj Optional instance to populate.
     * @return {module:model/AutomationSource} The populated <code>AutomationSource</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AutomationSource();

            if (data.hasOwnProperty('eventSource')) {
                obj['eventSource'] = ApiClient.convertToType(data['eventSource'], 'String');
            }
            if (data.hasOwnProperty('ruleSets')) {
                obj['ruleSets'] = ApiClient.convertToType(data['ruleSets'], [AutomationRuleSet]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AutomationSource</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AutomationSource</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['eventSource'] && !(typeof data['eventSource'] === 'string' || data['eventSource'] instanceof String)) {
            throw new Error("Expected the field `eventSource` to be a primitive type in the JSON string but got " + data['eventSource']);
        }
        if (data['ruleSets']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['ruleSets'])) {
                throw new Error("Expected the field `ruleSets` to be an array in the JSON data but got " + data['ruleSets']);
            }
            // validate the optional field `ruleSets` (array)
            for (const item of data['ruleSets']) {
                AutomationRuleSet.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * A valid event source type.
 * @member {module:model/AutomationSource.EventSourceEnum} eventSource
 */
AutomationSource.prototype['eventSource'] = undefined;

/**
 * A set of rules which evaluate upon event interception. A logical disjunction is applied between defined rule sets (logical 'or').
 * @member {Array.<module:model/AutomationRuleSet>} ruleSets
 */
AutomationSource.prototype['ruleSets'] = undefined;





/**
 * Allowed values for the <code>eventSource</code> property.
 * @enum {String}
 * @readonly
 */
AutomationSource['EventSourceEnum'] = {

    /**
     * value: "Assessments"
     * @const
     */
    "Assessments": "Assessments",

    /**
     * value: "Alerts"
     * @const
     */
    "Alerts": "Alerts"
};



export default AutomationSource;

