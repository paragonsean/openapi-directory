/**
 * Security Center
 * API spec for Microsoft.Security (Azure Security Center) resource provider
 *
 * The version of the OpenAPI document: 2019-01-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AutomationAction from './AutomationAction';
import AutomationScope from './AutomationScope';
import AutomationSource from './AutomationSource';

/**
 * The AutomationProperties model module.
 * @module model/AutomationProperties
 * @version 2019-01-01-preview
 */
class AutomationProperties {
    /**
     * Constructs a new <code>AutomationProperties</code>.
     * A set of properties that defines the behavior of the automation configuration. To learn more about the supported security events data models schemas - please visit https://aka.ms/ASCAutomationSchemas.
     * @alias module:model/AutomationProperties
     */
    constructor() { 
        
        AutomationProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AutomationProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AutomationProperties} obj Optional instance to populate.
     * @return {module:model/AutomationProperties} The populated <code>AutomationProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AutomationProperties();

            if (data.hasOwnProperty('actions')) {
                obj['actions'] = ApiClient.convertToType(data['actions'], [AutomationAction]);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('isEnabled')) {
                obj['isEnabled'] = ApiClient.convertToType(data['isEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('scopes')) {
                obj['scopes'] = ApiClient.convertToType(data['scopes'], [AutomationScope]);
            }
            if (data.hasOwnProperty('sources')) {
                obj['sources'] = ApiClient.convertToType(data['sources'], [AutomationSource]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AutomationProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AutomationProperties</code>.
     */
    static validateJSON(data) {
        if (data['actions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['actions'])) {
                throw new Error("Expected the field `actions` to be an array in the JSON data but got " + data['actions']);
            }
            // validate the optional field `actions` (array)
            for (const item of data['actions']) {
                AutomationAction.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        if (data['scopes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['scopes'])) {
                throw new Error("Expected the field `scopes` to be an array in the JSON data but got " + data['scopes']);
            }
            // validate the optional field `scopes` (array)
            for (const item of data['scopes']) {
                AutomationScope.validateJSON(item);
            };
        }
        if (data['sources']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['sources'])) {
                throw new Error("Expected the field `sources` to be an array in the JSON data but got " + data['sources']);
            }
            // validate the optional field `sources` (array)
            for (const item of data['sources']) {
                AutomationSource.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * A collection of the actions which are triggered if all the configured rules evaluations, within at least one rule set, are true.
 * @member {Array.<module:model/AutomationAction>} actions
 */
AutomationProperties.prototype['actions'] = undefined;

/**
 * The security automation description.
 * @member {String} description
 */
AutomationProperties.prototype['description'] = undefined;

/**
 * Indicates whether the security automation is enabled.
 * @member {Boolean} isEnabled
 */
AutomationProperties.prototype['isEnabled'] = undefined;

/**
 * A collection of scopes on which the security automations logic is applied. Supported scopes are the subscription itself or a resource group under that subscription. The automation will only apply on defined scopes.
 * @member {Array.<module:model/AutomationScope>} scopes
 */
AutomationProperties.prototype['scopes'] = undefined;

/**
 * A collection of the source event types which evaluate the security automation set of rules.
 * @member {Array.<module:model/AutomationSource>} sources
 */
AutomationProperties.prototype['sources'] = undefined;






export default AutomationProperties;

