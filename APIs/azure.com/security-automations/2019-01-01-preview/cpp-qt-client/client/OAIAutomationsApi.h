/**
 * Security Center
 * API spec for Microsoft.Security (Azure Security Center) resource provider
 *
 * The version of the OpenAPI document: 2019-01-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAutomationsApi_H
#define OAI_OAIAutomationsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAutomation.h"
#include "OAIAutomationList.h"
#include "OAIAutomationValidationStatus.h"
#include "OAIAutomations_List_default_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAutomationsApi : public QObject {
    Q_OBJECT

public:
    OAIAutomationsApi(const int timeOut = 0);
    ~OAIAutomationsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  automation_name QString [required]
    * @param[in]  automation OAIAutomation [required]
    */
    virtual void automationsCreateOrUpdate(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &automation_name, const OAIAutomation &automation);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  automation_name QString [required]
    */
    virtual void automationsDelete(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &automation_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  automation_name QString [required]
    */
    virtual void automationsGet(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &automation_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void automationsList(const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    */
    virtual void automationsListByResourceGroup(const QString &api_version, const QString &subscription_id, const QString &resource_group_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  automation_name QString [required]
    * @param[in]  automation OAIAutomation [required]
    */
    virtual void automationsValidate(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &automation_name, const OAIAutomation &automation);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void automationsCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void automationsDeleteCallback(OAIHttpRequestWorker *worker);
    void automationsGetCallback(OAIHttpRequestWorker *worker);
    void automationsListCallback(OAIHttpRequestWorker *worker);
    void automationsListByResourceGroupCallback(OAIHttpRequestWorker *worker);
    void automationsValidateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void automationsCreateOrUpdateSignal(OAIAutomation summary);
    void automationsDeleteSignal();
    void automationsGetSignal(OAIAutomation summary);
    void automationsListSignal(OAIAutomationList summary);
    void automationsListByResourceGroupSignal(OAIAutomationList summary);
    void automationsValidateSignal(OAIAutomationValidationStatus summary);


    void automationsCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIAutomation summary);
    void automationsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void automationsGetSignalFull(OAIHttpRequestWorker *worker, OAIAutomation summary);
    void automationsListSignalFull(OAIHttpRequestWorker *worker, OAIAutomationList summary);
    void automationsListByResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAIAutomationList summary);
    void automationsValidateSignalFull(OAIHttpRequestWorker *worker, OAIAutomationValidationStatus summary);

    Q_DECL_DEPRECATED_X("Use automationsCreateOrUpdateSignalError() instead")
    void automationsCreateOrUpdateSignalE(OAIAutomation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void automationsCreateOrUpdateSignalError(OAIAutomation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use automationsDeleteSignalError() instead")
    void automationsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void automationsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use automationsGetSignalError() instead")
    void automationsGetSignalE(OAIAutomation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void automationsGetSignalError(OAIAutomation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use automationsListSignalError() instead")
    void automationsListSignalE(OAIAutomationList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void automationsListSignalError(OAIAutomationList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use automationsListByResourceGroupSignalError() instead")
    void automationsListByResourceGroupSignalE(OAIAutomationList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void automationsListByResourceGroupSignalError(OAIAutomationList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use automationsValidateSignalError() instead")
    void automationsValidateSignalE(OAIAutomationValidationStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void automationsValidateSignalError(OAIAutomationValidationStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use automationsCreateOrUpdateSignalErrorFull() instead")
    void automationsCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void automationsCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use automationsDeleteSignalErrorFull() instead")
    void automationsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void automationsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use automationsGetSignalErrorFull() instead")
    void automationsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void automationsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use automationsListSignalErrorFull() instead")
    void automationsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void automationsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use automationsListByResourceGroupSignalErrorFull() instead")
    void automationsListByResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void automationsListByResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use automationsValidateSignalErrorFull() instead")
    void automationsValidateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void automationsValidateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
