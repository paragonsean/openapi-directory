/**
 * Security Center
 * API spec for Microsoft.Security (Azure Security Center) resource provider
 *
 * The version of the OpenAPI document: 2019-01-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAutomationTriggeringRule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAutomationTriggeringRule::OAIAutomationTriggeringRule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAutomationTriggeringRule::OAIAutomationTriggeringRule() {
    this->initializeModel();
}

OAIAutomationTriggeringRule::~OAIAutomationTriggeringRule() {}

void OAIAutomationTriggeringRule::initializeModel() {

    m_expected_value_isSet = false;
    m_expected_value_isValid = false;

    m_r_operator_isSet = false;
    m_r_operator_isValid = false;

    m_property_j_path_isSet = false;
    m_property_j_path_isValid = false;

    m_property_type_isSet = false;
    m_property_type_isValid = false;
}

void OAIAutomationTriggeringRule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAutomationTriggeringRule::fromJsonObject(QJsonObject json) {

    m_expected_value_isValid = ::OpenAPI::fromJsonValue(m_expected_value, json[QString("expectedValue")]);
    m_expected_value_isSet = !json[QString("expectedValue")].isNull() && m_expected_value_isValid;

    m_r_operator_isValid = ::OpenAPI::fromJsonValue(m_r_operator, json[QString("operator")]);
    m_r_operator_isSet = !json[QString("operator")].isNull() && m_r_operator_isValid;

    m_property_j_path_isValid = ::OpenAPI::fromJsonValue(m_property_j_path, json[QString("propertyJPath")]);
    m_property_j_path_isSet = !json[QString("propertyJPath")].isNull() && m_property_j_path_isValid;

    m_property_type_isValid = ::OpenAPI::fromJsonValue(m_property_type, json[QString("propertyType")]);
    m_property_type_isSet = !json[QString("propertyType")].isNull() && m_property_type_isValid;
}

QString OAIAutomationTriggeringRule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAutomationTriggeringRule::asJsonObject() const {
    QJsonObject obj;
    if (m_expected_value_isSet) {
        obj.insert(QString("expectedValue"), ::OpenAPI::toJsonValue(m_expected_value));
    }
    if (m_r_operator_isSet) {
        obj.insert(QString("operator"), ::OpenAPI::toJsonValue(m_r_operator));
    }
    if (m_property_j_path_isSet) {
        obj.insert(QString("propertyJPath"), ::OpenAPI::toJsonValue(m_property_j_path));
    }
    if (m_property_type_isSet) {
        obj.insert(QString("propertyType"), ::OpenAPI::toJsonValue(m_property_type));
    }
    return obj;
}

QString OAIAutomationTriggeringRule::getExpectedValue() const {
    return m_expected_value;
}
void OAIAutomationTriggeringRule::setExpectedValue(const QString &expected_value) {
    m_expected_value = expected_value;
    m_expected_value_isSet = true;
}

bool OAIAutomationTriggeringRule::is_expected_value_Set() const{
    return m_expected_value_isSet;
}

bool OAIAutomationTriggeringRule::is_expected_value_Valid() const{
    return m_expected_value_isValid;
}

QString OAIAutomationTriggeringRule::getROperator() const {
    return m_r_operator;
}
void OAIAutomationTriggeringRule::setROperator(const QString &r_operator) {
    m_r_operator = r_operator;
    m_r_operator_isSet = true;
}

bool OAIAutomationTriggeringRule::is_r_operator_Set() const{
    return m_r_operator_isSet;
}

bool OAIAutomationTriggeringRule::is_r_operator_Valid() const{
    return m_r_operator_isValid;
}

QString OAIAutomationTriggeringRule::getPropertyJPath() const {
    return m_property_j_path;
}
void OAIAutomationTriggeringRule::setPropertyJPath(const QString &property_j_path) {
    m_property_j_path = property_j_path;
    m_property_j_path_isSet = true;
}

bool OAIAutomationTriggeringRule::is_property_j_path_Set() const{
    return m_property_j_path_isSet;
}

bool OAIAutomationTriggeringRule::is_property_j_path_Valid() const{
    return m_property_j_path_isValid;
}

QString OAIAutomationTriggeringRule::getPropertyType() const {
    return m_property_type;
}
void OAIAutomationTriggeringRule::setPropertyType(const QString &property_type) {
    m_property_type = property_type;
    m_property_type_isSet = true;
}

bool OAIAutomationTriggeringRule::is_property_type_Set() const{
    return m_property_type_isSet;
}

bool OAIAutomationTriggeringRule::is_property_type_Valid() const{
    return m_property_type_isValid;
}

bool OAIAutomationTriggeringRule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_expected_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_operator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_property_j_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_property_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAutomationTriggeringRule::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
