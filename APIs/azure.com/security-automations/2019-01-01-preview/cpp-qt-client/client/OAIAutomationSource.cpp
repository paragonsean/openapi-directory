/**
 * Security Center
 * API spec for Microsoft.Security (Azure Security Center) resource provider
 *
 * The version of the OpenAPI document: 2019-01-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAutomationSource.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAutomationSource::OAIAutomationSource(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAutomationSource::OAIAutomationSource() {
    this->initializeModel();
}

OAIAutomationSource::~OAIAutomationSource() {}

void OAIAutomationSource::initializeModel() {

    m_event_source_isSet = false;
    m_event_source_isValid = false;

    m_rule_sets_isSet = false;
    m_rule_sets_isValid = false;
}

void OAIAutomationSource::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAutomationSource::fromJsonObject(QJsonObject json) {

    m_event_source_isValid = ::OpenAPI::fromJsonValue(m_event_source, json[QString("eventSource")]);
    m_event_source_isSet = !json[QString("eventSource")].isNull() && m_event_source_isValid;

    m_rule_sets_isValid = ::OpenAPI::fromJsonValue(m_rule_sets, json[QString("ruleSets")]);
    m_rule_sets_isSet = !json[QString("ruleSets")].isNull() && m_rule_sets_isValid;
}

QString OAIAutomationSource::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAutomationSource::asJsonObject() const {
    QJsonObject obj;
    if (m_event_source_isSet) {
        obj.insert(QString("eventSource"), ::OpenAPI::toJsonValue(m_event_source));
    }
    if (m_rule_sets.size() > 0) {
        obj.insert(QString("ruleSets"), ::OpenAPI::toJsonValue(m_rule_sets));
    }
    return obj;
}

QString OAIAutomationSource::getEventSource() const {
    return m_event_source;
}
void OAIAutomationSource::setEventSource(const QString &event_source) {
    m_event_source = event_source;
    m_event_source_isSet = true;
}

bool OAIAutomationSource::is_event_source_Set() const{
    return m_event_source_isSet;
}

bool OAIAutomationSource::is_event_source_Valid() const{
    return m_event_source_isValid;
}

QList<OAIAutomationRuleSet> OAIAutomationSource::getRuleSets() const {
    return m_rule_sets;
}
void OAIAutomationSource::setRuleSets(const QList<OAIAutomationRuleSet> &rule_sets) {
    m_rule_sets = rule_sets;
    m_rule_sets_isSet = true;
}

bool OAIAutomationSource::is_rule_sets_Set() const{
    return m_rule_sets_isSet;
}

bool OAIAutomationSource::is_rule_sets_Valid() const{
    return m_rule_sets_isValid;
}

bool OAIAutomationSource::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_event_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rule_sets.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAutomationSource::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
