/**
 * Security Center
 * API spec for Microsoft.Security (Azure Security Center) resource provider
 *
 * The version of the OpenAPI document: 2019-01-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAutomationScope.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAutomationScope::OAIAutomationScope(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAutomationScope::OAIAutomationScope() {
    this->initializeModel();
}

OAIAutomationScope::~OAIAutomationScope() {}

void OAIAutomationScope::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_scope_path_isSet = false;
    m_scope_path_isValid = false;
}

void OAIAutomationScope::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAutomationScope::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_scope_path_isValid = ::OpenAPI::fromJsonValue(m_scope_path, json[QString("scopePath")]);
    m_scope_path_isSet = !json[QString("scopePath")].isNull() && m_scope_path_isValid;
}

QString OAIAutomationScope::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAutomationScope::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_scope_path_isSet) {
        obj.insert(QString("scopePath"), ::OpenAPI::toJsonValue(m_scope_path));
    }
    return obj;
}

QString OAIAutomationScope::getDescription() const {
    return m_description;
}
void OAIAutomationScope::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIAutomationScope::is_description_Set() const{
    return m_description_isSet;
}

bool OAIAutomationScope::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIAutomationScope::getScopePath() const {
    return m_scope_path;
}
void OAIAutomationScope::setScopePath(const QString &scope_path) {
    m_scope_path = scope_path;
    m_scope_path_isSet = true;
}

bool OAIAutomationScope::is_scope_path_Set() const{
    return m_scope_path_isSet;
}

bool OAIAutomationScope::is_scope_path_Valid() const{
    return m_scope_path_isValid;
}

bool OAIAutomationScope::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scope_path_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAutomationScope::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
