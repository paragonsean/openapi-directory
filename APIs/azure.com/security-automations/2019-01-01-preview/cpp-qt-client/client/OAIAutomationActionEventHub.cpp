/**
 * Security Center
 * API spec for Microsoft.Security (Azure Security Center) resource provider
 *
 * The version of the OpenAPI document: 2019-01-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAutomationActionEventHub.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAutomationActionEventHub::OAIAutomationActionEventHub(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAutomationActionEventHub::OAIAutomationActionEventHub() {
    this->initializeModel();
}

OAIAutomationActionEventHub::~OAIAutomationActionEventHub() {}

void OAIAutomationActionEventHub::initializeModel() {

    m_connection_string_isSet = false;
    m_connection_string_isValid = false;

    m_event_hub_resource_id_isSet = false;
    m_event_hub_resource_id_isValid = false;

    m_sas_policy_name_isSet = false;
    m_sas_policy_name_isValid = false;

    m_action_type_isSet = false;
    m_action_type_isValid = false;
}

void OAIAutomationActionEventHub::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAutomationActionEventHub::fromJsonObject(QJsonObject json) {

    m_connection_string_isValid = ::OpenAPI::fromJsonValue(m_connection_string, json[QString("connectionString")]);
    m_connection_string_isSet = !json[QString("connectionString")].isNull() && m_connection_string_isValid;

    m_event_hub_resource_id_isValid = ::OpenAPI::fromJsonValue(m_event_hub_resource_id, json[QString("eventHubResourceId")]);
    m_event_hub_resource_id_isSet = !json[QString("eventHubResourceId")].isNull() && m_event_hub_resource_id_isValid;

    m_sas_policy_name_isValid = ::OpenAPI::fromJsonValue(m_sas_policy_name, json[QString("sasPolicyName")]);
    m_sas_policy_name_isSet = !json[QString("sasPolicyName")].isNull() && m_sas_policy_name_isValid;

    m_action_type_isValid = ::OpenAPI::fromJsonValue(m_action_type, json[QString("actionType")]);
    m_action_type_isSet = !json[QString("actionType")].isNull() && m_action_type_isValid;
}

QString OAIAutomationActionEventHub::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAutomationActionEventHub::asJsonObject() const {
    QJsonObject obj;
    if (m_connection_string_isSet) {
        obj.insert(QString("connectionString"), ::OpenAPI::toJsonValue(m_connection_string));
    }
    if (m_event_hub_resource_id_isSet) {
        obj.insert(QString("eventHubResourceId"), ::OpenAPI::toJsonValue(m_event_hub_resource_id));
    }
    if (m_sas_policy_name_isSet) {
        obj.insert(QString("sasPolicyName"), ::OpenAPI::toJsonValue(m_sas_policy_name));
    }
    if (m_action_type_isSet) {
        obj.insert(QString("actionType"), ::OpenAPI::toJsonValue(m_action_type));
    }
    return obj;
}

QString OAIAutomationActionEventHub::getConnectionString() const {
    return m_connection_string;
}
void OAIAutomationActionEventHub::setConnectionString(const QString &connection_string) {
    m_connection_string = connection_string;
    m_connection_string_isSet = true;
}

bool OAIAutomationActionEventHub::is_connection_string_Set() const{
    return m_connection_string_isSet;
}

bool OAIAutomationActionEventHub::is_connection_string_Valid() const{
    return m_connection_string_isValid;
}

QString OAIAutomationActionEventHub::getEventHubResourceId() const {
    return m_event_hub_resource_id;
}
void OAIAutomationActionEventHub::setEventHubResourceId(const QString &event_hub_resource_id) {
    m_event_hub_resource_id = event_hub_resource_id;
    m_event_hub_resource_id_isSet = true;
}

bool OAIAutomationActionEventHub::is_event_hub_resource_id_Set() const{
    return m_event_hub_resource_id_isSet;
}

bool OAIAutomationActionEventHub::is_event_hub_resource_id_Valid() const{
    return m_event_hub_resource_id_isValid;
}

QString OAIAutomationActionEventHub::getSasPolicyName() const {
    return m_sas_policy_name;
}
void OAIAutomationActionEventHub::setSasPolicyName(const QString &sas_policy_name) {
    m_sas_policy_name = sas_policy_name;
    m_sas_policy_name_isSet = true;
}

bool OAIAutomationActionEventHub::is_sas_policy_name_Set() const{
    return m_sas_policy_name_isSet;
}

bool OAIAutomationActionEventHub::is_sas_policy_name_Valid() const{
    return m_sas_policy_name_isValid;
}

QString OAIAutomationActionEventHub::getActionType() const {
    return m_action_type;
}
void OAIAutomationActionEventHub::setActionType(const QString &action_type) {
    m_action_type = action_type;
    m_action_type_isSet = true;
}

bool OAIAutomationActionEventHub::is_action_type_Set() const{
    return m_action_type_isSet;
}

bool OAIAutomationActionEventHub::is_action_type_Valid() const{
    return m_action_type_isValid;
}

bool OAIAutomationActionEventHub::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_connection_string_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_hub_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sas_policy_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_action_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAutomationActionEventHub::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_action_type_isValid && true;
}

} // namespace OpenAPI
