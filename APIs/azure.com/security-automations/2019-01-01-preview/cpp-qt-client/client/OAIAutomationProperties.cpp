/**
 * Security Center
 * API spec for Microsoft.Security (Azure Security Center) resource provider
 *
 * The version of the OpenAPI document: 2019-01-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAutomationProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAutomationProperties::OAIAutomationProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAutomationProperties::OAIAutomationProperties() {
    this->initializeModel();
}

OAIAutomationProperties::~OAIAutomationProperties() {}

void OAIAutomationProperties::initializeModel() {

    m_actions_isSet = false;
    m_actions_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_is_enabled_isSet = false;
    m_is_enabled_isValid = false;

    m_scopes_isSet = false;
    m_scopes_isValid = false;

    m_sources_isSet = false;
    m_sources_isValid = false;
}

void OAIAutomationProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAutomationProperties::fromJsonObject(QJsonObject json) {

    m_actions_isValid = ::OpenAPI::fromJsonValue(m_actions, json[QString("actions")]);
    m_actions_isSet = !json[QString("actions")].isNull() && m_actions_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_is_enabled_isValid = ::OpenAPI::fromJsonValue(m_is_enabled, json[QString("isEnabled")]);
    m_is_enabled_isSet = !json[QString("isEnabled")].isNull() && m_is_enabled_isValid;

    m_scopes_isValid = ::OpenAPI::fromJsonValue(m_scopes, json[QString("scopes")]);
    m_scopes_isSet = !json[QString("scopes")].isNull() && m_scopes_isValid;

    m_sources_isValid = ::OpenAPI::fromJsonValue(m_sources, json[QString("sources")]);
    m_sources_isSet = !json[QString("sources")].isNull() && m_sources_isValid;
}

QString OAIAutomationProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAutomationProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_actions.size() > 0) {
        obj.insert(QString("actions"), ::OpenAPI::toJsonValue(m_actions));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_is_enabled_isSet) {
        obj.insert(QString("isEnabled"), ::OpenAPI::toJsonValue(m_is_enabled));
    }
    if (m_scopes.size() > 0) {
        obj.insert(QString("scopes"), ::OpenAPI::toJsonValue(m_scopes));
    }
    if (m_sources.size() > 0) {
        obj.insert(QString("sources"), ::OpenAPI::toJsonValue(m_sources));
    }
    return obj;
}

QList<OAIAutomationAction> OAIAutomationProperties::getActions() const {
    return m_actions;
}
void OAIAutomationProperties::setActions(const QList<OAIAutomationAction> &actions) {
    m_actions = actions;
    m_actions_isSet = true;
}

bool OAIAutomationProperties::is_actions_Set() const{
    return m_actions_isSet;
}

bool OAIAutomationProperties::is_actions_Valid() const{
    return m_actions_isValid;
}

QString OAIAutomationProperties::getDescription() const {
    return m_description;
}
void OAIAutomationProperties::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIAutomationProperties::is_description_Set() const{
    return m_description_isSet;
}

bool OAIAutomationProperties::is_description_Valid() const{
    return m_description_isValid;
}

bool OAIAutomationProperties::isIsEnabled() const {
    return m_is_enabled;
}
void OAIAutomationProperties::setIsEnabled(const bool &is_enabled) {
    m_is_enabled = is_enabled;
    m_is_enabled_isSet = true;
}

bool OAIAutomationProperties::is_is_enabled_Set() const{
    return m_is_enabled_isSet;
}

bool OAIAutomationProperties::is_is_enabled_Valid() const{
    return m_is_enabled_isValid;
}

QList<OAIAutomationScope> OAIAutomationProperties::getScopes() const {
    return m_scopes;
}
void OAIAutomationProperties::setScopes(const QList<OAIAutomationScope> &scopes) {
    m_scopes = scopes;
    m_scopes_isSet = true;
}

bool OAIAutomationProperties::is_scopes_Set() const{
    return m_scopes_isSet;
}

bool OAIAutomationProperties::is_scopes_Valid() const{
    return m_scopes_isValid;
}

QList<OAIAutomationSource> OAIAutomationProperties::getSources() const {
    return m_sources;
}
void OAIAutomationProperties::setSources(const QList<OAIAutomationSource> &sources) {
    m_sources = sources;
    m_sources_isSet = true;
}

bool OAIAutomationProperties::is_sources_Set() const{
    return m_sources_isSet;
}

bool OAIAutomationProperties::is_sources_Valid() const{
    return m_sources_isValid;
}

bool OAIAutomationProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_actions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scopes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_sources.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAutomationProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
