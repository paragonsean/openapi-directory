/**
 * Security Center
 * API spec for Microsoft.Security (Azure Security Center) resource provider
 *
 * The version of the OpenAPI document: 2017-08-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CloudError from '../model/CloudError';
import WorkspaceSetting from '../model/WorkspaceSetting';
import WorkspaceSettingList from '../model/WorkspaceSettingList';

/**
* WorkspaceSettings service.
* @module api/WorkspaceSettingsApi
* @version 2017-08-01-preview
*/
export default class WorkspaceSettingsApi {

    /**
    * Constructs a new WorkspaceSettingsApi. 
    * @alias module:api/WorkspaceSettingsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the workspaceSettingsCreate operation.
     * @callback module:api/WorkspaceSettingsApi~workspaceSettingsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WorkspaceSetting} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * creating settings about where we should store your security data and logs
     * @param {module:model/String} apiVersion API version for the operation
     * @param {String} subscriptionId Azure subscription ID
     * @param {String} workspaceSettingName Name of the security setting
     * @param {module:model/WorkspaceSetting} workspaceSetting Security data setting object
     * @param {module:api/WorkspaceSettingsApi~workspaceSettingsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WorkspaceSetting}
     */
    workspaceSettingsCreate(apiVersion, subscriptionId, workspaceSettingName, workspaceSetting, callback) {
      let postBody = workspaceSetting;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling workspaceSettingsCreate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling workspaceSettingsCreate");
      }
      // verify the required parameter 'workspaceSettingName' is set
      if (workspaceSettingName === undefined || workspaceSettingName === null) {
        throw new Error("Missing the required parameter 'workspaceSettingName' when calling workspaceSettingsCreate");
      }
      // verify the required parameter 'workspaceSetting' is set
      if (workspaceSetting === undefined || workspaceSetting === null) {
        throw new Error("Missing the required parameter 'workspaceSetting' when calling workspaceSettingsCreate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'workspaceSettingName': workspaceSettingName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = WorkspaceSetting;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Security/workspaceSettings/{workspaceSettingName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the workspaceSettingsDelete operation.
     * @callback module:api/WorkspaceSettingsApi~workspaceSettingsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the custom workspace settings for this subscription. new VMs will report to the default workspace
     * @param {module:model/String} apiVersion API version for the operation
     * @param {String} subscriptionId Azure subscription ID
     * @param {String} workspaceSettingName Name of the security setting
     * @param {module:api/WorkspaceSettingsApi~workspaceSettingsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    workspaceSettingsDelete(apiVersion, subscriptionId, workspaceSettingName, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling workspaceSettingsDelete");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling workspaceSettingsDelete");
      }
      // verify the required parameter 'workspaceSettingName' is set
      if (workspaceSettingName === undefined || workspaceSettingName === null) {
        throw new Error("Missing the required parameter 'workspaceSettingName' when calling workspaceSettingsDelete");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'workspaceSettingName': workspaceSettingName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Security/workspaceSettings/{workspaceSettingName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the workspaceSettingsGet operation.
     * @callback module:api/WorkspaceSettingsApi~workspaceSettingsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WorkspaceSetting} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Settings about where we should store your security data and logs. If the result is empty, it means that no custom-workspace configuration was set
     * @param {module:model/String} apiVersion API version for the operation
     * @param {String} subscriptionId Azure subscription ID
     * @param {String} workspaceSettingName Name of the security setting
     * @param {module:api/WorkspaceSettingsApi~workspaceSettingsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WorkspaceSetting}
     */
    workspaceSettingsGet(apiVersion, subscriptionId, workspaceSettingName, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling workspaceSettingsGet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling workspaceSettingsGet");
      }
      // verify the required parameter 'workspaceSettingName' is set
      if (workspaceSettingName === undefined || workspaceSettingName === null) {
        throw new Error("Missing the required parameter 'workspaceSettingName' when calling workspaceSettingsGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'workspaceSettingName': workspaceSettingName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WorkspaceSetting;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Security/workspaceSettings/{workspaceSettingName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the workspaceSettingsList operation.
     * @callback module:api/WorkspaceSettingsApi~workspaceSettingsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WorkspaceSettingList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Settings about where we should store your security data and logs. If the result is empty, it means that no custom-workspace configuration was set
     * @param {module:model/String} apiVersion API version for the operation
     * @param {String} subscriptionId Azure subscription ID
     * @param {module:api/WorkspaceSettingsApi~workspaceSettingsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WorkspaceSettingList}
     */
    workspaceSettingsList(apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling workspaceSettingsList");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling workspaceSettingsList");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WorkspaceSettingList;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Security/workspaceSettings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the workspaceSettingsUpdate operation.
     * @callback module:api/WorkspaceSettingsApi~workspaceSettingsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WorkspaceSetting} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Settings about where we should store your security data and logs
     * @param {module:model/String} apiVersion API version for the operation
     * @param {String} subscriptionId Azure subscription ID
     * @param {String} workspaceSettingName Name of the security setting
     * @param {module:model/WorkspaceSetting} workspaceSetting Security data setting object
     * @param {module:api/WorkspaceSettingsApi~workspaceSettingsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WorkspaceSetting}
     */
    workspaceSettingsUpdate(apiVersion, subscriptionId, workspaceSettingName, workspaceSetting, callback) {
      let postBody = workspaceSetting;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling workspaceSettingsUpdate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling workspaceSettingsUpdate");
      }
      // verify the required parameter 'workspaceSettingName' is set
      if (workspaceSettingName === undefined || workspaceSettingName === null) {
        throw new Error("Missing the required parameter 'workspaceSettingName' when calling workspaceSettingsUpdate");
      }
      // verify the required parameter 'workspaceSetting' is set
      if (workspaceSetting === undefined || workspaceSetting === null) {
        throw new Error("Missing the required parameter 'workspaceSetting' when calling workspaceSettingsUpdate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'workspaceSettingName': workspaceSettingName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = WorkspaceSetting;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Security/workspaceSettings/{workspaceSettingName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
