/**
 * Security Center
 * API spec for Microsoft.Security (Azure Security Center) resource provider
 *
 * The version of the OpenAPI document: 2017-08-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CloudError from '../model/CloudError';
import InformationProtectionPolicy from '../model/InformationProtectionPolicy';
import InformationProtectionPolicyList from '../model/InformationProtectionPolicyList';

/**
* InformationProtectionPolicies service.
* @module api/InformationProtectionPoliciesApi
* @version 2017-08-01-preview
*/
export default class InformationProtectionPoliciesApi {

    /**
    * Constructs a new InformationProtectionPoliciesApi. 
    * @alias module:api/InformationProtectionPoliciesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the informationProtectionPoliciesCreateOrUpdate operation.
     * @callback module:api/InformationProtectionPoliciesApi~informationProtectionPoliciesCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InformationProtectionPolicy} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Details of the information protection policy.
     * @param {module:model/String} apiVersion API version for the operation
     * @param {String} scope Scope of the query, can be subscription (/subscriptions/0b06d9ea-afe6-4779-bd59-30e5c2d9d13f) or management group (/providers/Microsoft.Management/managementGroups/mgName).
     * @param {module:model/String} informationProtectionPolicyName Name of the information protection policy.
     * @param {module:api/InformationProtectionPoliciesApi~informationProtectionPoliciesCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InformationProtectionPolicy}
     */
    informationProtectionPoliciesCreateOrUpdate(apiVersion, scope, informationProtectionPolicyName, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling informationProtectionPoliciesCreateOrUpdate");
      }
      // verify the required parameter 'scope' is set
      if (scope === undefined || scope === null) {
        throw new Error("Missing the required parameter 'scope' when calling informationProtectionPoliciesCreateOrUpdate");
      }
      // verify the required parameter 'informationProtectionPolicyName' is set
      if (informationProtectionPolicyName === undefined || informationProtectionPolicyName === null) {
        throw new Error("Missing the required parameter 'informationProtectionPolicyName' when calling informationProtectionPoliciesCreateOrUpdate");
      }

      let pathParams = {
        'scope': scope,
        'informationProtectionPolicyName': informationProtectionPolicyName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InformationProtectionPolicy;
      return this.apiClient.callApi(
        '/{scope}/providers/Microsoft.Security/informationProtectionPolicies/{informationProtectionPolicyName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the informationProtectionPoliciesGet operation.
     * @callback module:api/InformationProtectionPoliciesApi~informationProtectionPoliciesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InformationProtectionPolicy} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Details of the information protection policy.
     * @param {module:model/String} apiVersion API version for the operation
     * @param {String} scope Scope of the query, can be subscription (/subscriptions/0b06d9ea-afe6-4779-bd59-30e5c2d9d13f) or management group (/providers/Microsoft.Management/managementGroups/mgName).
     * @param {module:model/String} informationProtectionPolicyName Name of the information protection policy.
     * @param {module:api/InformationProtectionPoliciesApi~informationProtectionPoliciesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InformationProtectionPolicy}
     */
    informationProtectionPoliciesGet(apiVersion, scope, informationProtectionPolicyName, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling informationProtectionPoliciesGet");
      }
      // verify the required parameter 'scope' is set
      if (scope === undefined || scope === null) {
        throw new Error("Missing the required parameter 'scope' when calling informationProtectionPoliciesGet");
      }
      // verify the required parameter 'informationProtectionPolicyName' is set
      if (informationProtectionPolicyName === undefined || informationProtectionPolicyName === null) {
        throw new Error("Missing the required parameter 'informationProtectionPolicyName' when calling informationProtectionPoliciesGet");
      }

      let pathParams = {
        'scope': scope,
        'informationProtectionPolicyName': informationProtectionPolicyName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InformationProtectionPolicy;
      return this.apiClient.callApi(
        '/{scope}/providers/Microsoft.Security/informationProtectionPolicies/{informationProtectionPolicyName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the informationProtectionPoliciesList operation.
     * @callback module:api/InformationProtectionPoliciesApi~informationProtectionPoliciesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InformationProtectionPolicyList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Information protection policies of a specific management group.
     * @param {module:model/String} apiVersion API version for the operation
     * @param {String} scope Scope of the query, can be subscription (/subscriptions/0b06d9ea-afe6-4779-bd59-30e5c2d9d13f) or management group (/providers/Microsoft.Management/managementGroups/mgName).
     * @param {module:api/InformationProtectionPoliciesApi~informationProtectionPoliciesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InformationProtectionPolicyList}
     */
    informationProtectionPoliciesList(apiVersion, scope, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling informationProtectionPoliciesList");
      }
      // verify the required parameter 'scope' is set
      if (scope === undefined || scope === null) {
        throw new Error("Missing the required parameter 'scope' when calling informationProtectionPoliciesList");
      }

      let pathParams = {
        'scope': scope
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InformationProtectionPolicyList;
      return this.apiClient.callApi(
        '/{scope}/providers/Microsoft.Security/informationProtectionPolicies', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
