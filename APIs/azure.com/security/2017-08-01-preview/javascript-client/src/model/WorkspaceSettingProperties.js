/**
 * Security Center
 * API spec for Microsoft.Security (Azure Security Center) resource provider
 *
 * The version of the OpenAPI document: 2017-08-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The WorkspaceSettingProperties model module.
 * @module model/WorkspaceSettingProperties
 * @version 2017-08-01-preview
 */
class WorkspaceSettingProperties {
    /**
     * Constructs a new <code>WorkspaceSettingProperties</code>.
     * Workspace setting data
     * @alias module:model/WorkspaceSettingProperties
     * @param scope {String} All the VMs in this scope will send their security data to the mentioned workspace unless overridden by a setting with more specific scope
     * @param workspaceId {String} The full Azure ID of the workspace to save the data in
     */
    constructor(scope, workspaceId) { 
        
        WorkspaceSettingProperties.initialize(this, scope, workspaceId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, scope, workspaceId) { 
        obj['scope'] = scope;
        obj['workspaceId'] = workspaceId;
    }

    /**
     * Constructs a <code>WorkspaceSettingProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WorkspaceSettingProperties} obj Optional instance to populate.
     * @return {module:model/WorkspaceSettingProperties} The populated <code>WorkspaceSettingProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WorkspaceSettingProperties();

            if (data.hasOwnProperty('scope')) {
                obj['scope'] = ApiClient.convertToType(data['scope'], 'String');
            }
            if (data.hasOwnProperty('workspaceId')) {
                obj['workspaceId'] = ApiClient.convertToType(data['workspaceId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WorkspaceSettingProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WorkspaceSettingProperties</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of WorkspaceSettingProperties.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['scope'] && !(typeof data['scope'] === 'string' || data['scope'] instanceof String)) {
            throw new Error("Expected the field `scope` to be a primitive type in the JSON string but got " + data['scope']);
        }
        // ensure the json data is a string
        if (data['workspaceId'] && !(typeof data['workspaceId'] === 'string' || data['workspaceId'] instanceof String)) {
            throw new Error("Expected the field `workspaceId` to be a primitive type in the JSON string but got " + data['workspaceId']);
        }

        return true;
    }


}

WorkspaceSettingProperties.RequiredProperties = ["scope", "workspaceId"];

/**
 * All the VMs in this scope will send their security data to the mentioned workspace unless overridden by a setting with more specific scope
 * @member {String} scope
 */
WorkspaceSettingProperties.prototype['scope'] = undefined;

/**
 * The full Azure ID of the workspace to save the data in
 * @member {String} workspaceId
 */
WorkspaceSettingProperties.prototype['workspaceId'] = undefined;






export default WorkspaceSettingProperties;

