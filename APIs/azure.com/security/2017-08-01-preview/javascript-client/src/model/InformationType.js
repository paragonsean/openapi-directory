/**
 * Security Center
 * API spec for Microsoft.Security (Azure Security Center) resource provider
 *
 * The version of the OpenAPI document: 2017-08-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import InformationProtectionKeyword from './InformationProtectionKeyword';

/**
 * The InformationType model module.
 * @module model/InformationType
 * @version 2017-08-01-preview
 */
class InformationType {
    /**
     * Constructs a new <code>InformationType</code>.
     * The information type.
     * @alias module:model/InformationType
     */
    constructor() { 
        
        InformationType.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>InformationType</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InformationType} obj Optional instance to populate.
     * @return {module:model/InformationType} The populated <code>InformationType</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InformationType();

            if (data.hasOwnProperty('custom')) {
                obj['custom'] = ApiClient.convertToType(data['custom'], 'Boolean');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('enabled')) {
                obj['enabled'] = ApiClient.convertToType(data['enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('keywords')) {
                obj['keywords'] = ApiClient.convertToType(data['keywords'], [InformationProtectionKeyword]);
            }
            if (data.hasOwnProperty('order')) {
                obj['order'] = ApiClient.convertToType(data['order'], 'Number');
            }
            if (data.hasOwnProperty('recommendedLabelId')) {
                obj['recommendedLabelId'] = ApiClient.convertToType(data['recommendedLabelId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>InformationType</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>InformationType</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        if (data['keywords']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['keywords'])) {
                throw new Error("Expected the field `keywords` to be an array in the JSON data but got " + data['keywords']);
            }
            // validate the optional field `keywords` (array)
            for (const item of data['keywords']) {
                InformationProtectionKeyword.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['recommendedLabelId'] && !(typeof data['recommendedLabelId'] === 'string' || data['recommendedLabelId'] instanceof String)) {
            throw new Error("Expected the field `recommendedLabelId` to be a primitive type in the JSON string but got " + data['recommendedLabelId']);
        }

        return true;
    }


}



/**
 * Indicates whether the information type is custom or not.
 * @member {Boolean} custom
 */
InformationType.prototype['custom'] = undefined;

/**
 * The name of the information type.
 * @member {String} displayName
 */
InformationType.prototype['displayName'] = undefined;

/**
 * Indicates whether the information type is enabled or not.
 * @member {Boolean} enabled
 */
InformationType.prototype['enabled'] = undefined;

/**
 * The information type keywords.
 * @member {Array.<module:model/InformationProtectionKeyword>} keywords
 */
InformationType.prototype['keywords'] = undefined;

/**
 * The order of the information type.
 * @member {Number} order
 */
InformationType.prototype['order'] = undefined;

/**
 * The recommended label id to be associated with this information type.
 * @member {String} recommendedLabelId
 */
InformationType.prototype['recommendedLabelId'] = undefined;






export default InformationType;

