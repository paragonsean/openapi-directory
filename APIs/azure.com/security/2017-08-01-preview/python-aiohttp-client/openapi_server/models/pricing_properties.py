# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PricingProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, pricing_tier: str=None):
        """PricingProperties - a model defined in OpenAPI

        :param pricing_tier: The pricing_tier of this PricingProperties.
        """
        self.openapi_types = {
            'pricing_tier': str
        }

        self.attribute_map = {
            'pricing_tier': 'pricingTier'
        }

        self._pricing_tier = pricing_tier

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PricingProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PricingProperties of this PricingProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def pricing_tier(self):
        """Gets the pricing_tier of this PricingProperties.

        Pricing tier type

        :return: The pricing_tier of this PricingProperties.
        :rtype: str
        """
        return self._pricing_tier

    @pricing_tier.setter
    def pricing_tier(self, pricing_tier):
        """Sets the pricing_tier of this PricingProperties.

        Pricing tier type

        :param pricing_tier: The pricing_tier of this PricingProperties.
        :type pricing_tier: str
        """
        allowed_values = ["Free", "Standard"]  # noqa: E501
        if pricing_tier not in allowed_values:
            raise ValueError(
                "Invalid value for `pricing_tier` ({0}), must be one of {1}"
                .format(pricing_tier, allowed_values)
            )

        self._pricing_tier = pricing_tier
