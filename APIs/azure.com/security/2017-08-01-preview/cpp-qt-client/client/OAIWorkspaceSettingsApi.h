/**
 * Security Center
 * API spec for Microsoft.Security (Azure Security Center) resource provider
 *
 * The version of the OpenAPI document: 2017-08-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIWorkspaceSettingsApi_H
#define OAI_OAIWorkspaceSettingsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICloudError.h"
#include "OAIWorkspaceSetting.h"
#include "OAIWorkspaceSettingList.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIWorkspaceSettingsApi : public QObject {
    Q_OBJECT

public:
    OAIWorkspaceSettingsApi(const int timeOut = 0);
    ~OAIWorkspaceSettingsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  workspace_setting_name QString [required]
    * @param[in]  workspace_setting OAIWorkspaceSetting [required]
    */
    virtual void workspaceSettingsCreate(const QString &api_version, const QString &subscription_id, const QString &workspace_setting_name, const OAIWorkspaceSetting &workspace_setting);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  workspace_setting_name QString [required]
    */
    virtual void workspaceSettingsDelete(const QString &api_version, const QString &subscription_id, const QString &workspace_setting_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  workspace_setting_name QString [required]
    */
    virtual void workspaceSettingsGet(const QString &api_version, const QString &subscription_id, const QString &workspace_setting_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void workspaceSettingsList(const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  workspace_setting_name QString [required]
    * @param[in]  workspace_setting OAIWorkspaceSetting [required]
    */
    virtual void workspaceSettingsUpdate(const QString &api_version, const QString &subscription_id, const QString &workspace_setting_name, const OAIWorkspaceSetting &workspace_setting);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void workspaceSettingsCreateCallback(OAIHttpRequestWorker *worker);
    void workspaceSettingsDeleteCallback(OAIHttpRequestWorker *worker);
    void workspaceSettingsGetCallback(OAIHttpRequestWorker *worker);
    void workspaceSettingsListCallback(OAIHttpRequestWorker *worker);
    void workspaceSettingsUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void workspaceSettingsCreateSignal(OAIWorkspaceSetting summary);
    void workspaceSettingsDeleteSignal();
    void workspaceSettingsGetSignal(OAIWorkspaceSetting summary);
    void workspaceSettingsListSignal(OAIWorkspaceSettingList summary);
    void workspaceSettingsUpdateSignal(OAIWorkspaceSetting summary);


    void workspaceSettingsCreateSignalFull(OAIHttpRequestWorker *worker, OAIWorkspaceSetting summary);
    void workspaceSettingsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void workspaceSettingsGetSignalFull(OAIHttpRequestWorker *worker, OAIWorkspaceSetting summary);
    void workspaceSettingsListSignalFull(OAIHttpRequestWorker *worker, OAIWorkspaceSettingList summary);
    void workspaceSettingsUpdateSignalFull(OAIHttpRequestWorker *worker, OAIWorkspaceSetting summary);

    Q_DECL_DEPRECATED_X("Use workspaceSettingsCreateSignalError() instead")
    void workspaceSettingsCreateSignalE(OAIWorkspaceSetting summary, QNetworkReply::NetworkError error_type, QString error_str);
    void workspaceSettingsCreateSignalError(OAIWorkspaceSetting summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspaceSettingsDeleteSignalError() instead")
    void workspaceSettingsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void workspaceSettingsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspaceSettingsGetSignalError() instead")
    void workspaceSettingsGetSignalE(OAIWorkspaceSetting summary, QNetworkReply::NetworkError error_type, QString error_str);
    void workspaceSettingsGetSignalError(OAIWorkspaceSetting summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspaceSettingsListSignalError() instead")
    void workspaceSettingsListSignalE(OAIWorkspaceSettingList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void workspaceSettingsListSignalError(OAIWorkspaceSettingList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspaceSettingsUpdateSignalError() instead")
    void workspaceSettingsUpdateSignalE(OAIWorkspaceSetting summary, QNetworkReply::NetworkError error_type, QString error_str);
    void workspaceSettingsUpdateSignalError(OAIWorkspaceSetting summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use workspaceSettingsCreateSignalErrorFull() instead")
    void workspaceSettingsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workspaceSettingsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspaceSettingsDeleteSignalErrorFull() instead")
    void workspaceSettingsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workspaceSettingsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspaceSettingsGetSignalErrorFull() instead")
    void workspaceSettingsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workspaceSettingsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspaceSettingsListSignalErrorFull() instead")
    void workspaceSettingsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workspaceSettingsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspaceSettingsUpdateSignalErrorFull() instead")
    void workspaceSettingsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workspaceSettingsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
