/**
 * Security Center
 * API spec for Microsoft.Security (Azure Security Center) resource provider
 *
 * The version of the OpenAPI document: 2017-08-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInformationType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInformationType::OAIInformationType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInformationType::OAIInformationType() {
    this->initializeModel();
}

OAIInformationType::~OAIInformationType() {}

void OAIInformationType::initializeModel() {

    m_custom_isSet = false;
    m_custom_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_keywords_isSet = false;
    m_keywords_isValid = false;

    m_order_isSet = false;
    m_order_isValid = false;

    m_recommended_label_id_isSet = false;
    m_recommended_label_id_isValid = false;
}

void OAIInformationType::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInformationType::fromJsonObject(QJsonObject json) {

    m_custom_isValid = ::OpenAPI::fromJsonValue(m_custom, json[QString("custom")]);
    m_custom_isSet = !json[QString("custom")].isNull() && m_custom_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_keywords_isValid = ::OpenAPI::fromJsonValue(m_keywords, json[QString("keywords")]);
    m_keywords_isSet = !json[QString("keywords")].isNull() && m_keywords_isValid;

    m_order_isValid = ::OpenAPI::fromJsonValue(m_order, json[QString("order")]);
    m_order_isSet = !json[QString("order")].isNull() && m_order_isValid;

    m_recommended_label_id_isValid = ::OpenAPI::fromJsonValue(m_recommended_label_id, json[QString("recommendedLabelId")]);
    m_recommended_label_id_isSet = !json[QString("recommendedLabelId")].isNull() && m_recommended_label_id_isValid;
}

QString OAIInformationType::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInformationType::asJsonObject() const {
    QJsonObject obj;
    if (m_custom_isSet) {
        obj.insert(QString("custom"), ::OpenAPI::toJsonValue(m_custom));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_keywords.size() > 0) {
        obj.insert(QString("keywords"), ::OpenAPI::toJsonValue(m_keywords));
    }
    if (m_order_isSet) {
        obj.insert(QString("order"), ::OpenAPI::toJsonValue(m_order));
    }
    if (m_recommended_label_id_isSet) {
        obj.insert(QString("recommendedLabelId"), ::OpenAPI::toJsonValue(m_recommended_label_id));
    }
    return obj;
}

bool OAIInformationType::isCustom() const {
    return m_custom;
}
void OAIInformationType::setCustom(const bool &custom) {
    m_custom = custom;
    m_custom_isSet = true;
}

bool OAIInformationType::is_custom_Set() const{
    return m_custom_isSet;
}

bool OAIInformationType::is_custom_Valid() const{
    return m_custom_isValid;
}

QString OAIInformationType::getDisplayName() const {
    return m_display_name;
}
void OAIInformationType::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIInformationType::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIInformationType::is_display_name_Valid() const{
    return m_display_name_isValid;
}

bool OAIInformationType::isEnabled() const {
    return m_enabled;
}
void OAIInformationType::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAIInformationType::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIInformationType::is_enabled_Valid() const{
    return m_enabled_isValid;
}

QList<OAIInformationProtectionKeyword> OAIInformationType::getKeywords() const {
    return m_keywords;
}
void OAIInformationType::setKeywords(const QList<OAIInformationProtectionKeyword> &keywords) {
    m_keywords = keywords;
    m_keywords_isSet = true;
}

bool OAIInformationType::is_keywords_Set() const{
    return m_keywords_isSet;
}

bool OAIInformationType::is_keywords_Valid() const{
    return m_keywords_isValid;
}

double OAIInformationType::getOrder() const {
    return m_order;
}
void OAIInformationType::setOrder(const double &order) {
    m_order = order;
    m_order_isSet = true;
}

bool OAIInformationType::is_order_Set() const{
    return m_order_isSet;
}

bool OAIInformationType::is_order_Valid() const{
    return m_order_isValid;
}

QString OAIInformationType::getRecommendedLabelId() const {
    return m_recommended_label_id;
}
void OAIInformationType::setRecommendedLabelId(const QString &recommended_label_id) {
    m_recommended_label_id = recommended_label_id;
    m_recommended_label_id_isSet = true;
}

bool OAIInformationType::is_recommended_label_id_Set() const{
    return m_recommended_label_id_isSet;
}

bool OAIInformationType::is_recommended_label_id_Valid() const{
    return m_recommended_label_id_isValid;
}

bool OAIInformationType::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_custom_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_keywords.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recommended_label_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInformationType::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
