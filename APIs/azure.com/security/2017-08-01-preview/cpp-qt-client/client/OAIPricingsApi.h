/**
 * Security Center
 * API spec for Microsoft.Security (Azure Security Center) resource provider
 *
 * The version of the OpenAPI document: 2017-08-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPricingsApi_H
#define OAI_OAIPricingsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICloudError.h"
#include "OAIPricing.h"
#include "OAIPricingList.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPricingsApi : public QObject {
    Q_OBJECT

public:
    OAIPricingsApi(const int timeOut = 0);
    ~OAIPricingsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  pricing_name QString [required]
    * @param[in]  pricing OAIPricing [required]
    */
    virtual void pricingsCreateOrUpdateResourceGroupPricing(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &pricing_name, const OAIPricing &pricing);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  pricing_name QString [required]
    */
    virtual void pricingsGetResourceGroupPricing(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &pricing_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  pricing_name QString [required]
    */
    virtual void pricingsGetSubscriptionPricing(const QString &api_version, const QString &subscription_id, const QString &pricing_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void pricingsList(const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    */
    virtual void pricingsListByResourceGroup(const QString &api_version, const QString &subscription_id, const QString &resource_group_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  pricing_name QString [required]
    * @param[in]  pricing OAIPricing [required]
    */
    virtual void pricingsUpdateSubscriptionPricing(const QString &api_version, const QString &subscription_id, const QString &pricing_name, const OAIPricing &pricing);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void pricingsCreateOrUpdateResourceGroupPricingCallback(OAIHttpRequestWorker *worker);
    void pricingsGetResourceGroupPricingCallback(OAIHttpRequestWorker *worker);
    void pricingsGetSubscriptionPricingCallback(OAIHttpRequestWorker *worker);
    void pricingsListCallback(OAIHttpRequestWorker *worker);
    void pricingsListByResourceGroupCallback(OAIHttpRequestWorker *worker);
    void pricingsUpdateSubscriptionPricingCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void pricingsCreateOrUpdateResourceGroupPricingSignal(OAIPricing summary);
    void pricingsGetResourceGroupPricingSignal(OAIPricing summary);
    void pricingsGetSubscriptionPricingSignal(OAIPricing summary);
    void pricingsListSignal(OAIPricingList summary);
    void pricingsListByResourceGroupSignal(OAIPricingList summary);
    void pricingsUpdateSubscriptionPricingSignal(OAIPricing summary);


    void pricingsCreateOrUpdateResourceGroupPricingSignalFull(OAIHttpRequestWorker *worker, OAIPricing summary);
    void pricingsGetResourceGroupPricingSignalFull(OAIHttpRequestWorker *worker, OAIPricing summary);
    void pricingsGetSubscriptionPricingSignalFull(OAIHttpRequestWorker *worker, OAIPricing summary);
    void pricingsListSignalFull(OAIHttpRequestWorker *worker, OAIPricingList summary);
    void pricingsListByResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAIPricingList summary);
    void pricingsUpdateSubscriptionPricingSignalFull(OAIHttpRequestWorker *worker, OAIPricing summary);

    Q_DECL_DEPRECATED_X("Use pricingsCreateOrUpdateResourceGroupPricingSignalError() instead")
    void pricingsCreateOrUpdateResourceGroupPricingSignalE(OAIPricing summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pricingsCreateOrUpdateResourceGroupPricingSignalError(OAIPricing summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pricingsGetResourceGroupPricingSignalError() instead")
    void pricingsGetResourceGroupPricingSignalE(OAIPricing summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pricingsGetResourceGroupPricingSignalError(OAIPricing summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pricingsGetSubscriptionPricingSignalError() instead")
    void pricingsGetSubscriptionPricingSignalE(OAIPricing summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pricingsGetSubscriptionPricingSignalError(OAIPricing summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pricingsListSignalError() instead")
    void pricingsListSignalE(OAIPricingList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pricingsListSignalError(OAIPricingList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pricingsListByResourceGroupSignalError() instead")
    void pricingsListByResourceGroupSignalE(OAIPricingList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pricingsListByResourceGroupSignalError(OAIPricingList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pricingsUpdateSubscriptionPricingSignalError() instead")
    void pricingsUpdateSubscriptionPricingSignalE(OAIPricing summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pricingsUpdateSubscriptionPricingSignalError(OAIPricing summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use pricingsCreateOrUpdateResourceGroupPricingSignalErrorFull() instead")
    void pricingsCreateOrUpdateResourceGroupPricingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pricingsCreateOrUpdateResourceGroupPricingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pricingsGetResourceGroupPricingSignalErrorFull() instead")
    void pricingsGetResourceGroupPricingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pricingsGetResourceGroupPricingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pricingsGetSubscriptionPricingSignalErrorFull() instead")
    void pricingsGetSubscriptionPricingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pricingsGetSubscriptionPricingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pricingsListSignalErrorFull() instead")
    void pricingsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pricingsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pricingsListByResourceGroupSignalErrorFull() instead")
    void pricingsListByResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pricingsListByResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pricingsUpdateSubscriptionPricingSignalErrorFull() instead")
    void pricingsUpdateSubscriptionPricingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pricingsUpdateSubscriptionPricingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
