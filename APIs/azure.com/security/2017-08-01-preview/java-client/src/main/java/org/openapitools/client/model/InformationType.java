/*
 * Security Center
 * API spec for Microsoft.Security (Azure Security Center) resource provider
 *
 * The version of the OpenAPI document: 2017-08-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.InformationProtectionKeyword;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The information type.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:18:32.984056-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InformationType {
  public static final String SERIALIZED_NAME_CUSTOM = "custom";
  @SerializedName(SERIALIZED_NAME_CUSTOM)
  private Boolean custom;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_KEYWORDS = "keywords";
  @SerializedName(SERIALIZED_NAME_KEYWORDS)
  private List<InformationProtectionKeyword> keywords = new ArrayList<>();

  public static final String SERIALIZED_NAME_ORDER = "order";
  @SerializedName(SERIALIZED_NAME_ORDER)
  private BigDecimal order;

  public static final String SERIALIZED_NAME_RECOMMENDED_LABEL_ID = "recommendedLabelId";
  @SerializedName(SERIALIZED_NAME_RECOMMENDED_LABEL_ID)
  private UUID recommendedLabelId;

  public InformationType() {
  }

  public InformationType custom(Boolean custom) {
    this.custom = custom;
    return this;
  }

  /**
   * Indicates whether the information type is custom or not.
   * @return custom
   */
  @javax.annotation.Nullable
  public Boolean getCustom() {
    return custom;
  }

  public void setCustom(Boolean custom) {
    this.custom = custom;
  }


  public InformationType displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * The name of the information type.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public InformationType enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  /**
   * Indicates whether the information type is enabled or not.
   * @return enabled
   */
  @javax.annotation.Nullable
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public InformationType keywords(List<InformationProtectionKeyword> keywords) {
    this.keywords = keywords;
    return this;
  }

  public InformationType addKeywordsItem(InformationProtectionKeyword keywordsItem) {
    if (this.keywords == null) {
      this.keywords = new ArrayList<>();
    }
    this.keywords.add(keywordsItem);
    return this;
  }

  /**
   * The information type keywords.
   * @return keywords
   */
  @javax.annotation.Nullable
  public List<InformationProtectionKeyword> getKeywords() {
    return keywords;
  }

  public void setKeywords(List<InformationProtectionKeyword> keywords) {
    this.keywords = keywords;
  }


  public InformationType order(BigDecimal order) {
    this.order = order;
    return this;
  }

  /**
   * The order of the information type.
   * @return order
   */
  @javax.annotation.Nullable
  public BigDecimal getOrder() {
    return order;
  }

  public void setOrder(BigDecimal order) {
    this.order = order;
  }


  public InformationType recommendedLabelId(UUID recommendedLabelId) {
    this.recommendedLabelId = recommendedLabelId;
    return this;
  }

  /**
   * The recommended label id to be associated with this information type.
   * @return recommendedLabelId
   */
  @javax.annotation.Nullable
  public UUID getRecommendedLabelId() {
    return recommendedLabelId;
  }

  public void setRecommendedLabelId(UUID recommendedLabelId) {
    this.recommendedLabelId = recommendedLabelId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InformationType informationType = (InformationType) o;
    return Objects.equals(this.custom, informationType.custom) &&
        Objects.equals(this.displayName, informationType.displayName) &&
        Objects.equals(this.enabled, informationType.enabled) &&
        Objects.equals(this.keywords, informationType.keywords) &&
        Objects.equals(this.order, informationType.order) &&
        Objects.equals(this.recommendedLabelId, informationType.recommendedLabelId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(custom, displayName, enabled, keywords, order, recommendedLabelId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InformationType {\n");
    sb.append("    custom: ").append(toIndentedString(custom)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    keywords: ").append(toIndentedString(keywords)).append("\n");
    sb.append("    order: ").append(toIndentedString(order)).append("\n");
    sb.append("    recommendedLabelId: ").append(toIndentedString(recommendedLabelId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("custom");
    openapiFields.add("displayName");
    openapiFields.add("enabled");
    openapiFields.add("keywords");
    openapiFields.add("order");
    openapiFields.add("recommendedLabelId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InformationType
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InformationType.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InformationType is not found in the empty JSON string", InformationType.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InformationType.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InformationType` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if (jsonObj.get("keywords") != null && !jsonObj.get("keywords").isJsonNull()) {
        JsonArray jsonArraykeywords = jsonObj.getAsJsonArray("keywords");
        if (jsonArraykeywords != null) {
          // ensure the json data is an array
          if (!jsonObj.get("keywords").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `keywords` to be an array in the JSON string but got `%s`", jsonObj.get("keywords").toString()));
          }

          // validate the optional field `keywords` (array)
          for (int i = 0; i < jsonArraykeywords.size(); i++) {
            InformationProtectionKeyword.validateJsonElement(jsonArraykeywords.get(i));
          };
        }
      }
      if ((jsonObj.get("recommendedLabelId") != null && !jsonObj.get("recommendedLabelId").isJsonNull()) && !jsonObj.get("recommendedLabelId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recommendedLabelId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recommendedLabelId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InformationType.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InformationType' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InformationType> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InformationType.class));

       return (TypeAdapter<T>) new TypeAdapter<InformationType>() {
           @Override
           public void write(JsonWriter out, InformationType value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InformationType read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InformationType given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InformationType
   * @throws IOException if the JSON string is invalid with respect to InformationType
   */
  public static InformationType fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InformationType.class);
  }

  /**
   * Convert an instance of InformationType to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

