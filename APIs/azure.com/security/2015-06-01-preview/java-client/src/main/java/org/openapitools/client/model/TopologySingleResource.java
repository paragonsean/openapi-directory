/*
 * Security Center
 * API spec for Microsoft.Security (Azure Security Center) resource provider
 *
 * The version of the OpenAPI document: 2015-06-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.TopologySingleResourceChild;
import org.openapitools.client.model.TopologySingleResourceParent;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TopologySingleResource
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:18:36.393177-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TopologySingleResource {
  public static final String SERIALIZED_NAME_CHILDREN = "children";
  @SerializedName(SERIALIZED_NAME_CHILDREN)
  private List<TopologySingleResourceChild> children = new ArrayList<>();

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private String location;

  public static final String SERIALIZED_NAME_NETWORK_ZONES = "networkZones";
  @SerializedName(SERIALIZED_NAME_NETWORK_ZONES)
  private String networkZones;

  public static final String SERIALIZED_NAME_PARENTS = "parents";
  @SerializedName(SERIALIZED_NAME_PARENTS)
  private List<TopologySingleResourceParent> parents = new ArrayList<>();

  public static final String SERIALIZED_NAME_RECOMMENDATIONS_EXIST = "recommendationsExist";
  @SerializedName(SERIALIZED_NAME_RECOMMENDATIONS_EXIST)
  private Boolean recommendationsExist;

  public static final String SERIALIZED_NAME_RESOURCE_ID = "resourceId";
  @SerializedName(SERIALIZED_NAME_RESOURCE_ID)
  private String resourceId;

  public static final String SERIALIZED_NAME_SEVERITY = "severity";
  @SerializedName(SERIALIZED_NAME_SEVERITY)
  private String severity;

  public static final String SERIALIZED_NAME_TOPOLOGY_SCORE = "topologyScore";
  @SerializedName(SERIALIZED_NAME_TOPOLOGY_SCORE)
  private Integer topologyScore;

  public TopologySingleResource() {
  }

  public TopologySingleResource(
     List<TopologySingleResourceChild> children, 
     String location, 
     String networkZones, 
     List<TopologySingleResourceParent> parents, 
     Boolean recommendationsExist, 
     String resourceId, 
     String severity, 
     Integer topologyScore
  ) {
    this();
    this.children = children;
    this.location = location;
    this.networkZones = networkZones;
    this.parents = parents;
    this.recommendationsExist = recommendationsExist;
    this.resourceId = resourceId;
    this.severity = severity;
    this.topologyScore = topologyScore;
  }

  /**
   * Azure resources connected to this resource which are in lower level in the topology view
   * @return children
   */
  @javax.annotation.Nullable
  public List<TopologySingleResourceChild> getChildren() {
    return children;
  }



  /**
   * The location of this resource
   * @return location
   */
  @javax.annotation.Nullable
  public String getLocation() {
    return location;
  }



  /**
   * Indicates the resource connectivity level to the Internet (InternetFacing, Internal ,etc.)
   * @return networkZones
   */
  @javax.annotation.Nullable
  public String getNetworkZones() {
    return networkZones;
  }



  /**
   * Azure resources connected to this resource which are in higher level in the topology view
   * @return parents
   */
  @javax.annotation.Nullable
  public List<TopologySingleResourceParent> getParents() {
    return parents;
  }



  /**
   * Indicates if the resource has security recommendations
   * @return recommendationsExist
   */
  @javax.annotation.Nullable
  public Boolean getRecommendationsExist() {
    return recommendationsExist;
  }



  /**
   * Azure resource id
   * @return resourceId
   */
  @javax.annotation.Nullable
  public String getResourceId() {
    return resourceId;
  }



  /**
   * The security severity of the resource
   * @return severity
   */
  @javax.annotation.Nullable
  public String getSeverity() {
    return severity;
  }



  /**
   * Score of the resource based on its security severity
   * @return topologyScore
   */
  @javax.annotation.Nullable
  public Integer getTopologyScore() {
    return topologyScore;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TopologySingleResource topologySingleResource = (TopologySingleResource) o;
    return Objects.equals(this.children, topologySingleResource.children) &&
        Objects.equals(this.location, topologySingleResource.location) &&
        Objects.equals(this.networkZones, topologySingleResource.networkZones) &&
        Objects.equals(this.parents, topologySingleResource.parents) &&
        Objects.equals(this.recommendationsExist, topologySingleResource.recommendationsExist) &&
        Objects.equals(this.resourceId, topologySingleResource.resourceId) &&
        Objects.equals(this.severity, topologySingleResource.severity) &&
        Objects.equals(this.topologyScore, topologySingleResource.topologyScore);
  }

  @Override
  public int hashCode() {
    return Objects.hash(children, location, networkZones, parents, recommendationsExist, resourceId, severity, topologyScore);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TopologySingleResource {\n");
    sb.append("    children: ").append(toIndentedString(children)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    networkZones: ").append(toIndentedString(networkZones)).append("\n");
    sb.append("    parents: ").append(toIndentedString(parents)).append("\n");
    sb.append("    recommendationsExist: ").append(toIndentedString(recommendationsExist)).append("\n");
    sb.append("    resourceId: ").append(toIndentedString(resourceId)).append("\n");
    sb.append("    severity: ").append(toIndentedString(severity)).append("\n");
    sb.append("    topologyScore: ").append(toIndentedString(topologyScore)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("children");
    openapiFields.add("location");
    openapiFields.add("networkZones");
    openapiFields.add("parents");
    openapiFields.add("recommendationsExist");
    openapiFields.add("resourceId");
    openapiFields.add("severity");
    openapiFields.add("topologyScore");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TopologySingleResource
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TopologySingleResource.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TopologySingleResource is not found in the empty JSON string", TopologySingleResource.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TopologySingleResource.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TopologySingleResource` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("children") != null && !jsonObj.get("children").isJsonNull()) {
        JsonArray jsonArraychildren = jsonObj.getAsJsonArray("children");
        if (jsonArraychildren != null) {
          // ensure the json data is an array
          if (!jsonObj.get("children").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `children` to be an array in the JSON string but got `%s`", jsonObj.get("children").toString()));
          }

          // validate the optional field `children` (array)
          for (int i = 0; i < jsonArraychildren.size(); i++) {
            TopologySingleResourceChild.validateJsonElement(jsonArraychildren.get(i));
          };
        }
      }
      if ((jsonObj.get("location") != null && !jsonObj.get("location").isJsonNull()) && !jsonObj.get("location").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `location` to be a primitive type in the JSON string but got `%s`", jsonObj.get("location").toString()));
      }
      if ((jsonObj.get("networkZones") != null && !jsonObj.get("networkZones").isJsonNull()) && !jsonObj.get("networkZones").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `networkZones` to be a primitive type in the JSON string but got `%s`", jsonObj.get("networkZones").toString()));
      }
      if (jsonObj.get("parents") != null && !jsonObj.get("parents").isJsonNull()) {
        JsonArray jsonArrayparents = jsonObj.getAsJsonArray("parents");
        if (jsonArrayparents != null) {
          // ensure the json data is an array
          if (!jsonObj.get("parents").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `parents` to be an array in the JSON string but got `%s`", jsonObj.get("parents").toString()));
          }

          // validate the optional field `parents` (array)
          for (int i = 0; i < jsonArrayparents.size(); i++) {
            TopologySingleResourceParent.validateJsonElement(jsonArrayparents.get(i));
          };
        }
      }
      if ((jsonObj.get("resourceId") != null && !jsonObj.get("resourceId").isJsonNull()) && !jsonObj.get("resourceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourceId").toString()));
      }
      if ((jsonObj.get("severity") != null && !jsonObj.get("severity").isJsonNull()) && !jsonObj.get("severity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `severity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("severity").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TopologySingleResource.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TopologySingleResource' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TopologySingleResource> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TopologySingleResource.class));

       return (TypeAdapter<T>) new TypeAdapter<TopologySingleResource>() {
           @Override
           public void write(JsonWriter out, TopologySingleResource value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TopologySingleResource read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TopologySingleResource given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TopologySingleResource
   * @throws IOException if the JSON string is invalid with respect to TopologySingleResource
   */
  public static TopologySingleResource fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TopologySingleResource.class);
  }

  /**
   * Convert an instance of TopologySingleResource to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

