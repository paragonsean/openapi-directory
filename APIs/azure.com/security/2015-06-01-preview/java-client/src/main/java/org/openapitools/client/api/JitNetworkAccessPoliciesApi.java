/*
 * Security Center
 * API spec for Microsoft.Security (Azure Security Center) resource provider
 *
 * The version of the OpenAPI document: 2015-06-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CloudError;
import org.openapitools.client.model.JitNetworkAccessPoliciesList;
import org.openapitools.client.model.JitNetworkAccessPolicy;
import org.openapitools.client.model.JitNetworkAccessPolicyInitiateRequest;
import org.openapitools.client.model.JitNetworkAccessRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class JitNetworkAccessPoliciesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public JitNetworkAccessPoliciesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public JitNetworkAccessPoliciesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for jitNetworkAccessPoliciesCreateOrUpdate
     * @param subscriptionId Azure subscription ID (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param ascLocation The location where ASC stores the data of the subscription. can be retrieved from Get locations (required)
     * @param jitNetworkAccessPolicyName Name of a Just-in-Time access configuration policy. (required)
     * @param apiVersion API version for the operation (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jitNetworkAccessPoliciesCreateOrUpdateCall(String subscriptionId, String resourceGroupName, String ascLocation, String jitNetworkAccessPolicyName, String apiVersion, JitNetworkAccessPolicy body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/locations/{ascLocation}/jitNetworkAccessPolicies/{jitNetworkAccessPolicyName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "ascLocation" + "}", localVarApiClient.escapeString(ascLocation.toString()))
            .replace("{" + "jitNetworkAccessPolicyName" + "}", localVarApiClient.escapeString(jitNetworkAccessPolicyName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jitNetworkAccessPoliciesCreateOrUpdateValidateBeforeCall(String subscriptionId, String resourceGroupName, String ascLocation, String jitNetworkAccessPolicyName, String apiVersion, JitNetworkAccessPolicy body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling jitNetworkAccessPoliciesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling jitNetworkAccessPoliciesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'ascLocation' is set
        if (ascLocation == null) {
            throw new ApiException("Missing the required parameter 'ascLocation' when calling jitNetworkAccessPoliciesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'jitNetworkAccessPolicyName' is set
        if (jitNetworkAccessPolicyName == null) {
            throw new ApiException("Missing the required parameter 'jitNetworkAccessPolicyName' when calling jitNetworkAccessPoliciesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling jitNetworkAccessPoliciesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling jitNetworkAccessPoliciesCreateOrUpdate(Async)");
        }

        return jitNetworkAccessPoliciesCreateOrUpdateCall(subscriptionId, resourceGroupName, ascLocation, jitNetworkAccessPolicyName, apiVersion, body, _callback);

    }

    /**
     * 
     * Create a policy for protecting resources using Just-in-Time access control
     * @param subscriptionId Azure subscription ID (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param ascLocation The location where ASC stores the data of the subscription. can be retrieved from Get locations (required)
     * @param jitNetworkAccessPolicyName Name of a Just-in-Time access configuration policy. (required)
     * @param apiVersion API version for the operation (required)
     * @param body  (required)
     * @return JitNetworkAccessPolicy
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public JitNetworkAccessPolicy jitNetworkAccessPoliciesCreateOrUpdate(String subscriptionId, String resourceGroupName, String ascLocation, String jitNetworkAccessPolicyName, String apiVersion, JitNetworkAccessPolicy body) throws ApiException {
        ApiResponse<JitNetworkAccessPolicy> localVarResp = jitNetworkAccessPoliciesCreateOrUpdateWithHttpInfo(subscriptionId, resourceGroupName, ascLocation, jitNetworkAccessPolicyName, apiVersion, body);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a policy for protecting resources using Just-in-Time access control
     * @param subscriptionId Azure subscription ID (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param ascLocation The location where ASC stores the data of the subscription. can be retrieved from Get locations (required)
     * @param jitNetworkAccessPolicyName Name of a Just-in-Time access configuration policy. (required)
     * @param apiVersion API version for the operation (required)
     * @param body  (required)
     * @return ApiResponse&lt;JitNetworkAccessPolicy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JitNetworkAccessPolicy> jitNetworkAccessPoliciesCreateOrUpdateWithHttpInfo(String subscriptionId, String resourceGroupName, String ascLocation, String jitNetworkAccessPolicyName, String apiVersion, JitNetworkAccessPolicy body) throws ApiException {
        okhttp3.Call localVarCall = jitNetworkAccessPoliciesCreateOrUpdateValidateBeforeCall(subscriptionId, resourceGroupName, ascLocation, jitNetworkAccessPolicyName, apiVersion, body, null);
        Type localVarReturnType = new TypeToken<JitNetworkAccessPolicy>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a policy for protecting resources using Just-in-Time access control
     * @param subscriptionId Azure subscription ID (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param ascLocation The location where ASC stores the data of the subscription. can be retrieved from Get locations (required)
     * @param jitNetworkAccessPolicyName Name of a Just-in-Time access configuration policy. (required)
     * @param apiVersion API version for the operation (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jitNetworkAccessPoliciesCreateOrUpdateAsync(String subscriptionId, String resourceGroupName, String ascLocation, String jitNetworkAccessPolicyName, String apiVersion, JitNetworkAccessPolicy body, final ApiCallback<JitNetworkAccessPolicy> _callback) throws ApiException {

        okhttp3.Call localVarCall = jitNetworkAccessPoliciesCreateOrUpdateValidateBeforeCall(subscriptionId, resourceGroupName, ascLocation, jitNetworkAccessPolicyName, apiVersion, body, _callback);
        Type localVarReturnType = new TypeToken<JitNetworkAccessPolicy>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for jitNetworkAccessPoliciesDelete
     * @param subscriptionId Azure subscription ID (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param ascLocation The location where ASC stores the data of the subscription. can be retrieved from Get locations (required)
     * @param jitNetworkAccessPolicyName Name of a Just-in-Time access configuration policy. (required)
     * @param apiVersion API version for the operation (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Resource was deleted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content - Resource does not exist </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jitNetworkAccessPoliciesDeleteCall(String subscriptionId, String resourceGroupName, String ascLocation, String jitNetworkAccessPolicyName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/locations/{ascLocation}/jitNetworkAccessPolicies/{jitNetworkAccessPolicyName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "ascLocation" + "}", localVarApiClient.escapeString(ascLocation.toString()))
            .replace("{" + "jitNetworkAccessPolicyName" + "}", localVarApiClient.escapeString(jitNetworkAccessPolicyName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jitNetworkAccessPoliciesDeleteValidateBeforeCall(String subscriptionId, String resourceGroupName, String ascLocation, String jitNetworkAccessPolicyName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling jitNetworkAccessPoliciesDelete(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling jitNetworkAccessPoliciesDelete(Async)");
        }

        // verify the required parameter 'ascLocation' is set
        if (ascLocation == null) {
            throw new ApiException("Missing the required parameter 'ascLocation' when calling jitNetworkAccessPoliciesDelete(Async)");
        }

        // verify the required parameter 'jitNetworkAccessPolicyName' is set
        if (jitNetworkAccessPolicyName == null) {
            throw new ApiException("Missing the required parameter 'jitNetworkAccessPolicyName' when calling jitNetworkAccessPoliciesDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling jitNetworkAccessPoliciesDelete(Async)");
        }

        return jitNetworkAccessPoliciesDeleteCall(subscriptionId, resourceGroupName, ascLocation, jitNetworkAccessPolicyName, apiVersion, _callback);

    }

    /**
     * 
     * Delete a Just-in-Time access control policy.
     * @param subscriptionId Azure subscription ID (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param ascLocation The location where ASC stores the data of the subscription. can be retrieved from Get locations (required)
     * @param jitNetworkAccessPolicyName Name of a Just-in-Time access configuration policy. (required)
     * @param apiVersion API version for the operation (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Resource was deleted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content - Resource does not exist </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public void jitNetworkAccessPoliciesDelete(String subscriptionId, String resourceGroupName, String ascLocation, String jitNetworkAccessPolicyName, String apiVersion) throws ApiException {
        jitNetworkAccessPoliciesDeleteWithHttpInfo(subscriptionId, resourceGroupName, ascLocation, jitNetworkAccessPolicyName, apiVersion);
    }

    /**
     * 
     * Delete a Just-in-Time access control policy.
     * @param subscriptionId Azure subscription ID (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param ascLocation The location where ASC stores the data of the subscription. can be retrieved from Get locations (required)
     * @param jitNetworkAccessPolicyName Name of a Just-in-Time access configuration policy. (required)
     * @param apiVersion API version for the operation (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Resource was deleted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content - Resource does not exist </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> jitNetworkAccessPoliciesDeleteWithHttpInfo(String subscriptionId, String resourceGroupName, String ascLocation, String jitNetworkAccessPolicyName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = jitNetworkAccessPoliciesDeleteValidateBeforeCall(subscriptionId, resourceGroupName, ascLocation, jitNetworkAccessPolicyName, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete a Just-in-Time access control policy.
     * @param subscriptionId Azure subscription ID (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param ascLocation The location where ASC stores the data of the subscription. can be retrieved from Get locations (required)
     * @param jitNetworkAccessPolicyName Name of a Just-in-Time access configuration policy. (required)
     * @param apiVersion API version for the operation (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Resource was deleted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content - Resource does not exist </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jitNetworkAccessPoliciesDeleteAsync(String subscriptionId, String resourceGroupName, String ascLocation, String jitNetworkAccessPolicyName, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = jitNetworkAccessPoliciesDeleteValidateBeforeCall(subscriptionId, resourceGroupName, ascLocation, jitNetworkAccessPolicyName, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for jitNetworkAccessPoliciesGet
     * @param subscriptionId Azure subscription ID (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param ascLocation The location where ASC stores the data of the subscription. can be retrieved from Get locations (required)
     * @param jitNetworkAccessPolicyName Name of a Just-in-Time access configuration policy. (required)
     * @param apiVersion API version for the operation (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jitNetworkAccessPoliciesGetCall(String subscriptionId, String resourceGroupName, String ascLocation, String jitNetworkAccessPolicyName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/locations/{ascLocation}/jitNetworkAccessPolicies/{jitNetworkAccessPolicyName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "ascLocation" + "}", localVarApiClient.escapeString(ascLocation.toString()))
            .replace("{" + "jitNetworkAccessPolicyName" + "}", localVarApiClient.escapeString(jitNetworkAccessPolicyName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jitNetworkAccessPoliciesGetValidateBeforeCall(String subscriptionId, String resourceGroupName, String ascLocation, String jitNetworkAccessPolicyName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling jitNetworkAccessPoliciesGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling jitNetworkAccessPoliciesGet(Async)");
        }

        // verify the required parameter 'ascLocation' is set
        if (ascLocation == null) {
            throw new ApiException("Missing the required parameter 'ascLocation' when calling jitNetworkAccessPoliciesGet(Async)");
        }

        // verify the required parameter 'jitNetworkAccessPolicyName' is set
        if (jitNetworkAccessPolicyName == null) {
            throw new ApiException("Missing the required parameter 'jitNetworkAccessPolicyName' when calling jitNetworkAccessPoliciesGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling jitNetworkAccessPoliciesGet(Async)");
        }

        return jitNetworkAccessPoliciesGetCall(subscriptionId, resourceGroupName, ascLocation, jitNetworkAccessPolicyName, apiVersion, _callback);

    }

    /**
     * 
     * Policies for protecting resources using Just-in-Time access control for the subscription, location
     * @param subscriptionId Azure subscription ID (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param ascLocation The location where ASC stores the data of the subscription. can be retrieved from Get locations (required)
     * @param jitNetworkAccessPolicyName Name of a Just-in-Time access configuration policy. (required)
     * @param apiVersion API version for the operation (required)
     * @return JitNetworkAccessPolicy
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public JitNetworkAccessPolicy jitNetworkAccessPoliciesGet(String subscriptionId, String resourceGroupName, String ascLocation, String jitNetworkAccessPolicyName, String apiVersion) throws ApiException {
        ApiResponse<JitNetworkAccessPolicy> localVarResp = jitNetworkAccessPoliciesGetWithHttpInfo(subscriptionId, resourceGroupName, ascLocation, jitNetworkAccessPolicyName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Policies for protecting resources using Just-in-Time access control for the subscription, location
     * @param subscriptionId Azure subscription ID (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param ascLocation The location where ASC stores the data of the subscription. can be retrieved from Get locations (required)
     * @param jitNetworkAccessPolicyName Name of a Just-in-Time access configuration policy. (required)
     * @param apiVersion API version for the operation (required)
     * @return ApiResponse&lt;JitNetworkAccessPolicy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JitNetworkAccessPolicy> jitNetworkAccessPoliciesGetWithHttpInfo(String subscriptionId, String resourceGroupName, String ascLocation, String jitNetworkAccessPolicyName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = jitNetworkAccessPoliciesGetValidateBeforeCall(subscriptionId, resourceGroupName, ascLocation, jitNetworkAccessPolicyName, apiVersion, null);
        Type localVarReturnType = new TypeToken<JitNetworkAccessPolicy>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Policies for protecting resources using Just-in-Time access control for the subscription, location
     * @param subscriptionId Azure subscription ID (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param ascLocation The location where ASC stores the data of the subscription. can be retrieved from Get locations (required)
     * @param jitNetworkAccessPolicyName Name of a Just-in-Time access configuration policy. (required)
     * @param apiVersion API version for the operation (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jitNetworkAccessPoliciesGetAsync(String subscriptionId, String resourceGroupName, String ascLocation, String jitNetworkAccessPolicyName, String apiVersion, final ApiCallback<JitNetworkAccessPolicy> _callback) throws ApiException {

        okhttp3.Call localVarCall = jitNetworkAccessPoliciesGetValidateBeforeCall(subscriptionId, resourceGroupName, ascLocation, jitNetworkAccessPolicyName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<JitNetworkAccessPolicy>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for jitNetworkAccessPoliciesInitiate
     * @param subscriptionId Azure subscription ID (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param ascLocation The location where ASC stores the data of the subscription. can be retrieved from Get locations (required)
     * @param jitNetworkAccessPolicyName Name of a Just-in-Time access configuration policy. (required)
     * @param jitNetworkAccessPolicyInitiateType Type of the action to do on the Just-in-Time access policy. (required)
     * @param apiVersion API version for the operation (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jitNetworkAccessPoliciesInitiateCall(String subscriptionId, String resourceGroupName, String ascLocation, String jitNetworkAccessPolicyName, String jitNetworkAccessPolicyInitiateType, String apiVersion, JitNetworkAccessPolicyInitiateRequest body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/locations/{ascLocation}/jitNetworkAccessPolicies/{jitNetworkAccessPolicyName}/{jitNetworkAccessPolicyInitiateType}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "ascLocation" + "}", localVarApiClient.escapeString(ascLocation.toString()))
            .replace("{" + "jitNetworkAccessPolicyName" + "}", localVarApiClient.escapeString(jitNetworkAccessPolicyName.toString()))
            .replace("{" + "jitNetworkAccessPolicyInitiateType" + "}", localVarApiClient.escapeString(jitNetworkAccessPolicyInitiateType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jitNetworkAccessPoliciesInitiateValidateBeforeCall(String subscriptionId, String resourceGroupName, String ascLocation, String jitNetworkAccessPolicyName, String jitNetworkAccessPolicyInitiateType, String apiVersion, JitNetworkAccessPolicyInitiateRequest body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling jitNetworkAccessPoliciesInitiate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling jitNetworkAccessPoliciesInitiate(Async)");
        }

        // verify the required parameter 'ascLocation' is set
        if (ascLocation == null) {
            throw new ApiException("Missing the required parameter 'ascLocation' when calling jitNetworkAccessPoliciesInitiate(Async)");
        }

        // verify the required parameter 'jitNetworkAccessPolicyName' is set
        if (jitNetworkAccessPolicyName == null) {
            throw new ApiException("Missing the required parameter 'jitNetworkAccessPolicyName' when calling jitNetworkAccessPoliciesInitiate(Async)");
        }

        // verify the required parameter 'jitNetworkAccessPolicyInitiateType' is set
        if (jitNetworkAccessPolicyInitiateType == null) {
            throw new ApiException("Missing the required parameter 'jitNetworkAccessPolicyInitiateType' when calling jitNetworkAccessPoliciesInitiate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling jitNetworkAccessPoliciesInitiate(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling jitNetworkAccessPoliciesInitiate(Async)");
        }

        return jitNetworkAccessPoliciesInitiateCall(subscriptionId, resourceGroupName, ascLocation, jitNetworkAccessPolicyName, jitNetworkAccessPolicyInitiateType, apiVersion, body, _callback);

    }

    /**
     * 
     * Initiate a JIT access from a specific Just-in-Time policy configuration.
     * @param subscriptionId Azure subscription ID (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param ascLocation The location where ASC stores the data of the subscription. can be retrieved from Get locations (required)
     * @param jitNetworkAccessPolicyName Name of a Just-in-Time access configuration policy. (required)
     * @param jitNetworkAccessPolicyInitiateType Type of the action to do on the Just-in-Time access policy. (required)
     * @param apiVersion API version for the operation (required)
     * @param body  (required)
     * @return JitNetworkAccessRequest
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public JitNetworkAccessRequest jitNetworkAccessPoliciesInitiate(String subscriptionId, String resourceGroupName, String ascLocation, String jitNetworkAccessPolicyName, String jitNetworkAccessPolicyInitiateType, String apiVersion, JitNetworkAccessPolicyInitiateRequest body) throws ApiException {
        ApiResponse<JitNetworkAccessRequest> localVarResp = jitNetworkAccessPoliciesInitiateWithHttpInfo(subscriptionId, resourceGroupName, ascLocation, jitNetworkAccessPolicyName, jitNetworkAccessPolicyInitiateType, apiVersion, body);
        return localVarResp.getData();
    }

    /**
     * 
     * Initiate a JIT access from a specific Just-in-Time policy configuration.
     * @param subscriptionId Azure subscription ID (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param ascLocation The location where ASC stores the data of the subscription. can be retrieved from Get locations (required)
     * @param jitNetworkAccessPolicyName Name of a Just-in-Time access configuration policy. (required)
     * @param jitNetworkAccessPolicyInitiateType Type of the action to do on the Just-in-Time access policy. (required)
     * @param apiVersion API version for the operation (required)
     * @param body  (required)
     * @return ApiResponse&lt;JitNetworkAccessRequest&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JitNetworkAccessRequest> jitNetworkAccessPoliciesInitiateWithHttpInfo(String subscriptionId, String resourceGroupName, String ascLocation, String jitNetworkAccessPolicyName, String jitNetworkAccessPolicyInitiateType, String apiVersion, JitNetworkAccessPolicyInitiateRequest body) throws ApiException {
        okhttp3.Call localVarCall = jitNetworkAccessPoliciesInitiateValidateBeforeCall(subscriptionId, resourceGroupName, ascLocation, jitNetworkAccessPolicyName, jitNetworkAccessPolicyInitiateType, apiVersion, body, null);
        Type localVarReturnType = new TypeToken<JitNetworkAccessRequest>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Initiate a JIT access from a specific Just-in-Time policy configuration.
     * @param subscriptionId Azure subscription ID (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param ascLocation The location where ASC stores the data of the subscription. can be retrieved from Get locations (required)
     * @param jitNetworkAccessPolicyName Name of a Just-in-Time access configuration policy. (required)
     * @param jitNetworkAccessPolicyInitiateType Type of the action to do on the Just-in-Time access policy. (required)
     * @param apiVersion API version for the operation (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jitNetworkAccessPoliciesInitiateAsync(String subscriptionId, String resourceGroupName, String ascLocation, String jitNetworkAccessPolicyName, String jitNetworkAccessPolicyInitiateType, String apiVersion, JitNetworkAccessPolicyInitiateRequest body, final ApiCallback<JitNetworkAccessRequest> _callback) throws ApiException {

        okhttp3.Call localVarCall = jitNetworkAccessPoliciesInitiateValidateBeforeCall(subscriptionId, resourceGroupName, ascLocation, jitNetworkAccessPolicyName, jitNetworkAccessPolicyInitiateType, apiVersion, body, _callback);
        Type localVarReturnType = new TypeToken<JitNetworkAccessRequest>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for jitNetworkAccessPoliciesList
     * @param subscriptionId Azure subscription ID (required)
     * @param apiVersion API version for the operation (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jitNetworkAccessPoliciesListCall(String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.Security/jitNetworkAccessPolicies"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jitNetworkAccessPoliciesListValidateBeforeCall(String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling jitNetworkAccessPoliciesList(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling jitNetworkAccessPoliciesList(Async)");
        }

        return jitNetworkAccessPoliciesListCall(subscriptionId, apiVersion, _callback);

    }

    /**
     * 
     * Policies for protecting resources using Just-in-Time access control.
     * @param subscriptionId Azure subscription ID (required)
     * @param apiVersion API version for the operation (required)
     * @return JitNetworkAccessPoliciesList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public JitNetworkAccessPoliciesList jitNetworkAccessPoliciesList(String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<JitNetworkAccessPoliciesList> localVarResp = jitNetworkAccessPoliciesListWithHttpInfo(subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Policies for protecting resources using Just-in-Time access control.
     * @param subscriptionId Azure subscription ID (required)
     * @param apiVersion API version for the operation (required)
     * @return ApiResponse&lt;JitNetworkAccessPoliciesList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JitNetworkAccessPoliciesList> jitNetworkAccessPoliciesListWithHttpInfo(String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = jitNetworkAccessPoliciesListValidateBeforeCall(subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<JitNetworkAccessPoliciesList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Policies for protecting resources using Just-in-Time access control.
     * @param subscriptionId Azure subscription ID (required)
     * @param apiVersion API version for the operation (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jitNetworkAccessPoliciesListAsync(String subscriptionId, String apiVersion, final ApiCallback<JitNetworkAccessPoliciesList> _callback) throws ApiException {

        okhttp3.Call localVarCall = jitNetworkAccessPoliciesListValidateBeforeCall(subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<JitNetworkAccessPoliciesList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for jitNetworkAccessPoliciesListByRegion
     * @param subscriptionId Azure subscription ID (required)
     * @param ascLocation The location where ASC stores the data of the subscription. can be retrieved from Get locations (required)
     * @param apiVersion API version for the operation (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jitNetworkAccessPoliciesListByRegionCall(String subscriptionId, String ascLocation, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.Security/locations/{ascLocation}/jitNetworkAccessPolicies"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "ascLocation" + "}", localVarApiClient.escapeString(ascLocation.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jitNetworkAccessPoliciesListByRegionValidateBeforeCall(String subscriptionId, String ascLocation, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling jitNetworkAccessPoliciesListByRegion(Async)");
        }

        // verify the required parameter 'ascLocation' is set
        if (ascLocation == null) {
            throw new ApiException("Missing the required parameter 'ascLocation' when calling jitNetworkAccessPoliciesListByRegion(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling jitNetworkAccessPoliciesListByRegion(Async)");
        }

        return jitNetworkAccessPoliciesListByRegionCall(subscriptionId, ascLocation, apiVersion, _callback);

    }

    /**
     * 
     * Policies for protecting resources using Just-in-Time access control for the subscription, location
     * @param subscriptionId Azure subscription ID (required)
     * @param ascLocation The location where ASC stores the data of the subscription. can be retrieved from Get locations (required)
     * @param apiVersion API version for the operation (required)
     * @return JitNetworkAccessPoliciesList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public JitNetworkAccessPoliciesList jitNetworkAccessPoliciesListByRegion(String subscriptionId, String ascLocation, String apiVersion) throws ApiException {
        ApiResponse<JitNetworkAccessPoliciesList> localVarResp = jitNetworkAccessPoliciesListByRegionWithHttpInfo(subscriptionId, ascLocation, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Policies for protecting resources using Just-in-Time access control for the subscription, location
     * @param subscriptionId Azure subscription ID (required)
     * @param ascLocation The location where ASC stores the data of the subscription. can be retrieved from Get locations (required)
     * @param apiVersion API version for the operation (required)
     * @return ApiResponse&lt;JitNetworkAccessPoliciesList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JitNetworkAccessPoliciesList> jitNetworkAccessPoliciesListByRegionWithHttpInfo(String subscriptionId, String ascLocation, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = jitNetworkAccessPoliciesListByRegionValidateBeforeCall(subscriptionId, ascLocation, apiVersion, null);
        Type localVarReturnType = new TypeToken<JitNetworkAccessPoliciesList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Policies for protecting resources using Just-in-Time access control for the subscription, location
     * @param subscriptionId Azure subscription ID (required)
     * @param ascLocation The location where ASC stores the data of the subscription. can be retrieved from Get locations (required)
     * @param apiVersion API version for the operation (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jitNetworkAccessPoliciesListByRegionAsync(String subscriptionId, String ascLocation, String apiVersion, final ApiCallback<JitNetworkAccessPoliciesList> _callback) throws ApiException {

        okhttp3.Call localVarCall = jitNetworkAccessPoliciesListByRegionValidateBeforeCall(subscriptionId, ascLocation, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<JitNetworkAccessPoliciesList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for jitNetworkAccessPoliciesListByResourceGroup
     * @param subscriptionId Azure subscription ID (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param apiVersion API version for the operation (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jitNetworkAccessPoliciesListByResourceGroupCall(String subscriptionId, String resourceGroupName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/jitNetworkAccessPolicies"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jitNetworkAccessPoliciesListByResourceGroupValidateBeforeCall(String subscriptionId, String resourceGroupName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling jitNetworkAccessPoliciesListByResourceGroup(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling jitNetworkAccessPoliciesListByResourceGroup(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling jitNetworkAccessPoliciesListByResourceGroup(Async)");
        }

        return jitNetworkAccessPoliciesListByResourceGroupCall(subscriptionId, resourceGroupName, apiVersion, _callback);

    }

    /**
     * 
     * Policies for protecting resources using Just-in-Time access control for the subscription, location
     * @param subscriptionId Azure subscription ID (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param apiVersion API version for the operation (required)
     * @return JitNetworkAccessPoliciesList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public JitNetworkAccessPoliciesList jitNetworkAccessPoliciesListByResourceGroup(String subscriptionId, String resourceGroupName, String apiVersion) throws ApiException {
        ApiResponse<JitNetworkAccessPoliciesList> localVarResp = jitNetworkAccessPoliciesListByResourceGroupWithHttpInfo(subscriptionId, resourceGroupName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Policies for protecting resources using Just-in-Time access control for the subscription, location
     * @param subscriptionId Azure subscription ID (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param apiVersion API version for the operation (required)
     * @return ApiResponse&lt;JitNetworkAccessPoliciesList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JitNetworkAccessPoliciesList> jitNetworkAccessPoliciesListByResourceGroupWithHttpInfo(String subscriptionId, String resourceGroupName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = jitNetworkAccessPoliciesListByResourceGroupValidateBeforeCall(subscriptionId, resourceGroupName, apiVersion, null);
        Type localVarReturnType = new TypeToken<JitNetworkAccessPoliciesList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Policies for protecting resources using Just-in-Time access control for the subscription, location
     * @param subscriptionId Azure subscription ID (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param apiVersion API version for the operation (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jitNetworkAccessPoliciesListByResourceGroupAsync(String subscriptionId, String resourceGroupName, String apiVersion, final ApiCallback<JitNetworkAccessPoliciesList> _callback) throws ApiException {

        okhttp3.Call localVarCall = jitNetworkAccessPoliciesListByResourceGroupValidateBeforeCall(subscriptionId, resourceGroupName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<JitNetworkAccessPoliciesList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for jitNetworkAccessPoliciesListByResourceGroupAndRegion
     * @param subscriptionId Azure subscription ID (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param ascLocation The location where ASC stores the data of the subscription. can be retrieved from Get locations (required)
     * @param apiVersion API version for the operation (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jitNetworkAccessPoliciesListByResourceGroupAndRegionCall(String subscriptionId, String resourceGroupName, String ascLocation, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/locations/{ascLocation}/jitNetworkAccessPolicies"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "ascLocation" + "}", localVarApiClient.escapeString(ascLocation.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jitNetworkAccessPoliciesListByResourceGroupAndRegionValidateBeforeCall(String subscriptionId, String resourceGroupName, String ascLocation, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling jitNetworkAccessPoliciesListByResourceGroupAndRegion(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling jitNetworkAccessPoliciesListByResourceGroupAndRegion(Async)");
        }

        // verify the required parameter 'ascLocation' is set
        if (ascLocation == null) {
            throw new ApiException("Missing the required parameter 'ascLocation' when calling jitNetworkAccessPoliciesListByResourceGroupAndRegion(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling jitNetworkAccessPoliciesListByResourceGroupAndRegion(Async)");
        }

        return jitNetworkAccessPoliciesListByResourceGroupAndRegionCall(subscriptionId, resourceGroupName, ascLocation, apiVersion, _callback);

    }

    /**
     * 
     * Policies for protecting resources using Just-in-Time access control for the subscription, location
     * @param subscriptionId Azure subscription ID (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param ascLocation The location where ASC stores the data of the subscription. can be retrieved from Get locations (required)
     * @param apiVersion API version for the operation (required)
     * @return JitNetworkAccessPoliciesList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public JitNetworkAccessPoliciesList jitNetworkAccessPoliciesListByResourceGroupAndRegion(String subscriptionId, String resourceGroupName, String ascLocation, String apiVersion) throws ApiException {
        ApiResponse<JitNetworkAccessPoliciesList> localVarResp = jitNetworkAccessPoliciesListByResourceGroupAndRegionWithHttpInfo(subscriptionId, resourceGroupName, ascLocation, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Policies for protecting resources using Just-in-Time access control for the subscription, location
     * @param subscriptionId Azure subscription ID (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param ascLocation The location where ASC stores the data of the subscription. can be retrieved from Get locations (required)
     * @param apiVersion API version for the operation (required)
     * @return ApiResponse&lt;JitNetworkAccessPoliciesList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JitNetworkAccessPoliciesList> jitNetworkAccessPoliciesListByResourceGroupAndRegionWithHttpInfo(String subscriptionId, String resourceGroupName, String ascLocation, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = jitNetworkAccessPoliciesListByResourceGroupAndRegionValidateBeforeCall(subscriptionId, resourceGroupName, ascLocation, apiVersion, null);
        Type localVarReturnType = new TypeToken<JitNetworkAccessPoliciesList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Policies for protecting resources using Just-in-Time access control for the subscription, location
     * @param subscriptionId Azure subscription ID (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param ascLocation The location where ASC stores the data of the subscription. can be retrieved from Get locations (required)
     * @param apiVersion API version for the operation (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jitNetworkAccessPoliciesListByResourceGroupAndRegionAsync(String subscriptionId, String resourceGroupName, String ascLocation, String apiVersion, final ApiCallback<JitNetworkAccessPoliciesList> _callback) throws ApiException {

        okhttp3.Call localVarCall = jitNetworkAccessPoliciesListByResourceGroupAndRegionValidateBeforeCall(subscriptionId, resourceGroupName, ascLocation, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<JitNetworkAccessPoliciesList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
