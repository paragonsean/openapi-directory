/*
 * Security Center
 * API spec for Microsoft.Security (Azure Security Center) resource provider
 *
 * The version of the OpenAPI document: 2015-06-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * JitNetworkAccessPortRule
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:18:36.393177-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class JitNetworkAccessPortRule {
  public static final String SERIALIZED_NAME_ALLOWED_SOURCE_ADDRESS_PREFIX = "allowedSourceAddressPrefix";
  @SerializedName(SERIALIZED_NAME_ALLOWED_SOURCE_ADDRESS_PREFIX)
  private String allowedSourceAddressPrefix;

  public static final String SERIALIZED_NAME_ALLOWED_SOURCE_ADDRESS_PREFIXES = "allowedSourceAddressPrefixes";
  @SerializedName(SERIALIZED_NAME_ALLOWED_SOURCE_ADDRESS_PREFIXES)
  private List<String> allowedSourceAddressPrefixes = new ArrayList<>();

  public static final String SERIALIZED_NAME_MAX_REQUEST_ACCESS_DURATION = "maxRequestAccessDuration";
  @SerializedName(SERIALIZED_NAME_MAX_REQUEST_ACCESS_DURATION)
  private String maxRequestAccessDuration;

  public static final String SERIALIZED_NAME_NUMBER = "number";
  @SerializedName(SERIALIZED_NAME_NUMBER)
  private Integer number;

  /**
   * Gets or Sets protocol
   */
  @JsonAdapter(ProtocolEnum.Adapter.class)
  public enum ProtocolEnum {
    TCP("TCP"),
    
    UDP("UDP"),
    
    STAR("*");

    private String value;

    ProtocolEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProtocolEnum fromValue(String value) {
      for (ProtocolEnum b : ProtocolEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProtocolEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProtocolEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProtocolEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProtocolEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProtocolEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROTOCOL = "protocol";
  @SerializedName(SERIALIZED_NAME_PROTOCOL)
  private ProtocolEnum protocol;

  public JitNetworkAccessPortRule() {
  }

  public JitNetworkAccessPortRule allowedSourceAddressPrefix(String allowedSourceAddressPrefix) {
    this.allowedSourceAddressPrefix = allowedSourceAddressPrefix;
    return this;
  }

  /**
   * Mutually exclusive with the \&quot;allowedSourceAddressPrefixes\&quot; parameter. Should be an IP address or CIDR, for example \&quot;192.168.0.3\&quot; or \&quot;192.168.0.0/16\&quot;.
   * @return allowedSourceAddressPrefix
   */
  @javax.annotation.Nullable
  public String getAllowedSourceAddressPrefix() {
    return allowedSourceAddressPrefix;
  }

  public void setAllowedSourceAddressPrefix(String allowedSourceAddressPrefix) {
    this.allowedSourceAddressPrefix = allowedSourceAddressPrefix;
  }


  public JitNetworkAccessPortRule allowedSourceAddressPrefixes(List<String> allowedSourceAddressPrefixes) {
    this.allowedSourceAddressPrefixes = allowedSourceAddressPrefixes;
    return this;
  }

  public JitNetworkAccessPortRule addAllowedSourceAddressPrefixesItem(String allowedSourceAddressPrefixesItem) {
    if (this.allowedSourceAddressPrefixes == null) {
      this.allowedSourceAddressPrefixes = new ArrayList<>();
    }
    this.allowedSourceAddressPrefixes.add(allowedSourceAddressPrefixesItem);
    return this;
  }

  /**
   * Mutually exclusive with the \&quot;allowedSourceAddressPrefix\&quot; parameter.
   * @return allowedSourceAddressPrefixes
   */
  @javax.annotation.Nullable
  public List<String> getAllowedSourceAddressPrefixes() {
    return allowedSourceAddressPrefixes;
  }

  public void setAllowedSourceAddressPrefixes(List<String> allowedSourceAddressPrefixes) {
    this.allowedSourceAddressPrefixes = allowedSourceAddressPrefixes;
  }


  public JitNetworkAccessPortRule maxRequestAccessDuration(String maxRequestAccessDuration) {
    this.maxRequestAccessDuration = maxRequestAccessDuration;
    return this;
  }

  /**
   * Maximum duration requests can be made for. In ISO 8601 duration format. Minimum 5 minutes, maximum 1 day
   * @return maxRequestAccessDuration
   */
  @javax.annotation.Nonnull
  public String getMaxRequestAccessDuration() {
    return maxRequestAccessDuration;
  }

  public void setMaxRequestAccessDuration(String maxRequestAccessDuration) {
    this.maxRequestAccessDuration = maxRequestAccessDuration;
  }


  public JitNetworkAccessPortRule number(Integer number) {
    this.number = number;
    return this;
  }

  /**
   * Get number
   * minimum: 0
   * maximum: 65535
   * @return number
   */
  @javax.annotation.Nonnull
  public Integer getNumber() {
    return number;
  }

  public void setNumber(Integer number) {
    this.number = number;
  }


  public JitNetworkAccessPortRule protocol(ProtocolEnum protocol) {
    this.protocol = protocol;
    return this;
  }

  /**
   * Get protocol
   * @return protocol
   */
  @javax.annotation.Nonnull
  public ProtocolEnum getProtocol() {
    return protocol;
  }

  public void setProtocol(ProtocolEnum protocol) {
    this.protocol = protocol;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JitNetworkAccessPortRule jitNetworkAccessPortRule = (JitNetworkAccessPortRule) o;
    return Objects.equals(this.allowedSourceAddressPrefix, jitNetworkAccessPortRule.allowedSourceAddressPrefix) &&
        Objects.equals(this.allowedSourceAddressPrefixes, jitNetworkAccessPortRule.allowedSourceAddressPrefixes) &&
        Objects.equals(this.maxRequestAccessDuration, jitNetworkAccessPortRule.maxRequestAccessDuration) &&
        Objects.equals(this.number, jitNetworkAccessPortRule.number) &&
        Objects.equals(this.protocol, jitNetworkAccessPortRule.protocol);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowedSourceAddressPrefix, allowedSourceAddressPrefixes, maxRequestAccessDuration, number, protocol);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JitNetworkAccessPortRule {\n");
    sb.append("    allowedSourceAddressPrefix: ").append(toIndentedString(allowedSourceAddressPrefix)).append("\n");
    sb.append("    allowedSourceAddressPrefixes: ").append(toIndentedString(allowedSourceAddressPrefixes)).append("\n");
    sb.append("    maxRequestAccessDuration: ").append(toIndentedString(maxRequestAccessDuration)).append("\n");
    sb.append("    number: ").append(toIndentedString(number)).append("\n");
    sb.append("    protocol: ").append(toIndentedString(protocol)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allowedSourceAddressPrefix");
    openapiFields.add("allowedSourceAddressPrefixes");
    openapiFields.add("maxRequestAccessDuration");
    openapiFields.add("number");
    openapiFields.add("protocol");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("maxRequestAccessDuration");
    openapiRequiredFields.add("number");
    openapiRequiredFields.add("protocol");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to JitNetworkAccessPortRule
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!JitNetworkAccessPortRule.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in JitNetworkAccessPortRule is not found in the empty JSON string", JitNetworkAccessPortRule.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!JitNetworkAccessPortRule.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `JitNetworkAccessPortRule` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : JitNetworkAccessPortRule.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("allowedSourceAddressPrefix") != null && !jsonObj.get("allowedSourceAddressPrefix").isJsonNull()) && !jsonObj.get("allowedSourceAddressPrefix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `allowedSourceAddressPrefix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("allowedSourceAddressPrefix").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("allowedSourceAddressPrefixes") != null && !jsonObj.get("allowedSourceAddressPrefixes").isJsonNull() && !jsonObj.get("allowedSourceAddressPrefixes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `allowedSourceAddressPrefixes` to be an array in the JSON string but got `%s`", jsonObj.get("allowedSourceAddressPrefixes").toString()));
      }
      if (!jsonObj.get("maxRequestAccessDuration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `maxRequestAccessDuration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("maxRequestAccessDuration").toString()));
      }
      if (!jsonObj.get("protocol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `protocol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("protocol").toString()));
      }
      // validate the required field `protocol`
      ProtocolEnum.validateJsonElement(jsonObj.get("protocol"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!JitNetworkAccessPortRule.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'JitNetworkAccessPortRule' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<JitNetworkAccessPortRule> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(JitNetworkAccessPortRule.class));

       return (TypeAdapter<T>) new TypeAdapter<JitNetworkAccessPortRule>() {
           @Override
           public void write(JsonWriter out, JitNetworkAccessPortRule value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public JitNetworkAccessPortRule read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of JitNetworkAccessPortRule given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of JitNetworkAccessPortRule
   * @throws IOException if the JSON string is invalid with respect to JitNetworkAccessPortRule
   */
  public static JitNetworkAccessPortRule fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, JitNetworkAccessPortRule.class);
  }

  /**
   * Convert an instance of JitNetworkAccessPortRule to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

