/**
 * Security Center
 * API spec for Microsoft.Security (Azure Security Center) resource provider
 *
 * The version of the OpenAPI document: 2015-06-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIExternalSecuritySolutionsApi_H
#define OAI_OAIExternalSecuritySolutionsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICloudError.h"
#include "OAIExternalSecuritySolution.h"
#include "OAIExternalSecuritySolutionList.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIExternalSecuritySolutionsApi : public QObject {
    Q_OBJECT

public:
    OAIExternalSecuritySolutionsApi(const int timeOut = 0);
    ~OAIExternalSecuritySolutionsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  asc_location QString [required]
    * @param[in]  external_security_solutions_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void externalSecuritySolutionsGet(const QString &subscription_id, const QString &resource_group_name, const QString &asc_location, const QString &external_security_solutions_name, const QString &api_version);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void externalSecuritySolutionsList(const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  asc_location QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void externalSecuritySolutionsListByHomeRegion(const QString &subscription_id, const QString &asc_location, const QString &api_version);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void externalSecuritySolutionsGetCallback(OAIHttpRequestWorker *worker);
    void externalSecuritySolutionsListCallback(OAIHttpRequestWorker *worker);
    void externalSecuritySolutionsListByHomeRegionCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void externalSecuritySolutionsGetSignal(OAIExternalSecuritySolution summary);
    void externalSecuritySolutionsListSignal(OAIExternalSecuritySolutionList summary);
    void externalSecuritySolutionsListByHomeRegionSignal(OAIExternalSecuritySolutionList summary);


    void externalSecuritySolutionsGetSignalFull(OAIHttpRequestWorker *worker, OAIExternalSecuritySolution summary);
    void externalSecuritySolutionsListSignalFull(OAIHttpRequestWorker *worker, OAIExternalSecuritySolutionList summary);
    void externalSecuritySolutionsListByHomeRegionSignalFull(OAIHttpRequestWorker *worker, OAIExternalSecuritySolutionList summary);

    Q_DECL_DEPRECATED_X("Use externalSecuritySolutionsGetSignalError() instead")
    void externalSecuritySolutionsGetSignalE(OAIExternalSecuritySolution summary, QNetworkReply::NetworkError error_type, QString error_str);
    void externalSecuritySolutionsGetSignalError(OAIExternalSecuritySolution summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use externalSecuritySolutionsListSignalError() instead")
    void externalSecuritySolutionsListSignalE(OAIExternalSecuritySolutionList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void externalSecuritySolutionsListSignalError(OAIExternalSecuritySolutionList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use externalSecuritySolutionsListByHomeRegionSignalError() instead")
    void externalSecuritySolutionsListByHomeRegionSignalE(OAIExternalSecuritySolutionList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void externalSecuritySolutionsListByHomeRegionSignalError(OAIExternalSecuritySolutionList summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use externalSecuritySolutionsGetSignalErrorFull() instead")
    void externalSecuritySolutionsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void externalSecuritySolutionsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use externalSecuritySolutionsListSignalErrorFull() instead")
    void externalSecuritySolutionsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void externalSecuritySolutionsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use externalSecuritySolutionsListByHomeRegionSignalErrorFull() instead")
    void externalSecuritySolutionsListByHomeRegionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void externalSecuritySolutionsListByHomeRegionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
