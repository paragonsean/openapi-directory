/**
 * Security Center
 * API spec for Microsoft.Security (Azure Security Center) resource provider
 *
 * The version of the OpenAPI document: 2015-06-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIJitNetworkAccessPoliciesApi_H
#define OAI_OAIJitNetworkAccessPoliciesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICloudError.h"
#include "OAIJitNetworkAccessPoliciesList.h"
#include "OAIJitNetworkAccessPolicy.h"
#include "OAIJitNetworkAccessPolicyInitiateRequest.h"
#include "OAIJitNetworkAccessRequest.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIJitNetworkAccessPoliciesApi : public QObject {
    Q_OBJECT

public:
    OAIJitNetworkAccessPoliciesApi(const int timeOut = 0);
    ~OAIJitNetworkAccessPoliciesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  asc_location QString [required]
    * @param[in]  jit_network_access_policy_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  body OAIJitNetworkAccessPolicy [required]
    */
    virtual void jitNetworkAccessPoliciesCreateOrUpdate(const QString &subscription_id, const QString &resource_group_name, const QString &asc_location, const QString &jit_network_access_policy_name, const QString &api_version, const OAIJitNetworkAccessPolicy &body);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  asc_location QString [required]
    * @param[in]  jit_network_access_policy_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void jitNetworkAccessPoliciesDelete(const QString &subscription_id, const QString &resource_group_name, const QString &asc_location, const QString &jit_network_access_policy_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  asc_location QString [required]
    * @param[in]  jit_network_access_policy_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void jitNetworkAccessPoliciesGet(const QString &subscription_id, const QString &resource_group_name, const QString &asc_location, const QString &jit_network_access_policy_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  asc_location QString [required]
    * @param[in]  jit_network_access_policy_name QString [required]
    * @param[in]  jit_network_access_policy_initiate_type QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  body OAIJitNetworkAccessPolicyInitiateRequest [required]
    */
    virtual void jitNetworkAccessPoliciesInitiate(const QString &subscription_id, const QString &resource_group_name, const QString &asc_location, const QString &jit_network_access_policy_name, const QString &jit_network_access_policy_initiate_type, const QString &api_version, const OAIJitNetworkAccessPolicyInitiateRequest &body);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void jitNetworkAccessPoliciesList(const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  asc_location QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void jitNetworkAccessPoliciesListByRegion(const QString &subscription_id, const QString &asc_location, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void jitNetworkAccessPoliciesListByResourceGroup(const QString &subscription_id, const QString &resource_group_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  asc_location QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void jitNetworkAccessPoliciesListByResourceGroupAndRegion(const QString &subscription_id, const QString &resource_group_name, const QString &asc_location, const QString &api_version);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void jitNetworkAccessPoliciesCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void jitNetworkAccessPoliciesDeleteCallback(OAIHttpRequestWorker *worker);
    void jitNetworkAccessPoliciesGetCallback(OAIHttpRequestWorker *worker);
    void jitNetworkAccessPoliciesInitiateCallback(OAIHttpRequestWorker *worker);
    void jitNetworkAccessPoliciesListCallback(OAIHttpRequestWorker *worker);
    void jitNetworkAccessPoliciesListByRegionCallback(OAIHttpRequestWorker *worker);
    void jitNetworkAccessPoliciesListByResourceGroupCallback(OAIHttpRequestWorker *worker);
    void jitNetworkAccessPoliciesListByResourceGroupAndRegionCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void jitNetworkAccessPoliciesCreateOrUpdateSignal(OAIJitNetworkAccessPolicy summary);
    void jitNetworkAccessPoliciesDeleteSignal();
    void jitNetworkAccessPoliciesGetSignal(OAIJitNetworkAccessPolicy summary);
    void jitNetworkAccessPoliciesInitiateSignal(OAIJitNetworkAccessRequest summary);
    void jitNetworkAccessPoliciesListSignal(OAIJitNetworkAccessPoliciesList summary);
    void jitNetworkAccessPoliciesListByRegionSignal(OAIJitNetworkAccessPoliciesList summary);
    void jitNetworkAccessPoliciesListByResourceGroupSignal(OAIJitNetworkAccessPoliciesList summary);
    void jitNetworkAccessPoliciesListByResourceGroupAndRegionSignal(OAIJitNetworkAccessPoliciesList summary);


    void jitNetworkAccessPoliciesCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIJitNetworkAccessPolicy summary);
    void jitNetworkAccessPoliciesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void jitNetworkAccessPoliciesGetSignalFull(OAIHttpRequestWorker *worker, OAIJitNetworkAccessPolicy summary);
    void jitNetworkAccessPoliciesInitiateSignalFull(OAIHttpRequestWorker *worker, OAIJitNetworkAccessRequest summary);
    void jitNetworkAccessPoliciesListSignalFull(OAIHttpRequestWorker *worker, OAIJitNetworkAccessPoliciesList summary);
    void jitNetworkAccessPoliciesListByRegionSignalFull(OAIHttpRequestWorker *worker, OAIJitNetworkAccessPoliciesList summary);
    void jitNetworkAccessPoliciesListByResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAIJitNetworkAccessPoliciesList summary);
    void jitNetworkAccessPoliciesListByResourceGroupAndRegionSignalFull(OAIHttpRequestWorker *worker, OAIJitNetworkAccessPoliciesList summary);

    Q_DECL_DEPRECATED_X("Use jitNetworkAccessPoliciesCreateOrUpdateSignalError() instead")
    void jitNetworkAccessPoliciesCreateOrUpdateSignalE(OAIJitNetworkAccessPolicy summary, QNetworkReply::NetworkError error_type, QString error_str);
    void jitNetworkAccessPoliciesCreateOrUpdateSignalError(OAIJitNetworkAccessPolicy summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jitNetworkAccessPoliciesDeleteSignalError() instead")
    void jitNetworkAccessPoliciesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void jitNetworkAccessPoliciesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jitNetworkAccessPoliciesGetSignalError() instead")
    void jitNetworkAccessPoliciesGetSignalE(OAIJitNetworkAccessPolicy summary, QNetworkReply::NetworkError error_type, QString error_str);
    void jitNetworkAccessPoliciesGetSignalError(OAIJitNetworkAccessPolicy summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jitNetworkAccessPoliciesInitiateSignalError() instead")
    void jitNetworkAccessPoliciesInitiateSignalE(OAIJitNetworkAccessRequest summary, QNetworkReply::NetworkError error_type, QString error_str);
    void jitNetworkAccessPoliciesInitiateSignalError(OAIJitNetworkAccessRequest summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jitNetworkAccessPoliciesListSignalError() instead")
    void jitNetworkAccessPoliciesListSignalE(OAIJitNetworkAccessPoliciesList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void jitNetworkAccessPoliciesListSignalError(OAIJitNetworkAccessPoliciesList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jitNetworkAccessPoliciesListByRegionSignalError() instead")
    void jitNetworkAccessPoliciesListByRegionSignalE(OAIJitNetworkAccessPoliciesList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void jitNetworkAccessPoliciesListByRegionSignalError(OAIJitNetworkAccessPoliciesList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jitNetworkAccessPoliciesListByResourceGroupSignalError() instead")
    void jitNetworkAccessPoliciesListByResourceGroupSignalE(OAIJitNetworkAccessPoliciesList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void jitNetworkAccessPoliciesListByResourceGroupSignalError(OAIJitNetworkAccessPoliciesList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jitNetworkAccessPoliciesListByResourceGroupAndRegionSignalError() instead")
    void jitNetworkAccessPoliciesListByResourceGroupAndRegionSignalE(OAIJitNetworkAccessPoliciesList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void jitNetworkAccessPoliciesListByResourceGroupAndRegionSignalError(OAIJitNetworkAccessPoliciesList summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use jitNetworkAccessPoliciesCreateOrUpdateSignalErrorFull() instead")
    void jitNetworkAccessPoliciesCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jitNetworkAccessPoliciesCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jitNetworkAccessPoliciesDeleteSignalErrorFull() instead")
    void jitNetworkAccessPoliciesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jitNetworkAccessPoliciesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jitNetworkAccessPoliciesGetSignalErrorFull() instead")
    void jitNetworkAccessPoliciesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jitNetworkAccessPoliciesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jitNetworkAccessPoliciesInitiateSignalErrorFull() instead")
    void jitNetworkAccessPoliciesInitiateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jitNetworkAccessPoliciesInitiateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jitNetworkAccessPoliciesListSignalErrorFull() instead")
    void jitNetworkAccessPoliciesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jitNetworkAccessPoliciesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jitNetworkAccessPoliciesListByRegionSignalErrorFull() instead")
    void jitNetworkAccessPoliciesListByRegionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jitNetworkAccessPoliciesListByRegionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jitNetworkAccessPoliciesListByResourceGroupSignalErrorFull() instead")
    void jitNetworkAccessPoliciesListByResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jitNetworkAccessPoliciesListByResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jitNetworkAccessPoliciesListByResourceGroupAndRegionSignalErrorFull() instead")
    void jitNetworkAccessPoliciesListByResourceGroupAndRegionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jitNetworkAccessPoliciesListByResourceGroupAndRegionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
