/**
 * Security Center
 * API spec for Microsoft.Security (Azure Security Center) resource provider
 *
 * The version of the OpenAPI document: 2015-06-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAtaSolutionProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAtaSolutionProperties::OAIAtaSolutionProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAtaSolutionProperties::OAIAtaSolutionProperties() {
    this->initializeModel();
}

OAIAtaSolutionProperties::~OAIAtaSolutionProperties() {}

void OAIAtaSolutionProperties::initializeModel() {

    m_last_event_received_isSet = false;
    m_last_event_received_isValid = false;

    m_device_type_isSet = false;
    m_device_type_isValid = false;

    m_device_vendor_isSet = false;
    m_device_vendor_isValid = false;

    m_workspace_isSet = false;
    m_workspace_isValid = false;
}

void OAIAtaSolutionProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAtaSolutionProperties::fromJsonObject(QJsonObject json) {

    m_last_event_received_isValid = ::OpenAPI::fromJsonValue(m_last_event_received, json[QString("lastEventReceived")]);
    m_last_event_received_isSet = !json[QString("lastEventReceived")].isNull() && m_last_event_received_isValid;

    m_device_type_isValid = ::OpenAPI::fromJsonValue(m_device_type, json[QString("deviceType")]);
    m_device_type_isSet = !json[QString("deviceType")].isNull() && m_device_type_isValid;

    m_device_vendor_isValid = ::OpenAPI::fromJsonValue(m_device_vendor, json[QString("deviceVendor")]);
    m_device_vendor_isSet = !json[QString("deviceVendor")].isNull() && m_device_vendor_isValid;

    m_workspace_isValid = ::OpenAPI::fromJsonValue(m_workspace, json[QString("workspace")]);
    m_workspace_isSet = !json[QString("workspace")].isNull() && m_workspace_isValid;
}

QString OAIAtaSolutionProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAtaSolutionProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_last_event_received_isSet) {
        obj.insert(QString("lastEventReceived"), ::OpenAPI::toJsonValue(m_last_event_received));
    }
    if (m_device_type_isSet) {
        obj.insert(QString("deviceType"), ::OpenAPI::toJsonValue(m_device_type));
    }
    if (m_device_vendor_isSet) {
        obj.insert(QString("deviceVendor"), ::OpenAPI::toJsonValue(m_device_vendor));
    }
    if (m_workspace.isSet()) {
        obj.insert(QString("workspace"), ::OpenAPI::toJsonValue(m_workspace));
    }
    return obj;
}

QString OAIAtaSolutionProperties::getLastEventReceived() const {
    return m_last_event_received;
}
void OAIAtaSolutionProperties::setLastEventReceived(const QString &last_event_received) {
    m_last_event_received = last_event_received;
    m_last_event_received_isSet = true;
}

bool OAIAtaSolutionProperties::is_last_event_received_Set() const{
    return m_last_event_received_isSet;
}

bool OAIAtaSolutionProperties::is_last_event_received_Valid() const{
    return m_last_event_received_isValid;
}

QString OAIAtaSolutionProperties::getDeviceType() const {
    return m_device_type;
}
void OAIAtaSolutionProperties::setDeviceType(const QString &device_type) {
    m_device_type = device_type;
    m_device_type_isSet = true;
}

bool OAIAtaSolutionProperties::is_device_type_Set() const{
    return m_device_type_isSet;
}

bool OAIAtaSolutionProperties::is_device_type_Valid() const{
    return m_device_type_isValid;
}

QString OAIAtaSolutionProperties::getDeviceVendor() const {
    return m_device_vendor;
}
void OAIAtaSolutionProperties::setDeviceVendor(const QString &device_vendor) {
    m_device_vendor = device_vendor;
    m_device_vendor_isSet = true;
}

bool OAIAtaSolutionProperties::is_device_vendor_Set() const{
    return m_device_vendor_isSet;
}

bool OAIAtaSolutionProperties::is_device_vendor_Valid() const{
    return m_device_vendor_isValid;
}

OAIConnectedWorkspace OAIAtaSolutionProperties::getWorkspace() const {
    return m_workspace;
}
void OAIAtaSolutionProperties::setWorkspace(const OAIConnectedWorkspace &workspace) {
    m_workspace = workspace;
    m_workspace_isSet = true;
}

bool OAIAtaSolutionProperties::is_workspace_Set() const{
    return m_workspace_isSet;
}

bool OAIAtaSolutionProperties::is_workspace_Valid() const{
    return m_workspace_isValid;
}

bool OAIAtaSolutionProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_last_event_received_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_vendor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_workspace.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAtaSolutionProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
