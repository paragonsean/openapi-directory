/**
 * Security Center
 * API spec for Microsoft.Security (Azure Security Center) resource provider
 *
 * The version of the OpenAPI document: 2015-06-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJitNetworkAccessRequestPort.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJitNetworkAccessRequestPort::OAIJitNetworkAccessRequestPort(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJitNetworkAccessRequestPort::OAIJitNetworkAccessRequestPort() {
    this->initializeModel();
}

OAIJitNetworkAccessRequestPort::~OAIJitNetworkAccessRequestPort() {}

void OAIJitNetworkAccessRequestPort::initializeModel() {

    m_allowed_source_address_prefix_isSet = false;
    m_allowed_source_address_prefix_isValid = false;

    m_allowed_source_address_prefixes_isSet = false;
    m_allowed_source_address_prefixes_isValid = false;

    m_end_time_utc_isSet = false;
    m_end_time_utc_isValid = false;

    m_number_isSet = false;
    m_number_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_status_reason_isSet = false;
    m_status_reason_isValid = false;
}

void OAIJitNetworkAccessRequestPort::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJitNetworkAccessRequestPort::fromJsonObject(QJsonObject json) {

    m_allowed_source_address_prefix_isValid = ::OpenAPI::fromJsonValue(m_allowed_source_address_prefix, json[QString("allowedSourceAddressPrefix")]);
    m_allowed_source_address_prefix_isSet = !json[QString("allowedSourceAddressPrefix")].isNull() && m_allowed_source_address_prefix_isValid;

    m_allowed_source_address_prefixes_isValid = ::OpenAPI::fromJsonValue(m_allowed_source_address_prefixes, json[QString("allowedSourceAddressPrefixes")]);
    m_allowed_source_address_prefixes_isSet = !json[QString("allowedSourceAddressPrefixes")].isNull() && m_allowed_source_address_prefixes_isValid;

    m_end_time_utc_isValid = ::OpenAPI::fromJsonValue(m_end_time_utc, json[QString("endTimeUtc")]);
    m_end_time_utc_isSet = !json[QString("endTimeUtc")].isNull() && m_end_time_utc_isValid;

    m_number_isValid = ::OpenAPI::fromJsonValue(m_number, json[QString("number")]);
    m_number_isSet = !json[QString("number")].isNull() && m_number_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_status_reason_isValid = ::OpenAPI::fromJsonValue(m_status_reason, json[QString("statusReason")]);
    m_status_reason_isSet = !json[QString("statusReason")].isNull() && m_status_reason_isValid;
}

QString OAIJitNetworkAccessRequestPort::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJitNetworkAccessRequestPort::asJsonObject() const {
    QJsonObject obj;
    if (m_allowed_source_address_prefix_isSet) {
        obj.insert(QString("allowedSourceAddressPrefix"), ::OpenAPI::toJsonValue(m_allowed_source_address_prefix));
    }
    if (m_allowed_source_address_prefixes.size() > 0) {
        obj.insert(QString("allowedSourceAddressPrefixes"), ::OpenAPI::toJsonValue(m_allowed_source_address_prefixes));
    }
    if (m_end_time_utc_isSet) {
        obj.insert(QString("endTimeUtc"), ::OpenAPI::toJsonValue(m_end_time_utc));
    }
    if (m_number_isSet) {
        obj.insert(QString("number"), ::OpenAPI::toJsonValue(m_number));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_status_reason_isSet) {
        obj.insert(QString("statusReason"), ::OpenAPI::toJsonValue(m_status_reason));
    }
    return obj;
}

QString OAIJitNetworkAccessRequestPort::getAllowedSourceAddressPrefix() const {
    return m_allowed_source_address_prefix;
}
void OAIJitNetworkAccessRequestPort::setAllowedSourceAddressPrefix(const QString &allowed_source_address_prefix) {
    m_allowed_source_address_prefix = allowed_source_address_prefix;
    m_allowed_source_address_prefix_isSet = true;
}

bool OAIJitNetworkAccessRequestPort::is_allowed_source_address_prefix_Set() const{
    return m_allowed_source_address_prefix_isSet;
}

bool OAIJitNetworkAccessRequestPort::is_allowed_source_address_prefix_Valid() const{
    return m_allowed_source_address_prefix_isValid;
}

QList<QString> OAIJitNetworkAccessRequestPort::getAllowedSourceAddressPrefixes() const {
    return m_allowed_source_address_prefixes;
}
void OAIJitNetworkAccessRequestPort::setAllowedSourceAddressPrefixes(const QList<QString> &allowed_source_address_prefixes) {
    m_allowed_source_address_prefixes = allowed_source_address_prefixes;
    m_allowed_source_address_prefixes_isSet = true;
}

bool OAIJitNetworkAccessRequestPort::is_allowed_source_address_prefixes_Set() const{
    return m_allowed_source_address_prefixes_isSet;
}

bool OAIJitNetworkAccessRequestPort::is_allowed_source_address_prefixes_Valid() const{
    return m_allowed_source_address_prefixes_isValid;
}

QDateTime OAIJitNetworkAccessRequestPort::getEndTimeUtc() const {
    return m_end_time_utc;
}
void OAIJitNetworkAccessRequestPort::setEndTimeUtc(const QDateTime &end_time_utc) {
    m_end_time_utc = end_time_utc;
    m_end_time_utc_isSet = true;
}

bool OAIJitNetworkAccessRequestPort::is_end_time_utc_Set() const{
    return m_end_time_utc_isSet;
}

bool OAIJitNetworkAccessRequestPort::is_end_time_utc_Valid() const{
    return m_end_time_utc_isValid;
}

qint32 OAIJitNetworkAccessRequestPort::getNumber() const {
    return m_number;
}
void OAIJitNetworkAccessRequestPort::setNumber(const qint32 &number) {
    m_number = number;
    m_number_isSet = true;
}

bool OAIJitNetworkAccessRequestPort::is_number_Set() const{
    return m_number_isSet;
}

bool OAIJitNetworkAccessRequestPort::is_number_Valid() const{
    return m_number_isValid;
}

QString OAIJitNetworkAccessRequestPort::getStatus() const {
    return m_status;
}
void OAIJitNetworkAccessRequestPort::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIJitNetworkAccessRequestPort::is_status_Set() const{
    return m_status_isSet;
}

bool OAIJitNetworkAccessRequestPort::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIJitNetworkAccessRequestPort::getStatusReason() const {
    return m_status_reason;
}
void OAIJitNetworkAccessRequestPort::setStatusReason(const QString &status_reason) {
    m_status_reason = status_reason;
    m_status_reason_isSet = true;
}

bool OAIJitNetworkAccessRequestPort::is_status_reason_Set() const{
    return m_status_reason_isSet;
}

bool OAIJitNetworkAccessRequestPort::is_status_reason_Valid() const{
    return m_status_reason_isValid;
}

bool OAIJitNetworkAccessRequestPort::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allowed_source_address_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allowed_source_address_prefixes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_utc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_reason_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJitNetworkAccessRequestPort::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_end_time_utc_isValid && m_number_isValid && m_status_isValid && m_status_reason_isValid && true;
}

} // namespace OpenAPI
