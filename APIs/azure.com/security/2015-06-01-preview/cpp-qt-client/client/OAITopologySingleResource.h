/**
 * Security Center
 * API spec for Microsoft.Security (Azure Security Center) resource provider
 *
 * The version of the OpenAPI document: 2015-06-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAITopologySingleResource.h
 *
 * 
 */

#ifndef OAITopologySingleResource_H
#define OAITopologySingleResource_H

#include <QJsonObject>

#include "OAITopologySingleResourceChild.h"
#include "OAITopologySingleResourceParent.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAITopologySingleResourceChild;
class OAITopologySingleResourceParent;

class OAITopologySingleResource : public OAIObject {
public:
    OAITopologySingleResource();
    OAITopologySingleResource(QString json);
    ~OAITopologySingleResource() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAITopologySingleResourceChild> getChildren() const;
    void setChildren(const QList<OAITopologySingleResourceChild> &children);
    bool is_children_Set() const;
    bool is_children_Valid() const;

    QString getLocation() const;
    void setLocation(const QString &location);
    bool is_location_Set() const;
    bool is_location_Valid() const;

    QString getNetworkZones() const;
    void setNetworkZones(const QString &network_zones);
    bool is_network_zones_Set() const;
    bool is_network_zones_Valid() const;

    QList<OAITopologySingleResourceParent> getParents() const;
    void setParents(const QList<OAITopologySingleResourceParent> &parents);
    bool is_parents_Set() const;
    bool is_parents_Valid() const;

    bool isRecommendationsExist() const;
    void setRecommendationsExist(const bool &recommendations_exist);
    bool is_recommendations_exist_Set() const;
    bool is_recommendations_exist_Valid() const;

    QString getResourceId() const;
    void setResourceId(const QString &resource_id);
    bool is_resource_id_Set() const;
    bool is_resource_id_Valid() const;

    QString getSeverity() const;
    void setSeverity(const QString &severity);
    bool is_severity_Set() const;
    bool is_severity_Valid() const;

    qint32 getTopologyScore() const;
    void setTopologyScore(const qint32 &topology_score);
    bool is_topology_score_Set() const;
    bool is_topology_score_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAITopologySingleResourceChild> m_children;
    bool m_children_isSet;
    bool m_children_isValid;

    QString m_location;
    bool m_location_isSet;
    bool m_location_isValid;

    QString m_network_zones;
    bool m_network_zones_isSet;
    bool m_network_zones_isValid;

    QList<OAITopologySingleResourceParent> m_parents;
    bool m_parents_isSet;
    bool m_parents_isValid;

    bool m_recommendations_exist;
    bool m_recommendations_exist_isSet;
    bool m_recommendations_exist_isValid;

    QString m_resource_id;
    bool m_resource_id_isSet;
    bool m_resource_id_isValid;

    QString m_severity;
    bool m_severity_isSet;
    bool m_severity_isValid;

    qint32 m_topology_score;
    bool m_topology_score_isSet;
    bool m_topology_score_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAITopologySingleResource)

#endif // OAITopologySingleResource_H
