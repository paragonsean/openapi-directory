/**
 * Security Center
 * API spec for Microsoft.Security (Azure Security Center) resource provider
 *
 * The version of the OpenAPI document: 2015-06-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAlertsApi_H
#define OAI_OAIAlertsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAlert.h"
#include "OAIAlertList.h"
#include "OAICloudError.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAlertsApi : public QObject {
    Q_OBJECT

public:
    OAIAlertsApi(const int timeOut = 0);
    ~OAIAlertsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  asc_location QString [required]
    * @param[in]  alert_name QString [required]
    * @param[in]  resource_group_name QString [required]
    */
    virtual void alertsGetResourceGroupLevelAlerts(const QString &api_version, const QString &subscription_id, const QString &asc_location, const QString &alert_name, const QString &resource_group_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  asc_location QString [required]
    * @param[in]  alert_name QString [required]
    */
    virtual void alertsGetSubscriptionLevelAlert(const QString &api_version, const QString &subscription_id, const QString &asc_location, const QString &alert_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  filter QString [optional]
    * @param[in]  select QString [optional]
    * @param[in]  expand QString [optional]
    */
    virtual void alertsList(const QString &api_version, const QString &subscription_id, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &select = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  filter QString [optional]
    * @param[in]  select QString [optional]
    * @param[in]  expand QString [optional]
    */
    virtual void alertsListByResourceGroup(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &select = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  asc_location QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  filter QString [optional]
    * @param[in]  select QString [optional]
    * @param[in]  expand QString [optional]
    */
    virtual void alertsListResourceGroupLevelAlertsByRegion(const QString &api_version, const QString &subscription_id, const QString &asc_location, const QString &resource_group_name, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &select = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  asc_location QString [required]
    * @param[in]  filter QString [optional]
    * @param[in]  select QString [optional]
    * @param[in]  expand QString [optional]
    */
    virtual void alertsListSubscriptionLevelAlertsByRegion(const QString &api_version, const QString &subscription_id, const QString &asc_location, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &select = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  asc_location QString [required]
    * @param[in]  alert_name QString [required]
    * @param[in]  alert_update_action_type QString [required]
    * @param[in]  resource_group_name QString [required]
    */
    virtual void alertsUpdateResourceGroupLevelAlertState(const QString &api_version, const QString &subscription_id, const QString &asc_location, const QString &alert_name, const QString &alert_update_action_type, const QString &resource_group_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  asc_location QString [required]
    * @param[in]  alert_name QString [required]
    * @param[in]  alert_update_action_type QString [required]
    */
    virtual void alertsUpdateSubscriptionLevelAlertState(const QString &api_version, const QString &subscription_id, const QString &asc_location, const QString &alert_name, const QString &alert_update_action_type);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void alertsGetResourceGroupLevelAlertsCallback(OAIHttpRequestWorker *worker);
    void alertsGetSubscriptionLevelAlertCallback(OAIHttpRequestWorker *worker);
    void alertsListCallback(OAIHttpRequestWorker *worker);
    void alertsListByResourceGroupCallback(OAIHttpRequestWorker *worker);
    void alertsListResourceGroupLevelAlertsByRegionCallback(OAIHttpRequestWorker *worker);
    void alertsListSubscriptionLevelAlertsByRegionCallback(OAIHttpRequestWorker *worker);
    void alertsUpdateResourceGroupLevelAlertStateCallback(OAIHttpRequestWorker *worker);
    void alertsUpdateSubscriptionLevelAlertStateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void alertsGetResourceGroupLevelAlertsSignal(OAIAlert summary);
    void alertsGetSubscriptionLevelAlertSignal(OAIAlert summary);
    void alertsListSignal(OAIAlertList summary);
    void alertsListByResourceGroupSignal(OAIAlertList summary);
    void alertsListResourceGroupLevelAlertsByRegionSignal(OAIAlertList summary);
    void alertsListSubscriptionLevelAlertsByRegionSignal(OAIAlertList summary);
    void alertsUpdateResourceGroupLevelAlertStateSignal();
    void alertsUpdateSubscriptionLevelAlertStateSignal();


    void alertsGetResourceGroupLevelAlertsSignalFull(OAIHttpRequestWorker *worker, OAIAlert summary);
    void alertsGetSubscriptionLevelAlertSignalFull(OAIHttpRequestWorker *worker, OAIAlert summary);
    void alertsListSignalFull(OAIHttpRequestWorker *worker, OAIAlertList summary);
    void alertsListByResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAIAlertList summary);
    void alertsListResourceGroupLevelAlertsByRegionSignalFull(OAIHttpRequestWorker *worker, OAIAlertList summary);
    void alertsListSubscriptionLevelAlertsByRegionSignalFull(OAIHttpRequestWorker *worker, OAIAlertList summary);
    void alertsUpdateResourceGroupLevelAlertStateSignalFull(OAIHttpRequestWorker *worker);
    void alertsUpdateSubscriptionLevelAlertStateSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use alertsGetResourceGroupLevelAlertsSignalError() instead")
    void alertsGetResourceGroupLevelAlertsSignalE(OAIAlert summary, QNetworkReply::NetworkError error_type, QString error_str);
    void alertsGetResourceGroupLevelAlertsSignalError(OAIAlert summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use alertsGetSubscriptionLevelAlertSignalError() instead")
    void alertsGetSubscriptionLevelAlertSignalE(OAIAlert summary, QNetworkReply::NetworkError error_type, QString error_str);
    void alertsGetSubscriptionLevelAlertSignalError(OAIAlert summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use alertsListSignalError() instead")
    void alertsListSignalE(OAIAlertList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void alertsListSignalError(OAIAlertList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use alertsListByResourceGroupSignalError() instead")
    void alertsListByResourceGroupSignalE(OAIAlertList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void alertsListByResourceGroupSignalError(OAIAlertList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use alertsListResourceGroupLevelAlertsByRegionSignalError() instead")
    void alertsListResourceGroupLevelAlertsByRegionSignalE(OAIAlertList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void alertsListResourceGroupLevelAlertsByRegionSignalError(OAIAlertList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use alertsListSubscriptionLevelAlertsByRegionSignalError() instead")
    void alertsListSubscriptionLevelAlertsByRegionSignalE(OAIAlertList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void alertsListSubscriptionLevelAlertsByRegionSignalError(OAIAlertList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use alertsUpdateResourceGroupLevelAlertStateSignalError() instead")
    void alertsUpdateResourceGroupLevelAlertStateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void alertsUpdateResourceGroupLevelAlertStateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use alertsUpdateSubscriptionLevelAlertStateSignalError() instead")
    void alertsUpdateSubscriptionLevelAlertStateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void alertsUpdateSubscriptionLevelAlertStateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use alertsGetResourceGroupLevelAlertsSignalErrorFull() instead")
    void alertsGetResourceGroupLevelAlertsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void alertsGetResourceGroupLevelAlertsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use alertsGetSubscriptionLevelAlertSignalErrorFull() instead")
    void alertsGetSubscriptionLevelAlertSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void alertsGetSubscriptionLevelAlertSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use alertsListSignalErrorFull() instead")
    void alertsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void alertsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use alertsListByResourceGroupSignalErrorFull() instead")
    void alertsListByResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void alertsListByResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use alertsListResourceGroupLevelAlertsByRegionSignalErrorFull() instead")
    void alertsListResourceGroupLevelAlertsByRegionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void alertsListResourceGroupLevelAlertsByRegionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use alertsListSubscriptionLevelAlertsByRegionSignalErrorFull() instead")
    void alertsListSubscriptionLevelAlertsByRegionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void alertsListSubscriptionLevelAlertsByRegionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use alertsUpdateResourceGroupLevelAlertStateSignalErrorFull() instead")
    void alertsUpdateResourceGroupLevelAlertStateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void alertsUpdateResourceGroupLevelAlertStateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use alertsUpdateSubscriptionLevelAlertStateSignalErrorFull() instead")
    void alertsUpdateSubscriptionLevelAlertStateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void alertsUpdateSubscriptionLevelAlertStateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
