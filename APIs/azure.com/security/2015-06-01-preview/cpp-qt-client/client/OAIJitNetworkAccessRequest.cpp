/**
 * Security Center
 * API spec for Microsoft.Security (Azure Security Center) resource provider
 *
 * The version of the OpenAPI document: 2015-06-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJitNetworkAccessRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJitNetworkAccessRequest::OAIJitNetworkAccessRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJitNetworkAccessRequest::OAIJitNetworkAccessRequest() {
    this->initializeModel();
}

OAIJitNetworkAccessRequest::~OAIJitNetworkAccessRequest() {}

void OAIJitNetworkAccessRequest::initializeModel() {

    m_requestor_isSet = false;
    m_requestor_isValid = false;

    m_start_time_utc_isSet = false;
    m_start_time_utc_isValid = false;

    m_virtual_machines_isSet = false;
    m_virtual_machines_isValid = false;
}

void OAIJitNetworkAccessRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJitNetworkAccessRequest::fromJsonObject(QJsonObject json) {

    m_requestor_isValid = ::OpenAPI::fromJsonValue(m_requestor, json[QString("requestor")]);
    m_requestor_isSet = !json[QString("requestor")].isNull() && m_requestor_isValid;

    m_start_time_utc_isValid = ::OpenAPI::fromJsonValue(m_start_time_utc, json[QString("startTimeUtc")]);
    m_start_time_utc_isSet = !json[QString("startTimeUtc")].isNull() && m_start_time_utc_isValid;

    m_virtual_machines_isValid = ::OpenAPI::fromJsonValue(m_virtual_machines, json[QString("virtualMachines")]);
    m_virtual_machines_isSet = !json[QString("virtualMachines")].isNull() && m_virtual_machines_isValid;
}

QString OAIJitNetworkAccessRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJitNetworkAccessRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_requestor_isSet) {
        obj.insert(QString("requestor"), ::OpenAPI::toJsonValue(m_requestor));
    }
    if (m_start_time_utc_isSet) {
        obj.insert(QString("startTimeUtc"), ::OpenAPI::toJsonValue(m_start_time_utc));
    }
    if (m_virtual_machines.size() > 0) {
        obj.insert(QString("virtualMachines"), ::OpenAPI::toJsonValue(m_virtual_machines));
    }
    return obj;
}

QString OAIJitNetworkAccessRequest::getRequestor() const {
    return m_requestor;
}
void OAIJitNetworkAccessRequest::setRequestor(const QString &requestor) {
    m_requestor = requestor;
    m_requestor_isSet = true;
}

bool OAIJitNetworkAccessRequest::is_requestor_Set() const{
    return m_requestor_isSet;
}

bool OAIJitNetworkAccessRequest::is_requestor_Valid() const{
    return m_requestor_isValid;
}

QDateTime OAIJitNetworkAccessRequest::getStartTimeUtc() const {
    return m_start_time_utc;
}
void OAIJitNetworkAccessRequest::setStartTimeUtc(const QDateTime &start_time_utc) {
    m_start_time_utc = start_time_utc;
    m_start_time_utc_isSet = true;
}

bool OAIJitNetworkAccessRequest::is_start_time_utc_Set() const{
    return m_start_time_utc_isSet;
}

bool OAIJitNetworkAccessRequest::is_start_time_utc_Valid() const{
    return m_start_time_utc_isValid;
}

QList<OAIJitNetworkAccessRequestVirtualMachine> OAIJitNetworkAccessRequest::getVirtualMachines() const {
    return m_virtual_machines;
}
void OAIJitNetworkAccessRequest::setVirtualMachines(const QList<OAIJitNetworkAccessRequestVirtualMachine> &virtual_machines) {
    m_virtual_machines = virtual_machines;
    m_virtual_machines_isSet = true;
}

bool OAIJitNetworkAccessRequest::is_virtual_machines_Set() const{
    return m_virtual_machines_isSet;
}

bool OAIJitNetworkAccessRequest::is_virtual_machines_Valid() const{
    return m_virtual_machines_isValid;
}

bool OAIJitNetworkAccessRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_requestor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_utc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_virtual_machines.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJitNetworkAccessRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_requestor_isValid && m_start_time_utc_isValid && m_virtual_machines_isValid && true;
}

} // namespace OpenAPI
