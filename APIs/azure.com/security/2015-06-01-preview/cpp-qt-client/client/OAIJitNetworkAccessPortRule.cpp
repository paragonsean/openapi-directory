/**
 * Security Center
 * API spec for Microsoft.Security (Azure Security Center) resource provider
 *
 * The version of the OpenAPI document: 2015-06-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJitNetworkAccessPortRule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJitNetworkAccessPortRule::OAIJitNetworkAccessPortRule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJitNetworkAccessPortRule::OAIJitNetworkAccessPortRule() {
    this->initializeModel();
}

OAIJitNetworkAccessPortRule::~OAIJitNetworkAccessPortRule() {}

void OAIJitNetworkAccessPortRule::initializeModel() {

    m_allowed_source_address_prefix_isSet = false;
    m_allowed_source_address_prefix_isValid = false;

    m_allowed_source_address_prefixes_isSet = false;
    m_allowed_source_address_prefixes_isValid = false;

    m_max_request_access_duration_isSet = false;
    m_max_request_access_duration_isValid = false;

    m_number_isSet = false;
    m_number_isValid = false;

    m_protocol_isSet = false;
    m_protocol_isValid = false;
}

void OAIJitNetworkAccessPortRule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJitNetworkAccessPortRule::fromJsonObject(QJsonObject json) {

    m_allowed_source_address_prefix_isValid = ::OpenAPI::fromJsonValue(m_allowed_source_address_prefix, json[QString("allowedSourceAddressPrefix")]);
    m_allowed_source_address_prefix_isSet = !json[QString("allowedSourceAddressPrefix")].isNull() && m_allowed_source_address_prefix_isValid;

    m_allowed_source_address_prefixes_isValid = ::OpenAPI::fromJsonValue(m_allowed_source_address_prefixes, json[QString("allowedSourceAddressPrefixes")]);
    m_allowed_source_address_prefixes_isSet = !json[QString("allowedSourceAddressPrefixes")].isNull() && m_allowed_source_address_prefixes_isValid;

    m_max_request_access_duration_isValid = ::OpenAPI::fromJsonValue(m_max_request_access_duration, json[QString("maxRequestAccessDuration")]);
    m_max_request_access_duration_isSet = !json[QString("maxRequestAccessDuration")].isNull() && m_max_request_access_duration_isValid;

    m_number_isValid = ::OpenAPI::fromJsonValue(m_number, json[QString("number")]);
    m_number_isSet = !json[QString("number")].isNull() && m_number_isValid;

    m_protocol_isValid = ::OpenAPI::fromJsonValue(m_protocol, json[QString("protocol")]);
    m_protocol_isSet = !json[QString("protocol")].isNull() && m_protocol_isValid;
}

QString OAIJitNetworkAccessPortRule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJitNetworkAccessPortRule::asJsonObject() const {
    QJsonObject obj;
    if (m_allowed_source_address_prefix_isSet) {
        obj.insert(QString("allowedSourceAddressPrefix"), ::OpenAPI::toJsonValue(m_allowed_source_address_prefix));
    }
    if (m_allowed_source_address_prefixes.size() > 0) {
        obj.insert(QString("allowedSourceAddressPrefixes"), ::OpenAPI::toJsonValue(m_allowed_source_address_prefixes));
    }
    if (m_max_request_access_duration_isSet) {
        obj.insert(QString("maxRequestAccessDuration"), ::OpenAPI::toJsonValue(m_max_request_access_duration));
    }
    if (m_number_isSet) {
        obj.insert(QString("number"), ::OpenAPI::toJsonValue(m_number));
    }
    if (m_protocol_isSet) {
        obj.insert(QString("protocol"), ::OpenAPI::toJsonValue(m_protocol));
    }
    return obj;
}

QString OAIJitNetworkAccessPortRule::getAllowedSourceAddressPrefix() const {
    return m_allowed_source_address_prefix;
}
void OAIJitNetworkAccessPortRule::setAllowedSourceAddressPrefix(const QString &allowed_source_address_prefix) {
    m_allowed_source_address_prefix = allowed_source_address_prefix;
    m_allowed_source_address_prefix_isSet = true;
}

bool OAIJitNetworkAccessPortRule::is_allowed_source_address_prefix_Set() const{
    return m_allowed_source_address_prefix_isSet;
}

bool OAIJitNetworkAccessPortRule::is_allowed_source_address_prefix_Valid() const{
    return m_allowed_source_address_prefix_isValid;
}

QList<QString> OAIJitNetworkAccessPortRule::getAllowedSourceAddressPrefixes() const {
    return m_allowed_source_address_prefixes;
}
void OAIJitNetworkAccessPortRule::setAllowedSourceAddressPrefixes(const QList<QString> &allowed_source_address_prefixes) {
    m_allowed_source_address_prefixes = allowed_source_address_prefixes;
    m_allowed_source_address_prefixes_isSet = true;
}

bool OAIJitNetworkAccessPortRule::is_allowed_source_address_prefixes_Set() const{
    return m_allowed_source_address_prefixes_isSet;
}

bool OAIJitNetworkAccessPortRule::is_allowed_source_address_prefixes_Valid() const{
    return m_allowed_source_address_prefixes_isValid;
}

QString OAIJitNetworkAccessPortRule::getMaxRequestAccessDuration() const {
    return m_max_request_access_duration;
}
void OAIJitNetworkAccessPortRule::setMaxRequestAccessDuration(const QString &max_request_access_duration) {
    m_max_request_access_duration = max_request_access_duration;
    m_max_request_access_duration_isSet = true;
}

bool OAIJitNetworkAccessPortRule::is_max_request_access_duration_Set() const{
    return m_max_request_access_duration_isSet;
}

bool OAIJitNetworkAccessPortRule::is_max_request_access_duration_Valid() const{
    return m_max_request_access_duration_isValid;
}

qint32 OAIJitNetworkAccessPortRule::getNumber() const {
    return m_number;
}
void OAIJitNetworkAccessPortRule::setNumber(const qint32 &number) {
    m_number = number;
    m_number_isSet = true;
}

bool OAIJitNetworkAccessPortRule::is_number_Set() const{
    return m_number_isSet;
}

bool OAIJitNetworkAccessPortRule::is_number_Valid() const{
    return m_number_isValid;
}

QString OAIJitNetworkAccessPortRule::getProtocol() const {
    return m_protocol;
}
void OAIJitNetworkAccessPortRule::setProtocol(const QString &protocol) {
    m_protocol = protocol;
    m_protocol_isSet = true;
}

bool OAIJitNetworkAccessPortRule::is_protocol_Set() const{
    return m_protocol_isSet;
}

bool OAIJitNetworkAccessPortRule::is_protocol_Valid() const{
    return m_protocol_isValid;
}

bool OAIJitNetworkAccessPortRule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allowed_source_address_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allowed_source_address_prefixes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_request_access_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protocol_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJitNetworkAccessPortRule::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_max_request_access_duration_isValid && m_number_isValid && m_protocol_isValid && true;
}

} // namespace OpenAPI
