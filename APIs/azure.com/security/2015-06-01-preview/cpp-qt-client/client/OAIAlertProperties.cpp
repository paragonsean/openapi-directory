/**
 * Security Center
 * API spec for Microsoft.Security (Azure Security Center) resource provider
 *
 * The version of the OpenAPI document: 2015-06-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAlertProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAlertProperties::OAIAlertProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAlertProperties::OAIAlertProperties() {
    this->initializeModel();
}

OAIAlertProperties::~OAIAlertProperties() {}

void OAIAlertProperties::initializeModel() {

    m_action_taken_isSet = false;
    m_action_taken_isValid = false;

    m_alert_display_name_isSet = false;
    m_alert_display_name_isValid = false;

    m_alert_name_isSet = false;
    m_alert_name_isValid = false;

    m_associated_resource_isSet = false;
    m_associated_resource_isValid = false;

    m_can_be_investigated_isSet = false;
    m_can_be_investigated_isValid = false;

    m_compromised_entity_isSet = false;
    m_compromised_entity_isValid = false;

    m_confidence_reasons_isSet = false;
    m_confidence_reasons_isValid = false;

    m_confidence_score_isSet = false;
    m_confidence_score_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_detected_time_utc_isSet = false;
    m_detected_time_utc_isValid = false;

    m_entities_isSet = false;
    m_entities_isValid = false;

    m_extended_properties_isSet = false;
    m_extended_properties_isValid = false;

    m_instance_id_isSet = false;
    m_instance_id_isValid = false;

    m_is_incident_isSet = false;
    m_is_incident_isValid = false;

    m_remediation_steps_isSet = false;
    m_remediation_steps_isValid = false;

    m_reported_severity_isSet = false;
    m_reported_severity_isValid = false;

    m_reported_time_utc_isSet = false;
    m_reported_time_utc_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_subscription_id_isSet = false;
    m_subscription_id_isValid = false;

    m_system_source_isSet = false;
    m_system_source_isValid = false;

    m_vendor_name_isSet = false;
    m_vendor_name_isValid = false;

    m_workspace_arm_id_isSet = false;
    m_workspace_arm_id_isValid = false;
}

void OAIAlertProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAlertProperties::fromJsonObject(QJsonObject json) {

    m_action_taken_isValid = ::OpenAPI::fromJsonValue(m_action_taken, json[QString("actionTaken")]);
    m_action_taken_isSet = !json[QString("actionTaken")].isNull() && m_action_taken_isValid;

    m_alert_display_name_isValid = ::OpenAPI::fromJsonValue(m_alert_display_name, json[QString("alertDisplayName")]);
    m_alert_display_name_isSet = !json[QString("alertDisplayName")].isNull() && m_alert_display_name_isValid;

    m_alert_name_isValid = ::OpenAPI::fromJsonValue(m_alert_name, json[QString("alertName")]);
    m_alert_name_isSet = !json[QString("alertName")].isNull() && m_alert_name_isValid;

    m_associated_resource_isValid = ::OpenAPI::fromJsonValue(m_associated_resource, json[QString("associatedResource")]);
    m_associated_resource_isSet = !json[QString("associatedResource")].isNull() && m_associated_resource_isValid;

    m_can_be_investigated_isValid = ::OpenAPI::fromJsonValue(m_can_be_investigated, json[QString("canBeInvestigated")]);
    m_can_be_investigated_isSet = !json[QString("canBeInvestigated")].isNull() && m_can_be_investigated_isValid;

    m_compromised_entity_isValid = ::OpenAPI::fromJsonValue(m_compromised_entity, json[QString("compromisedEntity")]);
    m_compromised_entity_isSet = !json[QString("compromisedEntity")].isNull() && m_compromised_entity_isValid;

    m_confidence_reasons_isValid = ::OpenAPI::fromJsonValue(m_confidence_reasons, json[QString("confidenceReasons")]);
    m_confidence_reasons_isSet = !json[QString("confidenceReasons")].isNull() && m_confidence_reasons_isValid;

    m_confidence_score_isValid = ::OpenAPI::fromJsonValue(m_confidence_score, json[QString("confidenceScore")]);
    m_confidence_score_isSet = !json[QString("confidenceScore")].isNull() && m_confidence_score_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_detected_time_utc_isValid = ::OpenAPI::fromJsonValue(m_detected_time_utc, json[QString("detectedTimeUtc")]);
    m_detected_time_utc_isSet = !json[QString("detectedTimeUtc")].isNull() && m_detected_time_utc_isValid;

    m_entities_isValid = ::OpenAPI::fromJsonValue(m_entities, json[QString("entities")]);
    m_entities_isSet = !json[QString("entities")].isNull() && m_entities_isValid;

    m_extended_properties_isValid = ::OpenAPI::fromJsonValue(m_extended_properties, json[QString("extendedProperties")]);
    m_extended_properties_isSet = !json[QString("extendedProperties")].isNull() && m_extended_properties_isValid;

    m_instance_id_isValid = ::OpenAPI::fromJsonValue(m_instance_id, json[QString("instanceId")]);
    m_instance_id_isSet = !json[QString("instanceId")].isNull() && m_instance_id_isValid;

    m_is_incident_isValid = ::OpenAPI::fromJsonValue(m_is_incident, json[QString("isIncident")]);
    m_is_incident_isSet = !json[QString("isIncident")].isNull() && m_is_incident_isValid;

    m_remediation_steps_isValid = ::OpenAPI::fromJsonValue(m_remediation_steps, json[QString("remediationSteps")]);
    m_remediation_steps_isSet = !json[QString("remediationSteps")].isNull() && m_remediation_steps_isValid;

    m_reported_severity_isValid = ::OpenAPI::fromJsonValue(m_reported_severity, json[QString("reportedSeverity")]);
    m_reported_severity_isSet = !json[QString("reportedSeverity")].isNull() && m_reported_severity_isValid;

    m_reported_time_utc_isValid = ::OpenAPI::fromJsonValue(m_reported_time_utc, json[QString("reportedTimeUtc")]);
    m_reported_time_utc_isSet = !json[QString("reportedTimeUtc")].isNull() && m_reported_time_utc_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_subscription_id_isValid = ::OpenAPI::fromJsonValue(m_subscription_id, json[QString("subscriptionId")]);
    m_subscription_id_isSet = !json[QString("subscriptionId")].isNull() && m_subscription_id_isValid;

    m_system_source_isValid = ::OpenAPI::fromJsonValue(m_system_source, json[QString("systemSource")]);
    m_system_source_isSet = !json[QString("systemSource")].isNull() && m_system_source_isValid;

    m_vendor_name_isValid = ::OpenAPI::fromJsonValue(m_vendor_name, json[QString("vendorName")]);
    m_vendor_name_isSet = !json[QString("vendorName")].isNull() && m_vendor_name_isValid;

    m_workspace_arm_id_isValid = ::OpenAPI::fromJsonValue(m_workspace_arm_id, json[QString("workspaceArmId")]);
    m_workspace_arm_id_isSet = !json[QString("workspaceArmId")].isNull() && m_workspace_arm_id_isValid;
}

QString OAIAlertProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAlertProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_action_taken_isSet) {
        obj.insert(QString("actionTaken"), ::OpenAPI::toJsonValue(m_action_taken));
    }
    if (m_alert_display_name_isSet) {
        obj.insert(QString("alertDisplayName"), ::OpenAPI::toJsonValue(m_alert_display_name));
    }
    if (m_alert_name_isSet) {
        obj.insert(QString("alertName"), ::OpenAPI::toJsonValue(m_alert_name));
    }
    if (m_associated_resource_isSet) {
        obj.insert(QString("associatedResource"), ::OpenAPI::toJsonValue(m_associated_resource));
    }
    if (m_can_be_investigated_isSet) {
        obj.insert(QString("canBeInvestigated"), ::OpenAPI::toJsonValue(m_can_be_investigated));
    }
    if (m_compromised_entity_isSet) {
        obj.insert(QString("compromisedEntity"), ::OpenAPI::toJsonValue(m_compromised_entity));
    }
    if (m_confidence_reasons.size() > 0) {
        obj.insert(QString("confidenceReasons"), ::OpenAPI::toJsonValue(m_confidence_reasons));
    }
    if (m_confidence_score_isSet) {
        obj.insert(QString("confidenceScore"), ::OpenAPI::toJsonValue(m_confidence_score));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_detected_time_utc_isSet) {
        obj.insert(QString("detectedTimeUtc"), ::OpenAPI::toJsonValue(m_detected_time_utc));
    }
    if (m_entities.size() > 0) {
        obj.insert(QString("entities"), ::OpenAPI::toJsonValue(m_entities));
    }
    if (m_extended_properties.size() > 0) {
        obj.insert(QString("extendedProperties"), ::OpenAPI::toJsonValue(m_extended_properties));
    }
    if (m_instance_id_isSet) {
        obj.insert(QString("instanceId"), ::OpenAPI::toJsonValue(m_instance_id));
    }
    if (m_is_incident_isSet) {
        obj.insert(QString("isIncident"), ::OpenAPI::toJsonValue(m_is_incident));
    }
    if (m_remediation_steps_isSet) {
        obj.insert(QString("remediationSteps"), ::OpenAPI::toJsonValue(m_remediation_steps));
    }
    if (m_reported_severity_isSet) {
        obj.insert(QString("reportedSeverity"), ::OpenAPI::toJsonValue(m_reported_severity));
    }
    if (m_reported_time_utc_isSet) {
        obj.insert(QString("reportedTimeUtc"), ::OpenAPI::toJsonValue(m_reported_time_utc));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_subscription_id_isSet) {
        obj.insert(QString("subscriptionId"), ::OpenAPI::toJsonValue(m_subscription_id));
    }
    if (m_system_source_isSet) {
        obj.insert(QString("systemSource"), ::OpenAPI::toJsonValue(m_system_source));
    }
    if (m_vendor_name_isSet) {
        obj.insert(QString("vendorName"), ::OpenAPI::toJsonValue(m_vendor_name));
    }
    if (m_workspace_arm_id_isSet) {
        obj.insert(QString("workspaceArmId"), ::OpenAPI::toJsonValue(m_workspace_arm_id));
    }
    return obj;
}

QString OAIAlertProperties::getActionTaken() const {
    return m_action_taken;
}
void OAIAlertProperties::setActionTaken(const QString &action_taken) {
    m_action_taken = action_taken;
    m_action_taken_isSet = true;
}

bool OAIAlertProperties::is_action_taken_Set() const{
    return m_action_taken_isSet;
}

bool OAIAlertProperties::is_action_taken_Valid() const{
    return m_action_taken_isValid;
}

QString OAIAlertProperties::getAlertDisplayName() const {
    return m_alert_display_name;
}
void OAIAlertProperties::setAlertDisplayName(const QString &alert_display_name) {
    m_alert_display_name = alert_display_name;
    m_alert_display_name_isSet = true;
}

bool OAIAlertProperties::is_alert_display_name_Set() const{
    return m_alert_display_name_isSet;
}

bool OAIAlertProperties::is_alert_display_name_Valid() const{
    return m_alert_display_name_isValid;
}

QString OAIAlertProperties::getAlertName() const {
    return m_alert_name;
}
void OAIAlertProperties::setAlertName(const QString &alert_name) {
    m_alert_name = alert_name;
    m_alert_name_isSet = true;
}

bool OAIAlertProperties::is_alert_name_Set() const{
    return m_alert_name_isSet;
}

bool OAIAlertProperties::is_alert_name_Valid() const{
    return m_alert_name_isValid;
}

QString OAIAlertProperties::getAssociatedResource() const {
    return m_associated_resource;
}
void OAIAlertProperties::setAssociatedResource(const QString &associated_resource) {
    m_associated_resource = associated_resource;
    m_associated_resource_isSet = true;
}

bool OAIAlertProperties::is_associated_resource_Set() const{
    return m_associated_resource_isSet;
}

bool OAIAlertProperties::is_associated_resource_Valid() const{
    return m_associated_resource_isValid;
}

bool OAIAlertProperties::isCanBeInvestigated() const {
    return m_can_be_investigated;
}
void OAIAlertProperties::setCanBeInvestigated(const bool &can_be_investigated) {
    m_can_be_investigated = can_be_investigated;
    m_can_be_investigated_isSet = true;
}

bool OAIAlertProperties::is_can_be_investigated_Set() const{
    return m_can_be_investigated_isSet;
}

bool OAIAlertProperties::is_can_be_investigated_Valid() const{
    return m_can_be_investigated_isValid;
}

QString OAIAlertProperties::getCompromisedEntity() const {
    return m_compromised_entity;
}
void OAIAlertProperties::setCompromisedEntity(const QString &compromised_entity) {
    m_compromised_entity = compromised_entity;
    m_compromised_entity_isSet = true;
}

bool OAIAlertProperties::is_compromised_entity_Set() const{
    return m_compromised_entity_isSet;
}

bool OAIAlertProperties::is_compromised_entity_Valid() const{
    return m_compromised_entity_isValid;
}

QList<OAIAlertConfidenceReason> OAIAlertProperties::getConfidenceReasons() const {
    return m_confidence_reasons;
}
void OAIAlertProperties::setConfidenceReasons(const QList<OAIAlertConfidenceReason> &confidence_reasons) {
    m_confidence_reasons = confidence_reasons;
    m_confidence_reasons_isSet = true;
}

bool OAIAlertProperties::is_confidence_reasons_Set() const{
    return m_confidence_reasons_isSet;
}

bool OAIAlertProperties::is_confidence_reasons_Valid() const{
    return m_confidence_reasons_isValid;
}

float OAIAlertProperties::getConfidenceScore() const {
    return m_confidence_score;
}
void OAIAlertProperties::setConfidenceScore(const float &confidence_score) {
    m_confidence_score = confidence_score;
    m_confidence_score_isSet = true;
}

bool OAIAlertProperties::is_confidence_score_Set() const{
    return m_confidence_score_isSet;
}

bool OAIAlertProperties::is_confidence_score_Valid() const{
    return m_confidence_score_isValid;
}

QString OAIAlertProperties::getDescription() const {
    return m_description;
}
void OAIAlertProperties::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIAlertProperties::is_description_Set() const{
    return m_description_isSet;
}

bool OAIAlertProperties::is_description_Valid() const{
    return m_description_isValid;
}

QDateTime OAIAlertProperties::getDetectedTimeUtc() const {
    return m_detected_time_utc;
}
void OAIAlertProperties::setDetectedTimeUtc(const QDateTime &detected_time_utc) {
    m_detected_time_utc = detected_time_utc;
    m_detected_time_utc_isSet = true;
}

bool OAIAlertProperties::is_detected_time_utc_Set() const{
    return m_detected_time_utc_isSet;
}

bool OAIAlertProperties::is_detected_time_utc_Valid() const{
    return m_detected_time_utc_isValid;
}

QList<OAIAlertEntity> OAIAlertProperties::getEntities() const {
    return m_entities;
}
void OAIAlertProperties::setEntities(const QList<OAIAlertEntity> &entities) {
    m_entities = entities;
    m_entities_isSet = true;
}

bool OAIAlertProperties::is_entities_Set() const{
    return m_entities_isSet;
}

bool OAIAlertProperties::is_entities_Valid() const{
    return m_entities_isValid;
}

QMap<QString, QJsonValue> OAIAlertProperties::getExtendedProperties() const {
    return m_extended_properties;
}
void OAIAlertProperties::setExtendedProperties(const QMap<QString, QJsonValue> &extended_properties) {
    m_extended_properties = extended_properties;
    m_extended_properties_isSet = true;
}

bool OAIAlertProperties::is_extended_properties_Set() const{
    return m_extended_properties_isSet;
}

bool OAIAlertProperties::is_extended_properties_Valid() const{
    return m_extended_properties_isValid;
}

QString OAIAlertProperties::getInstanceId() const {
    return m_instance_id;
}
void OAIAlertProperties::setInstanceId(const QString &instance_id) {
    m_instance_id = instance_id;
    m_instance_id_isSet = true;
}

bool OAIAlertProperties::is_instance_id_Set() const{
    return m_instance_id_isSet;
}

bool OAIAlertProperties::is_instance_id_Valid() const{
    return m_instance_id_isValid;
}

bool OAIAlertProperties::isIsIncident() const {
    return m_is_incident;
}
void OAIAlertProperties::setIsIncident(const bool &is_incident) {
    m_is_incident = is_incident;
    m_is_incident_isSet = true;
}

bool OAIAlertProperties::is_is_incident_Set() const{
    return m_is_incident_isSet;
}

bool OAIAlertProperties::is_is_incident_Valid() const{
    return m_is_incident_isValid;
}

QString OAIAlertProperties::getRemediationSteps() const {
    return m_remediation_steps;
}
void OAIAlertProperties::setRemediationSteps(const QString &remediation_steps) {
    m_remediation_steps = remediation_steps;
    m_remediation_steps_isSet = true;
}

bool OAIAlertProperties::is_remediation_steps_Set() const{
    return m_remediation_steps_isSet;
}

bool OAIAlertProperties::is_remediation_steps_Valid() const{
    return m_remediation_steps_isValid;
}

QString OAIAlertProperties::getReportedSeverity() const {
    return m_reported_severity;
}
void OAIAlertProperties::setReportedSeverity(const QString &reported_severity) {
    m_reported_severity = reported_severity;
    m_reported_severity_isSet = true;
}

bool OAIAlertProperties::is_reported_severity_Set() const{
    return m_reported_severity_isSet;
}

bool OAIAlertProperties::is_reported_severity_Valid() const{
    return m_reported_severity_isValid;
}

QDateTime OAIAlertProperties::getReportedTimeUtc() const {
    return m_reported_time_utc;
}
void OAIAlertProperties::setReportedTimeUtc(const QDateTime &reported_time_utc) {
    m_reported_time_utc = reported_time_utc;
    m_reported_time_utc_isSet = true;
}

bool OAIAlertProperties::is_reported_time_utc_Set() const{
    return m_reported_time_utc_isSet;
}

bool OAIAlertProperties::is_reported_time_utc_Valid() const{
    return m_reported_time_utc_isValid;
}

QString OAIAlertProperties::getState() const {
    return m_state;
}
void OAIAlertProperties::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIAlertProperties::is_state_Set() const{
    return m_state_isSet;
}

bool OAIAlertProperties::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIAlertProperties::getSubscriptionId() const {
    return m_subscription_id;
}
void OAIAlertProperties::setSubscriptionId(const QString &subscription_id) {
    m_subscription_id = subscription_id;
    m_subscription_id_isSet = true;
}

bool OAIAlertProperties::is_subscription_id_Set() const{
    return m_subscription_id_isSet;
}

bool OAIAlertProperties::is_subscription_id_Valid() const{
    return m_subscription_id_isValid;
}

QString OAIAlertProperties::getSystemSource() const {
    return m_system_source;
}
void OAIAlertProperties::setSystemSource(const QString &system_source) {
    m_system_source = system_source;
    m_system_source_isSet = true;
}

bool OAIAlertProperties::is_system_source_Set() const{
    return m_system_source_isSet;
}

bool OAIAlertProperties::is_system_source_Valid() const{
    return m_system_source_isValid;
}

QString OAIAlertProperties::getVendorName() const {
    return m_vendor_name;
}
void OAIAlertProperties::setVendorName(const QString &vendor_name) {
    m_vendor_name = vendor_name;
    m_vendor_name_isSet = true;
}

bool OAIAlertProperties::is_vendor_name_Set() const{
    return m_vendor_name_isSet;
}

bool OAIAlertProperties::is_vendor_name_Valid() const{
    return m_vendor_name_isValid;
}

QString OAIAlertProperties::getWorkspaceArmId() const {
    return m_workspace_arm_id;
}
void OAIAlertProperties::setWorkspaceArmId(const QString &workspace_arm_id) {
    m_workspace_arm_id = workspace_arm_id;
    m_workspace_arm_id_isSet = true;
}

bool OAIAlertProperties::is_workspace_arm_id_Set() const{
    return m_workspace_arm_id_isSet;
}

bool OAIAlertProperties::is_workspace_arm_id_Valid() const{
    return m_workspace_arm_id_isValid;
}

bool OAIAlertProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action_taken_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_alert_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_alert_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_associated_resource_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_be_investigated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_compromised_entity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_confidence_reasons.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_confidence_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_detected_time_utc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entities.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_extended_properties.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_incident_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remediation_steps_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reported_severity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reported_time_utc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscription_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_system_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vendor_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_workspace_arm_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAlertProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
