/**
 * Security Center
 * API spec for Microsoft.Security (Azure Security Center) resource provider
 *
 * The version of the OpenAPI document: 2015-06-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJitNetworkAccessPolicyProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJitNetworkAccessPolicyProperties::OAIJitNetworkAccessPolicyProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJitNetworkAccessPolicyProperties::OAIJitNetworkAccessPolicyProperties() {
    this->initializeModel();
}

OAIJitNetworkAccessPolicyProperties::~OAIJitNetworkAccessPolicyProperties() {}

void OAIJitNetworkAccessPolicyProperties::initializeModel() {

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_requests_isSet = false;
    m_requests_isValid = false;

    m_virtual_machines_isSet = false;
    m_virtual_machines_isValid = false;
}

void OAIJitNetworkAccessPolicyProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJitNetworkAccessPolicyProperties::fromJsonObject(QJsonObject json) {

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_requests_isValid = ::OpenAPI::fromJsonValue(m_requests, json[QString("requests")]);
    m_requests_isSet = !json[QString("requests")].isNull() && m_requests_isValid;

    m_virtual_machines_isValid = ::OpenAPI::fromJsonValue(m_virtual_machines, json[QString("virtualMachines")]);
    m_virtual_machines_isSet = !json[QString("virtualMachines")].isNull() && m_virtual_machines_isValid;
}

QString OAIJitNetworkAccessPolicyProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJitNetworkAccessPolicyProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_requests.size() > 0) {
        obj.insert(QString("requests"), ::OpenAPI::toJsonValue(m_requests));
    }
    if (m_virtual_machines.size() > 0) {
        obj.insert(QString("virtualMachines"), ::OpenAPI::toJsonValue(m_virtual_machines));
    }
    return obj;
}

QString OAIJitNetworkAccessPolicyProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIJitNetworkAccessPolicyProperties::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIJitNetworkAccessPolicyProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIJitNetworkAccessPolicyProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

QList<OAIJitNetworkAccessRequest> OAIJitNetworkAccessPolicyProperties::getRequests() const {
    return m_requests;
}
void OAIJitNetworkAccessPolicyProperties::setRequests(const QList<OAIJitNetworkAccessRequest> &requests) {
    m_requests = requests;
    m_requests_isSet = true;
}

bool OAIJitNetworkAccessPolicyProperties::is_requests_Set() const{
    return m_requests_isSet;
}

bool OAIJitNetworkAccessPolicyProperties::is_requests_Valid() const{
    return m_requests_isValid;
}

QList<OAIJitNetworkAccessPolicyVirtualMachine> OAIJitNetworkAccessPolicyProperties::getVirtualMachines() const {
    return m_virtual_machines;
}
void OAIJitNetworkAccessPolicyProperties::setVirtualMachines(const QList<OAIJitNetworkAccessPolicyVirtualMachine> &virtual_machines) {
    m_virtual_machines = virtual_machines;
    m_virtual_machines_isSet = true;
}

bool OAIJitNetworkAccessPolicyProperties::is_virtual_machines_Set() const{
    return m_virtual_machines_isSet;
}

bool OAIJitNetworkAccessPolicyProperties::is_virtual_machines_Valid() const{
    return m_virtual_machines_isValid;
}

bool OAIJitNetworkAccessPolicyProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_requests.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_virtual_machines.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJitNetworkAccessPolicyProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_virtual_machines_isValid && true;
}

} // namespace OpenAPI
