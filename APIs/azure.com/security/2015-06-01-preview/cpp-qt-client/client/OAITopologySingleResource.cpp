/**
 * Security Center
 * API spec for Microsoft.Security (Azure Security Center) resource provider
 *
 * The version of the OpenAPI document: 2015-06-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITopologySingleResource.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITopologySingleResource::OAITopologySingleResource(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITopologySingleResource::OAITopologySingleResource() {
    this->initializeModel();
}

OAITopologySingleResource::~OAITopologySingleResource() {}

void OAITopologySingleResource::initializeModel() {

    m_children_isSet = false;
    m_children_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_network_zones_isSet = false;
    m_network_zones_isValid = false;

    m_parents_isSet = false;
    m_parents_isValid = false;

    m_recommendations_exist_isSet = false;
    m_recommendations_exist_isValid = false;

    m_resource_id_isSet = false;
    m_resource_id_isValid = false;

    m_severity_isSet = false;
    m_severity_isValid = false;

    m_topology_score_isSet = false;
    m_topology_score_isValid = false;
}

void OAITopologySingleResource::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITopologySingleResource::fromJsonObject(QJsonObject json) {

    m_children_isValid = ::OpenAPI::fromJsonValue(m_children, json[QString("children")]);
    m_children_isSet = !json[QString("children")].isNull() && m_children_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_network_zones_isValid = ::OpenAPI::fromJsonValue(m_network_zones, json[QString("networkZones")]);
    m_network_zones_isSet = !json[QString("networkZones")].isNull() && m_network_zones_isValid;

    m_parents_isValid = ::OpenAPI::fromJsonValue(m_parents, json[QString("parents")]);
    m_parents_isSet = !json[QString("parents")].isNull() && m_parents_isValid;

    m_recommendations_exist_isValid = ::OpenAPI::fromJsonValue(m_recommendations_exist, json[QString("recommendationsExist")]);
    m_recommendations_exist_isSet = !json[QString("recommendationsExist")].isNull() && m_recommendations_exist_isValid;

    m_resource_id_isValid = ::OpenAPI::fromJsonValue(m_resource_id, json[QString("resourceId")]);
    m_resource_id_isSet = !json[QString("resourceId")].isNull() && m_resource_id_isValid;

    m_severity_isValid = ::OpenAPI::fromJsonValue(m_severity, json[QString("severity")]);
    m_severity_isSet = !json[QString("severity")].isNull() && m_severity_isValid;

    m_topology_score_isValid = ::OpenAPI::fromJsonValue(m_topology_score, json[QString("topologyScore")]);
    m_topology_score_isSet = !json[QString("topologyScore")].isNull() && m_topology_score_isValid;
}

QString OAITopologySingleResource::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITopologySingleResource::asJsonObject() const {
    QJsonObject obj;
    if (m_children.size() > 0) {
        obj.insert(QString("children"), ::OpenAPI::toJsonValue(m_children));
    }
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_network_zones_isSet) {
        obj.insert(QString("networkZones"), ::OpenAPI::toJsonValue(m_network_zones));
    }
    if (m_parents.size() > 0) {
        obj.insert(QString("parents"), ::OpenAPI::toJsonValue(m_parents));
    }
    if (m_recommendations_exist_isSet) {
        obj.insert(QString("recommendationsExist"), ::OpenAPI::toJsonValue(m_recommendations_exist));
    }
    if (m_resource_id_isSet) {
        obj.insert(QString("resourceId"), ::OpenAPI::toJsonValue(m_resource_id));
    }
    if (m_severity_isSet) {
        obj.insert(QString("severity"), ::OpenAPI::toJsonValue(m_severity));
    }
    if (m_topology_score_isSet) {
        obj.insert(QString("topologyScore"), ::OpenAPI::toJsonValue(m_topology_score));
    }
    return obj;
}

QList<OAITopologySingleResourceChild> OAITopologySingleResource::getChildren() const {
    return m_children;
}
void OAITopologySingleResource::setChildren(const QList<OAITopologySingleResourceChild> &children) {
    m_children = children;
    m_children_isSet = true;
}

bool OAITopologySingleResource::is_children_Set() const{
    return m_children_isSet;
}

bool OAITopologySingleResource::is_children_Valid() const{
    return m_children_isValid;
}

QString OAITopologySingleResource::getLocation() const {
    return m_location;
}
void OAITopologySingleResource::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAITopologySingleResource::is_location_Set() const{
    return m_location_isSet;
}

bool OAITopologySingleResource::is_location_Valid() const{
    return m_location_isValid;
}

QString OAITopologySingleResource::getNetworkZones() const {
    return m_network_zones;
}
void OAITopologySingleResource::setNetworkZones(const QString &network_zones) {
    m_network_zones = network_zones;
    m_network_zones_isSet = true;
}

bool OAITopologySingleResource::is_network_zones_Set() const{
    return m_network_zones_isSet;
}

bool OAITopologySingleResource::is_network_zones_Valid() const{
    return m_network_zones_isValid;
}

QList<OAITopologySingleResourceParent> OAITopologySingleResource::getParents() const {
    return m_parents;
}
void OAITopologySingleResource::setParents(const QList<OAITopologySingleResourceParent> &parents) {
    m_parents = parents;
    m_parents_isSet = true;
}

bool OAITopologySingleResource::is_parents_Set() const{
    return m_parents_isSet;
}

bool OAITopologySingleResource::is_parents_Valid() const{
    return m_parents_isValid;
}

bool OAITopologySingleResource::isRecommendationsExist() const {
    return m_recommendations_exist;
}
void OAITopologySingleResource::setRecommendationsExist(const bool &recommendations_exist) {
    m_recommendations_exist = recommendations_exist;
    m_recommendations_exist_isSet = true;
}

bool OAITopologySingleResource::is_recommendations_exist_Set() const{
    return m_recommendations_exist_isSet;
}

bool OAITopologySingleResource::is_recommendations_exist_Valid() const{
    return m_recommendations_exist_isValid;
}

QString OAITopologySingleResource::getResourceId() const {
    return m_resource_id;
}
void OAITopologySingleResource::setResourceId(const QString &resource_id) {
    m_resource_id = resource_id;
    m_resource_id_isSet = true;
}

bool OAITopologySingleResource::is_resource_id_Set() const{
    return m_resource_id_isSet;
}

bool OAITopologySingleResource::is_resource_id_Valid() const{
    return m_resource_id_isValid;
}

QString OAITopologySingleResource::getSeverity() const {
    return m_severity;
}
void OAITopologySingleResource::setSeverity(const QString &severity) {
    m_severity = severity;
    m_severity_isSet = true;
}

bool OAITopologySingleResource::is_severity_Set() const{
    return m_severity_isSet;
}

bool OAITopologySingleResource::is_severity_Valid() const{
    return m_severity_isValid;
}

qint32 OAITopologySingleResource::getTopologyScore() const {
    return m_topology_score;
}
void OAITopologySingleResource::setTopologyScore(const qint32 &topology_score) {
    m_topology_score = topology_score;
    m_topology_score_isSet = true;
}

bool OAITopologySingleResource::is_topology_score_Set() const{
    return m_topology_score_isSet;
}

bool OAITopologySingleResource::is_topology_score_Valid() const{
    return m_topology_score_isValid;
}

bool OAITopologySingleResource::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_children.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_zones_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parents.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_recommendations_exist_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_severity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_topology_score_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITopologySingleResource::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
