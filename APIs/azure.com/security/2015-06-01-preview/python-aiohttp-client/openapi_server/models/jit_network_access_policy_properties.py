# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.jit_network_access_policy_virtual_machine import JitNetworkAccessPolicyVirtualMachine
from openapi_server.models.jit_network_access_request import JitNetworkAccessRequest
from openapi_server import util


class JitNetworkAccessPolicyProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, provisioning_state: str=None, requests: List[JitNetworkAccessRequest]=None, virtual_machines: List[JitNetworkAccessPolicyVirtualMachine]=None):
        """JitNetworkAccessPolicyProperties - a model defined in OpenAPI

        :param provisioning_state: The provisioning_state of this JitNetworkAccessPolicyProperties.
        :param requests: The requests of this JitNetworkAccessPolicyProperties.
        :param virtual_machines: The virtual_machines of this JitNetworkAccessPolicyProperties.
        """
        self.openapi_types = {
            'provisioning_state': str,
            'requests': List[JitNetworkAccessRequest],
            'virtual_machines': List[JitNetworkAccessPolicyVirtualMachine]
        }

        self.attribute_map = {
            'provisioning_state': 'provisioningState',
            'requests': 'requests',
            'virtual_machines': 'virtualMachines'
        }

        self._provisioning_state = provisioning_state
        self._requests = requests
        self._virtual_machines = virtual_machines

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JitNetworkAccessPolicyProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JitNetworkAccessPolicyProperties of this JitNetworkAccessPolicyProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this JitNetworkAccessPolicyProperties.

        Gets the provisioning state of the Just-in-Time policy.

        :return: The provisioning_state of this JitNetworkAccessPolicyProperties.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this JitNetworkAccessPolicyProperties.

        Gets the provisioning state of the Just-in-Time policy.

        :param provisioning_state: The provisioning_state of this JitNetworkAccessPolicyProperties.
        :type provisioning_state: str
        """

        self._provisioning_state = provisioning_state

    @property
    def requests(self):
        """Gets the requests of this JitNetworkAccessPolicyProperties.


        :return: The requests of this JitNetworkAccessPolicyProperties.
        :rtype: List[JitNetworkAccessRequest]
        """
        return self._requests

    @requests.setter
    def requests(self, requests):
        """Sets the requests of this JitNetworkAccessPolicyProperties.


        :param requests: The requests of this JitNetworkAccessPolicyProperties.
        :type requests: List[JitNetworkAccessRequest]
        """

        self._requests = requests

    @property
    def virtual_machines(self):
        """Gets the virtual_machines of this JitNetworkAccessPolicyProperties.

        Configurations for Microsoft.Compute/virtualMachines resource type.

        :return: The virtual_machines of this JitNetworkAccessPolicyProperties.
        :rtype: List[JitNetworkAccessPolicyVirtualMachine]
        """
        return self._virtual_machines

    @virtual_machines.setter
    def virtual_machines(self, virtual_machines):
        """Sets the virtual_machines of this JitNetworkAccessPolicyProperties.

        Configurations for Microsoft.Compute/virtualMachines resource type.

        :param virtual_machines: The virtual_machines of this JitNetworkAccessPolicyProperties.
        :type virtual_machines: List[JitNetworkAccessPolicyVirtualMachine]
        """
        if virtual_machines is None:
            raise ValueError("Invalid value for `virtual_machines`, must not be `None`")

        self._virtual_machines = virtual_machines
