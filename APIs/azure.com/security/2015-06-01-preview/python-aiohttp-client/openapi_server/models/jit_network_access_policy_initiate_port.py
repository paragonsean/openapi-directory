# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class JitNetworkAccessPolicyInitiatePort(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allowed_source_address_prefix: str=None, end_time_utc: datetime=None, number: int=None):
        """JitNetworkAccessPolicyInitiatePort - a model defined in OpenAPI

        :param allowed_source_address_prefix: The allowed_source_address_prefix of this JitNetworkAccessPolicyInitiatePort.
        :param end_time_utc: The end_time_utc of this JitNetworkAccessPolicyInitiatePort.
        :param number: The number of this JitNetworkAccessPolicyInitiatePort.
        """
        self.openapi_types = {
            'allowed_source_address_prefix': str,
            'end_time_utc': datetime,
            'number': int
        }

        self.attribute_map = {
            'allowed_source_address_prefix': 'allowedSourceAddressPrefix',
            'end_time_utc': 'endTimeUtc',
            'number': 'number'
        }

        self._allowed_source_address_prefix = allowed_source_address_prefix
        self._end_time_utc = end_time_utc
        self._number = number

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JitNetworkAccessPolicyInitiatePort':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JitNetworkAccessPolicyInitiatePort of this JitNetworkAccessPolicyInitiatePort.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allowed_source_address_prefix(self):
        """Gets the allowed_source_address_prefix of this JitNetworkAccessPolicyInitiatePort.

        Source of the allowed traffic. If omitted, the request will be for the source IP address of the initiate request.

        :return: The allowed_source_address_prefix of this JitNetworkAccessPolicyInitiatePort.
        :rtype: str
        """
        return self._allowed_source_address_prefix

    @allowed_source_address_prefix.setter
    def allowed_source_address_prefix(self, allowed_source_address_prefix):
        """Sets the allowed_source_address_prefix of this JitNetworkAccessPolicyInitiatePort.

        Source of the allowed traffic. If omitted, the request will be for the source IP address of the initiate request.

        :param allowed_source_address_prefix: The allowed_source_address_prefix of this JitNetworkAccessPolicyInitiatePort.
        :type allowed_source_address_prefix: str
        """

        self._allowed_source_address_prefix = allowed_source_address_prefix

    @property
    def end_time_utc(self):
        """Gets the end_time_utc of this JitNetworkAccessPolicyInitiatePort.

        The time to close the request in UTC

        :return: The end_time_utc of this JitNetworkAccessPolicyInitiatePort.
        :rtype: datetime
        """
        return self._end_time_utc

    @end_time_utc.setter
    def end_time_utc(self, end_time_utc):
        """Sets the end_time_utc of this JitNetworkAccessPolicyInitiatePort.

        The time to close the request in UTC

        :param end_time_utc: The end_time_utc of this JitNetworkAccessPolicyInitiatePort.
        :type end_time_utc: datetime
        """
        if end_time_utc is None:
            raise ValueError("Invalid value for `end_time_utc`, must not be `None`")

        self._end_time_utc = end_time_utc

    @property
    def number(self):
        """Gets the number of this JitNetworkAccessPolicyInitiatePort.


        :return: The number of this JitNetworkAccessPolicyInitiatePort.
        :rtype: int
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this JitNetworkAccessPolicyInitiatePort.


        :param number: The number of this JitNetworkAccessPolicyInitiatePort.
        :type number: int
        """
        if number is None:
            raise ValueError("Invalid value for `number`, must not be `None`")
        if number is not None and number > 65535:
            raise ValueError("Invalid value for `number`, must be a value less than or equal to `65535`")
        if number is not None and number < 0:
            raise ValueError("Invalid value for `number`, must be a value greater than or equal to `0`")

        self._number = number
