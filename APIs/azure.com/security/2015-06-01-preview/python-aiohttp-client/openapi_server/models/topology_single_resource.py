# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.topology_single_resource_child import TopologySingleResourceChild
from openapi_server.models.topology_single_resource_parent import TopologySingleResourceParent
from openapi_server import util


class TopologySingleResource(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, children: List[TopologySingleResourceChild]=None, location: str=None, network_zones: str=None, parents: List[TopologySingleResourceParent]=None, recommendations_exist: bool=None, resource_id: str=None, severity: str=None, topology_score: int=None):
        """TopologySingleResource - a model defined in OpenAPI

        :param children: The children of this TopologySingleResource.
        :param location: The location of this TopologySingleResource.
        :param network_zones: The network_zones of this TopologySingleResource.
        :param parents: The parents of this TopologySingleResource.
        :param recommendations_exist: The recommendations_exist of this TopologySingleResource.
        :param resource_id: The resource_id of this TopologySingleResource.
        :param severity: The severity of this TopologySingleResource.
        :param topology_score: The topology_score of this TopologySingleResource.
        """
        self.openapi_types = {
            'children': List[TopologySingleResourceChild],
            'location': str,
            'network_zones': str,
            'parents': List[TopologySingleResourceParent],
            'recommendations_exist': bool,
            'resource_id': str,
            'severity': str,
            'topology_score': int
        }

        self.attribute_map = {
            'children': 'children',
            'location': 'location',
            'network_zones': 'networkZones',
            'parents': 'parents',
            'recommendations_exist': 'recommendationsExist',
            'resource_id': 'resourceId',
            'severity': 'severity',
            'topology_score': 'topologyScore'
        }

        self._children = children
        self._location = location
        self._network_zones = network_zones
        self._parents = parents
        self._recommendations_exist = recommendations_exist
        self._resource_id = resource_id
        self._severity = severity
        self._topology_score = topology_score

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TopologySingleResource':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TopologySingleResource of this TopologySingleResource.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def children(self):
        """Gets the children of this TopologySingleResource.

        Azure resources connected to this resource which are in lower level in the topology view

        :return: The children of this TopologySingleResource.
        :rtype: List[TopologySingleResourceChild]
        """
        return self._children

    @children.setter
    def children(self, children):
        """Sets the children of this TopologySingleResource.

        Azure resources connected to this resource which are in lower level in the topology view

        :param children: The children of this TopologySingleResource.
        :type children: List[TopologySingleResourceChild]
        """

        self._children = children

    @property
    def location(self):
        """Gets the location of this TopologySingleResource.

        The location of this resource

        :return: The location of this TopologySingleResource.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this TopologySingleResource.

        The location of this resource

        :param location: The location of this TopologySingleResource.
        :type location: str
        """

        self._location = location

    @property
    def network_zones(self):
        """Gets the network_zones of this TopologySingleResource.

        Indicates the resource connectivity level to the Internet (InternetFacing, Internal ,etc.)

        :return: The network_zones of this TopologySingleResource.
        :rtype: str
        """
        return self._network_zones

    @network_zones.setter
    def network_zones(self, network_zones):
        """Sets the network_zones of this TopologySingleResource.

        Indicates the resource connectivity level to the Internet (InternetFacing, Internal ,etc.)

        :param network_zones: The network_zones of this TopologySingleResource.
        :type network_zones: str
        """

        self._network_zones = network_zones

    @property
    def parents(self):
        """Gets the parents of this TopologySingleResource.

        Azure resources connected to this resource which are in higher level in the topology view

        :return: The parents of this TopologySingleResource.
        :rtype: List[TopologySingleResourceParent]
        """
        return self._parents

    @parents.setter
    def parents(self, parents):
        """Sets the parents of this TopologySingleResource.

        Azure resources connected to this resource which are in higher level in the topology view

        :param parents: The parents of this TopologySingleResource.
        :type parents: List[TopologySingleResourceParent]
        """

        self._parents = parents

    @property
    def recommendations_exist(self):
        """Gets the recommendations_exist of this TopologySingleResource.

        Indicates if the resource has security recommendations

        :return: The recommendations_exist of this TopologySingleResource.
        :rtype: bool
        """
        return self._recommendations_exist

    @recommendations_exist.setter
    def recommendations_exist(self, recommendations_exist):
        """Sets the recommendations_exist of this TopologySingleResource.

        Indicates if the resource has security recommendations

        :param recommendations_exist: The recommendations_exist of this TopologySingleResource.
        :type recommendations_exist: bool
        """

        self._recommendations_exist = recommendations_exist

    @property
    def resource_id(self):
        """Gets the resource_id of this TopologySingleResource.

        Azure resource id

        :return: The resource_id of this TopologySingleResource.
        :rtype: str
        """
        return self._resource_id

    @resource_id.setter
    def resource_id(self, resource_id):
        """Sets the resource_id of this TopologySingleResource.

        Azure resource id

        :param resource_id: The resource_id of this TopologySingleResource.
        :type resource_id: str
        """

        self._resource_id = resource_id

    @property
    def severity(self):
        """Gets the severity of this TopologySingleResource.

        The security severity of the resource

        :return: The severity of this TopologySingleResource.
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this TopologySingleResource.

        The security severity of the resource

        :param severity: The severity of this TopologySingleResource.
        :type severity: str
        """

        self._severity = severity

    @property
    def topology_score(self):
        """Gets the topology_score of this TopologySingleResource.

        Score of the resource based on its security severity

        :return: The topology_score of this TopologySingleResource.
        :rtype: int
        """
        return self._topology_score

    @topology_score.setter
    def topology_score(self, topology_score):
        """Sets the topology_score of this TopologySingleResource.

        Score of the resource based on its security severity

        :param topology_score: The topology_score of this TopologySingleResource.
        :type topology_score: int
        """

        self._topology_score = topology_score
