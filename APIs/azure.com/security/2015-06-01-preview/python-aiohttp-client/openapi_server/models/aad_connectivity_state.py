# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AadConnectivityState(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, connectivity_state: str=None):
        """AadConnectivityState - a model defined in OpenAPI

        :param connectivity_state: The connectivity_state of this AadConnectivityState.
        """
        self.openapi_types = {
            'connectivity_state': str
        }

        self.attribute_map = {
            'connectivity_state': 'connectivityState'
        }

        self._connectivity_state = connectivity_state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AadConnectivityState':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AadConnectivityState of this AadConnectivityState.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def connectivity_state(self):
        """Gets the connectivity_state of this AadConnectivityState.


        :return: The connectivity_state of this AadConnectivityState.
        :rtype: str
        """
        return self._connectivity_state

    @connectivity_state.setter
    def connectivity_state(self, connectivity_state):
        """Sets the connectivity_state of this AadConnectivityState.


        :param connectivity_state: The connectivity_state of this AadConnectivityState.
        :type connectivity_state: str
        """
        allowed_values = ["Discovered", "NotLicensed", "Connected"]  # noqa: E501
        if connectivity_state not in allowed_values:
            raise ValueError(
                "Invalid value for `connectivity_state` ({0}), must be one of {1}"
                .format(connectivity_state, allowed_values)
            )

        self._connectivity_state = connectivity_state
