# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.connected_workspace import ConnectedWorkspace
from openapi_server import util


class CefSolutionProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, agent: str=None, hostname: str=None, last_event_received: str=None, device_type: str=None, device_vendor: str=None, workspace: ConnectedWorkspace=None):
        """CefSolutionProperties - a model defined in OpenAPI

        :param agent: The agent of this CefSolutionProperties.
        :param hostname: The hostname of this CefSolutionProperties.
        :param last_event_received: The last_event_received of this CefSolutionProperties.
        :param device_type: The device_type of this CefSolutionProperties.
        :param device_vendor: The device_vendor of this CefSolutionProperties.
        :param workspace: The workspace of this CefSolutionProperties.
        """
        self.openapi_types = {
            'agent': str,
            'hostname': str,
            'last_event_received': str,
            'device_type': str,
            'device_vendor': str,
            'workspace': ConnectedWorkspace
        }

        self.attribute_map = {
            'agent': 'agent',
            'hostname': 'hostname',
            'last_event_received': 'lastEventReceived',
            'device_type': 'deviceType',
            'device_vendor': 'deviceVendor',
            'workspace': 'workspace'
        }

        self._agent = agent
        self._hostname = hostname
        self._last_event_received = last_event_received
        self._device_type = device_type
        self._device_vendor = device_vendor
        self._workspace = workspace

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CefSolutionProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CefSolutionProperties of this CefSolutionProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def agent(self):
        """Gets the agent of this CefSolutionProperties.


        :return: The agent of this CefSolutionProperties.
        :rtype: str
        """
        return self._agent

    @agent.setter
    def agent(self, agent):
        """Sets the agent of this CefSolutionProperties.


        :param agent: The agent of this CefSolutionProperties.
        :type agent: str
        """

        self._agent = agent

    @property
    def hostname(self):
        """Gets the hostname of this CefSolutionProperties.


        :return: The hostname of this CefSolutionProperties.
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this CefSolutionProperties.


        :param hostname: The hostname of this CefSolutionProperties.
        :type hostname: str
        """

        self._hostname = hostname

    @property
    def last_event_received(self):
        """Gets the last_event_received of this CefSolutionProperties.


        :return: The last_event_received of this CefSolutionProperties.
        :rtype: str
        """
        return self._last_event_received

    @last_event_received.setter
    def last_event_received(self, last_event_received):
        """Sets the last_event_received of this CefSolutionProperties.


        :param last_event_received: The last_event_received of this CefSolutionProperties.
        :type last_event_received: str
        """

        self._last_event_received = last_event_received

    @property
    def device_type(self):
        """Gets the device_type of this CefSolutionProperties.


        :return: The device_type of this CefSolutionProperties.
        :rtype: str
        """
        return self._device_type

    @device_type.setter
    def device_type(self, device_type):
        """Sets the device_type of this CefSolutionProperties.


        :param device_type: The device_type of this CefSolutionProperties.
        :type device_type: str
        """

        self._device_type = device_type

    @property
    def device_vendor(self):
        """Gets the device_vendor of this CefSolutionProperties.


        :return: The device_vendor of this CefSolutionProperties.
        :rtype: str
        """
        return self._device_vendor

    @device_vendor.setter
    def device_vendor(self, device_vendor):
        """Sets the device_vendor of this CefSolutionProperties.


        :param device_vendor: The device_vendor of this CefSolutionProperties.
        :type device_vendor: str
        """

        self._device_vendor = device_vendor

    @property
    def workspace(self):
        """Gets the workspace of this CefSolutionProperties.


        :return: The workspace of this CefSolutionProperties.
        :rtype: ConnectedWorkspace
        """
        return self._workspace

    @workspace.setter
    def workspace(self, workspace):
        """Sets the workspace of this CefSolutionProperties.


        :param workspace: The workspace of this CefSolutionProperties.
        :type workspace: ConnectedWorkspace
        """

        self._workspace = workspace
