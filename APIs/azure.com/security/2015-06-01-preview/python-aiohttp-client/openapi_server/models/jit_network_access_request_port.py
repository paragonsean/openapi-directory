# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class JitNetworkAccessRequestPort(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allowed_source_address_prefix: str=None, allowed_source_address_prefixes: List[str]=None, end_time_utc: datetime=None, number: int=None, status: str=None, status_reason: str=None):
        """JitNetworkAccessRequestPort - a model defined in OpenAPI

        :param allowed_source_address_prefix: The allowed_source_address_prefix of this JitNetworkAccessRequestPort.
        :param allowed_source_address_prefixes: The allowed_source_address_prefixes of this JitNetworkAccessRequestPort.
        :param end_time_utc: The end_time_utc of this JitNetworkAccessRequestPort.
        :param number: The number of this JitNetworkAccessRequestPort.
        :param status: The status of this JitNetworkAccessRequestPort.
        :param status_reason: The status_reason of this JitNetworkAccessRequestPort.
        """
        self.openapi_types = {
            'allowed_source_address_prefix': str,
            'allowed_source_address_prefixes': List[str],
            'end_time_utc': datetime,
            'number': int,
            'status': str,
            'status_reason': str
        }

        self.attribute_map = {
            'allowed_source_address_prefix': 'allowedSourceAddressPrefix',
            'allowed_source_address_prefixes': 'allowedSourceAddressPrefixes',
            'end_time_utc': 'endTimeUtc',
            'number': 'number',
            'status': 'status',
            'status_reason': 'statusReason'
        }

        self._allowed_source_address_prefix = allowed_source_address_prefix
        self._allowed_source_address_prefixes = allowed_source_address_prefixes
        self._end_time_utc = end_time_utc
        self._number = number
        self._status = status
        self._status_reason = status_reason

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JitNetworkAccessRequestPort':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JitNetworkAccessRequestPort of this JitNetworkAccessRequestPort.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allowed_source_address_prefix(self):
        """Gets the allowed_source_address_prefix of this JitNetworkAccessRequestPort.

        Mutually exclusive with the \"allowedSourceAddressPrefixes\" parameter. Should be an IP address or CIDR, for example \"192.168.0.3\" or \"192.168.0.0/16\".

        :return: The allowed_source_address_prefix of this JitNetworkAccessRequestPort.
        :rtype: str
        """
        return self._allowed_source_address_prefix

    @allowed_source_address_prefix.setter
    def allowed_source_address_prefix(self, allowed_source_address_prefix):
        """Sets the allowed_source_address_prefix of this JitNetworkAccessRequestPort.

        Mutually exclusive with the \"allowedSourceAddressPrefixes\" parameter. Should be an IP address or CIDR, for example \"192.168.0.3\" or \"192.168.0.0/16\".

        :param allowed_source_address_prefix: The allowed_source_address_prefix of this JitNetworkAccessRequestPort.
        :type allowed_source_address_prefix: str
        """

        self._allowed_source_address_prefix = allowed_source_address_prefix

    @property
    def allowed_source_address_prefixes(self):
        """Gets the allowed_source_address_prefixes of this JitNetworkAccessRequestPort.

        Mutually exclusive with the \"allowedSourceAddressPrefix\" parameter.

        :return: The allowed_source_address_prefixes of this JitNetworkAccessRequestPort.
        :rtype: List[str]
        """
        return self._allowed_source_address_prefixes

    @allowed_source_address_prefixes.setter
    def allowed_source_address_prefixes(self, allowed_source_address_prefixes):
        """Sets the allowed_source_address_prefixes of this JitNetworkAccessRequestPort.

        Mutually exclusive with the \"allowedSourceAddressPrefix\" parameter.

        :param allowed_source_address_prefixes: The allowed_source_address_prefixes of this JitNetworkAccessRequestPort.
        :type allowed_source_address_prefixes: List[str]
        """

        self._allowed_source_address_prefixes = allowed_source_address_prefixes

    @property
    def end_time_utc(self):
        """Gets the end_time_utc of this JitNetworkAccessRequestPort.

        The date & time at which the request ends in UTC

        :return: The end_time_utc of this JitNetworkAccessRequestPort.
        :rtype: datetime
        """
        return self._end_time_utc

    @end_time_utc.setter
    def end_time_utc(self, end_time_utc):
        """Sets the end_time_utc of this JitNetworkAccessRequestPort.

        The date & time at which the request ends in UTC

        :param end_time_utc: The end_time_utc of this JitNetworkAccessRequestPort.
        :type end_time_utc: datetime
        """
        if end_time_utc is None:
            raise ValueError("Invalid value for `end_time_utc`, must not be `None`")

        self._end_time_utc = end_time_utc

    @property
    def number(self):
        """Gets the number of this JitNetworkAccessRequestPort.


        :return: The number of this JitNetworkAccessRequestPort.
        :rtype: int
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this JitNetworkAccessRequestPort.


        :param number: The number of this JitNetworkAccessRequestPort.
        :type number: int
        """
        if number is None:
            raise ValueError("Invalid value for `number`, must not be `None`")
        if number is not None and number > 65535:
            raise ValueError("Invalid value for `number`, must be a value less than or equal to `65535`")
        if number is not None and number < 0:
            raise ValueError("Invalid value for `number`, must be a value greater than or equal to `0`")

        self._number = number

    @property
    def status(self):
        """Gets the status of this JitNetworkAccessRequestPort.

        The status of the port

        :return: The status of this JitNetworkAccessRequestPort.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this JitNetworkAccessRequestPort.

        The status of the port

        :param status: The status of this JitNetworkAccessRequestPort.
        :type status: str
        """
        allowed_values = ["Revoked", "Initiated"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def status_reason(self):
        """Gets the status_reason of this JitNetworkAccessRequestPort.

        A description of why the `status` has its value

        :return: The status_reason of this JitNetworkAccessRequestPort.
        :rtype: str
        """
        return self._status_reason

    @status_reason.setter
    def status_reason(self, status_reason):
        """Sets the status_reason of this JitNetworkAccessRequestPort.

        A description of why the `status` has its value

        :param status_reason: The status_reason of this JitNetworkAccessRequestPort.
        :type status_reason: str
        """
        allowed_values = ["Expired", "UserRequested", "NewerRequestInitiated"]  # noqa: E501
        if status_reason not in allowed_values:
            raise ValueError(
                "Invalid value for `status_reason` ({0}), must be one of {1}"
                .format(status_reason, allowed_values)
            )

        self._status_reason = status_reason
