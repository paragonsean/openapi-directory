# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.jit_network_access_request_virtual_machine import JitNetworkAccessRequestVirtualMachine
from openapi_server import util


class JitNetworkAccessRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, requestor: str=None, start_time_utc: datetime=None, virtual_machines: List[JitNetworkAccessRequestVirtualMachine]=None):
        """JitNetworkAccessRequest - a model defined in OpenAPI

        :param requestor: The requestor of this JitNetworkAccessRequest.
        :param start_time_utc: The start_time_utc of this JitNetworkAccessRequest.
        :param virtual_machines: The virtual_machines of this JitNetworkAccessRequest.
        """
        self.openapi_types = {
            'requestor': str,
            'start_time_utc': datetime,
            'virtual_machines': List[JitNetworkAccessRequestVirtualMachine]
        }

        self.attribute_map = {
            'requestor': 'requestor',
            'start_time_utc': 'startTimeUtc',
            'virtual_machines': 'virtualMachines'
        }

        self._requestor = requestor
        self._start_time_utc = start_time_utc
        self._virtual_machines = virtual_machines

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JitNetworkAccessRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JitNetworkAccessRequest of this JitNetworkAccessRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def requestor(self):
        """Gets the requestor of this JitNetworkAccessRequest.

        The identity of the person who made the request

        :return: The requestor of this JitNetworkAccessRequest.
        :rtype: str
        """
        return self._requestor

    @requestor.setter
    def requestor(self, requestor):
        """Sets the requestor of this JitNetworkAccessRequest.

        The identity of the person who made the request

        :param requestor: The requestor of this JitNetworkAccessRequest.
        :type requestor: str
        """
        if requestor is None:
            raise ValueError("Invalid value for `requestor`, must not be `None`")

        self._requestor = requestor

    @property
    def start_time_utc(self):
        """Gets the start_time_utc of this JitNetworkAccessRequest.

        The start time of the request in UTC

        :return: The start_time_utc of this JitNetworkAccessRequest.
        :rtype: datetime
        """
        return self._start_time_utc

    @start_time_utc.setter
    def start_time_utc(self, start_time_utc):
        """Sets the start_time_utc of this JitNetworkAccessRequest.

        The start time of the request in UTC

        :param start_time_utc: The start_time_utc of this JitNetworkAccessRequest.
        :type start_time_utc: datetime
        """
        if start_time_utc is None:
            raise ValueError("Invalid value for `start_time_utc`, must not be `None`")

        self._start_time_utc = start_time_utc

    @property
    def virtual_machines(self):
        """Gets the virtual_machines of this JitNetworkAccessRequest.


        :return: The virtual_machines of this JitNetworkAccessRequest.
        :rtype: List[JitNetworkAccessRequestVirtualMachine]
        """
        return self._virtual_machines

    @virtual_machines.setter
    def virtual_machines(self, virtual_machines):
        """Sets the virtual_machines of this JitNetworkAccessRequest.


        :param virtual_machines: The virtual_machines of this JitNetworkAccessRequest.
        :type virtual_machines: List[JitNetworkAccessRequestVirtualMachine]
        """
        if virtual_machines is None:
            raise ValueError("Invalid value for `virtual_machines`, must not be `None`")

        self._virtual_machines = virtual_machines
