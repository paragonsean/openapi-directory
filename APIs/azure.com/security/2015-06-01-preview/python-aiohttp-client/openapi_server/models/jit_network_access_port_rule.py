# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class JitNetworkAccessPortRule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allowed_source_address_prefix: str=None, allowed_source_address_prefixes: List[str]=None, max_request_access_duration: str=None, number: int=None, protocol: str=None):
        """JitNetworkAccessPortRule - a model defined in OpenAPI

        :param allowed_source_address_prefix: The allowed_source_address_prefix of this JitNetworkAccessPortRule.
        :param allowed_source_address_prefixes: The allowed_source_address_prefixes of this JitNetworkAccessPortRule.
        :param max_request_access_duration: The max_request_access_duration of this JitNetworkAccessPortRule.
        :param number: The number of this JitNetworkAccessPortRule.
        :param protocol: The protocol of this JitNetworkAccessPortRule.
        """
        self.openapi_types = {
            'allowed_source_address_prefix': str,
            'allowed_source_address_prefixes': List[str],
            'max_request_access_duration': str,
            'number': int,
            'protocol': str
        }

        self.attribute_map = {
            'allowed_source_address_prefix': 'allowedSourceAddressPrefix',
            'allowed_source_address_prefixes': 'allowedSourceAddressPrefixes',
            'max_request_access_duration': 'maxRequestAccessDuration',
            'number': 'number',
            'protocol': 'protocol'
        }

        self._allowed_source_address_prefix = allowed_source_address_prefix
        self._allowed_source_address_prefixes = allowed_source_address_prefixes
        self._max_request_access_duration = max_request_access_duration
        self._number = number
        self._protocol = protocol

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JitNetworkAccessPortRule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JitNetworkAccessPortRule of this JitNetworkAccessPortRule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allowed_source_address_prefix(self):
        """Gets the allowed_source_address_prefix of this JitNetworkAccessPortRule.

        Mutually exclusive with the \"allowedSourceAddressPrefixes\" parameter. Should be an IP address or CIDR, for example \"192.168.0.3\" or \"192.168.0.0/16\".

        :return: The allowed_source_address_prefix of this JitNetworkAccessPortRule.
        :rtype: str
        """
        return self._allowed_source_address_prefix

    @allowed_source_address_prefix.setter
    def allowed_source_address_prefix(self, allowed_source_address_prefix):
        """Sets the allowed_source_address_prefix of this JitNetworkAccessPortRule.

        Mutually exclusive with the \"allowedSourceAddressPrefixes\" parameter. Should be an IP address or CIDR, for example \"192.168.0.3\" or \"192.168.0.0/16\".

        :param allowed_source_address_prefix: The allowed_source_address_prefix of this JitNetworkAccessPortRule.
        :type allowed_source_address_prefix: str
        """

        self._allowed_source_address_prefix = allowed_source_address_prefix

    @property
    def allowed_source_address_prefixes(self):
        """Gets the allowed_source_address_prefixes of this JitNetworkAccessPortRule.

        Mutually exclusive with the \"allowedSourceAddressPrefix\" parameter.

        :return: The allowed_source_address_prefixes of this JitNetworkAccessPortRule.
        :rtype: List[str]
        """
        return self._allowed_source_address_prefixes

    @allowed_source_address_prefixes.setter
    def allowed_source_address_prefixes(self, allowed_source_address_prefixes):
        """Sets the allowed_source_address_prefixes of this JitNetworkAccessPortRule.

        Mutually exclusive with the \"allowedSourceAddressPrefix\" parameter.

        :param allowed_source_address_prefixes: The allowed_source_address_prefixes of this JitNetworkAccessPortRule.
        :type allowed_source_address_prefixes: List[str]
        """

        self._allowed_source_address_prefixes = allowed_source_address_prefixes

    @property
    def max_request_access_duration(self):
        """Gets the max_request_access_duration of this JitNetworkAccessPortRule.

        Maximum duration requests can be made for. In ISO 8601 duration format. Minimum 5 minutes, maximum 1 day

        :return: The max_request_access_duration of this JitNetworkAccessPortRule.
        :rtype: str
        """
        return self._max_request_access_duration

    @max_request_access_duration.setter
    def max_request_access_duration(self, max_request_access_duration):
        """Sets the max_request_access_duration of this JitNetworkAccessPortRule.

        Maximum duration requests can be made for. In ISO 8601 duration format. Minimum 5 minutes, maximum 1 day

        :param max_request_access_duration: The max_request_access_duration of this JitNetworkAccessPortRule.
        :type max_request_access_duration: str
        """
        if max_request_access_duration is None:
            raise ValueError("Invalid value for `max_request_access_duration`, must not be `None`")

        self._max_request_access_duration = max_request_access_duration

    @property
    def number(self):
        """Gets the number of this JitNetworkAccessPortRule.


        :return: The number of this JitNetworkAccessPortRule.
        :rtype: int
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this JitNetworkAccessPortRule.


        :param number: The number of this JitNetworkAccessPortRule.
        :type number: int
        """
        if number is None:
            raise ValueError("Invalid value for `number`, must not be `None`")
        if number is not None and number > 65535:
            raise ValueError("Invalid value for `number`, must be a value less than or equal to `65535`")
        if number is not None and number < 0:
            raise ValueError("Invalid value for `number`, must be a value greater than or equal to `0`")

        self._number = number

    @property
    def protocol(self):
        """Gets the protocol of this JitNetworkAccessPortRule.


        :return: The protocol of this JitNetworkAccessPortRule.
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this JitNetworkAccessPortRule.


        :param protocol: The protocol of this JitNetworkAccessPortRule.
        :type protocol: str
        """
        allowed_values = ["TCP", "UDP", "*"]  # noqa: E501
        if protocol not in allowed_values:
            raise ValueError(
                "Invalid value for `protocol` ({0}), must be one of {1}"
                .format(protocol, allowed_values)
            )

        self._protocol = protocol
