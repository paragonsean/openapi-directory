/**
 * Security Center
 * API spec for Microsoft.Security (Azure Security Center) resource provider
 *
 * The version of the OpenAPI document: 2015-06-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CloudError from '../model/CloudError';
import JitNetworkAccessPoliciesList from '../model/JitNetworkAccessPoliciesList';
import JitNetworkAccessPolicy from '../model/JitNetworkAccessPolicy';
import JitNetworkAccessPolicyInitiateRequest from '../model/JitNetworkAccessPolicyInitiateRequest';
import JitNetworkAccessRequest from '../model/JitNetworkAccessRequest';

/**
* JitNetworkAccessPolicies service.
* @module api/JitNetworkAccessPoliciesApi
* @version 2015-06-01-preview
*/
export default class JitNetworkAccessPoliciesApi {

    /**
    * Constructs a new JitNetworkAccessPoliciesApi. 
    * @alias module:api/JitNetworkAccessPoliciesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the jitNetworkAccessPoliciesCreateOrUpdate operation.
     * @callback module:api/JitNetworkAccessPoliciesApi~jitNetworkAccessPoliciesCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JitNetworkAccessPolicy} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a policy for protecting resources using Just-in-Time access control
     * @param {String} subscriptionId Azure subscription ID
     * @param {String} resourceGroupName The name of the resource group within the user's subscription. The name is case insensitive.
     * @param {String} ascLocation The location where ASC stores the data of the subscription. can be retrieved from Get locations
     * @param {String} jitNetworkAccessPolicyName Name of a Just-in-Time access configuration policy.
     * @param {module:model/String} apiVersion API version for the operation
     * @param {module:model/JitNetworkAccessPolicy} body 
     * @param {module:api/JitNetworkAccessPoliciesApi~jitNetworkAccessPoliciesCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JitNetworkAccessPolicy}
     */
    jitNetworkAccessPoliciesCreateOrUpdate(subscriptionId, resourceGroupName, ascLocation, jitNetworkAccessPolicyName, apiVersion, body, callback) {
      let postBody = body;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling jitNetworkAccessPoliciesCreateOrUpdate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling jitNetworkAccessPoliciesCreateOrUpdate");
      }
      // verify the required parameter 'ascLocation' is set
      if (ascLocation === undefined || ascLocation === null) {
        throw new Error("Missing the required parameter 'ascLocation' when calling jitNetworkAccessPoliciesCreateOrUpdate");
      }
      // verify the required parameter 'jitNetworkAccessPolicyName' is set
      if (jitNetworkAccessPolicyName === undefined || jitNetworkAccessPolicyName === null) {
        throw new Error("Missing the required parameter 'jitNetworkAccessPolicyName' when calling jitNetworkAccessPoliciesCreateOrUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling jitNetworkAccessPoliciesCreateOrUpdate");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling jitNetworkAccessPoliciesCreateOrUpdate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'ascLocation': ascLocation,
        'jitNetworkAccessPolicyName': jitNetworkAccessPolicyName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = JitNetworkAccessPolicy;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/locations/{ascLocation}/jitNetworkAccessPolicies/{jitNetworkAccessPolicyName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the jitNetworkAccessPoliciesDelete operation.
     * @callback module:api/JitNetworkAccessPoliciesApi~jitNetworkAccessPoliciesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Just-in-Time access control policy.
     * @param {String} subscriptionId Azure subscription ID
     * @param {String} resourceGroupName The name of the resource group within the user's subscription. The name is case insensitive.
     * @param {String} ascLocation The location where ASC stores the data of the subscription. can be retrieved from Get locations
     * @param {String} jitNetworkAccessPolicyName Name of a Just-in-Time access configuration policy.
     * @param {module:model/String} apiVersion API version for the operation
     * @param {module:api/JitNetworkAccessPoliciesApi~jitNetworkAccessPoliciesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    jitNetworkAccessPoliciesDelete(subscriptionId, resourceGroupName, ascLocation, jitNetworkAccessPolicyName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling jitNetworkAccessPoliciesDelete");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling jitNetworkAccessPoliciesDelete");
      }
      // verify the required parameter 'ascLocation' is set
      if (ascLocation === undefined || ascLocation === null) {
        throw new Error("Missing the required parameter 'ascLocation' when calling jitNetworkAccessPoliciesDelete");
      }
      // verify the required parameter 'jitNetworkAccessPolicyName' is set
      if (jitNetworkAccessPolicyName === undefined || jitNetworkAccessPolicyName === null) {
        throw new Error("Missing the required parameter 'jitNetworkAccessPolicyName' when calling jitNetworkAccessPoliciesDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling jitNetworkAccessPoliciesDelete");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'ascLocation': ascLocation,
        'jitNetworkAccessPolicyName': jitNetworkAccessPolicyName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/locations/{ascLocation}/jitNetworkAccessPolicies/{jitNetworkAccessPolicyName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the jitNetworkAccessPoliciesGet operation.
     * @callback module:api/JitNetworkAccessPoliciesApi~jitNetworkAccessPoliciesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JitNetworkAccessPolicy} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Policies for protecting resources using Just-in-Time access control for the subscription, location
     * @param {String} subscriptionId Azure subscription ID
     * @param {String} resourceGroupName The name of the resource group within the user's subscription. The name is case insensitive.
     * @param {String} ascLocation The location where ASC stores the data of the subscription. can be retrieved from Get locations
     * @param {String} jitNetworkAccessPolicyName Name of a Just-in-Time access configuration policy.
     * @param {module:model/String} apiVersion API version for the operation
     * @param {module:api/JitNetworkAccessPoliciesApi~jitNetworkAccessPoliciesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JitNetworkAccessPolicy}
     */
    jitNetworkAccessPoliciesGet(subscriptionId, resourceGroupName, ascLocation, jitNetworkAccessPolicyName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling jitNetworkAccessPoliciesGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling jitNetworkAccessPoliciesGet");
      }
      // verify the required parameter 'ascLocation' is set
      if (ascLocation === undefined || ascLocation === null) {
        throw new Error("Missing the required parameter 'ascLocation' when calling jitNetworkAccessPoliciesGet");
      }
      // verify the required parameter 'jitNetworkAccessPolicyName' is set
      if (jitNetworkAccessPolicyName === undefined || jitNetworkAccessPolicyName === null) {
        throw new Error("Missing the required parameter 'jitNetworkAccessPolicyName' when calling jitNetworkAccessPoliciesGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling jitNetworkAccessPoliciesGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'ascLocation': ascLocation,
        'jitNetworkAccessPolicyName': jitNetworkAccessPolicyName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = JitNetworkAccessPolicy;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/locations/{ascLocation}/jitNetworkAccessPolicies/{jitNetworkAccessPolicyName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the jitNetworkAccessPoliciesInitiate operation.
     * @callback module:api/JitNetworkAccessPoliciesApi~jitNetworkAccessPoliciesInitiateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JitNetworkAccessRequest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Initiate a JIT access from a specific Just-in-Time policy configuration.
     * @param {String} subscriptionId Azure subscription ID
     * @param {String} resourceGroupName The name of the resource group within the user's subscription. The name is case insensitive.
     * @param {String} ascLocation The location where ASC stores the data of the subscription. can be retrieved from Get locations
     * @param {String} jitNetworkAccessPolicyName Name of a Just-in-Time access configuration policy.
     * @param {module:model/String} jitNetworkAccessPolicyInitiateType Type of the action to do on the Just-in-Time access policy.
     * @param {module:model/String} apiVersion API version for the operation
     * @param {module:model/JitNetworkAccessPolicyInitiateRequest} body 
     * @param {module:api/JitNetworkAccessPoliciesApi~jitNetworkAccessPoliciesInitiateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JitNetworkAccessRequest}
     */
    jitNetworkAccessPoliciesInitiate(subscriptionId, resourceGroupName, ascLocation, jitNetworkAccessPolicyName, jitNetworkAccessPolicyInitiateType, apiVersion, body, callback) {
      let postBody = body;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling jitNetworkAccessPoliciesInitiate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling jitNetworkAccessPoliciesInitiate");
      }
      // verify the required parameter 'ascLocation' is set
      if (ascLocation === undefined || ascLocation === null) {
        throw new Error("Missing the required parameter 'ascLocation' when calling jitNetworkAccessPoliciesInitiate");
      }
      // verify the required parameter 'jitNetworkAccessPolicyName' is set
      if (jitNetworkAccessPolicyName === undefined || jitNetworkAccessPolicyName === null) {
        throw new Error("Missing the required parameter 'jitNetworkAccessPolicyName' when calling jitNetworkAccessPoliciesInitiate");
      }
      // verify the required parameter 'jitNetworkAccessPolicyInitiateType' is set
      if (jitNetworkAccessPolicyInitiateType === undefined || jitNetworkAccessPolicyInitiateType === null) {
        throw new Error("Missing the required parameter 'jitNetworkAccessPolicyInitiateType' when calling jitNetworkAccessPoliciesInitiate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling jitNetworkAccessPoliciesInitiate");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling jitNetworkAccessPoliciesInitiate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'ascLocation': ascLocation,
        'jitNetworkAccessPolicyName': jitNetworkAccessPolicyName,
        'jitNetworkAccessPolicyInitiateType': jitNetworkAccessPolicyInitiateType
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = JitNetworkAccessRequest;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/locations/{ascLocation}/jitNetworkAccessPolicies/{jitNetworkAccessPolicyName}/{jitNetworkAccessPolicyInitiateType}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the jitNetworkAccessPoliciesList operation.
     * @callback module:api/JitNetworkAccessPoliciesApi~jitNetworkAccessPoliciesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JitNetworkAccessPoliciesList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Policies for protecting resources using Just-in-Time access control.
     * @param {String} subscriptionId Azure subscription ID
     * @param {module:model/String} apiVersion API version for the operation
     * @param {module:api/JitNetworkAccessPoliciesApi~jitNetworkAccessPoliciesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JitNetworkAccessPoliciesList}
     */
    jitNetworkAccessPoliciesList(subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling jitNetworkAccessPoliciesList");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling jitNetworkAccessPoliciesList");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = JitNetworkAccessPoliciesList;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Security/jitNetworkAccessPolicies', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the jitNetworkAccessPoliciesListByRegion operation.
     * @callback module:api/JitNetworkAccessPoliciesApi~jitNetworkAccessPoliciesListByRegionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JitNetworkAccessPoliciesList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Policies for protecting resources using Just-in-Time access control for the subscription, location
     * @param {String} subscriptionId Azure subscription ID
     * @param {String} ascLocation The location where ASC stores the data of the subscription. can be retrieved from Get locations
     * @param {module:model/String} apiVersion API version for the operation
     * @param {module:api/JitNetworkAccessPoliciesApi~jitNetworkAccessPoliciesListByRegionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JitNetworkAccessPoliciesList}
     */
    jitNetworkAccessPoliciesListByRegion(subscriptionId, ascLocation, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling jitNetworkAccessPoliciesListByRegion");
      }
      // verify the required parameter 'ascLocation' is set
      if (ascLocation === undefined || ascLocation === null) {
        throw new Error("Missing the required parameter 'ascLocation' when calling jitNetworkAccessPoliciesListByRegion");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling jitNetworkAccessPoliciesListByRegion");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'ascLocation': ascLocation
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = JitNetworkAccessPoliciesList;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Security/locations/{ascLocation}/jitNetworkAccessPolicies', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the jitNetworkAccessPoliciesListByResourceGroup operation.
     * @callback module:api/JitNetworkAccessPoliciesApi~jitNetworkAccessPoliciesListByResourceGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JitNetworkAccessPoliciesList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Policies for protecting resources using Just-in-Time access control for the subscription, location
     * @param {String} subscriptionId Azure subscription ID
     * @param {String} resourceGroupName The name of the resource group within the user's subscription. The name is case insensitive.
     * @param {module:model/String} apiVersion API version for the operation
     * @param {module:api/JitNetworkAccessPoliciesApi~jitNetworkAccessPoliciesListByResourceGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JitNetworkAccessPoliciesList}
     */
    jitNetworkAccessPoliciesListByResourceGroup(subscriptionId, resourceGroupName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling jitNetworkAccessPoliciesListByResourceGroup");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling jitNetworkAccessPoliciesListByResourceGroup");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling jitNetworkAccessPoliciesListByResourceGroup");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = JitNetworkAccessPoliciesList;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/jitNetworkAccessPolicies', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the jitNetworkAccessPoliciesListByResourceGroupAndRegion operation.
     * @callback module:api/JitNetworkAccessPoliciesApi~jitNetworkAccessPoliciesListByResourceGroupAndRegionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JitNetworkAccessPoliciesList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Policies for protecting resources using Just-in-Time access control for the subscription, location
     * @param {String} subscriptionId Azure subscription ID
     * @param {String} resourceGroupName The name of the resource group within the user's subscription. The name is case insensitive.
     * @param {String} ascLocation The location where ASC stores the data of the subscription. can be retrieved from Get locations
     * @param {module:model/String} apiVersion API version for the operation
     * @param {module:api/JitNetworkAccessPoliciesApi~jitNetworkAccessPoliciesListByResourceGroupAndRegionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JitNetworkAccessPoliciesList}
     */
    jitNetworkAccessPoliciesListByResourceGroupAndRegion(subscriptionId, resourceGroupName, ascLocation, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling jitNetworkAccessPoliciesListByResourceGroupAndRegion");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling jitNetworkAccessPoliciesListByResourceGroupAndRegion");
      }
      // verify the required parameter 'ascLocation' is set
      if (ascLocation === undefined || ascLocation === null) {
        throw new Error("Missing the required parameter 'ascLocation' when calling jitNetworkAccessPoliciesListByResourceGroupAndRegion");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling jitNetworkAccessPoliciesListByResourceGroupAndRegion");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'ascLocation': ascLocation
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = JitNetworkAccessPoliciesList;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/locations/{ascLocation}/jitNetworkAccessPolicies', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
