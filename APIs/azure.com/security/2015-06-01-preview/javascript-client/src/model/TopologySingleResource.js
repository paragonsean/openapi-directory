/**
 * Security Center
 * API spec for Microsoft.Security (Azure Security Center) resource provider
 *
 * The version of the OpenAPI document: 2015-06-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TopologySingleResourceChild from './TopologySingleResourceChild';
import TopologySingleResourceParent from './TopologySingleResourceParent';

/**
 * The TopologySingleResource model module.
 * @module model/TopologySingleResource
 * @version 2015-06-01-preview
 */
class TopologySingleResource {
    /**
     * Constructs a new <code>TopologySingleResource</code>.
     * @alias module:model/TopologySingleResource
     */
    constructor() { 
        
        TopologySingleResource.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TopologySingleResource</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TopologySingleResource} obj Optional instance to populate.
     * @return {module:model/TopologySingleResource} The populated <code>TopologySingleResource</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TopologySingleResource();

            if (data.hasOwnProperty('children')) {
                obj['children'] = ApiClient.convertToType(data['children'], [TopologySingleResourceChild]);
            }
            if (data.hasOwnProperty('location')) {
                obj['location'] = ApiClient.convertToType(data['location'], 'String');
            }
            if (data.hasOwnProperty('networkZones')) {
                obj['networkZones'] = ApiClient.convertToType(data['networkZones'], 'String');
            }
            if (data.hasOwnProperty('parents')) {
                obj['parents'] = ApiClient.convertToType(data['parents'], [TopologySingleResourceParent]);
            }
            if (data.hasOwnProperty('recommendationsExist')) {
                obj['recommendationsExist'] = ApiClient.convertToType(data['recommendationsExist'], 'Boolean');
            }
            if (data.hasOwnProperty('resourceId')) {
                obj['resourceId'] = ApiClient.convertToType(data['resourceId'], 'String');
            }
            if (data.hasOwnProperty('severity')) {
                obj['severity'] = ApiClient.convertToType(data['severity'], 'String');
            }
            if (data.hasOwnProperty('topologyScore')) {
                obj['topologyScore'] = ApiClient.convertToType(data['topologyScore'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TopologySingleResource</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TopologySingleResource</code>.
     */
    static validateJSON(data) {
        if (data['children']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['children'])) {
                throw new Error("Expected the field `children` to be an array in the JSON data but got " + data['children']);
            }
            // validate the optional field `children` (array)
            for (const item of data['children']) {
                TopologySingleResourceChild.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['location'] && !(typeof data['location'] === 'string' || data['location'] instanceof String)) {
            throw new Error("Expected the field `location` to be a primitive type in the JSON string but got " + data['location']);
        }
        // ensure the json data is a string
        if (data['networkZones'] && !(typeof data['networkZones'] === 'string' || data['networkZones'] instanceof String)) {
            throw new Error("Expected the field `networkZones` to be a primitive type in the JSON string but got " + data['networkZones']);
        }
        if (data['parents']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['parents'])) {
                throw new Error("Expected the field `parents` to be an array in the JSON data but got " + data['parents']);
            }
            // validate the optional field `parents` (array)
            for (const item of data['parents']) {
                TopologySingleResourceParent.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['resourceId'] && !(typeof data['resourceId'] === 'string' || data['resourceId'] instanceof String)) {
            throw new Error("Expected the field `resourceId` to be a primitive type in the JSON string but got " + data['resourceId']);
        }
        // ensure the json data is a string
        if (data['severity'] && !(typeof data['severity'] === 'string' || data['severity'] instanceof String)) {
            throw new Error("Expected the field `severity` to be a primitive type in the JSON string but got " + data['severity']);
        }

        return true;
    }


}



/**
 * Azure resources connected to this resource which are in lower level in the topology view
 * @member {Array.<module:model/TopologySingleResourceChild>} children
 */
TopologySingleResource.prototype['children'] = undefined;

/**
 * The location of this resource
 * @member {String} location
 */
TopologySingleResource.prototype['location'] = undefined;

/**
 * Indicates the resource connectivity level to the Internet (InternetFacing, Internal ,etc.)
 * @member {String} networkZones
 */
TopologySingleResource.prototype['networkZones'] = undefined;

/**
 * Azure resources connected to this resource which are in higher level in the topology view
 * @member {Array.<module:model/TopologySingleResourceParent>} parents
 */
TopologySingleResource.prototype['parents'] = undefined;

/**
 * Indicates if the resource has security recommendations
 * @member {Boolean} recommendationsExist
 */
TopologySingleResource.prototype['recommendationsExist'] = undefined;

/**
 * Azure resource id
 * @member {String} resourceId
 */
TopologySingleResource.prototype['resourceId'] = undefined;

/**
 * The security severity of the resource
 * @member {String} severity
 */
TopologySingleResource.prototype['severity'] = undefined;

/**
 * Score of the resource based on its security severity
 * @member {Number} topologyScore
 */
TopologySingleResource.prototype['topologyScore'] = undefined;






export default TopologySingleResource;

