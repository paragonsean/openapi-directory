/**
 * Security Center
 * API spec for Microsoft.Security (Azure Security Center) resource provider
 *
 * The version of the OpenAPI document: 2015-06-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SecurityCenter);
  }
}(this, function(expect, SecurityCenter) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SecurityCenter.TasksApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('TasksApi', function() {
    describe('tasksGetResourceGroupLevelTask', function() {
      it('should call tasksGetResourceGroupLevelTask successfully', function(done) {
        //uncomment below and update the code to test tasksGetResourceGroupLevelTask
        //instance.tasksGetResourceGroupLevelTask(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tasksGetSubscriptionLevelTask', function() {
      it('should call tasksGetSubscriptionLevelTask successfully', function(done) {
        //uncomment below and update the code to test tasksGetSubscriptionLevelTask
        //instance.tasksGetSubscriptionLevelTask(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tasksList', function() {
      it('should call tasksList successfully', function(done) {
        //uncomment below and update the code to test tasksList
        //instance.tasksList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tasksListByHomeRegion', function() {
      it('should call tasksListByHomeRegion successfully', function(done) {
        //uncomment below and update the code to test tasksListByHomeRegion
        //instance.tasksListByHomeRegion(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tasksListByResourceGroup', function() {
      it('should call tasksListByResourceGroup successfully', function(done) {
        //uncomment below and update the code to test tasksListByResourceGroup
        //instance.tasksListByResourceGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tasksUpdateResourceGroupLevelTaskState', function() {
      it('should call tasksUpdateResourceGroupLevelTaskState successfully', function(done) {
        //uncomment below and update the code to test tasksUpdateResourceGroupLevelTaskState
        //instance.tasksUpdateResourceGroupLevelTaskState(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tasksUpdateSubscriptionLevelTaskState', function() {
      it('should call tasksUpdateSubscriptionLevelTaskState successfully', function(done) {
        //uncomment below and update the code to test tasksUpdateSubscriptionLevelTaskState
        //instance.tasksUpdateSubscriptionLevelTaskState(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
