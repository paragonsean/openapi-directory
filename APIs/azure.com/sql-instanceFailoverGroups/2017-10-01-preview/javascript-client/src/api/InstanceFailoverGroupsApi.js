/**
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2017-10-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import InstanceFailoverGroup from '../model/InstanceFailoverGroup';
import InstanceFailoverGroupListResult from '../model/InstanceFailoverGroupListResult';

/**
* InstanceFailoverGroups service.
* @module api/InstanceFailoverGroupsApi
* @version 2017-10-01-preview
*/
export default class InstanceFailoverGroupsApi {

    /**
    * Constructs a new InstanceFailoverGroupsApi. 
    * @alias module:api/InstanceFailoverGroupsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the instanceFailoverGroupsCreateOrUpdate operation.
     * @callback module:api/InstanceFailoverGroupsApi~instanceFailoverGroupsCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InstanceFailoverGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates or updates a failover group.
     * @param {String} resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param {String} locationName The name of the region where the resource is located.
     * @param {String} failoverGroupName The name of the failover group.
     * @param {String} subscriptionId The subscription ID that identifies an Azure subscription.
     * @param {String} apiVersion The API version to use for the request.
     * @param {module:model/InstanceFailoverGroup} parameters The failover group parameters.
     * @param {module:api/InstanceFailoverGroupsApi~instanceFailoverGroupsCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InstanceFailoverGroup}
     */
    instanceFailoverGroupsCreateOrUpdate(resourceGroupName, locationName, failoverGroupName, subscriptionId, apiVersion, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling instanceFailoverGroupsCreateOrUpdate");
      }
      // verify the required parameter 'locationName' is set
      if (locationName === undefined || locationName === null) {
        throw new Error("Missing the required parameter 'locationName' when calling instanceFailoverGroupsCreateOrUpdate");
      }
      // verify the required parameter 'failoverGroupName' is set
      if (failoverGroupName === undefined || failoverGroupName === null) {
        throw new Error("Missing the required parameter 'failoverGroupName' when calling instanceFailoverGroupsCreateOrUpdate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling instanceFailoverGroupsCreateOrUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling instanceFailoverGroupsCreateOrUpdate");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling instanceFailoverGroupsCreateOrUpdate");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'locationName': locationName,
        'failoverGroupName': failoverGroupName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InstanceFailoverGroup;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/locations/{locationName}/instanceFailoverGroups/{failoverGroupName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the instanceFailoverGroupsDelete operation.
     * @callback module:api/InstanceFailoverGroupsApi~instanceFailoverGroupsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a failover group.
     * @param {String} resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param {String} locationName The name of the region where the resource is located.
     * @param {String} failoverGroupName The name of the failover group.
     * @param {String} subscriptionId The subscription ID that identifies an Azure subscription.
     * @param {String} apiVersion The API version to use for the request.
     * @param {module:api/InstanceFailoverGroupsApi~instanceFailoverGroupsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    instanceFailoverGroupsDelete(resourceGroupName, locationName, failoverGroupName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling instanceFailoverGroupsDelete");
      }
      // verify the required parameter 'locationName' is set
      if (locationName === undefined || locationName === null) {
        throw new Error("Missing the required parameter 'locationName' when calling instanceFailoverGroupsDelete");
      }
      // verify the required parameter 'failoverGroupName' is set
      if (failoverGroupName === undefined || failoverGroupName === null) {
        throw new Error("Missing the required parameter 'failoverGroupName' when calling instanceFailoverGroupsDelete");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling instanceFailoverGroupsDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling instanceFailoverGroupsDelete");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'locationName': locationName,
        'failoverGroupName': failoverGroupName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/locations/{locationName}/instanceFailoverGroups/{failoverGroupName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the instanceFailoverGroupsFailover operation.
     * @callback module:api/InstanceFailoverGroupsApi~instanceFailoverGroupsFailoverCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InstanceFailoverGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fails over from the current primary managed instance to this managed instance.
     * @param {String} resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param {String} locationName The name of the region where the resource is located.
     * @param {String} failoverGroupName The name of the failover group.
     * @param {String} subscriptionId The subscription ID that identifies an Azure subscription.
     * @param {String} apiVersion The API version to use for the request.
     * @param {module:api/InstanceFailoverGroupsApi~instanceFailoverGroupsFailoverCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InstanceFailoverGroup}
     */
    instanceFailoverGroupsFailover(resourceGroupName, locationName, failoverGroupName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling instanceFailoverGroupsFailover");
      }
      // verify the required parameter 'locationName' is set
      if (locationName === undefined || locationName === null) {
        throw new Error("Missing the required parameter 'locationName' when calling instanceFailoverGroupsFailover");
      }
      // verify the required parameter 'failoverGroupName' is set
      if (failoverGroupName === undefined || failoverGroupName === null) {
        throw new Error("Missing the required parameter 'failoverGroupName' when calling instanceFailoverGroupsFailover");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling instanceFailoverGroupsFailover");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling instanceFailoverGroupsFailover");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'locationName': locationName,
        'failoverGroupName': failoverGroupName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InstanceFailoverGroup;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/locations/{locationName}/instanceFailoverGroups/{failoverGroupName}/failover', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the instanceFailoverGroupsForceFailoverAllowDataLoss operation.
     * @callback module:api/InstanceFailoverGroupsApi~instanceFailoverGroupsForceFailoverAllowDataLossCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InstanceFailoverGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fails over from the current primary managed instance to this managed instance. This operation might result in data loss.
     * @param {String} resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param {String} locationName The name of the region where the resource is located.
     * @param {String} failoverGroupName The name of the failover group.
     * @param {String} subscriptionId The subscription ID that identifies an Azure subscription.
     * @param {String} apiVersion The API version to use for the request.
     * @param {module:api/InstanceFailoverGroupsApi~instanceFailoverGroupsForceFailoverAllowDataLossCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InstanceFailoverGroup}
     */
    instanceFailoverGroupsForceFailoverAllowDataLoss(resourceGroupName, locationName, failoverGroupName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling instanceFailoverGroupsForceFailoverAllowDataLoss");
      }
      // verify the required parameter 'locationName' is set
      if (locationName === undefined || locationName === null) {
        throw new Error("Missing the required parameter 'locationName' when calling instanceFailoverGroupsForceFailoverAllowDataLoss");
      }
      // verify the required parameter 'failoverGroupName' is set
      if (failoverGroupName === undefined || failoverGroupName === null) {
        throw new Error("Missing the required parameter 'failoverGroupName' when calling instanceFailoverGroupsForceFailoverAllowDataLoss");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling instanceFailoverGroupsForceFailoverAllowDataLoss");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling instanceFailoverGroupsForceFailoverAllowDataLoss");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'locationName': locationName,
        'failoverGroupName': failoverGroupName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InstanceFailoverGroup;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/locations/{locationName}/instanceFailoverGroups/{failoverGroupName}/forceFailoverAllowDataLoss', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the instanceFailoverGroupsGet operation.
     * @callback module:api/InstanceFailoverGroupsApi~instanceFailoverGroupsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InstanceFailoverGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a failover group.
     * @param {String} resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param {String} locationName The name of the region where the resource is located.
     * @param {String} failoverGroupName The name of the failover group.
     * @param {String} subscriptionId The subscription ID that identifies an Azure subscription.
     * @param {String} apiVersion The API version to use for the request.
     * @param {module:api/InstanceFailoverGroupsApi~instanceFailoverGroupsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InstanceFailoverGroup}
     */
    instanceFailoverGroupsGet(resourceGroupName, locationName, failoverGroupName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling instanceFailoverGroupsGet");
      }
      // verify the required parameter 'locationName' is set
      if (locationName === undefined || locationName === null) {
        throw new Error("Missing the required parameter 'locationName' when calling instanceFailoverGroupsGet");
      }
      // verify the required parameter 'failoverGroupName' is set
      if (failoverGroupName === undefined || failoverGroupName === null) {
        throw new Error("Missing the required parameter 'failoverGroupName' when calling instanceFailoverGroupsGet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling instanceFailoverGroupsGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling instanceFailoverGroupsGet");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'locationName': locationName,
        'failoverGroupName': failoverGroupName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InstanceFailoverGroup;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/locations/{locationName}/instanceFailoverGroups/{failoverGroupName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the instanceFailoverGroupsListByLocation operation.
     * @callback module:api/InstanceFailoverGroupsApi~instanceFailoverGroupsListByLocationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InstanceFailoverGroupListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the failover groups in a location.
     * @param {String} resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param {String} locationName The name of the region where the resource is located.
     * @param {String} subscriptionId The subscription ID that identifies an Azure subscription.
     * @param {String} apiVersion The API version to use for the request.
     * @param {module:api/InstanceFailoverGroupsApi~instanceFailoverGroupsListByLocationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InstanceFailoverGroupListResult}
     */
    instanceFailoverGroupsListByLocation(resourceGroupName, locationName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling instanceFailoverGroupsListByLocation");
      }
      // verify the required parameter 'locationName' is set
      if (locationName === undefined || locationName === null) {
        throw new Error("Missing the required parameter 'locationName' when calling instanceFailoverGroupsListByLocation");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling instanceFailoverGroupsListByLocation");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling instanceFailoverGroupsListByLocation");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'locationName': locationName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InstanceFailoverGroupListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/locations/{locationName}/instanceFailoverGroups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
