/*
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2017-10-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Pairs of Managed Instances in the failover group.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:01:05.341060-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ManagedInstancePairInfo {
  public static final String SERIALIZED_NAME_PARTNER_MANAGED_INSTANCE_ID = "partnerManagedInstanceId";
  @SerializedName(SERIALIZED_NAME_PARTNER_MANAGED_INSTANCE_ID)
  private String partnerManagedInstanceId;

  public static final String SERIALIZED_NAME_PRIMARY_MANAGED_INSTANCE_ID = "primaryManagedInstanceId";
  @SerializedName(SERIALIZED_NAME_PRIMARY_MANAGED_INSTANCE_ID)
  private String primaryManagedInstanceId;

  public ManagedInstancePairInfo() {
  }

  public ManagedInstancePairInfo partnerManagedInstanceId(String partnerManagedInstanceId) {
    this.partnerManagedInstanceId = partnerManagedInstanceId;
    return this;
  }

  /**
   * Id of Partner Managed Instance in pair.
   * @return partnerManagedInstanceId
   */
  @javax.annotation.Nullable
  public String getPartnerManagedInstanceId() {
    return partnerManagedInstanceId;
  }

  public void setPartnerManagedInstanceId(String partnerManagedInstanceId) {
    this.partnerManagedInstanceId = partnerManagedInstanceId;
  }


  public ManagedInstancePairInfo primaryManagedInstanceId(String primaryManagedInstanceId) {
    this.primaryManagedInstanceId = primaryManagedInstanceId;
    return this;
  }

  /**
   * Id of Primary Managed Instance in pair.
   * @return primaryManagedInstanceId
   */
  @javax.annotation.Nullable
  public String getPrimaryManagedInstanceId() {
    return primaryManagedInstanceId;
  }

  public void setPrimaryManagedInstanceId(String primaryManagedInstanceId) {
    this.primaryManagedInstanceId = primaryManagedInstanceId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ManagedInstancePairInfo managedInstancePairInfo = (ManagedInstancePairInfo) o;
    return Objects.equals(this.partnerManagedInstanceId, managedInstancePairInfo.partnerManagedInstanceId) &&
        Objects.equals(this.primaryManagedInstanceId, managedInstancePairInfo.primaryManagedInstanceId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(partnerManagedInstanceId, primaryManagedInstanceId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ManagedInstancePairInfo {\n");
    sb.append("    partnerManagedInstanceId: ").append(toIndentedString(partnerManagedInstanceId)).append("\n");
    sb.append("    primaryManagedInstanceId: ").append(toIndentedString(primaryManagedInstanceId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("partnerManagedInstanceId");
    openapiFields.add("primaryManagedInstanceId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ManagedInstancePairInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ManagedInstancePairInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ManagedInstancePairInfo is not found in the empty JSON string", ManagedInstancePairInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ManagedInstancePairInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ManagedInstancePairInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("partnerManagedInstanceId") != null && !jsonObj.get("partnerManagedInstanceId").isJsonNull()) && !jsonObj.get("partnerManagedInstanceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `partnerManagedInstanceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("partnerManagedInstanceId").toString()));
      }
      if ((jsonObj.get("primaryManagedInstanceId") != null && !jsonObj.get("primaryManagedInstanceId").isJsonNull()) && !jsonObj.get("primaryManagedInstanceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `primaryManagedInstanceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("primaryManagedInstanceId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ManagedInstancePairInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ManagedInstancePairInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ManagedInstancePairInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ManagedInstancePairInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<ManagedInstancePairInfo>() {
           @Override
           public void write(JsonWriter out, ManagedInstancePairInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ManagedInstancePairInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ManagedInstancePairInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ManagedInstancePairInfo
   * @throws IOException if the JSON string is invalid with respect to ManagedInstancePairInfo
   */
  public static ManagedInstancePairInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ManagedInstancePairInfo.class);
  }

  /**
   * Convert an instance of ManagedInstancePairInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

