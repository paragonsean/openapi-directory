/*
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2017-10-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Read-only endpoint of the failover group instance.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:01:05.341060-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InstanceFailoverGroupReadOnlyEndpoint {
  /**
   * Failover policy of the read-only endpoint for the failover group.
   */
  @JsonAdapter(FailoverPolicyEnum.Adapter.class)
  public enum FailoverPolicyEnum {
    DISABLED("Disabled"),
    
    ENABLED("Enabled");

    private String value;

    FailoverPolicyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FailoverPolicyEnum fromValue(String value) {
      for (FailoverPolicyEnum b : FailoverPolicyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FailoverPolicyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FailoverPolicyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FailoverPolicyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FailoverPolicyEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FailoverPolicyEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FAILOVER_POLICY = "failoverPolicy";
  @SerializedName(SERIALIZED_NAME_FAILOVER_POLICY)
  private FailoverPolicyEnum failoverPolicy;

  public InstanceFailoverGroupReadOnlyEndpoint() {
  }

  public InstanceFailoverGroupReadOnlyEndpoint failoverPolicy(FailoverPolicyEnum failoverPolicy) {
    this.failoverPolicy = failoverPolicy;
    return this;
  }

  /**
   * Failover policy of the read-only endpoint for the failover group.
   * @return failoverPolicy
   */
  @javax.annotation.Nullable
  public FailoverPolicyEnum getFailoverPolicy() {
    return failoverPolicy;
  }

  public void setFailoverPolicy(FailoverPolicyEnum failoverPolicy) {
    this.failoverPolicy = failoverPolicy;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InstanceFailoverGroupReadOnlyEndpoint instanceFailoverGroupReadOnlyEndpoint = (InstanceFailoverGroupReadOnlyEndpoint) o;
    return Objects.equals(this.failoverPolicy, instanceFailoverGroupReadOnlyEndpoint.failoverPolicy);
  }

  @Override
  public int hashCode() {
    return Objects.hash(failoverPolicy);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InstanceFailoverGroupReadOnlyEndpoint {\n");
    sb.append("    failoverPolicy: ").append(toIndentedString(failoverPolicy)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("failoverPolicy");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InstanceFailoverGroupReadOnlyEndpoint
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InstanceFailoverGroupReadOnlyEndpoint.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InstanceFailoverGroupReadOnlyEndpoint is not found in the empty JSON string", InstanceFailoverGroupReadOnlyEndpoint.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InstanceFailoverGroupReadOnlyEndpoint.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InstanceFailoverGroupReadOnlyEndpoint` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("failoverPolicy") != null && !jsonObj.get("failoverPolicy").isJsonNull()) && !jsonObj.get("failoverPolicy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `failoverPolicy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("failoverPolicy").toString()));
      }
      // validate the optional field `failoverPolicy`
      if (jsonObj.get("failoverPolicy") != null && !jsonObj.get("failoverPolicy").isJsonNull()) {
        FailoverPolicyEnum.validateJsonElement(jsonObj.get("failoverPolicy"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InstanceFailoverGroupReadOnlyEndpoint.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InstanceFailoverGroupReadOnlyEndpoint' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InstanceFailoverGroupReadOnlyEndpoint> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InstanceFailoverGroupReadOnlyEndpoint.class));

       return (TypeAdapter<T>) new TypeAdapter<InstanceFailoverGroupReadOnlyEndpoint>() {
           @Override
           public void write(JsonWriter out, InstanceFailoverGroupReadOnlyEndpoint value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InstanceFailoverGroupReadOnlyEndpoint read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InstanceFailoverGroupReadOnlyEndpoint given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InstanceFailoverGroupReadOnlyEndpoint
   * @throws IOException if the JSON string is invalid with respect to InstanceFailoverGroupReadOnlyEndpoint
   */
  public static InstanceFailoverGroupReadOnlyEndpoint fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InstanceFailoverGroupReadOnlyEndpoint.class);
  }

  /**
   * Convert an instance of InstanceFailoverGroupReadOnlyEndpoint to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

