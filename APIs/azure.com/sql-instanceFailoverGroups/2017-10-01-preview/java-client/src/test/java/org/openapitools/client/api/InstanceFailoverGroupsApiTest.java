/*
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2017-10-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.InstanceFailoverGroup;
import org.openapitools.client.model.InstanceFailoverGroupListResult;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for InstanceFailoverGroupsApi
 */
@Disabled
public class InstanceFailoverGroupsApiTest {

    private final InstanceFailoverGroupsApi api = new InstanceFailoverGroupsApi();

    /**
     * Creates or updates a failover group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void instanceFailoverGroupsCreateOrUpdateTest() throws ApiException {
        String resourceGroupName = null;
        String locationName = null;
        String failoverGroupName = null;
        String subscriptionId = null;
        String apiVersion = null;
        InstanceFailoverGroup parameters = null;
        InstanceFailoverGroup response = api.instanceFailoverGroupsCreateOrUpdate(resourceGroupName, locationName, failoverGroupName, subscriptionId, apiVersion, parameters);
        // TODO: test validations
    }

    /**
     * Deletes a failover group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void instanceFailoverGroupsDeleteTest() throws ApiException {
        String resourceGroupName = null;
        String locationName = null;
        String failoverGroupName = null;
        String subscriptionId = null;
        String apiVersion = null;
        api.instanceFailoverGroupsDelete(resourceGroupName, locationName, failoverGroupName, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Fails over from the current primary managed instance to this managed instance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void instanceFailoverGroupsFailoverTest() throws ApiException {
        String resourceGroupName = null;
        String locationName = null;
        String failoverGroupName = null;
        String subscriptionId = null;
        String apiVersion = null;
        InstanceFailoverGroup response = api.instanceFailoverGroupsFailover(resourceGroupName, locationName, failoverGroupName, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Fails over from the current primary managed instance to this managed instance. This operation might result in data loss.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void instanceFailoverGroupsForceFailoverAllowDataLossTest() throws ApiException {
        String resourceGroupName = null;
        String locationName = null;
        String failoverGroupName = null;
        String subscriptionId = null;
        String apiVersion = null;
        InstanceFailoverGroup response = api.instanceFailoverGroupsForceFailoverAllowDataLoss(resourceGroupName, locationName, failoverGroupName, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets a failover group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void instanceFailoverGroupsGetTest() throws ApiException {
        String resourceGroupName = null;
        String locationName = null;
        String failoverGroupName = null;
        String subscriptionId = null;
        String apiVersion = null;
        InstanceFailoverGroup response = api.instanceFailoverGroupsGet(resourceGroupName, locationName, failoverGroupName, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Lists the failover groups in a location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void instanceFailoverGroupsListByLocationTest() throws ApiException {
        String resourceGroupName = null;
        String locationName = null;
        String subscriptionId = null;
        String apiVersion = null;
        InstanceFailoverGroupListResult response = api.instanceFailoverGroupsListByLocation(resourceGroupName, locationName, subscriptionId, apiVersion);
        // TODO: test validations
    }

}
