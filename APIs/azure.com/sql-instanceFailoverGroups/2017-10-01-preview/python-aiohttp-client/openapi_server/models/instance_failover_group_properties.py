# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.instance_failover_group_read_only_endpoint import InstanceFailoverGroupReadOnlyEndpoint
from openapi_server.models.instance_failover_group_read_write_endpoint import InstanceFailoverGroupReadWriteEndpoint
from openapi_server.models.managed_instance_pair_info import ManagedInstancePairInfo
from openapi_server.models.partner_region_info import PartnerRegionInfo
from openapi_server import util


class InstanceFailoverGroupProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, managed_instance_pairs: List[ManagedInstancePairInfo]=None, partner_regions: List[PartnerRegionInfo]=None, read_only_endpoint: InstanceFailoverGroupReadOnlyEndpoint=None, read_write_endpoint: InstanceFailoverGroupReadWriteEndpoint=None, replication_role: str=None, replication_state: str=None):
        """InstanceFailoverGroupProperties - a model defined in OpenAPI

        :param managed_instance_pairs: The managed_instance_pairs of this InstanceFailoverGroupProperties.
        :param partner_regions: The partner_regions of this InstanceFailoverGroupProperties.
        :param read_only_endpoint: The read_only_endpoint of this InstanceFailoverGroupProperties.
        :param read_write_endpoint: The read_write_endpoint of this InstanceFailoverGroupProperties.
        :param replication_role: The replication_role of this InstanceFailoverGroupProperties.
        :param replication_state: The replication_state of this InstanceFailoverGroupProperties.
        """
        self.openapi_types = {
            'managed_instance_pairs': List[ManagedInstancePairInfo],
            'partner_regions': List[PartnerRegionInfo],
            'read_only_endpoint': InstanceFailoverGroupReadOnlyEndpoint,
            'read_write_endpoint': InstanceFailoverGroupReadWriteEndpoint,
            'replication_role': str,
            'replication_state': str
        }

        self.attribute_map = {
            'managed_instance_pairs': 'managedInstancePairs',
            'partner_regions': 'partnerRegions',
            'read_only_endpoint': 'readOnlyEndpoint',
            'read_write_endpoint': 'readWriteEndpoint',
            'replication_role': 'replicationRole',
            'replication_state': 'replicationState'
        }

        self._managed_instance_pairs = managed_instance_pairs
        self._partner_regions = partner_regions
        self._read_only_endpoint = read_only_endpoint
        self._read_write_endpoint = read_write_endpoint
        self._replication_role = replication_role
        self._replication_state = replication_state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InstanceFailoverGroupProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InstanceFailoverGroupProperties of this InstanceFailoverGroupProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def managed_instance_pairs(self):
        """Gets the managed_instance_pairs of this InstanceFailoverGroupProperties.

        List of managed instance pairs in the failover group.

        :return: The managed_instance_pairs of this InstanceFailoverGroupProperties.
        :rtype: List[ManagedInstancePairInfo]
        """
        return self._managed_instance_pairs

    @managed_instance_pairs.setter
    def managed_instance_pairs(self, managed_instance_pairs):
        """Sets the managed_instance_pairs of this InstanceFailoverGroupProperties.

        List of managed instance pairs in the failover group.

        :param managed_instance_pairs: The managed_instance_pairs of this InstanceFailoverGroupProperties.
        :type managed_instance_pairs: List[ManagedInstancePairInfo]
        """
        if managed_instance_pairs is None:
            raise ValueError("Invalid value for `managed_instance_pairs`, must not be `None`")

        self._managed_instance_pairs = managed_instance_pairs

    @property
    def partner_regions(self):
        """Gets the partner_regions of this InstanceFailoverGroupProperties.

        Partner region information for the failover group.

        :return: The partner_regions of this InstanceFailoverGroupProperties.
        :rtype: List[PartnerRegionInfo]
        """
        return self._partner_regions

    @partner_regions.setter
    def partner_regions(self, partner_regions):
        """Sets the partner_regions of this InstanceFailoverGroupProperties.

        Partner region information for the failover group.

        :param partner_regions: The partner_regions of this InstanceFailoverGroupProperties.
        :type partner_regions: List[PartnerRegionInfo]
        """
        if partner_regions is None:
            raise ValueError("Invalid value for `partner_regions`, must not be `None`")

        self._partner_regions = partner_regions

    @property
    def read_only_endpoint(self):
        """Gets the read_only_endpoint of this InstanceFailoverGroupProperties.


        :return: The read_only_endpoint of this InstanceFailoverGroupProperties.
        :rtype: InstanceFailoverGroupReadOnlyEndpoint
        """
        return self._read_only_endpoint

    @read_only_endpoint.setter
    def read_only_endpoint(self, read_only_endpoint):
        """Sets the read_only_endpoint of this InstanceFailoverGroupProperties.


        :param read_only_endpoint: The read_only_endpoint of this InstanceFailoverGroupProperties.
        :type read_only_endpoint: InstanceFailoverGroupReadOnlyEndpoint
        """

        self._read_only_endpoint = read_only_endpoint

    @property
    def read_write_endpoint(self):
        """Gets the read_write_endpoint of this InstanceFailoverGroupProperties.


        :return: The read_write_endpoint of this InstanceFailoverGroupProperties.
        :rtype: InstanceFailoverGroupReadWriteEndpoint
        """
        return self._read_write_endpoint

    @read_write_endpoint.setter
    def read_write_endpoint(self, read_write_endpoint):
        """Sets the read_write_endpoint of this InstanceFailoverGroupProperties.


        :param read_write_endpoint: The read_write_endpoint of this InstanceFailoverGroupProperties.
        :type read_write_endpoint: InstanceFailoverGroupReadWriteEndpoint
        """
        if read_write_endpoint is None:
            raise ValueError("Invalid value for `read_write_endpoint`, must not be `None`")

        self._read_write_endpoint = read_write_endpoint

    @property
    def replication_role(self):
        """Gets the replication_role of this InstanceFailoverGroupProperties.

        Local replication role of the failover group instance.

        :return: The replication_role of this InstanceFailoverGroupProperties.
        :rtype: str
        """
        return self._replication_role

    @replication_role.setter
    def replication_role(self, replication_role):
        """Sets the replication_role of this InstanceFailoverGroupProperties.

        Local replication role of the failover group instance.

        :param replication_role: The replication_role of this InstanceFailoverGroupProperties.
        :type replication_role: str
        """
        allowed_values = ["Primary", "Secondary"]  # noqa: E501
        if replication_role not in allowed_values:
            raise ValueError(
                "Invalid value for `replication_role` ({0}), must be one of {1}"
                .format(replication_role, allowed_values)
            )

        self._replication_role = replication_role

    @property
    def replication_state(self):
        """Gets the replication_state of this InstanceFailoverGroupProperties.

        Replication state of the failover group instance.

        :return: The replication_state of this InstanceFailoverGroupProperties.
        :rtype: str
        """
        return self._replication_state

    @replication_state.setter
    def replication_state(self, replication_state):
        """Sets the replication_state of this InstanceFailoverGroupProperties.

        Replication state of the failover group instance.

        :param replication_state: The replication_state of this InstanceFailoverGroupProperties.
        :type replication_state: str
        """

        self._replication_state = replication_state
