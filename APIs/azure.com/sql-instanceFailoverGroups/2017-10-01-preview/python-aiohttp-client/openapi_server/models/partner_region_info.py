# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PartnerRegionInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, location: str=None, replication_role: str=None):
        """PartnerRegionInfo - a model defined in OpenAPI

        :param location: The location of this PartnerRegionInfo.
        :param replication_role: The replication_role of this PartnerRegionInfo.
        """
        self.openapi_types = {
            'location': str,
            'replication_role': str
        }

        self.attribute_map = {
            'location': 'location',
            'replication_role': 'replicationRole'
        }

        self._location = location
        self._replication_role = replication_role

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PartnerRegionInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PartnerRegionInfo of this PartnerRegionInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def location(self):
        """Gets the location of this PartnerRegionInfo.

        Geo location of the partner managed instances.

        :return: The location of this PartnerRegionInfo.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this PartnerRegionInfo.

        Geo location of the partner managed instances.

        :param location: The location of this PartnerRegionInfo.
        :type location: str
        """

        self._location = location

    @property
    def replication_role(self):
        """Gets the replication_role of this PartnerRegionInfo.

        Replication role of the partner managed instances.

        :return: The replication_role of this PartnerRegionInfo.
        :rtype: str
        """
        return self._replication_role

    @replication_role.setter
    def replication_role(self, replication_role):
        """Sets the replication_role of this PartnerRegionInfo.

        Replication role of the partner managed instances.

        :param replication_role: The replication_role of this PartnerRegionInfo.
        :type replication_role: str
        """
        allowed_values = ["Primary", "Secondary"]  # noqa: E501
        if replication_role not in allowed_values:
            raise ValueError(
                "Invalid value for `replication_role` ({0}), must be one of {1}"
                .format(replication_role, allowed_values)
            )

        self._replication_role = replication_role
