/**
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2017-10-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIInstanceFailoverGroupsApi_H
#define OAI_OAIInstanceFailoverGroupsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIInstanceFailoverGroup.h"
#include "OAIInstanceFailoverGroupListResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIInstanceFailoverGroupsApi : public QObject {
    Q_OBJECT

public:
    OAIInstanceFailoverGroupsApi(const int timeOut = 0);
    ~OAIInstanceFailoverGroupsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  location_name QString [required]
    * @param[in]  failover_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAIInstanceFailoverGroup [required]
    */
    virtual void instanceFailoverGroupsCreateOrUpdate(const QString &resource_group_name, const QString &location_name, const QString &failover_group_name, const QString &subscription_id, const QString &api_version, const OAIInstanceFailoverGroup &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  location_name QString [required]
    * @param[in]  failover_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void instanceFailoverGroupsDelete(const QString &resource_group_name, const QString &location_name, const QString &failover_group_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  location_name QString [required]
    * @param[in]  failover_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void instanceFailoverGroupsFailover(const QString &resource_group_name, const QString &location_name, const QString &failover_group_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  location_name QString [required]
    * @param[in]  failover_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void instanceFailoverGroupsForceFailoverAllowDataLoss(const QString &resource_group_name, const QString &location_name, const QString &failover_group_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  location_name QString [required]
    * @param[in]  failover_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void instanceFailoverGroupsGet(const QString &resource_group_name, const QString &location_name, const QString &failover_group_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  location_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void instanceFailoverGroupsListByLocation(const QString &resource_group_name, const QString &location_name, const QString &subscription_id, const QString &api_version);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void instanceFailoverGroupsCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void instanceFailoverGroupsDeleteCallback(OAIHttpRequestWorker *worker);
    void instanceFailoverGroupsFailoverCallback(OAIHttpRequestWorker *worker);
    void instanceFailoverGroupsForceFailoverAllowDataLossCallback(OAIHttpRequestWorker *worker);
    void instanceFailoverGroupsGetCallback(OAIHttpRequestWorker *worker);
    void instanceFailoverGroupsListByLocationCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void instanceFailoverGroupsCreateOrUpdateSignal(OAIInstanceFailoverGroup summary);
    void instanceFailoverGroupsDeleteSignal();
    void instanceFailoverGroupsFailoverSignal(OAIInstanceFailoverGroup summary);
    void instanceFailoverGroupsForceFailoverAllowDataLossSignal(OAIInstanceFailoverGroup summary);
    void instanceFailoverGroupsGetSignal(OAIInstanceFailoverGroup summary);
    void instanceFailoverGroupsListByLocationSignal(OAIInstanceFailoverGroupListResult summary);


    void instanceFailoverGroupsCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIInstanceFailoverGroup summary);
    void instanceFailoverGroupsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void instanceFailoverGroupsFailoverSignalFull(OAIHttpRequestWorker *worker, OAIInstanceFailoverGroup summary);
    void instanceFailoverGroupsForceFailoverAllowDataLossSignalFull(OAIHttpRequestWorker *worker, OAIInstanceFailoverGroup summary);
    void instanceFailoverGroupsGetSignalFull(OAIHttpRequestWorker *worker, OAIInstanceFailoverGroup summary);
    void instanceFailoverGroupsListByLocationSignalFull(OAIHttpRequestWorker *worker, OAIInstanceFailoverGroupListResult summary);

    Q_DECL_DEPRECATED_X("Use instanceFailoverGroupsCreateOrUpdateSignalError() instead")
    void instanceFailoverGroupsCreateOrUpdateSignalE(OAIInstanceFailoverGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void instanceFailoverGroupsCreateOrUpdateSignalError(OAIInstanceFailoverGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use instanceFailoverGroupsDeleteSignalError() instead")
    void instanceFailoverGroupsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void instanceFailoverGroupsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use instanceFailoverGroupsFailoverSignalError() instead")
    void instanceFailoverGroupsFailoverSignalE(OAIInstanceFailoverGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void instanceFailoverGroupsFailoverSignalError(OAIInstanceFailoverGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use instanceFailoverGroupsForceFailoverAllowDataLossSignalError() instead")
    void instanceFailoverGroupsForceFailoverAllowDataLossSignalE(OAIInstanceFailoverGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void instanceFailoverGroupsForceFailoverAllowDataLossSignalError(OAIInstanceFailoverGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use instanceFailoverGroupsGetSignalError() instead")
    void instanceFailoverGroupsGetSignalE(OAIInstanceFailoverGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void instanceFailoverGroupsGetSignalError(OAIInstanceFailoverGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use instanceFailoverGroupsListByLocationSignalError() instead")
    void instanceFailoverGroupsListByLocationSignalE(OAIInstanceFailoverGroupListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void instanceFailoverGroupsListByLocationSignalError(OAIInstanceFailoverGroupListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use instanceFailoverGroupsCreateOrUpdateSignalErrorFull() instead")
    void instanceFailoverGroupsCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void instanceFailoverGroupsCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use instanceFailoverGroupsDeleteSignalErrorFull() instead")
    void instanceFailoverGroupsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void instanceFailoverGroupsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use instanceFailoverGroupsFailoverSignalErrorFull() instead")
    void instanceFailoverGroupsFailoverSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void instanceFailoverGroupsFailoverSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use instanceFailoverGroupsForceFailoverAllowDataLossSignalErrorFull() instead")
    void instanceFailoverGroupsForceFailoverAllowDataLossSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void instanceFailoverGroupsForceFailoverAllowDataLossSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use instanceFailoverGroupsGetSignalErrorFull() instead")
    void instanceFailoverGroupsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void instanceFailoverGroupsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use instanceFailoverGroupsListByLocationSignalErrorFull() instead")
    void instanceFailoverGroupsListByLocationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void instanceFailoverGroupsListByLocationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
