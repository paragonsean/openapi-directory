/**
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2017-10-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPartnerRegionInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPartnerRegionInfo::OAIPartnerRegionInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPartnerRegionInfo::OAIPartnerRegionInfo() {
    this->initializeModel();
}

OAIPartnerRegionInfo::~OAIPartnerRegionInfo() {}

void OAIPartnerRegionInfo::initializeModel() {

    m_location_isSet = false;
    m_location_isValid = false;

    m_replication_role_isSet = false;
    m_replication_role_isValid = false;
}

void OAIPartnerRegionInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPartnerRegionInfo::fromJsonObject(QJsonObject json) {

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_replication_role_isValid = ::OpenAPI::fromJsonValue(m_replication_role, json[QString("replicationRole")]);
    m_replication_role_isSet = !json[QString("replicationRole")].isNull() && m_replication_role_isValid;
}

QString OAIPartnerRegionInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPartnerRegionInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_replication_role_isSet) {
        obj.insert(QString("replicationRole"), ::OpenAPI::toJsonValue(m_replication_role));
    }
    return obj;
}

QString OAIPartnerRegionInfo::getLocation() const {
    return m_location;
}
void OAIPartnerRegionInfo::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIPartnerRegionInfo::is_location_Set() const{
    return m_location_isSet;
}

bool OAIPartnerRegionInfo::is_location_Valid() const{
    return m_location_isValid;
}

QString OAIPartnerRegionInfo::getReplicationRole() const {
    return m_replication_role;
}
void OAIPartnerRegionInfo::setReplicationRole(const QString &replication_role) {
    m_replication_role = replication_role;
    m_replication_role_isSet = true;
}

bool OAIPartnerRegionInfo::is_replication_role_Set() const{
    return m_replication_role_isSet;
}

bool OAIPartnerRegionInfo::is_replication_role_Valid() const{
    return m_replication_role_isValid;
}

bool OAIPartnerRegionInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_replication_role_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPartnerRegionInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
