/**
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2017-10-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIManagedInstancePairInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIManagedInstancePairInfo::OAIManagedInstancePairInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIManagedInstancePairInfo::OAIManagedInstancePairInfo() {
    this->initializeModel();
}

OAIManagedInstancePairInfo::~OAIManagedInstancePairInfo() {}

void OAIManagedInstancePairInfo::initializeModel() {

    m_partner_managed_instance_id_isSet = false;
    m_partner_managed_instance_id_isValid = false;

    m_primary_managed_instance_id_isSet = false;
    m_primary_managed_instance_id_isValid = false;
}

void OAIManagedInstancePairInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIManagedInstancePairInfo::fromJsonObject(QJsonObject json) {

    m_partner_managed_instance_id_isValid = ::OpenAPI::fromJsonValue(m_partner_managed_instance_id, json[QString("partnerManagedInstanceId")]);
    m_partner_managed_instance_id_isSet = !json[QString("partnerManagedInstanceId")].isNull() && m_partner_managed_instance_id_isValid;

    m_primary_managed_instance_id_isValid = ::OpenAPI::fromJsonValue(m_primary_managed_instance_id, json[QString("primaryManagedInstanceId")]);
    m_primary_managed_instance_id_isSet = !json[QString("primaryManagedInstanceId")].isNull() && m_primary_managed_instance_id_isValid;
}

QString OAIManagedInstancePairInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIManagedInstancePairInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_partner_managed_instance_id_isSet) {
        obj.insert(QString("partnerManagedInstanceId"), ::OpenAPI::toJsonValue(m_partner_managed_instance_id));
    }
    if (m_primary_managed_instance_id_isSet) {
        obj.insert(QString("primaryManagedInstanceId"), ::OpenAPI::toJsonValue(m_primary_managed_instance_id));
    }
    return obj;
}

QString OAIManagedInstancePairInfo::getPartnerManagedInstanceId() const {
    return m_partner_managed_instance_id;
}
void OAIManagedInstancePairInfo::setPartnerManagedInstanceId(const QString &partner_managed_instance_id) {
    m_partner_managed_instance_id = partner_managed_instance_id;
    m_partner_managed_instance_id_isSet = true;
}

bool OAIManagedInstancePairInfo::is_partner_managed_instance_id_Set() const{
    return m_partner_managed_instance_id_isSet;
}

bool OAIManagedInstancePairInfo::is_partner_managed_instance_id_Valid() const{
    return m_partner_managed_instance_id_isValid;
}

QString OAIManagedInstancePairInfo::getPrimaryManagedInstanceId() const {
    return m_primary_managed_instance_id;
}
void OAIManagedInstancePairInfo::setPrimaryManagedInstanceId(const QString &primary_managed_instance_id) {
    m_primary_managed_instance_id = primary_managed_instance_id;
    m_primary_managed_instance_id_isSet = true;
}

bool OAIManagedInstancePairInfo::is_primary_managed_instance_id_Set() const{
    return m_primary_managed_instance_id_isSet;
}

bool OAIManagedInstancePairInfo::is_primary_managed_instance_id_Valid() const{
    return m_primary_managed_instance_id_isValid;
}

bool OAIManagedInstancePairInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_partner_managed_instance_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_managed_instance_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIManagedInstancePairInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
