/**
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2017-10-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInstanceFailoverGroupReadWriteEndpoint.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInstanceFailoverGroupReadWriteEndpoint::OAIInstanceFailoverGroupReadWriteEndpoint(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInstanceFailoverGroupReadWriteEndpoint::OAIInstanceFailoverGroupReadWriteEndpoint() {
    this->initializeModel();
}

OAIInstanceFailoverGroupReadWriteEndpoint::~OAIInstanceFailoverGroupReadWriteEndpoint() {}

void OAIInstanceFailoverGroupReadWriteEndpoint::initializeModel() {

    m_failover_policy_isSet = false;
    m_failover_policy_isValid = false;

    m_failover_with_data_loss_grace_period_minutes_isSet = false;
    m_failover_with_data_loss_grace_period_minutes_isValid = false;
}

void OAIInstanceFailoverGroupReadWriteEndpoint::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInstanceFailoverGroupReadWriteEndpoint::fromJsonObject(QJsonObject json) {

    m_failover_policy_isValid = ::OpenAPI::fromJsonValue(m_failover_policy, json[QString("failoverPolicy")]);
    m_failover_policy_isSet = !json[QString("failoverPolicy")].isNull() && m_failover_policy_isValid;

    m_failover_with_data_loss_grace_period_minutes_isValid = ::OpenAPI::fromJsonValue(m_failover_with_data_loss_grace_period_minutes, json[QString("failoverWithDataLossGracePeriodMinutes")]);
    m_failover_with_data_loss_grace_period_minutes_isSet = !json[QString("failoverWithDataLossGracePeriodMinutes")].isNull() && m_failover_with_data_loss_grace_period_minutes_isValid;
}

QString OAIInstanceFailoverGroupReadWriteEndpoint::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInstanceFailoverGroupReadWriteEndpoint::asJsonObject() const {
    QJsonObject obj;
    if (m_failover_policy_isSet) {
        obj.insert(QString("failoverPolicy"), ::OpenAPI::toJsonValue(m_failover_policy));
    }
    if (m_failover_with_data_loss_grace_period_minutes_isSet) {
        obj.insert(QString("failoverWithDataLossGracePeriodMinutes"), ::OpenAPI::toJsonValue(m_failover_with_data_loss_grace_period_minutes));
    }
    return obj;
}

QString OAIInstanceFailoverGroupReadWriteEndpoint::getFailoverPolicy() const {
    return m_failover_policy;
}
void OAIInstanceFailoverGroupReadWriteEndpoint::setFailoverPolicy(const QString &failover_policy) {
    m_failover_policy = failover_policy;
    m_failover_policy_isSet = true;
}

bool OAIInstanceFailoverGroupReadWriteEndpoint::is_failover_policy_Set() const{
    return m_failover_policy_isSet;
}

bool OAIInstanceFailoverGroupReadWriteEndpoint::is_failover_policy_Valid() const{
    return m_failover_policy_isValid;
}

qint32 OAIInstanceFailoverGroupReadWriteEndpoint::getFailoverWithDataLossGracePeriodMinutes() const {
    return m_failover_with_data_loss_grace_period_minutes;
}
void OAIInstanceFailoverGroupReadWriteEndpoint::setFailoverWithDataLossGracePeriodMinutes(const qint32 &failover_with_data_loss_grace_period_minutes) {
    m_failover_with_data_loss_grace_period_minutes = failover_with_data_loss_grace_period_minutes;
    m_failover_with_data_loss_grace_period_minutes_isSet = true;
}

bool OAIInstanceFailoverGroupReadWriteEndpoint::is_failover_with_data_loss_grace_period_minutes_Set() const{
    return m_failover_with_data_loss_grace_period_minutes_isSet;
}

bool OAIInstanceFailoverGroupReadWriteEndpoint::is_failover_with_data_loss_grace_period_minutes_Valid() const{
    return m_failover_with_data_loss_grace_period_minutes_isValid;
}

bool OAIInstanceFailoverGroupReadWriteEndpoint::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_failover_policy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failover_with_data_loss_grace_period_minutes_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInstanceFailoverGroupReadWriteEndpoint::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_failover_policy_isValid && true;
}

} // namespace OpenAPI
