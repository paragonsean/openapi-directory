/*
 * ApplicationInsightsManagementClient
 * Azure Application Insights client for API keys of a component.
 *
 * The version of the OpenAPI document: 2015-05-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties that define an API key of an Application Insights Component.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:00:15.299890-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ApplicationInsightsComponentAPIKey {
  public static final String SERIALIZED_NAME_API_KEY = "apiKey";
  @SerializedName(SERIALIZED_NAME_API_KEY)
  private String apiKey;

  public static final String SERIALIZED_NAME_CREATED_DATE = "createdDate";
  @SerializedName(SERIALIZED_NAME_CREATED_DATE)
  private String createdDate;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_LINKED_READ_PROPERTIES = "linkedReadProperties";
  @SerializedName(SERIALIZED_NAME_LINKED_READ_PROPERTIES)
  private List<String> linkedReadProperties = new ArrayList<>();

  public static final String SERIALIZED_NAME_LINKED_WRITE_PROPERTIES = "linkedWriteProperties";
  @SerializedName(SERIALIZED_NAME_LINKED_WRITE_PROPERTIES)
  private List<String> linkedWriteProperties = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public ApplicationInsightsComponentAPIKey() {
  }

  public ApplicationInsightsComponentAPIKey(
     String apiKey, 
     String id
  ) {
    this();
    this.apiKey = apiKey;
    this.id = id;
  }

  /**
   * The API key value. It will be only return once when the API Key was created.
   * @return apiKey
   */
  @javax.annotation.Nullable
  public String getApiKey() {
    return apiKey;
  }



  public ApplicationInsightsComponentAPIKey createdDate(String createdDate) {
    this.createdDate = createdDate;
    return this;
  }

  /**
   * The create date of this API key.
   * @return createdDate
   */
  @javax.annotation.Nullable
  public String getCreatedDate() {
    return createdDate;
  }

  public void setCreatedDate(String createdDate) {
    this.createdDate = createdDate;
  }


  /**
   * The unique ID of the API key inside an Application Insights component. It is auto generated when the API key is created.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }



  public ApplicationInsightsComponentAPIKey linkedReadProperties(List<String> linkedReadProperties) {
    this.linkedReadProperties = linkedReadProperties;
    return this;
  }

  public ApplicationInsightsComponentAPIKey addLinkedReadPropertiesItem(String linkedReadPropertiesItem) {
    if (this.linkedReadProperties == null) {
      this.linkedReadProperties = new ArrayList<>();
    }
    this.linkedReadProperties.add(linkedReadPropertiesItem);
    return this;
  }

  /**
   * The read access rights of this API Key.
   * @return linkedReadProperties
   */
  @javax.annotation.Nullable
  public List<String> getLinkedReadProperties() {
    return linkedReadProperties;
  }

  public void setLinkedReadProperties(List<String> linkedReadProperties) {
    this.linkedReadProperties = linkedReadProperties;
  }


  public ApplicationInsightsComponentAPIKey linkedWriteProperties(List<String> linkedWriteProperties) {
    this.linkedWriteProperties = linkedWriteProperties;
    return this;
  }

  public ApplicationInsightsComponentAPIKey addLinkedWritePropertiesItem(String linkedWritePropertiesItem) {
    if (this.linkedWriteProperties == null) {
      this.linkedWriteProperties = new ArrayList<>();
    }
    this.linkedWriteProperties.add(linkedWritePropertiesItem);
    return this;
  }

  /**
   * The write access rights of this API Key.
   * @return linkedWriteProperties
   */
  @javax.annotation.Nullable
  public List<String> getLinkedWriteProperties() {
    return linkedWriteProperties;
  }

  public void setLinkedWriteProperties(List<String> linkedWriteProperties) {
    this.linkedWriteProperties = linkedWriteProperties;
  }


  public ApplicationInsightsComponentAPIKey name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the API key.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApplicationInsightsComponentAPIKey applicationInsightsComponentAPIKey = (ApplicationInsightsComponentAPIKey) o;
    return Objects.equals(this.apiKey, applicationInsightsComponentAPIKey.apiKey) &&
        Objects.equals(this.createdDate, applicationInsightsComponentAPIKey.createdDate) &&
        Objects.equals(this.id, applicationInsightsComponentAPIKey.id) &&
        Objects.equals(this.linkedReadProperties, applicationInsightsComponentAPIKey.linkedReadProperties) &&
        Objects.equals(this.linkedWriteProperties, applicationInsightsComponentAPIKey.linkedWriteProperties) &&
        Objects.equals(this.name, applicationInsightsComponentAPIKey.name);
  }

  @Override
  public int hashCode() {
    return Objects.hash(apiKey, createdDate, id, linkedReadProperties, linkedWriteProperties, name);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApplicationInsightsComponentAPIKey {\n");
    sb.append("    apiKey: ").append(toIndentedString(apiKey)).append("\n");
    sb.append("    createdDate: ").append(toIndentedString(createdDate)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    linkedReadProperties: ").append(toIndentedString(linkedReadProperties)).append("\n");
    sb.append("    linkedWriteProperties: ").append(toIndentedString(linkedWriteProperties)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("apiKey");
    openapiFields.add("createdDate");
    openapiFields.add("id");
    openapiFields.add("linkedReadProperties");
    openapiFields.add("linkedWriteProperties");
    openapiFields.add("name");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ApplicationInsightsComponentAPIKey
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApplicationInsightsComponentAPIKey.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApplicationInsightsComponentAPIKey is not found in the empty JSON string", ApplicationInsightsComponentAPIKey.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApplicationInsightsComponentAPIKey.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApplicationInsightsComponentAPIKey` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("apiKey") != null && !jsonObj.get("apiKey").isJsonNull()) && !jsonObj.get("apiKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `apiKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("apiKey").toString()));
      }
      if ((jsonObj.get("createdDate") != null && !jsonObj.get("createdDate").isJsonNull()) && !jsonObj.get("createdDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createdDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createdDate").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("linkedReadProperties") != null && !jsonObj.get("linkedReadProperties").isJsonNull() && !jsonObj.get("linkedReadProperties").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `linkedReadProperties` to be an array in the JSON string but got `%s`", jsonObj.get("linkedReadProperties").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("linkedWriteProperties") != null && !jsonObj.get("linkedWriteProperties").isJsonNull() && !jsonObj.get("linkedWriteProperties").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `linkedWriteProperties` to be an array in the JSON string but got `%s`", jsonObj.get("linkedWriteProperties").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApplicationInsightsComponentAPIKey.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApplicationInsightsComponentAPIKey' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApplicationInsightsComponentAPIKey> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApplicationInsightsComponentAPIKey.class));

       return (TypeAdapter<T>) new TypeAdapter<ApplicationInsightsComponentAPIKey>() {
           @Override
           public void write(JsonWriter out, ApplicationInsightsComponentAPIKey value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApplicationInsightsComponentAPIKey read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ApplicationInsightsComponentAPIKey given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ApplicationInsightsComponentAPIKey
   * @throws IOException if the JSON string is invalid with respect to ApplicationInsightsComponentAPIKey
   */
  public static ApplicationInsightsComponentAPIKey fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApplicationInsightsComponentAPIKey.class);
  }

  /**
   * Convert an instance of ApplicationInsightsComponentAPIKey to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

