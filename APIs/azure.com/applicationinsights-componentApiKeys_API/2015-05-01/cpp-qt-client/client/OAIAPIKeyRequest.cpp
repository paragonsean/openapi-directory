/**
 * ApplicationInsightsManagementClient
 * Azure Application Insights client for API keys of a component.
 *
 * The version of the OpenAPI document: 2015-05-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAPIKeyRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAPIKeyRequest::OAIAPIKeyRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAPIKeyRequest::OAIAPIKeyRequest() {
    this->initializeModel();
}

OAIAPIKeyRequest::~OAIAPIKeyRequest() {}

void OAIAPIKeyRequest::initializeModel() {

    m_linked_read_properties_isSet = false;
    m_linked_read_properties_isValid = false;

    m_linked_write_properties_isSet = false;
    m_linked_write_properties_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAIAPIKeyRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAPIKeyRequest::fromJsonObject(QJsonObject json) {

    m_linked_read_properties_isValid = ::OpenAPI::fromJsonValue(m_linked_read_properties, json[QString("linkedReadProperties")]);
    m_linked_read_properties_isSet = !json[QString("linkedReadProperties")].isNull() && m_linked_read_properties_isValid;

    m_linked_write_properties_isValid = ::OpenAPI::fromJsonValue(m_linked_write_properties, json[QString("linkedWriteProperties")]);
    m_linked_write_properties_isSet = !json[QString("linkedWriteProperties")].isNull() && m_linked_write_properties_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAIAPIKeyRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAPIKeyRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_linked_read_properties.size() > 0) {
        obj.insert(QString("linkedReadProperties"), ::OpenAPI::toJsonValue(m_linked_read_properties));
    }
    if (m_linked_write_properties.size() > 0) {
        obj.insert(QString("linkedWriteProperties"), ::OpenAPI::toJsonValue(m_linked_write_properties));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

QList<QString> OAIAPIKeyRequest::getLinkedReadProperties() const {
    return m_linked_read_properties;
}
void OAIAPIKeyRequest::setLinkedReadProperties(const QList<QString> &linked_read_properties) {
    m_linked_read_properties = linked_read_properties;
    m_linked_read_properties_isSet = true;
}

bool OAIAPIKeyRequest::is_linked_read_properties_Set() const{
    return m_linked_read_properties_isSet;
}

bool OAIAPIKeyRequest::is_linked_read_properties_Valid() const{
    return m_linked_read_properties_isValid;
}

QList<QString> OAIAPIKeyRequest::getLinkedWriteProperties() const {
    return m_linked_write_properties;
}
void OAIAPIKeyRequest::setLinkedWriteProperties(const QList<QString> &linked_write_properties) {
    m_linked_write_properties = linked_write_properties;
    m_linked_write_properties_isSet = true;
}

bool OAIAPIKeyRequest::is_linked_write_properties_Set() const{
    return m_linked_write_properties_isSet;
}

bool OAIAPIKeyRequest::is_linked_write_properties_Valid() const{
    return m_linked_write_properties_isValid;
}

QString OAIAPIKeyRequest::getName() const {
    return m_name;
}
void OAIAPIKeyRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAPIKeyRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAPIKeyRequest::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIAPIKeyRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_linked_read_properties.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_linked_write_properties.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAPIKeyRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
