/**
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2018-06-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDatabaseSecurityAlertPoliciesApi_H
#define OAI_OAIDatabaseSecurityAlertPoliciesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIDatabaseSecurityAlertListResult.h"
#include "OAIDatabaseSecurityAlertPolicy.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDatabaseSecurityAlertPoliciesApi : public QObject {
    Q_OBJECT

public:
    OAIDatabaseSecurityAlertPoliciesApi(const int timeOut = 0);
    ~OAIDatabaseSecurityAlertPoliciesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  security_alert_policy_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAIDatabaseSecurityAlertPolicy [required]
    */
    virtual void databaseSecurityAlertPoliciesCreateOrUpdate(const QString &resource_group_name, const QString &server_name, const QString &database_name, const QString &security_alert_policy_name, const QString &subscription_id, const QString &api_version, const OAIDatabaseSecurityAlertPolicy &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  security_alert_policy_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void databaseSecurityAlertPoliciesGet(const QString &resource_group_name, const QString &server_name, const QString &database_name, const QString &security_alert_policy_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void databaseSecurityAlertPoliciesListByDatabase(const QString &resource_group_name, const QString &server_name, const QString &database_name, const QString &subscription_id, const QString &api_version);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void databaseSecurityAlertPoliciesCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void databaseSecurityAlertPoliciesGetCallback(OAIHttpRequestWorker *worker);
    void databaseSecurityAlertPoliciesListByDatabaseCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void databaseSecurityAlertPoliciesCreateOrUpdateSignal(OAIDatabaseSecurityAlertPolicy summary);
    void databaseSecurityAlertPoliciesGetSignal(OAIDatabaseSecurityAlertPolicy summary);
    void databaseSecurityAlertPoliciesListByDatabaseSignal(OAIDatabaseSecurityAlertListResult summary);


    void databaseSecurityAlertPoliciesCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIDatabaseSecurityAlertPolicy summary);
    void databaseSecurityAlertPoliciesGetSignalFull(OAIHttpRequestWorker *worker, OAIDatabaseSecurityAlertPolicy summary);
    void databaseSecurityAlertPoliciesListByDatabaseSignalFull(OAIHttpRequestWorker *worker, OAIDatabaseSecurityAlertListResult summary);

    Q_DECL_DEPRECATED_X("Use databaseSecurityAlertPoliciesCreateOrUpdateSignalError() instead")
    void databaseSecurityAlertPoliciesCreateOrUpdateSignalE(OAIDatabaseSecurityAlertPolicy summary, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseSecurityAlertPoliciesCreateOrUpdateSignalError(OAIDatabaseSecurityAlertPolicy summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseSecurityAlertPoliciesGetSignalError() instead")
    void databaseSecurityAlertPoliciesGetSignalE(OAIDatabaseSecurityAlertPolicy summary, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseSecurityAlertPoliciesGetSignalError(OAIDatabaseSecurityAlertPolicy summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseSecurityAlertPoliciesListByDatabaseSignalError() instead")
    void databaseSecurityAlertPoliciesListByDatabaseSignalE(OAIDatabaseSecurityAlertListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseSecurityAlertPoliciesListByDatabaseSignalError(OAIDatabaseSecurityAlertListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use databaseSecurityAlertPoliciesCreateOrUpdateSignalErrorFull() instead")
    void databaseSecurityAlertPoliciesCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseSecurityAlertPoliciesCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseSecurityAlertPoliciesGetSignalErrorFull() instead")
    void databaseSecurityAlertPoliciesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseSecurityAlertPoliciesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseSecurityAlertPoliciesListByDatabaseSignalErrorFull() instead")
    void databaseSecurityAlertPoliciesListByDatabaseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseSecurityAlertPoliciesListByDatabaseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
