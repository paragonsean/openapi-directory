/*
 * RemediationsClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-07-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.RemediationDeploymentSummary;
import org.openapitools.client.model.RemediationFilters;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The remediation properties.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:08:46.850490-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RemediationProperties {
  public static final String SERIALIZED_NAME_CREATED_ON = "createdOn";
  @SerializedName(SERIALIZED_NAME_CREATED_ON)
  private OffsetDateTime createdOn;

  public static final String SERIALIZED_NAME_DEPLOYMENT_STATUS = "deploymentStatus";
  @SerializedName(SERIALIZED_NAME_DEPLOYMENT_STATUS)
  private RemediationDeploymentSummary deploymentStatus;

  public static final String SERIALIZED_NAME_FILTERS = "filters";
  @SerializedName(SERIALIZED_NAME_FILTERS)
  private RemediationFilters filters;

  public static final String SERIALIZED_NAME_LAST_UPDATED_ON = "lastUpdatedOn";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED_ON)
  private OffsetDateTime lastUpdatedOn;

  public static final String SERIALIZED_NAME_POLICY_ASSIGNMENT_ID = "policyAssignmentId";
  @SerializedName(SERIALIZED_NAME_POLICY_ASSIGNMENT_ID)
  private String policyAssignmentId;

  public static final String SERIALIZED_NAME_POLICY_DEFINITION_REFERENCE_ID = "policyDefinitionReferenceId";
  @SerializedName(SERIALIZED_NAME_POLICY_DEFINITION_REFERENCE_ID)
  private String policyDefinitionReferenceId;

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private String provisioningState;

  public RemediationProperties() {
  }

  public RemediationProperties(
     OffsetDateTime createdOn, 
     OffsetDateTime lastUpdatedOn, 
     String provisioningState
  ) {
    this();
    this.createdOn = createdOn;
    this.lastUpdatedOn = lastUpdatedOn;
    this.provisioningState = provisioningState;
  }

  /**
   * The time at which the remediation was created.
   * @return createdOn
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedOn() {
    return createdOn;
  }



  public RemediationProperties deploymentStatus(RemediationDeploymentSummary deploymentStatus) {
    this.deploymentStatus = deploymentStatus;
    return this;
  }

  /**
   * Get deploymentStatus
   * @return deploymentStatus
   */
  @javax.annotation.Nullable
  public RemediationDeploymentSummary getDeploymentStatus() {
    return deploymentStatus;
  }

  public void setDeploymentStatus(RemediationDeploymentSummary deploymentStatus) {
    this.deploymentStatus = deploymentStatus;
  }


  public RemediationProperties filters(RemediationFilters filters) {
    this.filters = filters;
    return this;
  }

  /**
   * Get filters
   * @return filters
   */
  @javax.annotation.Nullable
  public RemediationFilters getFilters() {
    return filters;
  }

  public void setFilters(RemediationFilters filters) {
    this.filters = filters;
  }


  /**
   * The time at which the remediation was last updated.
   * @return lastUpdatedOn
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastUpdatedOn() {
    return lastUpdatedOn;
  }



  public RemediationProperties policyAssignmentId(String policyAssignmentId) {
    this.policyAssignmentId = policyAssignmentId;
    return this;
  }

  /**
   * The resource ID of the policy assignment that should be remediated.
   * @return policyAssignmentId
   */
  @javax.annotation.Nullable
  public String getPolicyAssignmentId() {
    return policyAssignmentId;
  }

  public void setPolicyAssignmentId(String policyAssignmentId) {
    this.policyAssignmentId = policyAssignmentId;
  }


  public RemediationProperties policyDefinitionReferenceId(String policyDefinitionReferenceId) {
    this.policyDefinitionReferenceId = policyDefinitionReferenceId;
    return this;
  }

  /**
   * The policy definition reference ID of the individual definition that should be remediated. Required when the policy assignment being remediated assigns a policy set definition.
   * @return policyDefinitionReferenceId
   */
  @javax.annotation.Nullable
  public String getPolicyDefinitionReferenceId() {
    return policyDefinitionReferenceId;
  }

  public void setPolicyDefinitionReferenceId(String policyDefinitionReferenceId) {
    this.policyDefinitionReferenceId = policyDefinitionReferenceId;
  }


  /**
   * The status of the remediation.
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public String getProvisioningState() {
    return provisioningState;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RemediationProperties remediationProperties = (RemediationProperties) o;
    return Objects.equals(this.createdOn, remediationProperties.createdOn) &&
        Objects.equals(this.deploymentStatus, remediationProperties.deploymentStatus) &&
        Objects.equals(this.filters, remediationProperties.filters) &&
        Objects.equals(this.lastUpdatedOn, remediationProperties.lastUpdatedOn) &&
        Objects.equals(this.policyAssignmentId, remediationProperties.policyAssignmentId) &&
        Objects.equals(this.policyDefinitionReferenceId, remediationProperties.policyDefinitionReferenceId) &&
        Objects.equals(this.provisioningState, remediationProperties.provisioningState);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createdOn, deploymentStatus, filters, lastUpdatedOn, policyAssignmentId, policyDefinitionReferenceId, provisioningState);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RemediationProperties {\n");
    sb.append("    createdOn: ").append(toIndentedString(createdOn)).append("\n");
    sb.append("    deploymentStatus: ").append(toIndentedString(deploymentStatus)).append("\n");
    sb.append("    filters: ").append(toIndentedString(filters)).append("\n");
    sb.append("    lastUpdatedOn: ").append(toIndentedString(lastUpdatedOn)).append("\n");
    sb.append("    policyAssignmentId: ").append(toIndentedString(policyAssignmentId)).append("\n");
    sb.append("    policyDefinitionReferenceId: ").append(toIndentedString(policyDefinitionReferenceId)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("createdOn");
    openapiFields.add("deploymentStatus");
    openapiFields.add("filters");
    openapiFields.add("lastUpdatedOn");
    openapiFields.add("policyAssignmentId");
    openapiFields.add("policyDefinitionReferenceId");
    openapiFields.add("provisioningState");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RemediationProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RemediationProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RemediationProperties is not found in the empty JSON string", RemediationProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RemediationProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RemediationProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `deploymentStatus`
      if (jsonObj.get("deploymentStatus") != null && !jsonObj.get("deploymentStatus").isJsonNull()) {
        RemediationDeploymentSummary.validateJsonElement(jsonObj.get("deploymentStatus"));
      }
      // validate the optional field `filters`
      if (jsonObj.get("filters") != null && !jsonObj.get("filters").isJsonNull()) {
        RemediationFilters.validateJsonElement(jsonObj.get("filters"));
      }
      if ((jsonObj.get("policyAssignmentId") != null && !jsonObj.get("policyAssignmentId").isJsonNull()) && !jsonObj.get("policyAssignmentId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `policyAssignmentId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("policyAssignmentId").toString()));
      }
      if ((jsonObj.get("policyDefinitionReferenceId") != null && !jsonObj.get("policyDefinitionReferenceId").isJsonNull()) && !jsonObj.get("policyDefinitionReferenceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `policyDefinitionReferenceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("policyDefinitionReferenceId").toString()));
      }
      if ((jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) && !jsonObj.get("provisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningState").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RemediationProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RemediationProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RemediationProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RemediationProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<RemediationProperties>() {
           @Override
           public void write(JsonWriter out, RemediationProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RemediationProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RemediationProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RemediationProperties
   * @throws IOException if the JSON string is invalid with respect to RemediationProperties
   */
  public static RemediationProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RemediationProperties.class);
  }

  /**
   * Convert an instance of RemediationProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

