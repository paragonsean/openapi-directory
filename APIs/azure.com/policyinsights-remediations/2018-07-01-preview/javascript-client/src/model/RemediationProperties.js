/**
 * RemediationsClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-07-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import RemediationDeploymentSummary from './RemediationDeploymentSummary';
import RemediationFilters from './RemediationFilters';

/**
 * The RemediationProperties model module.
 * @module model/RemediationProperties
 * @version 2018-07-01-preview
 */
class RemediationProperties {
    /**
     * Constructs a new <code>RemediationProperties</code>.
     * The remediation properties.
     * @alias module:model/RemediationProperties
     */
    constructor() { 
        
        RemediationProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RemediationProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RemediationProperties} obj Optional instance to populate.
     * @return {module:model/RemediationProperties} The populated <code>RemediationProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RemediationProperties();

            if (data.hasOwnProperty('createdOn')) {
                obj['createdOn'] = ApiClient.convertToType(data['createdOn'], 'Date');
            }
            if (data.hasOwnProperty('deploymentStatus')) {
                obj['deploymentStatus'] = RemediationDeploymentSummary.constructFromObject(data['deploymentStatus']);
            }
            if (data.hasOwnProperty('filters')) {
                obj['filters'] = RemediationFilters.constructFromObject(data['filters']);
            }
            if (data.hasOwnProperty('lastUpdatedOn')) {
                obj['lastUpdatedOn'] = ApiClient.convertToType(data['lastUpdatedOn'], 'Date');
            }
            if (data.hasOwnProperty('policyAssignmentId')) {
                obj['policyAssignmentId'] = ApiClient.convertToType(data['policyAssignmentId'], 'String');
            }
            if (data.hasOwnProperty('policyDefinitionReferenceId')) {
                obj['policyDefinitionReferenceId'] = ApiClient.convertToType(data['policyDefinitionReferenceId'], 'String');
            }
            if (data.hasOwnProperty('provisioningState')) {
                obj['provisioningState'] = ApiClient.convertToType(data['provisioningState'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RemediationProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RemediationProperties</code>.
     */
    static validateJSON(data) {
        // validate the optional field `deploymentStatus`
        if (data['deploymentStatus']) { // data not null
          RemediationDeploymentSummary.validateJSON(data['deploymentStatus']);
        }
        // validate the optional field `filters`
        if (data['filters']) { // data not null
          RemediationFilters.validateJSON(data['filters']);
        }
        // ensure the json data is a string
        if (data['policyAssignmentId'] && !(typeof data['policyAssignmentId'] === 'string' || data['policyAssignmentId'] instanceof String)) {
            throw new Error("Expected the field `policyAssignmentId` to be a primitive type in the JSON string but got " + data['policyAssignmentId']);
        }
        // ensure the json data is a string
        if (data['policyDefinitionReferenceId'] && !(typeof data['policyDefinitionReferenceId'] === 'string' || data['policyDefinitionReferenceId'] instanceof String)) {
            throw new Error("Expected the field `policyDefinitionReferenceId` to be a primitive type in the JSON string but got " + data['policyDefinitionReferenceId']);
        }
        // ensure the json data is a string
        if (data['provisioningState'] && !(typeof data['provisioningState'] === 'string' || data['provisioningState'] instanceof String)) {
            throw new Error("Expected the field `provisioningState` to be a primitive type in the JSON string but got " + data['provisioningState']);
        }

        return true;
    }


}



/**
 * The time at which the remediation was created.
 * @member {Date} createdOn
 */
RemediationProperties.prototype['createdOn'] = undefined;

/**
 * @member {module:model/RemediationDeploymentSummary} deploymentStatus
 */
RemediationProperties.prototype['deploymentStatus'] = undefined;

/**
 * @member {module:model/RemediationFilters} filters
 */
RemediationProperties.prototype['filters'] = undefined;

/**
 * The time at which the remediation was last updated.
 * @member {Date} lastUpdatedOn
 */
RemediationProperties.prototype['lastUpdatedOn'] = undefined;

/**
 * The resource ID of the policy assignment that should be remediated.
 * @member {String} policyAssignmentId
 */
RemediationProperties.prototype['policyAssignmentId'] = undefined;

/**
 * The policy definition reference ID of the individual definition that should be remediated. Required when the policy assignment being remediated assigns a policy set definition.
 * @member {String} policyDefinitionReferenceId
 */
RemediationProperties.prototype['policyDefinitionReferenceId'] = undefined;

/**
 * The status of the remediation.
 * @member {String} provisioningState
 */
RemediationProperties.prototype['provisioningState'] = undefined;






export default RemediationProperties;

