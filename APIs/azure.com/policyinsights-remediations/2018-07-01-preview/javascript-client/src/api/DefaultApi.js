/**
 * RemediationsClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-07-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorResponse from '../model/ErrorResponse';
import Remediation from '../model/Remediation';
import RemediationDeploymentsListResult from '../model/RemediationDeploymentsListResult';
import RemediationListResult from '../model/RemediationListResult';

/**
* Default service.
* @module api/DefaultApi
* @version 2018-07-01-preview
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the remediationsCancelAtManagementGroup operation.
     * @callback module:api/DefaultApi~remediationsCancelAtManagementGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Remediation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancels a remediation at management group scope.
     * @param {module:model/String} managementGroupsNamespace The namespace for Microsoft Management RP; only \"Microsoft.Management\" is allowed.
     * @param {String} managementGroupId Management group ID.
     * @param {String} remediationName The name of the remediation.
     * @param {String} apiVersion Client Api Version.
     * @param {module:api/DefaultApi~remediationsCancelAtManagementGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Remediation}
     */
    remediationsCancelAtManagementGroup(managementGroupsNamespace, managementGroupId, remediationName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'managementGroupsNamespace' is set
      if (managementGroupsNamespace === undefined || managementGroupsNamespace === null) {
        throw new Error("Missing the required parameter 'managementGroupsNamespace' when calling remediationsCancelAtManagementGroup");
      }
      // verify the required parameter 'managementGroupId' is set
      if (managementGroupId === undefined || managementGroupId === null) {
        throw new Error("Missing the required parameter 'managementGroupId' when calling remediationsCancelAtManagementGroup");
      }
      // verify the required parameter 'remediationName' is set
      if (remediationName === undefined || remediationName === null) {
        throw new Error("Missing the required parameter 'remediationName' when calling remediationsCancelAtManagementGroup");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling remediationsCancelAtManagementGroup");
      }

      let pathParams = {
        'managementGroupsNamespace': managementGroupsNamespace,
        'managementGroupId': managementGroupId,
        'remediationName': remediationName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Remediation;
      return this.apiClient.callApi(
        '/providers/{managementGroupsNamespace}/managementGroups/{managementGroupId}/providers/Microsoft.PolicyInsights/remediations/{remediationName}/cancel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the remediationsCancelAtResource operation.
     * @callback module:api/DefaultApi~remediationsCancelAtResourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Remediation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancel a remediation at resource scope.
     * @param {String} resourceId Resource ID.
     * @param {String} remediationName The name of the remediation.
     * @param {String} apiVersion Client Api Version.
     * @param {module:api/DefaultApi~remediationsCancelAtResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Remediation}
     */
    remediationsCancelAtResource(resourceId, remediationName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceId' is set
      if (resourceId === undefined || resourceId === null) {
        throw new Error("Missing the required parameter 'resourceId' when calling remediationsCancelAtResource");
      }
      // verify the required parameter 'remediationName' is set
      if (remediationName === undefined || remediationName === null) {
        throw new Error("Missing the required parameter 'remediationName' when calling remediationsCancelAtResource");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling remediationsCancelAtResource");
      }

      let pathParams = {
        'resourceId': resourceId,
        'remediationName': remediationName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Remediation;
      return this.apiClient.callApi(
        '/{resourceId}/providers/Microsoft.PolicyInsights/remediations/{remediationName}/cancel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the remediationsCancelAtResourceGroup operation.
     * @callback module:api/DefaultApi~remediationsCancelAtResourceGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Remediation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancels a remediation at resource group scope.
     * @param {String} subscriptionId Microsoft Azure subscription ID.
     * @param {String} resourceGroupName Resource group name.
     * @param {String} remediationName The name of the remediation.
     * @param {String} apiVersion Client Api Version.
     * @param {module:api/DefaultApi~remediationsCancelAtResourceGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Remediation}
     */
    remediationsCancelAtResourceGroup(subscriptionId, resourceGroupName, remediationName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling remediationsCancelAtResourceGroup");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling remediationsCancelAtResourceGroup");
      }
      // verify the required parameter 'remediationName' is set
      if (remediationName === undefined || remediationName === null) {
        throw new Error("Missing the required parameter 'remediationName' when calling remediationsCancelAtResourceGroup");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling remediationsCancelAtResourceGroup");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'remediationName': remediationName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Remediation;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PolicyInsights/remediations/{remediationName}/cancel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the remediationsCancelAtSubscription operation.
     * @callback module:api/DefaultApi~remediationsCancelAtSubscriptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Remediation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancels a remediation at subscription scope.
     * @param {String} subscriptionId Microsoft Azure subscription ID.
     * @param {String} remediationName The name of the remediation.
     * @param {String} apiVersion Client Api Version.
     * @param {module:api/DefaultApi~remediationsCancelAtSubscriptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Remediation}
     */
    remediationsCancelAtSubscription(subscriptionId, remediationName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling remediationsCancelAtSubscription");
      }
      // verify the required parameter 'remediationName' is set
      if (remediationName === undefined || remediationName === null) {
        throw new Error("Missing the required parameter 'remediationName' when calling remediationsCancelAtSubscription");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling remediationsCancelAtSubscription");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'remediationName': remediationName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Remediation;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.PolicyInsights/remediations/{remediationName}/cancel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the remediationsCreateOrUpdateAtManagementGroup operation.
     * @callback module:api/DefaultApi~remediationsCreateOrUpdateAtManagementGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Remediation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates or updates a remediation at management group scope.
     * @param {module:model/String} managementGroupsNamespace The namespace for Microsoft Management RP; only \"Microsoft.Management\" is allowed.
     * @param {String} managementGroupId Management group ID.
     * @param {String} remediationName The name of the remediation.
     * @param {String} apiVersion Client Api Version.
     * @param {module:model/Remediation} parameters The remediation parameters.
     * @param {module:api/DefaultApi~remediationsCreateOrUpdateAtManagementGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Remediation}
     */
    remediationsCreateOrUpdateAtManagementGroup(managementGroupsNamespace, managementGroupId, remediationName, apiVersion, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'managementGroupsNamespace' is set
      if (managementGroupsNamespace === undefined || managementGroupsNamespace === null) {
        throw new Error("Missing the required parameter 'managementGroupsNamespace' when calling remediationsCreateOrUpdateAtManagementGroup");
      }
      // verify the required parameter 'managementGroupId' is set
      if (managementGroupId === undefined || managementGroupId === null) {
        throw new Error("Missing the required parameter 'managementGroupId' when calling remediationsCreateOrUpdateAtManagementGroup");
      }
      // verify the required parameter 'remediationName' is set
      if (remediationName === undefined || remediationName === null) {
        throw new Error("Missing the required parameter 'remediationName' when calling remediationsCreateOrUpdateAtManagementGroup");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling remediationsCreateOrUpdateAtManagementGroup");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling remediationsCreateOrUpdateAtManagementGroup");
      }

      let pathParams = {
        'managementGroupsNamespace': managementGroupsNamespace,
        'managementGroupId': managementGroupId,
        'remediationName': remediationName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Remediation;
      return this.apiClient.callApi(
        '/providers/{managementGroupsNamespace}/managementGroups/{managementGroupId}/providers/Microsoft.PolicyInsights/remediations/{remediationName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the remediationsCreateOrUpdateAtResource operation.
     * @callback module:api/DefaultApi~remediationsCreateOrUpdateAtResourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Remediation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates or updates a remediation at resource scope.
     * @param {String} resourceId Resource ID.
     * @param {String} remediationName The name of the remediation.
     * @param {String} apiVersion Client Api Version.
     * @param {module:model/Remediation} parameters The remediation parameters.
     * @param {module:api/DefaultApi~remediationsCreateOrUpdateAtResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Remediation}
     */
    remediationsCreateOrUpdateAtResource(resourceId, remediationName, apiVersion, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'resourceId' is set
      if (resourceId === undefined || resourceId === null) {
        throw new Error("Missing the required parameter 'resourceId' when calling remediationsCreateOrUpdateAtResource");
      }
      // verify the required parameter 'remediationName' is set
      if (remediationName === undefined || remediationName === null) {
        throw new Error("Missing the required parameter 'remediationName' when calling remediationsCreateOrUpdateAtResource");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling remediationsCreateOrUpdateAtResource");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling remediationsCreateOrUpdateAtResource");
      }

      let pathParams = {
        'resourceId': resourceId,
        'remediationName': remediationName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Remediation;
      return this.apiClient.callApi(
        '/{resourceId}/providers/Microsoft.PolicyInsights/remediations/{remediationName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the remediationsCreateOrUpdateAtResourceGroup operation.
     * @callback module:api/DefaultApi~remediationsCreateOrUpdateAtResourceGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Remediation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates or updates a remediation at resource group scope.
     * @param {String} subscriptionId Microsoft Azure subscription ID.
     * @param {String} resourceGroupName Resource group name.
     * @param {String} remediationName The name of the remediation.
     * @param {String} apiVersion Client Api Version.
     * @param {module:model/Remediation} parameters The remediation parameters.
     * @param {module:api/DefaultApi~remediationsCreateOrUpdateAtResourceGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Remediation}
     */
    remediationsCreateOrUpdateAtResourceGroup(subscriptionId, resourceGroupName, remediationName, apiVersion, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling remediationsCreateOrUpdateAtResourceGroup");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling remediationsCreateOrUpdateAtResourceGroup");
      }
      // verify the required parameter 'remediationName' is set
      if (remediationName === undefined || remediationName === null) {
        throw new Error("Missing the required parameter 'remediationName' when calling remediationsCreateOrUpdateAtResourceGroup");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling remediationsCreateOrUpdateAtResourceGroup");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling remediationsCreateOrUpdateAtResourceGroup");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'remediationName': remediationName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Remediation;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PolicyInsights/remediations/{remediationName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the remediationsCreateOrUpdateAtSubscription operation.
     * @callback module:api/DefaultApi~remediationsCreateOrUpdateAtSubscriptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Remediation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates or updates a remediation at subscription scope.
     * @param {String} subscriptionId Microsoft Azure subscription ID.
     * @param {String} remediationName The name of the remediation.
     * @param {String} apiVersion Client Api Version.
     * @param {module:model/Remediation} parameters The remediation parameters.
     * @param {module:api/DefaultApi~remediationsCreateOrUpdateAtSubscriptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Remediation}
     */
    remediationsCreateOrUpdateAtSubscription(subscriptionId, remediationName, apiVersion, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling remediationsCreateOrUpdateAtSubscription");
      }
      // verify the required parameter 'remediationName' is set
      if (remediationName === undefined || remediationName === null) {
        throw new Error("Missing the required parameter 'remediationName' when calling remediationsCreateOrUpdateAtSubscription");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling remediationsCreateOrUpdateAtSubscription");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling remediationsCreateOrUpdateAtSubscription");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'remediationName': remediationName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Remediation;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.PolicyInsights/remediations/{remediationName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the remediationsDeleteAtManagementGroup operation.
     * @callback module:api/DefaultApi~remediationsDeleteAtManagementGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Remediation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an existing remediation at management group scope.
     * @param {module:model/String} managementGroupsNamespace The namespace for Microsoft Management RP; only \"Microsoft.Management\" is allowed.
     * @param {String} managementGroupId Management group ID.
     * @param {String} remediationName The name of the remediation.
     * @param {String} apiVersion Client Api Version.
     * @param {module:api/DefaultApi~remediationsDeleteAtManagementGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Remediation}
     */
    remediationsDeleteAtManagementGroup(managementGroupsNamespace, managementGroupId, remediationName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'managementGroupsNamespace' is set
      if (managementGroupsNamespace === undefined || managementGroupsNamespace === null) {
        throw new Error("Missing the required parameter 'managementGroupsNamespace' when calling remediationsDeleteAtManagementGroup");
      }
      // verify the required parameter 'managementGroupId' is set
      if (managementGroupId === undefined || managementGroupId === null) {
        throw new Error("Missing the required parameter 'managementGroupId' when calling remediationsDeleteAtManagementGroup");
      }
      // verify the required parameter 'remediationName' is set
      if (remediationName === undefined || remediationName === null) {
        throw new Error("Missing the required parameter 'remediationName' when calling remediationsDeleteAtManagementGroup");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling remediationsDeleteAtManagementGroup");
      }

      let pathParams = {
        'managementGroupsNamespace': managementGroupsNamespace,
        'managementGroupId': managementGroupId,
        'remediationName': remediationName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Remediation;
      return this.apiClient.callApi(
        '/providers/{managementGroupsNamespace}/managementGroups/{managementGroupId}/providers/Microsoft.PolicyInsights/remediations/{remediationName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the remediationsDeleteAtResource operation.
     * @callback module:api/DefaultApi~remediationsDeleteAtResourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Remediation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an existing remediation at individual resource scope.
     * @param {String} resourceId Resource ID.
     * @param {String} remediationName The name of the remediation.
     * @param {String} apiVersion Client Api Version.
     * @param {module:api/DefaultApi~remediationsDeleteAtResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Remediation}
     */
    remediationsDeleteAtResource(resourceId, remediationName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceId' is set
      if (resourceId === undefined || resourceId === null) {
        throw new Error("Missing the required parameter 'resourceId' when calling remediationsDeleteAtResource");
      }
      // verify the required parameter 'remediationName' is set
      if (remediationName === undefined || remediationName === null) {
        throw new Error("Missing the required parameter 'remediationName' when calling remediationsDeleteAtResource");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling remediationsDeleteAtResource");
      }

      let pathParams = {
        'resourceId': resourceId,
        'remediationName': remediationName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Remediation;
      return this.apiClient.callApi(
        '/{resourceId}/providers/Microsoft.PolicyInsights/remediations/{remediationName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the remediationsDeleteAtResourceGroup operation.
     * @callback module:api/DefaultApi~remediationsDeleteAtResourceGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Remediation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an existing remediation at resource group scope.
     * @param {String} subscriptionId Microsoft Azure subscription ID.
     * @param {String} resourceGroupName Resource group name.
     * @param {String} remediationName The name of the remediation.
     * @param {String} apiVersion Client Api Version.
     * @param {module:api/DefaultApi~remediationsDeleteAtResourceGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Remediation}
     */
    remediationsDeleteAtResourceGroup(subscriptionId, resourceGroupName, remediationName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling remediationsDeleteAtResourceGroup");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling remediationsDeleteAtResourceGroup");
      }
      // verify the required parameter 'remediationName' is set
      if (remediationName === undefined || remediationName === null) {
        throw new Error("Missing the required parameter 'remediationName' when calling remediationsDeleteAtResourceGroup");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling remediationsDeleteAtResourceGroup");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'remediationName': remediationName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Remediation;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PolicyInsights/remediations/{remediationName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the remediationsDeleteAtSubscription operation.
     * @callback module:api/DefaultApi~remediationsDeleteAtSubscriptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Remediation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an existing remediation at subscription scope.
     * @param {String} subscriptionId Microsoft Azure subscription ID.
     * @param {String} remediationName The name of the remediation.
     * @param {String} apiVersion Client Api Version.
     * @param {module:api/DefaultApi~remediationsDeleteAtSubscriptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Remediation}
     */
    remediationsDeleteAtSubscription(subscriptionId, remediationName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling remediationsDeleteAtSubscription");
      }
      // verify the required parameter 'remediationName' is set
      if (remediationName === undefined || remediationName === null) {
        throw new Error("Missing the required parameter 'remediationName' when calling remediationsDeleteAtSubscription");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling remediationsDeleteAtSubscription");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'remediationName': remediationName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Remediation;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.PolicyInsights/remediations/{remediationName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the remediationsGetAtManagementGroup operation.
     * @callback module:api/DefaultApi~remediationsGetAtManagementGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Remediation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets an existing remediation at management group scope.
     * @param {module:model/String} managementGroupsNamespace The namespace for Microsoft Management RP; only \"Microsoft.Management\" is allowed.
     * @param {String} managementGroupId Management group ID.
     * @param {String} remediationName The name of the remediation.
     * @param {String} apiVersion Client Api Version.
     * @param {module:api/DefaultApi~remediationsGetAtManagementGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Remediation}
     */
    remediationsGetAtManagementGroup(managementGroupsNamespace, managementGroupId, remediationName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'managementGroupsNamespace' is set
      if (managementGroupsNamespace === undefined || managementGroupsNamespace === null) {
        throw new Error("Missing the required parameter 'managementGroupsNamespace' when calling remediationsGetAtManagementGroup");
      }
      // verify the required parameter 'managementGroupId' is set
      if (managementGroupId === undefined || managementGroupId === null) {
        throw new Error("Missing the required parameter 'managementGroupId' when calling remediationsGetAtManagementGroup");
      }
      // verify the required parameter 'remediationName' is set
      if (remediationName === undefined || remediationName === null) {
        throw new Error("Missing the required parameter 'remediationName' when calling remediationsGetAtManagementGroup");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling remediationsGetAtManagementGroup");
      }

      let pathParams = {
        'managementGroupsNamespace': managementGroupsNamespace,
        'managementGroupId': managementGroupId,
        'remediationName': remediationName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Remediation;
      return this.apiClient.callApi(
        '/providers/{managementGroupsNamespace}/managementGroups/{managementGroupId}/providers/Microsoft.PolicyInsights/remediations/{remediationName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the remediationsGetAtResource operation.
     * @callback module:api/DefaultApi~remediationsGetAtResourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Remediation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets an existing remediation at resource scope.
     * @param {String} resourceId Resource ID.
     * @param {String} remediationName The name of the remediation.
     * @param {String} apiVersion Client Api Version.
     * @param {module:api/DefaultApi~remediationsGetAtResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Remediation}
     */
    remediationsGetAtResource(resourceId, remediationName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceId' is set
      if (resourceId === undefined || resourceId === null) {
        throw new Error("Missing the required parameter 'resourceId' when calling remediationsGetAtResource");
      }
      // verify the required parameter 'remediationName' is set
      if (remediationName === undefined || remediationName === null) {
        throw new Error("Missing the required parameter 'remediationName' when calling remediationsGetAtResource");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling remediationsGetAtResource");
      }

      let pathParams = {
        'resourceId': resourceId,
        'remediationName': remediationName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Remediation;
      return this.apiClient.callApi(
        '/{resourceId}/providers/Microsoft.PolicyInsights/remediations/{remediationName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the remediationsGetAtResourceGroup operation.
     * @callback module:api/DefaultApi~remediationsGetAtResourceGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Remediation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets an existing remediation at resource group scope.
     * @param {String} subscriptionId Microsoft Azure subscription ID.
     * @param {String} resourceGroupName Resource group name.
     * @param {String} remediationName The name of the remediation.
     * @param {String} apiVersion Client Api Version.
     * @param {module:api/DefaultApi~remediationsGetAtResourceGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Remediation}
     */
    remediationsGetAtResourceGroup(subscriptionId, resourceGroupName, remediationName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling remediationsGetAtResourceGroup");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling remediationsGetAtResourceGroup");
      }
      // verify the required parameter 'remediationName' is set
      if (remediationName === undefined || remediationName === null) {
        throw new Error("Missing the required parameter 'remediationName' when calling remediationsGetAtResourceGroup");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling remediationsGetAtResourceGroup");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'remediationName': remediationName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Remediation;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PolicyInsights/remediations/{remediationName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the remediationsGetAtSubscription operation.
     * @callback module:api/DefaultApi~remediationsGetAtSubscriptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Remediation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets an existing remediation at subscription scope.
     * @param {String} subscriptionId Microsoft Azure subscription ID.
     * @param {String} remediationName The name of the remediation.
     * @param {String} apiVersion Client Api Version.
     * @param {module:api/DefaultApi~remediationsGetAtSubscriptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Remediation}
     */
    remediationsGetAtSubscription(subscriptionId, remediationName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling remediationsGetAtSubscription");
      }
      // verify the required parameter 'remediationName' is set
      if (remediationName === undefined || remediationName === null) {
        throw new Error("Missing the required parameter 'remediationName' when calling remediationsGetAtSubscription");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling remediationsGetAtSubscription");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'remediationName': remediationName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Remediation;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.PolicyInsights/remediations/{remediationName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the remediationsListDeploymentsAtManagementGroup operation.
     * @callback module:api/DefaultApi~remediationsListDeploymentsAtManagementGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RemediationDeploymentsListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all deployments for a remediation at management group scope.
     * @param {module:model/String} managementGroupsNamespace The namespace for Microsoft Management RP; only \"Microsoft.Management\" is allowed.
     * @param {String} managementGroupId Management group ID.
     * @param {String} remediationName The name of the remediation.
     * @param {String} apiVersion Client Api Version.
     * @param {Object} opts Optional parameters
     * @param {Number} [top] Maximum number of records to return.
     * @param {module:api/DefaultApi~remediationsListDeploymentsAtManagementGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RemediationDeploymentsListResult}
     */
    remediationsListDeploymentsAtManagementGroup(managementGroupsNamespace, managementGroupId, remediationName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'managementGroupsNamespace' is set
      if (managementGroupsNamespace === undefined || managementGroupsNamespace === null) {
        throw new Error("Missing the required parameter 'managementGroupsNamespace' when calling remediationsListDeploymentsAtManagementGroup");
      }
      // verify the required parameter 'managementGroupId' is set
      if (managementGroupId === undefined || managementGroupId === null) {
        throw new Error("Missing the required parameter 'managementGroupId' when calling remediationsListDeploymentsAtManagementGroup");
      }
      // verify the required parameter 'remediationName' is set
      if (remediationName === undefined || remediationName === null) {
        throw new Error("Missing the required parameter 'remediationName' when calling remediationsListDeploymentsAtManagementGroup");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling remediationsListDeploymentsAtManagementGroup");
      }

      let pathParams = {
        'managementGroupsNamespace': managementGroupsNamespace,
        'managementGroupId': managementGroupId,
        'remediationName': remediationName
      };
      let queryParams = {
        '$top': opts['top'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RemediationDeploymentsListResult;
      return this.apiClient.callApi(
        '/providers/{managementGroupsNamespace}/managementGroups/{managementGroupId}/providers/Microsoft.PolicyInsights/remediations/{remediationName}/listDeployments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the remediationsListDeploymentsAtResource operation.
     * @callback module:api/DefaultApi~remediationsListDeploymentsAtResourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RemediationDeploymentsListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all deployments for a remediation at resource scope.
     * @param {String} resourceId Resource ID.
     * @param {String} remediationName The name of the remediation.
     * @param {String} apiVersion Client Api Version.
     * @param {Object} opts Optional parameters
     * @param {Number} [top] Maximum number of records to return.
     * @param {module:api/DefaultApi~remediationsListDeploymentsAtResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RemediationDeploymentsListResult}
     */
    remediationsListDeploymentsAtResource(resourceId, remediationName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceId' is set
      if (resourceId === undefined || resourceId === null) {
        throw new Error("Missing the required parameter 'resourceId' when calling remediationsListDeploymentsAtResource");
      }
      // verify the required parameter 'remediationName' is set
      if (remediationName === undefined || remediationName === null) {
        throw new Error("Missing the required parameter 'remediationName' when calling remediationsListDeploymentsAtResource");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling remediationsListDeploymentsAtResource");
      }

      let pathParams = {
        'resourceId': resourceId,
        'remediationName': remediationName
      };
      let queryParams = {
        '$top': opts['top'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RemediationDeploymentsListResult;
      return this.apiClient.callApi(
        '/{resourceId}/providers/Microsoft.PolicyInsights/remediations/{remediationName}/listDeployments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the remediationsListDeploymentsAtResourceGroup operation.
     * @callback module:api/DefaultApi~remediationsListDeploymentsAtResourceGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RemediationDeploymentsListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all deployments for a remediation at resource group scope.
     * @param {String} subscriptionId Microsoft Azure subscription ID.
     * @param {String} resourceGroupName Resource group name.
     * @param {String} remediationName The name of the remediation.
     * @param {String} apiVersion Client Api Version.
     * @param {Object} opts Optional parameters
     * @param {Number} [top] Maximum number of records to return.
     * @param {module:api/DefaultApi~remediationsListDeploymentsAtResourceGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RemediationDeploymentsListResult}
     */
    remediationsListDeploymentsAtResourceGroup(subscriptionId, resourceGroupName, remediationName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling remediationsListDeploymentsAtResourceGroup");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling remediationsListDeploymentsAtResourceGroup");
      }
      // verify the required parameter 'remediationName' is set
      if (remediationName === undefined || remediationName === null) {
        throw new Error("Missing the required parameter 'remediationName' when calling remediationsListDeploymentsAtResourceGroup");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling remediationsListDeploymentsAtResourceGroup");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'remediationName': remediationName
      };
      let queryParams = {
        '$top': opts['top'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RemediationDeploymentsListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PolicyInsights/remediations/{remediationName}/listDeployments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the remediationsListDeploymentsAtSubscription operation.
     * @callback module:api/DefaultApi~remediationsListDeploymentsAtSubscriptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RemediationDeploymentsListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all deployments for a remediation at subscription scope.
     * @param {String} subscriptionId Microsoft Azure subscription ID.
     * @param {String} remediationName The name of the remediation.
     * @param {String} apiVersion Client Api Version.
     * @param {Object} opts Optional parameters
     * @param {Number} [top] Maximum number of records to return.
     * @param {module:api/DefaultApi~remediationsListDeploymentsAtSubscriptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RemediationDeploymentsListResult}
     */
    remediationsListDeploymentsAtSubscription(subscriptionId, remediationName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling remediationsListDeploymentsAtSubscription");
      }
      // verify the required parameter 'remediationName' is set
      if (remediationName === undefined || remediationName === null) {
        throw new Error("Missing the required parameter 'remediationName' when calling remediationsListDeploymentsAtSubscription");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling remediationsListDeploymentsAtSubscription");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'remediationName': remediationName
      };
      let queryParams = {
        '$top': opts['top'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RemediationDeploymentsListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.PolicyInsights/remediations/{remediationName}/listDeployments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the remediationsListForManagementGroup operation.
     * @callback module:api/DefaultApi~remediationsListForManagementGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RemediationListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all remediations for the management group.
     * @param {module:model/String} managementGroupsNamespace The namespace for Microsoft Management RP; only \"Microsoft.Management\" is allowed.
     * @param {String} managementGroupId Management group ID.
     * @param {String} apiVersion Client Api Version.
     * @param {Object} opts Optional parameters
     * @param {Number} [top] Maximum number of records to return.
     * @param {String} [filter] OData filter expression.
     * @param {module:api/DefaultApi~remediationsListForManagementGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RemediationListResult}
     */
    remediationsListForManagementGroup(managementGroupsNamespace, managementGroupId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'managementGroupsNamespace' is set
      if (managementGroupsNamespace === undefined || managementGroupsNamespace === null) {
        throw new Error("Missing the required parameter 'managementGroupsNamespace' when calling remediationsListForManagementGroup");
      }
      // verify the required parameter 'managementGroupId' is set
      if (managementGroupId === undefined || managementGroupId === null) {
        throw new Error("Missing the required parameter 'managementGroupId' when calling remediationsListForManagementGroup");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling remediationsListForManagementGroup");
      }

      let pathParams = {
        'managementGroupsNamespace': managementGroupsNamespace,
        'managementGroupId': managementGroupId
      };
      let queryParams = {
        '$top': opts['top'],
        '$filter': opts['filter'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RemediationListResult;
      return this.apiClient.callApi(
        '/providers/{managementGroupsNamespace}/managementGroups/{managementGroupId}/providers/Microsoft.PolicyInsights/remediations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the remediationsListForResource operation.
     * @callback module:api/DefaultApi~remediationsListForResourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RemediationListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all remediations for a resource.
     * @param {String} resourceId Resource ID.
     * @param {String} apiVersion Client Api Version.
     * @param {Object} opts Optional parameters
     * @param {Number} [top] Maximum number of records to return.
     * @param {String} [filter] OData filter expression.
     * @param {module:api/DefaultApi~remediationsListForResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RemediationListResult}
     */
    remediationsListForResource(resourceId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceId' is set
      if (resourceId === undefined || resourceId === null) {
        throw new Error("Missing the required parameter 'resourceId' when calling remediationsListForResource");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling remediationsListForResource");
      }

      let pathParams = {
        'resourceId': resourceId
      };
      let queryParams = {
        '$top': opts['top'],
        '$filter': opts['filter'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RemediationListResult;
      return this.apiClient.callApi(
        '/{resourceId}/providers/Microsoft.PolicyInsights/remediations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the remediationsListForResourceGroup operation.
     * @callback module:api/DefaultApi~remediationsListForResourceGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RemediationListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all remediations for the subscription.
     * @param {String} subscriptionId Microsoft Azure subscription ID.
     * @param {String} resourceGroupName Resource group name.
     * @param {String} apiVersion Client Api Version.
     * @param {Object} opts Optional parameters
     * @param {Number} [top] Maximum number of records to return.
     * @param {String} [filter] OData filter expression.
     * @param {module:api/DefaultApi~remediationsListForResourceGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RemediationListResult}
     */
    remediationsListForResourceGroup(subscriptionId, resourceGroupName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling remediationsListForResourceGroup");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling remediationsListForResourceGroup");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling remediationsListForResourceGroup");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName
      };
      let queryParams = {
        '$top': opts['top'],
        '$filter': opts['filter'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RemediationListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PolicyInsights/remediations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the remediationsListForSubscription operation.
     * @callback module:api/DefaultApi~remediationsListForSubscriptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RemediationListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all remediations for the subscription.
     * @param {String} subscriptionId Microsoft Azure subscription ID.
     * @param {String} apiVersion Client Api Version.
     * @param {Object} opts Optional parameters
     * @param {Number} [top] Maximum number of records to return.
     * @param {String} [filter] OData filter expression.
     * @param {module:api/DefaultApi~remediationsListForSubscriptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RemediationListResult}
     */
    remediationsListForSubscription(subscriptionId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling remediationsListForSubscription");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling remediationsListForSubscription");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        '$top': opts['top'],
        '$filter': opts['filter'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RemediationListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.PolicyInsights/remediations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
