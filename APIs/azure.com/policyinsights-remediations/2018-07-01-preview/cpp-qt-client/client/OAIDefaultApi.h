/**
 * RemediationsClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-07-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIErrorResponse.h"
#include "OAIRemediation.h"
#include "OAIRemediationDeploymentsListResult.h"
#include "OAIRemediationListResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  management_groups_namespace QString [required]
    * @param[in]  management_group_id QString [required]
    * @param[in]  remediation_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void remediationsCancelAtManagementGroup(const QString &management_groups_namespace, const QString &management_group_id, const QString &remediation_name, const QString &api_version);

    /**
    * @param[in]  resource_id QString [required]
    * @param[in]  remediation_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void remediationsCancelAtResource(const QString &resource_id, const QString &remediation_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  remediation_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void remediationsCancelAtResourceGroup(const QString &subscription_id, const QString &resource_group_name, const QString &remediation_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  remediation_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void remediationsCancelAtSubscription(const QString &subscription_id, const QString &remediation_name, const QString &api_version);

    /**
    * @param[in]  management_groups_namespace QString [required]
    * @param[in]  management_group_id QString [required]
    * @param[in]  remediation_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAIRemediation [required]
    */
    virtual void remediationsCreateOrUpdateAtManagementGroup(const QString &management_groups_namespace, const QString &management_group_id, const QString &remediation_name, const QString &api_version, const OAIRemediation &parameters);

    /**
    * @param[in]  resource_id QString [required]
    * @param[in]  remediation_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAIRemediation [required]
    */
    virtual void remediationsCreateOrUpdateAtResource(const QString &resource_id, const QString &remediation_name, const QString &api_version, const OAIRemediation &parameters);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  remediation_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAIRemediation [required]
    */
    virtual void remediationsCreateOrUpdateAtResourceGroup(const QString &subscription_id, const QString &resource_group_name, const QString &remediation_name, const QString &api_version, const OAIRemediation &parameters);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  remediation_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAIRemediation [required]
    */
    virtual void remediationsCreateOrUpdateAtSubscription(const QString &subscription_id, const QString &remediation_name, const QString &api_version, const OAIRemediation &parameters);

    /**
    * @param[in]  management_groups_namespace QString [required]
    * @param[in]  management_group_id QString [required]
    * @param[in]  remediation_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void remediationsDeleteAtManagementGroup(const QString &management_groups_namespace, const QString &management_group_id, const QString &remediation_name, const QString &api_version);

    /**
    * @param[in]  resource_id QString [required]
    * @param[in]  remediation_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void remediationsDeleteAtResource(const QString &resource_id, const QString &remediation_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  remediation_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void remediationsDeleteAtResourceGroup(const QString &subscription_id, const QString &resource_group_name, const QString &remediation_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  remediation_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void remediationsDeleteAtSubscription(const QString &subscription_id, const QString &remediation_name, const QString &api_version);

    /**
    * @param[in]  management_groups_namespace QString [required]
    * @param[in]  management_group_id QString [required]
    * @param[in]  remediation_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void remediationsGetAtManagementGroup(const QString &management_groups_namespace, const QString &management_group_id, const QString &remediation_name, const QString &api_version);

    /**
    * @param[in]  resource_id QString [required]
    * @param[in]  remediation_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void remediationsGetAtResource(const QString &resource_id, const QString &remediation_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  remediation_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void remediationsGetAtResourceGroup(const QString &subscription_id, const QString &resource_group_name, const QString &remediation_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  remediation_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void remediationsGetAtSubscription(const QString &subscription_id, const QString &remediation_name, const QString &api_version);

    /**
    * @param[in]  management_groups_namespace QString [required]
    * @param[in]  management_group_id QString [required]
    * @param[in]  remediation_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  top qint32 [optional]
    */
    virtual void remediationsListDeploymentsAtManagementGroup(const QString &management_groups_namespace, const QString &management_group_id, const QString &remediation_name, const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  resource_id QString [required]
    * @param[in]  remediation_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  top qint32 [optional]
    */
    virtual void remediationsListDeploymentsAtResource(const QString &resource_id, const QString &remediation_name, const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  remediation_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  top qint32 [optional]
    */
    virtual void remediationsListDeploymentsAtResourceGroup(const QString &subscription_id, const QString &resource_group_name, const QString &remediation_name, const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  remediation_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  top qint32 [optional]
    */
    virtual void remediationsListDeploymentsAtSubscription(const QString &subscription_id, const QString &remediation_name, const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  management_groups_namespace QString [required]
    * @param[in]  management_group_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  top qint32 [optional]
    * @param[in]  filter QString [optional]
    */
    virtual void remediationsListForManagementGroup(const QString &management_groups_namespace, const QString &management_group_id, const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  top qint32 [optional]
    * @param[in]  filter QString [optional]
    */
    virtual void remediationsListForResource(const QString &resource_id, const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  top qint32 [optional]
    * @param[in]  filter QString [optional]
    */
    virtual void remediationsListForResourceGroup(const QString &subscription_id, const QString &resource_group_name, const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  top qint32 [optional]
    * @param[in]  filter QString [optional]
    */
    virtual void remediationsListForSubscription(const QString &subscription_id, const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void remediationsCancelAtManagementGroupCallback(OAIHttpRequestWorker *worker);
    void remediationsCancelAtResourceCallback(OAIHttpRequestWorker *worker);
    void remediationsCancelAtResourceGroupCallback(OAIHttpRequestWorker *worker);
    void remediationsCancelAtSubscriptionCallback(OAIHttpRequestWorker *worker);
    void remediationsCreateOrUpdateAtManagementGroupCallback(OAIHttpRequestWorker *worker);
    void remediationsCreateOrUpdateAtResourceCallback(OAIHttpRequestWorker *worker);
    void remediationsCreateOrUpdateAtResourceGroupCallback(OAIHttpRequestWorker *worker);
    void remediationsCreateOrUpdateAtSubscriptionCallback(OAIHttpRequestWorker *worker);
    void remediationsDeleteAtManagementGroupCallback(OAIHttpRequestWorker *worker);
    void remediationsDeleteAtResourceCallback(OAIHttpRequestWorker *worker);
    void remediationsDeleteAtResourceGroupCallback(OAIHttpRequestWorker *worker);
    void remediationsDeleteAtSubscriptionCallback(OAIHttpRequestWorker *worker);
    void remediationsGetAtManagementGroupCallback(OAIHttpRequestWorker *worker);
    void remediationsGetAtResourceCallback(OAIHttpRequestWorker *worker);
    void remediationsGetAtResourceGroupCallback(OAIHttpRequestWorker *worker);
    void remediationsGetAtSubscriptionCallback(OAIHttpRequestWorker *worker);
    void remediationsListDeploymentsAtManagementGroupCallback(OAIHttpRequestWorker *worker);
    void remediationsListDeploymentsAtResourceCallback(OAIHttpRequestWorker *worker);
    void remediationsListDeploymentsAtResourceGroupCallback(OAIHttpRequestWorker *worker);
    void remediationsListDeploymentsAtSubscriptionCallback(OAIHttpRequestWorker *worker);
    void remediationsListForManagementGroupCallback(OAIHttpRequestWorker *worker);
    void remediationsListForResourceCallback(OAIHttpRequestWorker *worker);
    void remediationsListForResourceGroupCallback(OAIHttpRequestWorker *worker);
    void remediationsListForSubscriptionCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void remediationsCancelAtManagementGroupSignal(OAIRemediation summary);
    void remediationsCancelAtResourceSignal(OAIRemediation summary);
    void remediationsCancelAtResourceGroupSignal(OAIRemediation summary);
    void remediationsCancelAtSubscriptionSignal(OAIRemediation summary);
    void remediationsCreateOrUpdateAtManagementGroupSignal(OAIRemediation summary);
    void remediationsCreateOrUpdateAtResourceSignal(OAIRemediation summary);
    void remediationsCreateOrUpdateAtResourceGroupSignal(OAIRemediation summary);
    void remediationsCreateOrUpdateAtSubscriptionSignal(OAIRemediation summary);
    void remediationsDeleteAtManagementGroupSignal(OAIRemediation summary);
    void remediationsDeleteAtResourceSignal(OAIRemediation summary);
    void remediationsDeleteAtResourceGroupSignal(OAIRemediation summary);
    void remediationsDeleteAtSubscriptionSignal(OAIRemediation summary);
    void remediationsGetAtManagementGroupSignal(OAIRemediation summary);
    void remediationsGetAtResourceSignal(OAIRemediation summary);
    void remediationsGetAtResourceGroupSignal(OAIRemediation summary);
    void remediationsGetAtSubscriptionSignal(OAIRemediation summary);
    void remediationsListDeploymentsAtManagementGroupSignal(OAIRemediationDeploymentsListResult summary);
    void remediationsListDeploymentsAtResourceSignal(OAIRemediationDeploymentsListResult summary);
    void remediationsListDeploymentsAtResourceGroupSignal(OAIRemediationDeploymentsListResult summary);
    void remediationsListDeploymentsAtSubscriptionSignal(OAIRemediationDeploymentsListResult summary);
    void remediationsListForManagementGroupSignal(OAIRemediationListResult summary);
    void remediationsListForResourceSignal(OAIRemediationListResult summary);
    void remediationsListForResourceGroupSignal(OAIRemediationListResult summary);
    void remediationsListForSubscriptionSignal(OAIRemediationListResult summary);


    void remediationsCancelAtManagementGroupSignalFull(OAIHttpRequestWorker *worker, OAIRemediation summary);
    void remediationsCancelAtResourceSignalFull(OAIHttpRequestWorker *worker, OAIRemediation summary);
    void remediationsCancelAtResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAIRemediation summary);
    void remediationsCancelAtSubscriptionSignalFull(OAIHttpRequestWorker *worker, OAIRemediation summary);
    void remediationsCreateOrUpdateAtManagementGroupSignalFull(OAIHttpRequestWorker *worker, OAIRemediation summary);
    void remediationsCreateOrUpdateAtResourceSignalFull(OAIHttpRequestWorker *worker, OAIRemediation summary);
    void remediationsCreateOrUpdateAtResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAIRemediation summary);
    void remediationsCreateOrUpdateAtSubscriptionSignalFull(OAIHttpRequestWorker *worker, OAIRemediation summary);
    void remediationsDeleteAtManagementGroupSignalFull(OAIHttpRequestWorker *worker, OAIRemediation summary);
    void remediationsDeleteAtResourceSignalFull(OAIHttpRequestWorker *worker, OAIRemediation summary);
    void remediationsDeleteAtResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAIRemediation summary);
    void remediationsDeleteAtSubscriptionSignalFull(OAIHttpRequestWorker *worker, OAIRemediation summary);
    void remediationsGetAtManagementGroupSignalFull(OAIHttpRequestWorker *worker, OAIRemediation summary);
    void remediationsGetAtResourceSignalFull(OAIHttpRequestWorker *worker, OAIRemediation summary);
    void remediationsGetAtResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAIRemediation summary);
    void remediationsGetAtSubscriptionSignalFull(OAIHttpRequestWorker *worker, OAIRemediation summary);
    void remediationsListDeploymentsAtManagementGroupSignalFull(OAIHttpRequestWorker *worker, OAIRemediationDeploymentsListResult summary);
    void remediationsListDeploymentsAtResourceSignalFull(OAIHttpRequestWorker *worker, OAIRemediationDeploymentsListResult summary);
    void remediationsListDeploymentsAtResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAIRemediationDeploymentsListResult summary);
    void remediationsListDeploymentsAtSubscriptionSignalFull(OAIHttpRequestWorker *worker, OAIRemediationDeploymentsListResult summary);
    void remediationsListForManagementGroupSignalFull(OAIHttpRequestWorker *worker, OAIRemediationListResult summary);
    void remediationsListForResourceSignalFull(OAIHttpRequestWorker *worker, OAIRemediationListResult summary);
    void remediationsListForResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAIRemediationListResult summary);
    void remediationsListForSubscriptionSignalFull(OAIHttpRequestWorker *worker, OAIRemediationListResult summary);

    Q_DECL_DEPRECATED_X("Use remediationsCancelAtManagementGroupSignalError() instead")
    void remediationsCancelAtManagementGroupSignalE(OAIRemediation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void remediationsCancelAtManagementGroupSignalError(OAIRemediation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use remediationsCancelAtResourceSignalError() instead")
    void remediationsCancelAtResourceSignalE(OAIRemediation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void remediationsCancelAtResourceSignalError(OAIRemediation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use remediationsCancelAtResourceGroupSignalError() instead")
    void remediationsCancelAtResourceGroupSignalE(OAIRemediation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void remediationsCancelAtResourceGroupSignalError(OAIRemediation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use remediationsCancelAtSubscriptionSignalError() instead")
    void remediationsCancelAtSubscriptionSignalE(OAIRemediation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void remediationsCancelAtSubscriptionSignalError(OAIRemediation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use remediationsCreateOrUpdateAtManagementGroupSignalError() instead")
    void remediationsCreateOrUpdateAtManagementGroupSignalE(OAIRemediation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void remediationsCreateOrUpdateAtManagementGroupSignalError(OAIRemediation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use remediationsCreateOrUpdateAtResourceSignalError() instead")
    void remediationsCreateOrUpdateAtResourceSignalE(OAIRemediation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void remediationsCreateOrUpdateAtResourceSignalError(OAIRemediation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use remediationsCreateOrUpdateAtResourceGroupSignalError() instead")
    void remediationsCreateOrUpdateAtResourceGroupSignalE(OAIRemediation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void remediationsCreateOrUpdateAtResourceGroupSignalError(OAIRemediation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use remediationsCreateOrUpdateAtSubscriptionSignalError() instead")
    void remediationsCreateOrUpdateAtSubscriptionSignalE(OAIRemediation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void remediationsCreateOrUpdateAtSubscriptionSignalError(OAIRemediation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use remediationsDeleteAtManagementGroupSignalError() instead")
    void remediationsDeleteAtManagementGroupSignalE(OAIRemediation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void remediationsDeleteAtManagementGroupSignalError(OAIRemediation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use remediationsDeleteAtResourceSignalError() instead")
    void remediationsDeleteAtResourceSignalE(OAIRemediation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void remediationsDeleteAtResourceSignalError(OAIRemediation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use remediationsDeleteAtResourceGroupSignalError() instead")
    void remediationsDeleteAtResourceGroupSignalE(OAIRemediation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void remediationsDeleteAtResourceGroupSignalError(OAIRemediation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use remediationsDeleteAtSubscriptionSignalError() instead")
    void remediationsDeleteAtSubscriptionSignalE(OAIRemediation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void remediationsDeleteAtSubscriptionSignalError(OAIRemediation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use remediationsGetAtManagementGroupSignalError() instead")
    void remediationsGetAtManagementGroupSignalE(OAIRemediation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void remediationsGetAtManagementGroupSignalError(OAIRemediation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use remediationsGetAtResourceSignalError() instead")
    void remediationsGetAtResourceSignalE(OAIRemediation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void remediationsGetAtResourceSignalError(OAIRemediation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use remediationsGetAtResourceGroupSignalError() instead")
    void remediationsGetAtResourceGroupSignalE(OAIRemediation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void remediationsGetAtResourceGroupSignalError(OAIRemediation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use remediationsGetAtSubscriptionSignalError() instead")
    void remediationsGetAtSubscriptionSignalE(OAIRemediation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void remediationsGetAtSubscriptionSignalError(OAIRemediation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use remediationsListDeploymentsAtManagementGroupSignalError() instead")
    void remediationsListDeploymentsAtManagementGroupSignalE(OAIRemediationDeploymentsListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void remediationsListDeploymentsAtManagementGroupSignalError(OAIRemediationDeploymentsListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use remediationsListDeploymentsAtResourceSignalError() instead")
    void remediationsListDeploymentsAtResourceSignalE(OAIRemediationDeploymentsListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void remediationsListDeploymentsAtResourceSignalError(OAIRemediationDeploymentsListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use remediationsListDeploymentsAtResourceGroupSignalError() instead")
    void remediationsListDeploymentsAtResourceGroupSignalE(OAIRemediationDeploymentsListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void remediationsListDeploymentsAtResourceGroupSignalError(OAIRemediationDeploymentsListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use remediationsListDeploymentsAtSubscriptionSignalError() instead")
    void remediationsListDeploymentsAtSubscriptionSignalE(OAIRemediationDeploymentsListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void remediationsListDeploymentsAtSubscriptionSignalError(OAIRemediationDeploymentsListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use remediationsListForManagementGroupSignalError() instead")
    void remediationsListForManagementGroupSignalE(OAIRemediationListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void remediationsListForManagementGroupSignalError(OAIRemediationListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use remediationsListForResourceSignalError() instead")
    void remediationsListForResourceSignalE(OAIRemediationListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void remediationsListForResourceSignalError(OAIRemediationListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use remediationsListForResourceGroupSignalError() instead")
    void remediationsListForResourceGroupSignalE(OAIRemediationListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void remediationsListForResourceGroupSignalError(OAIRemediationListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use remediationsListForSubscriptionSignalError() instead")
    void remediationsListForSubscriptionSignalE(OAIRemediationListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void remediationsListForSubscriptionSignalError(OAIRemediationListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use remediationsCancelAtManagementGroupSignalErrorFull() instead")
    void remediationsCancelAtManagementGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void remediationsCancelAtManagementGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use remediationsCancelAtResourceSignalErrorFull() instead")
    void remediationsCancelAtResourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void remediationsCancelAtResourceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use remediationsCancelAtResourceGroupSignalErrorFull() instead")
    void remediationsCancelAtResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void remediationsCancelAtResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use remediationsCancelAtSubscriptionSignalErrorFull() instead")
    void remediationsCancelAtSubscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void remediationsCancelAtSubscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use remediationsCreateOrUpdateAtManagementGroupSignalErrorFull() instead")
    void remediationsCreateOrUpdateAtManagementGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void remediationsCreateOrUpdateAtManagementGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use remediationsCreateOrUpdateAtResourceSignalErrorFull() instead")
    void remediationsCreateOrUpdateAtResourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void remediationsCreateOrUpdateAtResourceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use remediationsCreateOrUpdateAtResourceGroupSignalErrorFull() instead")
    void remediationsCreateOrUpdateAtResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void remediationsCreateOrUpdateAtResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use remediationsCreateOrUpdateAtSubscriptionSignalErrorFull() instead")
    void remediationsCreateOrUpdateAtSubscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void remediationsCreateOrUpdateAtSubscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use remediationsDeleteAtManagementGroupSignalErrorFull() instead")
    void remediationsDeleteAtManagementGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void remediationsDeleteAtManagementGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use remediationsDeleteAtResourceSignalErrorFull() instead")
    void remediationsDeleteAtResourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void remediationsDeleteAtResourceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use remediationsDeleteAtResourceGroupSignalErrorFull() instead")
    void remediationsDeleteAtResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void remediationsDeleteAtResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use remediationsDeleteAtSubscriptionSignalErrorFull() instead")
    void remediationsDeleteAtSubscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void remediationsDeleteAtSubscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use remediationsGetAtManagementGroupSignalErrorFull() instead")
    void remediationsGetAtManagementGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void remediationsGetAtManagementGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use remediationsGetAtResourceSignalErrorFull() instead")
    void remediationsGetAtResourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void remediationsGetAtResourceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use remediationsGetAtResourceGroupSignalErrorFull() instead")
    void remediationsGetAtResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void remediationsGetAtResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use remediationsGetAtSubscriptionSignalErrorFull() instead")
    void remediationsGetAtSubscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void remediationsGetAtSubscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use remediationsListDeploymentsAtManagementGroupSignalErrorFull() instead")
    void remediationsListDeploymentsAtManagementGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void remediationsListDeploymentsAtManagementGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use remediationsListDeploymentsAtResourceSignalErrorFull() instead")
    void remediationsListDeploymentsAtResourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void remediationsListDeploymentsAtResourceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use remediationsListDeploymentsAtResourceGroupSignalErrorFull() instead")
    void remediationsListDeploymentsAtResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void remediationsListDeploymentsAtResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use remediationsListDeploymentsAtSubscriptionSignalErrorFull() instead")
    void remediationsListDeploymentsAtSubscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void remediationsListDeploymentsAtSubscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use remediationsListForManagementGroupSignalErrorFull() instead")
    void remediationsListForManagementGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void remediationsListForManagementGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use remediationsListForResourceSignalErrorFull() instead")
    void remediationsListForResourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void remediationsListForResourceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use remediationsListForResourceGroupSignalErrorFull() instead")
    void remediationsListForResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void remediationsListForResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use remediationsListForSubscriptionSignalErrorFull() instead")
    void remediationsListForSubscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void remediationsListForSubscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
