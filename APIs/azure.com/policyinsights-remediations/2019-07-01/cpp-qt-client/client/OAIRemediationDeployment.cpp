/**
 * RemediationsClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-07-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRemediationDeployment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRemediationDeployment::OAIRemediationDeployment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRemediationDeployment::OAIRemediationDeployment() {
    this->initializeModel();
}

OAIRemediationDeployment::~OAIRemediationDeployment() {}

void OAIRemediationDeployment::initializeModel() {

    m_created_on_isSet = false;
    m_created_on_isValid = false;

    m_deployment_id_isSet = false;
    m_deployment_id_isValid = false;

    m_error_isSet = false;
    m_error_isValid = false;

    m_last_updated_on_isSet = false;
    m_last_updated_on_isValid = false;

    m_remediated_resource_id_isSet = false;
    m_remediated_resource_id_isValid = false;

    m_resource_location_isSet = false;
    m_resource_location_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIRemediationDeployment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRemediationDeployment::fromJsonObject(QJsonObject json) {

    m_created_on_isValid = ::OpenAPI::fromJsonValue(m_created_on, json[QString("createdOn")]);
    m_created_on_isSet = !json[QString("createdOn")].isNull() && m_created_on_isValid;

    m_deployment_id_isValid = ::OpenAPI::fromJsonValue(m_deployment_id, json[QString("deploymentId")]);
    m_deployment_id_isSet = !json[QString("deploymentId")].isNull() && m_deployment_id_isValid;

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("error")]);
    m_error_isSet = !json[QString("error")].isNull() && m_error_isValid;

    m_last_updated_on_isValid = ::OpenAPI::fromJsonValue(m_last_updated_on, json[QString("lastUpdatedOn")]);
    m_last_updated_on_isSet = !json[QString("lastUpdatedOn")].isNull() && m_last_updated_on_isValid;

    m_remediated_resource_id_isValid = ::OpenAPI::fromJsonValue(m_remediated_resource_id, json[QString("remediatedResourceId")]);
    m_remediated_resource_id_isSet = !json[QString("remediatedResourceId")].isNull() && m_remediated_resource_id_isValid;

    m_resource_location_isValid = ::OpenAPI::fromJsonValue(m_resource_location, json[QString("resourceLocation")]);
    m_resource_location_isSet = !json[QString("resourceLocation")].isNull() && m_resource_location_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIRemediationDeployment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRemediationDeployment::asJsonObject() const {
    QJsonObject obj;
    if (m_created_on_isSet) {
        obj.insert(QString("createdOn"), ::OpenAPI::toJsonValue(m_created_on));
    }
    if (m_deployment_id_isSet) {
        obj.insert(QString("deploymentId"), ::OpenAPI::toJsonValue(m_deployment_id));
    }
    if (m_error.isSet()) {
        obj.insert(QString("error"), ::OpenAPI::toJsonValue(m_error));
    }
    if (m_last_updated_on_isSet) {
        obj.insert(QString("lastUpdatedOn"), ::OpenAPI::toJsonValue(m_last_updated_on));
    }
    if (m_remediated_resource_id_isSet) {
        obj.insert(QString("remediatedResourceId"), ::OpenAPI::toJsonValue(m_remediated_resource_id));
    }
    if (m_resource_location_isSet) {
        obj.insert(QString("resourceLocation"), ::OpenAPI::toJsonValue(m_resource_location));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QDateTime OAIRemediationDeployment::getCreatedOn() const {
    return m_created_on;
}
void OAIRemediationDeployment::setCreatedOn(const QDateTime &created_on) {
    m_created_on = created_on;
    m_created_on_isSet = true;
}

bool OAIRemediationDeployment::is_created_on_Set() const{
    return m_created_on_isSet;
}

bool OAIRemediationDeployment::is_created_on_Valid() const{
    return m_created_on_isValid;
}

QString OAIRemediationDeployment::getDeploymentId() const {
    return m_deployment_id;
}
void OAIRemediationDeployment::setDeploymentId(const QString &deployment_id) {
    m_deployment_id = deployment_id;
    m_deployment_id_isSet = true;
}

bool OAIRemediationDeployment::is_deployment_id_Set() const{
    return m_deployment_id_isSet;
}

bool OAIRemediationDeployment::is_deployment_id_Valid() const{
    return m_deployment_id_isValid;
}

OAIErrorDefinition OAIRemediationDeployment::getError() const {
    return m_error;
}
void OAIRemediationDeployment::setError(const OAIErrorDefinition &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAIRemediationDeployment::is_error_Set() const{
    return m_error_isSet;
}

bool OAIRemediationDeployment::is_error_Valid() const{
    return m_error_isValid;
}

QDateTime OAIRemediationDeployment::getLastUpdatedOn() const {
    return m_last_updated_on;
}
void OAIRemediationDeployment::setLastUpdatedOn(const QDateTime &last_updated_on) {
    m_last_updated_on = last_updated_on;
    m_last_updated_on_isSet = true;
}

bool OAIRemediationDeployment::is_last_updated_on_Set() const{
    return m_last_updated_on_isSet;
}

bool OAIRemediationDeployment::is_last_updated_on_Valid() const{
    return m_last_updated_on_isValid;
}

QString OAIRemediationDeployment::getRemediatedResourceId() const {
    return m_remediated_resource_id;
}
void OAIRemediationDeployment::setRemediatedResourceId(const QString &remediated_resource_id) {
    m_remediated_resource_id = remediated_resource_id;
    m_remediated_resource_id_isSet = true;
}

bool OAIRemediationDeployment::is_remediated_resource_id_Set() const{
    return m_remediated_resource_id_isSet;
}

bool OAIRemediationDeployment::is_remediated_resource_id_Valid() const{
    return m_remediated_resource_id_isValid;
}

QString OAIRemediationDeployment::getResourceLocation() const {
    return m_resource_location;
}
void OAIRemediationDeployment::setResourceLocation(const QString &resource_location) {
    m_resource_location = resource_location;
    m_resource_location_isSet = true;
}

bool OAIRemediationDeployment::is_resource_location_Set() const{
    return m_resource_location_isSet;
}

bool OAIRemediationDeployment::is_resource_location_Valid() const{
    return m_resource_location_isValid;
}

QString OAIRemediationDeployment::getStatus() const {
    return m_status;
}
void OAIRemediationDeployment::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIRemediationDeployment::is_status_Set() const{
    return m_status_isSet;
}

bool OAIRemediationDeployment::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIRemediationDeployment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deployment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remediated_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRemediationDeployment::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
