/**
 * RemediationsClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-07-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRemediationProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRemediationProperties::OAIRemediationProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRemediationProperties::OAIRemediationProperties() {
    this->initializeModel();
}

OAIRemediationProperties::~OAIRemediationProperties() {}

void OAIRemediationProperties::initializeModel() {

    m_created_on_isSet = false;
    m_created_on_isValid = false;

    m_deployment_status_isSet = false;
    m_deployment_status_isValid = false;

    m_filters_isSet = false;
    m_filters_isValid = false;

    m_last_updated_on_isSet = false;
    m_last_updated_on_isValid = false;

    m_policy_assignment_id_isSet = false;
    m_policy_assignment_id_isValid = false;

    m_policy_definition_reference_id_isSet = false;
    m_policy_definition_reference_id_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_resource_discovery_mode_isSet = false;
    m_resource_discovery_mode_isValid = false;
}

void OAIRemediationProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRemediationProperties::fromJsonObject(QJsonObject json) {

    m_created_on_isValid = ::OpenAPI::fromJsonValue(m_created_on, json[QString("createdOn")]);
    m_created_on_isSet = !json[QString("createdOn")].isNull() && m_created_on_isValid;

    m_deployment_status_isValid = ::OpenAPI::fromJsonValue(m_deployment_status, json[QString("deploymentStatus")]);
    m_deployment_status_isSet = !json[QString("deploymentStatus")].isNull() && m_deployment_status_isValid;

    m_filters_isValid = ::OpenAPI::fromJsonValue(m_filters, json[QString("filters")]);
    m_filters_isSet = !json[QString("filters")].isNull() && m_filters_isValid;

    m_last_updated_on_isValid = ::OpenAPI::fromJsonValue(m_last_updated_on, json[QString("lastUpdatedOn")]);
    m_last_updated_on_isSet = !json[QString("lastUpdatedOn")].isNull() && m_last_updated_on_isValid;

    m_policy_assignment_id_isValid = ::OpenAPI::fromJsonValue(m_policy_assignment_id, json[QString("policyAssignmentId")]);
    m_policy_assignment_id_isSet = !json[QString("policyAssignmentId")].isNull() && m_policy_assignment_id_isValid;

    m_policy_definition_reference_id_isValid = ::OpenAPI::fromJsonValue(m_policy_definition_reference_id, json[QString("policyDefinitionReferenceId")]);
    m_policy_definition_reference_id_isSet = !json[QString("policyDefinitionReferenceId")].isNull() && m_policy_definition_reference_id_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_resource_discovery_mode_isValid = ::OpenAPI::fromJsonValue(m_resource_discovery_mode, json[QString("resourceDiscoveryMode")]);
    m_resource_discovery_mode_isSet = !json[QString("resourceDiscoveryMode")].isNull() && m_resource_discovery_mode_isValid;
}

QString OAIRemediationProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRemediationProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_created_on_isSet) {
        obj.insert(QString("createdOn"), ::OpenAPI::toJsonValue(m_created_on));
    }
    if (m_deployment_status.isSet()) {
        obj.insert(QString("deploymentStatus"), ::OpenAPI::toJsonValue(m_deployment_status));
    }
    if (m_filters.isSet()) {
        obj.insert(QString("filters"), ::OpenAPI::toJsonValue(m_filters));
    }
    if (m_last_updated_on_isSet) {
        obj.insert(QString("lastUpdatedOn"), ::OpenAPI::toJsonValue(m_last_updated_on));
    }
    if (m_policy_assignment_id_isSet) {
        obj.insert(QString("policyAssignmentId"), ::OpenAPI::toJsonValue(m_policy_assignment_id));
    }
    if (m_policy_definition_reference_id_isSet) {
        obj.insert(QString("policyDefinitionReferenceId"), ::OpenAPI::toJsonValue(m_policy_definition_reference_id));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_resource_discovery_mode_isSet) {
        obj.insert(QString("resourceDiscoveryMode"), ::OpenAPI::toJsonValue(m_resource_discovery_mode));
    }
    return obj;
}

QDateTime OAIRemediationProperties::getCreatedOn() const {
    return m_created_on;
}
void OAIRemediationProperties::setCreatedOn(const QDateTime &created_on) {
    m_created_on = created_on;
    m_created_on_isSet = true;
}

bool OAIRemediationProperties::is_created_on_Set() const{
    return m_created_on_isSet;
}

bool OAIRemediationProperties::is_created_on_Valid() const{
    return m_created_on_isValid;
}

OAIRemediationDeploymentSummary OAIRemediationProperties::getDeploymentStatus() const {
    return m_deployment_status;
}
void OAIRemediationProperties::setDeploymentStatus(const OAIRemediationDeploymentSummary &deployment_status) {
    m_deployment_status = deployment_status;
    m_deployment_status_isSet = true;
}

bool OAIRemediationProperties::is_deployment_status_Set() const{
    return m_deployment_status_isSet;
}

bool OAIRemediationProperties::is_deployment_status_Valid() const{
    return m_deployment_status_isValid;
}

OAIRemediationFilters OAIRemediationProperties::getFilters() const {
    return m_filters;
}
void OAIRemediationProperties::setFilters(const OAIRemediationFilters &filters) {
    m_filters = filters;
    m_filters_isSet = true;
}

bool OAIRemediationProperties::is_filters_Set() const{
    return m_filters_isSet;
}

bool OAIRemediationProperties::is_filters_Valid() const{
    return m_filters_isValid;
}

QDateTime OAIRemediationProperties::getLastUpdatedOn() const {
    return m_last_updated_on;
}
void OAIRemediationProperties::setLastUpdatedOn(const QDateTime &last_updated_on) {
    m_last_updated_on = last_updated_on;
    m_last_updated_on_isSet = true;
}

bool OAIRemediationProperties::is_last_updated_on_Set() const{
    return m_last_updated_on_isSet;
}

bool OAIRemediationProperties::is_last_updated_on_Valid() const{
    return m_last_updated_on_isValid;
}

QString OAIRemediationProperties::getPolicyAssignmentId() const {
    return m_policy_assignment_id;
}
void OAIRemediationProperties::setPolicyAssignmentId(const QString &policy_assignment_id) {
    m_policy_assignment_id = policy_assignment_id;
    m_policy_assignment_id_isSet = true;
}

bool OAIRemediationProperties::is_policy_assignment_id_Set() const{
    return m_policy_assignment_id_isSet;
}

bool OAIRemediationProperties::is_policy_assignment_id_Valid() const{
    return m_policy_assignment_id_isValid;
}

QString OAIRemediationProperties::getPolicyDefinitionReferenceId() const {
    return m_policy_definition_reference_id;
}
void OAIRemediationProperties::setPolicyDefinitionReferenceId(const QString &policy_definition_reference_id) {
    m_policy_definition_reference_id = policy_definition_reference_id;
    m_policy_definition_reference_id_isSet = true;
}

bool OAIRemediationProperties::is_policy_definition_reference_id_Set() const{
    return m_policy_definition_reference_id_isSet;
}

bool OAIRemediationProperties::is_policy_definition_reference_id_Valid() const{
    return m_policy_definition_reference_id_isValid;
}

QString OAIRemediationProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIRemediationProperties::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIRemediationProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIRemediationProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

QString OAIRemediationProperties::getResourceDiscoveryMode() const {
    return m_resource_discovery_mode;
}
void OAIRemediationProperties::setResourceDiscoveryMode(const QString &resource_discovery_mode) {
    m_resource_discovery_mode = resource_discovery_mode;
    m_resource_discovery_mode_isSet = true;
}

bool OAIRemediationProperties::is_resource_discovery_mode_Set() const{
    return m_resource_discovery_mode_isSet;
}

bool OAIRemediationProperties::is_resource_discovery_mode_Valid() const{
    return m_resource_discovery_mode_isValid;
}

bool OAIRemediationProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deployment_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_filters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy_assignment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy_definition_reference_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_discovery_mode_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRemediationProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
