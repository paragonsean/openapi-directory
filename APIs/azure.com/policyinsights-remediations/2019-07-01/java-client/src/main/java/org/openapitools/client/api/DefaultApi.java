/*
 * RemediationsClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-07-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.Remediation;
import org.openapitools.client.model.RemediationDeploymentsListResult;
import org.openapitools.client.model.RemediationListResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for remediationsCancelAtManagementGroup
     * @param managementGroupsNamespace The namespace for Microsoft Management RP; only \&quot;Microsoft.Management\&quot; is allowed. (required)
     * @param managementGroupId Management group ID. (required)
     * @param remediationName The name of the remediation. (required)
     * @param apiVersion Client Api Version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The remediation that was canceled. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call remediationsCancelAtManagementGroupCall(String managementGroupsNamespace, String managementGroupId, String remediationName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/{managementGroupsNamespace}/managementGroups/{managementGroupId}/providers/Microsoft.PolicyInsights/remediations/{remediationName}/cancel"
            .replace("{" + "managementGroupsNamespace" + "}", localVarApiClient.escapeString(managementGroupsNamespace.toString()))
            .replace("{" + "managementGroupId" + "}", localVarApiClient.escapeString(managementGroupId.toString()))
            .replace("{" + "remediationName" + "}", localVarApiClient.escapeString(remediationName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call remediationsCancelAtManagementGroupValidateBeforeCall(String managementGroupsNamespace, String managementGroupId, String remediationName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'managementGroupsNamespace' is set
        if (managementGroupsNamespace == null) {
            throw new ApiException("Missing the required parameter 'managementGroupsNamespace' when calling remediationsCancelAtManagementGroup(Async)");
        }

        // verify the required parameter 'managementGroupId' is set
        if (managementGroupId == null) {
            throw new ApiException("Missing the required parameter 'managementGroupId' when calling remediationsCancelAtManagementGroup(Async)");
        }

        // verify the required parameter 'remediationName' is set
        if (remediationName == null) {
            throw new ApiException("Missing the required parameter 'remediationName' when calling remediationsCancelAtManagementGroup(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling remediationsCancelAtManagementGroup(Async)");
        }

        return remediationsCancelAtManagementGroupCall(managementGroupsNamespace, managementGroupId, remediationName, apiVersion, _callback);

    }

    /**
     * 
     * Cancels a remediation at management group scope.
     * @param managementGroupsNamespace The namespace for Microsoft Management RP; only \&quot;Microsoft.Management\&quot; is allowed. (required)
     * @param managementGroupId Management group ID. (required)
     * @param remediationName The name of the remediation. (required)
     * @param apiVersion Client Api Version. (required)
     * @return Remediation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The remediation that was canceled. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public Remediation remediationsCancelAtManagementGroup(String managementGroupsNamespace, String managementGroupId, String remediationName, String apiVersion) throws ApiException {
        ApiResponse<Remediation> localVarResp = remediationsCancelAtManagementGroupWithHttpInfo(managementGroupsNamespace, managementGroupId, remediationName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Cancels a remediation at management group scope.
     * @param managementGroupsNamespace The namespace for Microsoft Management RP; only \&quot;Microsoft.Management\&quot; is allowed. (required)
     * @param managementGroupId Management group ID. (required)
     * @param remediationName The name of the remediation. (required)
     * @param apiVersion Client Api Version. (required)
     * @return ApiResponse&lt;Remediation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The remediation that was canceled. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Remediation> remediationsCancelAtManagementGroupWithHttpInfo(String managementGroupsNamespace, String managementGroupId, String remediationName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = remediationsCancelAtManagementGroupValidateBeforeCall(managementGroupsNamespace, managementGroupId, remediationName, apiVersion, null);
        Type localVarReturnType = new TypeToken<Remediation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Cancels a remediation at management group scope.
     * @param managementGroupsNamespace The namespace for Microsoft Management RP; only \&quot;Microsoft.Management\&quot; is allowed. (required)
     * @param managementGroupId Management group ID. (required)
     * @param remediationName The name of the remediation. (required)
     * @param apiVersion Client Api Version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The remediation that was canceled. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call remediationsCancelAtManagementGroupAsync(String managementGroupsNamespace, String managementGroupId, String remediationName, String apiVersion, final ApiCallback<Remediation> _callback) throws ApiException {

        okhttp3.Call localVarCall = remediationsCancelAtManagementGroupValidateBeforeCall(managementGroupsNamespace, managementGroupId, remediationName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<Remediation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for remediationsCancelAtResource
     * @param resourceId Resource ID. (required)
     * @param remediationName The name of the remediation. (required)
     * @param apiVersion Client Api Version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The remediation that was canceled. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call remediationsCancelAtResourceCall(String resourceId, String remediationName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{resourceId}/providers/Microsoft.PolicyInsights/remediations/{remediationName}/cancel"
            .replace("{" + "resourceId" + "}", localVarApiClient.escapeString(resourceId.toString()))
            .replace("{" + "remediationName" + "}", localVarApiClient.escapeString(remediationName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call remediationsCancelAtResourceValidateBeforeCall(String resourceId, String remediationName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceId' is set
        if (resourceId == null) {
            throw new ApiException("Missing the required parameter 'resourceId' when calling remediationsCancelAtResource(Async)");
        }

        // verify the required parameter 'remediationName' is set
        if (remediationName == null) {
            throw new ApiException("Missing the required parameter 'remediationName' when calling remediationsCancelAtResource(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling remediationsCancelAtResource(Async)");
        }

        return remediationsCancelAtResourceCall(resourceId, remediationName, apiVersion, _callback);

    }

    /**
     * 
     * Cancel a remediation at resource scope.
     * @param resourceId Resource ID. (required)
     * @param remediationName The name of the remediation. (required)
     * @param apiVersion Client Api Version. (required)
     * @return Remediation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The remediation that was canceled. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public Remediation remediationsCancelAtResource(String resourceId, String remediationName, String apiVersion) throws ApiException {
        ApiResponse<Remediation> localVarResp = remediationsCancelAtResourceWithHttpInfo(resourceId, remediationName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Cancel a remediation at resource scope.
     * @param resourceId Resource ID. (required)
     * @param remediationName The name of the remediation. (required)
     * @param apiVersion Client Api Version. (required)
     * @return ApiResponse&lt;Remediation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The remediation that was canceled. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Remediation> remediationsCancelAtResourceWithHttpInfo(String resourceId, String remediationName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = remediationsCancelAtResourceValidateBeforeCall(resourceId, remediationName, apiVersion, null);
        Type localVarReturnType = new TypeToken<Remediation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Cancel a remediation at resource scope.
     * @param resourceId Resource ID. (required)
     * @param remediationName The name of the remediation. (required)
     * @param apiVersion Client Api Version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The remediation that was canceled. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call remediationsCancelAtResourceAsync(String resourceId, String remediationName, String apiVersion, final ApiCallback<Remediation> _callback) throws ApiException {

        okhttp3.Call localVarCall = remediationsCancelAtResourceValidateBeforeCall(resourceId, remediationName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<Remediation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for remediationsCancelAtResourceGroup
     * @param subscriptionId Microsoft Azure subscription ID. (required)
     * @param resourceGroupName Resource group name. (required)
     * @param remediationName The name of the remediation. (required)
     * @param apiVersion Client Api Version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The remediation that was canceled. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call remediationsCancelAtResourceGroupCall(String subscriptionId, String resourceGroupName, String remediationName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PolicyInsights/remediations/{remediationName}/cancel"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "remediationName" + "}", localVarApiClient.escapeString(remediationName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call remediationsCancelAtResourceGroupValidateBeforeCall(String subscriptionId, String resourceGroupName, String remediationName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling remediationsCancelAtResourceGroup(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling remediationsCancelAtResourceGroup(Async)");
        }

        // verify the required parameter 'remediationName' is set
        if (remediationName == null) {
            throw new ApiException("Missing the required parameter 'remediationName' when calling remediationsCancelAtResourceGroup(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling remediationsCancelAtResourceGroup(Async)");
        }

        return remediationsCancelAtResourceGroupCall(subscriptionId, resourceGroupName, remediationName, apiVersion, _callback);

    }

    /**
     * 
     * Cancels a remediation at resource group scope.
     * @param subscriptionId Microsoft Azure subscription ID. (required)
     * @param resourceGroupName Resource group name. (required)
     * @param remediationName The name of the remediation. (required)
     * @param apiVersion Client Api Version. (required)
     * @return Remediation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The remediation that was canceled. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public Remediation remediationsCancelAtResourceGroup(String subscriptionId, String resourceGroupName, String remediationName, String apiVersion) throws ApiException {
        ApiResponse<Remediation> localVarResp = remediationsCancelAtResourceGroupWithHttpInfo(subscriptionId, resourceGroupName, remediationName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Cancels a remediation at resource group scope.
     * @param subscriptionId Microsoft Azure subscription ID. (required)
     * @param resourceGroupName Resource group name. (required)
     * @param remediationName The name of the remediation. (required)
     * @param apiVersion Client Api Version. (required)
     * @return ApiResponse&lt;Remediation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The remediation that was canceled. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Remediation> remediationsCancelAtResourceGroupWithHttpInfo(String subscriptionId, String resourceGroupName, String remediationName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = remediationsCancelAtResourceGroupValidateBeforeCall(subscriptionId, resourceGroupName, remediationName, apiVersion, null);
        Type localVarReturnType = new TypeToken<Remediation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Cancels a remediation at resource group scope.
     * @param subscriptionId Microsoft Azure subscription ID. (required)
     * @param resourceGroupName Resource group name. (required)
     * @param remediationName The name of the remediation. (required)
     * @param apiVersion Client Api Version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The remediation that was canceled. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call remediationsCancelAtResourceGroupAsync(String subscriptionId, String resourceGroupName, String remediationName, String apiVersion, final ApiCallback<Remediation> _callback) throws ApiException {

        okhttp3.Call localVarCall = remediationsCancelAtResourceGroupValidateBeforeCall(subscriptionId, resourceGroupName, remediationName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<Remediation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for remediationsCancelAtSubscription
     * @param subscriptionId Microsoft Azure subscription ID. (required)
     * @param remediationName The name of the remediation. (required)
     * @param apiVersion Client Api Version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The remediation that was canceled. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call remediationsCancelAtSubscriptionCall(String subscriptionId, String remediationName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.PolicyInsights/remediations/{remediationName}/cancel"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "remediationName" + "}", localVarApiClient.escapeString(remediationName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call remediationsCancelAtSubscriptionValidateBeforeCall(String subscriptionId, String remediationName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling remediationsCancelAtSubscription(Async)");
        }

        // verify the required parameter 'remediationName' is set
        if (remediationName == null) {
            throw new ApiException("Missing the required parameter 'remediationName' when calling remediationsCancelAtSubscription(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling remediationsCancelAtSubscription(Async)");
        }

        return remediationsCancelAtSubscriptionCall(subscriptionId, remediationName, apiVersion, _callback);

    }

    /**
     * 
     * Cancels a remediation at subscription scope.
     * @param subscriptionId Microsoft Azure subscription ID. (required)
     * @param remediationName The name of the remediation. (required)
     * @param apiVersion Client Api Version. (required)
     * @return Remediation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The remediation that was canceled. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public Remediation remediationsCancelAtSubscription(String subscriptionId, String remediationName, String apiVersion) throws ApiException {
        ApiResponse<Remediation> localVarResp = remediationsCancelAtSubscriptionWithHttpInfo(subscriptionId, remediationName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Cancels a remediation at subscription scope.
     * @param subscriptionId Microsoft Azure subscription ID. (required)
     * @param remediationName The name of the remediation. (required)
     * @param apiVersion Client Api Version. (required)
     * @return ApiResponse&lt;Remediation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The remediation that was canceled. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Remediation> remediationsCancelAtSubscriptionWithHttpInfo(String subscriptionId, String remediationName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = remediationsCancelAtSubscriptionValidateBeforeCall(subscriptionId, remediationName, apiVersion, null);
        Type localVarReturnType = new TypeToken<Remediation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Cancels a remediation at subscription scope.
     * @param subscriptionId Microsoft Azure subscription ID. (required)
     * @param remediationName The name of the remediation. (required)
     * @param apiVersion Client Api Version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The remediation that was canceled. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call remediationsCancelAtSubscriptionAsync(String subscriptionId, String remediationName, String apiVersion, final ApiCallback<Remediation> _callback) throws ApiException {

        okhttp3.Call localVarCall = remediationsCancelAtSubscriptionValidateBeforeCall(subscriptionId, remediationName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<Remediation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for remediationsCreateOrUpdateAtManagementGroup
     * @param managementGroupsNamespace The namespace for Microsoft Management RP; only \&quot;Microsoft.Management\&quot; is allowed. (required)
     * @param managementGroupId Management group ID. (required)
     * @param remediationName The name of the remediation. (required)
     * @param apiVersion Client Api Version. (required)
     * @param parameters The remediation parameters. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated remediation. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> The created remediation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call remediationsCreateOrUpdateAtManagementGroupCall(String managementGroupsNamespace, String managementGroupId, String remediationName, String apiVersion, Remediation parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/providers/{managementGroupsNamespace}/managementGroups/{managementGroupId}/providers/Microsoft.PolicyInsights/remediations/{remediationName}"
            .replace("{" + "managementGroupsNamespace" + "}", localVarApiClient.escapeString(managementGroupsNamespace.toString()))
            .replace("{" + "managementGroupId" + "}", localVarApiClient.escapeString(managementGroupId.toString()))
            .replace("{" + "remediationName" + "}", localVarApiClient.escapeString(remediationName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call remediationsCreateOrUpdateAtManagementGroupValidateBeforeCall(String managementGroupsNamespace, String managementGroupId, String remediationName, String apiVersion, Remediation parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'managementGroupsNamespace' is set
        if (managementGroupsNamespace == null) {
            throw new ApiException("Missing the required parameter 'managementGroupsNamespace' when calling remediationsCreateOrUpdateAtManagementGroup(Async)");
        }

        // verify the required parameter 'managementGroupId' is set
        if (managementGroupId == null) {
            throw new ApiException("Missing the required parameter 'managementGroupId' when calling remediationsCreateOrUpdateAtManagementGroup(Async)");
        }

        // verify the required parameter 'remediationName' is set
        if (remediationName == null) {
            throw new ApiException("Missing the required parameter 'remediationName' when calling remediationsCreateOrUpdateAtManagementGroup(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling remediationsCreateOrUpdateAtManagementGroup(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling remediationsCreateOrUpdateAtManagementGroup(Async)");
        }

        return remediationsCreateOrUpdateAtManagementGroupCall(managementGroupsNamespace, managementGroupId, remediationName, apiVersion, parameters, _callback);

    }

    /**
     * 
     * Creates or updates a remediation at management group scope.
     * @param managementGroupsNamespace The namespace for Microsoft Management RP; only \&quot;Microsoft.Management\&quot; is allowed. (required)
     * @param managementGroupId Management group ID. (required)
     * @param remediationName The name of the remediation. (required)
     * @param apiVersion Client Api Version. (required)
     * @param parameters The remediation parameters. (required)
     * @return Remediation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated remediation. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> The created remediation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public Remediation remediationsCreateOrUpdateAtManagementGroup(String managementGroupsNamespace, String managementGroupId, String remediationName, String apiVersion, Remediation parameters) throws ApiException {
        ApiResponse<Remediation> localVarResp = remediationsCreateOrUpdateAtManagementGroupWithHttpInfo(managementGroupsNamespace, managementGroupId, remediationName, apiVersion, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates or updates a remediation at management group scope.
     * @param managementGroupsNamespace The namespace for Microsoft Management RP; only \&quot;Microsoft.Management\&quot; is allowed. (required)
     * @param managementGroupId Management group ID. (required)
     * @param remediationName The name of the remediation. (required)
     * @param apiVersion Client Api Version. (required)
     * @param parameters The remediation parameters. (required)
     * @return ApiResponse&lt;Remediation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated remediation. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> The created remediation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Remediation> remediationsCreateOrUpdateAtManagementGroupWithHttpInfo(String managementGroupsNamespace, String managementGroupId, String remediationName, String apiVersion, Remediation parameters) throws ApiException {
        okhttp3.Call localVarCall = remediationsCreateOrUpdateAtManagementGroupValidateBeforeCall(managementGroupsNamespace, managementGroupId, remediationName, apiVersion, parameters, null);
        Type localVarReturnType = new TypeToken<Remediation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates or updates a remediation at management group scope.
     * @param managementGroupsNamespace The namespace for Microsoft Management RP; only \&quot;Microsoft.Management\&quot; is allowed. (required)
     * @param managementGroupId Management group ID. (required)
     * @param remediationName The name of the remediation. (required)
     * @param apiVersion Client Api Version. (required)
     * @param parameters The remediation parameters. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated remediation. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> The created remediation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call remediationsCreateOrUpdateAtManagementGroupAsync(String managementGroupsNamespace, String managementGroupId, String remediationName, String apiVersion, Remediation parameters, final ApiCallback<Remediation> _callback) throws ApiException {

        okhttp3.Call localVarCall = remediationsCreateOrUpdateAtManagementGroupValidateBeforeCall(managementGroupsNamespace, managementGroupId, remediationName, apiVersion, parameters, _callback);
        Type localVarReturnType = new TypeToken<Remediation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for remediationsCreateOrUpdateAtResource
     * @param resourceId Resource ID. (required)
     * @param remediationName The name of the remediation. (required)
     * @param apiVersion Client Api Version. (required)
     * @param parameters The remediation parameters. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated remediation. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> The created remediation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call remediationsCreateOrUpdateAtResourceCall(String resourceId, String remediationName, String apiVersion, Remediation parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/{resourceId}/providers/Microsoft.PolicyInsights/remediations/{remediationName}"
            .replace("{" + "resourceId" + "}", localVarApiClient.escapeString(resourceId.toString()))
            .replace("{" + "remediationName" + "}", localVarApiClient.escapeString(remediationName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call remediationsCreateOrUpdateAtResourceValidateBeforeCall(String resourceId, String remediationName, String apiVersion, Remediation parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceId' is set
        if (resourceId == null) {
            throw new ApiException("Missing the required parameter 'resourceId' when calling remediationsCreateOrUpdateAtResource(Async)");
        }

        // verify the required parameter 'remediationName' is set
        if (remediationName == null) {
            throw new ApiException("Missing the required parameter 'remediationName' when calling remediationsCreateOrUpdateAtResource(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling remediationsCreateOrUpdateAtResource(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling remediationsCreateOrUpdateAtResource(Async)");
        }

        return remediationsCreateOrUpdateAtResourceCall(resourceId, remediationName, apiVersion, parameters, _callback);

    }

    /**
     * 
     * Creates or updates a remediation at resource scope.
     * @param resourceId Resource ID. (required)
     * @param remediationName The name of the remediation. (required)
     * @param apiVersion Client Api Version. (required)
     * @param parameters The remediation parameters. (required)
     * @return Remediation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated remediation. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> The created remediation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public Remediation remediationsCreateOrUpdateAtResource(String resourceId, String remediationName, String apiVersion, Remediation parameters) throws ApiException {
        ApiResponse<Remediation> localVarResp = remediationsCreateOrUpdateAtResourceWithHttpInfo(resourceId, remediationName, apiVersion, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates or updates a remediation at resource scope.
     * @param resourceId Resource ID. (required)
     * @param remediationName The name of the remediation. (required)
     * @param apiVersion Client Api Version. (required)
     * @param parameters The remediation parameters. (required)
     * @return ApiResponse&lt;Remediation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated remediation. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> The created remediation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Remediation> remediationsCreateOrUpdateAtResourceWithHttpInfo(String resourceId, String remediationName, String apiVersion, Remediation parameters) throws ApiException {
        okhttp3.Call localVarCall = remediationsCreateOrUpdateAtResourceValidateBeforeCall(resourceId, remediationName, apiVersion, parameters, null);
        Type localVarReturnType = new TypeToken<Remediation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates or updates a remediation at resource scope.
     * @param resourceId Resource ID. (required)
     * @param remediationName The name of the remediation. (required)
     * @param apiVersion Client Api Version. (required)
     * @param parameters The remediation parameters. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated remediation. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> The created remediation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call remediationsCreateOrUpdateAtResourceAsync(String resourceId, String remediationName, String apiVersion, Remediation parameters, final ApiCallback<Remediation> _callback) throws ApiException {

        okhttp3.Call localVarCall = remediationsCreateOrUpdateAtResourceValidateBeforeCall(resourceId, remediationName, apiVersion, parameters, _callback);
        Type localVarReturnType = new TypeToken<Remediation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for remediationsCreateOrUpdateAtResourceGroup
     * @param subscriptionId Microsoft Azure subscription ID. (required)
     * @param resourceGroupName Resource group name. (required)
     * @param remediationName The name of the remediation. (required)
     * @param apiVersion Client Api Version. (required)
     * @param parameters The remediation parameters. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated remediation. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> The created remediation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call remediationsCreateOrUpdateAtResourceGroupCall(String subscriptionId, String resourceGroupName, String remediationName, String apiVersion, Remediation parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PolicyInsights/remediations/{remediationName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "remediationName" + "}", localVarApiClient.escapeString(remediationName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call remediationsCreateOrUpdateAtResourceGroupValidateBeforeCall(String subscriptionId, String resourceGroupName, String remediationName, String apiVersion, Remediation parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling remediationsCreateOrUpdateAtResourceGroup(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling remediationsCreateOrUpdateAtResourceGroup(Async)");
        }

        // verify the required parameter 'remediationName' is set
        if (remediationName == null) {
            throw new ApiException("Missing the required parameter 'remediationName' when calling remediationsCreateOrUpdateAtResourceGroup(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling remediationsCreateOrUpdateAtResourceGroup(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling remediationsCreateOrUpdateAtResourceGroup(Async)");
        }

        return remediationsCreateOrUpdateAtResourceGroupCall(subscriptionId, resourceGroupName, remediationName, apiVersion, parameters, _callback);

    }

    /**
     * 
     * Creates or updates a remediation at resource group scope.
     * @param subscriptionId Microsoft Azure subscription ID. (required)
     * @param resourceGroupName Resource group name. (required)
     * @param remediationName The name of the remediation. (required)
     * @param apiVersion Client Api Version. (required)
     * @param parameters The remediation parameters. (required)
     * @return Remediation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated remediation. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> The created remediation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public Remediation remediationsCreateOrUpdateAtResourceGroup(String subscriptionId, String resourceGroupName, String remediationName, String apiVersion, Remediation parameters) throws ApiException {
        ApiResponse<Remediation> localVarResp = remediationsCreateOrUpdateAtResourceGroupWithHttpInfo(subscriptionId, resourceGroupName, remediationName, apiVersion, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates or updates a remediation at resource group scope.
     * @param subscriptionId Microsoft Azure subscription ID. (required)
     * @param resourceGroupName Resource group name. (required)
     * @param remediationName The name of the remediation. (required)
     * @param apiVersion Client Api Version. (required)
     * @param parameters The remediation parameters. (required)
     * @return ApiResponse&lt;Remediation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated remediation. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> The created remediation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Remediation> remediationsCreateOrUpdateAtResourceGroupWithHttpInfo(String subscriptionId, String resourceGroupName, String remediationName, String apiVersion, Remediation parameters) throws ApiException {
        okhttp3.Call localVarCall = remediationsCreateOrUpdateAtResourceGroupValidateBeforeCall(subscriptionId, resourceGroupName, remediationName, apiVersion, parameters, null);
        Type localVarReturnType = new TypeToken<Remediation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates or updates a remediation at resource group scope.
     * @param subscriptionId Microsoft Azure subscription ID. (required)
     * @param resourceGroupName Resource group name. (required)
     * @param remediationName The name of the remediation. (required)
     * @param apiVersion Client Api Version. (required)
     * @param parameters The remediation parameters. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated remediation. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> The created remediation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call remediationsCreateOrUpdateAtResourceGroupAsync(String subscriptionId, String resourceGroupName, String remediationName, String apiVersion, Remediation parameters, final ApiCallback<Remediation> _callback) throws ApiException {

        okhttp3.Call localVarCall = remediationsCreateOrUpdateAtResourceGroupValidateBeforeCall(subscriptionId, resourceGroupName, remediationName, apiVersion, parameters, _callback);
        Type localVarReturnType = new TypeToken<Remediation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for remediationsCreateOrUpdateAtSubscription
     * @param subscriptionId Microsoft Azure subscription ID. (required)
     * @param remediationName The name of the remediation. (required)
     * @param apiVersion Client Api Version. (required)
     * @param parameters The remediation parameters. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated remediation. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> The created remediation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call remediationsCreateOrUpdateAtSubscriptionCall(String subscriptionId, String remediationName, String apiVersion, Remediation parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.PolicyInsights/remediations/{remediationName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "remediationName" + "}", localVarApiClient.escapeString(remediationName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call remediationsCreateOrUpdateAtSubscriptionValidateBeforeCall(String subscriptionId, String remediationName, String apiVersion, Remediation parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling remediationsCreateOrUpdateAtSubscription(Async)");
        }

        // verify the required parameter 'remediationName' is set
        if (remediationName == null) {
            throw new ApiException("Missing the required parameter 'remediationName' when calling remediationsCreateOrUpdateAtSubscription(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling remediationsCreateOrUpdateAtSubscription(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling remediationsCreateOrUpdateAtSubscription(Async)");
        }

        return remediationsCreateOrUpdateAtSubscriptionCall(subscriptionId, remediationName, apiVersion, parameters, _callback);

    }

    /**
     * 
     * Creates or updates a remediation at subscription scope.
     * @param subscriptionId Microsoft Azure subscription ID. (required)
     * @param remediationName The name of the remediation. (required)
     * @param apiVersion Client Api Version. (required)
     * @param parameters The remediation parameters. (required)
     * @return Remediation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated remediation. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> The created remediation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public Remediation remediationsCreateOrUpdateAtSubscription(String subscriptionId, String remediationName, String apiVersion, Remediation parameters) throws ApiException {
        ApiResponse<Remediation> localVarResp = remediationsCreateOrUpdateAtSubscriptionWithHttpInfo(subscriptionId, remediationName, apiVersion, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates or updates a remediation at subscription scope.
     * @param subscriptionId Microsoft Azure subscription ID. (required)
     * @param remediationName The name of the remediation. (required)
     * @param apiVersion Client Api Version. (required)
     * @param parameters The remediation parameters. (required)
     * @return ApiResponse&lt;Remediation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated remediation. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> The created remediation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Remediation> remediationsCreateOrUpdateAtSubscriptionWithHttpInfo(String subscriptionId, String remediationName, String apiVersion, Remediation parameters) throws ApiException {
        okhttp3.Call localVarCall = remediationsCreateOrUpdateAtSubscriptionValidateBeforeCall(subscriptionId, remediationName, apiVersion, parameters, null);
        Type localVarReturnType = new TypeToken<Remediation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates or updates a remediation at subscription scope.
     * @param subscriptionId Microsoft Azure subscription ID. (required)
     * @param remediationName The name of the remediation. (required)
     * @param apiVersion Client Api Version. (required)
     * @param parameters The remediation parameters. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated remediation. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> The created remediation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call remediationsCreateOrUpdateAtSubscriptionAsync(String subscriptionId, String remediationName, String apiVersion, Remediation parameters, final ApiCallback<Remediation> _callback) throws ApiException {

        okhttp3.Call localVarCall = remediationsCreateOrUpdateAtSubscriptionValidateBeforeCall(subscriptionId, remediationName, apiVersion, parameters, _callback);
        Type localVarReturnType = new TypeToken<Remediation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for remediationsDeleteAtManagementGroup
     * @param managementGroupsNamespace The namespace for Microsoft Management RP; only \&quot;Microsoft.Management\&quot; is allowed. (required)
     * @param managementGroupId Management group ID. (required)
     * @param remediationName The name of the remediation. (required)
     * @param apiVersion Client Api Version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The deleted remediation. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The remediation did not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call remediationsDeleteAtManagementGroupCall(String managementGroupsNamespace, String managementGroupId, String remediationName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/{managementGroupsNamespace}/managementGroups/{managementGroupId}/providers/Microsoft.PolicyInsights/remediations/{remediationName}"
            .replace("{" + "managementGroupsNamespace" + "}", localVarApiClient.escapeString(managementGroupsNamespace.toString()))
            .replace("{" + "managementGroupId" + "}", localVarApiClient.escapeString(managementGroupId.toString()))
            .replace("{" + "remediationName" + "}", localVarApiClient.escapeString(remediationName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call remediationsDeleteAtManagementGroupValidateBeforeCall(String managementGroupsNamespace, String managementGroupId, String remediationName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'managementGroupsNamespace' is set
        if (managementGroupsNamespace == null) {
            throw new ApiException("Missing the required parameter 'managementGroupsNamespace' when calling remediationsDeleteAtManagementGroup(Async)");
        }

        // verify the required parameter 'managementGroupId' is set
        if (managementGroupId == null) {
            throw new ApiException("Missing the required parameter 'managementGroupId' when calling remediationsDeleteAtManagementGroup(Async)");
        }

        // verify the required parameter 'remediationName' is set
        if (remediationName == null) {
            throw new ApiException("Missing the required parameter 'remediationName' when calling remediationsDeleteAtManagementGroup(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling remediationsDeleteAtManagementGroup(Async)");
        }

        return remediationsDeleteAtManagementGroupCall(managementGroupsNamespace, managementGroupId, remediationName, apiVersion, _callback);

    }

    /**
     * 
     * Deletes an existing remediation at management group scope.
     * @param managementGroupsNamespace The namespace for Microsoft Management RP; only \&quot;Microsoft.Management\&quot; is allowed. (required)
     * @param managementGroupId Management group ID. (required)
     * @param remediationName The name of the remediation. (required)
     * @param apiVersion Client Api Version. (required)
     * @return Remediation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The deleted remediation. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The remediation did not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public Remediation remediationsDeleteAtManagementGroup(String managementGroupsNamespace, String managementGroupId, String remediationName, String apiVersion) throws ApiException {
        ApiResponse<Remediation> localVarResp = remediationsDeleteAtManagementGroupWithHttpInfo(managementGroupsNamespace, managementGroupId, remediationName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Deletes an existing remediation at management group scope.
     * @param managementGroupsNamespace The namespace for Microsoft Management RP; only \&quot;Microsoft.Management\&quot; is allowed. (required)
     * @param managementGroupId Management group ID. (required)
     * @param remediationName The name of the remediation. (required)
     * @param apiVersion Client Api Version. (required)
     * @return ApiResponse&lt;Remediation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The deleted remediation. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The remediation did not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Remediation> remediationsDeleteAtManagementGroupWithHttpInfo(String managementGroupsNamespace, String managementGroupId, String remediationName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = remediationsDeleteAtManagementGroupValidateBeforeCall(managementGroupsNamespace, managementGroupId, remediationName, apiVersion, null);
        Type localVarReturnType = new TypeToken<Remediation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Deletes an existing remediation at management group scope.
     * @param managementGroupsNamespace The namespace for Microsoft Management RP; only \&quot;Microsoft.Management\&quot; is allowed. (required)
     * @param managementGroupId Management group ID. (required)
     * @param remediationName The name of the remediation. (required)
     * @param apiVersion Client Api Version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The deleted remediation. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The remediation did not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call remediationsDeleteAtManagementGroupAsync(String managementGroupsNamespace, String managementGroupId, String remediationName, String apiVersion, final ApiCallback<Remediation> _callback) throws ApiException {

        okhttp3.Call localVarCall = remediationsDeleteAtManagementGroupValidateBeforeCall(managementGroupsNamespace, managementGroupId, remediationName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<Remediation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for remediationsDeleteAtResource
     * @param resourceId Resource ID. (required)
     * @param remediationName The name of the remediation. (required)
     * @param apiVersion Client Api Version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The deleted remediation. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The remediation did not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call remediationsDeleteAtResourceCall(String resourceId, String remediationName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{resourceId}/providers/Microsoft.PolicyInsights/remediations/{remediationName}"
            .replace("{" + "resourceId" + "}", localVarApiClient.escapeString(resourceId.toString()))
            .replace("{" + "remediationName" + "}", localVarApiClient.escapeString(remediationName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call remediationsDeleteAtResourceValidateBeforeCall(String resourceId, String remediationName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceId' is set
        if (resourceId == null) {
            throw new ApiException("Missing the required parameter 'resourceId' when calling remediationsDeleteAtResource(Async)");
        }

        // verify the required parameter 'remediationName' is set
        if (remediationName == null) {
            throw new ApiException("Missing the required parameter 'remediationName' when calling remediationsDeleteAtResource(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling remediationsDeleteAtResource(Async)");
        }

        return remediationsDeleteAtResourceCall(resourceId, remediationName, apiVersion, _callback);

    }

    /**
     * 
     * Deletes an existing remediation at individual resource scope.
     * @param resourceId Resource ID. (required)
     * @param remediationName The name of the remediation. (required)
     * @param apiVersion Client Api Version. (required)
     * @return Remediation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The deleted remediation. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The remediation did not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public Remediation remediationsDeleteAtResource(String resourceId, String remediationName, String apiVersion) throws ApiException {
        ApiResponse<Remediation> localVarResp = remediationsDeleteAtResourceWithHttpInfo(resourceId, remediationName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Deletes an existing remediation at individual resource scope.
     * @param resourceId Resource ID. (required)
     * @param remediationName The name of the remediation. (required)
     * @param apiVersion Client Api Version. (required)
     * @return ApiResponse&lt;Remediation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The deleted remediation. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The remediation did not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Remediation> remediationsDeleteAtResourceWithHttpInfo(String resourceId, String remediationName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = remediationsDeleteAtResourceValidateBeforeCall(resourceId, remediationName, apiVersion, null);
        Type localVarReturnType = new TypeToken<Remediation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Deletes an existing remediation at individual resource scope.
     * @param resourceId Resource ID. (required)
     * @param remediationName The name of the remediation. (required)
     * @param apiVersion Client Api Version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The deleted remediation. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The remediation did not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call remediationsDeleteAtResourceAsync(String resourceId, String remediationName, String apiVersion, final ApiCallback<Remediation> _callback) throws ApiException {

        okhttp3.Call localVarCall = remediationsDeleteAtResourceValidateBeforeCall(resourceId, remediationName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<Remediation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for remediationsDeleteAtResourceGroup
     * @param subscriptionId Microsoft Azure subscription ID. (required)
     * @param resourceGroupName Resource group name. (required)
     * @param remediationName The name of the remediation. (required)
     * @param apiVersion Client Api Version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The deleted remediation. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The remediation did not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call remediationsDeleteAtResourceGroupCall(String subscriptionId, String resourceGroupName, String remediationName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PolicyInsights/remediations/{remediationName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "remediationName" + "}", localVarApiClient.escapeString(remediationName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call remediationsDeleteAtResourceGroupValidateBeforeCall(String subscriptionId, String resourceGroupName, String remediationName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling remediationsDeleteAtResourceGroup(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling remediationsDeleteAtResourceGroup(Async)");
        }

        // verify the required parameter 'remediationName' is set
        if (remediationName == null) {
            throw new ApiException("Missing the required parameter 'remediationName' when calling remediationsDeleteAtResourceGroup(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling remediationsDeleteAtResourceGroup(Async)");
        }

        return remediationsDeleteAtResourceGroupCall(subscriptionId, resourceGroupName, remediationName, apiVersion, _callback);

    }

    /**
     * 
     * Deletes an existing remediation at resource group scope.
     * @param subscriptionId Microsoft Azure subscription ID. (required)
     * @param resourceGroupName Resource group name. (required)
     * @param remediationName The name of the remediation. (required)
     * @param apiVersion Client Api Version. (required)
     * @return Remediation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The deleted remediation. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The remediation did not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public Remediation remediationsDeleteAtResourceGroup(String subscriptionId, String resourceGroupName, String remediationName, String apiVersion) throws ApiException {
        ApiResponse<Remediation> localVarResp = remediationsDeleteAtResourceGroupWithHttpInfo(subscriptionId, resourceGroupName, remediationName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Deletes an existing remediation at resource group scope.
     * @param subscriptionId Microsoft Azure subscription ID. (required)
     * @param resourceGroupName Resource group name. (required)
     * @param remediationName The name of the remediation. (required)
     * @param apiVersion Client Api Version. (required)
     * @return ApiResponse&lt;Remediation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The deleted remediation. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The remediation did not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Remediation> remediationsDeleteAtResourceGroupWithHttpInfo(String subscriptionId, String resourceGroupName, String remediationName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = remediationsDeleteAtResourceGroupValidateBeforeCall(subscriptionId, resourceGroupName, remediationName, apiVersion, null);
        Type localVarReturnType = new TypeToken<Remediation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Deletes an existing remediation at resource group scope.
     * @param subscriptionId Microsoft Azure subscription ID. (required)
     * @param resourceGroupName Resource group name. (required)
     * @param remediationName The name of the remediation. (required)
     * @param apiVersion Client Api Version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The deleted remediation. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The remediation did not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call remediationsDeleteAtResourceGroupAsync(String subscriptionId, String resourceGroupName, String remediationName, String apiVersion, final ApiCallback<Remediation> _callback) throws ApiException {

        okhttp3.Call localVarCall = remediationsDeleteAtResourceGroupValidateBeforeCall(subscriptionId, resourceGroupName, remediationName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<Remediation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for remediationsDeleteAtSubscription
     * @param subscriptionId Microsoft Azure subscription ID. (required)
     * @param remediationName The name of the remediation. (required)
     * @param apiVersion Client Api Version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The deleted remediation. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The remediation did not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call remediationsDeleteAtSubscriptionCall(String subscriptionId, String remediationName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.PolicyInsights/remediations/{remediationName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "remediationName" + "}", localVarApiClient.escapeString(remediationName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call remediationsDeleteAtSubscriptionValidateBeforeCall(String subscriptionId, String remediationName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling remediationsDeleteAtSubscription(Async)");
        }

        // verify the required parameter 'remediationName' is set
        if (remediationName == null) {
            throw new ApiException("Missing the required parameter 'remediationName' when calling remediationsDeleteAtSubscription(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling remediationsDeleteAtSubscription(Async)");
        }

        return remediationsDeleteAtSubscriptionCall(subscriptionId, remediationName, apiVersion, _callback);

    }

    /**
     * 
     * Deletes an existing remediation at subscription scope.
     * @param subscriptionId Microsoft Azure subscription ID. (required)
     * @param remediationName The name of the remediation. (required)
     * @param apiVersion Client Api Version. (required)
     * @return Remediation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The deleted remediation. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The remediation did not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public Remediation remediationsDeleteAtSubscription(String subscriptionId, String remediationName, String apiVersion) throws ApiException {
        ApiResponse<Remediation> localVarResp = remediationsDeleteAtSubscriptionWithHttpInfo(subscriptionId, remediationName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Deletes an existing remediation at subscription scope.
     * @param subscriptionId Microsoft Azure subscription ID. (required)
     * @param remediationName The name of the remediation. (required)
     * @param apiVersion Client Api Version. (required)
     * @return ApiResponse&lt;Remediation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The deleted remediation. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The remediation did not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Remediation> remediationsDeleteAtSubscriptionWithHttpInfo(String subscriptionId, String remediationName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = remediationsDeleteAtSubscriptionValidateBeforeCall(subscriptionId, remediationName, apiVersion, null);
        Type localVarReturnType = new TypeToken<Remediation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Deletes an existing remediation at subscription scope.
     * @param subscriptionId Microsoft Azure subscription ID. (required)
     * @param remediationName The name of the remediation. (required)
     * @param apiVersion Client Api Version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The deleted remediation. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The remediation did not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call remediationsDeleteAtSubscriptionAsync(String subscriptionId, String remediationName, String apiVersion, final ApiCallback<Remediation> _callback) throws ApiException {

        okhttp3.Call localVarCall = remediationsDeleteAtSubscriptionValidateBeforeCall(subscriptionId, remediationName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<Remediation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for remediationsGetAtManagementGroup
     * @param managementGroupsNamespace The namespace for Microsoft Management RP; only \&quot;Microsoft.Management\&quot; is allowed. (required)
     * @param managementGroupId Management group ID. (required)
     * @param remediationName The name of the remediation. (required)
     * @param apiVersion Client Api Version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved remediation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call remediationsGetAtManagementGroupCall(String managementGroupsNamespace, String managementGroupId, String remediationName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/{managementGroupsNamespace}/managementGroups/{managementGroupId}/providers/Microsoft.PolicyInsights/remediations/{remediationName}"
            .replace("{" + "managementGroupsNamespace" + "}", localVarApiClient.escapeString(managementGroupsNamespace.toString()))
            .replace("{" + "managementGroupId" + "}", localVarApiClient.escapeString(managementGroupId.toString()))
            .replace("{" + "remediationName" + "}", localVarApiClient.escapeString(remediationName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call remediationsGetAtManagementGroupValidateBeforeCall(String managementGroupsNamespace, String managementGroupId, String remediationName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'managementGroupsNamespace' is set
        if (managementGroupsNamespace == null) {
            throw new ApiException("Missing the required parameter 'managementGroupsNamespace' when calling remediationsGetAtManagementGroup(Async)");
        }

        // verify the required parameter 'managementGroupId' is set
        if (managementGroupId == null) {
            throw new ApiException("Missing the required parameter 'managementGroupId' when calling remediationsGetAtManagementGroup(Async)");
        }

        // verify the required parameter 'remediationName' is set
        if (remediationName == null) {
            throw new ApiException("Missing the required parameter 'remediationName' when calling remediationsGetAtManagementGroup(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling remediationsGetAtManagementGroup(Async)");
        }

        return remediationsGetAtManagementGroupCall(managementGroupsNamespace, managementGroupId, remediationName, apiVersion, _callback);

    }

    /**
     * 
     * Gets an existing remediation at management group scope.
     * @param managementGroupsNamespace The namespace for Microsoft Management RP; only \&quot;Microsoft.Management\&quot; is allowed. (required)
     * @param managementGroupId Management group ID. (required)
     * @param remediationName The name of the remediation. (required)
     * @param apiVersion Client Api Version. (required)
     * @return Remediation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved remediation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public Remediation remediationsGetAtManagementGroup(String managementGroupsNamespace, String managementGroupId, String remediationName, String apiVersion) throws ApiException {
        ApiResponse<Remediation> localVarResp = remediationsGetAtManagementGroupWithHttpInfo(managementGroupsNamespace, managementGroupId, remediationName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets an existing remediation at management group scope.
     * @param managementGroupsNamespace The namespace for Microsoft Management RP; only \&quot;Microsoft.Management\&quot; is allowed. (required)
     * @param managementGroupId Management group ID. (required)
     * @param remediationName The name of the remediation. (required)
     * @param apiVersion Client Api Version. (required)
     * @return ApiResponse&lt;Remediation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved remediation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Remediation> remediationsGetAtManagementGroupWithHttpInfo(String managementGroupsNamespace, String managementGroupId, String remediationName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = remediationsGetAtManagementGroupValidateBeforeCall(managementGroupsNamespace, managementGroupId, remediationName, apiVersion, null);
        Type localVarReturnType = new TypeToken<Remediation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets an existing remediation at management group scope.
     * @param managementGroupsNamespace The namespace for Microsoft Management RP; only \&quot;Microsoft.Management\&quot; is allowed. (required)
     * @param managementGroupId Management group ID. (required)
     * @param remediationName The name of the remediation. (required)
     * @param apiVersion Client Api Version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved remediation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call remediationsGetAtManagementGroupAsync(String managementGroupsNamespace, String managementGroupId, String remediationName, String apiVersion, final ApiCallback<Remediation> _callback) throws ApiException {

        okhttp3.Call localVarCall = remediationsGetAtManagementGroupValidateBeforeCall(managementGroupsNamespace, managementGroupId, remediationName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<Remediation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for remediationsGetAtResource
     * @param resourceId Resource ID. (required)
     * @param remediationName The name of the remediation. (required)
     * @param apiVersion Client Api Version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved remediation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call remediationsGetAtResourceCall(String resourceId, String remediationName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{resourceId}/providers/Microsoft.PolicyInsights/remediations/{remediationName}"
            .replace("{" + "resourceId" + "}", localVarApiClient.escapeString(resourceId.toString()))
            .replace("{" + "remediationName" + "}", localVarApiClient.escapeString(remediationName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call remediationsGetAtResourceValidateBeforeCall(String resourceId, String remediationName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceId' is set
        if (resourceId == null) {
            throw new ApiException("Missing the required parameter 'resourceId' when calling remediationsGetAtResource(Async)");
        }

        // verify the required parameter 'remediationName' is set
        if (remediationName == null) {
            throw new ApiException("Missing the required parameter 'remediationName' when calling remediationsGetAtResource(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling remediationsGetAtResource(Async)");
        }

        return remediationsGetAtResourceCall(resourceId, remediationName, apiVersion, _callback);

    }

    /**
     * 
     * Gets an existing remediation at resource scope.
     * @param resourceId Resource ID. (required)
     * @param remediationName The name of the remediation. (required)
     * @param apiVersion Client Api Version. (required)
     * @return Remediation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved remediation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public Remediation remediationsGetAtResource(String resourceId, String remediationName, String apiVersion) throws ApiException {
        ApiResponse<Remediation> localVarResp = remediationsGetAtResourceWithHttpInfo(resourceId, remediationName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets an existing remediation at resource scope.
     * @param resourceId Resource ID. (required)
     * @param remediationName The name of the remediation. (required)
     * @param apiVersion Client Api Version. (required)
     * @return ApiResponse&lt;Remediation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved remediation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Remediation> remediationsGetAtResourceWithHttpInfo(String resourceId, String remediationName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = remediationsGetAtResourceValidateBeforeCall(resourceId, remediationName, apiVersion, null);
        Type localVarReturnType = new TypeToken<Remediation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets an existing remediation at resource scope.
     * @param resourceId Resource ID. (required)
     * @param remediationName The name of the remediation. (required)
     * @param apiVersion Client Api Version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved remediation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call remediationsGetAtResourceAsync(String resourceId, String remediationName, String apiVersion, final ApiCallback<Remediation> _callback) throws ApiException {

        okhttp3.Call localVarCall = remediationsGetAtResourceValidateBeforeCall(resourceId, remediationName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<Remediation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for remediationsGetAtResourceGroup
     * @param subscriptionId Microsoft Azure subscription ID. (required)
     * @param resourceGroupName Resource group name. (required)
     * @param remediationName The name of the remediation. (required)
     * @param apiVersion Client Api Version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved remediation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call remediationsGetAtResourceGroupCall(String subscriptionId, String resourceGroupName, String remediationName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PolicyInsights/remediations/{remediationName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "remediationName" + "}", localVarApiClient.escapeString(remediationName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call remediationsGetAtResourceGroupValidateBeforeCall(String subscriptionId, String resourceGroupName, String remediationName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling remediationsGetAtResourceGroup(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling remediationsGetAtResourceGroup(Async)");
        }

        // verify the required parameter 'remediationName' is set
        if (remediationName == null) {
            throw new ApiException("Missing the required parameter 'remediationName' when calling remediationsGetAtResourceGroup(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling remediationsGetAtResourceGroup(Async)");
        }

        return remediationsGetAtResourceGroupCall(subscriptionId, resourceGroupName, remediationName, apiVersion, _callback);

    }

    /**
     * 
     * Gets an existing remediation at resource group scope.
     * @param subscriptionId Microsoft Azure subscription ID. (required)
     * @param resourceGroupName Resource group name. (required)
     * @param remediationName The name of the remediation. (required)
     * @param apiVersion Client Api Version. (required)
     * @return Remediation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved remediation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public Remediation remediationsGetAtResourceGroup(String subscriptionId, String resourceGroupName, String remediationName, String apiVersion) throws ApiException {
        ApiResponse<Remediation> localVarResp = remediationsGetAtResourceGroupWithHttpInfo(subscriptionId, resourceGroupName, remediationName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets an existing remediation at resource group scope.
     * @param subscriptionId Microsoft Azure subscription ID. (required)
     * @param resourceGroupName Resource group name. (required)
     * @param remediationName The name of the remediation. (required)
     * @param apiVersion Client Api Version. (required)
     * @return ApiResponse&lt;Remediation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved remediation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Remediation> remediationsGetAtResourceGroupWithHttpInfo(String subscriptionId, String resourceGroupName, String remediationName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = remediationsGetAtResourceGroupValidateBeforeCall(subscriptionId, resourceGroupName, remediationName, apiVersion, null);
        Type localVarReturnType = new TypeToken<Remediation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets an existing remediation at resource group scope.
     * @param subscriptionId Microsoft Azure subscription ID. (required)
     * @param resourceGroupName Resource group name. (required)
     * @param remediationName The name of the remediation. (required)
     * @param apiVersion Client Api Version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved remediation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call remediationsGetAtResourceGroupAsync(String subscriptionId, String resourceGroupName, String remediationName, String apiVersion, final ApiCallback<Remediation> _callback) throws ApiException {

        okhttp3.Call localVarCall = remediationsGetAtResourceGroupValidateBeforeCall(subscriptionId, resourceGroupName, remediationName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<Remediation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for remediationsGetAtSubscription
     * @param subscriptionId Microsoft Azure subscription ID. (required)
     * @param remediationName The name of the remediation. (required)
     * @param apiVersion Client Api Version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved remediation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call remediationsGetAtSubscriptionCall(String subscriptionId, String remediationName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.PolicyInsights/remediations/{remediationName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "remediationName" + "}", localVarApiClient.escapeString(remediationName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call remediationsGetAtSubscriptionValidateBeforeCall(String subscriptionId, String remediationName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling remediationsGetAtSubscription(Async)");
        }

        // verify the required parameter 'remediationName' is set
        if (remediationName == null) {
            throw new ApiException("Missing the required parameter 'remediationName' when calling remediationsGetAtSubscription(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling remediationsGetAtSubscription(Async)");
        }

        return remediationsGetAtSubscriptionCall(subscriptionId, remediationName, apiVersion, _callback);

    }

    /**
     * 
     * Gets an existing remediation at subscription scope.
     * @param subscriptionId Microsoft Azure subscription ID. (required)
     * @param remediationName The name of the remediation. (required)
     * @param apiVersion Client Api Version. (required)
     * @return Remediation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved remediation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public Remediation remediationsGetAtSubscription(String subscriptionId, String remediationName, String apiVersion) throws ApiException {
        ApiResponse<Remediation> localVarResp = remediationsGetAtSubscriptionWithHttpInfo(subscriptionId, remediationName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets an existing remediation at subscription scope.
     * @param subscriptionId Microsoft Azure subscription ID. (required)
     * @param remediationName The name of the remediation. (required)
     * @param apiVersion Client Api Version. (required)
     * @return ApiResponse&lt;Remediation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved remediation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Remediation> remediationsGetAtSubscriptionWithHttpInfo(String subscriptionId, String remediationName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = remediationsGetAtSubscriptionValidateBeforeCall(subscriptionId, remediationName, apiVersion, null);
        Type localVarReturnType = new TypeToken<Remediation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets an existing remediation at subscription scope.
     * @param subscriptionId Microsoft Azure subscription ID. (required)
     * @param remediationName The name of the remediation. (required)
     * @param apiVersion Client Api Version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved remediation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call remediationsGetAtSubscriptionAsync(String subscriptionId, String remediationName, String apiVersion, final ApiCallback<Remediation> _callback) throws ApiException {

        okhttp3.Call localVarCall = remediationsGetAtSubscriptionValidateBeforeCall(subscriptionId, remediationName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<Remediation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for remediationsListDeploymentsAtManagementGroup
     * @param managementGroupsNamespace The namespace for Microsoft Management RP; only \&quot;Microsoft.Management\&quot; is allowed. (required)
     * @param managementGroupId Management group ID. (required)
     * @param remediationName The name of the remediation. (required)
     * @param apiVersion Client Api Version. (required)
     * @param $top Maximum number of records to return. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved remediation deployments. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call remediationsListDeploymentsAtManagementGroupCall(String managementGroupsNamespace, String managementGroupId, String remediationName, String apiVersion, Integer $top, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/{managementGroupsNamespace}/managementGroups/{managementGroupId}/providers/Microsoft.PolicyInsights/remediations/{remediationName}/listDeployments"
            .replace("{" + "managementGroupsNamespace" + "}", localVarApiClient.escapeString(managementGroupsNamespace.toString()))
            .replace("{" + "managementGroupId" + "}", localVarApiClient.escapeString(managementGroupId.toString()))
            .replace("{" + "remediationName" + "}", localVarApiClient.escapeString(remediationName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$top", $top));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call remediationsListDeploymentsAtManagementGroupValidateBeforeCall(String managementGroupsNamespace, String managementGroupId, String remediationName, String apiVersion, Integer $top, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'managementGroupsNamespace' is set
        if (managementGroupsNamespace == null) {
            throw new ApiException("Missing the required parameter 'managementGroupsNamespace' when calling remediationsListDeploymentsAtManagementGroup(Async)");
        }

        // verify the required parameter 'managementGroupId' is set
        if (managementGroupId == null) {
            throw new ApiException("Missing the required parameter 'managementGroupId' when calling remediationsListDeploymentsAtManagementGroup(Async)");
        }

        // verify the required parameter 'remediationName' is set
        if (remediationName == null) {
            throw new ApiException("Missing the required parameter 'remediationName' when calling remediationsListDeploymentsAtManagementGroup(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling remediationsListDeploymentsAtManagementGroup(Async)");
        }

        return remediationsListDeploymentsAtManagementGroupCall(managementGroupsNamespace, managementGroupId, remediationName, apiVersion, $top, _callback);

    }

    /**
     * 
     * Gets all deployments for a remediation at management group scope.
     * @param managementGroupsNamespace The namespace for Microsoft Management RP; only \&quot;Microsoft.Management\&quot; is allowed. (required)
     * @param managementGroupId Management group ID. (required)
     * @param remediationName The name of the remediation. (required)
     * @param apiVersion Client Api Version. (required)
     * @param $top Maximum number of records to return. (optional)
     * @return RemediationDeploymentsListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved remediation deployments. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public RemediationDeploymentsListResult remediationsListDeploymentsAtManagementGroup(String managementGroupsNamespace, String managementGroupId, String remediationName, String apiVersion, Integer $top) throws ApiException {
        ApiResponse<RemediationDeploymentsListResult> localVarResp = remediationsListDeploymentsAtManagementGroupWithHttpInfo(managementGroupsNamespace, managementGroupId, remediationName, apiVersion, $top);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets all deployments for a remediation at management group scope.
     * @param managementGroupsNamespace The namespace for Microsoft Management RP; only \&quot;Microsoft.Management\&quot; is allowed. (required)
     * @param managementGroupId Management group ID. (required)
     * @param remediationName The name of the remediation. (required)
     * @param apiVersion Client Api Version. (required)
     * @param $top Maximum number of records to return. (optional)
     * @return ApiResponse&lt;RemediationDeploymentsListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved remediation deployments. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RemediationDeploymentsListResult> remediationsListDeploymentsAtManagementGroupWithHttpInfo(String managementGroupsNamespace, String managementGroupId, String remediationName, String apiVersion, Integer $top) throws ApiException {
        okhttp3.Call localVarCall = remediationsListDeploymentsAtManagementGroupValidateBeforeCall(managementGroupsNamespace, managementGroupId, remediationName, apiVersion, $top, null);
        Type localVarReturnType = new TypeToken<RemediationDeploymentsListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets all deployments for a remediation at management group scope.
     * @param managementGroupsNamespace The namespace for Microsoft Management RP; only \&quot;Microsoft.Management\&quot; is allowed. (required)
     * @param managementGroupId Management group ID. (required)
     * @param remediationName The name of the remediation. (required)
     * @param apiVersion Client Api Version. (required)
     * @param $top Maximum number of records to return. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved remediation deployments. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call remediationsListDeploymentsAtManagementGroupAsync(String managementGroupsNamespace, String managementGroupId, String remediationName, String apiVersion, Integer $top, final ApiCallback<RemediationDeploymentsListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = remediationsListDeploymentsAtManagementGroupValidateBeforeCall(managementGroupsNamespace, managementGroupId, remediationName, apiVersion, $top, _callback);
        Type localVarReturnType = new TypeToken<RemediationDeploymentsListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for remediationsListDeploymentsAtResource
     * @param resourceId Resource ID. (required)
     * @param remediationName The name of the remediation. (required)
     * @param apiVersion Client Api Version. (required)
     * @param $top Maximum number of records to return. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved remediation deployments. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call remediationsListDeploymentsAtResourceCall(String resourceId, String remediationName, String apiVersion, Integer $top, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{resourceId}/providers/Microsoft.PolicyInsights/remediations/{remediationName}/listDeployments"
            .replace("{" + "resourceId" + "}", localVarApiClient.escapeString(resourceId.toString()))
            .replace("{" + "remediationName" + "}", localVarApiClient.escapeString(remediationName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$top", $top));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call remediationsListDeploymentsAtResourceValidateBeforeCall(String resourceId, String remediationName, String apiVersion, Integer $top, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceId' is set
        if (resourceId == null) {
            throw new ApiException("Missing the required parameter 'resourceId' when calling remediationsListDeploymentsAtResource(Async)");
        }

        // verify the required parameter 'remediationName' is set
        if (remediationName == null) {
            throw new ApiException("Missing the required parameter 'remediationName' when calling remediationsListDeploymentsAtResource(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling remediationsListDeploymentsAtResource(Async)");
        }

        return remediationsListDeploymentsAtResourceCall(resourceId, remediationName, apiVersion, $top, _callback);

    }

    /**
     * 
     * Gets all deployments for a remediation at resource scope.
     * @param resourceId Resource ID. (required)
     * @param remediationName The name of the remediation. (required)
     * @param apiVersion Client Api Version. (required)
     * @param $top Maximum number of records to return. (optional)
     * @return RemediationDeploymentsListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved remediation deployments. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public RemediationDeploymentsListResult remediationsListDeploymentsAtResource(String resourceId, String remediationName, String apiVersion, Integer $top) throws ApiException {
        ApiResponse<RemediationDeploymentsListResult> localVarResp = remediationsListDeploymentsAtResourceWithHttpInfo(resourceId, remediationName, apiVersion, $top);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets all deployments for a remediation at resource scope.
     * @param resourceId Resource ID. (required)
     * @param remediationName The name of the remediation. (required)
     * @param apiVersion Client Api Version. (required)
     * @param $top Maximum number of records to return. (optional)
     * @return ApiResponse&lt;RemediationDeploymentsListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved remediation deployments. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RemediationDeploymentsListResult> remediationsListDeploymentsAtResourceWithHttpInfo(String resourceId, String remediationName, String apiVersion, Integer $top) throws ApiException {
        okhttp3.Call localVarCall = remediationsListDeploymentsAtResourceValidateBeforeCall(resourceId, remediationName, apiVersion, $top, null);
        Type localVarReturnType = new TypeToken<RemediationDeploymentsListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets all deployments for a remediation at resource scope.
     * @param resourceId Resource ID. (required)
     * @param remediationName The name of the remediation. (required)
     * @param apiVersion Client Api Version. (required)
     * @param $top Maximum number of records to return. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved remediation deployments. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call remediationsListDeploymentsAtResourceAsync(String resourceId, String remediationName, String apiVersion, Integer $top, final ApiCallback<RemediationDeploymentsListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = remediationsListDeploymentsAtResourceValidateBeforeCall(resourceId, remediationName, apiVersion, $top, _callback);
        Type localVarReturnType = new TypeToken<RemediationDeploymentsListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for remediationsListDeploymentsAtResourceGroup
     * @param subscriptionId Microsoft Azure subscription ID. (required)
     * @param resourceGroupName Resource group name. (required)
     * @param remediationName The name of the remediation. (required)
     * @param apiVersion Client Api Version. (required)
     * @param $top Maximum number of records to return. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved remediation deployments. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call remediationsListDeploymentsAtResourceGroupCall(String subscriptionId, String resourceGroupName, String remediationName, String apiVersion, Integer $top, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PolicyInsights/remediations/{remediationName}/listDeployments"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "remediationName" + "}", localVarApiClient.escapeString(remediationName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$top", $top));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call remediationsListDeploymentsAtResourceGroupValidateBeforeCall(String subscriptionId, String resourceGroupName, String remediationName, String apiVersion, Integer $top, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling remediationsListDeploymentsAtResourceGroup(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling remediationsListDeploymentsAtResourceGroup(Async)");
        }

        // verify the required parameter 'remediationName' is set
        if (remediationName == null) {
            throw new ApiException("Missing the required parameter 'remediationName' when calling remediationsListDeploymentsAtResourceGroup(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling remediationsListDeploymentsAtResourceGroup(Async)");
        }

        return remediationsListDeploymentsAtResourceGroupCall(subscriptionId, resourceGroupName, remediationName, apiVersion, $top, _callback);

    }

    /**
     * 
     * Gets all deployments for a remediation at resource group scope.
     * @param subscriptionId Microsoft Azure subscription ID. (required)
     * @param resourceGroupName Resource group name. (required)
     * @param remediationName The name of the remediation. (required)
     * @param apiVersion Client Api Version. (required)
     * @param $top Maximum number of records to return. (optional)
     * @return RemediationDeploymentsListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved remediation deployments. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public RemediationDeploymentsListResult remediationsListDeploymentsAtResourceGroup(String subscriptionId, String resourceGroupName, String remediationName, String apiVersion, Integer $top) throws ApiException {
        ApiResponse<RemediationDeploymentsListResult> localVarResp = remediationsListDeploymentsAtResourceGroupWithHttpInfo(subscriptionId, resourceGroupName, remediationName, apiVersion, $top);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets all deployments for a remediation at resource group scope.
     * @param subscriptionId Microsoft Azure subscription ID. (required)
     * @param resourceGroupName Resource group name. (required)
     * @param remediationName The name of the remediation. (required)
     * @param apiVersion Client Api Version. (required)
     * @param $top Maximum number of records to return. (optional)
     * @return ApiResponse&lt;RemediationDeploymentsListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved remediation deployments. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RemediationDeploymentsListResult> remediationsListDeploymentsAtResourceGroupWithHttpInfo(String subscriptionId, String resourceGroupName, String remediationName, String apiVersion, Integer $top) throws ApiException {
        okhttp3.Call localVarCall = remediationsListDeploymentsAtResourceGroupValidateBeforeCall(subscriptionId, resourceGroupName, remediationName, apiVersion, $top, null);
        Type localVarReturnType = new TypeToken<RemediationDeploymentsListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets all deployments for a remediation at resource group scope.
     * @param subscriptionId Microsoft Azure subscription ID. (required)
     * @param resourceGroupName Resource group name. (required)
     * @param remediationName The name of the remediation. (required)
     * @param apiVersion Client Api Version. (required)
     * @param $top Maximum number of records to return. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved remediation deployments. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call remediationsListDeploymentsAtResourceGroupAsync(String subscriptionId, String resourceGroupName, String remediationName, String apiVersion, Integer $top, final ApiCallback<RemediationDeploymentsListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = remediationsListDeploymentsAtResourceGroupValidateBeforeCall(subscriptionId, resourceGroupName, remediationName, apiVersion, $top, _callback);
        Type localVarReturnType = new TypeToken<RemediationDeploymentsListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for remediationsListDeploymentsAtSubscription
     * @param subscriptionId Microsoft Azure subscription ID. (required)
     * @param remediationName The name of the remediation. (required)
     * @param apiVersion Client Api Version. (required)
     * @param $top Maximum number of records to return. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved remediation deployments. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call remediationsListDeploymentsAtSubscriptionCall(String subscriptionId, String remediationName, String apiVersion, Integer $top, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.PolicyInsights/remediations/{remediationName}/listDeployments"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "remediationName" + "}", localVarApiClient.escapeString(remediationName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$top", $top));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call remediationsListDeploymentsAtSubscriptionValidateBeforeCall(String subscriptionId, String remediationName, String apiVersion, Integer $top, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling remediationsListDeploymentsAtSubscription(Async)");
        }

        // verify the required parameter 'remediationName' is set
        if (remediationName == null) {
            throw new ApiException("Missing the required parameter 'remediationName' when calling remediationsListDeploymentsAtSubscription(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling remediationsListDeploymentsAtSubscription(Async)");
        }

        return remediationsListDeploymentsAtSubscriptionCall(subscriptionId, remediationName, apiVersion, $top, _callback);

    }

    /**
     * 
     * Gets all deployments for a remediation at subscription scope.
     * @param subscriptionId Microsoft Azure subscription ID. (required)
     * @param remediationName The name of the remediation. (required)
     * @param apiVersion Client Api Version. (required)
     * @param $top Maximum number of records to return. (optional)
     * @return RemediationDeploymentsListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved remediation deployments. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public RemediationDeploymentsListResult remediationsListDeploymentsAtSubscription(String subscriptionId, String remediationName, String apiVersion, Integer $top) throws ApiException {
        ApiResponse<RemediationDeploymentsListResult> localVarResp = remediationsListDeploymentsAtSubscriptionWithHttpInfo(subscriptionId, remediationName, apiVersion, $top);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets all deployments for a remediation at subscription scope.
     * @param subscriptionId Microsoft Azure subscription ID. (required)
     * @param remediationName The name of the remediation. (required)
     * @param apiVersion Client Api Version. (required)
     * @param $top Maximum number of records to return. (optional)
     * @return ApiResponse&lt;RemediationDeploymentsListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved remediation deployments. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RemediationDeploymentsListResult> remediationsListDeploymentsAtSubscriptionWithHttpInfo(String subscriptionId, String remediationName, String apiVersion, Integer $top) throws ApiException {
        okhttp3.Call localVarCall = remediationsListDeploymentsAtSubscriptionValidateBeforeCall(subscriptionId, remediationName, apiVersion, $top, null);
        Type localVarReturnType = new TypeToken<RemediationDeploymentsListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets all deployments for a remediation at subscription scope.
     * @param subscriptionId Microsoft Azure subscription ID. (required)
     * @param remediationName The name of the remediation. (required)
     * @param apiVersion Client Api Version. (required)
     * @param $top Maximum number of records to return. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved remediation deployments. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call remediationsListDeploymentsAtSubscriptionAsync(String subscriptionId, String remediationName, String apiVersion, Integer $top, final ApiCallback<RemediationDeploymentsListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = remediationsListDeploymentsAtSubscriptionValidateBeforeCall(subscriptionId, remediationName, apiVersion, $top, _callback);
        Type localVarReturnType = new TypeToken<RemediationDeploymentsListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for remediationsListForManagementGroup
     * @param managementGroupsNamespace The namespace for Microsoft Management RP; only \&quot;Microsoft.Management\&quot; is allowed. (required)
     * @param managementGroupId Management group ID. (required)
     * @param apiVersion Client Api Version. (required)
     * @param $top Maximum number of records to return. (optional)
     * @param $filter OData filter expression. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved remediations. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call remediationsListForManagementGroupCall(String managementGroupsNamespace, String managementGroupId, String apiVersion, Integer $top, String $filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/{managementGroupsNamespace}/managementGroups/{managementGroupId}/providers/Microsoft.PolicyInsights/remediations"
            .replace("{" + "managementGroupsNamespace" + "}", localVarApiClient.escapeString(managementGroupsNamespace.toString()))
            .replace("{" + "managementGroupId" + "}", localVarApiClient.escapeString(managementGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$top", $top));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call remediationsListForManagementGroupValidateBeforeCall(String managementGroupsNamespace, String managementGroupId, String apiVersion, Integer $top, String $filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'managementGroupsNamespace' is set
        if (managementGroupsNamespace == null) {
            throw new ApiException("Missing the required parameter 'managementGroupsNamespace' when calling remediationsListForManagementGroup(Async)");
        }

        // verify the required parameter 'managementGroupId' is set
        if (managementGroupId == null) {
            throw new ApiException("Missing the required parameter 'managementGroupId' when calling remediationsListForManagementGroup(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling remediationsListForManagementGroup(Async)");
        }

        return remediationsListForManagementGroupCall(managementGroupsNamespace, managementGroupId, apiVersion, $top, $filter, _callback);

    }

    /**
     * 
     * Gets all remediations for the management group.
     * @param managementGroupsNamespace The namespace for Microsoft Management RP; only \&quot;Microsoft.Management\&quot; is allowed. (required)
     * @param managementGroupId Management group ID. (required)
     * @param apiVersion Client Api Version. (required)
     * @param $top Maximum number of records to return. (optional)
     * @param $filter OData filter expression. (optional)
     * @return RemediationListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved remediations. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public RemediationListResult remediationsListForManagementGroup(String managementGroupsNamespace, String managementGroupId, String apiVersion, Integer $top, String $filter) throws ApiException {
        ApiResponse<RemediationListResult> localVarResp = remediationsListForManagementGroupWithHttpInfo(managementGroupsNamespace, managementGroupId, apiVersion, $top, $filter);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets all remediations for the management group.
     * @param managementGroupsNamespace The namespace for Microsoft Management RP; only \&quot;Microsoft.Management\&quot; is allowed. (required)
     * @param managementGroupId Management group ID. (required)
     * @param apiVersion Client Api Version. (required)
     * @param $top Maximum number of records to return. (optional)
     * @param $filter OData filter expression. (optional)
     * @return ApiResponse&lt;RemediationListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved remediations. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RemediationListResult> remediationsListForManagementGroupWithHttpInfo(String managementGroupsNamespace, String managementGroupId, String apiVersion, Integer $top, String $filter) throws ApiException {
        okhttp3.Call localVarCall = remediationsListForManagementGroupValidateBeforeCall(managementGroupsNamespace, managementGroupId, apiVersion, $top, $filter, null);
        Type localVarReturnType = new TypeToken<RemediationListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets all remediations for the management group.
     * @param managementGroupsNamespace The namespace for Microsoft Management RP; only \&quot;Microsoft.Management\&quot; is allowed. (required)
     * @param managementGroupId Management group ID. (required)
     * @param apiVersion Client Api Version. (required)
     * @param $top Maximum number of records to return. (optional)
     * @param $filter OData filter expression. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved remediations. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call remediationsListForManagementGroupAsync(String managementGroupsNamespace, String managementGroupId, String apiVersion, Integer $top, String $filter, final ApiCallback<RemediationListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = remediationsListForManagementGroupValidateBeforeCall(managementGroupsNamespace, managementGroupId, apiVersion, $top, $filter, _callback);
        Type localVarReturnType = new TypeToken<RemediationListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for remediationsListForResource
     * @param resourceId Resource ID. (required)
     * @param apiVersion Client Api Version. (required)
     * @param $top Maximum number of records to return. (optional)
     * @param $filter OData filter expression. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved remediations. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call remediationsListForResourceCall(String resourceId, String apiVersion, Integer $top, String $filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{resourceId}/providers/Microsoft.PolicyInsights/remediations"
            .replace("{" + "resourceId" + "}", localVarApiClient.escapeString(resourceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$top", $top));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call remediationsListForResourceValidateBeforeCall(String resourceId, String apiVersion, Integer $top, String $filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceId' is set
        if (resourceId == null) {
            throw new ApiException("Missing the required parameter 'resourceId' when calling remediationsListForResource(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling remediationsListForResource(Async)");
        }

        return remediationsListForResourceCall(resourceId, apiVersion, $top, $filter, _callback);

    }

    /**
     * 
     * Gets all remediations for a resource.
     * @param resourceId Resource ID. (required)
     * @param apiVersion Client Api Version. (required)
     * @param $top Maximum number of records to return. (optional)
     * @param $filter OData filter expression. (optional)
     * @return RemediationListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved remediations. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public RemediationListResult remediationsListForResource(String resourceId, String apiVersion, Integer $top, String $filter) throws ApiException {
        ApiResponse<RemediationListResult> localVarResp = remediationsListForResourceWithHttpInfo(resourceId, apiVersion, $top, $filter);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets all remediations for a resource.
     * @param resourceId Resource ID. (required)
     * @param apiVersion Client Api Version. (required)
     * @param $top Maximum number of records to return. (optional)
     * @param $filter OData filter expression. (optional)
     * @return ApiResponse&lt;RemediationListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved remediations. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RemediationListResult> remediationsListForResourceWithHttpInfo(String resourceId, String apiVersion, Integer $top, String $filter) throws ApiException {
        okhttp3.Call localVarCall = remediationsListForResourceValidateBeforeCall(resourceId, apiVersion, $top, $filter, null);
        Type localVarReturnType = new TypeToken<RemediationListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets all remediations for a resource.
     * @param resourceId Resource ID. (required)
     * @param apiVersion Client Api Version. (required)
     * @param $top Maximum number of records to return. (optional)
     * @param $filter OData filter expression. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved remediations. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call remediationsListForResourceAsync(String resourceId, String apiVersion, Integer $top, String $filter, final ApiCallback<RemediationListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = remediationsListForResourceValidateBeforeCall(resourceId, apiVersion, $top, $filter, _callback);
        Type localVarReturnType = new TypeToken<RemediationListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for remediationsListForResourceGroup
     * @param subscriptionId Microsoft Azure subscription ID. (required)
     * @param resourceGroupName Resource group name. (required)
     * @param apiVersion Client Api Version. (required)
     * @param $top Maximum number of records to return. (optional)
     * @param $filter OData filter expression. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved remediations. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call remediationsListForResourceGroupCall(String subscriptionId, String resourceGroupName, String apiVersion, Integer $top, String $filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PolicyInsights/remediations"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$top", $top));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call remediationsListForResourceGroupValidateBeforeCall(String subscriptionId, String resourceGroupName, String apiVersion, Integer $top, String $filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling remediationsListForResourceGroup(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling remediationsListForResourceGroup(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling remediationsListForResourceGroup(Async)");
        }

        return remediationsListForResourceGroupCall(subscriptionId, resourceGroupName, apiVersion, $top, $filter, _callback);

    }

    /**
     * 
     * Gets all remediations for the subscription.
     * @param subscriptionId Microsoft Azure subscription ID. (required)
     * @param resourceGroupName Resource group name. (required)
     * @param apiVersion Client Api Version. (required)
     * @param $top Maximum number of records to return. (optional)
     * @param $filter OData filter expression. (optional)
     * @return RemediationListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved remediations. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public RemediationListResult remediationsListForResourceGroup(String subscriptionId, String resourceGroupName, String apiVersion, Integer $top, String $filter) throws ApiException {
        ApiResponse<RemediationListResult> localVarResp = remediationsListForResourceGroupWithHttpInfo(subscriptionId, resourceGroupName, apiVersion, $top, $filter);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets all remediations for the subscription.
     * @param subscriptionId Microsoft Azure subscription ID. (required)
     * @param resourceGroupName Resource group name. (required)
     * @param apiVersion Client Api Version. (required)
     * @param $top Maximum number of records to return. (optional)
     * @param $filter OData filter expression. (optional)
     * @return ApiResponse&lt;RemediationListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved remediations. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RemediationListResult> remediationsListForResourceGroupWithHttpInfo(String subscriptionId, String resourceGroupName, String apiVersion, Integer $top, String $filter) throws ApiException {
        okhttp3.Call localVarCall = remediationsListForResourceGroupValidateBeforeCall(subscriptionId, resourceGroupName, apiVersion, $top, $filter, null);
        Type localVarReturnType = new TypeToken<RemediationListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets all remediations for the subscription.
     * @param subscriptionId Microsoft Azure subscription ID. (required)
     * @param resourceGroupName Resource group name. (required)
     * @param apiVersion Client Api Version. (required)
     * @param $top Maximum number of records to return. (optional)
     * @param $filter OData filter expression. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved remediations. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call remediationsListForResourceGroupAsync(String subscriptionId, String resourceGroupName, String apiVersion, Integer $top, String $filter, final ApiCallback<RemediationListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = remediationsListForResourceGroupValidateBeforeCall(subscriptionId, resourceGroupName, apiVersion, $top, $filter, _callback);
        Type localVarReturnType = new TypeToken<RemediationListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for remediationsListForSubscription
     * @param subscriptionId Microsoft Azure subscription ID. (required)
     * @param apiVersion Client Api Version. (required)
     * @param $top Maximum number of records to return. (optional)
     * @param $filter OData filter expression. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved remediations. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call remediationsListForSubscriptionCall(String subscriptionId, String apiVersion, Integer $top, String $filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.PolicyInsights/remediations"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$top", $top));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call remediationsListForSubscriptionValidateBeforeCall(String subscriptionId, String apiVersion, Integer $top, String $filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling remediationsListForSubscription(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling remediationsListForSubscription(Async)");
        }

        return remediationsListForSubscriptionCall(subscriptionId, apiVersion, $top, $filter, _callback);

    }

    /**
     * 
     * Gets all remediations for the subscription.
     * @param subscriptionId Microsoft Azure subscription ID. (required)
     * @param apiVersion Client Api Version. (required)
     * @param $top Maximum number of records to return. (optional)
     * @param $filter OData filter expression. (optional)
     * @return RemediationListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved remediations. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public RemediationListResult remediationsListForSubscription(String subscriptionId, String apiVersion, Integer $top, String $filter) throws ApiException {
        ApiResponse<RemediationListResult> localVarResp = remediationsListForSubscriptionWithHttpInfo(subscriptionId, apiVersion, $top, $filter);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets all remediations for the subscription.
     * @param subscriptionId Microsoft Azure subscription ID. (required)
     * @param apiVersion Client Api Version. (required)
     * @param $top Maximum number of records to return. (optional)
     * @param $filter OData filter expression. (optional)
     * @return ApiResponse&lt;RemediationListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved remediations. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RemediationListResult> remediationsListForSubscriptionWithHttpInfo(String subscriptionId, String apiVersion, Integer $top, String $filter) throws ApiException {
        okhttp3.Call localVarCall = remediationsListForSubscriptionValidateBeforeCall(subscriptionId, apiVersion, $top, $filter, null);
        Type localVarReturnType = new TypeToken<RemediationListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets all remediations for the subscription.
     * @param subscriptionId Microsoft Azure subscription ID. (required)
     * @param apiVersion Client Api Version. (required)
     * @param $top Maximum number of records to return. (optional)
     * @param $filter OData filter expression. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved remediations. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call remediationsListForSubscriptionAsync(String subscriptionId, String apiVersion, Integer $top, String $filter, final ApiCallback<RemediationListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = remediationsListForSubscriptionValidateBeforeCall(subscriptionId, apiVersion, $top, $filter, _callback);
        Type localVarReturnType = new TypeToken<RemediationListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
