# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RemediationDeploymentSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, failed_deployments: int=None, successful_deployments: int=None, total_deployments: int=None):
        """RemediationDeploymentSummary - a model defined in OpenAPI

        :param failed_deployments: The failed_deployments of this RemediationDeploymentSummary.
        :param successful_deployments: The successful_deployments of this RemediationDeploymentSummary.
        :param total_deployments: The total_deployments of this RemediationDeploymentSummary.
        """
        self.openapi_types = {
            'failed_deployments': int,
            'successful_deployments': int,
            'total_deployments': int
        }

        self.attribute_map = {
            'failed_deployments': 'failedDeployments',
            'successful_deployments': 'successfulDeployments',
            'total_deployments': 'totalDeployments'
        }

        self._failed_deployments = failed_deployments
        self._successful_deployments = successful_deployments
        self._total_deployments = total_deployments

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RemediationDeploymentSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RemediationDeploymentSummary of this RemediationDeploymentSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def failed_deployments(self):
        """Gets the failed_deployments of this RemediationDeploymentSummary.

        The number of deployments required by the remediation that have failed.

        :return: The failed_deployments of this RemediationDeploymentSummary.
        :rtype: int
        """
        return self._failed_deployments

    @failed_deployments.setter
    def failed_deployments(self, failed_deployments):
        """Sets the failed_deployments of this RemediationDeploymentSummary.

        The number of deployments required by the remediation that have failed.

        :param failed_deployments: The failed_deployments of this RemediationDeploymentSummary.
        :type failed_deployments: int
        """

        self._failed_deployments = failed_deployments

    @property
    def successful_deployments(self):
        """Gets the successful_deployments of this RemediationDeploymentSummary.

        The number of deployments required by the remediation that have succeeded.

        :return: The successful_deployments of this RemediationDeploymentSummary.
        :rtype: int
        """
        return self._successful_deployments

    @successful_deployments.setter
    def successful_deployments(self, successful_deployments):
        """Sets the successful_deployments of this RemediationDeploymentSummary.

        The number of deployments required by the remediation that have succeeded.

        :param successful_deployments: The successful_deployments of this RemediationDeploymentSummary.
        :type successful_deployments: int
        """

        self._successful_deployments = successful_deployments

    @property
    def total_deployments(self):
        """Gets the total_deployments of this RemediationDeploymentSummary.

        The number of deployments required by the remediation.

        :return: The total_deployments of this RemediationDeploymentSummary.
        :rtype: int
        """
        return self._total_deployments

    @total_deployments.setter
    def total_deployments(self, total_deployments):
        """Sets the total_deployments of this RemediationDeploymentSummary.

        The number of deployments required by the remediation.

        :param total_deployments: The total_deployments of this RemediationDeploymentSummary.
        :type total_deployments: int
        """

        self._total_deployments = total_deployments
