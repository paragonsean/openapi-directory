# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.remediation_deployment_summary import RemediationDeploymentSummary
from openapi_server.models.remediation_filters import RemediationFilters
from openapi_server import util


class RemediationProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_on: datetime=None, deployment_status: RemediationDeploymentSummary=None, filters: RemediationFilters=None, last_updated_on: datetime=None, policy_assignment_id: str=None, policy_definition_reference_id: str=None, provisioning_state: str=None, resource_discovery_mode: str=None):
        """RemediationProperties - a model defined in OpenAPI

        :param created_on: The created_on of this RemediationProperties.
        :param deployment_status: The deployment_status of this RemediationProperties.
        :param filters: The filters of this RemediationProperties.
        :param last_updated_on: The last_updated_on of this RemediationProperties.
        :param policy_assignment_id: The policy_assignment_id of this RemediationProperties.
        :param policy_definition_reference_id: The policy_definition_reference_id of this RemediationProperties.
        :param provisioning_state: The provisioning_state of this RemediationProperties.
        :param resource_discovery_mode: The resource_discovery_mode of this RemediationProperties.
        """
        self.openapi_types = {
            'created_on': datetime,
            'deployment_status': RemediationDeploymentSummary,
            'filters': RemediationFilters,
            'last_updated_on': datetime,
            'policy_assignment_id': str,
            'policy_definition_reference_id': str,
            'provisioning_state': str,
            'resource_discovery_mode': str
        }

        self.attribute_map = {
            'created_on': 'createdOn',
            'deployment_status': 'deploymentStatus',
            'filters': 'filters',
            'last_updated_on': 'lastUpdatedOn',
            'policy_assignment_id': 'policyAssignmentId',
            'policy_definition_reference_id': 'policyDefinitionReferenceId',
            'provisioning_state': 'provisioningState',
            'resource_discovery_mode': 'resourceDiscoveryMode'
        }

        self._created_on = created_on
        self._deployment_status = deployment_status
        self._filters = filters
        self._last_updated_on = last_updated_on
        self._policy_assignment_id = policy_assignment_id
        self._policy_definition_reference_id = policy_definition_reference_id
        self._provisioning_state = provisioning_state
        self._resource_discovery_mode = resource_discovery_mode

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RemediationProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RemediationProperties of this RemediationProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_on(self):
        """Gets the created_on of this RemediationProperties.

        The time at which the remediation was created.

        :return: The created_on of this RemediationProperties.
        :rtype: datetime
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """Sets the created_on of this RemediationProperties.

        The time at which the remediation was created.

        :param created_on: The created_on of this RemediationProperties.
        :type created_on: datetime
        """

        self._created_on = created_on

    @property
    def deployment_status(self):
        """Gets the deployment_status of this RemediationProperties.


        :return: The deployment_status of this RemediationProperties.
        :rtype: RemediationDeploymentSummary
        """
        return self._deployment_status

    @deployment_status.setter
    def deployment_status(self, deployment_status):
        """Sets the deployment_status of this RemediationProperties.


        :param deployment_status: The deployment_status of this RemediationProperties.
        :type deployment_status: RemediationDeploymentSummary
        """

        self._deployment_status = deployment_status

    @property
    def filters(self):
        """Gets the filters of this RemediationProperties.


        :return: The filters of this RemediationProperties.
        :rtype: RemediationFilters
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """Sets the filters of this RemediationProperties.


        :param filters: The filters of this RemediationProperties.
        :type filters: RemediationFilters
        """

        self._filters = filters

    @property
    def last_updated_on(self):
        """Gets the last_updated_on of this RemediationProperties.

        The time at which the remediation was last updated.

        :return: The last_updated_on of this RemediationProperties.
        :rtype: datetime
        """
        return self._last_updated_on

    @last_updated_on.setter
    def last_updated_on(self, last_updated_on):
        """Sets the last_updated_on of this RemediationProperties.

        The time at which the remediation was last updated.

        :param last_updated_on: The last_updated_on of this RemediationProperties.
        :type last_updated_on: datetime
        """

        self._last_updated_on = last_updated_on

    @property
    def policy_assignment_id(self):
        """Gets the policy_assignment_id of this RemediationProperties.

        The resource ID of the policy assignment that should be remediated.

        :return: The policy_assignment_id of this RemediationProperties.
        :rtype: str
        """
        return self._policy_assignment_id

    @policy_assignment_id.setter
    def policy_assignment_id(self, policy_assignment_id):
        """Sets the policy_assignment_id of this RemediationProperties.

        The resource ID of the policy assignment that should be remediated.

        :param policy_assignment_id: The policy_assignment_id of this RemediationProperties.
        :type policy_assignment_id: str
        """

        self._policy_assignment_id = policy_assignment_id

    @property
    def policy_definition_reference_id(self):
        """Gets the policy_definition_reference_id of this RemediationProperties.

        The policy definition reference ID of the individual definition that should be remediated. Required when the policy assignment being remediated assigns a policy set definition.

        :return: The policy_definition_reference_id of this RemediationProperties.
        :rtype: str
        """
        return self._policy_definition_reference_id

    @policy_definition_reference_id.setter
    def policy_definition_reference_id(self, policy_definition_reference_id):
        """Sets the policy_definition_reference_id of this RemediationProperties.

        The policy definition reference ID of the individual definition that should be remediated. Required when the policy assignment being remediated assigns a policy set definition.

        :param policy_definition_reference_id: The policy_definition_reference_id of this RemediationProperties.
        :type policy_definition_reference_id: str
        """

        self._policy_definition_reference_id = policy_definition_reference_id

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this RemediationProperties.

        The status of the remediation.

        :return: The provisioning_state of this RemediationProperties.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this RemediationProperties.

        The status of the remediation.

        :param provisioning_state: The provisioning_state of this RemediationProperties.
        :type provisioning_state: str
        """

        self._provisioning_state = provisioning_state

    @property
    def resource_discovery_mode(self):
        """Gets the resource_discovery_mode of this RemediationProperties.

        The way resources to remediate are discovered. Defaults to ExistingNonCompliant if not specified.

        :return: The resource_discovery_mode of this RemediationProperties.
        :rtype: str
        """
        return self._resource_discovery_mode

    @resource_discovery_mode.setter
    def resource_discovery_mode(self, resource_discovery_mode):
        """Sets the resource_discovery_mode of this RemediationProperties.

        The way resources to remediate are discovered. Defaults to ExistingNonCompliant if not specified.

        :param resource_discovery_mode: The resource_discovery_mode of this RemediationProperties.
        :type resource_discovery_mode: str
        """
        allowed_values = ["ExistingNonCompliant", "ReEvaluateCompliance"]  # noqa: E501
        if resource_discovery_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `resource_discovery_mode` ({0}), must be one of {1}"
                .format(resource_discovery_mode, allowed_values)
            )

        self._resource_discovery_mode = resource_discovery_mode
