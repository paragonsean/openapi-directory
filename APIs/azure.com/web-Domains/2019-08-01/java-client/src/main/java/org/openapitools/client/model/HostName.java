/*
 * Domains API Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Details of a hostname derived from a domain.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:51:16.068224-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class HostName {
  public static final String SERIALIZED_NAME_AZURE_RESOURCE_NAME = "azureResourceName";
  @SerializedName(SERIALIZED_NAME_AZURE_RESOURCE_NAME)
  private String azureResourceName;

  /**
   * Type of the Azure resource the hostname is assigned to.
   */
  @JsonAdapter(AzureResourceTypeEnum.Adapter.class)
  public enum AzureResourceTypeEnum {
    WEBSITE("Website"),
    
    TRAFFIC_MANAGER("TrafficManager");

    private String value;

    AzureResourceTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AzureResourceTypeEnum fromValue(String value) {
      for (AzureResourceTypeEnum b : AzureResourceTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AzureResourceTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AzureResourceTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AzureResourceTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AzureResourceTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AzureResourceTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AZURE_RESOURCE_TYPE = "azureResourceType";
  @SerializedName(SERIALIZED_NAME_AZURE_RESOURCE_TYPE)
  private AzureResourceTypeEnum azureResourceType;

  /**
   * Type of the DNS record.
   */
  @JsonAdapter(CustomHostNameDnsRecordTypeEnum.Adapter.class)
  public enum CustomHostNameDnsRecordTypeEnum {
    C_NAME("CName"),
    
    A("A");

    private String value;

    CustomHostNameDnsRecordTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CustomHostNameDnsRecordTypeEnum fromValue(String value) {
      for (CustomHostNameDnsRecordTypeEnum b : CustomHostNameDnsRecordTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CustomHostNameDnsRecordTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CustomHostNameDnsRecordTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CustomHostNameDnsRecordTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CustomHostNameDnsRecordTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CustomHostNameDnsRecordTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CUSTOM_HOST_NAME_DNS_RECORD_TYPE = "customHostNameDnsRecordType";
  @SerializedName(SERIALIZED_NAME_CUSTOM_HOST_NAME_DNS_RECORD_TYPE)
  private CustomHostNameDnsRecordTypeEnum customHostNameDnsRecordType;

  /**
   * Type of the hostname.
   */
  @JsonAdapter(HostNameTypeEnum.Adapter.class)
  public enum HostNameTypeEnum {
    VERIFIED("Verified"),
    
    MANAGED("Managed");

    private String value;

    HostNameTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static HostNameTypeEnum fromValue(String value) {
      for (HostNameTypeEnum b : HostNameTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<HostNameTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final HostNameTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public HostNameTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return HostNameTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      HostNameTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_HOST_NAME_TYPE = "hostNameType";
  @SerializedName(SERIALIZED_NAME_HOST_NAME_TYPE)
  private HostNameTypeEnum hostNameType;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SITE_NAMES = "siteNames";
  @SerializedName(SERIALIZED_NAME_SITE_NAMES)
  private List<String> siteNames = new ArrayList<>();

  public HostName() {
  }

  public HostName azureResourceName(String azureResourceName) {
    this.azureResourceName = azureResourceName;
    return this;
  }

  /**
   * Name of the Azure resource the hostname is assigned to. If it is assigned to a Traffic Manager then it will be the Traffic Manager name otherwise it will be the app name.
   * @return azureResourceName
   */
  @javax.annotation.Nullable
  public String getAzureResourceName() {
    return azureResourceName;
  }

  public void setAzureResourceName(String azureResourceName) {
    this.azureResourceName = azureResourceName;
  }


  public HostName azureResourceType(AzureResourceTypeEnum azureResourceType) {
    this.azureResourceType = azureResourceType;
    return this;
  }

  /**
   * Type of the Azure resource the hostname is assigned to.
   * @return azureResourceType
   */
  @javax.annotation.Nullable
  public AzureResourceTypeEnum getAzureResourceType() {
    return azureResourceType;
  }

  public void setAzureResourceType(AzureResourceTypeEnum azureResourceType) {
    this.azureResourceType = azureResourceType;
  }


  public HostName customHostNameDnsRecordType(CustomHostNameDnsRecordTypeEnum customHostNameDnsRecordType) {
    this.customHostNameDnsRecordType = customHostNameDnsRecordType;
    return this;
  }

  /**
   * Type of the DNS record.
   * @return customHostNameDnsRecordType
   */
  @javax.annotation.Nullable
  public CustomHostNameDnsRecordTypeEnum getCustomHostNameDnsRecordType() {
    return customHostNameDnsRecordType;
  }

  public void setCustomHostNameDnsRecordType(CustomHostNameDnsRecordTypeEnum customHostNameDnsRecordType) {
    this.customHostNameDnsRecordType = customHostNameDnsRecordType;
  }


  public HostName hostNameType(HostNameTypeEnum hostNameType) {
    this.hostNameType = hostNameType;
    return this;
  }

  /**
   * Type of the hostname.
   * @return hostNameType
   */
  @javax.annotation.Nullable
  public HostNameTypeEnum getHostNameType() {
    return hostNameType;
  }

  public void setHostNameType(HostNameTypeEnum hostNameType) {
    this.hostNameType = hostNameType;
  }


  public HostName name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of the hostname.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public HostName siteNames(List<String> siteNames) {
    this.siteNames = siteNames;
    return this;
  }

  public HostName addSiteNamesItem(String siteNamesItem) {
    if (this.siteNames == null) {
      this.siteNames = new ArrayList<>();
    }
    this.siteNames.add(siteNamesItem);
    return this;
  }

  /**
   * List of apps the hostname is assigned to. This list will have more than one app only if the hostname is pointing to a Traffic Manager.
   * @return siteNames
   */
  @javax.annotation.Nullable
  public List<String> getSiteNames() {
    return siteNames;
  }

  public void setSiteNames(List<String> siteNames) {
    this.siteNames = siteNames;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HostName hostName = (HostName) o;
    return Objects.equals(this.azureResourceName, hostName.azureResourceName) &&
        Objects.equals(this.azureResourceType, hostName.azureResourceType) &&
        Objects.equals(this.customHostNameDnsRecordType, hostName.customHostNameDnsRecordType) &&
        Objects.equals(this.hostNameType, hostName.hostNameType) &&
        Objects.equals(this.name, hostName.name) &&
        Objects.equals(this.siteNames, hostName.siteNames);
  }

  @Override
  public int hashCode() {
    return Objects.hash(azureResourceName, azureResourceType, customHostNameDnsRecordType, hostNameType, name, siteNames);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HostName {\n");
    sb.append("    azureResourceName: ").append(toIndentedString(azureResourceName)).append("\n");
    sb.append("    azureResourceType: ").append(toIndentedString(azureResourceType)).append("\n");
    sb.append("    customHostNameDnsRecordType: ").append(toIndentedString(customHostNameDnsRecordType)).append("\n");
    sb.append("    hostNameType: ").append(toIndentedString(hostNameType)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    siteNames: ").append(toIndentedString(siteNames)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("azureResourceName");
    openapiFields.add("azureResourceType");
    openapiFields.add("customHostNameDnsRecordType");
    openapiFields.add("hostNameType");
    openapiFields.add("name");
    openapiFields.add("siteNames");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to HostName
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!HostName.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in HostName is not found in the empty JSON string", HostName.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!HostName.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `HostName` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("azureResourceName") != null && !jsonObj.get("azureResourceName").isJsonNull()) && !jsonObj.get("azureResourceName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `azureResourceName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("azureResourceName").toString()));
      }
      if ((jsonObj.get("azureResourceType") != null && !jsonObj.get("azureResourceType").isJsonNull()) && !jsonObj.get("azureResourceType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `azureResourceType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("azureResourceType").toString()));
      }
      // validate the optional field `azureResourceType`
      if (jsonObj.get("azureResourceType") != null && !jsonObj.get("azureResourceType").isJsonNull()) {
        AzureResourceTypeEnum.validateJsonElement(jsonObj.get("azureResourceType"));
      }
      if ((jsonObj.get("customHostNameDnsRecordType") != null && !jsonObj.get("customHostNameDnsRecordType").isJsonNull()) && !jsonObj.get("customHostNameDnsRecordType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customHostNameDnsRecordType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customHostNameDnsRecordType").toString()));
      }
      // validate the optional field `customHostNameDnsRecordType`
      if (jsonObj.get("customHostNameDnsRecordType") != null && !jsonObj.get("customHostNameDnsRecordType").isJsonNull()) {
        CustomHostNameDnsRecordTypeEnum.validateJsonElement(jsonObj.get("customHostNameDnsRecordType"));
      }
      if ((jsonObj.get("hostNameType") != null && !jsonObj.get("hostNameType").isJsonNull()) && !jsonObj.get("hostNameType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hostNameType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hostNameType").toString()));
      }
      // validate the optional field `hostNameType`
      if (jsonObj.get("hostNameType") != null && !jsonObj.get("hostNameType").isJsonNull()) {
        HostNameTypeEnum.validateJsonElement(jsonObj.get("hostNameType"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("siteNames") != null && !jsonObj.get("siteNames").isJsonNull() && !jsonObj.get("siteNames").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `siteNames` to be an array in the JSON string but got `%s`", jsonObj.get("siteNames").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!HostName.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'HostName' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<HostName> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(HostName.class));

       return (TypeAdapter<T>) new TypeAdapter<HostName>() {
           @Override
           public void write(JsonWriter out, HostName value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public HostName read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of HostName given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of HostName
   * @throws IOException if the JSON string is invalid with respect to HostName
   */
  public static HostName fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, HostName.class);
  }

  /**
   * Convert an instance of HostName to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

