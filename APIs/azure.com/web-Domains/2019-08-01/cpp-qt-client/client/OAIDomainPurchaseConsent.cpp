/**
 * Domains API Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-08-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDomainPurchaseConsent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDomainPurchaseConsent::OAIDomainPurchaseConsent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDomainPurchaseConsent::OAIDomainPurchaseConsent() {
    this->initializeModel();
}

OAIDomainPurchaseConsent::~OAIDomainPurchaseConsent() {}

void OAIDomainPurchaseConsent::initializeModel() {

    m_agreed_at_isSet = false;
    m_agreed_at_isValid = false;

    m_agreed_by_isSet = false;
    m_agreed_by_isValid = false;

    m_agreement_keys_isSet = false;
    m_agreement_keys_isValid = false;
}

void OAIDomainPurchaseConsent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDomainPurchaseConsent::fromJsonObject(QJsonObject json) {

    m_agreed_at_isValid = ::OpenAPI::fromJsonValue(m_agreed_at, json[QString("agreedAt")]);
    m_agreed_at_isSet = !json[QString("agreedAt")].isNull() && m_agreed_at_isValid;

    m_agreed_by_isValid = ::OpenAPI::fromJsonValue(m_agreed_by, json[QString("agreedBy")]);
    m_agreed_by_isSet = !json[QString("agreedBy")].isNull() && m_agreed_by_isValid;

    m_agreement_keys_isValid = ::OpenAPI::fromJsonValue(m_agreement_keys, json[QString("agreementKeys")]);
    m_agreement_keys_isSet = !json[QString("agreementKeys")].isNull() && m_agreement_keys_isValid;
}

QString OAIDomainPurchaseConsent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDomainPurchaseConsent::asJsonObject() const {
    QJsonObject obj;
    if (m_agreed_at_isSet) {
        obj.insert(QString("agreedAt"), ::OpenAPI::toJsonValue(m_agreed_at));
    }
    if (m_agreed_by_isSet) {
        obj.insert(QString("agreedBy"), ::OpenAPI::toJsonValue(m_agreed_by));
    }
    if (m_agreement_keys.size() > 0) {
        obj.insert(QString("agreementKeys"), ::OpenAPI::toJsonValue(m_agreement_keys));
    }
    return obj;
}

QDateTime OAIDomainPurchaseConsent::getAgreedAt() const {
    return m_agreed_at;
}
void OAIDomainPurchaseConsent::setAgreedAt(const QDateTime &agreed_at) {
    m_agreed_at = agreed_at;
    m_agreed_at_isSet = true;
}

bool OAIDomainPurchaseConsent::is_agreed_at_Set() const{
    return m_agreed_at_isSet;
}

bool OAIDomainPurchaseConsent::is_agreed_at_Valid() const{
    return m_agreed_at_isValid;
}

QString OAIDomainPurchaseConsent::getAgreedBy() const {
    return m_agreed_by;
}
void OAIDomainPurchaseConsent::setAgreedBy(const QString &agreed_by) {
    m_agreed_by = agreed_by;
    m_agreed_by_isSet = true;
}

bool OAIDomainPurchaseConsent::is_agreed_by_Set() const{
    return m_agreed_by_isSet;
}

bool OAIDomainPurchaseConsent::is_agreed_by_Valid() const{
    return m_agreed_by_isValid;
}

QList<QString> OAIDomainPurchaseConsent::getAgreementKeys() const {
    return m_agreement_keys;
}
void OAIDomainPurchaseConsent::setAgreementKeys(const QList<QString> &agreement_keys) {
    m_agreement_keys = agreement_keys;
    m_agreement_keys_isSet = true;
}

bool OAIDomainPurchaseConsent::is_agreement_keys_Set() const{
    return m_agreement_keys_isSet;
}

bool OAIDomainPurchaseConsent::is_agreement_keys_Valid() const{
    return m_agreement_keys_isValid;
}

bool OAIDomainPurchaseConsent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_agreed_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_agreed_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_agreement_keys.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDomainPurchaseConsent::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
