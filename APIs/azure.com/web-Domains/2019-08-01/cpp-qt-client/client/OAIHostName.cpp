/**
 * Domains API Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-08-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHostName.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHostName::OAIHostName(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHostName::OAIHostName() {
    this->initializeModel();
}

OAIHostName::~OAIHostName() {}

void OAIHostName::initializeModel() {

    m_azure_resource_name_isSet = false;
    m_azure_resource_name_isValid = false;

    m_azure_resource_type_isSet = false;
    m_azure_resource_type_isValid = false;

    m_custom_host_name_dns_record_type_isSet = false;
    m_custom_host_name_dns_record_type_isValid = false;

    m_host_name_type_isSet = false;
    m_host_name_type_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_site_names_isSet = false;
    m_site_names_isValid = false;
}

void OAIHostName::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHostName::fromJsonObject(QJsonObject json) {

    m_azure_resource_name_isValid = ::OpenAPI::fromJsonValue(m_azure_resource_name, json[QString("azureResourceName")]);
    m_azure_resource_name_isSet = !json[QString("azureResourceName")].isNull() && m_azure_resource_name_isValid;

    m_azure_resource_type_isValid = ::OpenAPI::fromJsonValue(m_azure_resource_type, json[QString("azureResourceType")]);
    m_azure_resource_type_isSet = !json[QString("azureResourceType")].isNull() && m_azure_resource_type_isValid;

    m_custom_host_name_dns_record_type_isValid = ::OpenAPI::fromJsonValue(m_custom_host_name_dns_record_type, json[QString("customHostNameDnsRecordType")]);
    m_custom_host_name_dns_record_type_isSet = !json[QString("customHostNameDnsRecordType")].isNull() && m_custom_host_name_dns_record_type_isValid;

    m_host_name_type_isValid = ::OpenAPI::fromJsonValue(m_host_name_type, json[QString("hostNameType")]);
    m_host_name_type_isSet = !json[QString("hostNameType")].isNull() && m_host_name_type_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_site_names_isValid = ::OpenAPI::fromJsonValue(m_site_names, json[QString("siteNames")]);
    m_site_names_isSet = !json[QString("siteNames")].isNull() && m_site_names_isValid;
}

QString OAIHostName::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHostName::asJsonObject() const {
    QJsonObject obj;
    if (m_azure_resource_name_isSet) {
        obj.insert(QString("azureResourceName"), ::OpenAPI::toJsonValue(m_azure_resource_name));
    }
    if (m_azure_resource_type_isSet) {
        obj.insert(QString("azureResourceType"), ::OpenAPI::toJsonValue(m_azure_resource_type));
    }
    if (m_custom_host_name_dns_record_type_isSet) {
        obj.insert(QString("customHostNameDnsRecordType"), ::OpenAPI::toJsonValue(m_custom_host_name_dns_record_type));
    }
    if (m_host_name_type_isSet) {
        obj.insert(QString("hostNameType"), ::OpenAPI::toJsonValue(m_host_name_type));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_site_names.size() > 0) {
        obj.insert(QString("siteNames"), ::OpenAPI::toJsonValue(m_site_names));
    }
    return obj;
}

QString OAIHostName::getAzureResourceName() const {
    return m_azure_resource_name;
}
void OAIHostName::setAzureResourceName(const QString &azure_resource_name) {
    m_azure_resource_name = azure_resource_name;
    m_azure_resource_name_isSet = true;
}

bool OAIHostName::is_azure_resource_name_Set() const{
    return m_azure_resource_name_isSet;
}

bool OAIHostName::is_azure_resource_name_Valid() const{
    return m_azure_resource_name_isValid;
}

QString OAIHostName::getAzureResourceType() const {
    return m_azure_resource_type;
}
void OAIHostName::setAzureResourceType(const QString &azure_resource_type) {
    m_azure_resource_type = azure_resource_type;
    m_azure_resource_type_isSet = true;
}

bool OAIHostName::is_azure_resource_type_Set() const{
    return m_azure_resource_type_isSet;
}

bool OAIHostName::is_azure_resource_type_Valid() const{
    return m_azure_resource_type_isValid;
}

QString OAIHostName::getCustomHostNameDnsRecordType() const {
    return m_custom_host_name_dns_record_type;
}
void OAIHostName::setCustomHostNameDnsRecordType(const QString &custom_host_name_dns_record_type) {
    m_custom_host_name_dns_record_type = custom_host_name_dns_record_type;
    m_custom_host_name_dns_record_type_isSet = true;
}

bool OAIHostName::is_custom_host_name_dns_record_type_Set() const{
    return m_custom_host_name_dns_record_type_isSet;
}

bool OAIHostName::is_custom_host_name_dns_record_type_Valid() const{
    return m_custom_host_name_dns_record_type_isValid;
}

QString OAIHostName::getHostNameType() const {
    return m_host_name_type;
}
void OAIHostName::setHostNameType(const QString &host_name_type) {
    m_host_name_type = host_name_type;
    m_host_name_type_isSet = true;
}

bool OAIHostName::is_host_name_type_Set() const{
    return m_host_name_type_isSet;
}

bool OAIHostName::is_host_name_type_Valid() const{
    return m_host_name_type_isValid;
}

QString OAIHostName::getName() const {
    return m_name;
}
void OAIHostName::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIHostName::is_name_Set() const{
    return m_name_isSet;
}

bool OAIHostName::is_name_Valid() const{
    return m_name_isValid;
}

QList<QString> OAIHostName::getSiteNames() const {
    return m_site_names;
}
void OAIHostName::setSiteNames(const QList<QString> &site_names) {
    m_site_names = site_names;
    m_site_names_isSet = true;
}

bool OAIHostName::is_site_names_Set() const{
    return m_site_names_isSet;
}

bool OAIHostName::is_site_names_Valid() const{
    return m_site_names_isValid;
}

bool OAIHostName::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_azure_resource_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_azure_resource_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_host_name_dns_record_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_host_name_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_site_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHostName::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
