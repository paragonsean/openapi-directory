/*
 * Domains API Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2015-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Domain;
import org.openapitools.client.model.DomainAvailablilityCheckResult;
import org.openapitools.client.model.DomainCollection;
import org.openapitools.client.model.DomainControlCenterSsoRequest;
import org.openapitools.client.model.DomainOwnershipIdentifier;
import org.openapitools.client.model.DomainOwnershipIdentifierCollection;
import org.openapitools.client.model.DomainPatchResource;
import org.openapitools.client.model.DomainRecommendationSearchParameters;
import org.openapitools.client.model.DomainsCheckAvailabilityRequest;
import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.NameIdentifierCollection;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DomainsApi
 */
@Disabled
public class DomainsApiTest {

    private final DomainsApi api = new DomainsApi();

    /**
     * Check if a domain is available for registration.
     *
     * Check if a domain is available for registration.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void domainsCheckAvailabilityTest() throws ApiException {
        String subscriptionId = null;
        String apiVersion = null;
        DomainsCheckAvailabilityRequest identifier = null;
        DomainAvailablilityCheckResult response = api.domainsCheckAvailability(subscriptionId, apiVersion, identifier);
        // TODO: test validations
    }

    /**
     * Creates or updates a domain.
     *
     * Creates or updates a domain.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void domainsCreateOrUpdateTest() throws ApiException {
        String resourceGroupName = null;
        String domainName = null;
        String subscriptionId = null;
        String apiVersion = null;
        Domain domain = null;
        Domain response = api.domainsCreateOrUpdate(resourceGroupName, domainName, subscriptionId, apiVersion, domain);
        // TODO: test validations
    }

    /**
     * Creates an ownership identifier for a domain or updates identifier details for an existing identifer
     *
     * Creates an ownership identifier for a domain or updates identifier details for an existing identifer
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void domainsCreateOrUpdateOwnershipIdentifierTest() throws ApiException {
        String resourceGroupName = null;
        String domainName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        DomainOwnershipIdentifier domainOwnershipIdentifier = null;
        DomainOwnershipIdentifier response = api.domainsCreateOrUpdateOwnershipIdentifier(resourceGroupName, domainName, name, subscriptionId, apiVersion, domainOwnershipIdentifier);
        // TODO: test validations
    }

    /**
     * Delete a domain.
     *
     * Delete a domain.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void domainsDeleteTest() throws ApiException {
        String resourceGroupName = null;
        String domainName = null;
        String subscriptionId = null;
        String apiVersion = null;
        Boolean forceHardDeleteDomain = null;
        api.domainsDelete(resourceGroupName, domainName, subscriptionId, apiVersion, forceHardDeleteDomain);
        // TODO: test validations
    }

    /**
     * Delete ownership identifier for domain
     *
     * Delete ownership identifier for domain
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void domainsDeleteOwnershipIdentifierTest() throws ApiException {
        String resourceGroupName = null;
        String domainName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        api.domainsDeleteOwnershipIdentifier(resourceGroupName, domainName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get a domain.
     *
     * Get a domain.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void domainsGetTest() throws ApiException {
        String resourceGroupName = null;
        String domainName = null;
        String subscriptionId = null;
        String apiVersion = null;
        Domain response = api.domainsGet(resourceGroupName, domainName, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Generate a single sign-on request for the domain management portal.
     *
     * Generate a single sign-on request for the domain management portal.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void domainsGetControlCenterSsoRequestTest() throws ApiException {
        String subscriptionId = null;
        String apiVersion = null;
        DomainControlCenterSsoRequest response = api.domainsGetControlCenterSsoRequest(subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get ownership identifier for domain
     *
     * Get ownership identifier for domain
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void domainsGetOwnershipIdentifierTest() throws ApiException {
        String resourceGroupName = null;
        String domainName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        DomainOwnershipIdentifier response = api.domainsGetOwnershipIdentifier(resourceGroupName, domainName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get all domains in a subscription.
     *
     * Get all domains in a subscription.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void domainsListTest() throws ApiException {
        String subscriptionId = null;
        String apiVersion = null;
        DomainCollection response = api.domainsList(subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get all domains in a resource group.
     *
     * Get all domains in a resource group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void domainsListByResourceGroupTest() throws ApiException {
        String resourceGroupName = null;
        String subscriptionId = null;
        String apiVersion = null;
        DomainCollection response = api.domainsListByResourceGroup(resourceGroupName, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Lists domain ownership identifiers.
     *
     * Lists domain ownership identifiers.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void domainsListOwnershipIdentifiersTest() throws ApiException {
        String resourceGroupName = null;
        String domainName = null;
        String subscriptionId = null;
        String apiVersion = null;
        DomainOwnershipIdentifierCollection response = api.domainsListOwnershipIdentifiers(resourceGroupName, domainName, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get domain name recommendations based on keywords.
     *
     * Get domain name recommendations based on keywords.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void domainsListRecommendationsTest() throws ApiException {
        String subscriptionId = null;
        String apiVersion = null;
        DomainRecommendationSearchParameters parameters = null;
        NameIdentifierCollection response = api.domainsListRecommendations(subscriptionId, apiVersion, parameters);
        // TODO: test validations
    }

    /**
     * Renew a domain.
     *
     * Renew a domain.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void domainsRenewTest() throws ApiException {
        String resourceGroupName = null;
        String domainName = null;
        String subscriptionId = null;
        String apiVersion = null;
        api.domainsRenew(resourceGroupName, domainName, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Creates or updates a domain.
     *
     * Creates or updates a domain.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void domainsUpdateTest() throws ApiException {
        String resourceGroupName = null;
        String domainName = null;
        String subscriptionId = null;
        String apiVersion = null;
        DomainPatchResource domain = null;
        Domain response = api.domainsUpdate(resourceGroupName, domainName, subscriptionId, apiVersion, domain);
        // TODO: test validations
    }

    /**
     * Creates an ownership identifier for a domain or updates identifier details for an existing identifer
     *
     * Creates an ownership identifier for a domain or updates identifier details for an existing identifer
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void domainsUpdateOwnershipIdentifierTest() throws ApiException {
        String resourceGroupName = null;
        String domainName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        DomainOwnershipIdentifier domainOwnershipIdentifier = null;
        DomainOwnershipIdentifier response = api.domainsUpdateOwnershipIdentifier(resourceGroupName, domainName, name, subscriptionId, apiVersion, domainOwnershipIdentifier);
        // TODO: test validations
    }

}
