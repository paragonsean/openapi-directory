/**
 * Domains API Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-02-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDomainsApi_H
#define OAI_OAIDomainsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIDomain.h"
#include "OAIDomainAvailablilityCheckResult.h"
#include "OAIDomainCollection.h"
#include "OAIDomainControlCenterSsoRequest.h"
#include "OAIDomainOwnershipIdentifier.h"
#include "OAIDomainOwnershipIdentifierCollection.h"
#include "OAIDomainPatchResource.h"
#include "OAIDomainRecommendationSearchParameters.h"
#include "OAIDomains_CheckAvailability_default_response.h"
#include "OAIDomains_CheckAvailability_request.h"
#include "OAINameIdentifierCollection.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDomainsApi : public QObject {
    Q_OBJECT

public:
    OAIDomainsApi(const int timeOut = 0);
    ~OAIDomainsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  identifier OAIDomains_CheckAvailability_request [required]
    */
    virtual void domainsCheckAvailability(const QString &subscription_id, const QString &api_version, const OAIDomains_CheckAvailability_request &identifier);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  domain_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  domain OAIDomain [required]
    */
    virtual void domainsCreateOrUpdate(const QString &resource_group_name, const QString &domain_name, const QString &subscription_id, const QString &api_version, const OAIDomain &domain);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  domain_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  domain_ownership_identifier OAIDomainOwnershipIdentifier [required]
    */
    virtual void domainsCreateOrUpdateOwnershipIdentifier(const QString &resource_group_name, const QString &domain_name, const QString &name, const QString &subscription_id, const QString &api_version, const OAIDomainOwnershipIdentifier &domain_ownership_identifier);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  domain_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  force_hard_delete_domain bool [optional]
    */
    virtual void domainsDelete(const QString &resource_group_name, const QString &domain_name, const QString &subscription_id, const QString &api_version, const ::OpenAPI::OptionalParam<bool> &force_hard_delete_domain = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  domain_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void domainsDeleteOwnershipIdentifier(const QString &resource_group_name, const QString &domain_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  domain_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void domainsGet(const QString &resource_group_name, const QString &domain_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void domainsGetControlCenterSsoRequest(const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  domain_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void domainsGetOwnershipIdentifier(const QString &resource_group_name, const QString &domain_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void domainsList(const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void domainsListByResourceGroup(const QString &resource_group_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  domain_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void domainsListOwnershipIdentifiers(const QString &resource_group_name, const QString &domain_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAIDomainRecommendationSearchParameters [required]
    */
    virtual void domainsListRecommendations(const QString &subscription_id, const QString &api_version, const OAIDomainRecommendationSearchParameters &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  domain_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void domainsRenew(const QString &resource_group_name, const QString &domain_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  domain_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  domain OAIDomainPatchResource [required]
    */
    virtual void domainsUpdate(const QString &resource_group_name, const QString &domain_name, const QString &subscription_id, const QString &api_version, const OAIDomainPatchResource &domain);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  domain_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  domain_ownership_identifier OAIDomainOwnershipIdentifier [required]
    */
    virtual void domainsUpdateOwnershipIdentifier(const QString &resource_group_name, const QString &domain_name, const QString &name, const QString &subscription_id, const QString &api_version, const OAIDomainOwnershipIdentifier &domain_ownership_identifier);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void domainsCheckAvailabilityCallback(OAIHttpRequestWorker *worker);
    void domainsCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void domainsCreateOrUpdateOwnershipIdentifierCallback(OAIHttpRequestWorker *worker);
    void domainsDeleteCallback(OAIHttpRequestWorker *worker);
    void domainsDeleteOwnershipIdentifierCallback(OAIHttpRequestWorker *worker);
    void domainsGetCallback(OAIHttpRequestWorker *worker);
    void domainsGetControlCenterSsoRequestCallback(OAIHttpRequestWorker *worker);
    void domainsGetOwnershipIdentifierCallback(OAIHttpRequestWorker *worker);
    void domainsListCallback(OAIHttpRequestWorker *worker);
    void domainsListByResourceGroupCallback(OAIHttpRequestWorker *worker);
    void domainsListOwnershipIdentifiersCallback(OAIHttpRequestWorker *worker);
    void domainsListRecommendationsCallback(OAIHttpRequestWorker *worker);
    void domainsRenewCallback(OAIHttpRequestWorker *worker);
    void domainsUpdateCallback(OAIHttpRequestWorker *worker);
    void domainsUpdateOwnershipIdentifierCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void domainsCheckAvailabilitySignal(OAIDomainAvailablilityCheckResult summary);
    void domainsCreateOrUpdateSignal(OAIDomain summary);
    void domainsCreateOrUpdateOwnershipIdentifierSignal(OAIDomainOwnershipIdentifier summary);
    void domainsDeleteSignal();
    void domainsDeleteOwnershipIdentifierSignal();
    void domainsGetSignal(OAIDomain summary);
    void domainsGetControlCenterSsoRequestSignal(OAIDomainControlCenterSsoRequest summary);
    void domainsGetOwnershipIdentifierSignal(OAIDomainOwnershipIdentifier summary);
    void domainsListSignal(OAIDomainCollection summary);
    void domainsListByResourceGroupSignal(OAIDomainCollection summary);
    void domainsListOwnershipIdentifiersSignal(OAIDomainOwnershipIdentifierCollection summary);
    void domainsListRecommendationsSignal(OAINameIdentifierCollection summary);
    void domainsRenewSignal();
    void domainsUpdateSignal(OAIDomain summary);
    void domainsUpdateOwnershipIdentifierSignal(OAIDomainOwnershipIdentifier summary);


    void domainsCheckAvailabilitySignalFull(OAIHttpRequestWorker *worker, OAIDomainAvailablilityCheckResult summary);
    void domainsCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIDomain summary);
    void domainsCreateOrUpdateOwnershipIdentifierSignalFull(OAIHttpRequestWorker *worker, OAIDomainOwnershipIdentifier summary);
    void domainsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void domainsDeleteOwnershipIdentifierSignalFull(OAIHttpRequestWorker *worker);
    void domainsGetSignalFull(OAIHttpRequestWorker *worker, OAIDomain summary);
    void domainsGetControlCenterSsoRequestSignalFull(OAIHttpRequestWorker *worker, OAIDomainControlCenterSsoRequest summary);
    void domainsGetOwnershipIdentifierSignalFull(OAIHttpRequestWorker *worker, OAIDomainOwnershipIdentifier summary);
    void domainsListSignalFull(OAIHttpRequestWorker *worker, OAIDomainCollection summary);
    void domainsListByResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAIDomainCollection summary);
    void domainsListOwnershipIdentifiersSignalFull(OAIHttpRequestWorker *worker, OAIDomainOwnershipIdentifierCollection summary);
    void domainsListRecommendationsSignalFull(OAIHttpRequestWorker *worker, OAINameIdentifierCollection summary);
    void domainsRenewSignalFull(OAIHttpRequestWorker *worker);
    void domainsUpdateSignalFull(OAIHttpRequestWorker *worker, OAIDomain summary);
    void domainsUpdateOwnershipIdentifierSignalFull(OAIHttpRequestWorker *worker, OAIDomainOwnershipIdentifier summary);

    Q_DECL_DEPRECATED_X("Use domainsCheckAvailabilitySignalError() instead")
    void domainsCheckAvailabilitySignalE(OAIDomainAvailablilityCheckResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void domainsCheckAvailabilitySignalError(OAIDomainAvailablilityCheckResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use domainsCreateOrUpdateSignalError() instead")
    void domainsCreateOrUpdateSignalE(OAIDomain summary, QNetworkReply::NetworkError error_type, QString error_str);
    void domainsCreateOrUpdateSignalError(OAIDomain summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use domainsCreateOrUpdateOwnershipIdentifierSignalError() instead")
    void domainsCreateOrUpdateOwnershipIdentifierSignalE(OAIDomainOwnershipIdentifier summary, QNetworkReply::NetworkError error_type, QString error_str);
    void domainsCreateOrUpdateOwnershipIdentifierSignalError(OAIDomainOwnershipIdentifier summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use domainsDeleteSignalError() instead")
    void domainsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void domainsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use domainsDeleteOwnershipIdentifierSignalError() instead")
    void domainsDeleteOwnershipIdentifierSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void domainsDeleteOwnershipIdentifierSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use domainsGetSignalError() instead")
    void domainsGetSignalE(OAIDomain summary, QNetworkReply::NetworkError error_type, QString error_str);
    void domainsGetSignalError(OAIDomain summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use domainsGetControlCenterSsoRequestSignalError() instead")
    void domainsGetControlCenterSsoRequestSignalE(OAIDomainControlCenterSsoRequest summary, QNetworkReply::NetworkError error_type, QString error_str);
    void domainsGetControlCenterSsoRequestSignalError(OAIDomainControlCenterSsoRequest summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use domainsGetOwnershipIdentifierSignalError() instead")
    void domainsGetOwnershipIdentifierSignalE(OAIDomainOwnershipIdentifier summary, QNetworkReply::NetworkError error_type, QString error_str);
    void domainsGetOwnershipIdentifierSignalError(OAIDomainOwnershipIdentifier summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use domainsListSignalError() instead")
    void domainsListSignalE(OAIDomainCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void domainsListSignalError(OAIDomainCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use domainsListByResourceGroupSignalError() instead")
    void domainsListByResourceGroupSignalE(OAIDomainCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void domainsListByResourceGroupSignalError(OAIDomainCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use domainsListOwnershipIdentifiersSignalError() instead")
    void domainsListOwnershipIdentifiersSignalE(OAIDomainOwnershipIdentifierCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void domainsListOwnershipIdentifiersSignalError(OAIDomainOwnershipIdentifierCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use domainsListRecommendationsSignalError() instead")
    void domainsListRecommendationsSignalE(OAINameIdentifierCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void domainsListRecommendationsSignalError(OAINameIdentifierCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use domainsRenewSignalError() instead")
    void domainsRenewSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void domainsRenewSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use domainsUpdateSignalError() instead")
    void domainsUpdateSignalE(OAIDomain summary, QNetworkReply::NetworkError error_type, QString error_str);
    void domainsUpdateSignalError(OAIDomain summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use domainsUpdateOwnershipIdentifierSignalError() instead")
    void domainsUpdateOwnershipIdentifierSignalE(OAIDomainOwnershipIdentifier summary, QNetworkReply::NetworkError error_type, QString error_str);
    void domainsUpdateOwnershipIdentifierSignalError(OAIDomainOwnershipIdentifier summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use domainsCheckAvailabilitySignalErrorFull() instead")
    void domainsCheckAvailabilitySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void domainsCheckAvailabilitySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use domainsCreateOrUpdateSignalErrorFull() instead")
    void domainsCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void domainsCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use domainsCreateOrUpdateOwnershipIdentifierSignalErrorFull() instead")
    void domainsCreateOrUpdateOwnershipIdentifierSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void domainsCreateOrUpdateOwnershipIdentifierSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use domainsDeleteSignalErrorFull() instead")
    void domainsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void domainsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use domainsDeleteOwnershipIdentifierSignalErrorFull() instead")
    void domainsDeleteOwnershipIdentifierSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void domainsDeleteOwnershipIdentifierSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use domainsGetSignalErrorFull() instead")
    void domainsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void domainsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use domainsGetControlCenterSsoRequestSignalErrorFull() instead")
    void domainsGetControlCenterSsoRequestSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void domainsGetControlCenterSsoRequestSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use domainsGetOwnershipIdentifierSignalErrorFull() instead")
    void domainsGetOwnershipIdentifierSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void domainsGetOwnershipIdentifierSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use domainsListSignalErrorFull() instead")
    void domainsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void domainsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use domainsListByResourceGroupSignalErrorFull() instead")
    void domainsListByResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void domainsListByResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use domainsListOwnershipIdentifiersSignalErrorFull() instead")
    void domainsListOwnershipIdentifiersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void domainsListOwnershipIdentifiersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use domainsListRecommendationsSignalErrorFull() instead")
    void domainsListRecommendationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void domainsListRecommendationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use domainsRenewSignalErrorFull() instead")
    void domainsRenewSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void domainsRenewSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use domainsUpdateSignalErrorFull() instead")
    void domainsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void domainsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use domainsUpdateOwnershipIdentifierSignalErrorFull() instead")
    void domainsUpdateOwnershipIdentifierSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void domainsUpdateOwnershipIdentifierSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
