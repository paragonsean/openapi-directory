# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class HostName(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, azure_resource_name: str=None, azure_resource_type: str=None, custom_host_name_dns_record_type: str=None, host_name_type: str=None, name: str=None, site_names: List[str]=None):
        """HostName - a model defined in OpenAPI

        :param azure_resource_name: The azure_resource_name of this HostName.
        :param azure_resource_type: The azure_resource_type of this HostName.
        :param custom_host_name_dns_record_type: The custom_host_name_dns_record_type of this HostName.
        :param host_name_type: The host_name_type of this HostName.
        :param name: The name of this HostName.
        :param site_names: The site_names of this HostName.
        """
        self.openapi_types = {
            'azure_resource_name': str,
            'azure_resource_type': str,
            'custom_host_name_dns_record_type': str,
            'host_name_type': str,
            'name': str,
            'site_names': List[str]
        }

        self.attribute_map = {
            'azure_resource_name': 'azureResourceName',
            'azure_resource_type': 'azureResourceType',
            'custom_host_name_dns_record_type': 'customHostNameDnsRecordType',
            'host_name_type': 'hostNameType',
            'name': 'name',
            'site_names': 'siteNames'
        }

        self._azure_resource_name = azure_resource_name
        self._azure_resource_type = azure_resource_type
        self._custom_host_name_dns_record_type = custom_host_name_dns_record_type
        self._host_name_type = host_name_type
        self._name = name
        self._site_names = site_names

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HostName':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HostName of this HostName.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def azure_resource_name(self):
        """Gets the azure_resource_name of this HostName.

        Name of the Azure resource the hostname is assigned to. If it is assigned to a Traffic Manager then it will be the Traffic Manager name otherwise it will be the app name.

        :return: The azure_resource_name of this HostName.
        :rtype: str
        """
        return self._azure_resource_name

    @azure_resource_name.setter
    def azure_resource_name(self, azure_resource_name):
        """Sets the azure_resource_name of this HostName.

        Name of the Azure resource the hostname is assigned to. If it is assigned to a Traffic Manager then it will be the Traffic Manager name otherwise it will be the app name.

        :param azure_resource_name: The azure_resource_name of this HostName.
        :type azure_resource_name: str
        """

        self._azure_resource_name = azure_resource_name

    @property
    def azure_resource_type(self):
        """Gets the azure_resource_type of this HostName.

        Type of the Azure resource the hostname is assigned to.

        :return: The azure_resource_type of this HostName.
        :rtype: str
        """
        return self._azure_resource_type

    @azure_resource_type.setter
    def azure_resource_type(self, azure_resource_type):
        """Sets the azure_resource_type of this HostName.

        Type of the Azure resource the hostname is assigned to.

        :param azure_resource_type: The azure_resource_type of this HostName.
        :type azure_resource_type: str
        """
        allowed_values = ["Website", "TrafficManager"]  # noqa: E501
        if azure_resource_type not in allowed_values:
            raise ValueError(
                "Invalid value for `azure_resource_type` ({0}), must be one of {1}"
                .format(azure_resource_type, allowed_values)
            )

        self._azure_resource_type = azure_resource_type

    @property
    def custom_host_name_dns_record_type(self):
        """Gets the custom_host_name_dns_record_type of this HostName.

        Type of the DNS record.

        :return: The custom_host_name_dns_record_type of this HostName.
        :rtype: str
        """
        return self._custom_host_name_dns_record_type

    @custom_host_name_dns_record_type.setter
    def custom_host_name_dns_record_type(self, custom_host_name_dns_record_type):
        """Sets the custom_host_name_dns_record_type of this HostName.

        Type of the DNS record.

        :param custom_host_name_dns_record_type: The custom_host_name_dns_record_type of this HostName.
        :type custom_host_name_dns_record_type: str
        """
        allowed_values = ["CName", "A"]  # noqa: E501
        if custom_host_name_dns_record_type not in allowed_values:
            raise ValueError(
                "Invalid value for `custom_host_name_dns_record_type` ({0}), must be one of {1}"
                .format(custom_host_name_dns_record_type, allowed_values)
            )

        self._custom_host_name_dns_record_type = custom_host_name_dns_record_type

    @property
    def host_name_type(self):
        """Gets the host_name_type of this HostName.

        Type of the hostname.

        :return: The host_name_type of this HostName.
        :rtype: str
        """
        return self._host_name_type

    @host_name_type.setter
    def host_name_type(self, host_name_type):
        """Sets the host_name_type of this HostName.

        Type of the hostname.

        :param host_name_type: The host_name_type of this HostName.
        :type host_name_type: str
        """
        allowed_values = ["Verified", "Managed"]  # noqa: E501
        if host_name_type not in allowed_values:
            raise ValueError(
                "Invalid value for `host_name_type` ({0}), must be one of {1}"
                .format(host_name_type, allowed_values)
            )

        self._host_name_type = host_name_type

    @property
    def name(self):
        """Gets the name of this HostName.

        Name of the hostname.

        :return: The name of this HostName.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this HostName.

        Name of the hostname.

        :param name: The name of this HostName.
        :type name: str
        """

        self._name = name

    @property
    def site_names(self):
        """Gets the site_names of this HostName.

        List of apps the hostname is assigned to. This list will have more than one app only if the hostname is pointing to a Traffic Manager.

        :return: The site_names of this HostName.
        :rtype: List[str]
        """
        return self._site_names

    @site_names.setter
    def site_names(self, site_names):
        """Sets the site_names of this HostName.

        List of apps the hostname is assigned to. This list will have more than one app only if the hostname is pointing to a Traffic Manager.

        :param site_names: The site_names of this HostName.
        :type site_names: List[str]
        """

        self._site_names = site_names
