/**
 * DataLakeAnalyticsCatalogManagementClient
 * Creates an Azure Data Lake Analytics catalog client.
 *
 * The version of the OpenAPI document: 2015-10-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EntityId from './EntityId';

/**
 * The ExternalTable model module.
 * @module model/ExternalTable
 * @version 2015-10-01-preview
 */
class ExternalTable {
    /**
     * Constructs a new <code>ExternalTable</code>.
     * A Data Lake Analytics catalog external table item.
     * @alias module:model/ExternalTable
     */
    constructor() { 
        
        ExternalTable.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ExternalTable</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ExternalTable} obj Optional instance to populate.
     * @return {module:model/ExternalTable} The populated <code>ExternalTable</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ExternalTable();

            if (data.hasOwnProperty('dataSource')) {
                obj['dataSource'] = EntityId.constructFromObject(data['dataSource']);
            }
            if (data.hasOwnProperty('tableName')) {
                obj['tableName'] = ApiClient.convertToType(data['tableName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ExternalTable</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ExternalTable</code>.
     */
    static validateJSON(data) {
        // validate the optional field `dataSource`
        if (data['dataSource']) { // data not null
          EntityId.validateJSON(data['dataSource']);
        }
        // ensure the json data is a string
        if (data['tableName'] && !(typeof data['tableName'] === 'string' || data['tableName'] instanceof String)) {
            throw new Error("Expected the field `tableName` to be a primitive type in the JSON string but got " + data['tableName']);
        }

        return true;
    }


}



/**
 * @member {module:model/EntityId} dataSource
 */
ExternalTable.prototype['dataSource'] = undefined;

/**
 * the name of the table associated with this database and schema.
 * @member {String} tableName
 */
ExternalTable.prototype['tableName'] = undefined;






export default ExternalTable;

