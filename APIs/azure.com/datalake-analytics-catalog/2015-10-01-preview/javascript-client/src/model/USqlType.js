/**
 * DataLakeAnalyticsCatalogManagementClient
 * Creates an Azure Data Lake Analytics catalog client.
 *
 * The version of the OpenAPI document: 2015-10-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CatalogItem from './CatalogItem';

/**
 * The USqlType model module.
 * @module model/USqlType
 * @version 2015-10-01-preview
 */
class USqlType {
    /**
     * Constructs a new <code>USqlType</code>.
     * A Data Lake Analytics catalog U-SQL type item.
     * @alias module:model/USqlType
     * @implements module:model/CatalogItem
     */
    constructor() { 
        CatalogItem.initialize(this);
        USqlType.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>USqlType</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/USqlType} obj Optional instance to populate.
     * @return {module:model/USqlType} The populated <code>USqlType</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new USqlType();
            CatalogItem.constructFromObject(data, obj);

            if (data.hasOwnProperty('cSharpName')) {
                obj['cSharpName'] = ApiClient.convertToType(data['cSharpName'], 'String');
            }
            if (data.hasOwnProperty('databaseName')) {
                obj['databaseName'] = ApiClient.convertToType(data['databaseName'], 'String');
            }
            if (data.hasOwnProperty('fullCSharpName')) {
                obj['fullCSharpName'] = ApiClient.convertToType(data['fullCSharpName'], 'String');
            }
            if (data.hasOwnProperty('isAssemblyType')) {
                obj['isAssemblyType'] = ApiClient.convertToType(data['isAssemblyType'], 'Boolean');
            }
            if (data.hasOwnProperty('isComplexType')) {
                obj['isComplexType'] = ApiClient.convertToType(data['isComplexType'], 'Boolean');
            }
            if (data.hasOwnProperty('isNullable')) {
                obj['isNullable'] = ApiClient.convertToType(data['isNullable'], 'Boolean');
            }
            if (data.hasOwnProperty('isTableType')) {
                obj['isTableType'] = ApiClient.convertToType(data['isTableType'], 'Boolean');
            }
            if (data.hasOwnProperty('isUserDefined')) {
                obj['isUserDefined'] = ApiClient.convertToType(data['isUserDefined'], 'Boolean');
            }
            if (data.hasOwnProperty('principalId')) {
                obj['principalId'] = ApiClient.convertToType(data['principalId'], 'Number');
            }
            if (data.hasOwnProperty('schemaId')) {
                obj['schemaId'] = ApiClient.convertToType(data['schemaId'], 'Number');
            }
            if (data.hasOwnProperty('schemaName')) {
                obj['schemaName'] = ApiClient.convertToType(data['schemaName'], 'String');
            }
            if (data.hasOwnProperty('systemTypeId')) {
                obj['systemTypeId'] = ApiClient.convertToType(data['systemTypeId'], 'Number');
            }
            if (data.hasOwnProperty('typeFamily')) {
                obj['typeFamily'] = ApiClient.convertToType(data['typeFamily'], 'String');
            }
            if (data.hasOwnProperty('typeName')) {
                obj['typeName'] = ApiClient.convertToType(data['typeName'], 'String');
            }
            if (data.hasOwnProperty('userTypeId')) {
                obj['userTypeId'] = ApiClient.convertToType(data['userTypeId'], 'Number');
            }
            if (data.hasOwnProperty('computeAccountName')) {
                obj['computeAccountName'] = ApiClient.convertToType(data['computeAccountName'], 'String');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>USqlType</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>USqlType</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['cSharpName'] && !(typeof data['cSharpName'] === 'string' || data['cSharpName'] instanceof String)) {
            throw new Error("Expected the field `cSharpName` to be a primitive type in the JSON string but got " + data['cSharpName']);
        }
        // ensure the json data is a string
        if (data['databaseName'] && !(typeof data['databaseName'] === 'string' || data['databaseName'] instanceof String)) {
            throw new Error("Expected the field `databaseName` to be a primitive type in the JSON string but got " + data['databaseName']);
        }
        // ensure the json data is a string
        if (data['fullCSharpName'] && !(typeof data['fullCSharpName'] === 'string' || data['fullCSharpName'] instanceof String)) {
            throw new Error("Expected the field `fullCSharpName` to be a primitive type in the JSON string but got " + data['fullCSharpName']);
        }
        // ensure the json data is a string
        if (data['schemaName'] && !(typeof data['schemaName'] === 'string' || data['schemaName'] instanceof String)) {
            throw new Error("Expected the field `schemaName` to be a primitive type in the JSON string but got " + data['schemaName']);
        }
        // ensure the json data is a string
        if (data['typeFamily'] && !(typeof data['typeFamily'] === 'string' || data['typeFamily'] instanceof String)) {
            throw new Error("Expected the field `typeFamily` to be a primitive type in the JSON string but got " + data['typeFamily']);
        }
        // ensure the json data is a string
        if (data['typeName'] && !(typeof data['typeName'] === 'string' || data['typeName'] instanceof String)) {
            throw new Error("Expected the field `typeName` to be a primitive type in the JSON string but got " + data['typeName']);
        }
        // ensure the json data is a string
        if (data['computeAccountName'] && !(typeof data['computeAccountName'] === 'string' || data['computeAccountName'] instanceof String)) {
            throw new Error("Expected the field `computeAccountName` to be a primitive type in the JSON string but got " + data['computeAccountName']);
        }
        // ensure the json data is a string
        if (data['version'] && !(typeof data['version'] === 'string' || data['version'] instanceof String)) {
            throw new Error("Expected the field `version` to be a primitive type in the JSON string but got " + data['version']);
        }

        return true;
    }


}



/**
 * the C# name for this type.
 * @member {String} cSharpName
 */
USqlType.prototype['cSharpName'] = undefined;

/**
 * the name of the database.
 * @member {String} databaseName
 */
USqlType.prototype['databaseName'] = undefined;

/**
 * the fully qualified C# name for this type.
 * @member {String} fullCSharpName
 */
USqlType.prototype['fullCSharpName'] = undefined;

/**
 * The switch indicating if this type is an assembly type.
 * @member {Boolean} isAssemblyType
 */
USqlType.prototype['isAssemblyType'] = undefined;

/**
 * The switch indicating if this type is a complex type.
 * @member {Boolean} isComplexType
 */
USqlType.prototype['isComplexType'] = undefined;

/**
 * The switch indicating if this type is nullable.
 * @member {Boolean} isNullable
 */
USqlType.prototype['isNullable'] = undefined;

/**
 * The switch indicating if this type is a table type.
 * @member {Boolean} isTableType
 */
USqlType.prototype['isTableType'] = undefined;

/**
 * The switch indicating if this type is user defined.
 * @member {Boolean} isUserDefined
 */
USqlType.prototype['isUserDefined'] = undefined;

/**
 * the principal ID for this type.
 * @member {Number} principalId
 */
USqlType.prototype['principalId'] = undefined;

/**
 * the schema ID for this type.
 * @member {Number} schemaId
 */
USqlType.prototype['schemaId'] = undefined;

/**
 * the name of the schema associated with this table and database.
 * @member {String} schemaName
 */
USqlType.prototype['schemaName'] = undefined;

/**
 * the system type ID for this type.
 * @member {Number} systemTypeId
 */
USqlType.prototype['systemTypeId'] = undefined;

/**
 * the type family for this type.
 * @member {String} typeFamily
 */
USqlType.prototype['typeFamily'] = undefined;

/**
 * the name of type for this type.
 * @member {String} typeName
 */
USqlType.prototype['typeName'] = undefined;

/**
 * the user type ID for this type.
 * @member {Number} userTypeId
 */
USqlType.prototype['userTypeId'] = undefined;

/**
 * the name of the Data Lake Analytics account.
 * @member {String} computeAccountName
 */
USqlType.prototype['computeAccountName'] = undefined;

/**
 * the version of the catalog item.
 * @member {String} version
 */
USqlType.prototype['version'] = undefined;


// Implement CatalogItem interface:
/**
 * the name of the Data Lake Analytics account.
 * @member {String} computeAccountName
 */
CatalogItem.prototype['computeAccountName'] = undefined;
/**
 * the version of the catalog item.
 * @member {String} version
 */
CatalogItem.prototype['version'] = undefined;




export default USqlType;

