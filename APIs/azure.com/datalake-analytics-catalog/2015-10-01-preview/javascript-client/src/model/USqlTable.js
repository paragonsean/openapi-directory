/**
 * DataLakeAnalyticsCatalogManagementClient
 * Creates an Azure Data Lake Analytics catalog client.
 *
 * The version of the OpenAPI document: 2015-10-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CatalogItem from './CatalogItem';
import ExternalTable from './ExternalTable';
import USqlDistributionInfo from './USqlDistributionInfo';
import USqlIndex from './USqlIndex';
import USqlTableColumn from './USqlTableColumn';

/**
 * The USqlTable model module.
 * @module model/USqlTable
 * @version 2015-10-01-preview
 */
class USqlTable {
    /**
     * Constructs a new <code>USqlTable</code>.
     * A Data Lake Analytics catalog U-SQL table item.
     * @alias module:model/USqlTable
     * @implements module:model/CatalogItem
     */
    constructor() { 
        CatalogItem.initialize(this);
        USqlTable.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>USqlTable</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/USqlTable} obj Optional instance to populate.
     * @return {module:model/USqlTable} The populated <code>USqlTable</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new USqlTable();
            CatalogItem.constructFromObject(data, obj);

            if (data.hasOwnProperty('columnList')) {
                obj['columnList'] = ApiClient.convertToType(data['columnList'], [USqlTableColumn]);
            }
            if (data.hasOwnProperty('databaseName')) {
                obj['databaseName'] = ApiClient.convertToType(data['databaseName'], 'String');
            }
            if (data.hasOwnProperty('distributionInfo')) {
                obj['distributionInfo'] = USqlDistributionInfo.constructFromObject(data['distributionInfo']);
            }
            if (data.hasOwnProperty('externalTable')) {
                obj['externalTable'] = ExternalTable.constructFromObject(data['externalTable']);
            }
            if (data.hasOwnProperty('indexList')) {
                obj['indexList'] = ApiClient.convertToType(data['indexList'], [USqlIndex]);
            }
            if (data.hasOwnProperty('partitionKeyList')) {
                obj['partitionKeyList'] = ApiClient.convertToType(data['partitionKeyList'], ['String']);
            }
            if (data.hasOwnProperty('schemaName')) {
                obj['schemaName'] = ApiClient.convertToType(data['schemaName'], 'String');
            }
            if (data.hasOwnProperty('tableName')) {
                obj['tableName'] = ApiClient.convertToType(data['tableName'], 'String');
            }
            if (data.hasOwnProperty('computeAccountName')) {
                obj['computeAccountName'] = ApiClient.convertToType(data['computeAccountName'], 'String');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>USqlTable</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>USqlTable</code>.
     */
    static validateJSON(data) {
        if (data['columnList']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['columnList'])) {
                throw new Error("Expected the field `columnList` to be an array in the JSON data but got " + data['columnList']);
            }
            // validate the optional field `columnList` (array)
            for (const item of data['columnList']) {
                USqlTableColumn.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['databaseName'] && !(typeof data['databaseName'] === 'string' || data['databaseName'] instanceof String)) {
            throw new Error("Expected the field `databaseName` to be a primitive type in the JSON string but got " + data['databaseName']);
        }
        // validate the optional field `distributionInfo`
        if (data['distributionInfo']) { // data not null
          USqlDistributionInfo.validateJSON(data['distributionInfo']);
        }
        // validate the optional field `externalTable`
        if (data['externalTable']) { // data not null
          ExternalTable.validateJSON(data['externalTable']);
        }
        if (data['indexList']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['indexList'])) {
                throw new Error("Expected the field `indexList` to be an array in the JSON data but got " + data['indexList']);
            }
            // validate the optional field `indexList` (array)
            for (const item of data['indexList']) {
                USqlIndex.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['partitionKeyList'])) {
            throw new Error("Expected the field `partitionKeyList` to be an array in the JSON data but got " + data['partitionKeyList']);
        }
        // ensure the json data is a string
        if (data['schemaName'] && !(typeof data['schemaName'] === 'string' || data['schemaName'] instanceof String)) {
            throw new Error("Expected the field `schemaName` to be a primitive type in the JSON string but got " + data['schemaName']);
        }
        // ensure the json data is a string
        if (data['tableName'] && !(typeof data['tableName'] === 'string' || data['tableName'] instanceof String)) {
            throw new Error("Expected the field `tableName` to be a primitive type in the JSON string but got " + data['tableName']);
        }
        // ensure the json data is a string
        if (data['computeAccountName'] && !(typeof data['computeAccountName'] === 'string' || data['computeAccountName'] instanceof String)) {
            throw new Error("Expected the field `computeAccountName` to be a primitive type in the JSON string but got " + data['computeAccountName']);
        }
        // ensure the json data is a string
        if (data['version'] && !(typeof data['version'] === 'string' || data['version'] instanceof String)) {
            throw new Error("Expected the field `version` to be a primitive type in the JSON string but got " + data['version']);
        }

        return true;
    }


}



/**
 * the list of columns in this table
 * @member {Array.<module:model/USqlTableColumn>} columnList
 */
USqlTable.prototype['columnList'] = undefined;

/**
 * the name of the database.
 * @member {String} databaseName
 */
USqlTable.prototype['databaseName'] = undefined;

/**
 * @member {module:model/USqlDistributionInfo} distributionInfo
 */
USqlTable.prototype['distributionInfo'] = undefined;

/**
 * @member {module:model/ExternalTable} externalTable
 */
USqlTable.prototype['externalTable'] = undefined;

/**
 * the list of indices in this table
 * @member {Array.<module:model/USqlIndex>} indexList
 */
USqlTable.prototype['indexList'] = undefined;

/**
 * the list of partition keys in the table
 * @member {Array.<String>} partitionKeyList
 */
USqlTable.prototype['partitionKeyList'] = undefined;

/**
 * the name of the schema associated with this table and database.
 * @member {String} schemaName
 */
USqlTable.prototype['schemaName'] = undefined;

/**
 * the name of the table.
 * @member {String} tableName
 */
USqlTable.prototype['tableName'] = undefined;

/**
 * the name of the Data Lake Analytics account.
 * @member {String} computeAccountName
 */
USqlTable.prototype['computeAccountName'] = undefined;

/**
 * the version of the catalog item.
 * @member {String} version
 */
USqlTable.prototype['version'] = undefined;


// Implement CatalogItem interface:
/**
 * the name of the Data Lake Analytics account.
 * @member {String} computeAccountName
 */
CatalogItem.prototype['computeAccountName'] = undefined;
/**
 * the version of the catalog item.
 * @member {String} version
 */
CatalogItem.prototype['version'] = undefined;




export default USqlTable;

