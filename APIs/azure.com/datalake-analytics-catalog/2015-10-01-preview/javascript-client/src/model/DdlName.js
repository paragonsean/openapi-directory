/**
 * DataLakeAnalyticsCatalogManagementClient
 * Creates an Azure Data Lake Analytics catalog client.
 *
 * The version of the OpenAPI document: 2015-10-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DdlName model module.
 * @module model/DdlName
 * @version 2015-10-01-preview
 */
class DdlName {
    /**
     * Constructs a new <code>DdlName</code>.
     * A Data Lake Analytics DDL name item.
     * @alias module:model/DdlName
     */
    constructor() { 
        
        DdlName.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DdlName</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DdlName} obj Optional instance to populate.
     * @return {module:model/DdlName} The populated <code>DdlName</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DdlName();

            if (data.hasOwnProperty('firstPart')) {
                obj['firstPart'] = ApiClient.convertToType(data['firstPart'], 'String');
            }
            if (data.hasOwnProperty('secondPart')) {
                obj['secondPart'] = ApiClient.convertToType(data['secondPart'], 'String');
            }
            if (data.hasOwnProperty('server')) {
                obj['server'] = ApiClient.convertToType(data['server'], 'String');
            }
            if (data.hasOwnProperty('thirdPart')) {
                obj['thirdPart'] = ApiClient.convertToType(data['thirdPart'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DdlName</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DdlName</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['firstPart'] && !(typeof data['firstPart'] === 'string' || data['firstPart'] instanceof String)) {
            throw new Error("Expected the field `firstPart` to be a primitive type in the JSON string but got " + data['firstPart']);
        }
        // ensure the json data is a string
        if (data['secondPart'] && !(typeof data['secondPart'] === 'string' || data['secondPart'] instanceof String)) {
            throw new Error("Expected the field `secondPart` to be a primitive type in the JSON string but got " + data['secondPart']);
        }
        // ensure the json data is a string
        if (data['server'] && !(typeof data['server'] === 'string' || data['server'] instanceof String)) {
            throw new Error("Expected the field `server` to be a primitive type in the JSON string but got " + data['server']);
        }
        // ensure the json data is a string
        if (data['thirdPart'] && !(typeof data['thirdPart'] === 'string' || data['thirdPart'] instanceof String)) {
            throw new Error("Expected the field `thirdPart` to be a primitive type in the JSON string but got " + data['thirdPart']);
        }

        return true;
    }


}



/**
 * the name of the table associated with this database and schema.
 * @member {String} firstPart
 */
DdlName.prototype['firstPart'] = undefined;

/**
 * the name of the table associated with this database and schema.
 * @member {String} secondPart
 */
DdlName.prototype['secondPart'] = undefined;

/**
 * the name of the table associated with this database and schema.
 * @member {String} server
 */
DdlName.prototype['server'] = undefined;

/**
 * the name of the table associated with this database and schema.
 * @member {String} thirdPart
 */
DdlName.prototype['thirdPart'] = undefined;






export default DdlName;

