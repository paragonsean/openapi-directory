/**
 * DataLakeAnalyticsCatalogManagementClient
 * Creates an Azure Data Lake Analytics catalog client.
 *
 * The version of the OpenAPI document: 2015-10-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import USqlDirectedColumn from './USqlDirectedColumn';
import USqlDistributionInfo from './USqlDistributionInfo';

/**
 * The USqlIndex model module.
 * @module model/USqlIndex
 * @version 2015-10-01-preview
 */
class USqlIndex {
    /**
     * Constructs a new <code>USqlIndex</code>.
     * A Data Lake Analytics catalog U-SQL table index item.
     * @alias module:model/USqlIndex
     */
    constructor() { 
        
        USqlIndex.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>USqlIndex</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/USqlIndex} obj Optional instance to populate.
     * @return {module:model/USqlIndex} The populated <code>USqlIndex</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new USqlIndex();

            if (data.hasOwnProperty('columns')) {
                obj['columns'] = ApiClient.convertToType(data['columns'], ['String']);
            }
            if (data.hasOwnProperty('distributionInfo')) {
                obj['distributionInfo'] = USqlDistributionInfo.constructFromObject(data['distributionInfo']);
            }
            if (data.hasOwnProperty('indexId')) {
                obj['indexId'] = ApiClient.convertToType(data['indexId'], 'Number');
            }
            if (data.hasOwnProperty('indexKeys')) {
                obj['indexKeys'] = ApiClient.convertToType(data['indexKeys'], [USqlDirectedColumn]);
            }
            if (data.hasOwnProperty('isColumnstore')) {
                obj['isColumnstore'] = ApiClient.convertToType(data['isColumnstore'], 'Boolean');
            }
            if (data.hasOwnProperty('isUnique')) {
                obj['isUnique'] = ApiClient.convertToType(data['isUnique'], 'Boolean');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('partitionFunction')) {
                obj['partitionFunction'] = ApiClient.convertToType(data['partitionFunction'], 'String');
            }
            if (data.hasOwnProperty('partitionKeyList')) {
                obj['partitionKeyList'] = ApiClient.convertToType(data['partitionKeyList'], ['String']);
            }
            if (data.hasOwnProperty('streamNames')) {
                obj['streamNames'] = ApiClient.convertToType(data['streamNames'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>USqlIndex</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>USqlIndex</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['columns'])) {
            throw new Error("Expected the field `columns` to be an array in the JSON data but got " + data['columns']);
        }
        // validate the optional field `distributionInfo`
        if (data['distributionInfo']) { // data not null
          USqlDistributionInfo.validateJSON(data['distributionInfo']);
        }
        if (data['indexKeys']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['indexKeys'])) {
                throw new Error("Expected the field `indexKeys` to be an array in the JSON data but got " + data['indexKeys']);
            }
            // validate the optional field `indexKeys` (array)
            for (const item of data['indexKeys']) {
                USqlDirectedColumn.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['partitionFunction'] && !(typeof data['partitionFunction'] === 'string' || data['partitionFunction'] instanceof String)) {
            throw new Error("Expected the field `partitionFunction` to be a primitive type in the JSON string but got " + data['partitionFunction']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['partitionKeyList'])) {
            throw new Error("Expected the field `partitionKeyList` to be an array in the JSON data but got " + data['partitionKeyList']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['streamNames'])) {
            throw new Error("Expected the field `streamNames` to be an array in the JSON data but got " + data['streamNames']);
        }

        return true;
    }


}



/**
 * the list of columns in the index
 * @member {Array.<String>} columns
 */
USqlIndex.prototype['columns'] = undefined;

/**
 * @member {module:model/USqlDistributionInfo} distributionInfo
 */
USqlIndex.prototype['distributionInfo'] = undefined;

/**
 * the ID of this index within the table.
 * @member {Number} indexId
 */
USqlIndex.prototype['indexId'] = undefined;

/**
 * the list of directed columns in the index
 * @member {Array.<module:model/USqlDirectedColumn>} indexKeys
 */
USqlIndex.prototype['indexKeys'] = undefined;

/**
 * the switch indicating if this index is a columnstore index.
 * @member {Boolean} isColumnstore
 */
USqlIndex.prototype['isColumnstore'] = undefined;

/**
 * the switch indicating if this index is a unique index.
 * @member {Boolean} isUnique
 */
USqlIndex.prototype['isUnique'] = undefined;

/**
 * the name of the index in the table.
 * @member {String} name
 */
USqlIndex.prototype['name'] = undefined;

/**
 * partition function ID for the index.
 * @member {String} partitionFunction
 */
USqlIndex.prototype['partitionFunction'] = undefined;

/**
 * the list of partition keys in the index
 * @member {Array.<String>} partitionKeyList
 */
USqlIndex.prototype['partitionKeyList'] = undefined;

/**
 * the list of full paths to the streams that contain this index in the DataLake account.
 * @member {Array.<String>} streamNames
 */
USqlIndex.prototype['streamNames'] = undefined;






export default USqlIndex;

