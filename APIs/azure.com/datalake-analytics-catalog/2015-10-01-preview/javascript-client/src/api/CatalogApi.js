/**
 * DataLakeAnalyticsCatalogManagementClient
 * Creates an Azure Data Lake Analytics catalog client.
 *
 * The version of the OpenAPI document: 2015-10-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DataLakeAnalyticsCatalogSecretCreateOrUpdateParameters from '../model/DataLakeAnalyticsCatalogSecretCreateOrUpdateParameters';
import USqlAssembly from '../model/USqlAssembly';
import USqlAssemblyList from '../model/USqlAssemblyList';
import USqlCredential from '../model/USqlCredential';
import USqlCredentialList from '../model/USqlCredentialList';
import USqlDatabase from '../model/USqlDatabase';
import USqlDatabaseList from '../model/USqlDatabaseList';
import USqlExternalDataSource from '../model/USqlExternalDataSource';
import USqlExternalDataSourceList from '../model/USqlExternalDataSourceList';
import USqlProcedure from '../model/USqlProcedure';
import USqlProcedureList from '../model/USqlProcedureList';
import USqlSchema from '../model/USqlSchema';
import USqlSchemaList from '../model/USqlSchemaList';
import USqlSecret from '../model/USqlSecret';
import USqlTable from '../model/USqlTable';
import USqlTableList from '../model/USqlTableList';
import USqlTablePartition from '../model/USqlTablePartition';
import USqlTablePartitionList from '../model/USqlTablePartitionList';
import USqlTableStatistics from '../model/USqlTableStatistics';
import USqlTableStatisticsList from '../model/USqlTableStatisticsList';
import USqlTableType from '../model/USqlTableType';
import USqlTableTypeList from '../model/USqlTableTypeList';
import USqlTableValuedFunction from '../model/USqlTableValuedFunction';
import USqlTableValuedFunctionList from '../model/USqlTableValuedFunctionList';
import USqlTypeList from '../model/USqlTypeList';
import USqlView from '../model/USqlView';
import USqlViewList from '../model/USqlViewList';

/**
* Catalog service.
* @module api/CatalogApi
* @version 2015-10-01-preview
*/
export default class CatalogApi {

    /**
    * Constructs a new CatalogApi. 
    * @alias module:api/CatalogApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the catalogCreateSecret operation.
     * @callback module:api/CatalogApi~catalogCreateSecretCallback
     * @param {String} error Error message, if any.
     * @param {module:model/USqlSecret} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates the specified secret for use with external data sources in the specified database.
     * @param {String} databaseName The name of the database in which to create the secret.
     * @param {String} secretName The name of the secret.
     * @param {String} apiVersion Client Api Version.
     * @param {module:model/DataLakeAnalyticsCatalogSecretCreateOrUpdateParameters} parameters The parameters required to create the secret (name and password)
     * @param {module:api/CatalogApi~catalogCreateSecretCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/USqlSecret}
     */
    catalogCreateSecret(databaseName, secretName, apiVersion, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling catalogCreateSecret");
      }
      // verify the required parameter 'secretName' is set
      if (secretName === undefined || secretName === null) {
        throw new Error("Missing the required parameter 'secretName' when calling catalogCreateSecret");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling catalogCreateSecret");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling catalogCreateSecret");
      }

      let pathParams = {
        'databaseName': databaseName,
        'secretName': secretName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json', 'application/octet-stream'];
      let accepts = ['application/json', 'text/json', 'application/octet-stream'];
      let returnType = USqlSecret;
      return this.apiClient.callApi(
        '/catalog/usql/databases/{databaseName}/secrets/{secretName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the catalogDeleteAllSecrets operation.
     * @callback module:api/CatalogApi~catalogDeleteAllSecretsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes all secrets in the specified database
     * @param {String} databaseName The name of the database containing the secret.
     * @param {String} apiVersion Client Api Version.
     * @param {module:api/CatalogApi~catalogDeleteAllSecretsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    catalogDeleteAllSecrets(databaseName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling catalogDeleteAllSecrets");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling catalogDeleteAllSecrets");
      }

      let pathParams = {
        'databaseName': databaseName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/catalog/usql/databases/{databaseName}/secrets', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the catalogDeleteSecret operation.
     * @callback module:api/CatalogApi~catalogDeleteSecretCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the specified secret in the specified database
     * @param {String} databaseName The name of the database containing the secret.
     * @param {String} secretName The name of the secret to delete
     * @param {String} apiVersion Client Api Version.
     * @param {module:api/CatalogApi~catalogDeleteSecretCallback} callback The callback function, accepting three arguments: error, data, response
     */
    catalogDeleteSecret(databaseName, secretName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling catalogDeleteSecret");
      }
      // verify the required parameter 'secretName' is set
      if (secretName === undefined || secretName === null) {
        throw new Error("Missing the required parameter 'secretName' when calling catalogDeleteSecret");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling catalogDeleteSecret");
      }

      let pathParams = {
        'databaseName': databaseName,
        'secretName': secretName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/catalog/usql/databases/{databaseName}/secrets/{secretName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the catalogGetAssembly operation.
     * @callback module:api/CatalogApi~catalogGetAssemblyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/USqlAssembly} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the specified assembly from the Data Lake Analytics catalog.
     * @param {String} databaseName The name of the database containing the assembly.
     * @param {String} assemblyName The name of the assembly.
     * @param {String} apiVersion Client Api Version.
     * @param {module:api/CatalogApi~catalogGetAssemblyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/USqlAssembly}
     */
    catalogGetAssembly(databaseName, assemblyName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling catalogGetAssembly");
      }
      // verify the required parameter 'assemblyName' is set
      if (assemblyName === undefined || assemblyName === null) {
        throw new Error("Missing the required parameter 'assemblyName' when calling catalogGetAssembly");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling catalogGetAssembly");
      }

      let pathParams = {
        'databaseName': databaseName,
        'assemblyName': assemblyName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/octet-stream'];
      let returnType = USqlAssembly;
      return this.apiClient.callApi(
        '/catalog/usql/databases/{databaseName}/assemblies/{assemblyName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the catalogGetCredential operation.
     * @callback module:api/CatalogApi~catalogGetCredentialCallback
     * @param {String} error Error message, if any.
     * @param {module:model/USqlCredential} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the specified credential from the Data Lake Analytics catalog.
     * @param {String} databaseName The name of the database containing the schema.
     * @param {String} credentialName The name of the credential.
     * @param {String} apiVersion Client Api Version.
     * @param {module:api/CatalogApi~catalogGetCredentialCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/USqlCredential}
     */
    catalogGetCredential(databaseName, credentialName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling catalogGetCredential");
      }
      // verify the required parameter 'credentialName' is set
      if (credentialName === undefined || credentialName === null) {
        throw new Error("Missing the required parameter 'credentialName' when calling catalogGetCredential");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling catalogGetCredential");
      }

      let pathParams = {
        'databaseName': databaseName,
        'credentialName': credentialName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/octet-stream'];
      let returnType = USqlCredential;
      return this.apiClient.callApi(
        '/catalog/usql/databases/{databaseName}/credentials/{credentialName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the catalogGetDatabase operation.
     * @callback module:api/CatalogApi~catalogGetDatabaseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/USqlDatabase} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the specified database from the Data Lake Analytics catalog.
     * @param {String} databaseName The name of the database.
     * @param {String} apiVersion Client Api Version.
     * @param {module:api/CatalogApi~catalogGetDatabaseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/USqlDatabase}
     */
    catalogGetDatabase(databaseName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling catalogGetDatabase");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling catalogGetDatabase");
      }

      let pathParams = {
        'databaseName': databaseName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/octet-stream'];
      let returnType = USqlDatabase;
      return this.apiClient.callApi(
        '/catalog/usql/databases/{databaseName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the catalogGetExternalDataSource operation.
     * @callback module:api/CatalogApi~catalogGetExternalDataSourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/USqlExternalDataSource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the specified external data source from the Data Lake Analytics catalog.
     * @param {String} databaseName The name of the database containing the external data source.
     * @param {String} externalDataSourceName The name of the external data source.
     * @param {String} apiVersion Client Api Version.
     * @param {module:api/CatalogApi~catalogGetExternalDataSourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/USqlExternalDataSource}
     */
    catalogGetExternalDataSource(databaseName, externalDataSourceName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling catalogGetExternalDataSource");
      }
      // verify the required parameter 'externalDataSourceName' is set
      if (externalDataSourceName === undefined || externalDataSourceName === null) {
        throw new Error("Missing the required parameter 'externalDataSourceName' when calling catalogGetExternalDataSource");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling catalogGetExternalDataSource");
      }

      let pathParams = {
        'databaseName': databaseName,
        'externalDataSourceName': externalDataSourceName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/octet-stream'];
      let returnType = USqlExternalDataSource;
      return this.apiClient.callApi(
        '/catalog/usql/databases/{databaseName}/externaldatasources/{externalDataSourceName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the catalogGetProcedure operation.
     * @callback module:api/CatalogApi~catalogGetProcedureCallback
     * @param {String} error Error message, if any.
     * @param {module:model/USqlProcedure} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the specified procedure from the Data Lake Analytics catalog.
     * @param {String} databaseName The name of the database containing the procedure.
     * @param {String} schemaName The name of the schema containing the procedure.
     * @param {String} procedureName The name of the procedure.
     * @param {String} apiVersion Client Api Version.
     * @param {module:api/CatalogApi~catalogGetProcedureCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/USqlProcedure}
     */
    catalogGetProcedure(databaseName, schemaName, procedureName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling catalogGetProcedure");
      }
      // verify the required parameter 'schemaName' is set
      if (schemaName === undefined || schemaName === null) {
        throw new Error("Missing the required parameter 'schemaName' when calling catalogGetProcedure");
      }
      // verify the required parameter 'procedureName' is set
      if (procedureName === undefined || procedureName === null) {
        throw new Error("Missing the required parameter 'procedureName' when calling catalogGetProcedure");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling catalogGetProcedure");
      }

      let pathParams = {
        'databaseName': databaseName,
        'schemaName': schemaName,
        'procedureName': procedureName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/octet-stream'];
      let returnType = USqlProcedure;
      return this.apiClient.callApi(
        '/catalog/usql/databases/{databaseName}/schemas/{schemaName}/procedures/{procedureName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the catalogGetSchema operation.
     * @callback module:api/CatalogApi~catalogGetSchemaCallback
     * @param {String} error Error message, if any.
     * @param {module:model/USqlSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the specified schema from the Data Lake Analytics catalog.
     * @param {String} databaseName The name of the database containing the schema.
     * @param {String} schemaName The name of the schema.
     * @param {String} apiVersion Client Api Version.
     * @param {module:api/CatalogApi~catalogGetSchemaCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/USqlSchema}
     */
    catalogGetSchema(databaseName, schemaName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling catalogGetSchema");
      }
      // verify the required parameter 'schemaName' is set
      if (schemaName === undefined || schemaName === null) {
        throw new Error("Missing the required parameter 'schemaName' when calling catalogGetSchema");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling catalogGetSchema");
      }

      let pathParams = {
        'databaseName': databaseName,
        'schemaName': schemaName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/octet-stream'];
      let returnType = USqlSchema;
      return this.apiClient.callApi(
        '/catalog/usql/databases/{databaseName}/schemas/{schemaName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the catalogGetSecret operation.
     * @callback module:api/CatalogApi~catalogGetSecretCallback
     * @param {String} error Error message, if any.
     * @param {module:model/USqlSecret} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the specified secret in the specified database
     * @param {String} databaseName The name of the database containing the secret.
     * @param {String} secretName The name of the secret to get
     * @param {String} apiVersion Client Api Version.
     * @param {module:api/CatalogApi~catalogGetSecretCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/USqlSecret}
     */
    catalogGetSecret(databaseName, secretName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling catalogGetSecret");
      }
      // verify the required parameter 'secretName' is set
      if (secretName === undefined || secretName === null) {
        throw new Error("Missing the required parameter 'secretName' when calling catalogGetSecret");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling catalogGetSecret");
      }

      let pathParams = {
        'databaseName': databaseName,
        'secretName': secretName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/octet-stream'];
      let returnType = USqlSecret;
      return this.apiClient.callApi(
        '/catalog/usql/databases/{databaseName}/secrets/{secretName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the catalogGetTable operation.
     * @callback module:api/CatalogApi~catalogGetTableCallback
     * @param {String} error Error message, if any.
     * @param {module:model/USqlTable} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the specified table from the Data Lake Analytics catalog.
     * @param {String} databaseName The name of the database containing the table.
     * @param {String} schemaName The name of the schema containing the table.
     * @param {String} tableName The name of the table.
     * @param {String} apiVersion Client Api Version.
     * @param {module:api/CatalogApi~catalogGetTableCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/USqlTable}
     */
    catalogGetTable(databaseName, schemaName, tableName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling catalogGetTable");
      }
      // verify the required parameter 'schemaName' is set
      if (schemaName === undefined || schemaName === null) {
        throw new Error("Missing the required parameter 'schemaName' when calling catalogGetTable");
      }
      // verify the required parameter 'tableName' is set
      if (tableName === undefined || tableName === null) {
        throw new Error("Missing the required parameter 'tableName' when calling catalogGetTable");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling catalogGetTable");
      }

      let pathParams = {
        'databaseName': databaseName,
        'schemaName': schemaName,
        'tableName': tableName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/octet-stream'];
      let returnType = USqlTable;
      return this.apiClient.callApi(
        '/catalog/usql/databases/{databaseName}/schemas/{schemaName}/tables/{tableName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the catalogGetTablePartition operation.
     * @callback module:api/CatalogApi~catalogGetTablePartitionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/USqlTablePartition} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the specified table partition from the Data Lake Analytics catalog.
     * @param {String} databaseName The name of the database containing the partition.
     * @param {String} schemaName The name of the schema containing the partition.
     * @param {String} tableName The name of the table containing the partition.
     * @param {String} partitionName The name of the table partition.
     * @param {String} apiVersion Client Api Version.
     * @param {module:api/CatalogApi~catalogGetTablePartitionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/USqlTablePartition}
     */
    catalogGetTablePartition(databaseName, schemaName, tableName, partitionName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling catalogGetTablePartition");
      }
      // verify the required parameter 'schemaName' is set
      if (schemaName === undefined || schemaName === null) {
        throw new Error("Missing the required parameter 'schemaName' when calling catalogGetTablePartition");
      }
      // verify the required parameter 'tableName' is set
      if (tableName === undefined || tableName === null) {
        throw new Error("Missing the required parameter 'tableName' when calling catalogGetTablePartition");
      }
      // verify the required parameter 'partitionName' is set
      if (partitionName === undefined || partitionName === null) {
        throw new Error("Missing the required parameter 'partitionName' when calling catalogGetTablePartition");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling catalogGetTablePartition");
      }

      let pathParams = {
        'databaseName': databaseName,
        'schemaName': schemaName,
        'tableName': tableName,
        'partitionName': partitionName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/octet-stream'];
      let returnType = USqlTablePartition;
      return this.apiClient.callApi(
        '/catalog/usql/databases/{databaseName}/schemas/{schemaName}/tables/{tableName}/partitions/{partitionName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the catalogGetTableStatistic operation.
     * @callback module:api/CatalogApi~catalogGetTableStatisticCallback
     * @param {String} error Error message, if any.
     * @param {module:model/USqlTableStatistics} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the specified table statistics from the Data Lake Analytics catalog.
     * @param {String} databaseName The name of the database containing the statistics.
     * @param {String} schemaName The name of the schema containing the statistics.
     * @param {String} tableName The name of the table containing the statistics.
     * @param {String} statisticsName The name of the table statistics.
     * @param {String} apiVersion Client Api Version.
     * @param {module:api/CatalogApi~catalogGetTableStatisticCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/USqlTableStatistics}
     */
    catalogGetTableStatistic(databaseName, schemaName, tableName, statisticsName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling catalogGetTableStatistic");
      }
      // verify the required parameter 'schemaName' is set
      if (schemaName === undefined || schemaName === null) {
        throw new Error("Missing the required parameter 'schemaName' when calling catalogGetTableStatistic");
      }
      // verify the required parameter 'tableName' is set
      if (tableName === undefined || tableName === null) {
        throw new Error("Missing the required parameter 'tableName' when calling catalogGetTableStatistic");
      }
      // verify the required parameter 'statisticsName' is set
      if (statisticsName === undefined || statisticsName === null) {
        throw new Error("Missing the required parameter 'statisticsName' when calling catalogGetTableStatistic");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling catalogGetTableStatistic");
      }

      let pathParams = {
        'databaseName': databaseName,
        'schemaName': schemaName,
        'tableName': tableName,
        'statisticsName': statisticsName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/octet-stream'];
      let returnType = USqlTableStatistics;
      return this.apiClient.callApi(
        '/catalog/usql/databases/{databaseName}/schemas/{schemaName}/tables/{tableName}/statistics/{statisticsName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the catalogGetTableType operation.
     * @callback module:api/CatalogApi~catalogGetTableTypeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/USqlTableType} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the specified table type from the Data Lake Analytics catalog.
     * @param {String} databaseName The name of the database containing the table type.
     * @param {String} schemaName The name of the schema containing the table type.
     * @param {String} tableTypeName The name of the table type to retrieve.
     * @param {String} apiVersion Client Api Version.
     * @param {module:api/CatalogApi~catalogGetTableTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/USqlTableType}
     */
    catalogGetTableType(databaseName, schemaName, tableTypeName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling catalogGetTableType");
      }
      // verify the required parameter 'schemaName' is set
      if (schemaName === undefined || schemaName === null) {
        throw new Error("Missing the required parameter 'schemaName' when calling catalogGetTableType");
      }
      // verify the required parameter 'tableTypeName' is set
      if (tableTypeName === undefined || tableTypeName === null) {
        throw new Error("Missing the required parameter 'tableTypeName' when calling catalogGetTableType");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling catalogGetTableType");
      }

      let pathParams = {
        'databaseName': databaseName,
        'schemaName': schemaName,
        'tableTypeName': tableTypeName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/octet-stream'];
      let returnType = USqlTableType;
      return this.apiClient.callApi(
        '/catalog/usql/databases/{databaseName}/schemas/{schemaName}/tabletypes/{tableTypeName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the catalogGetTableValuedFunction operation.
     * @callback module:api/CatalogApi~catalogGetTableValuedFunctionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/USqlTableValuedFunction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the specified table valued function from the Data Lake Analytics catalog.
     * @param {String} databaseName The name of the database containing the table valued function.
     * @param {String} schemaName The name of the schema containing the table valued function.
     * @param {String} tableValuedFunctionName The name of the tableValuedFunction.
     * @param {String} apiVersion Client Api Version.
     * @param {module:api/CatalogApi~catalogGetTableValuedFunctionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/USqlTableValuedFunction}
     */
    catalogGetTableValuedFunction(databaseName, schemaName, tableValuedFunctionName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling catalogGetTableValuedFunction");
      }
      // verify the required parameter 'schemaName' is set
      if (schemaName === undefined || schemaName === null) {
        throw new Error("Missing the required parameter 'schemaName' when calling catalogGetTableValuedFunction");
      }
      // verify the required parameter 'tableValuedFunctionName' is set
      if (tableValuedFunctionName === undefined || tableValuedFunctionName === null) {
        throw new Error("Missing the required parameter 'tableValuedFunctionName' when calling catalogGetTableValuedFunction");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling catalogGetTableValuedFunction");
      }

      let pathParams = {
        'databaseName': databaseName,
        'schemaName': schemaName,
        'tableValuedFunctionName': tableValuedFunctionName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/octet-stream'];
      let returnType = USqlTableValuedFunction;
      return this.apiClient.callApi(
        '/catalog/usql/databases/{databaseName}/schemas/{schemaName}/tablevaluedfunctions/{tableValuedFunctionName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the catalogGetView operation.
     * @callback module:api/CatalogApi~catalogGetViewCallback
     * @param {String} error Error message, if any.
     * @param {module:model/USqlView} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the specified view from the Data Lake Analytics catalog.
     * @param {String} databaseName The name of the database containing the view.
     * @param {String} schemaName The name of the schema containing the view.
     * @param {String} viewName The name of the view.
     * @param {String} apiVersion Client Api Version.
     * @param {module:api/CatalogApi~catalogGetViewCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/USqlView}
     */
    catalogGetView(databaseName, schemaName, viewName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling catalogGetView");
      }
      // verify the required parameter 'schemaName' is set
      if (schemaName === undefined || schemaName === null) {
        throw new Error("Missing the required parameter 'schemaName' when calling catalogGetView");
      }
      // verify the required parameter 'viewName' is set
      if (viewName === undefined || viewName === null) {
        throw new Error("Missing the required parameter 'viewName' when calling catalogGetView");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling catalogGetView");
      }

      let pathParams = {
        'databaseName': databaseName,
        'schemaName': schemaName,
        'viewName': viewName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/octet-stream'];
      let returnType = USqlView;
      return this.apiClient.callApi(
        '/catalog/usql/databases/{databaseName}/schemas/{schemaName}/views/{viewName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the catalogListAssemblies operation.
     * @callback module:api/CatalogApi~catalogListAssembliesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/USqlAssemblyList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the list of assemblies from the Data Lake Analytics catalog.
     * @param {String} databaseName The name of the database containing the assembly.
     * @param {String} apiVersion Client Api Version.
     * @param {Object} opts Optional parameters
     * @param {String} [filter] OData filter. Optional.
     * @param {Number} [top] The number of items to return. Optional.
     * @param {Number} [skip] The number of items to skip over before returning elements. Optional.
     * @param {String} [expand] OData expansion. Expand related resources in line with the retrieved resources, e.g. Categories?$expand=Products would expand Product data in line with each Category entry. Optional.
     * @param {String} [select] OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.
     * @param {String} [orderby] OrderBy clause. One or more comma-separated expressions with an optional \"asc\" (the default) or \"desc\" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.
     * @param {Boolean} [count] The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.
     * @param {module:api/CatalogApi~catalogListAssembliesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/USqlAssemblyList}
     */
    catalogListAssemblies(databaseName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling catalogListAssemblies");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling catalogListAssemblies");
      }

      let pathParams = {
        'databaseName': databaseName
      };
      let queryParams = {
        '$filter': opts['filter'],
        '$top': opts['top'],
        '$skip': opts['skip'],
        '$expand': opts['expand'],
        '$select': opts['select'],
        '$orderby': opts['orderby'],
        '$count': opts['count'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/octet-stream'];
      let returnType = USqlAssemblyList;
      return this.apiClient.callApi(
        '/catalog/usql/databases/{databaseName}/assemblies', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the catalogListCredentials operation.
     * @callback module:api/CatalogApi~catalogListCredentialsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/USqlCredentialList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the list of credentials from the Data Lake Analytics catalog.
     * @param {String} databaseName The name of the database containing the schema.
     * @param {String} apiVersion Client Api Version.
     * @param {Object} opts Optional parameters
     * @param {String} [filter] OData filter. Optional.
     * @param {Number} [top] The number of items to return. Optional.
     * @param {Number} [skip] The number of items to skip over before returning elements. Optional.
     * @param {String} [expand] OData expansion. Expand related resources in line with the retrieved resources, e.g. Categories?$expand=Products would expand Product data in line with each Category entry. Optional.
     * @param {String} [select] OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.
     * @param {String} [orderby] OrderBy clause. One or more comma-separated expressions with an optional \"asc\" (the default) or \"desc\" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.
     * @param {Boolean} [count] The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.
     * @param {module:api/CatalogApi~catalogListCredentialsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/USqlCredentialList}
     */
    catalogListCredentials(databaseName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling catalogListCredentials");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling catalogListCredentials");
      }

      let pathParams = {
        'databaseName': databaseName
      };
      let queryParams = {
        '$filter': opts['filter'],
        '$top': opts['top'],
        '$skip': opts['skip'],
        '$expand': opts['expand'],
        '$select': opts['select'],
        '$orderby': opts['orderby'],
        '$count': opts['count'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/octet-stream'];
      let returnType = USqlCredentialList;
      return this.apiClient.callApi(
        '/catalog/usql/databases/{databaseName}/credentials', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the catalogListDatabases operation.
     * @callback module:api/CatalogApi~catalogListDatabasesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/USqlDatabaseList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the list of databases from the Data Lake Analytics catalog.
     * @param {String} apiVersion Client Api Version.
     * @param {Object} opts Optional parameters
     * @param {String} [filter] OData filter. Optional.
     * @param {Number} [top] The number of items to return. Optional.
     * @param {Number} [skip] The number of items to skip over before returning elements. Optional.
     * @param {String} [expand] OData expansion. Expand related resources in line with the retrieved resources, e.g. Categories?$expand=Products would expand Product data in line with each Category entry. Optional.
     * @param {String} [select] OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.
     * @param {String} [orderby] OrderBy clause. One or more comma-separated expressions with an optional \"asc\" (the default) or \"desc\" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.
     * @param {Boolean} [count] The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.
     * @param {module:api/CatalogApi~catalogListDatabasesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/USqlDatabaseList}
     */
    catalogListDatabases(apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling catalogListDatabases");
      }

      let pathParams = {
      };
      let queryParams = {
        '$filter': opts['filter'],
        '$top': opts['top'],
        '$skip': opts['skip'],
        '$expand': opts['expand'],
        '$select': opts['select'],
        '$orderby': opts['orderby'],
        '$count': opts['count'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/octet-stream'];
      let returnType = USqlDatabaseList;
      return this.apiClient.callApi(
        '/catalog/usql/databases', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the catalogListExternalDataSources operation.
     * @callback module:api/CatalogApi~catalogListExternalDataSourcesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/USqlExternalDataSourceList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the list of external data sources from the Data Lake Analytics catalog.
     * @param {String} databaseName The name of the database containing the external data sources.
     * @param {String} apiVersion Client Api Version.
     * @param {Object} opts Optional parameters
     * @param {String} [filter] OData filter. Optional.
     * @param {Number} [top] The number of items to return. Optional.
     * @param {Number} [skip] The number of items to skip over before returning elements. Optional.
     * @param {String} [expand] OData expansion. Expand related resources in line with the retrieved resources, e.g. Categories?$expand=Products would expand Product data in line with each Category entry. Optional.
     * @param {String} [select] OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.
     * @param {String} [orderby] OrderBy clause. One or more comma-separated expressions with an optional \"asc\" (the default) or \"desc\" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.
     * @param {Boolean} [count] The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.
     * @param {module:api/CatalogApi~catalogListExternalDataSourcesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/USqlExternalDataSourceList}
     */
    catalogListExternalDataSources(databaseName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling catalogListExternalDataSources");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling catalogListExternalDataSources");
      }

      let pathParams = {
        'databaseName': databaseName
      };
      let queryParams = {
        '$filter': opts['filter'],
        '$top': opts['top'],
        '$skip': opts['skip'],
        '$expand': opts['expand'],
        '$select': opts['select'],
        '$orderby': opts['orderby'],
        '$count': opts['count'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/octet-stream'];
      let returnType = USqlExternalDataSourceList;
      return this.apiClient.callApi(
        '/catalog/usql/databases/{databaseName}/externaldatasources', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the catalogListProcedures operation.
     * @callback module:api/CatalogApi~catalogListProceduresCallback
     * @param {String} error Error message, if any.
     * @param {module:model/USqlProcedureList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the list of procedures from the Data Lake Analytics catalog.
     * @param {String} databaseName The name of the database containing the procedures.
     * @param {String} schemaName The name of the schema containing the procedures.
     * @param {String} apiVersion Client Api Version.
     * @param {Object} opts Optional parameters
     * @param {String} [filter] OData filter. Optional.
     * @param {Number} [top] The number of items to return. Optional.
     * @param {Number} [skip] The number of items to skip over before returning elements. Optional.
     * @param {String} [expand] OData expansion. Expand related resources in line with the retrieved resources, e.g. Categories?$expand=Products would expand Product data in line with each Category entry. Optional.
     * @param {String} [select] OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.
     * @param {String} [orderby] OrderBy clause. One or more comma-separated expressions with an optional \"asc\" (the default) or \"desc\" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.
     * @param {Boolean} [count] The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.
     * @param {module:api/CatalogApi~catalogListProceduresCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/USqlProcedureList}
     */
    catalogListProcedures(databaseName, schemaName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling catalogListProcedures");
      }
      // verify the required parameter 'schemaName' is set
      if (schemaName === undefined || schemaName === null) {
        throw new Error("Missing the required parameter 'schemaName' when calling catalogListProcedures");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling catalogListProcedures");
      }

      let pathParams = {
        'databaseName': databaseName,
        'schemaName': schemaName
      };
      let queryParams = {
        '$filter': opts['filter'],
        '$top': opts['top'],
        '$skip': opts['skip'],
        '$expand': opts['expand'],
        '$select': opts['select'],
        '$orderby': opts['orderby'],
        '$count': opts['count'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/octet-stream'];
      let returnType = USqlProcedureList;
      return this.apiClient.callApi(
        '/catalog/usql/databases/{databaseName}/schemas/{schemaName}/procedures', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the catalogListSchemas operation.
     * @callback module:api/CatalogApi~catalogListSchemasCallback
     * @param {String} error Error message, if any.
     * @param {module:model/USqlSchemaList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the list of schemas from the Data Lake Analytics catalog.
     * @param {String} databaseName The name of the database containing the schema.
     * @param {String} apiVersion Client Api Version.
     * @param {Object} opts Optional parameters
     * @param {String} [filter] OData filter. Optional.
     * @param {Number} [top] The number of items to return. Optional.
     * @param {Number} [skip] The number of items to skip over before returning elements. Optional.
     * @param {String} [expand] OData expansion. Expand related resources in line with the retrieved resources, e.g. Categories?$expand=Products would expand Product data in line with each Category entry. Optional.
     * @param {String} [select] OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.
     * @param {String} [orderby] OrderBy clause. One or more comma-separated expressions with an optional \"asc\" (the default) or \"desc\" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.
     * @param {Boolean} [count] The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.
     * @param {module:api/CatalogApi~catalogListSchemasCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/USqlSchemaList}
     */
    catalogListSchemas(databaseName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling catalogListSchemas");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling catalogListSchemas");
      }

      let pathParams = {
        'databaseName': databaseName
      };
      let queryParams = {
        '$filter': opts['filter'],
        '$top': opts['top'],
        '$skip': opts['skip'],
        '$expand': opts['expand'],
        '$select': opts['select'],
        '$orderby': opts['orderby'],
        '$count': opts['count'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/octet-stream'];
      let returnType = USqlSchemaList;
      return this.apiClient.callApi(
        '/catalog/usql/databases/{databaseName}/schemas', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the catalogListTablePartitions operation.
     * @callback module:api/CatalogApi~catalogListTablePartitionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/USqlTablePartitionList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the list of table partitions from the Data Lake Analytics catalog.
     * @param {String} databaseName The name of the database containing the partitions.
     * @param {String} schemaName The name of the schema containing the partitions.
     * @param {String} tableName The name of the table containing the partitions.
     * @param {String} apiVersion Client Api Version.
     * @param {Object} opts Optional parameters
     * @param {String} [filter] OData filter. Optional.
     * @param {Number} [top] The number of items to return. Optional.
     * @param {Number} [skip] The number of items to skip over before returning elements. Optional.
     * @param {String} [expand] OData expansion. Expand related resources in line with the retrieved resources, e.g. Categories?$expand=Products would expand Product data in line with each Category entry. Optional.
     * @param {String} [select] OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.
     * @param {String} [orderby] OrderBy clause. One or more comma-separated expressions with an optional \"asc\" (the default) or \"desc\" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.
     * @param {Boolean} [count] The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.
     * @param {module:api/CatalogApi~catalogListTablePartitionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/USqlTablePartitionList}
     */
    catalogListTablePartitions(databaseName, schemaName, tableName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling catalogListTablePartitions");
      }
      // verify the required parameter 'schemaName' is set
      if (schemaName === undefined || schemaName === null) {
        throw new Error("Missing the required parameter 'schemaName' when calling catalogListTablePartitions");
      }
      // verify the required parameter 'tableName' is set
      if (tableName === undefined || tableName === null) {
        throw new Error("Missing the required parameter 'tableName' when calling catalogListTablePartitions");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling catalogListTablePartitions");
      }

      let pathParams = {
        'databaseName': databaseName,
        'schemaName': schemaName,
        'tableName': tableName
      };
      let queryParams = {
        '$filter': opts['filter'],
        '$top': opts['top'],
        '$skip': opts['skip'],
        '$expand': opts['expand'],
        '$select': opts['select'],
        '$orderby': opts['orderby'],
        '$count': opts['count'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/octet-stream'];
      let returnType = USqlTablePartitionList;
      return this.apiClient.callApi(
        '/catalog/usql/databases/{databaseName}/schemas/{schemaName}/tables/{tableName}/partitions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the catalogListTableStatistics operation.
     * @callback module:api/CatalogApi~catalogListTableStatisticsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/USqlTableStatisticsList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the list of table statistics from the Data Lake Analytics catalog.
     * @param {String} databaseName The name of the database containing the statistics.
     * @param {String} schemaName The name of the schema containing the statistics.
     * @param {String} tableName The name of the table containing the statistics.
     * @param {String} apiVersion Client Api Version.
     * @param {Object} opts Optional parameters
     * @param {String} [filter] OData filter. Optional.
     * @param {Number} [top] The number of items to return. Optional.
     * @param {Number} [skip] The number of items to skip over before returning elements. Optional.
     * @param {String} [expand] OData expansion. Expand related resources in line with the retrieved resources, e.g. Categories?$expand=Products would expand Product data in line with each Category entry. Optional.
     * @param {String} [select] OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.
     * @param {String} [orderby] OrderBy clause. One or more comma-separated expressions with an optional \"asc\" (the default) or \"desc\" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.
     * @param {Boolean} [count] The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.
     * @param {module:api/CatalogApi~catalogListTableStatisticsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/USqlTableStatisticsList}
     */
    catalogListTableStatistics(databaseName, schemaName, tableName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling catalogListTableStatistics");
      }
      // verify the required parameter 'schemaName' is set
      if (schemaName === undefined || schemaName === null) {
        throw new Error("Missing the required parameter 'schemaName' when calling catalogListTableStatistics");
      }
      // verify the required parameter 'tableName' is set
      if (tableName === undefined || tableName === null) {
        throw new Error("Missing the required parameter 'tableName' when calling catalogListTableStatistics");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling catalogListTableStatistics");
      }

      let pathParams = {
        'databaseName': databaseName,
        'schemaName': schemaName,
        'tableName': tableName
      };
      let queryParams = {
        '$filter': opts['filter'],
        '$top': opts['top'],
        '$skip': opts['skip'],
        '$expand': opts['expand'],
        '$select': opts['select'],
        '$orderby': opts['orderby'],
        '$count': opts['count'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/octet-stream'];
      let returnType = USqlTableStatisticsList;
      return this.apiClient.callApi(
        '/catalog/usql/databases/{databaseName}/schemas/{schemaName}/tables/{tableName}/statistics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the catalogListTableTypes operation.
     * @callback module:api/CatalogApi~catalogListTableTypesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/USqlTableTypeList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the list of table types from the Data Lake Analytics catalog.
     * @param {String} databaseName The name of the database containing the table types.
     * @param {String} schemaName The name of the schema containing the table types.
     * @param {String} apiVersion Client Api Version.
     * @param {Object} opts Optional parameters
     * @param {String} [filter] OData filter. Optional.
     * @param {Number} [top] The number of items to return. Optional.
     * @param {Number} [skip] The number of items to skip over before returning elements. Optional.
     * @param {String} [expand] OData expansion. Expand related resources in line with the retrieved resources, e.g. Categories?$expand=Products would expand Product data in line with each Category entry. Optional.
     * @param {String} [select] OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.
     * @param {String} [orderby] OrderBy clause. One or more comma-separated expressions with an optional \"asc\" (the default) or \"desc\" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.
     * @param {Boolean} [count] The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.
     * @param {module:api/CatalogApi~catalogListTableTypesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/USqlTableTypeList}
     */
    catalogListTableTypes(databaseName, schemaName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling catalogListTableTypes");
      }
      // verify the required parameter 'schemaName' is set
      if (schemaName === undefined || schemaName === null) {
        throw new Error("Missing the required parameter 'schemaName' when calling catalogListTableTypes");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling catalogListTableTypes");
      }

      let pathParams = {
        'databaseName': databaseName,
        'schemaName': schemaName
      };
      let queryParams = {
        '$filter': opts['filter'],
        '$top': opts['top'],
        '$skip': opts['skip'],
        '$expand': opts['expand'],
        '$select': opts['select'],
        '$orderby': opts['orderby'],
        '$count': opts['count'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/octet-stream'];
      let returnType = USqlTableTypeList;
      return this.apiClient.callApi(
        '/catalog/usql/databases/{databaseName}/schemas/{schemaName}/tabletypes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the catalogListTableValuedFunctions operation.
     * @callback module:api/CatalogApi~catalogListTableValuedFunctionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/USqlTableValuedFunctionList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the list of table valued functions from the Data Lake Analytics catalog.
     * @param {String} databaseName The name of the database containing the table valued functions.
     * @param {String} schemaName The name of the schema containing the table valued functions.
     * @param {String} apiVersion Client Api Version.
     * @param {Object} opts Optional parameters
     * @param {String} [filter] OData filter. Optional.
     * @param {Number} [top] The number of items to return. Optional.
     * @param {Number} [skip] The number of items to skip over before returning elements. Optional.
     * @param {String} [expand] OData expansion. Expand related resources in line with the retrieved resources, e.g. Categories?$expand=Products would expand Product data in line with each Category entry. Optional.
     * @param {String} [select] OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.
     * @param {String} [orderby] OrderBy clause. One or more comma-separated expressions with an optional \"asc\" (the default) or \"desc\" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.
     * @param {Boolean} [count] The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.
     * @param {module:api/CatalogApi~catalogListTableValuedFunctionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/USqlTableValuedFunctionList}
     */
    catalogListTableValuedFunctions(databaseName, schemaName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling catalogListTableValuedFunctions");
      }
      // verify the required parameter 'schemaName' is set
      if (schemaName === undefined || schemaName === null) {
        throw new Error("Missing the required parameter 'schemaName' when calling catalogListTableValuedFunctions");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling catalogListTableValuedFunctions");
      }

      let pathParams = {
        'databaseName': databaseName,
        'schemaName': schemaName
      };
      let queryParams = {
        '$filter': opts['filter'],
        '$top': opts['top'],
        '$skip': opts['skip'],
        '$expand': opts['expand'],
        '$select': opts['select'],
        '$orderby': opts['orderby'],
        '$count': opts['count'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/octet-stream'];
      let returnType = USqlTableValuedFunctionList;
      return this.apiClient.callApi(
        '/catalog/usql/databases/{databaseName}/schemas/{schemaName}/tablevaluedfunctions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the catalogListTables operation.
     * @callback module:api/CatalogApi~catalogListTablesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/USqlTableList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the list of tables from the Data Lake Analytics catalog.
     * @param {String} databaseName The name of the database containing the tables.
     * @param {String} schemaName The name of the schema containing the tables.
     * @param {String} apiVersion Client Api Version.
     * @param {Object} opts Optional parameters
     * @param {String} [filter] OData filter. Optional.
     * @param {Number} [top] The number of items to return. Optional.
     * @param {Number} [skip] The number of items to skip over before returning elements. Optional.
     * @param {String} [expand] OData expansion. Expand related resources in line with the retrieved resources, e.g. Categories?$expand=Products would expand Product data in line with each Category entry. Optional.
     * @param {String} [select] OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.
     * @param {String} [orderby] OrderBy clause. One or more comma-separated expressions with an optional \"asc\" (the default) or \"desc\" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.
     * @param {Boolean} [count] The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.
     * @param {module:api/CatalogApi~catalogListTablesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/USqlTableList}
     */
    catalogListTables(databaseName, schemaName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling catalogListTables");
      }
      // verify the required parameter 'schemaName' is set
      if (schemaName === undefined || schemaName === null) {
        throw new Error("Missing the required parameter 'schemaName' when calling catalogListTables");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling catalogListTables");
      }

      let pathParams = {
        'databaseName': databaseName,
        'schemaName': schemaName
      };
      let queryParams = {
        '$filter': opts['filter'],
        '$top': opts['top'],
        '$skip': opts['skip'],
        '$expand': opts['expand'],
        '$select': opts['select'],
        '$orderby': opts['orderby'],
        '$count': opts['count'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/octet-stream'];
      let returnType = USqlTableList;
      return this.apiClient.callApi(
        '/catalog/usql/databases/{databaseName}/schemas/{schemaName}/tables', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the catalogListTypes operation.
     * @callback module:api/CatalogApi~catalogListTypesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/USqlTypeList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the list of types within the specified database and schema from the Data Lake Analytics catalog.
     * @param {String} databaseName The name of the database containing the types.
     * @param {String} schemaName The name of the schema containing the types.
     * @param {String} apiVersion Client Api Version.
     * @param {Object} opts Optional parameters
     * @param {String} [filter] OData filter. Optional.
     * @param {Number} [top] The number of items to return. Optional.
     * @param {Number} [skip] The number of items to skip over before returning elements. Optional.
     * @param {String} [expand] OData expansion. Expand related resources in line with the retrieved resources, e.g. Categories?$expand=Products would expand Product data in line with each Category entry. Optional.
     * @param {String} [select] OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.
     * @param {String} [orderby] OrderBy clause. One or more comma-separated expressions with an optional \"asc\" (the default) or \"desc\" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.
     * @param {Boolean} [count] The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.
     * @param {module:api/CatalogApi~catalogListTypesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/USqlTypeList}
     */
    catalogListTypes(databaseName, schemaName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling catalogListTypes");
      }
      // verify the required parameter 'schemaName' is set
      if (schemaName === undefined || schemaName === null) {
        throw new Error("Missing the required parameter 'schemaName' when calling catalogListTypes");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling catalogListTypes");
      }

      let pathParams = {
        'databaseName': databaseName,
        'schemaName': schemaName
      };
      let queryParams = {
        '$filter': opts['filter'],
        '$top': opts['top'],
        '$skip': opts['skip'],
        '$expand': opts['expand'],
        '$select': opts['select'],
        '$orderby': opts['orderby'],
        '$count': opts['count'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/octet-stream'];
      let returnType = USqlTypeList;
      return this.apiClient.callApi(
        '/catalog/usql/databases/{databaseName}/schemas/{schemaName}/types', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the catalogListViews operation.
     * @callback module:api/CatalogApi~catalogListViewsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/USqlViewList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the list of views from the Data Lake Analytics catalog.
     * @param {String} databaseName The name of the database containing the views.
     * @param {String} schemaName The name of the schema containing the views.
     * @param {String} apiVersion Client Api Version.
     * @param {Object} opts Optional parameters
     * @param {String} [filter] OData filter. Optional.
     * @param {Number} [top] The number of items to return. Optional.
     * @param {Number} [skip] The number of items to skip over before returning elements. Optional.
     * @param {String} [expand] OData expansion. Expand related resources in line with the retrieved resources, e.g. Categories?$expand=Products would expand Product data in line with each Category entry. Optional.
     * @param {String} [select] OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.
     * @param {String} [orderby] OrderBy clause. One or more comma-separated expressions with an optional \"asc\" (the default) or \"desc\" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional.
     * @param {Boolean} [count] The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.
     * @param {module:api/CatalogApi~catalogListViewsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/USqlViewList}
     */
    catalogListViews(databaseName, schemaName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling catalogListViews");
      }
      // verify the required parameter 'schemaName' is set
      if (schemaName === undefined || schemaName === null) {
        throw new Error("Missing the required parameter 'schemaName' when calling catalogListViews");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling catalogListViews");
      }

      let pathParams = {
        'databaseName': databaseName,
        'schemaName': schemaName
      };
      let queryParams = {
        '$filter': opts['filter'],
        '$top': opts['top'],
        '$skip': opts['skip'],
        '$expand': opts['expand'],
        '$select': opts['select'],
        '$orderby': opts['orderby'],
        '$count': opts['count'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/octet-stream'];
      let returnType = USqlViewList;
      return this.apiClient.callApi(
        '/catalog/usql/databases/{databaseName}/schemas/{schemaName}/views', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the catalogUpdateSecret operation.
     * @callback module:api/CatalogApi~catalogUpdateSecretCallback
     * @param {String} error Error message, if any.
     * @param {module:model/USqlSecret} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies the specified secret for use with external data sources in the specified database
     * @param {String} databaseName The name of the database containing the secret.
     * @param {String} secretName The name of the secret.
     * @param {String} apiVersion Client Api Version.
     * @param {module:model/DataLakeAnalyticsCatalogSecretCreateOrUpdateParameters} parameters The parameters required to modify the secret (name and password)
     * @param {module:api/CatalogApi~catalogUpdateSecretCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/USqlSecret}
     */
    catalogUpdateSecret(databaseName, secretName, apiVersion, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling catalogUpdateSecret");
      }
      // verify the required parameter 'secretName' is set
      if (secretName === undefined || secretName === null) {
        throw new Error("Missing the required parameter 'secretName' when calling catalogUpdateSecret");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling catalogUpdateSecret");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling catalogUpdateSecret");
      }

      let pathParams = {
        'databaseName': databaseName,
        'secretName': secretName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json', 'application/octet-stream'];
      let accepts = ['application/json', 'text/json', 'application/octet-stream'];
      let returnType = USqlSecret;
      return this.apiClient.callApi(
        '/catalog/usql/databases/{databaseName}/secrets/{secretName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
