/**
 * DataLakeAnalyticsCatalogManagementClient
 * Creates an Azure Data Lake Analytics catalog client.
 *
 * The version of the OpenAPI document: 2015-10-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUSqlTablePartition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUSqlTablePartition::OAIUSqlTablePartition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUSqlTablePartition::OAIUSqlTablePartition() {
    this->initializeModel();
}

OAIUSqlTablePartition::~OAIUSqlTablePartition() {}

void OAIUSqlTablePartition::initializeModel() {

    m_create_date_isSet = false;
    m_create_date_isValid = false;

    m_database_name_isSet = false;
    m_database_name_isValid = false;

    m_index_id_isSet = false;
    m_index_id_isValid = false;

    m_label_isSet = false;
    m_label_isValid = false;

    m_parent_name_isSet = false;
    m_parent_name_isValid = false;

    m_partition_name_isSet = false;
    m_partition_name_isValid = false;

    m_schema_name_isSet = false;
    m_schema_name_isValid = false;

    m_compute_account_name_isSet = false;
    m_compute_account_name_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIUSqlTablePartition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUSqlTablePartition::fromJsonObject(QJsonObject json) {

    m_create_date_isValid = ::OpenAPI::fromJsonValue(m_create_date, json[QString("createDate")]);
    m_create_date_isSet = !json[QString("createDate")].isNull() && m_create_date_isValid;

    m_database_name_isValid = ::OpenAPI::fromJsonValue(m_database_name, json[QString("databaseName")]);
    m_database_name_isSet = !json[QString("databaseName")].isNull() && m_database_name_isValid;

    m_index_id_isValid = ::OpenAPI::fromJsonValue(m_index_id, json[QString("indexId")]);
    m_index_id_isSet = !json[QString("indexId")].isNull() && m_index_id_isValid;

    m_label_isValid = ::OpenAPI::fromJsonValue(m_label, json[QString("label")]);
    m_label_isSet = !json[QString("label")].isNull() && m_label_isValid;

    m_parent_name_isValid = ::OpenAPI::fromJsonValue(m_parent_name, json[QString("parentName")]);
    m_parent_name_isSet = !json[QString("parentName")].isNull() && m_parent_name_isValid;

    m_partition_name_isValid = ::OpenAPI::fromJsonValue(m_partition_name, json[QString("partitionName")]);
    m_partition_name_isSet = !json[QString("partitionName")].isNull() && m_partition_name_isValid;

    m_schema_name_isValid = ::OpenAPI::fromJsonValue(m_schema_name, json[QString("schemaName")]);
    m_schema_name_isSet = !json[QString("schemaName")].isNull() && m_schema_name_isValid;

    m_compute_account_name_isValid = ::OpenAPI::fromJsonValue(m_compute_account_name, json[QString("computeAccountName")]);
    m_compute_account_name_isSet = !json[QString("computeAccountName")].isNull() && m_compute_account_name_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIUSqlTablePartition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUSqlTablePartition::asJsonObject() const {
    QJsonObject obj;
    if (m_create_date_isSet) {
        obj.insert(QString("createDate"), ::OpenAPI::toJsonValue(m_create_date));
    }
    if (m_database_name_isSet) {
        obj.insert(QString("databaseName"), ::OpenAPI::toJsonValue(m_database_name));
    }
    if (m_index_id_isSet) {
        obj.insert(QString("indexId"), ::OpenAPI::toJsonValue(m_index_id));
    }
    if (m_label.size() > 0) {
        obj.insert(QString("label"), ::OpenAPI::toJsonValue(m_label));
    }
    if (m_parent_name.isSet()) {
        obj.insert(QString("parentName"), ::OpenAPI::toJsonValue(m_parent_name));
    }
    if (m_partition_name_isSet) {
        obj.insert(QString("partitionName"), ::OpenAPI::toJsonValue(m_partition_name));
    }
    if (m_schema_name_isSet) {
        obj.insert(QString("schemaName"), ::OpenAPI::toJsonValue(m_schema_name));
    }
    if (m_compute_account_name_isSet) {
        obj.insert(QString("computeAccountName"), ::OpenAPI::toJsonValue(m_compute_account_name));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QDateTime OAIUSqlTablePartition::getCreateDate() const {
    return m_create_date;
}
void OAIUSqlTablePartition::setCreateDate(const QDateTime &create_date) {
    m_create_date = create_date;
    m_create_date_isSet = true;
}

bool OAIUSqlTablePartition::is_create_date_Set() const{
    return m_create_date_isSet;
}

bool OAIUSqlTablePartition::is_create_date_Valid() const{
    return m_create_date_isValid;
}

QString OAIUSqlTablePartition::getDatabaseName() const {
    return m_database_name;
}
void OAIUSqlTablePartition::setDatabaseName(const QString &database_name) {
    m_database_name = database_name;
    m_database_name_isSet = true;
}

bool OAIUSqlTablePartition::is_database_name_Set() const{
    return m_database_name_isSet;
}

bool OAIUSqlTablePartition::is_database_name_Valid() const{
    return m_database_name_isValid;
}

qint32 OAIUSqlTablePartition::getIndexId() const {
    return m_index_id;
}
void OAIUSqlTablePartition::setIndexId(const qint32 &index_id) {
    m_index_id = index_id;
    m_index_id_isSet = true;
}

bool OAIUSqlTablePartition::is_index_id_Set() const{
    return m_index_id_isSet;
}

bool OAIUSqlTablePartition::is_index_id_Valid() const{
    return m_index_id_isValid;
}

QList<QString> OAIUSqlTablePartition::getLabel() const {
    return m_label;
}
void OAIUSqlTablePartition::setLabel(const QList<QString> &label) {
    m_label = label;
    m_label_isSet = true;
}

bool OAIUSqlTablePartition::is_label_Set() const{
    return m_label_isSet;
}

bool OAIUSqlTablePartition::is_label_Valid() const{
    return m_label_isValid;
}

OAIDdlName OAIUSqlTablePartition::getParentName() const {
    return m_parent_name;
}
void OAIUSqlTablePartition::setParentName(const OAIDdlName &parent_name) {
    m_parent_name = parent_name;
    m_parent_name_isSet = true;
}

bool OAIUSqlTablePartition::is_parent_name_Set() const{
    return m_parent_name_isSet;
}

bool OAIUSqlTablePartition::is_parent_name_Valid() const{
    return m_parent_name_isValid;
}

QString OAIUSqlTablePartition::getPartitionName() const {
    return m_partition_name;
}
void OAIUSqlTablePartition::setPartitionName(const QString &partition_name) {
    m_partition_name = partition_name;
    m_partition_name_isSet = true;
}

bool OAIUSqlTablePartition::is_partition_name_Set() const{
    return m_partition_name_isSet;
}

bool OAIUSqlTablePartition::is_partition_name_Valid() const{
    return m_partition_name_isValid;
}

QString OAIUSqlTablePartition::getSchemaName() const {
    return m_schema_name;
}
void OAIUSqlTablePartition::setSchemaName(const QString &schema_name) {
    m_schema_name = schema_name;
    m_schema_name_isSet = true;
}

bool OAIUSqlTablePartition::is_schema_name_Set() const{
    return m_schema_name_isSet;
}

bool OAIUSqlTablePartition::is_schema_name_Valid() const{
    return m_schema_name_isValid;
}

QString OAIUSqlTablePartition::getComputeAccountName() const {
    return m_compute_account_name;
}
void OAIUSqlTablePartition::setComputeAccountName(const QString &compute_account_name) {
    m_compute_account_name = compute_account_name;
    m_compute_account_name_isSet = true;
}

bool OAIUSqlTablePartition::is_compute_account_name_Set() const{
    return m_compute_account_name_isSet;
}

bool OAIUSqlTablePartition::is_compute_account_name_Valid() const{
    return m_compute_account_name_isValid;
}

QString OAIUSqlTablePartition::getVersion() const {
    return m_version;
}
void OAIUSqlTablePartition::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIUSqlTablePartition::is_version_Set() const{
    return m_version_isSet;
}

bool OAIUSqlTablePartition::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIUSqlTablePartition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_create_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_database_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_index_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_label.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_name.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_partition_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_compute_account_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUSqlTablePartition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
