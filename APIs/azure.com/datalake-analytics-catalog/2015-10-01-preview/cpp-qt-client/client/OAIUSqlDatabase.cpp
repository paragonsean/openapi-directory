/**
 * DataLakeAnalyticsCatalogManagementClient
 * Creates an Azure Data Lake Analytics catalog client.
 *
 * The version of the OpenAPI document: 2015-10-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUSqlDatabase.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUSqlDatabase::OAIUSqlDatabase(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUSqlDatabase::OAIUSqlDatabase() {
    this->initializeModel();
}

OAIUSqlDatabase::~OAIUSqlDatabase() {}

void OAIUSqlDatabase::initializeModel() {

    m_database_name_isSet = false;
    m_database_name_isValid = false;

    m_compute_account_name_isSet = false;
    m_compute_account_name_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIUSqlDatabase::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUSqlDatabase::fromJsonObject(QJsonObject json) {

    m_database_name_isValid = ::OpenAPI::fromJsonValue(m_database_name, json[QString("databaseName")]);
    m_database_name_isSet = !json[QString("databaseName")].isNull() && m_database_name_isValid;

    m_compute_account_name_isValid = ::OpenAPI::fromJsonValue(m_compute_account_name, json[QString("computeAccountName")]);
    m_compute_account_name_isSet = !json[QString("computeAccountName")].isNull() && m_compute_account_name_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIUSqlDatabase::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUSqlDatabase::asJsonObject() const {
    QJsonObject obj;
    if (m_database_name_isSet) {
        obj.insert(QString("databaseName"), ::OpenAPI::toJsonValue(m_database_name));
    }
    if (m_compute_account_name_isSet) {
        obj.insert(QString("computeAccountName"), ::OpenAPI::toJsonValue(m_compute_account_name));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QString OAIUSqlDatabase::getDatabaseName() const {
    return m_database_name;
}
void OAIUSqlDatabase::setDatabaseName(const QString &database_name) {
    m_database_name = database_name;
    m_database_name_isSet = true;
}

bool OAIUSqlDatabase::is_database_name_Set() const{
    return m_database_name_isSet;
}

bool OAIUSqlDatabase::is_database_name_Valid() const{
    return m_database_name_isValid;
}

QString OAIUSqlDatabase::getComputeAccountName() const {
    return m_compute_account_name;
}
void OAIUSqlDatabase::setComputeAccountName(const QString &compute_account_name) {
    m_compute_account_name = compute_account_name;
    m_compute_account_name_isSet = true;
}

bool OAIUSqlDatabase::is_compute_account_name_Set() const{
    return m_compute_account_name_isSet;
}

bool OAIUSqlDatabase::is_compute_account_name_Valid() const{
    return m_compute_account_name_isValid;
}

QString OAIUSqlDatabase::getVersion() const {
    return m_version;
}
void OAIUSqlDatabase::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIUSqlDatabase::is_version_Set() const{
    return m_version_isSet;
}

bool OAIUSqlDatabase::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIUSqlDatabase::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_database_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_compute_account_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUSqlDatabase::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
