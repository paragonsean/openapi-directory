/**
 * DataLakeAnalyticsCatalogManagementClient
 * Creates an Azure Data Lake Analytics catalog client.
 *
 * The version of the OpenAPI document: 2015-10-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDdlName.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDdlName::OAIDdlName(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDdlName::OAIDdlName() {
    this->initializeModel();
}

OAIDdlName::~OAIDdlName() {}

void OAIDdlName::initializeModel() {

    m_first_part_isSet = false;
    m_first_part_isValid = false;

    m_second_part_isSet = false;
    m_second_part_isValid = false;

    m_server_isSet = false;
    m_server_isValid = false;

    m_third_part_isSet = false;
    m_third_part_isValid = false;
}

void OAIDdlName::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDdlName::fromJsonObject(QJsonObject json) {

    m_first_part_isValid = ::OpenAPI::fromJsonValue(m_first_part, json[QString("firstPart")]);
    m_first_part_isSet = !json[QString("firstPart")].isNull() && m_first_part_isValid;

    m_second_part_isValid = ::OpenAPI::fromJsonValue(m_second_part, json[QString("secondPart")]);
    m_second_part_isSet = !json[QString("secondPart")].isNull() && m_second_part_isValid;

    m_server_isValid = ::OpenAPI::fromJsonValue(m_server, json[QString("server")]);
    m_server_isSet = !json[QString("server")].isNull() && m_server_isValid;

    m_third_part_isValid = ::OpenAPI::fromJsonValue(m_third_part, json[QString("thirdPart")]);
    m_third_part_isSet = !json[QString("thirdPart")].isNull() && m_third_part_isValid;
}

QString OAIDdlName::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDdlName::asJsonObject() const {
    QJsonObject obj;
    if (m_first_part_isSet) {
        obj.insert(QString("firstPart"), ::OpenAPI::toJsonValue(m_first_part));
    }
    if (m_second_part_isSet) {
        obj.insert(QString("secondPart"), ::OpenAPI::toJsonValue(m_second_part));
    }
    if (m_server_isSet) {
        obj.insert(QString("server"), ::OpenAPI::toJsonValue(m_server));
    }
    if (m_third_part_isSet) {
        obj.insert(QString("thirdPart"), ::OpenAPI::toJsonValue(m_third_part));
    }
    return obj;
}

QString OAIDdlName::getFirstPart() const {
    return m_first_part;
}
void OAIDdlName::setFirstPart(const QString &first_part) {
    m_first_part = first_part;
    m_first_part_isSet = true;
}

bool OAIDdlName::is_first_part_Set() const{
    return m_first_part_isSet;
}

bool OAIDdlName::is_first_part_Valid() const{
    return m_first_part_isValid;
}

QString OAIDdlName::getSecondPart() const {
    return m_second_part;
}
void OAIDdlName::setSecondPart(const QString &second_part) {
    m_second_part = second_part;
    m_second_part_isSet = true;
}

bool OAIDdlName::is_second_part_Set() const{
    return m_second_part_isSet;
}

bool OAIDdlName::is_second_part_Valid() const{
    return m_second_part_isValid;
}

QString OAIDdlName::getServer() const {
    return m_server;
}
void OAIDdlName::setServer(const QString &server) {
    m_server = server;
    m_server_isSet = true;
}

bool OAIDdlName::is_server_Set() const{
    return m_server_isSet;
}

bool OAIDdlName::is_server_Valid() const{
    return m_server_isValid;
}

QString OAIDdlName::getThirdPart() const {
    return m_third_part;
}
void OAIDdlName::setThirdPart(const QString &third_part) {
    m_third_part = third_part;
    m_third_part_isSet = true;
}

bool OAIDdlName::is_third_part_Set() const{
    return m_third_part_isSet;
}

bool OAIDdlName::is_third_part_Valid() const{
    return m_third_part_isValid;
}

bool OAIDdlName::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_first_part_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_second_part_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_third_part_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDdlName::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
