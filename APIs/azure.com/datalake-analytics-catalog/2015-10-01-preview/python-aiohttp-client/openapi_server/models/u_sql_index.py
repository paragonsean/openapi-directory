# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.u_sql_directed_column import USqlDirectedColumn
from openapi_server.models.u_sql_distribution_info import USqlDistributionInfo
from openapi_server import util


class USqlIndex(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, columns: List[str]=None, distribution_info: USqlDistributionInfo=None, index_id: int=None, index_keys: List[USqlDirectedColumn]=None, is_columnstore: bool=None, is_unique: bool=None, name: str=None, partition_function: str=None, partition_key_list: List[str]=None, stream_names: List[str]=None):
        """USqlIndex - a model defined in OpenAPI

        :param columns: The columns of this USqlIndex.
        :param distribution_info: The distribution_info of this USqlIndex.
        :param index_id: The index_id of this USqlIndex.
        :param index_keys: The index_keys of this USqlIndex.
        :param is_columnstore: The is_columnstore of this USqlIndex.
        :param is_unique: The is_unique of this USqlIndex.
        :param name: The name of this USqlIndex.
        :param partition_function: The partition_function of this USqlIndex.
        :param partition_key_list: The partition_key_list of this USqlIndex.
        :param stream_names: The stream_names of this USqlIndex.
        """
        self.openapi_types = {
            'columns': List[str],
            'distribution_info': USqlDistributionInfo,
            'index_id': int,
            'index_keys': List[USqlDirectedColumn],
            'is_columnstore': bool,
            'is_unique': bool,
            'name': str,
            'partition_function': str,
            'partition_key_list': List[str],
            'stream_names': List[str]
        }

        self.attribute_map = {
            'columns': 'columns',
            'distribution_info': 'distributionInfo',
            'index_id': 'indexId',
            'index_keys': 'indexKeys',
            'is_columnstore': 'isColumnstore',
            'is_unique': 'isUnique',
            'name': 'name',
            'partition_function': 'partitionFunction',
            'partition_key_list': 'partitionKeyList',
            'stream_names': 'streamNames'
        }

        self._columns = columns
        self._distribution_info = distribution_info
        self._index_id = index_id
        self._index_keys = index_keys
        self._is_columnstore = is_columnstore
        self._is_unique = is_unique
        self._name = name
        self._partition_function = partition_function
        self._partition_key_list = partition_key_list
        self._stream_names = stream_names

    @classmethod
    def from_dict(cls, dikt: dict) -> 'USqlIndex':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The USqlIndex of this USqlIndex.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def columns(self):
        """Gets the columns of this USqlIndex.

        the list of columns in the index

        :return: The columns of this USqlIndex.
        :rtype: List[str]
        """
        return self._columns

    @columns.setter
    def columns(self, columns):
        """Sets the columns of this USqlIndex.

        the list of columns in the index

        :param columns: The columns of this USqlIndex.
        :type columns: List[str]
        """

        self._columns = columns

    @property
    def distribution_info(self):
        """Gets the distribution_info of this USqlIndex.


        :return: The distribution_info of this USqlIndex.
        :rtype: USqlDistributionInfo
        """
        return self._distribution_info

    @distribution_info.setter
    def distribution_info(self, distribution_info):
        """Sets the distribution_info of this USqlIndex.


        :param distribution_info: The distribution_info of this USqlIndex.
        :type distribution_info: USqlDistributionInfo
        """

        self._distribution_info = distribution_info

    @property
    def index_id(self):
        """Gets the index_id of this USqlIndex.

        the ID of this index within the table.

        :return: The index_id of this USqlIndex.
        :rtype: int
        """
        return self._index_id

    @index_id.setter
    def index_id(self, index_id):
        """Sets the index_id of this USqlIndex.

        the ID of this index within the table.

        :param index_id: The index_id of this USqlIndex.
        :type index_id: int
        """

        self._index_id = index_id

    @property
    def index_keys(self):
        """Gets the index_keys of this USqlIndex.

        the list of directed columns in the index

        :return: The index_keys of this USqlIndex.
        :rtype: List[USqlDirectedColumn]
        """
        return self._index_keys

    @index_keys.setter
    def index_keys(self, index_keys):
        """Sets the index_keys of this USqlIndex.

        the list of directed columns in the index

        :param index_keys: The index_keys of this USqlIndex.
        :type index_keys: List[USqlDirectedColumn]
        """

        self._index_keys = index_keys

    @property
    def is_columnstore(self):
        """Gets the is_columnstore of this USqlIndex.

        the switch indicating if this index is a columnstore index.

        :return: The is_columnstore of this USqlIndex.
        :rtype: bool
        """
        return self._is_columnstore

    @is_columnstore.setter
    def is_columnstore(self, is_columnstore):
        """Sets the is_columnstore of this USqlIndex.

        the switch indicating if this index is a columnstore index.

        :param is_columnstore: The is_columnstore of this USqlIndex.
        :type is_columnstore: bool
        """

        self._is_columnstore = is_columnstore

    @property
    def is_unique(self):
        """Gets the is_unique of this USqlIndex.

        the switch indicating if this index is a unique index.

        :return: The is_unique of this USqlIndex.
        :rtype: bool
        """
        return self._is_unique

    @is_unique.setter
    def is_unique(self, is_unique):
        """Sets the is_unique of this USqlIndex.

        the switch indicating if this index is a unique index.

        :param is_unique: The is_unique of this USqlIndex.
        :type is_unique: bool
        """

        self._is_unique = is_unique

    @property
    def name(self):
        """Gets the name of this USqlIndex.

        the name of the index in the table.

        :return: The name of this USqlIndex.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this USqlIndex.

        the name of the index in the table.

        :param name: The name of this USqlIndex.
        :type name: str
        """

        self._name = name

    @property
    def partition_function(self):
        """Gets the partition_function of this USqlIndex.

        partition function ID for the index.

        :return: The partition_function of this USqlIndex.
        :rtype: str
        """
        return self._partition_function

    @partition_function.setter
    def partition_function(self, partition_function):
        """Sets the partition_function of this USqlIndex.

        partition function ID for the index.

        :param partition_function: The partition_function of this USqlIndex.
        :type partition_function: str
        """

        self._partition_function = partition_function

    @property
    def partition_key_list(self):
        """Gets the partition_key_list of this USqlIndex.

        the list of partition keys in the index

        :return: The partition_key_list of this USqlIndex.
        :rtype: List[str]
        """
        return self._partition_key_list

    @partition_key_list.setter
    def partition_key_list(self, partition_key_list):
        """Sets the partition_key_list of this USqlIndex.

        the list of partition keys in the index

        :param partition_key_list: The partition_key_list of this USqlIndex.
        :type partition_key_list: List[str]
        """

        self._partition_key_list = partition_key_list

    @property
    def stream_names(self):
        """Gets the stream_names of this USqlIndex.

        the list of full paths to the streams that contain this index in the DataLake account.

        :return: The stream_names of this USqlIndex.
        :rtype: List[str]
        """
        return self._stream_names

    @stream_names.setter
    def stream_names(self, stream_names):
        """Sets the stream_names of this USqlIndex.

        the list of full paths to the streams that contain this index in the DataLake account.

        :param stream_names: The stream_names of this USqlIndex.
        :type stream_names: List[str]
        """

        self._stream_names = stream_names
