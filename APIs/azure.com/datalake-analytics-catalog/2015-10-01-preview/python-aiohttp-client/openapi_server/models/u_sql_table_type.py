# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.type_field_info import TypeFieldInfo
from openapi_server import util


class USqlTableType(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, columns: List[TypeFieldInfo]=None, c_sharp_name: str=None, database_name: str=None, full_c_sharp_name: str=None, is_assembly_type: bool=None, is_complex_type: bool=None, is_nullable: bool=None, is_table_type: bool=None, is_user_defined: bool=None, principal_id: int=None, schema_id: int=None, schema_name: str=None, system_type_id: int=None, type_family: str=None, type_name: str=None, user_type_id: int=None, compute_account_name: str=None, version: str=None):
        """USqlTableType - a model defined in OpenAPI

        :param columns: The columns of this USqlTableType.
        :param c_sharp_name: The c_sharp_name of this USqlTableType.
        :param database_name: The database_name of this USqlTableType.
        :param full_c_sharp_name: The full_c_sharp_name of this USqlTableType.
        :param is_assembly_type: The is_assembly_type of this USqlTableType.
        :param is_complex_type: The is_complex_type of this USqlTableType.
        :param is_nullable: The is_nullable of this USqlTableType.
        :param is_table_type: The is_table_type of this USqlTableType.
        :param is_user_defined: The is_user_defined of this USqlTableType.
        :param principal_id: The principal_id of this USqlTableType.
        :param schema_id: The schema_id of this USqlTableType.
        :param schema_name: The schema_name of this USqlTableType.
        :param system_type_id: The system_type_id of this USqlTableType.
        :param type_family: The type_family of this USqlTableType.
        :param type_name: The type_name of this USqlTableType.
        :param user_type_id: The user_type_id of this USqlTableType.
        :param compute_account_name: The compute_account_name of this USqlTableType.
        :param version: The version of this USqlTableType.
        """
        self.openapi_types = {
            'columns': List[TypeFieldInfo],
            'c_sharp_name': str,
            'database_name': str,
            'full_c_sharp_name': str,
            'is_assembly_type': bool,
            'is_complex_type': bool,
            'is_nullable': bool,
            'is_table_type': bool,
            'is_user_defined': bool,
            'principal_id': int,
            'schema_id': int,
            'schema_name': str,
            'system_type_id': int,
            'type_family': str,
            'type_name': str,
            'user_type_id': int,
            'compute_account_name': str,
            'version': str
        }

        self.attribute_map = {
            'columns': 'columns',
            'c_sharp_name': 'cSharpName',
            'database_name': 'databaseName',
            'full_c_sharp_name': 'fullCSharpName',
            'is_assembly_type': 'isAssemblyType',
            'is_complex_type': 'isComplexType',
            'is_nullable': 'isNullable',
            'is_table_type': 'isTableType',
            'is_user_defined': 'isUserDefined',
            'principal_id': 'principalId',
            'schema_id': 'schemaId',
            'schema_name': 'schemaName',
            'system_type_id': 'systemTypeId',
            'type_family': 'typeFamily',
            'type_name': 'typeName',
            'user_type_id': 'userTypeId',
            'compute_account_name': 'computeAccountName',
            'version': 'version'
        }

        self._columns = columns
        self._c_sharp_name = c_sharp_name
        self._database_name = database_name
        self._full_c_sharp_name = full_c_sharp_name
        self._is_assembly_type = is_assembly_type
        self._is_complex_type = is_complex_type
        self._is_nullable = is_nullable
        self._is_table_type = is_table_type
        self._is_user_defined = is_user_defined
        self._principal_id = principal_id
        self._schema_id = schema_id
        self._schema_name = schema_name
        self._system_type_id = system_type_id
        self._type_family = type_family
        self._type_name = type_name
        self._user_type_id = user_type_id
        self._compute_account_name = compute_account_name
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'USqlTableType':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The USqlTableType of this USqlTableType.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def columns(self):
        """Gets the columns of this USqlTableType.

        the type field information associated with this table type.

        :return: The columns of this USqlTableType.
        :rtype: List[TypeFieldInfo]
        """
        return self._columns

    @columns.setter
    def columns(self, columns):
        """Sets the columns of this USqlTableType.

        the type field information associated with this table type.

        :param columns: The columns of this USqlTableType.
        :type columns: List[TypeFieldInfo]
        """

        self._columns = columns

    @property
    def c_sharp_name(self):
        """Gets the c_sharp_name of this USqlTableType.

        the C# name for this type.

        :return: The c_sharp_name of this USqlTableType.
        :rtype: str
        """
        return self._c_sharp_name

    @c_sharp_name.setter
    def c_sharp_name(self, c_sharp_name):
        """Sets the c_sharp_name of this USqlTableType.

        the C# name for this type.

        :param c_sharp_name: The c_sharp_name of this USqlTableType.
        :type c_sharp_name: str
        """

        self._c_sharp_name = c_sharp_name

    @property
    def database_name(self):
        """Gets the database_name of this USqlTableType.

        the name of the database.

        :return: The database_name of this USqlTableType.
        :rtype: str
        """
        return self._database_name

    @database_name.setter
    def database_name(self, database_name):
        """Sets the database_name of this USqlTableType.

        the name of the database.

        :param database_name: The database_name of this USqlTableType.
        :type database_name: str
        """

        self._database_name = database_name

    @property
    def full_c_sharp_name(self):
        """Gets the full_c_sharp_name of this USqlTableType.

        the fully qualified C# name for this type.

        :return: The full_c_sharp_name of this USqlTableType.
        :rtype: str
        """
        return self._full_c_sharp_name

    @full_c_sharp_name.setter
    def full_c_sharp_name(self, full_c_sharp_name):
        """Sets the full_c_sharp_name of this USqlTableType.

        the fully qualified C# name for this type.

        :param full_c_sharp_name: The full_c_sharp_name of this USqlTableType.
        :type full_c_sharp_name: str
        """

        self._full_c_sharp_name = full_c_sharp_name

    @property
    def is_assembly_type(self):
        """Gets the is_assembly_type of this USqlTableType.

        The switch indicating if this type is an assembly type.

        :return: The is_assembly_type of this USqlTableType.
        :rtype: bool
        """
        return self._is_assembly_type

    @is_assembly_type.setter
    def is_assembly_type(self, is_assembly_type):
        """Sets the is_assembly_type of this USqlTableType.

        The switch indicating if this type is an assembly type.

        :param is_assembly_type: The is_assembly_type of this USqlTableType.
        :type is_assembly_type: bool
        """

        self._is_assembly_type = is_assembly_type

    @property
    def is_complex_type(self):
        """Gets the is_complex_type of this USqlTableType.

        The switch indicating if this type is a complex type.

        :return: The is_complex_type of this USqlTableType.
        :rtype: bool
        """
        return self._is_complex_type

    @is_complex_type.setter
    def is_complex_type(self, is_complex_type):
        """Sets the is_complex_type of this USqlTableType.

        The switch indicating if this type is a complex type.

        :param is_complex_type: The is_complex_type of this USqlTableType.
        :type is_complex_type: bool
        """

        self._is_complex_type = is_complex_type

    @property
    def is_nullable(self):
        """Gets the is_nullable of this USqlTableType.

        The switch indicating if this type is nullable.

        :return: The is_nullable of this USqlTableType.
        :rtype: bool
        """
        return self._is_nullable

    @is_nullable.setter
    def is_nullable(self, is_nullable):
        """Sets the is_nullable of this USqlTableType.

        The switch indicating if this type is nullable.

        :param is_nullable: The is_nullable of this USqlTableType.
        :type is_nullable: bool
        """

        self._is_nullable = is_nullable

    @property
    def is_table_type(self):
        """Gets the is_table_type of this USqlTableType.

        The switch indicating if this type is a table type.

        :return: The is_table_type of this USqlTableType.
        :rtype: bool
        """
        return self._is_table_type

    @is_table_type.setter
    def is_table_type(self, is_table_type):
        """Sets the is_table_type of this USqlTableType.

        The switch indicating if this type is a table type.

        :param is_table_type: The is_table_type of this USqlTableType.
        :type is_table_type: bool
        """

        self._is_table_type = is_table_type

    @property
    def is_user_defined(self):
        """Gets the is_user_defined of this USqlTableType.

        The switch indicating if this type is user defined.

        :return: The is_user_defined of this USqlTableType.
        :rtype: bool
        """
        return self._is_user_defined

    @is_user_defined.setter
    def is_user_defined(self, is_user_defined):
        """Sets the is_user_defined of this USqlTableType.

        The switch indicating if this type is user defined.

        :param is_user_defined: The is_user_defined of this USqlTableType.
        :type is_user_defined: bool
        """

        self._is_user_defined = is_user_defined

    @property
    def principal_id(self):
        """Gets the principal_id of this USqlTableType.

        the principal ID for this type.

        :return: The principal_id of this USqlTableType.
        :rtype: int
        """
        return self._principal_id

    @principal_id.setter
    def principal_id(self, principal_id):
        """Sets the principal_id of this USqlTableType.

        the principal ID for this type.

        :param principal_id: The principal_id of this USqlTableType.
        :type principal_id: int
        """

        self._principal_id = principal_id

    @property
    def schema_id(self):
        """Gets the schema_id of this USqlTableType.

        the schema ID for this type.

        :return: The schema_id of this USqlTableType.
        :rtype: int
        """
        return self._schema_id

    @schema_id.setter
    def schema_id(self, schema_id):
        """Sets the schema_id of this USqlTableType.

        the schema ID for this type.

        :param schema_id: The schema_id of this USqlTableType.
        :type schema_id: int
        """

        self._schema_id = schema_id

    @property
    def schema_name(self):
        """Gets the schema_name of this USqlTableType.

        the name of the schema associated with this table and database.

        :return: The schema_name of this USqlTableType.
        :rtype: str
        """
        return self._schema_name

    @schema_name.setter
    def schema_name(self, schema_name):
        """Sets the schema_name of this USqlTableType.

        the name of the schema associated with this table and database.

        :param schema_name: The schema_name of this USqlTableType.
        :type schema_name: str
        """

        self._schema_name = schema_name

    @property
    def system_type_id(self):
        """Gets the system_type_id of this USqlTableType.

        the system type ID for this type.

        :return: The system_type_id of this USqlTableType.
        :rtype: int
        """
        return self._system_type_id

    @system_type_id.setter
    def system_type_id(self, system_type_id):
        """Sets the system_type_id of this USqlTableType.

        the system type ID for this type.

        :param system_type_id: The system_type_id of this USqlTableType.
        :type system_type_id: int
        """

        self._system_type_id = system_type_id

    @property
    def type_family(self):
        """Gets the type_family of this USqlTableType.

        the type family for this type.

        :return: The type_family of this USqlTableType.
        :rtype: str
        """
        return self._type_family

    @type_family.setter
    def type_family(self, type_family):
        """Sets the type_family of this USqlTableType.

        the type family for this type.

        :param type_family: The type_family of this USqlTableType.
        :type type_family: str
        """

        self._type_family = type_family

    @property
    def type_name(self):
        """Gets the type_name of this USqlTableType.

        the name of type for this type.

        :return: The type_name of this USqlTableType.
        :rtype: str
        """
        return self._type_name

    @type_name.setter
    def type_name(self, type_name):
        """Sets the type_name of this USqlTableType.

        the name of type for this type.

        :param type_name: The type_name of this USqlTableType.
        :type type_name: str
        """

        self._type_name = type_name

    @property
    def user_type_id(self):
        """Gets the user_type_id of this USqlTableType.

        the user type ID for this type.

        :return: The user_type_id of this USqlTableType.
        :rtype: int
        """
        return self._user_type_id

    @user_type_id.setter
    def user_type_id(self, user_type_id):
        """Sets the user_type_id of this USqlTableType.

        the user type ID for this type.

        :param user_type_id: The user_type_id of this USqlTableType.
        :type user_type_id: int
        """

        self._user_type_id = user_type_id

    @property
    def compute_account_name(self):
        """Gets the compute_account_name of this USqlTableType.

        the name of the Data Lake Analytics account.

        :return: The compute_account_name of this USqlTableType.
        :rtype: str
        """
        return self._compute_account_name

    @compute_account_name.setter
    def compute_account_name(self, compute_account_name):
        """Sets the compute_account_name of this USqlTableType.

        the name of the Data Lake Analytics account.

        :param compute_account_name: The compute_account_name of this USqlTableType.
        :type compute_account_name: str
        """

        self._compute_account_name = compute_account_name

    @property
    def version(self):
        """Gets the version of this USqlTableType.

        the version of the catalog item.

        :return: The version of this USqlTableType.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this USqlTableType.

        the version of the catalog item.

        :param version: The version of this USqlTableType.
        :type version: str
        """

        self._version = version
