# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class USqlSecret(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, creation_time: datetime=None, database_name: str=None, password: str=None, secret_name: str=None, uri: str=None, compute_account_name: str=None, version: str=None):
        """USqlSecret - a model defined in OpenAPI

        :param creation_time: The creation_time of this USqlSecret.
        :param database_name: The database_name of this USqlSecret.
        :param password: The password of this USqlSecret.
        :param secret_name: The secret_name of this USqlSecret.
        :param uri: The uri of this USqlSecret.
        :param compute_account_name: The compute_account_name of this USqlSecret.
        :param version: The version of this USqlSecret.
        """
        self.openapi_types = {
            'creation_time': datetime,
            'database_name': str,
            'password': str,
            'secret_name': str,
            'uri': str,
            'compute_account_name': str,
            'version': str
        }

        self.attribute_map = {
            'creation_time': 'creationTime',
            'database_name': 'databaseName',
            'password': 'password',
            'secret_name': 'secretName',
            'uri': 'uri',
            'compute_account_name': 'computeAccountName',
            'version': 'version'
        }

        self._creation_time = creation_time
        self._database_name = database_name
        self._password = password
        self._secret_name = secret_name
        self._uri = uri
        self._compute_account_name = compute_account_name
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'USqlSecret':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The USqlSecret of this USqlSecret.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def creation_time(self):
        """Gets the creation_time of this USqlSecret.

        the creation time of the credential object. This is the only information returned about a secret from a GET.

        :return: The creation_time of this USqlSecret.
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this USqlSecret.

        the creation time of the credential object. This is the only information returned about a secret from a GET.

        :param creation_time: The creation_time of this USqlSecret.
        :type creation_time: datetime
        """

        self._creation_time = creation_time

    @property
    def database_name(self):
        """Gets the database_name of this USqlSecret.

        the name of the database.

        :return: The database_name of this USqlSecret.
        :rtype: str
        """
        return self._database_name

    @database_name.setter
    def database_name(self, database_name):
        """Sets the database_name of this USqlSecret.

        the name of the database.

        :param database_name: The database_name of this USqlSecret.
        :type database_name: str
        """

        self._database_name = database_name

    @property
    def password(self):
        """Gets the password of this USqlSecret.

        the password for the secret to pass in

        :return: The password of this USqlSecret.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this USqlSecret.

        the password for the secret to pass in

        :param password: The password of this USqlSecret.
        :type password: str
        """

        self._password = password

    @property
    def secret_name(self):
        """Gets the secret_name of this USqlSecret.

        the name of the secret.

        :return: The secret_name of this USqlSecret.
        :rtype: str
        """
        return self._secret_name

    @secret_name.setter
    def secret_name(self, secret_name):
        """Sets the secret_name of this USqlSecret.

        the name of the secret.

        :param secret_name: The secret_name of this USqlSecret.
        :type secret_name: str
        """

        self._secret_name = secret_name

    @property
    def uri(self):
        """Gets the uri of this USqlSecret.

        the URI identifier for the secret in the format <hostname>:<port>

        :return: The uri of this USqlSecret.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this USqlSecret.

        the URI identifier for the secret in the format <hostname>:<port>

        :param uri: The uri of this USqlSecret.
        :type uri: str
        """

        self._uri = uri

    @property
    def compute_account_name(self):
        """Gets the compute_account_name of this USqlSecret.

        the name of the Data Lake Analytics account.

        :return: The compute_account_name of this USqlSecret.
        :rtype: str
        """
        return self._compute_account_name

    @compute_account_name.setter
    def compute_account_name(self, compute_account_name):
        """Sets the compute_account_name of this USqlSecret.

        the name of the Data Lake Analytics account.

        :param compute_account_name: The compute_account_name of this USqlSecret.
        :type compute_account_name: str
        """

        self._compute_account_name = compute_account_name

    @property
    def version(self):
        """Gets the version of this USqlSecret.

        the version of the catalog item.

        :return: The version of this USqlSecret.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this USqlSecret.

        the version of the catalog item.

        :param version: The version of this USqlSecret.
        :type version: str
        """

        self._version = version
