# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class USqlExternalDataSource(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, database_name: str=None, external_data_source_name: str=None, provider: str=None, provider_string: str=None, pushdown_types: List[str]=None, compute_account_name: str=None, version: str=None):
        """USqlExternalDataSource - a model defined in OpenAPI

        :param database_name: The database_name of this USqlExternalDataSource.
        :param external_data_source_name: The external_data_source_name of this USqlExternalDataSource.
        :param provider: The provider of this USqlExternalDataSource.
        :param provider_string: The provider_string of this USqlExternalDataSource.
        :param pushdown_types: The pushdown_types of this USqlExternalDataSource.
        :param compute_account_name: The compute_account_name of this USqlExternalDataSource.
        :param version: The version of this USqlExternalDataSource.
        """
        self.openapi_types = {
            'database_name': str,
            'external_data_source_name': str,
            'provider': str,
            'provider_string': str,
            'pushdown_types': List[str],
            'compute_account_name': str,
            'version': str
        }

        self.attribute_map = {
            'database_name': 'databaseName',
            'external_data_source_name': 'externalDataSourceName',
            'provider': 'provider',
            'provider_string': 'providerString',
            'pushdown_types': 'pushdownTypes',
            'compute_account_name': 'computeAccountName',
            'version': 'version'
        }

        self._database_name = database_name
        self._external_data_source_name = external_data_source_name
        self._provider = provider
        self._provider_string = provider_string
        self._pushdown_types = pushdown_types
        self._compute_account_name = compute_account_name
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'USqlExternalDataSource':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The USqlExternalDataSource of this USqlExternalDataSource.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def database_name(self):
        """Gets the database_name of this USqlExternalDataSource.

        the name of the database.

        :return: The database_name of this USqlExternalDataSource.
        :rtype: str
        """
        return self._database_name

    @database_name.setter
    def database_name(self, database_name):
        """Sets the database_name of this USqlExternalDataSource.

        the name of the database.

        :param database_name: The database_name of this USqlExternalDataSource.
        :type database_name: str
        """

        self._database_name = database_name

    @property
    def external_data_source_name(self):
        """Gets the external_data_source_name of this USqlExternalDataSource.

        the name of the external data source.

        :return: The external_data_source_name of this USqlExternalDataSource.
        :rtype: str
        """
        return self._external_data_source_name

    @external_data_source_name.setter
    def external_data_source_name(self, external_data_source_name):
        """Sets the external_data_source_name of this USqlExternalDataSource.

        the name of the external data source.

        :param external_data_source_name: The external_data_source_name of this USqlExternalDataSource.
        :type external_data_source_name: str
        """

        self._external_data_source_name = external_data_source_name

    @property
    def provider(self):
        """Gets the provider of this USqlExternalDataSource.

        the name of the provider for the external data source.

        :return: The provider of this USqlExternalDataSource.
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this USqlExternalDataSource.

        the name of the provider for the external data source.

        :param provider: The provider of this USqlExternalDataSource.
        :type provider: str
        """

        self._provider = provider

    @property
    def provider_string(self):
        """Gets the provider_string of this USqlExternalDataSource.

        the name of the provider string for the external data source.

        :return: The provider_string of this USqlExternalDataSource.
        :rtype: str
        """
        return self._provider_string

    @provider_string.setter
    def provider_string(self, provider_string):
        """Sets the provider_string of this USqlExternalDataSource.

        the name of the provider string for the external data source.

        :param provider_string: The provider_string of this USqlExternalDataSource.
        :type provider_string: str
        """

        self._provider_string = provider_string

    @property
    def pushdown_types(self):
        """Gets the pushdown_types of this USqlExternalDataSource.

        the list of types to push down from the external data source.

        :return: The pushdown_types of this USqlExternalDataSource.
        :rtype: List[str]
        """
        return self._pushdown_types

    @pushdown_types.setter
    def pushdown_types(self, pushdown_types):
        """Sets the pushdown_types of this USqlExternalDataSource.

        the list of types to push down from the external data source.

        :param pushdown_types: The pushdown_types of this USqlExternalDataSource.
        :type pushdown_types: List[str]
        """

        self._pushdown_types = pushdown_types

    @property
    def compute_account_name(self):
        """Gets the compute_account_name of this USqlExternalDataSource.

        the name of the Data Lake Analytics account.

        :return: The compute_account_name of this USqlExternalDataSource.
        :rtype: str
        """
        return self._compute_account_name

    @compute_account_name.setter
    def compute_account_name(self, compute_account_name):
        """Sets the compute_account_name of this USqlExternalDataSource.

        the name of the Data Lake Analytics account.

        :param compute_account_name: The compute_account_name of this USqlExternalDataSource.
        :type compute_account_name: str
        """

        self._compute_account_name = compute_account_name

    @property
    def version(self):
        """Gets the version of this USqlExternalDataSource.

        the version of the catalog item.

        :return: The version of this USqlExternalDataSource.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this USqlExternalDataSource.

        the version of the catalog item.

        :param version: The version of this USqlExternalDataSource.
        :type version: str
        """

        self._version = version
