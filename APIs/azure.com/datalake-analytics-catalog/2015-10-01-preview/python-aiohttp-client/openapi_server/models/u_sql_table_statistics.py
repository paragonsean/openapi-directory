# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class USqlTableStatistics(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, col_names: List[str]=None, create_time: datetime=None, database_name: str=None, filter_definition: str=None, has_filter: bool=None, is_auto_created: bool=None, is_user_created: bool=None, schema_name: str=None, stat_data_path: str=None, statistics_name: str=None, table_name: str=None, update_time: datetime=None, user_stat_name: str=None, compute_account_name: str=None, version: str=None):
        """USqlTableStatistics - a model defined in OpenAPI

        :param col_names: The col_names of this USqlTableStatistics.
        :param create_time: The create_time of this USqlTableStatistics.
        :param database_name: The database_name of this USqlTableStatistics.
        :param filter_definition: The filter_definition of this USqlTableStatistics.
        :param has_filter: The has_filter of this USqlTableStatistics.
        :param is_auto_created: The is_auto_created of this USqlTableStatistics.
        :param is_user_created: The is_user_created of this USqlTableStatistics.
        :param schema_name: The schema_name of this USqlTableStatistics.
        :param stat_data_path: The stat_data_path of this USqlTableStatistics.
        :param statistics_name: The statistics_name of this USqlTableStatistics.
        :param table_name: The table_name of this USqlTableStatistics.
        :param update_time: The update_time of this USqlTableStatistics.
        :param user_stat_name: The user_stat_name of this USqlTableStatistics.
        :param compute_account_name: The compute_account_name of this USqlTableStatistics.
        :param version: The version of this USqlTableStatistics.
        """
        self.openapi_types = {
            'col_names': List[str],
            'create_time': datetime,
            'database_name': str,
            'filter_definition': str,
            'has_filter': bool,
            'is_auto_created': bool,
            'is_user_created': bool,
            'schema_name': str,
            'stat_data_path': str,
            'statistics_name': str,
            'table_name': str,
            'update_time': datetime,
            'user_stat_name': str,
            'compute_account_name': str,
            'version': str
        }

        self.attribute_map = {
            'col_names': 'colNames',
            'create_time': 'createTime',
            'database_name': 'databaseName',
            'filter_definition': 'filterDefinition',
            'has_filter': 'hasFilter',
            'is_auto_created': 'isAutoCreated',
            'is_user_created': 'isUserCreated',
            'schema_name': 'schemaName',
            'stat_data_path': 'statDataPath',
            'statistics_name': 'statisticsName',
            'table_name': 'tableName',
            'update_time': 'updateTime',
            'user_stat_name': 'userStatName',
            'compute_account_name': 'computeAccountName',
            'version': 'version'
        }

        self._col_names = col_names
        self._create_time = create_time
        self._database_name = database_name
        self._filter_definition = filter_definition
        self._has_filter = has_filter
        self._is_auto_created = is_auto_created
        self._is_user_created = is_user_created
        self._schema_name = schema_name
        self._stat_data_path = stat_data_path
        self._statistics_name = statistics_name
        self._table_name = table_name
        self._update_time = update_time
        self._user_stat_name = user_stat_name
        self._compute_account_name = compute_account_name
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'USqlTableStatistics':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The USqlTableStatistics of this USqlTableStatistics.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def col_names(self):
        """Gets the col_names of this USqlTableStatistics.

        the list of column names associated with these statistics.

        :return: The col_names of this USqlTableStatistics.
        :rtype: List[str]
        """
        return self._col_names

    @col_names.setter
    def col_names(self, col_names):
        """Sets the col_names of this USqlTableStatistics.

        the list of column names associated with these statistics.

        :param col_names: The col_names of this USqlTableStatistics.
        :type col_names: List[str]
        """

        self._col_names = col_names

    @property
    def create_time(self):
        """Gets the create_time of this USqlTableStatistics.

        the creation time of the statistics.

        :return: The create_time of this USqlTableStatistics.
        :rtype: datetime
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this USqlTableStatistics.

        the creation time of the statistics.

        :param create_time: The create_time of this USqlTableStatistics.
        :type create_time: datetime
        """

        self._create_time = create_time

    @property
    def database_name(self):
        """Gets the database_name of this USqlTableStatistics.

        the name of the database.

        :return: The database_name of this USqlTableStatistics.
        :rtype: str
        """
        return self._database_name

    @database_name.setter
    def database_name(self, database_name):
        """Sets the database_name of this USqlTableStatistics.

        the name of the database.

        :param database_name: The database_name of this USqlTableStatistics.
        :type database_name: str
        """

        self._database_name = database_name

    @property
    def filter_definition(self):
        """Gets the filter_definition of this USqlTableStatistics.

        the filter definition for the statistics.

        :return: The filter_definition of this USqlTableStatistics.
        :rtype: str
        """
        return self._filter_definition

    @filter_definition.setter
    def filter_definition(self, filter_definition):
        """Sets the filter_definition of this USqlTableStatistics.

        the filter definition for the statistics.

        :param filter_definition: The filter_definition of this USqlTableStatistics.
        :type filter_definition: str
        """

        self._filter_definition = filter_definition

    @property
    def has_filter(self):
        """Gets the has_filter of this USqlTableStatistics.

        the switch indicating if these statistics have a filter.

        :return: The has_filter of this USqlTableStatistics.
        :rtype: bool
        """
        return self._has_filter

    @has_filter.setter
    def has_filter(self, has_filter):
        """Sets the has_filter of this USqlTableStatistics.

        the switch indicating if these statistics have a filter.

        :param has_filter: The has_filter of this USqlTableStatistics.
        :type has_filter: bool
        """

        self._has_filter = has_filter

    @property
    def is_auto_created(self):
        """Gets the is_auto_created of this USqlTableStatistics.

        the switch indicating if these statistics are automatically created.

        :return: The is_auto_created of this USqlTableStatistics.
        :rtype: bool
        """
        return self._is_auto_created

    @is_auto_created.setter
    def is_auto_created(self, is_auto_created):
        """Sets the is_auto_created of this USqlTableStatistics.

        the switch indicating if these statistics are automatically created.

        :param is_auto_created: The is_auto_created of this USqlTableStatistics.
        :type is_auto_created: bool
        """

        self._is_auto_created = is_auto_created

    @property
    def is_user_created(self):
        """Gets the is_user_created of this USqlTableStatistics.

        the switch indicating if these statistics are user created.

        :return: The is_user_created of this USqlTableStatistics.
        :rtype: bool
        """
        return self._is_user_created

    @is_user_created.setter
    def is_user_created(self, is_user_created):
        """Sets the is_user_created of this USqlTableStatistics.

        the switch indicating if these statistics are user created.

        :param is_user_created: The is_user_created of this USqlTableStatistics.
        :type is_user_created: bool
        """

        self._is_user_created = is_user_created

    @property
    def schema_name(self):
        """Gets the schema_name of this USqlTableStatistics.

        the name of the schema associated with this table and database.

        :return: The schema_name of this USqlTableStatistics.
        :rtype: str
        """
        return self._schema_name

    @schema_name.setter
    def schema_name(self, schema_name):
        """Sets the schema_name of this USqlTableStatistics.

        the name of the schema associated with this table and database.

        :param schema_name: The schema_name of this USqlTableStatistics.
        :type schema_name: str
        """

        self._schema_name = schema_name

    @property
    def stat_data_path(self):
        """Gets the stat_data_path of this USqlTableStatistics.

        the path to the statistics data.

        :return: The stat_data_path of this USqlTableStatistics.
        :rtype: str
        """
        return self._stat_data_path

    @stat_data_path.setter
    def stat_data_path(self, stat_data_path):
        """Sets the stat_data_path of this USqlTableStatistics.

        the path to the statistics data.

        :param stat_data_path: The stat_data_path of this USqlTableStatistics.
        :type stat_data_path: str
        """

        self._stat_data_path = stat_data_path

    @property
    def statistics_name(self):
        """Gets the statistics_name of this USqlTableStatistics.

        the name of the table statistics.

        :return: The statistics_name of this USqlTableStatistics.
        :rtype: str
        """
        return self._statistics_name

    @statistics_name.setter
    def statistics_name(self, statistics_name):
        """Sets the statistics_name of this USqlTableStatistics.

        the name of the table statistics.

        :param statistics_name: The statistics_name of this USqlTableStatistics.
        :type statistics_name: str
        """

        self._statistics_name = statistics_name

    @property
    def table_name(self):
        """Gets the table_name of this USqlTableStatistics.

        the name of the table.

        :return: The table_name of this USqlTableStatistics.
        :rtype: str
        """
        return self._table_name

    @table_name.setter
    def table_name(self, table_name):
        """Sets the table_name of this USqlTableStatistics.

        the name of the table.

        :param table_name: The table_name of this USqlTableStatistics.
        :type table_name: str
        """

        self._table_name = table_name

    @property
    def update_time(self):
        """Gets the update_time of this USqlTableStatistics.

        the last time the statistics were updated.

        :return: The update_time of this USqlTableStatistics.
        :rtype: datetime
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this USqlTableStatistics.

        the last time the statistics were updated.

        :param update_time: The update_time of this USqlTableStatistics.
        :type update_time: datetime
        """

        self._update_time = update_time

    @property
    def user_stat_name(self):
        """Gets the user_stat_name of this USqlTableStatistics.

        the name of the user statistics.

        :return: The user_stat_name of this USqlTableStatistics.
        :rtype: str
        """
        return self._user_stat_name

    @user_stat_name.setter
    def user_stat_name(self, user_stat_name):
        """Sets the user_stat_name of this USqlTableStatistics.

        the name of the user statistics.

        :param user_stat_name: The user_stat_name of this USqlTableStatistics.
        :type user_stat_name: str
        """

        self._user_stat_name = user_stat_name

    @property
    def compute_account_name(self):
        """Gets the compute_account_name of this USqlTableStatistics.

        the name of the Data Lake Analytics account.

        :return: The compute_account_name of this USqlTableStatistics.
        :rtype: str
        """
        return self._compute_account_name

    @compute_account_name.setter
    def compute_account_name(self, compute_account_name):
        """Sets the compute_account_name of this USqlTableStatistics.

        the name of the Data Lake Analytics account.

        :param compute_account_name: The compute_account_name of this USqlTableStatistics.
        :type compute_account_name: str
        """

        self._compute_account_name = compute_account_name

    @property
    def version(self):
        """Gets the version of this USqlTableStatistics.

        the version of the catalog item.

        :return: The version of this USqlTableStatistics.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this USqlTableStatistics.

        the version of the catalog item.

        :param version: The version of this USqlTableStatistics.
        :type version: str
        """

        self._version = version
