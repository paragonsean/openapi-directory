# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class USqlCredential(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, credential_name: str=None, database_name: str=None, identity: str=None, user_name: str=None, compute_account_name: str=None, version: str=None):
        """USqlCredential - a model defined in OpenAPI

        :param credential_name: The credential_name of this USqlCredential.
        :param database_name: The database_name of this USqlCredential.
        :param identity: The identity of this USqlCredential.
        :param user_name: The user_name of this USqlCredential.
        :param compute_account_name: The compute_account_name of this USqlCredential.
        :param version: The version of this USqlCredential.
        """
        self.openapi_types = {
            'credential_name': str,
            'database_name': str,
            'identity': str,
            'user_name': str,
            'compute_account_name': str,
            'version': str
        }

        self.attribute_map = {
            'credential_name': 'credentialName',
            'database_name': 'databaseName',
            'identity': 'identity',
            'user_name': 'userName',
            'compute_account_name': 'computeAccountName',
            'version': 'version'
        }

        self._credential_name = credential_name
        self._database_name = database_name
        self._identity = identity
        self._user_name = user_name
        self._compute_account_name = compute_account_name
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'USqlCredential':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The USqlCredential of this USqlCredential.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def credential_name(self):
        """Gets the credential_name of this USqlCredential.

        the name of the credential.

        :return: The credential_name of this USqlCredential.
        :rtype: str
        """
        return self._credential_name

    @credential_name.setter
    def credential_name(self, credential_name):
        """Sets the credential_name of this USqlCredential.

        the name of the credential.

        :param credential_name: The credential_name of this USqlCredential.
        :type credential_name: str
        """

        self._credential_name = credential_name

    @property
    def database_name(self):
        """Gets the database_name of this USqlCredential.

        the name of the database the credential is in.

        :return: The database_name of this USqlCredential.
        :rtype: str
        """
        return self._database_name

    @database_name.setter
    def database_name(self, database_name):
        """Sets the database_name of this USqlCredential.

        the name of the database the credential is in.

        :param database_name: The database_name of this USqlCredential.
        :type database_name: str
        """

        self._database_name = database_name

    @property
    def identity(self):
        """Gets the identity of this USqlCredential.

        the name of the secret associated with the credential.

        :return: The identity of this USqlCredential.
        :rtype: str
        """
        return self._identity

    @identity.setter
    def identity(self, identity):
        """Sets the identity of this USqlCredential.

        the name of the secret associated with the credential.

        :param identity: The identity of this USqlCredential.
        :type identity: str
        """

        self._identity = identity

    @property
    def user_name(self):
        """Gets the user_name of this USqlCredential.

        the user name associated with the credential.

        :return: The user_name of this USqlCredential.
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this USqlCredential.

        the user name associated with the credential.

        :param user_name: The user_name of this USqlCredential.
        :type user_name: str
        """

        self._user_name = user_name

    @property
    def compute_account_name(self):
        """Gets the compute_account_name of this USqlCredential.

        the name of the Data Lake Analytics account.

        :return: The compute_account_name of this USqlCredential.
        :rtype: str
        """
        return self._compute_account_name

    @compute_account_name.setter
    def compute_account_name(self, compute_account_name):
        """Sets the compute_account_name of this USqlCredential.

        the name of the Data Lake Analytics account.

        :param compute_account_name: The compute_account_name of this USqlCredential.
        :type compute_account_name: str
        """

        self._compute_account_name = compute_account_name

    @property
    def version(self):
        """Gets the version of this USqlCredential.

        the version of the catalog item.

        :return: The version of this USqlCredential.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this USqlCredential.

        the version of the catalog item.

        :param version: The version of this USqlCredential.
        :type version: str
        """

        self._version = version
