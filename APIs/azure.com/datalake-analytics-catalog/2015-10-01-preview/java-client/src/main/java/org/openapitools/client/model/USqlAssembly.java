/*
 * DataLakeAnalyticsCatalogManagementClient
 * Creates an Azure Data Lake Analytics catalog client.
 *
 * The version of the OpenAPI document: 2015-10-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.USqlAssemblyDependencyInfo;
import org.openapitools.client.model.USqlAssemblyFileInfo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A Data Lake Analytics catalog U-SQL Assembly.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:54:53.468787-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class USqlAssembly {
  public static final String SERIALIZED_NAME_ASSEMBLY_NAME = "assemblyName";
  @SerializedName(SERIALIZED_NAME_ASSEMBLY_NAME)
  private String assemblyName;

  public static final String SERIALIZED_NAME_CLR_NAME = "clrName";
  @SerializedName(SERIALIZED_NAME_CLR_NAME)
  private String clrName;

  public static final String SERIALIZED_NAME_DATABASE_NAME = "databaseName";
  @SerializedName(SERIALIZED_NAME_DATABASE_NAME)
  private String databaseName;

  public static final String SERIALIZED_NAME_DEPENDENCIES = "dependencies";
  @SerializedName(SERIALIZED_NAME_DEPENDENCIES)
  private List<USqlAssemblyDependencyInfo> dependencies = new ArrayList<>();

  public static final String SERIALIZED_NAME_FILES = "files";
  @SerializedName(SERIALIZED_NAME_FILES)
  private List<USqlAssemblyFileInfo> files = new ArrayList<>();

  public static final String SERIALIZED_NAME_IS_USER_DEFINED = "isUserDefined";
  @SerializedName(SERIALIZED_NAME_IS_USER_DEFINED)
  private Boolean isUserDefined;

  public static final String SERIALIZED_NAME_IS_VISIBLE = "isVisible";
  @SerializedName(SERIALIZED_NAME_IS_VISIBLE)
  private Boolean isVisible;

  public static final String SERIALIZED_NAME_COMPUTE_ACCOUNT_NAME = "computeAccountName";
  @SerializedName(SERIALIZED_NAME_COMPUTE_ACCOUNT_NAME)
  private String computeAccountName;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private UUID version;

  public USqlAssembly() {
  }

  public USqlAssembly assemblyName(String assemblyName) {
    this.assemblyName = assemblyName;
    return this;
  }

  /**
   * the name of the assembly.
   * @return assemblyName
   */
  @javax.annotation.Nullable
  public String getAssemblyName() {
    return assemblyName;
  }

  public void setAssemblyName(String assemblyName) {
    this.assemblyName = assemblyName;
  }


  public USqlAssembly clrName(String clrName) {
    this.clrName = clrName;
    return this;
  }

  /**
   * the name of the CLR.
   * @return clrName
   */
  @javax.annotation.Nullable
  public String getClrName() {
    return clrName;
  }

  public void setClrName(String clrName) {
    this.clrName = clrName;
  }


  public USqlAssembly databaseName(String databaseName) {
    this.databaseName = databaseName;
    return this;
  }

  /**
   * the name of the database.
   * @return databaseName
   */
  @javax.annotation.Nullable
  public String getDatabaseName() {
    return databaseName;
  }

  public void setDatabaseName(String databaseName) {
    this.databaseName = databaseName;
  }


  public USqlAssembly dependencies(List<USqlAssemblyDependencyInfo> dependencies) {
    this.dependencies = dependencies;
    return this;
  }

  public USqlAssembly addDependenciesItem(USqlAssemblyDependencyInfo dependenciesItem) {
    if (this.dependencies == null) {
      this.dependencies = new ArrayList<>();
    }
    this.dependencies.add(dependenciesItem);
    return this;
  }

  /**
   * the list of dependencies associated with the assembly
   * @return dependencies
   */
  @javax.annotation.Nullable
  public List<USqlAssemblyDependencyInfo> getDependencies() {
    return dependencies;
  }

  public void setDependencies(List<USqlAssemblyDependencyInfo> dependencies) {
    this.dependencies = dependencies;
  }


  public USqlAssembly files(List<USqlAssemblyFileInfo> files) {
    this.files = files;
    return this;
  }

  public USqlAssembly addFilesItem(USqlAssemblyFileInfo filesItem) {
    if (this.files == null) {
      this.files = new ArrayList<>();
    }
    this.files.add(filesItem);
    return this;
  }

  /**
   * the list of files associated with the assembly
   * @return files
   */
  @javax.annotation.Nullable
  public List<USqlAssemblyFileInfo> getFiles() {
    return files;
  }

  public void setFiles(List<USqlAssemblyFileInfo> files) {
    this.files = files;
  }


  public USqlAssembly isUserDefined(Boolean isUserDefined) {
    this.isUserDefined = isUserDefined;
    return this;
  }

  /**
   * the switch indicating if this assembly is user defined or not.
   * @return isUserDefined
   */
  @javax.annotation.Nullable
  public Boolean getIsUserDefined() {
    return isUserDefined;
  }

  public void setIsUserDefined(Boolean isUserDefined) {
    this.isUserDefined = isUserDefined;
  }


  public USqlAssembly isVisible(Boolean isVisible) {
    this.isVisible = isVisible;
    return this;
  }

  /**
   * the switch indicating if this assembly is visible or not.
   * @return isVisible
   */
  @javax.annotation.Nullable
  public Boolean getIsVisible() {
    return isVisible;
  }

  public void setIsVisible(Boolean isVisible) {
    this.isVisible = isVisible;
  }


  public USqlAssembly computeAccountName(String computeAccountName) {
    this.computeAccountName = computeAccountName;
    return this;
  }

  /**
   * the name of the Data Lake Analytics account.
   * @return computeAccountName
   */
  @javax.annotation.Nullable
  public String getComputeAccountName() {
    return computeAccountName;
  }

  public void setComputeAccountName(String computeAccountName) {
    this.computeAccountName = computeAccountName;
  }


  public USqlAssembly version(UUID version) {
    this.version = version;
    return this;
  }

  /**
   * the version of the catalog item.
   * @return version
   */
  @javax.annotation.Nullable
  public UUID getVersion() {
    return version;
  }

  public void setVersion(UUID version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    USqlAssembly usqlAssembly = (USqlAssembly) o;
    return Objects.equals(this.assemblyName, usqlAssembly.assemblyName) &&
        Objects.equals(this.clrName, usqlAssembly.clrName) &&
        Objects.equals(this.databaseName, usqlAssembly.databaseName) &&
        Objects.equals(this.dependencies, usqlAssembly.dependencies) &&
        Objects.equals(this.files, usqlAssembly.files) &&
        Objects.equals(this.isUserDefined, usqlAssembly.isUserDefined) &&
        Objects.equals(this.isVisible, usqlAssembly.isVisible) &&
        Objects.equals(this.computeAccountName, usqlAssembly.computeAccountName) &&
        Objects.equals(this.version, usqlAssembly.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(assemblyName, clrName, databaseName, dependencies, files, isUserDefined, isVisible, computeAccountName, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class USqlAssembly {\n");
    sb.append("    assemblyName: ").append(toIndentedString(assemblyName)).append("\n");
    sb.append("    clrName: ").append(toIndentedString(clrName)).append("\n");
    sb.append("    databaseName: ").append(toIndentedString(databaseName)).append("\n");
    sb.append("    dependencies: ").append(toIndentedString(dependencies)).append("\n");
    sb.append("    files: ").append(toIndentedString(files)).append("\n");
    sb.append("    isUserDefined: ").append(toIndentedString(isUserDefined)).append("\n");
    sb.append("    isVisible: ").append(toIndentedString(isVisible)).append("\n");
    sb.append("    computeAccountName: ").append(toIndentedString(computeAccountName)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("computeAccountName");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to USqlAssembly
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!USqlAssembly.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in USqlAssembly is not found in the empty JSON string", USqlAssembly.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!USqlAssembly.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `USqlAssembly` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("assemblyName") != null && !jsonObj.get("assemblyName").isJsonNull()) && !jsonObj.get("assemblyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `assemblyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("assemblyName").toString()));
      }
      if ((jsonObj.get("clrName") != null && !jsonObj.get("clrName").isJsonNull()) && !jsonObj.get("clrName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clrName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clrName").toString()));
      }
      if ((jsonObj.get("databaseName") != null && !jsonObj.get("databaseName").isJsonNull()) && !jsonObj.get("databaseName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `databaseName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("databaseName").toString()));
      }
      if (jsonObj.get("dependencies") != null && !jsonObj.get("dependencies").isJsonNull()) {
        JsonArray jsonArraydependencies = jsonObj.getAsJsonArray("dependencies");
        if (jsonArraydependencies != null) {
          // ensure the json data is an array
          if (!jsonObj.get("dependencies").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `dependencies` to be an array in the JSON string but got `%s`", jsonObj.get("dependencies").toString()));
          }

          // validate the optional field `dependencies` (array)
          for (int i = 0; i < jsonArraydependencies.size(); i++) {
            USqlAssemblyDependencyInfo.validateJsonElement(jsonArraydependencies.get(i));
          };
        }
      }
      if (jsonObj.get("files") != null && !jsonObj.get("files").isJsonNull()) {
        JsonArray jsonArrayfiles = jsonObj.getAsJsonArray("files");
        if (jsonArrayfiles != null) {
          // ensure the json data is an array
          if (!jsonObj.get("files").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `files` to be an array in the JSON string but got `%s`", jsonObj.get("files").toString()));
          }

          // validate the optional field `files` (array)
          for (int i = 0; i < jsonArrayfiles.size(); i++) {
            USqlAssemblyFileInfo.validateJsonElement(jsonArrayfiles.get(i));
          };
        }
      }
      if ((jsonObj.get("computeAccountName") != null && !jsonObj.get("computeAccountName").isJsonNull()) && !jsonObj.get("computeAccountName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `computeAccountName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("computeAccountName").toString()));
      }
      if ((jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) && !jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!USqlAssembly.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'USqlAssembly' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<USqlAssembly> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(USqlAssembly.class));

       return (TypeAdapter<T>) new TypeAdapter<USqlAssembly>() {
           @Override
           public void write(JsonWriter out, USqlAssembly value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public USqlAssembly read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of USqlAssembly given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of USqlAssembly
   * @throws IOException if the JSON string is invalid with respect to USqlAssembly
   */
  public static USqlAssembly fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, USqlAssembly.class);
  }

  /**
   * Convert an instance of USqlAssembly to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

