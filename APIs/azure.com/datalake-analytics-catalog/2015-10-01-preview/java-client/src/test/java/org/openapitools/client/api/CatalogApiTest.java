/*
 * DataLakeAnalyticsCatalogManagementClient
 * Creates an Azure Data Lake Analytics catalog client.
 *
 * The version of the OpenAPI document: 2015-10-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.DataLakeAnalyticsCatalogSecretCreateOrUpdateParameters;
import org.openapitools.client.model.USqlAssembly;
import org.openapitools.client.model.USqlAssemblyList;
import org.openapitools.client.model.USqlCredential;
import org.openapitools.client.model.USqlCredentialList;
import org.openapitools.client.model.USqlDatabase;
import org.openapitools.client.model.USqlDatabaseList;
import org.openapitools.client.model.USqlExternalDataSource;
import org.openapitools.client.model.USqlExternalDataSourceList;
import org.openapitools.client.model.USqlProcedure;
import org.openapitools.client.model.USqlProcedureList;
import org.openapitools.client.model.USqlSchema;
import org.openapitools.client.model.USqlSchemaList;
import org.openapitools.client.model.USqlSecret;
import org.openapitools.client.model.USqlTable;
import org.openapitools.client.model.USqlTableList;
import org.openapitools.client.model.USqlTablePartition;
import org.openapitools.client.model.USqlTablePartitionList;
import org.openapitools.client.model.USqlTableStatistics;
import org.openapitools.client.model.USqlTableStatisticsList;
import org.openapitools.client.model.USqlTableType;
import org.openapitools.client.model.USqlTableTypeList;
import org.openapitools.client.model.USqlTableValuedFunction;
import org.openapitools.client.model.USqlTableValuedFunctionList;
import org.openapitools.client.model.USqlTypeList;
import org.openapitools.client.model.USqlView;
import org.openapitools.client.model.USqlViewList;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CatalogApi
 */
@Disabled
public class CatalogApiTest {

    private final CatalogApi api = new CatalogApi();

    /**
     * Creates the specified secret for use with external data sources in the specified database.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void catalogCreateSecretTest() throws ApiException {
        String databaseName = null;
        String secretName = null;
        String apiVersion = null;
        DataLakeAnalyticsCatalogSecretCreateOrUpdateParameters parameters = null;
        USqlSecret response = api.catalogCreateSecret(databaseName, secretName, apiVersion, parameters);
        // TODO: test validations
    }

    /**
     * Deletes all secrets in the specified database
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void catalogDeleteAllSecretsTest() throws ApiException {
        String databaseName = null;
        String apiVersion = null;
        api.catalogDeleteAllSecrets(databaseName, apiVersion);
        // TODO: test validations
    }

    /**
     * Deletes the specified secret in the specified database
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void catalogDeleteSecretTest() throws ApiException {
        String databaseName = null;
        String secretName = null;
        String apiVersion = null;
        api.catalogDeleteSecret(databaseName, secretName, apiVersion);
        // TODO: test validations
    }

    /**
     * Retrieves the specified assembly from the Data Lake Analytics catalog.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void catalogGetAssemblyTest() throws ApiException {
        String databaseName = null;
        String assemblyName = null;
        String apiVersion = null;
        USqlAssembly response = api.catalogGetAssembly(databaseName, assemblyName, apiVersion);
        // TODO: test validations
    }

    /**
     * Retrieves the specified credential from the Data Lake Analytics catalog.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void catalogGetCredentialTest() throws ApiException {
        String databaseName = null;
        String credentialName = null;
        String apiVersion = null;
        USqlCredential response = api.catalogGetCredential(databaseName, credentialName, apiVersion);
        // TODO: test validations
    }

    /**
     * Retrieves the specified database from the Data Lake Analytics catalog.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void catalogGetDatabaseTest() throws ApiException {
        String databaseName = null;
        String apiVersion = null;
        USqlDatabase response = api.catalogGetDatabase(databaseName, apiVersion);
        // TODO: test validations
    }

    /**
     * Retrieves the specified external data source from the Data Lake Analytics catalog.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void catalogGetExternalDataSourceTest() throws ApiException {
        String databaseName = null;
        String externalDataSourceName = null;
        String apiVersion = null;
        USqlExternalDataSource response = api.catalogGetExternalDataSource(databaseName, externalDataSourceName, apiVersion);
        // TODO: test validations
    }

    /**
     * Retrieves the specified procedure from the Data Lake Analytics catalog.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void catalogGetProcedureTest() throws ApiException {
        String databaseName = null;
        String schemaName = null;
        String procedureName = null;
        String apiVersion = null;
        USqlProcedure response = api.catalogGetProcedure(databaseName, schemaName, procedureName, apiVersion);
        // TODO: test validations
    }

    /**
     * Retrieves the specified schema from the Data Lake Analytics catalog.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void catalogGetSchemaTest() throws ApiException {
        String databaseName = null;
        String schemaName = null;
        String apiVersion = null;
        USqlSchema response = api.catalogGetSchema(databaseName, schemaName, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets the specified secret in the specified database
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void catalogGetSecretTest() throws ApiException {
        String databaseName = null;
        String secretName = null;
        String apiVersion = null;
        USqlSecret response = api.catalogGetSecret(databaseName, secretName, apiVersion);
        // TODO: test validations
    }

    /**
     * Retrieves the specified table from the Data Lake Analytics catalog.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void catalogGetTableTest() throws ApiException {
        String databaseName = null;
        String schemaName = null;
        String tableName = null;
        String apiVersion = null;
        USqlTable response = api.catalogGetTable(databaseName, schemaName, tableName, apiVersion);
        // TODO: test validations
    }

    /**
     * Retrieves the specified table partition from the Data Lake Analytics catalog.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void catalogGetTablePartitionTest() throws ApiException {
        String databaseName = null;
        String schemaName = null;
        String tableName = null;
        String partitionName = null;
        String apiVersion = null;
        USqlTablePartition response = api.catalogGetTablePartition(databaseName, schemaName, tableName, partitionName, apiVersion);
        // TODO: test validations
    }

    /**
     * Retrieves the specified table statistics from the Data Lake Analytics catalog.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void catalogGetTableStatisticTest() throws ApiException {
        String databaseName = null;
        String schemaName = null;
        String tableName = null;
        String statisticsName = null;
        String apiVersion = null;
        USqlTableStatistics response = api.catalogGetTableStatistic(databaseName, schemaName, tableName, statisticsName, apiVersion);
        // TODO: test validations
    }

    /**
     * Retrieves the specified table type from the Data Lake Analytics catalog.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void catalogGetTableTypeTest() throws ApiException {
        String databaseName = null;
        String schemaName = null;
        String tableTypeName = null;
        String apiVersion = null;
        USqlTableType response = api.catalogGetTableType(databaseName, schemaName, tableTypeName, apiVersion);
        // TODO: test validations
    }

    /**
     * Retrieves the specified table valued function from the Data Lake Analytics catalog.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void catalogGetTableValuedFunctionTest() throws ApiException {
        String databaseName = null;
        String schemaName = null;
        String tableValuedFunctionName = null;
        String apiVersion = null;
        USqlTableValuedFunction response = api.catalogGetTableValuedFunction(databaseName, schemaName, tableValuedFunctionName, apiVersion);
        // TODO: test validations
    }

    /**
     * Retrieves the specified view from the Data Lake Analytics catalog.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void catalogGetViewTest() throws ApiException {
        String databaseName = null;
        String schemaName = null;
        String viewName = null;
        String apiVersion = null;
        USqlView response = api.catalogGetView(databaseName, schemaName, viewName, apiVersion);
        // TODO: test validations
    }

    /**
     * Retrieves the list of assemblies from the Data Lake Analytics catalog.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void catalogListAssembliesTest() throws ApiException {
        String databaseName = null;
        String apiVersion = null;
        String $filter = null;
        Integer $top = null;
        Integer $skip = null;
        String $expand = null;
        String $select = null;
        String $orderby = null;
        Boolean $count = null;
        USqlAssemblyList response = api.catalogListAssemblies(databaseName, apiVersion, $filter, $top, $skip, $expand, $select, $orderby, $count);
        // TODO: test validations
    }

    /**
     * Retrieves the list of credentials from the Data Lake Analytics catalog.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void catalogListCredentialsTest() throws ApiException {
        String databaseName = null;
        String apiVersion = null;
        String $filter = null;
        Integer $top = null;
        Integer $skip = null;
        String $expand = null;
        String $select = null;
        String $orderby = null;
        Boolean $count = null;
        USqlCredentialList response = api.catalogListCredentials(databaseName, apiVersion, $filter, $top, $skip, $expand, $select, $orderby, $count);
        // TODO: test validations
    }

    /**
     * Retrieves the list of databases from the Data Lake Analytics catalog.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void catalogListDatabasesTest() throws ApiException {
        String apiVersion = null;
        String $filter = null;
        Integer $top = null;
        Integer $skip = null;
        String $expand = null;
        String $select = null;
        String $orderby = null;
        Boolean $count = null;
        USqlDatabaseList response = api.catalogListDatabases(apiVersion, $filter, $top, $skip, $expand, $select, $orderby, $count);
        // TODO: test validations
    }

    /**
     * Retrieves the list of external data sources from the Data Lake Analytics catalog.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void catalogListExternalDataSourcesTest() throws ApiException {
        String databaseName = null;
        String apiVersion = null;
        String $filter = null;
        Integer $top = null;
        Integer $skip = null;
        String $expand = null;
        String $select = null;
        String $orderby = null;
        Boolean $count = null;
        USqlExternalDataSourceList response = api.catalogListExternalDataSources(databaseName, apiVersion, $filter, $top, $skip, $expand, $select, $orderby, $count);
        // TODO: test validations
    }

    /**
     * Retrieves the list of procedures from the Data Lake Analytics catalog.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void catalogListProceduresTest() throws ApiException {
        String databaseName = null;
        String schemaName = null;
        String apiVersion = null;
        String $filter = null;
        Integer $top = null;
        Integer $skip = null;
        String $expand = null;
        String $select = null;
        String $orderby = null;
        Boolean $count = null;
        USqlProcedureList response = api.catalogListProcedures(databaseName, schemaName, apiVersion, $filter, $top, $skip, $expand, $select, $orderby, $count);
        // TODO: test validations
    }

    /**
     * Retrieves the list of schemas from the Data Lake Analytics catalog.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void catalogListSchemasTest() throws ApiException {
        String databaseName = null;
        String apiVersion = null;
        String $filter = null;
        Integer $top = null;
        Integer $skip = null;
        String $expand = null;
        String $select = null;
        String $orderby = null;
        Boolean $count = null;
        USqlSchemaList response = api.catalogListSchemas(databaseName, apiVersion, $filter, $top, $skip, $expand, $select, $orderby, $count);
        // TODO: test validations
    }

    /**
     * Retrieves the list of table partitions from the Data Lake Analytics catalog.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void catalogListTablePartitionsTest() throws ApiException {
        String databaseName = null;
        String schemaName = null;
        String tableName = null;
        String apiVersion = null;
        String $filter = null;
        Integer $top = null;
        Integer $skip = null;
        String $expand = null;
        String $select = null;
        String $orderby = null;
        Boolean $count = null;
        USqlTablePartitionList response = api.catalogListTablePartitions(databaseName, schemaName, tableName, apiVersion, $filter, $top, $skip, $expand, $select, $orderby, $count);
        // TODO: test validations
    }

    /**
     * Retrieves the list of table statistics from the Data Lake Analytics catalog.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void catalogListTableStatisticsTest() throws ApiException {
        String databaseName = null;
        String schemaName = null;
        String tableName = null;
        String apiVersion = null;
        String $filter = null;
        Integer $top = null;
        Integer $skip = null;
        String $expand = null;
        String $select = null;
        String $orderby = null;
        Boolean $count = null;
        USqlTableStatisticsList response = api.catalogListTableStatistics(databaseName, schemaName, tableName, apiVersion, $filter, $top, $skip, $expand, $select, $orderby, $count);
        // TODO: test validations
    }

    /**
     * Retrieves the list of table types from the Data Lake Analytics catalog.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void catalogListTableTypesTest() throws ApiException {
        String databaseName = null;
        String schemaName = null;
        String apiVersion = null;
        String $filter = null;
        Integer $top = null;
        Integer $skip = null;
        String $expand = null;
        String $select = null;
        String $orderby = null;
        Boolean $count = null;
        USqlTableTypeList response = api.catalogListTableTypes(databaseName, schemaName, apiVersion, $filter, $top, $skip, $expand, $select, $orderby, $count);
        // TODO: test validations
    }

    /**
     * Retrieves the list of table valued functions from the Data Lake Analytics catalog.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void catalogListTableValuedFunctionsTest() throws ApiException {
        String databaseName = null;
        String schemaName = null;
        String apiVersion = null;
        String $filter = null;
        Integer $top = null;
        Integer $skip = null;
        String $expand = null;
        String $select = null;
        String $orderby = null;
        Boolean $count = null;
        USqlTableValuedFunctionList response = api.catalogListTableValuedFunctions(databaseName, schemaName, apiVersion, $filter, $top, $skip, $expand, $select, $orderby, $count);
        // TODO: test validations
    }

    /**
     * Retrieves the list of tables from the Data Lake Analytics catalog.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void catalogListTablesTest() throws ApiException {
        String databaseName = null;
        String schemaName = null;
        String apiVersion = null;
        String $filter = null;
        Integer $top = null;
        Integer $skip = null;
        String $expand = null;
        String $select = null;
        String $orderby = null;
        Boolean $count = null;
        USqlTableList response = api.catalogListTables(databaseName, schemaName, apiVersion, $filter, $top, $skip, $expand, $select, $orderby, $count);
        // TODO: test validations
    }

    /**
     * Retrieves the list of types within the specified database and schema from the Data Lake Analytics catalog.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void catalogListTypesTest() throws ApiException {
        String databaseName = null;
        String schemaName = null;
        String apiVersion = null;
        String $filter = null;
        Integer $top = null;
        Integer $skip = null;
        String $expand = null;
        String $select = null;
        String $orderby = null;
        Boolean $count = null;
        USqlTypeList response = api.catalogListTypes(databaseName, schemaName, apiVersion, $filter, $top, $skip, $expand, $select, $orderby, $count);
        // TODO: test validations
    }

    /**
     * Retrieves the list of views from the Data Lake Analytics catalog.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void catalogListViewsTest() throws ApiException {
        String databaseName = null;
        String schemaName = null;
        String apiVersion = null;
        String $filter = null;
        Integer $top = null;
        Integer $skip = null;
        String $expand = null;
        String $select = null;
        String $orderby = null;
        Boolean $count = null;
        USqlViewList response = api.catalogListViews(databaseName, schemaName, apiVersion, $filter, $top, $skip, $expand, $select, $orderby, $count);
        // TODO: test validations
    }

    /**
     * Modifies the specified secret for use with external data sources in the specified database
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void catalogUpdateSecretTest() throws ApiException {
        String databaseName = null;
        String secretName = null;
        String apiVersion = null;
        DataLakeAnalyticsCatalogSecretCreateOrUpdateParameters parameters = null;
        USqlSecret response = api.catalogUpdateSecret(databaseName, secretName, apiVersion, parameters);
        // TODO: test validations
    }

}
