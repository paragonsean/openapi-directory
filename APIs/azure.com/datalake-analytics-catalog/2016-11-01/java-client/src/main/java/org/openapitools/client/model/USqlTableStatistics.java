/*
 * DataLakeAnalyticsCatalogManagementClient
 * Creates an Azure Data Lake Analytics catalog client.
 *
 * The version of the OpenAPI document: 2016-11-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A Data Lake Analytics catalog U-SQL table statistics item.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:54:55.754163-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class USqlTableStatistics {
  public static final String SERIALIZED_NAME_COL_NAMES = "colNames";
  @SerializedName(SERIALIZED_NAME_COL_NAMES)
  private List<String> colNames = new ArrayList<>();

  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private OffsetDateTime createTime;

  public static final String SERIALIZED_NAME_DATABASE_NAME = "databaseName";
  @SerializedName(SERIALIZED_NAME_DATABASE_NAME)
  private String databaseName;

  public static final String SERIALIZED_NAME_FILTER_DEFINITION = "filterDefinition";
  @SerializedName(SERIALIZED_NAME_FILTER_DEFINITION)
  private String filterDefinition;

  public static final String SERIALIZED_NAME_HAS_FILTER = "hasFilter";
  @SerializedName(SERIALIZED_NAME_HAS_FILTER)
  private Boolean hasFilter;

  public static final String SERIALIZED_NAME_IS_AUTO_CREATED = "isAutoCreated";
  @SerializedName(SERIALIZED_NAME_IS_AUTO_CREATED)
  private Boolean isAutoCreated;

  public static final String SERIALIZED_NAME_IS_USER_CREATED = "isUserCreated";
  @SerializedName(SERIALIZED_NAME_IS_USER_CREATED)
  private Boolean isUserCreated;

  public static final String SERIALIZED_NAME_SCHEMA_NAME = "schemaName";
  @SerializedName(SERIALIZED_NAME_SCHEMA_NAME)
  private String schemaName;

  public static final String SERIALIZED_NAME_STAT_DATA_PATH = "statDataPath";
  @SerializedName(SERIALIZED_NAME_STAT_DATA_PATH)
  private String statDataPath;

  public static final String SERIALIZED_NAME_STATISTICS_NAME = "statisticsName";
  @SerializedName(SERIALIZED_NAME_STATISTICS_NAME)
  private String statisticsName;

  public static final String SERIALIZED_NAME_TABLE_NAME = "tableName";
  @SerializedName(SERIALIZED_NAME_TABLE_NAME)
  private String tableName;

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private OffsetDateTime updateTime;

  public static final String SERIALIZED_NAME_USER_STAT_NAME = "userStatName";
  @SerializedName(SERIALIZED_NAME_USER_STAT_NAME)
  private String userStatName;

  public static final String SERIALIZED_NAME_COMPUTE_ACCOUNT_NAME = "computeAccountName";
  @SerializedName(SERIALIZED_NAME_COMPUTE_ACCOUNT_NAME)
  private String computeAccountName;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private UUID version;

  public USqlTableStatistics() {
  }

  public USqlTableStatistics colNames(List<String> colNames) {
    this.colNames = colNames;
    return this;
  }

  public USqlTableStatistics addColNamesItem(String colNamesItem) {
    if (this.colNames == null) {
      this.colNames = new ArrayList<>();
    }
    this.colNames.add(colNamesItem);
    return this;
  }

  /**
   * the list of column names associated with these statistics.
   * @return colNames
   */
  @javax.annotation.Nullable
  public List<String> getColNames() {
    return colNames;
  }

  public void setColNames(List<String> colNames) {
    this.colNames = colNames;
  }


  public USqlTableStatistics createTime(OffsetDateTime createTime) {
    this.createTime = createTime;
    return this;
  }

  /**
   * the creation time of the statistics.
   * @return createTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreateTime() {
    return createTime;
  }

  public void setCreateTime(OffsetDateTime createTime) {
    this.createTime = createTime;
  }


  public USqlTableStatistics databaseName(String databaseName) {
    this.databaseName = databaseName;
    return this;
  }

  /**
   * the name of the database.
   * @return databaseName
   */
  @javax.annotation.Nullable
  public String getDatabaseName() {
    return databaseName;
  }

  public void setDatabaseName(String databaseName) {
    this.databaseName = databaseName;
  }


  public USqlTableStatistics filterDefinition(String filterDefinition) {
    this.filterDefinition = filterDefinition;
    return this;
  }

  /**
   * the filter definition for the statistics.
   * @return filterDefinition
   */
  @javax.annotation.Nullable
  public String getFilterDefinition() {
    return filterDefinition;
  }

  public void setFilterDefinition(String filterDefinition) {
    this.filterDefinition = filterDefinition;
  }


  public USqlTableStatistics hasFilter(Boolean hasFilter) {
    this.hasFilter = hasFilter;
    return this;
  }

  /**
   * the switch indicating if these statistics have a filter.
   * @return hasFilter
   */
  @javax.annotation.Nullable
  public Boolean getHasFilter() {
    return hasFilter;
  }

  public void setHasFilter(Boolean hasFilter) {
    this.hasFilter = hasFilter;
  }


  public USqlTableStatistics isAutoCreated(Boolean isAutoCreated) {
    this.isAutoCreated = isAutoCreated;
    return this;
  }

  /**
   * the switch indicating if these statistics are automatically created.
   * @return isAutoCreated
   */
  @javax.annotation.Nullable
  public Boolean getIsAutoCreated() {
    return isAutoCreated;
  }

  public void setIsAutoCreated(Boolean isAutoCreated) {
    this.isAutoCreated = isAutoCreated;
  }


  public USqlTableStatistics isUserCreated(Boolean isUserCreated) {
    this.isUserCreated = isUserCreated;
    return this;
  }

  /**
   * the switch indicating if these statistics are user created.
   * @return isUserCreated
   */
  @javax.annotation.Nullable
  public Boolean getIsUserCreated() {
    return isUserCreated;
  }

  public void setIsUserCreated(Boolean isUserCreated) {
    this.isUserCreated = isUserCreated;
  }


  public USqlTableStatistics schemaName(String schemaName) {
    this.schemaName = schemaName;
    return this;
  }

  /**
   * the name of the schema associated with this table and database.
   * @return schemaName
   */
  @javax.annotation.Nullable
  public String getSchemaName() {
    return schemaName;
  }

  public void setSchemaName(String schemaName) {
    this.schemaName = schemaName;
  }


  public USqlTableStatistics statDataPath(String statDataPath) {
    this.statDataPath = statDataPath;
    return this;
  }

  /**
   * the path to the statistics data.
   * @return statDataPath
   */
  @javax.annotation.Nullable
  public String getStatDataPath() {
    return statDataPath;
  }

  public void setStatDataPath(String statDataPath) {
    this.statDataPath = statDataPath;
  }


  public USqlTableStatistics statisticsName(String statisticsName) {
    this.statisticsName = statisticsName;
    return this;
  }

  /**
   * the name of the table statistics.
   * @return statisticsName
   */
  @javax.annotation.Nullable
  public String getStatisticsName() {
    return statisticsName;
  }

  public void setStatisticsName(String statisticsName) {
    this.statisticsName = statisticsName;
  }


  public USqlTableStatistics tableName(String tableName) {
    this.tableName = tableName;
    return this;
  }

  /**
   * the name of the table.
   * @return tableName
   */
  @javax.annotation.Nullable
  public String getTableName() {
    return tableName;
  }

  public void setTableName(String tableName) {
    this.tableName = tableName;
  }


  public USqlTableStatistics updateTime(OffsetDateTime updateTime) {
    this.updateTime = updateTime;
    return this;
  }

  /**
   * the last time the statistics were updated.
   * @return updateTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdateTime() {
    return updateTime;
  }

  public void setUpdateTime(OffsetDateTime updateTime) {
    this.updateTime = updateTime;
  }


  public USqlTableStatistics userStatName(String userStatName) {
    this.userStatName = userStatName;
    return this;
  }

  /**
   * the name of the user statistics.
   * @return userStatName
   */
  @javax.annotation.Nullable
  public String getUserStatName() {
    return userStatName;
  }

  public void setUserStatName(String userStatName) {
    this.userStatName = userStatName;
  }


  public USqlTableStatistics computeAccountName(String computeAccountName) {
    this.computeAccountName = computeAccountName;
    return this;
  }

  /**
   * the name of the Data Lake Analytics account.
   * @return computeAccountName
   */
  @javax.annotation.Nullable
  public String getComputeAccountName() {
    return computeAccountName;
  }

  public void setComputeAccountName(String computeAccountName) {
    this.computeAccountName = computeAccountName;
  }


  public USqlTableStatistics version(UUID version) {
    this.version = version;
    return this;
  }

  /**
   * the version of the catalog item.
   * @return version
   */
  @javax.annotation.Nullable
  public UUID getVersion() {
    return version;
  }

  public void setVersion(UUID version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    USqlTableStatistics usqlTableStatistics = (USqlTableStatistics) o;
    return Objects.equals(this.colNames, usqlTableStatistics.colNames) &&
        Objects.equals(this.createTime, usqlTableStatistics.createTime) &&
        Objects.equals(this.databaseName, usqlTableStatistics.databaseName) &&
        Objects.equals(this.filterDefinition, usqlTableStatistics.filterDefinition) &&
        Objects.equals(this.hasFilter, usqlTableStatistics.hasFilter) &&
        Objects.equals(this.isAutoCreated, usqlTableStatistics.isAutoCreated) &&
        Objects.equals(this.isUserCreated, usqlTableStatistics.isUserCreated) &&
        Objects.equals(this.schemaName, usqlTableStatistics.schemaName) &&
        Objects.equals(this.statDataPath, usqlTableStatistics.statDataPath) &&
        Objects.equals(this.statisticsName, usqlTableStatistics.statisticsName) &&
        Objects.equals(this.tableName, usqlTableStatistics.tableName) &&
        Objects.equals(this.updateTime, usqlTableStatistics.updateTime) &&
        Objects.equals(this.userStatName, usqlTableStatistics.userStatName) &&
        Objects.equals(this.computeAccountName, usqlTableStatistics.computeAccountName) &&
        Objects.equals(this.version, usqlTableStatistics.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(colNames, createTime, databaseName, filterDefinition, hasFilter, isAutoCreated, isUserCreated, schemaName, statDataPath, statisticsName, tableName, updateTime, userStatName, computeAccountName, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class USqlTableStatistics {\n");
    sb.append("    colNames: ").append(toIndentedString(colNames)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    databaseName: ").append(toIndentedString(databaseName)).append("\n");
    sb.append("    filterDefinition: ").append(toIndentedString(filterDefinition)).append("\n");
    sb.append("    hasFilter: ").append(toIndentedString(hasFilter)).append("\n");
    sb.append("    isAutoCreated: ").append(toIndentedString(isAutoCreated)).append("\n");
    sb.append("    isUserCreated: ").append(toIndentedString(isUserCreated)).append("\n");
    sb.append("    schemaName: ").append(toIndentedString(schemaName)).append("\n");
    sb.append("    statDataPath: ").append(toIndentedString(statDataPath)).append("\n");
    sb.append("    statisticsName: ").append(toIndentedString(statisticsName)).append("\n");
    sb.append("    tableName: ").append(toIndentedString(tableName)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("    userStatName: ").append(toIndentedString(userStatName)).append("\n");
    sb.append("    computeAccountName: ").append(toIndentedString(computeAccountName)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("computeAccountName");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to USqlTableStatistics
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!USqlTableStatistics.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in USqlTableStatistics is not found in the empty JSON string", USqlTableStatistics.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!USqlTableStatistics.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `USqlTableStatistics` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("colNames") != null && !jsonObj.get("colNames").isJsonNull() && !jsonObj.get("colNames").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `colNames` to be an array in the JSON string but got `%s`", jsonObj.get("colNames").toString()));
      }
      if ((jsonObj.get("databaseName") != null && !jsonObj.get("databaseName").isJsonNull()) && !jsonObj.get("databaseName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `databaseName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("databaseName").toString()));
      }
      if ((jsonObj.get("filterDefinition") != null && !jsonObj.get("filterDefinition").isJsonNull()) && !jsonObj.get("filterDefinition").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `filterDefinition` to be a primitive type in the JSON string but got `%s`", jsonObj.get("filterDefinition").toString()));
      }
      if ((jsonObj.get("schemaName") != null && !jsonObj.get("schemaName").isJsonNull()) && !jsonObj.get("schemaName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `schemaName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("schemaName").toString()));
      }
      if ((jsonObj.get("statDataPath") != null && !jsonObj.get("statDataPath").isJsonNull()) && !jsonObj.get("statDataPath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `statDataPath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("statDataPath").toString()));
      }
      if ((jsonObj.get("statisticsName") != null && !jsonObj.get("statisticsName").isJsonNull()) && !jsonObj.get("statisticsName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `statisticsName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("statisticsName").toString()));
      }
      if ((jsonObj.get("tableName") != null && !jsonObj.get("tableName").isJsonNull()) && !jsonObj.get("tableName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tableName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tableName").toString()));
      }
      if ((jsonObj.get("userStatName") != null && !jsonObj.get("userStatName").isJsonNull()) && !jsonObj.get("userStatName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userStatName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userStatName").toString()));
      }
      if ((jsonObj.get("computeAccountName") != null && !jsonObj.get("computeAccountName").isJsonNull()) && !jsonObj.get("computeAccountName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `computeAccountName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("computeAccountName").toString()));
      }
      if ((jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) && !jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!USqlTableStatistics.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'USqlTableStatistics' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<USqlTableStatistics> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(USqlTableStatistics.class));

       return (TypeAdapter<T>) new TypeAdapter<USqlTableStatistics>() {
           @Override
           public void write(JsonWriter out, USqlTableStatistics value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public USqlTableStatistics read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of USqlTableStatistics given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of USqlTableStatistics
   * @throws IOException if the JSON string is invalid with respect to USqlTableStatistics
   */
  public static USqlTableStatistics fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, USqlTableStatistics.class);
  }

  /**
   * Convert an instance of USqlTableStatistics to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

