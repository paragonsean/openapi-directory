/*
 * DataLakeAnalyticsCatalogManagementClient
 * Creates an Azure Data Lake Analytics catalog client.
 *
 * The version of the OpenAPI document: 2016-11-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.TypeFieldInfo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A Data Lake Analytics catalog U-SQL table type item.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:54:55.754163-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class USqlTableType {
  public static final String SERIALIZED_NAME_COLUMNS = "columns";
  @SerializedName(SERIALIZED_NAME_COLUMNS)
  private List<TypeFieldInfo> columns = new ArrayList<>();

  public static final String SERIALIZED_NAME_C_SHARP_NAME = "cSharpName";
  @SerializedName(SERIALIZED_NAME_C_SHARP_NAME)
  private String cSharpName;

  public static final String SERIALIZED_NAME_DATABASE_NAME = "databaseName";
  @SerializedName(SERIALIZED_NAME_DATABASE_NAME)
  private String databaseName;

  public static final String SERIALIZED_NAME_FULL_C_SHARP_NAME = "fullCSharpName";
  @SerializedName(SERIALIZED_NAME_FULL_C_SHARP_NAME)
  private String fullCSharpName;

  public static final String SERIALIZED_NAME_IS_ASSEMBLY_TYPE = "isAssemblyType";
  @SerializedName(SERIALIZED_NAME_IS_ASSEMBLY_TYPE)
  private Boolean isAssemblyType;

  public static final String SERIALIZED_NAME_IS_COMPLEX_TYPE = "isComplexType";
  @SerializedName(SERIALIZED_NAME_IS_COMPLEX_TYPE)
  private Boolean isComplexType;

  public static final String SERIALIZED_NAME_IS_NULLABLE = "isNullable";
  @SerializedName(SERIALIZED_NAME_IS_NULLABLE)
  private Boolean isNullable;

  public static final String SERIALIZED_NAME_IS_TABLE_TYPE = "isTableType";
  @SerializedName(SERIALIZED_NAME_IS_TABLE_TYPE)
  private Boolean isTableType;

  public static final String SERIALIZED_NAME_IS_USER_DEFINED = "isUserDefined";
  @SerializedName(SERIALIZED_NAME_IS_USER_DEFINED)
  private Boolean isUserDefined;

  public static final String SERIALIZED_NAME_PRINCIPAL_ID = "principalId";
  @SerializedName(SERIALIZED_NAME_PRINCIPAL_ID)
  private Integer principalId;

  public static final String SERIALIZED_NAME_SCHEMA_ID = "schemaId";
  @SerializedName(SERIALIZED_NAME_SCHEMA_ID)
  private Integer schemaId;

  public static final String SERIALIZED_NAME_SCHEMA_NAME = "schemaName";
  @SerializedName(SERIALIZED_NAME_SCHEMA_NAME)
  private String schemaName;

  public static final String SERIALIZED_NAME_SYSTEM_TYPE_ID = "systemTypeId";
  @SerializedName(SERIALIZED_NAME_SYSTEM_TYPE_ID)
  private Integer systemTypeId;

  public static final String SERIALIZED_NAME_TYPE_FAMILY = "typeFamily";
  @SerializedName(SERIALIZED_NAME_TYPE_FAMILY)
  private String typeFamily;

  public static final String SERIALIZED_NAME_TYPE_NAME = "typeName";
  @SerializedName(SERIALIZED_NAME_TYPE_NAME)
  private String typeName;

  public static final String SERIALIZED_NAME_USER_TYPE_ID = "userTypeId";
  @SerializedName(SERIALIZED_NAME_USER_TYPE_ID)
  private Integer userTypeId;

  public static final String SERIALIZED_NAME_COMPUTE_ACCOUNT_NAME = "computeAccountName";
  @SerializedName(SERIALIZED_NAME_COMPUTE_ACCOUNT_NAME)
  private String computeAccountName;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private UUID version;

  public USqlTableType() {
  }

  public USqlTableType(
     List<TypeFieldInfo> columns
  ) {
    this();
    this.columns = columns;
  }

  /**
   * the type field information associated with this table type.
   * @return columns
   */
  @javax.annotation.Nullable
  public List<TypeFieldInfo> getColumns() {
    return columns;
  }



  public USqlTableType cSharpName(String cSharpName) {
    this.cSharpName = cSharpName;
    return this;
  }

  /**
   * the C# name for this type.
   * @return cSharpName
   */
  @javax.annotation.Nullable
  public String getcSharpName() {
    return cSharpName;
  }

  public void setcSharpName(String cSharpName) {
    this.cSharpName = cSharpName;
  }


  public USqlTableType databaseName(String databaseName) {
    this.databaseName = databaseName;
    return this;
  }

  /**
   * the name of the database.
   * @return databaseName
   */
  @javax.annotation.Nullable
  public String getDatabaseName() {
    return databaseName;
  }

  public void setDatabaseName(String databaseName) {
    this.databaseName = databaseName;
  }


  public USqlTableType fullCSharpName(String fullCSharpName) {
    this.fullCSharpName = fullCSharpName;
    return this;
  }

  /**
   * the fully qualified C# name for this type.
   * @return fullCSharpName
   */
  @javax.annotation.Nullable
  public String getFullCSharpName() {
    return fullCSharpName;
  }

  public void setFullCSharpName(String fullCSharpName) {
    this.fullCSharpName = fullCSharpName;
  }


  public USqlTableType isAssemblyType(Boolean isAssemblyType) {
    this.isAssemblyType = isAssemblyType;
    return this;
  }

  /**
   * The switch indicating if this type is an assembly type.
   * @return isAssemblyType
   */
  @javax.annotation.Nullable
  public Boolean getIsAssemblyType() {
    return isAssemblyType;
  }

  public void setIsAssemblyType(Boolean isAssemblyType) {
    this.isAssemblyType = isAssemblyType;
  }


  public USqlTableType isComplexType(Boolean isComplexType) {
    this.isComplexType = isComplexType;
    return this;
  }

  /**
   * The switch indicating if this type is a complex type.
   * @return isComplexType
   */
  @javax.annotation.Nullable
  public Boolean getIsComplexType() {
    return isComplexType;
  }

  public void setIsComplexType(Boolean isComplexType) {
    this.isComplexType = isComplexType;
  }


  public USqlTableType isNullable(Boolean isNullable) {
    this.isNullable = isNullable;
    return this;
  }

  /**
   * The switch indicating if this type is nullable.
   * @return isNullable
   */
  @javax.annotation.Nullable
  public Boolean getIsNullable() {
    return isNullable;
  }

  public void setIsNullable(Boolean isNullable) {
    this.isNullable = isNullable;
  }


  public USqlTableType isTableType(Boolean isTableType) {
    this.isTableType = isTableType;
    return this;
  }

  /**
   * The switch indicating if this type is a table type.
   * @return isTableType
   */
  @javax.annotation.Nullable
  public Boolean getIsTableType() {
    return isTableType;
  }

  public void setIsTableType(Boolean isTableType) {
    this.isTableType = isTableType;
  }


  public USqlTableType isUserDefined(Boolean isUserDefined) {
    this.isUserDefined = isUserDefined;
    return this;
  }

  /**
   * The switch indicating if this type is user defined.
   * @return isUserDefined
   */
  @javax.annotation.Nullable
  public Boolean getIsUserDefined() {
    return isUserDefined;
  }

  public void setIsUserDefined(Boolean isUserDefined) {
    this.isUserDefined = isUserDefined;
  }


  public USqlTableType principalId(Integer principalId) {
    this.principalId = principalId;
    return this;
  }

  /**
   * the principal ID for this type.
   * @return principalId
   */
  @javax.annotation.Nullable
  public Integer getPrincipalId() {
    return principalId;
  }

  public void setPrincipalId(Integer principalId) {
    this.principalId = principalId;
  }


  public USqlTableType schemaId(Integer schemaId) {
    this.schemaId = schemaId;
    return this;
  }

  /**
   * the schema ID for this type.
   * @return schemaId
   */
  @javax.annotation.Nullable
  public Integer getSchemaId() {
    return schemaId;
  }

  public void setSchemaId(Integer schemaId) {
    this.schemaId = schemaId;
  }


  public USqlTableType schemaName(String schemaName) {
    this.schemaName = schemaName;
    return this;
  }

  /**
   * the name of the schema associated with this table and database.
   * @return schemaName
   */
  @javax.annotation.Nullable
  public String getSchemaName() {
    return schemaName;
  }

  public void setSchemaName(String schemaName) {
    this.schemaName = schemaName;
  }


  public USqlTableType systemTypeId(Integer systemTypeId) {
    this.systemTypeId = systemTypeId;
    return this;
  }

  /**
   * the system type ID for this type.
   * @return systemTypeId
   */
  @javax.annotation.Nullable
  public Integer getSystemTypeId() {
    return systemTypeId;
  }

  public void setSystemTypeId(Integer systemTypeId) {
    this.systemTypeId = systemTypeId;
  }


  public USqlTableType typeFamily(String typeFamily) {
    this.typeFamily = typeFamily;
    return this;
  }

  /**
   * the type family for this type.
   * @return typeFamily
   */
  @javax.annotation.Nullable
  public String getTypeFamily() {
    return typeFamily;
  }

  public void setTypeFamily(String typeFamily) {
    this.typeFamily = typeFamily;
  }


  public USqlTableType typeName(String typeName) {
    this.typeName = typeName;
    return this;
  }

  /**
   * the name of type for this type.
   * @return typeName
   */
  @javax.annotation.Nullable
  public String getTypeName() {
    return typeName;
  }

  public void setTypeName(String typeName) {
    this.typeName = typeName;
  }


  public USqlTableType userTypeId(Integer userTypeId) {
    this.userTypeId = userTypeId;
    return this;
  }

  /**
   * the user type ID for this type.
   * @return userTypeId
   */
  @javax.annotation.Nullable
  public Integer getUserTypeId() {
    return userTypeId;
  }

  public void setUserTypeId(Integer userTypeId) {
    this.userTypeId = userTypeId;
  }


  public USqlTableType computeAccountName(String computeAccountName) {
    this.computeAccountName = computeAccountName;
    return this;
  }

  /**
   * the name of the Data Lake Analytics account.
   * @return computeAccountName
   */
  @javax.annotation.Nullable
  public String getComputeAccountName() {
    return computeAccountName;
  }

  public void setComputeAccountName(String computeAccountName) {
    this.computeAccountName = computeAccountName;
  }


  public USqlTableType version(UUID version) {
    this.version = version;
    return this;
  }

  /**
   * the version of the catalog item.
   * @return version
   */
  @javax.annotation.Nullable
  public UUID getVersion() {
    return version;
  }

  public void setVersion(UUID version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    USqlTableType usqlTableType = (USqlTableType) o;
    return Objects.equals(this.columns, usqlTableType.columns) &&
        Objects.equals(this.cSharpName, usqlTableType.cSharpName) &&
        Objects.equals(this.databaseName, usqlTableType.databaseName) &&
        Objects.equals(this.fullCSharpName, usqlTableType.fullCSharpName) &&
        Objects.equals(this.isAssemblyType, usqlTableType.isAssemblyType) &&
        Objects.equals(this.isComplexType, usqlTableType.isComplexType) &&
        Objects.equals(this.isNullable, usqlTableType.isNullable) &&
        Objects.equals(this.isTableType, usqlTableType.isTableType) &&
        Objects.equals(this.isUserDefined, usqlTableType.isUserDefined) &&
        Objects.equals(this.principalId, usqlTableType.principalId) &&
        Objects.equals(this.schemaId, usqlTableType.schemaId) &&
        Objects.equals(this.schemaName, usqlTableType.schemaName) &&
        Objects.equals(this.systemTypeId, usqlTableType.systemTypeId) &&
        Objects.equals(this.typeFamily, usqlTableType.typeFamily) &&
        Objects.equals(this.typeName, usqlTableType.typeName) &&
        Objects.equals(this.userTypeId, usqlTableType.userTypeId) &&
        Objects.equals(this.computeAccountName, usqlTableType.computeAccountName) &&
        Objects.equals(this.version, usqlTableType.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(columns, cSharpName, databaseName, fullCSharpName, isAssemblyType, isComplexType, isNullable, isTableType, isUserDefined, principalId, schemaId, schemaName, systemTypeId, typeFamily, typeName, userTypeId, computeAccountName, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class USqlTableType {\n");
    sb.append("    columns: ").append(toIndentedString(columns)).append("\n");
    sb.append("    cSharpName: ").append(toIndentedString(cSharpName)).append("\n");
    sb.append("    databaseName: ").append(toIndentedString(databaseName)).append("\n");
    sb.append("    fullCSharpName: ").append(toIndentedString(fullCSharpName)).append("\n");
    sb.append("    isAssemblyType: ").append(toIndentedString(isAssemblyType)).append("\n");
    sb.append("    isComplexType: ").append(toIndentedString(isComplexType)).append("\n");
    sb.append("    isNullable: ").append(toIndentedString(isNullable)).append("\n");
    sb.append("    isTableType: ").append(toIndentedString(isTableType)).append("\n");
    sb.append("    isUserDefined: ").append(toIndentedString(isUserDefined)).append("\n");
    sb.append("    principalId: ").append(toIndentedString(principalId)).append("\n");
    sb.append("    schemaId: ").append(toIndentedString(schemaId)).append("\n");
    sb.append("    schemaName: ").append(toIndentedString(schemaName)).append("\n");
    sb.append("    systemTypeId: ").append(toIndentedString(systemTypeId)).append("\n");
    sb.append("    typeFamily: ").append(toIndentedString(typeFamily)).append("\n");
    sb.append("    typeName: ").append(toIndentedString(typeName)).append("\n");
    sb.append("    userTypeId: ").append(toIndentedString(userTypeId)).append("\n");
    sb.append("    computeAccountName: ").append(toIndentedString(computeAccountName)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cSharpName");
    openapiFields.add("databaseName");
    openapiFields.add("fullCSharpName");
    openapiFields.add("isAssemblyType");
    openapiFields.add("isComplexType");
    openapiFields.add("isNullable");
    openapiFields.add("isTableType");
    openapiFields.add("isUserDefined");
    openapiFields.add("principalId");
    openapiFields.add("schemaId");
    openapiFields.add("schemaName");
    openapiFields.add("systemTypeId");
    openapiFields.add("typeFamily");
    openapiFields.add("typeName");
    openapiFields.add("userTypeId");
    openapiFields.add("computeAccountName");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to USqlTableType
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!USqlTableType.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in USqlTableType is not found in the empty JSON string", USqlTableType.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!USqlTableType.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `USqlTableType` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("columns") != null && !jsonObj.get("columns").isJsonNull()) {
        JsonArray jsonArraycolumns = jsonObj.getAsJsonArray("columns");
        if (jsonArraycolumns != null) {
          // ensure the json data is an array
          if (!jsonObj.get("columns").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `columns` to be an array in the JSON string but got `%s`", jsonObj.get("columns").toString()));
          }

          // validate the optional field `columns` (array)
          for (int i = 0; i < jsonArraycolumns.size(); i++) {
            TypeFieldInfo.validateJsonElement(jsonArraycolumns.get(i));
          };
        }
      }
      if ((jsonObj.get("cSharpName") != null && !jsonObj.get("cSharpName").isJsonNull()) && !jsonObj.get("cSharpName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cSharpName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cSharpName").toString()));
      }
      if ((jsonObj.get("databaseName") != null && !jsonObj.get("databaseName").isJsonNull()) && !jsonObj.get("databaseName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `databaseName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("databaseName").toString()));
      }
      if ((jsonObj.get("fullCSharpName") != null && !jsonObj.get("fullCSharpName").isJsonNull()) && !jsonObj.get("fullCSharpName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fullCSharpName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fullCSharpName").toString()));
      }
      if ((jsonObj.get("schemaName") != null && !jsonObj.get("schemaName").isJsonNull()) && !jsonObj.get("schemaName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `schemaName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("schemaName").toString()));
      }
      if ((jsonObj.get("typeFamily") != null && !jsonObj.get("typeFamily").isJsonNull()) && !jsonObj.get("typeFamily").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `typeFamily` to be a primitive type in the JSON string but got `%s`", jsonObj.get("typeFamily").toString()));
      }
      if ((jsonObj.get("typeName") != null && !jsonObj.get("typeName").isJsonNull()) && !jsonObj.get("typeName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `typeName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("typeName").toString()));
      }
      if ((jsonObj.get("computeAccountName") != null && !jsonObj.get("computeAccountName").isJsonNull()) && !jsonObj.get("computeAccountName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `computeAccountName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("computeAccountName").toString()));
      }
      if ((jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) && !jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!USqlTableType.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'USqlTableType' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<USqlTableType> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(USqlTableType.class));

       return (TypeAdapter<T>) new TypeAdapter<USqlTableType>() {
           @Override
           public void write(JsonWriter out, USqlTableType value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public USqlTableType read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of USqlTableType given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of USqlTableType
   * @throws IOException if the JSON string is invalid with respect to USqlTableType
   */
  public static USqlTableType fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, USqlTableType.class);
  }

  /**
   * Convert an instance of USqlTableType to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

