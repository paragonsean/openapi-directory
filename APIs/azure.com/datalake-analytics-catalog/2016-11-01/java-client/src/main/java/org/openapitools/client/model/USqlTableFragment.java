/*
 * DataLakeAnalyticsCatalogManagementClient
 * Creates an Azure Data Lake Analytics catalog client.
 *
 * The version of the OpenAPI document: 2016-11-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A Data Lake Analytics catalog U-SQL table fragment item.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:54:55.754163-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class USqlTableFragment {
  public static final String SERIALIZED_NAME_CREATE_DATE = "createDate";
  @SerializedName(SERIALIZED_NAME_CREATE_DATE)
  private OffsetDateTime createDate;

  public static final String SERIALIZED_NAME_FRAGMENT_ID = "fragmentId";
  @SerializedName(SERIALIZED_NAME_FRAGMENT_ID)
  private UUID fragmentId;

  public static final String SERIALIZED_NAME_INDEX_ID = "indexId";
  @SerializedName(SERIALIZED_NAME_INDEX_ID)
  private Integer indexId;

  public static final String SERIALIZED_NAME_PARENT_ID = "parentId";
  @SerializedName(SERIALIZED_NAME_PARENT_ID)
  private UUID parentId;

  public static final String SERIALIZED_NAME_ROW_COUNT = "rowCount";
  @SerializedName(SERIALIZED_NAME_ROW_COUNT)
  private Long rowCount;

  public static final String SERIALIZED_NAME_SIZE = "size";
  @SerializedName(SERIALIZED_NAME_SIZE)
  private Long size;

  public static final String SERIALIZED_NAME_STREAM_PATH = "streamPath";
  @SerializedName(SERIALIZED_NAME_STREAM_PATH)
  private String streamPath;

  public USqlTableFragment() {
  }

  public USqlTableFragment createDate(OffsetDateTime createDate) {
    this.createDate = createDate;
    return this;
  }

  /**
   * the creation time of the table fragment.
   * @return createDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreateDate() {
    return createDate;
  }

  public void setCreateDate(OffsetDateTime createDate) {
    this.createDate = createDate;
  }


  public USqlTableFragment fragmentId(UUID fragmentId) {
    this.fragmentId = fragmentId;
    return this;
  }

  /**
   * the version of the catalog item.
   * @return fragmentId
   */
  @javax.annotation.Nullable
  public UUID getFragmentId() {
    return fragmentId;
  }

  public void setFragmentId(UUID fragmentId) {
    this.fragmentId = fragmentId;
  }


  public USqlTableFragment indexId(Integer indexId) {
    this.indexId = indexId;
    return this;
  }

  /**
   * the ordinal of the index which contains the table fragment.
   * @return indexId
   */
  @javax.annotation.Nullable
  public Integer getIndexId() {
    return indexId;
  }

  public void setIndexId(Integer indexId) {
    this.indexId = indexId;
  }


  public USqlTableFragment parentId(UUID parentId) {
    this.parentId = parentId;
    return this;
  }

  /**
   * the parent object Id of the table fragment. The parent could be a table or table partition.
   * @return parentId
   */
  @javax.annotation.Nullable
  public UUID getParentId() {
    return parentId;
  }

  public void setParentId(UUID parentId) {
    this.parentId = parentId;
  }


  public USqlTableFragment rowCount(Long rowCount) {
    this.rowCount = rowCount;
    return this;
  }

  /**
   * the number of rows in the table fragment.
   * @return rowCount
   */
  @javax.annotation.Nullable
  public Long getRowCount() {
    return rowCount;
  }

  public void setRowCount(Long rowCount) {
    this.rowCount = rowCount;
  }


  public USqlTableFragment size(Long size) {
    this.size = size;
    return this;
  }

  /**
   * the data size of the table fragment in bytes.
   * @return size
   */
  @javax.annotation.Nullable
  public Long getSize() {
    return size;
  }

  public void setSize(Long size) {
    this.size = size;
  }


  public USqlTableFragment streamPath(String streamPath) {
    this.streamPath = streamPath;
    return this;
  }

  /**
   * the relative path for the table fragment location.
   * @return streamPath
   */
  @javax.annotation.Nullable
  public String getStreamPath() {
    return streamPath;
  }

  public void setStreamPath(String streamPath) {
    this.streamPath = streamPath;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    USqlTableFragment usqlTableFragment = (USqlTableFragment) o;
    return Objects.equals(this.createDate, usqlTableFragment.createDate) &&
        Objects.equals(this.fragmentId, usqlTableFragment.fragmentId) &&
        Objects.equals(this.indexId, usqlTableFragment.indexId) &&
        Objects.equals(this.parentId, usqlTableFragment.parentId) &&
        Objects.equals(this.rowCount, usqlTableFragment.rowCount) &&
        Objects.equals(this.size, usqlTableFragment.size) &&
        Objects.equals(this.streamPath, usqlTableFragment.streamPath);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createDate, fragmentId, indexId, parentId, rowCount, size, streamPath);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class USqlTableFragment {\n");
    sb.append("    createDate: ").append(toIndentedString(createDate)).append("\n");
    sb.append("    fragmentId: ").append(toIndentedString(fragmentId)).append("\n");
    sb.append("    indexId: ").append(toIndentedString(indexId)).append("\n");
    sb.append("    parentId: ").append(toIndentedString(parentId)).append("\n");
    sb.append("    rowCount: ").append(toIndentedString(rowCount)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    streamPath: ").append(toIndentedString(streamPath)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("createDate");
    openapiFields.add("fragmentId");
    openapiFields.add("indexId");
    openapiFields.add("parentId");
    openapiFields.add("rowCount");
    openapiFields.add("size");
    openapiFields.add("streamPath");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to USqlTableFragment
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!USqlTableFragment.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in USqlTableFragment is not found in the empty JSON string", USqlTableFragment.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!USqlTableFragment.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `USqlTableFragment` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("fragmentId") != null && !jsonObj.get("fragmentId").isJsonNull()) && !jsonObj.get("fragmentId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fragmentId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fragmentId").toString()));
      }
      if ((jsonObj.get("parentId") != null && !jsonObj.get("parentId").isJsonNull()) && !jsonObj.get("parentId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parentId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parentId").toString()));
      }
      if ((jsonObj.get("streamPath") != null && !jsonObj.get("streamPath").isJsonNull()) && !jsonObj.get("streamPath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `streamPath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("streamPath").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!USqlTableFragment.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'USqlTableFragment' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<USqlTableFragment> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(USqlTableFragment.class));

       return (TypeAdapter<T>) new TypeAdapter<USqlTableFragment>() {
           @Override
           public void write(JsonWriter out, USqlTableFragment value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public USqlTableFragment read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of USqlTableFragment given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of USqlTableFragment
   * @throws IOException if the JSON string is invalid with respect to USqlTableFragment
   */
  public static USqlTableFragment fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, USqlTableFragment.class);
  }

  /**
   * Convert an instance of USqlTableFragment to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

