/*
 * DataLakeAnalyticsCatalogManagementClient
 * Creates an Azure Data Lake Analytics catalog client.
 *
 * The version of the OpenAPI document: 2016-11-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.USqlTableColumn;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A Data Lake Analytics catalog table or partition preview rows item.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:54:55.754163-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class USqlTablePreview {
  public static final String SERIALIZED_NAME_ROWS = "rows";
  @SerializedName(SERIALIZED_NAME_ROWS)
  private List<List<String>> rows = new ArrayList<>();

  public static final String SERIALIZED_NAME_SCHEMA = "schema";
  @SerializedName(SERIALIZED_NAME_SCHEMA)
  private List<USqlTableColumn> schema = new ArrayList<>();

  public static final String SERIALIZED_NAME_TOTAL_COLUMN_COUNT = "totalColumnCount";
  @SerializedName(SERIALIZED_NAME_TOTAL_COLUMN_COUNT)
  private Long totalColumnCount;

  public static final String SERIALIZED_NAME_TOTAL_ROW_COUNT = "totalRowCount";
  @SerializedName(SERIALIZED_NAME_TOTAL_ROW_COUNT)
  private Long totalRowCount;

  public static final String SERIALIZED_NAME_TRUNCATED = "truncated";
  @SerializedName(SERIALIZED_NAME_TRUNCATED)
  private Boolean truncated;

  public USqlTablePreview() {
  }

  public USqlTablePreview rows(List<List<String>> rows) {
    this.rows = rows;
    return this;
  }

  public USqlTablePreview addRowsItem(List<String> rowsItem) {
    if (this.rows == null) {
      this.rows = new ArrayList<>();
    }
    this.rows.add(rowsItem);
    return this;
  }

  /**
   * the rows of the table or partition preview, where each row is an array of string representations the row&#39;s values. Note: Byte arrays will appear as base-64 encoded values, SqlMap and SqlArray objects will appear as escaped JSON objects, and DateTime objects will appear as ISO formatted UTC date-times.
   * @return rows
   */
  @javax.annotation.Nullable
  public List<List<String>> getRows() {
    return rows;
  }

  public void setRows(List<List<String>> rows) {
    this.rows = rows;
  }


  public USqlTablePreview schema(List<USqlTableColumn> schema) {
    this.schema = schema;
    return this;
  }

  public USqlTablePreview addSchemaItem(USqlTableColumn schemaItem) {
    if (this.schema == null) {
      this.schema = new ArrayList<>();
    }
    this.schema.add(schemaItem);
    return this;
  }

  /**
   * the schema of the table or partition.
   * @return schema
   */
  @javax.annotation.Nullable
  public List<USqlTableColumn> getSchema() {
    return schema;
  }

  public void setSchema(List<USqlTableColumn> schema) {
    this.schema = schema;
  }


  public USqlTablePreview totalColumnCount(Long totalColumnCount) {
    this.totalColumnCount = totalColumnCount;
    return this;
  }

  /**
   * the total number of columns in the table or partition.
   * @return totalColumnCount
   */
  @javax.annotation.Nullable
  public Long getTotalColumnCount() {
    return totalColumnCount;
  }

  public void setTotalColumnCount(Long totalColumnCount) {
    this.totalColumnCount = totalColumnCount;
  }


  public USqlTablePreview totalRowCount(Long totalRowCount) {
    this.totalRowCount = totalRowCount;
    return this;
  }

  /**
   * the total number of rows in the table or partition.
   * @return totalRowCount
   */
  @javax.annotation.Nullable
  public Long getTotalRowCount() {
    return totalRowCount;
  }

  public void setTotalRowCount(Long totalRowCount) {
    this.totalRowCount = totalRowCount;
  }


  public USqlTablePreview truncated(Boolean truncated) {
    this.truncated = truncated;
    return this;
  }

  /**
   * true if the amount of data in the response is less than expected due to the preview operation&#39;s size limitations. This can occur if the requested rows or row counts are too large.
   * @return truncated
   */
  @javax.annotation.Nullable
  public Boolean getTruncated() {
    return truncated;
  }

  public void setTruncated(Boolean truncated) {
    this.truncated = truncated;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    USqlTablePreview usqlTablePreview = (USqlTablePreview) o;
    return Objects.equals(this.rows, usqlTablePreview.rows) &&
        Objects.equals(this.schema, usqlTablePreview.schema) &&
        Objects.equals(this.totalColumnCount, usqlTablePreview.totalColumnCount) &&
        Objects.equals(this.totalRowCount, usqlTablePreview.totalRowCount) &&
        Objects.equals(this.truncated, usqlTablePreview.truncated);
  }

  @Override
  public int hashCode() {
    return Objects.hash(rows, schema, totalColumnCount, totalRowCount, truncated);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class USqlTablePreview {\n");
    sb.append("    rows: ").append(toIndentedString(rows)).append("\n");
    sb.append("    schema: ").append(toIndentedString(schema)).append("\n");
    sb.append("    totalColumnCount: ").append(toIndentedString(totalColumnCount)).append("\n");
    sb.append("    totalRowCount: ").append(toIndentedString(totalRowCount)).append("\n");
    sb.append("    truncated: ").append(toIndentedString(truncated)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("rows");
    openapiFields.add("schema");
    openapiFields.add("totalColumnCount");
    openapiFields.add("totalRowCount");
    openapiFields.add("truncated");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to USqlTablePreview
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!USqlTablePreview.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in USqlTablePreview is not found in the empty JSON string", USqlTablePreview.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!USqlTablePreview.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `USqlTablePreview` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("rows") != null && !jsonObj.get("rows").isJsonNull() && !jsonObj.get("rows").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `rows` to be an array in the JSON string but got `%s`", jsonObj.get("rows").toString()));
      }
      if (jsonObj.get("schema") != null && !jsonObj.get("schema").isJsonNull()) {
        JsonArray jsonArrayschema = jsonObj.getAsJsonArray("schema");
        if (jsonArrayschema != null) {
          // ensure the json data is an array
          if (!jsonObj.get("schema").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `schema` to be an array in the JSON string but got `%s`", jsonObj.get("schema").toString()));
          }

          // validate the optional field `schema` (array)
          for (int i = 0; i < jsonArrayschema.size(); i++) {
            USqlTableColumn.validateJsonElement(jsonArrayschema.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!USqlTablePreview.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'USqlTablePreview' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<USqlTablePreview> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(USqlTablePreview.class));

       return (TypeAdapter<T>) new TypeAdapter<USqlTablePreview>() {
           @Override
           public void write(JsonWriter out, USqlTablePreview value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public USqlTablePreview read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of USqlTablePreview given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of USqlTablePreview
   * @throws IOException if the JSON string is invalid with respect to USqlTablePreview
   */
  public static USqlTablePreview fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, USqlTablePreview.class);
  }

  /**
   * Convert an instance of USqlTablePreview to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

