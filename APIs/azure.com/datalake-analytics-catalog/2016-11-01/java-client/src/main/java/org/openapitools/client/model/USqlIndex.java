/*
 * DataLakeAnalyticsCatalogManagementClient
 * Creates an Azure Data Lake Analytics catalog client.
 *
 * The version of the OpenAPI document: 2016-11-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.USqlDirectedColumn;
import org.openapitools.client.model.USqlDistributionInfo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A Data Lake Analytics catalog U-SQL table index item.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:54:55.754163-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class USqlIndex {
  public static final String SERIALIZED_NAME_COLUMNS = "columns";
  @SerializedName(SERIALIZED_NAME_COLUMNS)
  private List<String> columns = new ArrayList<>();

  public static final String SERIALIZED_NAME_DISTRIBUTION_INFO = "distributionInfo";
  @SerializedName(SERIALIZED_NAME_DISTRIBUTION_INFO)
  private USqlDistributionInfo distributionInfo;

  public static final String SERIALIZED_NAME_INDEX_ID = "indexId";
  @SerializedName(SERIALIZED_NAME_INDEX_ID)
  private Integer indexId;

  public static final String SERIALIZED_NAME_INDEX_KEYS = "indexKeys";
  @SerializedName(SERIALIZED_NAME_INDEX_KEYS)
  private List<USqlDirectedColumn> indexKeys = new ArrayList<>();

  public static final String SERIALIZED_NAME_IS_COLUMNSTORE = "isColumnstore";
  @SerializedName(SERIALIZED_NAME_IS_COLUMNSTORE)
  private Boolean isColumnstore;

  public static final String SERIALIZED_NAME_IS_UNIQUE = "isUnique";
  @SerializedName(SERIALIZED_NAME_IS_UNIQUE)
  private Boolean isUnique;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PARTITION_FUNCTION = "partitionFunction";
  @SerializedName(SERIALIZED_NAME_PARTITION_FUNCTION)
  private UUID partitionFunction;

  public static final String SERIALIZED_NAME_PARTITION_KEY_LIST = "partitionKeyList";
  @SerializedName(SERIALIZED_NAME_PARTITION_KEY_LIST)
  private List<String> partitionKeyList = new ArrayList<>();

  public static final String SERIALIZED_NAME_STREAM_NAMES = "streamNames";
  @SerializedName(SERIALIZED_NAME_STREAM_NAMES)
  private List<String> streamNames = new ArrayList<>();

  public USqlIndex() {
  }

  public USqlIndex columns(List<String> columns) {
    this.columns = columns;
    return this;
  }

  public USqlIndex addColumnsItem(String columnsItem) {
    if (this.columns == null) {
      this.columns = new ArrayList<>();
    }
    this.columns.add(columnsItem);
    return this;
  }

  /**
   * the list of columns in the index
   * @return columns
   */
  @javax.annotation.Nullable
  public List<String> getColumns() {
    return columns;
  }

  public void setColumns(List<String> columns) {
    this.columns = columns;
  }


  public USqlIndex distributionInfo(USqlDistributionInfo distributionInfo) {
    this.distributionInfo = distributionInfo;
    return this;
  }

  /**
   * Get distributionInfo
   * @return distributionInfo
   */
  @javax.annotation.Nullable
  public USqlDistributionInfo getDistributionInfo() {
    return distributionInfo;
  }

  public void setDistributionInfo(USqlDistributionInfo distributionInfo) {
    this.distributionInfo = distributionInfo;
  }


  public USqlIndex indexId(Integer indexId) {
    this.indexId = indexId;
    return this;
  }

  /**
   * the ID of this index within the table.
   * @return indexId
   */
  @javax.annotation.Nullable
  public Integer getIndexId() {
    return indexId;
  }

  public void setIndexId(Integer indexId) {
    this.indexId = indexId;
  }


  public USqlIndex indexKeys(List<USqlDirectedColumn> indexKeys) {
    this.indexKeys = indexKeys;
    return this;
  }

  public USqlIndex addIndexKeysItem(USqlDirectedColumn indexKeysItem) {
    if (this.indexKeys == null) {
      this.indexKeys = new ArrayList<>();
    }
    this.indexKeys.add(indexKeysItem);
    return this;
  }

  /**
   * the list of directed columns in the index
   * @return indexKeys
   */
  @javax.annotation.Nullable
  public List<USqlDirectedColumn> getIndexKeys() {
    return indexKeys;
  }

  public void setIndexKeys(List<USqlDirectedColumn> indexKeys) {
    this.indexKeys = indexKeys;
  }


  public USqlIndex isColumnstore(Boolean isColumnstore) {
    this.isColumnstore = isColumnstore;
    return this;
  }

  /**
   * the switch indicating if this index is a columnstore index.
   * @return isColumnstore
   */
  @javax.annotation.Nullable
  public Boolean getIsColumnstore() {
    return isColumnstore;
  }

  public void setIsColumnstore(Boolean isColumnstore) {
    this.isColumnstore = isColumnstore;
  }


  public USqlIndex isUnique(Boolean isUnique) {
    this.isUnique = isUnique;
    return this;
  }

  /**
   * the switch indicating if this index is a unique index.
   * @return isUnique
   */
  @javax.annotation.Nullable
  public Boolean getIsUnique() {
    return isUnique;
  }

  public void setIsUnique(Boolean isUnique) {
    this.isUnique = isUnique;
  }


  public USqlIndex name(String name) {
    this.name = name;
    return this;
  }

  /**
   * the name of the index in the table.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public USqlIndex partitionFunction(UUID partitionFunction) {
    this.partitionFunction = partitionFunction;
    return this;
  }

  /**
   * partition function ID for the index.
   * @return partitionFunction
   */
  @javax.annotation.Nullable
  public UUID getPartitionFunction() {
    return partitionFunction;
  }

  public void setPartitionFunction(UUID partitionFunction) {
    this.partitionFunction = partitionFunction;
  }


  public USqlIndex partitionKeyList(List<String> partitionKeyList) {
    this.partitionKeyList = partitionKeyList;
    return this;
  }

  public USqlIndex addPartitionKeyListItem(String partitionKeyListItem) {
    if (this.partitionKeyList == null) {
      this.partitionKeyList = new ArrayList<>();
    }
    this.partitionKeyList.add(partitionKeyListItem);
    return this;
  }

  /**
   * the list of partition keys in the index
   * @return partitionKeyList
   */
  @javax.annotation.Nullable
  public List<String> getPartitionKeyList() {
    return partitionKeyList;
  }

  public void setPartitionKeyList(List<String> partitionKeyList) {
    this.partitionKeyList = partitionKeyList;
  }


  public USqlIndex streamNames(List<String> streamNames) {
    this.streamNames = streamNames;
    return this;
  }

  public USqlIndex addStreamNamesItem(String streamNamesItem) {
    if (this.streamNames == null) {
      this.streamNames = new ArrayList<>();
    }
    this.streamNames.add(streamNamesItem);
    return this;
  }

  /**
   * the list of full paths to the streams that contain this index in the DataLake account.
   * @return streamNames
   */
  @javax.annotation.Nullable
  public List<String> getStreamNames() {
    return streamNames;
  }

  public void setStreamNames(List<String> streamNames) {
    this.streamNames = streamNames;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    USqlIndex usqlIndex = (USqlIndex) o;
    return Objects.equals(this.columns, usqlIndex.columns) &&
        Objects.equals(this.distributionInfo, usqlIndex.distributionInfo) &&
        Objects.equals(this.indexId, usqlIndex.indexId) &&
        Objects.equals(this.indexKeys, usqlIndex.indexKeys) &&
        Objects.equals(this.isColumnstore, usqlIndex.isColumnstore) &&
        Objects.equals(this.isUnique, usqlIndex.isUnique) &&
        Objects.equals(this.name, usqlIndex.name) &&
        Objects.equals(this.partitionFunction, usqlIndex.partitionFunction) &&
        Objects.equals(this.partitionKeyList, usqlIndex.partitionKeyList) &&
        Objects.equals(this.streamNames, usqlIndex.streamNames);
  }

  @Override
  public int hashCode() {
    return Objects.hash(columns, distributionInfo, indexId, indexKeys, isColumnstore, isUnique, name, partitionFunction, partitionKeyList, streamNames);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class USqlIndex {\n");
    sb.append("    columns: ").append(toIndentedString(columns)).append("\n");
    sb.append("    distributionInfo: ").append(toIndentedString(distributionInfo)).append("\n");
    sb.append("    indexId: ").append(toIndentedString(indexId)).append("\n");
    sb.append("    indexKeys: ").append(toIndentedString(indexKeys)).append("\n");
    sb.append("    isColumnstore: ").append(toIndentedString(isColumnstore)).append("\n");
    sb.append("    isUnique: ").append(toIndentedString(isUnique)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    partitionFunction: ").append(toIndentedString(partitionFunction)).append("\n");
    sb.append("    partitionKeyList: ").append(toIndentedString(partitionKeyList)).append("\n");
    sb.append("    streamNames: ").append(toIndentedString(streamNames)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("columns");
    openapiFields.add("distributionInfo");
    openapiFields.add("indexId");
    openapiFields.add("indexKeys");
    openapiFields.add("isColumnstore");
    openapiFields.add("isUnique");
    openapiFields.add("name");
    openapiFields.add("partitionFunction");
    openapiFields.add("partitionKeyList");
    openapiFields.add("streamNames");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to USqlIndex
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!USqlIndex.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in USqlIndex is not found in the empty JSON string", USqlIndex.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!USqlIndex.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `USqlIndex` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("columns") != null && !jsonObj.get("columns").isJsonNull() && !jsonObj.get("columns").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `columns` to be an array in the JSON string but got `%s`", jsonObj.get("columns").toString()));
      }
      // validate the optional field `distributionInfo`
      if (jsonObj.get("distributionInfo") != null && !jsonObj.get("distributionInfo").isJsonNull()) {
        USqlDistributionInfo.validateJsonElement(jsonObj.get("distributionInfo"));
      }
      if (jsonObj.get("indexKeys") != null && !jsonObj.get("indexKeys").isJsonNull()) {
        JsonArray jsonArrayindexKeys = jsonObj.getAsJsonArray("indexKeys");
        if (jsonArrayindexKeys != null) {
          // ensure the json data is an array
          if (!jsonObj.get("indexKeys").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `indexKeys` to be an array in the JSON string but got `%s`", jsonObj.get("indexKeys").toString()));
          }

          // validate the optional field `indexKeys` (array)
          for (int i = 0; i < jsonArrayindexKeys.size(); i++) {
            USqlDirectedColumn.validateJsonElement(jsonArrayindexKeys.get(i));
          };
        }
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("partitionFunction") != null && !jsonObj.get("partitionFunction").isJsonNull()) && !jsonObj.get("partitionFunction").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `partitionFunction` to be a primitive type in the JSON string but got `%s`", jsonObj.get("partitionFunction").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("partitionKeyList") != null && !jsonObj.get("partitionKeyList").isJsonNull() && !jsonObj.get("partitionKeyList").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `partitionKeyList` to be an array in the JSON string but got `%s`", jsonObj.get("partitionKeyList").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("streamNames") != null && !jsonObj.get("streamNames").isJsonNull() && !jsonObj.get("streamNames").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `streamNames` to be an array in the JSON string but got `%s`", jsonObj.get("streamNames").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!USqlIndex.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'USqlIndex' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<USqlIndex> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(USqlIndex.class));

       return (TypeAdapter<T>) new TypeAdapter<USqlIndex>() {
           @Override
           public void write(JsonWriter out, USqlIndex value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public USqlIndex read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of USqlIndex given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of USqlIndex
   * @throws IOException if the JSON string is invalid with respect to USqlIndex
   */
  public static USqlIndex fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, USqlIndex.class);
  }

  /**
   * Convert an instance of USqlIndex to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

