/*
 * DataLakeAnalyticsCatalogManagementClient
 * Creates an Azure Data Lake Analytics catalog client.
 *
 * The version of the OpenAPI document: 2016-11-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AclList;
import org.openapitools.client.model.DataLakeAnalyticsCatalogCredentialCreateParameters;
import org.openapitools.client.model.DataLakeAnalyticsCatalogCredentialDeleteParameters;
import org.openapitools.client.model.DataLakeAnalyticsCatalogCredentialUpdateParameters;
import org.openapitools.client.model.DataLakeAnalyticsCatalogSecretCreateOrUpdateParameters;
import org.openapitools.client.model.USqlAssembly;
import org.openapitools.client.model.USqlAssemblyList;
import org.openapitools.client.model.USqlCredential;
import org.openapitools.client.model.USqlCredentialList;
import org.openapitools.client.model.USqlDatabase;
import org.openapitools.client.model.USqlDatabaseList;
import org.openapitools.client.model.USqlExternalDataSource;
import org.openapitools.client.model.USqlExternalDataSourceList;
import org.openapitools.client.model.USqlPackage;
import org.openapitools.client.model.USqlPackageList;
import org.openapitools.client.model.USqlProcedure;
import org.openapitools.client.model.USqlProcedureList;
import org.openapitools.client.model.USqlSchema;
import org.openapitools.client.model.USqlSchemaList;
import org.openapitools.client.model.USqlSecret;
import org.openapitools.client.model.USqlTable;
import org.openapitools.client.model.USqlTableFragmentList;
import org.openapitools.client.model.USqlTableList;
import org.openapitools.client.model.USqlTablePartition;
import org.openapitools.client.model.USqlTablePartitionList;
import org.openapitools.client.model.USqlTablePreview;
import org.openapitools.client.model.USqlTableStatistics;
import org.openapitools.client.model.USqlTableStatisticsList;
import org.openapitools.client.model.USqlTableType;
import org.openapitools.client.model.USqlTableTypeList;
import org.openapitools.client.model.USqlTableValuedFunction;
import org.openapitools.client.model.USqlTableValuedFunctionList;
import org.openapitools.client.model.USqlTypeList;
import org.openapitools.client.model.USqlView;
import org.openapitools.client.model.USqlViewList;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CatalogApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CatalogApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CatalogApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for catalogCreateCredential
     * @param databaseName The name of the database in which to create the credential. Note: This is NOT an external database name, but the name of an existing U-SQL database that should contain the new credential object. (required)
     * @param credentialName The name of the credential. (required)
     * @param apiVersion Client Api Version. (required)
     * @param parameters The parameters required to create the credential (name and password) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created the credential within the specified database. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call catalogCreateCredentialCall(String databaseName, String credentialName, String apiVersion, DataLakeAnalyticsCatalogCredentialCreateParameters parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/catalog/usql/databases/{databaseName}/credentials/{credentialName}"
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()))
            .replace("{" + "credentialName" + "}", localVarApiClient.escapeString(credentialName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call catalogCreateCredentialValidateBeforeCall(String databaseName, String credentialName, String apiVersion, DataLakeAnalyticsCatalogCredentialCreateParameters parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling catalogCreateCredential(Async)");
        }

        // verify the required parameter 'credentialName' is set
        if (credentialName == null) {
            throw new ApiException("Missing the required parameter 'credentialName' when calling catalogCreateCredential(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling catalogCreateCredential(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling catalogCreateCredential(Async)");
        }

        return catalogCreateCredentialCall(databaseName, credentialName, apiVersion, parameters, _callback);

    }

    /**
     * 
     * Creates the specified credential for use with external data sources in the specified database.
     * @param databaseName The name of the database in which to create the credential. Note: This is NOT an external database name, but the name of an existing U-SQL database that should contain the new credential object. (required)
     * @param credentialName The name of the credential. (required)
     * @param apiVersion Client Api Version. (required)
     * @param parameters The parameters required to create the credential (name and password) (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created the credential within the specified database. </td><td>  -  </td></tr>
     </table>
     */
    public void catalogCreateCredential(String databaseName, String credentialName, String apiVersion, DataLakeAnalyticsCatalogCredentialCreateParameters parameters) throws ApiException {
        catalogCreateCredentialWithHttpInfo(databaseName, credentialName, apiVersion, parameters);
    }

    /**
     * 
     * Creates the specified credential for use with external data sources in the specified database.
     * @param databaseName The name of the database in which to create the credential. Note: This is NOT an external database name, but the name of an existing U-SQL database that should contain the new credential object. (required)
     * @param credentialName The name of the credential. (required)
     * @param apiVersion Client Api Version. (required)
     * @param parameters The parameters required to create the credential (name and password) (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created the credential within the specified database. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> catalogCreateCredentialWithHttpInfo(String databaseName, String credentialName, String apiVersion, DataLakeAnalyticsCatalogCredentialCreateParameters parameters) throws ApiException {
        okhttp3.Call localVarCall = catalogCreateCredentialValidateBeforeCall(databaseName, credentialName, apiVersion, parameters, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Creates the specified credential for use with external data sources in the specified database.
     * @param databaseName The name of the database in which to create the credential. Note: This is NOT an external database name, but the name of an existing U-SQL database that should contain the new credential object. (required)
     * @param credentialName The name of the credential. (required)
     * @param apiVersion Client Api Version. (required)
     * @param parameters The parameters required to create the credential (name and password) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created the credential within the specified database. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call catalogCreateCredentialAsync(String databaseName, String credentialName, String apiVersion, DataLakeAnalyticsCatalogCredentialCreateParameters parameters, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = catalogCreateCredentialValidateBeforeCall(databaseName, credentialName, apiVersion, parameters, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for catalogCreateSecret
     * @param databaseName The name of the database in which to create the secret. (required)
     * @param secretName The name of the secret. (required)
     * @param apiVersion Client Api Version. (required)
     * @param parameters The parameters required to create the secret (name and password) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created the specified secret in the specified database. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call catalogCreateSecretCall(String databaseName, String secretName, String apiVersion, DataLakeAnalyticsCatalogSecretCreateOrUpdateParameters parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/catalog/usql/databases/{databaseName}/secrets/{secretName}"
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()))
            .replace("{" + "secretName" + "}", localVarApiClient.escapeString(secretName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call catalogCreateSecretValidateBeforeCall(String databaseName, String secretName, String apiVersion, DataLakeAnalyticsCatalogSecretCreateOrUpdateParameters parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling catalogCreateSecret(Async)");
        }

        // verify the required parameter 'secretName' is set
        if (secretName == null) {
            throw new ApiException("Missing the required parameter 'secretName' when calling catalogCreateSecret(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling catalogCreateSecret(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling catalogCreateSecret(Async)");
        }

        return catalogCreateSecretCall(databaseName, secretName, apiVersion, parameters, _callback);

    }

    /**
     * 
     * Creates the specified secret for use with external data sources in the specified database. This is deprecated and will be removed in the next release. Please use CreateCredential instead.
     * @param databaseName The name of the database in which to create the secret. (required)
     * @param secretName The name of the secret. (required)
     * @param apiVersion Client Api Version. (required)
     * @param parameters The parameters required to create the secret (name and password) (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created the specified secret in the specified database. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public void catalogCreateSecret(String databaseName, String secretName, String apiVersion, DataLakeAnalyticsCatalogSecretCreateOrUpdateParameters parameters) throws ApiException {
        catalogCreateSecretWithHttpInfo(databaseName, secretName, apiVersion, parameters);
    }

    /**
     * 
     * Creates the specified secret for use with external data sources in the specified database. This is deprecated and will be removed in the next release. Please use CreateCredential instead.
     * @param databaseName The name of the database in which to create the secret. (required)
     * @param secretName The name of the secret. (required)
     * @param apiVersion Client Api Version. (required)
     * @param parameters The parameters required to create the secret (name and password) (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created the specified secret in the specified database. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Void> catalogCreateSecretWithHttpInfo(String databaseName, String secretName, String apiVersion, DataLakeAnalyticsCatalogSecretCreateOrUpdateParameters parameters) throws ApiException {
        okhttp3.Call localVarCall = catalogCreateSecretValidateBeforeCall(databaseName, secretName, apiVersion, parameters, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Creates the specified secret for use with external data sources in the specified database. This is deprecated and will be removed in the next release. Please use CreateCredential instead.
     * @param databaseName The name of the database in which to create the secret. (required)
     * @param secretName The name of the secret. (required)
     * @param apiVersion Client Api Version. (required)
     * @param parameters The parameters required to create the secret (name and password) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created the specified secret in the specified database. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call catalogCreateSecretAsync(String databaseName, String secretName, String apiVersion, DataLakeAnalyticsCatalogSecretCreateOrUpdateParameters parameters, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = catalogCreateSecretValidateBeforeCall(databaseName, secretName, apiVersion, parameters, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for catalogDeleteAllSecrets
     * @param databaseName The name of the database containing the secret. (required)
     * @param apiVersion Client Api Version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted all secrets from the specified database. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call catalogDeleteAllSecretsCall(String databaseName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/catalog/usql/databases/{databaseName}/secrets"
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call catalogDeleteAllSecretsValidateBeforeCall(String databaseName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling catalogDeleteAllSecrets(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling catalogDeleteAllSecrets(Async)");
        }

        return catalogDeleteAllSecretsCall(databaseName, apiVersion, _callback);

    }

    /**
     * 
     * Deletes all secrets in the specified database. This is deprecated and will be removed in the next release. In the future, please only drop individual credentials using DeleteCredential
     * @param databaseName The name of the database containing the secret. (required)
     * @param apiVersion Client Api Version. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted all secrets from the specified database. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public void catalogDeleteAllSecrets(String databaseName, String apiVersion) throws ApiException {
        catalogDeleteAllSecretsWithHttpInfo(databaseName, apiVersion);
    }

    /**
     * 
     * Deletes all secrets in the specified database. This is deprecated and will be removed in the next release. In the future, please only drop individual credentials using DeleteCredential
     * @param databaseName The name of the database containing the secret. (required)
     * @param apiVersion Client Api Version. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted all secrets from the specified database. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Void> catalogDeleteAllSecretsWithHttpInfo(String databaseName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = catalogDeleteAllSecretsValidateBeforeCall(databaseName, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes all secrets in the specified database. This is deprecated and will be removed in the next release. In the future, please only drop individual credentials using DeleteCredential
     * @param databaseName The name of the database containing the secret. (required)
     * @param apiVersion Client Api Version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted all secrets from the specified database. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call catalogDeleteAllSecretsAsync(String databaseName, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = catalogDeleteAllSecretsValidateBeforeCall(databaseName, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for catalogDeleteCredential
     * @param databaseName The name of the database containing the credential. (required)
     * @param credentialName The name of the credential to delete (required)
     * @param apiVersion Client Api Version. (required)
     * @param cascade Indicates if the delete should be a cascading delete (which deletes all resources dependent on the credential as well as the credential) or not. If false will fail if there are any resources relying on the credential. (optional, default to false)
     * @param parameters The parameters to delete a credential if the current user is not the account owner. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted the specified credential from the specified database. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call catalogDeleteCredentialCall(String databaseName, String credentialName, String apiVersion, Boolean cascade, DataLakeAnalyticsCatalogCredentialDeleteParameters parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/catalog/usql/databases/{databaseName}/credentials/{credentialName}"
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()))
            .replace("{" + "credentialName" + "}", localVarApiClient.escapeString(credentialName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cascade != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cascade", cascade));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call catalogDeleteCredentialValidateBeforeCall(String databaseName, String credentialName, String apiVersion, Boolean cascade, DataLakeAnalyticsCatalogCredentialDeleteParameters parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling catalogDeleteCredential(Async)");
        }

        // verify the required parameter 'credentialName' is set
        if (credentialName == null) {
            throw new ApiException("Missing the required parameter 'credentialName' when calling catalogDeleteCredential(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling catalogDeleteCredential(Async)");
        }

        return catalogDeleteCredentialCall(databaseName, credentialName, apiVersion, cascade, parameters, _callback);

    }

    /**
     * 
     * Deletes the specified credential in the specified database
     * @param databaseName The name of the database containing the credential. (required)
     * @param credentialName The name of the credential to delete (required)
     * @param apiVersion Client Api Version. (required)
     * @param cascade Indicates if the delete should be a cascading delete (which deletes all resources dependent on the credential as well as the credential) or not. If false will fail if there are any resources relying on the credential. (optional, default to false)
     * @param parameters The parameters to delete a credential if the current user is not the account owner. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted the specified credential from the specified database. </td><td>  -  </td></tr>
     </table>
     */
    public void catalogDeleteCredential(String databaseName, String credentialName, String apiVersion, Boolean cascade, DataLakeAnalyticsCatalogCredentialDeleteParameters parameters) throws ApiException {
        catalogDeleteCredentialWithHttpInfo(databaseName, credentialName, apiVersion, cascade, parameters);
    }

    /**
     * 
     * Deletes the specified credential in the specified database
     * @param databaseName The name of the database containing the credential. (required)
     * @param credentialName The name of the credential to delete (required)
     * @param apiVersion Client Api Version. (required)
     * @param cascade Indicates if the delete should be a cascading delete (which deletes all resources dependent on the credential as well as the credential) or not. If false will fail if there are any resources relying on the credential. (optional, default to false)
     * @param parameters The parameters to delete a credential if the current user is not the account owner. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted the specified credential from the specified database. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> catalogDeleteCredentialWithHttpInfo(String databaseName, String credentialName, String apiVersion, Boolean cascade, DataLakeAnalyticsCatalogCredentialDeleteParameters parameters) throws ApiException {
        okhttp3.Call localVarCall = catalogDeleteCredentialValidateBeforeCall(databaseName, credentialName, apiVersion, cascade, parameters, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes the specified credential in the specified database
     * @param databaseName The name of the database containing the credential. (required)
     * @param credentialName The name of the credential to delete (required)
     * @param apiVersion Client Api Version. (required)
     * @param cascade Indicates if the delete should be a cascading delete (which deletes all resources dependent on the credential as well as the credential) or not. If false will fail if there are any resources relying on the credential. (optional, default to false)
     * @param parameters The parameters to delete a credential if the current user is not the account owner. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted the specified credential from the specified database. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call catalogDeleteCredentialAsync(String databaseName, String credentialName, String apiVersion, Boolean cascade, DataLakeAnalyticsCatalogCredentialDeleteParameters parameters, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = catalogDeleteCredentialValidateBeforeCall(databaseName, credentialName, apiVersion, cascade, parameters, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for catalogDeleteSecret
     * @param databaseName The name of the database containing the secret. (required)
     * @param secretName The name of the secret to delete (required)
     * @param apiVersion Client Api Version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted the specified secret from the specified database. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call catalogDeleteSecretCall(String databaseName, String secretName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/catalog/usql/databases/{databaseName}/secrets/{secretName}"
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()))
            .replace("{" + "secretName" + "}", localVarApiClient.escapeString(secretName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call catalogDeleteSecretValidateBeforeCall(String databaseName, String secretName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling catalogDeleteSecret(Async)");
        }

        // verify the required parameter 'secretName' is set
        if (secretName == null) {
            throw new ApiException("Missing the required parameter 'secretName' when calling catalogDeleteSecret(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling catalogDeleteSecret(Async)");
        }

        return catalogDeleteSecretCall(databaseName, secretName, apiVersion, _callback);

    }

    /**
     * 
     * Deletes the specified secret in the specified database. This is deprecated and will be removed in the next release. Please use DeleteCredential instead.
     * @param databaseName The name of the database containing the secret. (required)
     * @param secretName The name of the secret to delete (required)
     * @param apiVersion Client Api Version. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted the specified secret from the specified database. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public void catalogDeleteSecret(String databaseName, String secretName, String apiVersion) throws ApiException {
        catalogDeleteSecretWithHttpInfo(databaseName, secretName, apiVersion);
    }

    /**
     * 
     * Deletes the specified secret in the specified database. This is deprecated and will be removed in the next release. Please use DeleteCredential instead.
     * @param databaseName The name of the database containing the secret. (required)
     * @param secretName The name of the secret to delete (required)
     * @param apiVersion Client Api Version. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted the specified secret from the specified database. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Void> catalogDeleteSecretWithHttpInfo(String databaseName, String secretName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = catalogDeleteSecretValidateBeforeCall(databaseName, secretName, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes the specified secret in the specified database. This is deprecated and will be removed in the next release. Please use DeleteCredential instead.
     * @param databaseName The name of the database containing the secret. (required)
     * @param secretName The name of the secret to delete (required)
     * @param apiVersion Client Api Version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted the specified secret from the specified database. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call catalogDeleteSecretAsync(String databaseName, String secretName, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = catalogDeleteSecretValidateBeforeCall(databaseName, secretName, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for catalogGetAssembly
     * @param databaseName The name of the database containing the assembly. (required)
     * @param assemblyName The name of the assembly. (required)
     * @param apiVersion Client Api Version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the details of the specified assembly in the specified database. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call catalogGetAssemblyCall(String databaseName, String assemblyName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/catalog/usql/databases/{databaseName}/assemblies/{assemblyName}"
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()))
            .replace("{" + "assemblyName" + "}", localVarApiClient.escapeString(assemblyName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call catalogGetAssemblyValidateBeforeCall(String databaseName, String assemblyName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling catalogGetAssembly(Async)");
        }

        // verify the required parameter 'assemblyName' is set
        if (assemblyName == null) {
            throw new ApiException("Missing the required parameter 'assemblyName' when calling catalogGetAssembly(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling catalogGetAssembly(Async)");
        }

        return catalogGetAssemblyCall(databaseName, assemblyName, apiVersion, _callback);

    }

    /**
     * 
     * Retrieves the specified assembly from the Data Lake Analytics catalog.
     * @param databaseName The name of the database containing the assembly. (required)
     * @param assemblyName The name of the assembly. (required)
     * @param apiVersion Client Api Version. (required)
     * @return USqlAssembly
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the details of the specified assembly in the specified database. </td><td>  -  </td></tr>
     </table>
     */
    public USqlAssembly catalogGetAssembly(String databaseName, String assemblyName, String apiVersion) throws ApiException {
        ApiResponse<USqlAssembly> localVarResp = catalogGetAssemblyWithHttpInfo(databaseName, assemblyName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves the specified assembly from the Data Lake Analytics catalog.
     * @param databaseName The name of the database containing the assembly. (required)
     * @param assemblyName The name of the assembly. (required)
     * @param apiVersion Client Api Version. (required)
     * @return ApiResponse&lt;USqlAssembly&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the details of the specified assembly in the specified database. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<USqlAssembly> catalogGetAssemblyWithHttpInfo(String databaseName, String assemblyName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = catalogGetAssemblyValidateBeforeCall(databaseName, assemblyName, apiVersion, null);
        Type localVarReturnType = new TypeToken<USqlAssembly>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves the specified assembly from the Data Lake Analytics catalog.
     * @param databaseName The name of the database containing the assembly. (required)
     * @param assemblyName The name of the assembly. (required)
     * @param apiVersion Client Api Version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the details of the specified assembly in the specified database. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call catalogGetAssemblyAsync(String databaseName, String assemblyName, String apiVersion, final ApiCallback<USqlAssembly> _callback) throws ApiException {

        okhttp3.Call localVarCall = catalogGetAssemblyValidateBeforeCall(databaseName, assemblyName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<USqlAssembly>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for catalogGetCredential
     * @param databaseName The name of the database containing the schema. (required)
     * @param credentialName The name of the credential. (required)
     * @param apiVersion Client Api Version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the specified credential (name only) from the specified database. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call catalogGetCredentialCall(String databaseName, String credentialName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/catalog/usql/databases/{databaseName}/credentials/{credentialName}"
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()))
            .replace("{" + "credentialName" + "}", localVarApiClient.escapeString(credentialName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call catalogGetCredentialValidateBeforeCall(String databaseName, String credentialName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling catalogGetCredential(Async)");
        }

        // verify the required parameter 'credentialName' is set
        if (credentialName == null) {
            throw new ApiException("Missing the required parameter 'credentialName' when calling catalogGetCredential(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling catalogGetCredential(Async)");
        }

        return catalogGetCredentialCall(databaseName, credentialName, apiVersion, _callback);

    }

    /**
     * 
     * Retrieves the specified credential from the Data Lake Analytics catalog.
     * @param databaseName The name of the database containing the schema. (required)
     * @param credentialName The name of the credential. (required)
     * @param apiVersion Client Api Version. (required)
     * @return USqlCredential
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the specified credential (name only) from the specified database. </td><td>  -  </td></tr>
     </table>
     */
    public USqlCredential catalogGetCredential(String databaseName, String credentialName, String apiVersion) throws ApiException {
        ApiResponse<USqlCredential> localVarResp = catalogGetCredentialWithHttpInfo(databaseName, credentialName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves the specified credential from the Data Lake Analytics catalog.
     * @param databaseName The name of the database containing the schema. (required)
     * @param credentialName The name of the credential. (required)
     * @param apiVersion Client Api Version. (required)
     * @return ApiResponse&lt;USqlCredential&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the specified credential (name only) from the specified database. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<USqlCredential> catalogGetCredentialWithHttpInfo(String databaseName, String credentialName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = catalogGetCredentialValidateBeforeCall(databaseName, credentialName, apiVersion, null);
        Type localVarReturnType = new TypeToken<USqlCredential>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves the specified credential from the Data Lake Analytics catalog.
     * @param databaseName The name of the database containing the schema. (required)
     * @param credentialName The name of the credential. (required)
     * @param apiVersion Client Api Version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the specified credential (name only) from the specified database. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call catalogGetCredentialAsync(String databaseName, String credentialName, String apiVersion, final ApiCallback<USqlCredential> _callback) throws ApiException {

        okhttp3.Call localVarCall = catalogGetCredentialValidateBeforeCall(databaseName, credentialName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<USqlCredential>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for catalogGetDatabase
     * @param databaseName The name of the database. (required)
     * @param apiVersion Client Api Version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the details of the specified database. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call catalogGetDatabaseCall(String databaseName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/catalog/usql/databases/{databaseName}"
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call catalogGetDatabaseValidateBeforeCall(String databaseName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling catalogGetDatabase(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling catalogGetDatabase(Async)");
        }

        return catalogGetDatabaseCall(databaseName, apiVersion, _callback);

    }

    /**
     * 
     * Retrieves the specified database from the Data Lake Analytics catalog.
     * @param databaseName The name of the database. (required)
     * @param apiVersion Client Api Version. (required)
     * @return USqlDatabase
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the details of the specified database. </td><td>  -  </td></tr>
     </table>
     */
    public USqlDatabase catalogGetDatabase(String databaseName, String apiVersion) throws ApiException {
        ApiResponse<USqlDatabase> localVarResp = catalogGetDatabaseWithHttpInfo(databaseName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves the specified database from the Data Lake Analytics catalog.
     * @param databaseName The name of the database. (required)
     * @param apiVersion Client Api Version. (required)
     * @return ApiResponse&lt;USqlDatabase&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the details of the specified database. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<USqlDatabase> catalogGetDatabaseWithHttpInfo(String databaseName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = catalogGetDatabaseValidateBeforeCall(databaseName, apiVersion, null);
        Type localVarReturnType = new TypeToken<USqlDatabase>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves the specified database from the Data Lake Analytics catalog.
     * @param databaseName The name of the database. (required)
     * @param apiVersion Client Api Version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the details of the specified database. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call catalogGetDatabaseAsync(String databaseName, String apiVersion, final ApiCallback<USqlDatabase> _callback) throws ApiException {

        okhttp3.Call localVarCall = catalogGetDatabaseValidateBeforeCall(databaseName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<USqlDatabase>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for catalogGetExternalDataSource
     * @param databaseName The name of the database containing the external data source. (required)
     * @param externalDataSourceName The name of the external data source. (required)
     * @param apiVersion Client Api Version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved details of the specified external data source in the specified database. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call catalogGetExternalDataSourceCall(String databaseName, String externalDataSourceName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/catalog/usql/databases/{databaseName}/externaldatasources/{externalDataSourceName}"
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()))
            .replace("{" + "externalDataSourceName" + "}", localVarApiClient.escapeString(externalDataSourceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call catalogGetExternalDataSourceValidateBeforeCall(String databaseName, String externalDataSourceName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling catalogGetExternalDataSource(Async)");
        }

        // verify the required parameter 'externalDataSourceName' is set
        if (externalDataSourceName == null) {
            throw new ApiException("Missing the required parameter 'externalDataSourceName' when calling catalogGetExternalDataSource(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling catalogGetExternalDataSource(Async)");
        }

        return catalogGetExternalDataSourceCall(databaseName, externalDataSourceName, apiVersion, _callback);

    }

    /**
     * 
     * Retrieves the specified external data source from the Data Lake Analytics catalog.
     * @param databaseName The name of the database containing the external data source. (required)
     * @param externalDataSourceName The name of the external data source. (required)
     * @param apiVersion Client Api Version. (required)
     * @return USqlExternalDataSource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved details of the specified external data source in the specified database. </td><td>  -  </td></tr>
     </table>
     */
    public USqlExternalDataSource catalogGetExternalDataSource(String databaseName, String externalDataSourceName, String apiVersion) throws ApiException {
        ApiResponse<USqlExternalDataSource> localVarResp = catalogGetExternalDataSourceWithHttpInfo(databaseName, externalDataSourceName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves the specified external data source from the Data Lake Analytics catalog.
     * @param databaseName The name of the database containing the external data source. (required)
     * @param externalDataSourceName The name of the external data source. (required)
     * @param apiVersion Client Api Version. (required)
     * @return ApiResponse&lt;USqlExternalDataSource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved details of the specified external data source in the specified database. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<USqlExternalDataSource> catalogGetExternalDataSourceWithHttpInfo(String databaseName, String externalDataSourceName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = catalogGetExternalDataSourceValidateBeforeCall(databaseName, externalDataSourceName, apiVersion, null);
        Type localVarReturnType = new TypeToken<USqlExternalDataSource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves the specified external data source from the Data Lake Analytics catalog.
     * @param databaseName The name of the database containing the external data source. (required)
     * @param externalDataSourceName The name of the external data source. (required)
     * @param apiVersion Client Api Version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved details of the specified external data source in the specified database. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call catalogGetExternalDataSourceAsync(String databaseName, String externalDataSourceName, String apiVersion, final ApiCallback<USqlExternalDataSource> _callback) throws ApiException {

        okhttp3.Call localVarCall = catalogGetExternalDataSourceValidateBeforeCall(databaseName, externalDataSourceName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<USqlExternalDataSource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for catalogGetPackage
     * @param databaseName The name of the database containing the package. (required)
     * @param schemaName The name of the schema containing the package. (required)
     * @param packageName The name of the package. (required)
     * @param apiVersion Client Api Version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the specified package from the underlying database and schema combination </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call catalogGetPackageCall(String databaseName, String schemaName, String packageName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/catalog/usql/databases/{databaseName}/schemas/{schemaName}/packages/{packageName}"
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()))
            .replace("{" + "schemaName" + "}", localVarApiClient.escapeString(schemaName.toString()))
            .replace("{" + "packageName" + "}", localVarApiClient.escapeString(packageName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call catalogGetPackageValidateBeforeCall(String databaseName, String schemaName, String packageName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling catalogGetPackage(Async)");
        }

        // verify the required parameter 'schemaName' is set
        if (schemaName == null) {
            throw new ApiException("Missing the required parameter 'schemaName' when calling catalogGetPackage(Async)");
        }

        // verify the required parameter 'packageName' is set
        if (packageName == null) {
            throw new ApiException("Missing the required parameter 'packageName' when calling catalogGetPackage(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling catalogGetPackage(Async)");
        }

        return catalogGetPackageCall(databaseName, schemaName, packageName, apiVersion, _callback);

    }

    /**
     * 
     * Retrieves the specified package from the Data Lake Analytics catalog.
     * @param databaseName The name of the database containing the package. (required)
     * @param schemaName The name of the schema containing the package. (required)
     * @param packageName The name of the package. (required)
     * @param apiVersion Client Api Version. (required)
     * @return USqlPackage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the specified package from the underlying database and schema combination </td><td>  -  </td></tr>
     </table>
     */
    public USqlPackage catalogGetPackage(String databaseName, String schemaName, String packageName, String apiVersion) throws ApiException {
        ApiResponse<USqlPackage> localVarResp = catalogGetPackageWithHttpInfo(databaseName, schemaName, packageName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves the specified package from the Data Lake Analytics catalog.
     * @param databaseName The name of the database containing the package. (required)
     * @param schemaName The name of the schema containing the package. (required)
     * @param packageName The name of the package. (required)
     * @param apiVersion Client Api Version. (required)
     * @return ApiResponse&lt;USqlPackage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the specified package from the underlying database and schema combination </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<USqlPackage> catalogGetPackageWithHttpInfo(String databaseName, String schemaName, String packageName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = catalogGetPackageValidateBeforeCall(databaseName, schemaName, packageName, apiVersion, null);
        Type localVarReturnType = new TypeToken<USqlPackage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves the specified package from the Data Lake Analytics catalog.
     * @param databaseName The name of the database containing the package. (required)
     * @param schemaName The name of the schema containing the package. (required)
     * @param packageName The name of the package. (required)
     * @param apiVersion Client Api Version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the specified package from the underlying database and schema combination </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call catalogGetPackageAsync(String databaseName, String schemaName, String packageName, String apiVersion, final ApiCallback<USqlPackage> _callback) throws ApiException {

        okhttp3.Call localVarCall = catalogGetPackageValidateBeforeCall(databaseName, schemaName, packageName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<USqlPackage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for catalogGetProcedure
     * @param databaseName The name of the database containing the procedure. (required)
     * @param schemaName The name of the schema containing the procedure. (required)
     * @param procedureName The name of the procedure. (required)
     * @param apiVersion Client Api Version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the specified procedure from the underlying database and schema combination. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call catalogGetProcedureCall(String databaseName, String schemaName, String procedureName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/catalog/usql/databases/{databaseName}/schemas/{schemaName}/procedures/{procedureName}"
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()))
            .replace("{" + "schemaName" + "}", localVarApiClient.escapeString(schemaName.toString()))
            .replace("{" + "procedureName" + "}", localVarApiClient.escapeString(procedureName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call catalogGetProcedureValidateBeforeCall(String databaseName, String schemaName, String procedureName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling catalogGetProcedure(Async)");
        }

        // verify the required parameter 'schemaName' is set
        if (schemaName == null) {
            throw new ApiException("Missing the required parameter 'schemaName' when calling catalogGetProcedure(Async)");
        }

        // verify the required parameter 'procedureName' is set
        if (procedureName == null) {
            throw new ApiException("Missing the required parameter 'procedureName' when calling catalogGetProcedure(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling catalogGetProcedure(Async)");
        }

        return catalogGetProcedureCall(databaseName, schemaName, procedureName, apiVersion, _callback);

    }

    /**
     * 
     * Retrieves the specified procedure from the Data Lake Analytics catalog.
     * @param databaseName The name of the database containing the procedure. (required)
     * @param schemaName The name of the schema containing the procedure. (required)
     * @param procedureName The name of the procedure. (required)
     * @param apiVersion Client Api Version. (required)
     * @return USqlProcedure
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the specified procedure from the underlying database and schema combination. </td><td>  -  </td></tr>
     </table>
     */
    public USqlProcedure catalogGetProcedure(String databaseName, String schemaName, String procedureName, String apiVersion) throws ApiException {
        ApiResponse<USqlProcedure> localVarResp = catalogGetProcedureWithHttpInfo(databaseName, schemaName, procedureName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves the specified procedure from the Data Lake Analytics catalog.
     * @param databaseName The name of the database containing the procedure. (required)
     * @param schemaName The name of the schema containing the procedure. (required)
     * @param procedureName The name of the procedure. (required)
     * @param apiVersion Client Api Version. (required)
     * @return ApiResponse&lt;USqlProcedure&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the specified procedure from the underlying database and schema combination. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<USqlProcedure> catalogGetProcedureWithHttpInfo(String databaseName, String schemaName, String procedureName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = catalogGetProcedureValidateBeforeCall(databaseName, schemaName, procedureName, apiVersion, null);
        Type localVarReturnType = new TypeToken<USqlProcedure>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves the specified procedure from the Data Lake Analytics catalog.
     * @param databaseName The name of the database containing the procedure. (required)
     * @param schemaName The name of the schema containing the procedure. (required)
     * @param procedureName The name of the procedure. (required)
     * @param apiVersion Client Api Version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the specified procedure from the underlying database and schema combination. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call catalogGetProcedureAsync(String databaseName, String schemaName, String procedureName, String apiVersion, final ApiCallback<USqlProcedure> _callback) throws ApiException {

        okhttp3.Call localVarCall = catalogGetProcedureValidateBeforeCall(databaseName, schemaName, procedureName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<USqlProcedure>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for catalogGetSchema
     * @param databaseName The name of the database containing the schema. (required)
     * @param schemaName The name of the schema. (required)
     * @param apiVersion Client Api Version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the details of the specified schema in the specified database. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call catalogGetSchemaCall(String databaseName, String schemaName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/catalog/usql/databases/{databaseName}/schemas/{schemaName}"
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()))
            .replace("{" + "schemaName" + "}", localVarApiClient.escapeString(schemaName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call catalogGetSchemaValidateBeforeCall(String databaseName, String schemaName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling catalogGetSchema(Async)");
        }

        // verify the required parameter 'schemaName' is set
        if (schemaName == null) {
            throw new ApiException("Missing the required parameter 'schemaName' when calling catalogGetSchema(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling catalogGetSchema(Async)");
        }

        return catalogGetSchemaCall(databaseName, schemaName, apiVersion, _callback);

    }

    /**
     * 
     * Retrieves the specified schema from the Data Lake Analytics catalog.
     * @param databaseName The name of the database containing the schema. (required)
     * @param schemaName The name of the schema. (required)
     * @param apiVersion Client Api Version. (required)
     * @return USqlSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the details of the specified schema in the specified database. </td><td>  -  </td></tr>
     </table>
     */
    public USqlSchema catalogGetSchema(String databaseName, String schemaName, String apiVersion) throws ApiException {
        ApiResponse<USqlSchema> localVarResp = catalogGetSchemaWithHttpInfo(databaseName, schemaName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves the specified schema from the Data Lake Analytics catalog.
     * @param databaseName The name of the database containing the schema. (required)
     * @param schemaName The name of the schema. (required)
     * @param apiVersion Client Api Version. (required)
     * @return ApiResponse&lt;USqlSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the details of the specified schema in the specified database. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<USqlSchema> catalogGetSchemaWithHttpInfo(String databaseName, String schemaName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = catalogGetSchemaValidateBeforeCall(databaseName, schemaName, apiVersion, null);
        Type localVarReturnType = new TypeToken<USqlSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves the specified schema from the Data Lake Analytics catalog.
     * @param databaseName The name of the database containing the schema. (required)
     * @param schemaName The name of the schema. (required)
     * @param apiVersion Client Api Version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the details of the specified schema in the specified database. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call catalogGetSchemaAsync(String databaseName, String schemaName, String apiVersion, final ApiCallback<USqlSchema> _callback) throws ApiException {

        okhttp3.Call localVarCall = catalogGetSchemaValidateBeforeCall(databaseName, schemaName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<USqlSchema>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for catalogGetSecret
     * @param databaseName The name of the database containing the secret. (required)
     * @param secretName The name of the secret to get (required)
     * @param apiVersion Client Api Version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved details of the specified secret in the specified database. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call catalogGetSecretCall(String databaseName, String secretName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/catalog/usql/databases/{databaseName}/secrets/{secretName}"
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()))
            .replace("{" + "secretName" + "}", localVarApiClient.escapeString(secretName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call catalogGetSecretValidateBeforeCall(String databaseName, String secretName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling catalogGetSecret(Async)");
        }

        // verify the required parameter 'secretName' is set
        if (secretName == null) {
            throw new ApiException("Missing the required parameter 'secretName' when calling catalogGetSecret(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling catalogGetSecret(Async)");
        }

        return catalogGetSecretCall(databaseName, secretName, apiVersion, _callback);

    }

    /**
     * 
     * Gets the specified secret in the specified database. This is deprecated and will be removed in the next release. Please use GetCredential instead.
     * @param databaseName The name of the database containing the secret. (required)
     * @param secretName The name of the secret to get (required)
     * @param apiVersion Client Api Version. (required)
     * @return USqlSecret
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved details of the specified secret in the specified database. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public USqlSecret catalogGetSecret(String databaseName, String secretName, String apiVersion) throws ApiException {
        ApiResponse<USqlSecret> localVarResp = catalogGetSecretWithHttpInfo(databaseName, secretName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the specified secret in the specified database. This is deprecated and will be removed in the next release. Please use GetCredential instead.
     * @param databaseName The name of the database containing the secret. (required)
     * @param secretName The name of the secret to get (required)
     * @param apiVersion Client Api Version. (required)
     * @return ApiResponse&lt;USqlSecret&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved details of the specified secret in the specified database. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<USqlSecret> catalogGetSecretWithHttpInfo(String databaseName, String secretName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = catalogGetSecretValidateBeforeCall(databaseName, secretName, apiVersion, null);
        Type localVarReturnType = new TypeToken<USqlSecret>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the specified secret in the specified database. This is deprecated and will be removed in the next release. Please use GetCredential instead.
     * @param databaseName The name of the database containing the secret. (required)
     * @param secretName The name of the secret to get (required)
     * @param apiVersion Client Api Version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved details of the specified secret in the specified database. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call catalogGetSecretAsync(String databaseName, String secretName, String apiVersion, final ApiCallback<USqlSecret> _callback) throws ApiException {

        okhttp3.Call localVarCall = catalogGetSecretValidateBeforeCall(databaseName, secretName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<USqlSecret>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for catalogGetTable
     * @param databaseName The name of the database containing the table. (required)
     * @param schemaName The name of the schema containing the table. (required)
     * @param tableName The name of the table. (required)
     * @param apiVersion Client Api Version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the specified table from the underlying database and schema combination </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call catalogGetTableCall(String databaseName, String schemaName, String tableName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/catalog/usql/databases/{databaseName}/schemas/{schemaName}/tables/{tableName}"
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()))
            .replace("{" + "schemaName" + "}", localVarApiClient.escapeString(schemaName.toString()))
            .replace("{" + "tableName" + "}", localVarApiClient.escapeString(tableName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call catalogGetTableValidateBeforeCall(String databaseName, String schemaName, String tableName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling catalogGetTable(Async)");
        }

        // verify the required parameter 'schemaName' is set
        if (schemaName == null) {
            throw new ApiException("Missing the required parameter 'schemaName' when calling catalogGetTable(Async)");
        }

        // verify the required parameter 'tableName' is set
        if (tableName == null) {
            throw new ApiException("Missing the required parameter 'tableName' when calling catalogGetTable(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling catalogGetTable(Async)");
        }

        return catalogGetTableCall(databaseName, schemaName, tableName, apiVersion, _callback);

    }

    /**
     * 
     * Retrieves the specified table from the Data Lake Analytics catalog.
     * @param databaseName The name of the database containing the table. (required)
     * @param schemaName The name of the schema containing the table. (required)
     * @param tableName The name of the table. (required)
     * @param apiVersion Client Api Version. (required)
     * @return USqlTable
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the specified table from the underlying database and schema combination </td><td>  -  </td></tr>
     </table>
     */
    public USqlTable catalogGetTable(String databaseName, String schemaName, String tableName, String apiVersion) throws ApiException {
        ApiResponse<USqlTable> localVarResp = catalogGetTableWithHttpInfo(databaseName, schemaName, tableName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves the specified table from the Data Lake Analytics catalog.
     * @param databaseName The name of the database containing the table. (required)
     * @param schemaName The name of the schema containing the table. (required)
     * @param tableName The name of the table. (required)
     * @param apiVersion Client Api Version. (required)
     * @return ApiResponse&lt;USqlTable&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the specified table from the underlying database and schema combination </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<USqlTable> catalogGetTableWithHttpInfo(String databaseName, String schemaName, String tableName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = catalogGetTableValidateBeforeCall(databaseName, schemaName, tableName, apiVersion, null);
        Type localVarReturnType = new TypeToken<USqlTable>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves the specified table from the Data Lake Analytics catalog.
     * @param databaseName The name of the database containing the table. (required)
     * @param schemaName The name of the schema containing the table. (required)
     * @param tableName The name of the table. (required)
     * @param apiVersion Client Api Version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the specified table from the underlying database and schema combination </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call catalogGetTableAsync(String databaseName, String schemaName, String tableName, String apiVersion, final ApiCallback<USqlTable> _callback) throws ApiException {

        okhttp3.Call localVarCall = catalogGetTableValidateBeforeCall(databaseName, schemaName, tableName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<USqlTable>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for catalogGetTablePartition
     * @param databaseName The name of the database containing the partition. (required)
     * @param schemaName The name of the schema containing the partition. (required)
     * @param tableName The name of the table containing the partition. (required)
     * @param partitionName The name of the table partition. (required)
     * @param apiVersion Client Api Version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the details of the specified table partition in the specified database, schema, and table. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call catalogGetTablePartitionCall(String databaseName, String schemaName, String tableName, String partitionName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/catalog/usql/databases/{databaseName}/schemas/{schemaName}/tables/{tableName}/partitions/{partitionName}"
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()))
            .replace("{" + "schemaName" + "}", localVarApiClient.escapeString(schemaName.toString()))
            .replace("{" + "tableName" + "}", localVarApiClient.escapeString(tableName.toString()))
            .replace("{" + "partitionName" + "}", localVarApiClient.escapeString(partitionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call catalogGetTablePartitionValidateBeforeCall(String databaseName, String schemaName, String tableName, String partitionName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling catalogGetTablePartition(Async)");
        }

        // verify the required parameter 'schemaName' is set
        if (schemaName == null) {
            throw new ApiException("Missing the required parameter 'schemaName' when calling catalogGetTablePartition(Async)");
        }

        // verify the required parameter 'tableName' is set
        if (tableName == null) {
            throw new ApiException("Missing the required parameter 'tableName' when calling catalogGetTablePartition(Async)");
        }

        // verify the required parameter 'partitionName' is set
        if (partitionName == null) {
            throw new ApiException("Missing the required parameter 'partitionName' when calling catalogGetTablePartition(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling catalogGetTablePartition(Async)");
        }

        return catalogGetTablePartitionCall(databaseName, schemaName, tableName, partitionName, apiVersion, _callback);

    }

    /**
     * 
     * Retrieves the specified table partition from the Data Lake Analytics catalog.
     * @param databaseName The name of the database containing the partition. (required)
     * @param schemaName The name of the schema containing the partition. (required)
     * @param tableName The name of the table containing the partition. (required)
     * @param partitionName The name of the table partition. (required)
     * @param apiVersion Client Api Version. (required)
     * @return USqlTablePartition
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the details of the specified table partition in the specified database, schema, and table. </td><td>  -  </td></tr>
     </table>
     */
    public USqlTablePartition catalogGetTablePartition(String databaseName, String schemaName, String tableName, String partitionName, String apiVersion) throws ApiException {
        ApiResponse<USqlTablePartition> localVarResp = catalogGetTablePartitionWithHttpInfo(databaseName, schemaName, tableName, partitionName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves the specified table partition from the Data Lake Analytics catalog.
     * @param databaseName The name of the database containing the partition. (required)
     * @param schemaName The name of the schema containing the partition. (required)
     * @param tableName The name of the table containing the partition. (required)
     * @param partitionName The name of the table partition. (required)
     * @param apiVersion Client Api Version. (required)
     * @return ApiResponse&lt;USqlTablePartition&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the details of the specified table partition in the specified database, schema, and table. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<USqlTablePartition> catalogGetTablePartitionWithHttpInfo(String databaseName, String schemaName, String tableName, String partitionName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = catalogGetTablePartitionValidateBeforeCall(databaseName, schemaName, tableName, partitionName, apiVersion, null);
        Type localVarReturnType = new TypeToken<USqlTablePartition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves the specified table partition from the Data Lake Analytics catalog.
     * @param databaseName The name of the database containing the partition. (required)
     * @param schemaName The name of the schema containing the partition. (required)
     * @param tableName The name of the table containing the partition. (required)
     * @param partitionName The name of the table partition. (required)
     * @param apiVersion Client Api Version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the details of the specified table partition in the specified database, schema, and table. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call catalogGetTablePartitionAsync(String databaseName, String schemaName, String tableName, String partitionName, String apiVersion, final ApiCallback<USqlTablePartition> _callback) throws ApiException {

        okhttp3.Call localVarCall = catalogGetTablePartitionValidateBeforeCall(databaseName, schemaName, tableName, partitionName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<USqlTablePartition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for catalogGetTableStatistic
     * @param databaseName The name of the database containing the statistics. (required)
     * @param schemaName The name of the schema containing the statistics. (required)
     * @param tableName The name of the table containing the statistics. (required)
     * @param statisticsName The name of the table statistics. (required)
     * @param apiVersion Client Api Version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the details of the specified table statistics in the specified database and schema. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call catalogGetTableStatisticCall(String databaseName, String schemaName, String tableName, String statisticsName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/catalog/usql/databases/{databaseName}/schemas/{schemaName}/tables/{tableName}/statistics/{statisticsName}"
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()))
            .replace("{" + "schemaName" + "}", localVarApiClient.escapeString(schemaName.toString()))
            .replace("{" + "tableName" + "}", localVarApiClient.escapeString(tableName.toString()))
            .replace("{" + "statisticsName" + "}", localVarApiClient.escapeString(statisticsName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call catalogGetTableStatisticValidateBeforeCall(String databaseName, String schemaName, String tableName, String statisticsName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling catalogGetTableStatistic(Async)");
        }

        // verify the required parameter 'schemaName' is set
        if (schemaName == null) {
            throw new ApiException("Missing the required parameter 'schemaName' when calling catalogGetTableStatistic(Async)");
        }

        // verify the required parameter 'tableName' is set
        if (tableName == null) {
            throw new ApiException("Missing the required parameter 'tableName' when calling catalogGetTableStatistic(Async)");
        }

        // verify the required parameter 'statisticsName' is set
        if (statisticsName == null) {
            throw new ApiException("Missing the required parameter 'statisticsName' when calling catalogGetTableStatistic(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling catalogGetTableStatistic(Async)");
        }

        return catalogGetTableStatisticCall(databaseName, schemaName, tableName, statisticsName, apiVersion, _callback);

    }

    /**
     * 
     * Retrieves the specified table statistics from the Data Lake Analytics catalog.
     * @param databaseName The name of the database containing the statistics. (required)
     * @param schemaName The name of the schema containing the statistics. (required)
     * @param tableName The name of the table containing the statistics. (required)
     * @param statisticsName The name of the table statistics. (required)
     * @param apiVersion Client Api Version. (required)
     * @return USqlTableStatistics
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the details of the specified table statistics in the specified database and schema. </td><td>  -  </td></tr>
     </table>
     */
    public USqlTableStatistics catalogGetTableStatistic(String databaseName, String schemaName, String tableName, String statisticsName, String apiVersion) throws ApiException {
        ApiResponse<USqlTableStatistics> localVarResp = catalogGetTableStatisticWithHttpInfo(databaseName, schemaName, tableName, statisticsName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves the specified table statistics from the Data Lake Analytics catalog.
     * @param databaseName The name of the database containing the statistics. (required)
     * @param schemaName The name of the schema containing the statistics. (required)
     * @param tableName The name of the table containing the statistics. (required)
     * @param statisticsName The name of the table statistics. (required)
     * @param apiVersion Client Api Version. (required)
     * @return ApiResponse&lt;USqlTableStatistics&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the details of the specified table statistics in the specified database and schema. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<USqlTableStatistics> catalogGetTableStatisticWithHttpInfo(String databaseName, String schemaName, String tableName, String statisticsName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = catalogGetTableStatisticValidateBeforeCall(databaseName, schemaName, tableName, statisticsName, apiVersion, null);
        Type localVarReturnType = new TypeToken<USqlTableStatistics>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves the specified table statistics from the Data Lake Analytics catalog.
     * @param databaseName The name of the database containing the statistics. (required)
     * @param schemaName The name of the schema containing the statistics. (required)
     * @param tableName The name of the table containing the statistics. (required)
     * @param statisticsName The name of the table statistics. (required)
     * @param apiVersion Client Api Version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the details of the specified table statistics in the specified database and schema. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call catalogGetTableStatisticAsync(String databaseName, String schemaName, String tableName, String statisticsName, String apiVersion, final ApiCallback<USqlTableStatistics> _callback) throws ApiException {

        okhttp3.Call localVarCall = catalogGetTableStatisticValidateBeforeCall(databaseName, schemaName, tableName, statisticsName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<USqlTableStatistics>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for catalogGetTableType
     * @param databaseName The name of the database containing the table type. (required)
     * @param schemaName The name of the schema containing the table type. (required)
     * @param tableTypeName The name of the table type to retrieve. (required)
     * @param apiVersion Client Api Version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the specified table type from the underlying database and schema combination </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call catalogGetTableTypeCall(String databaseName, String schemaName, String tableTypeName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/catalog/usql/databases/{databaseName}/schemas/{schemaName}/tabletypes/{tableTypeName}"
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()))
            .replace("{" + "schemaName" + "}", localVarApiClient.escapeString(schemaName.toString()))
            .replace("{" + "tableTypeName" + "}", localVarApiClient.escapeString(tableTypeName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call catalogGetTableTypeValidateBeforeCall(String databaseName, String schemaName, String tableTypeName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling catalogGetTableType(Async)");
        }

        // verify the required parameter 'schemaName' is set
        if (schemaName == null) {
            throw new ApiException("Missing the required parameter 'schemaName' when calling catalogGetTableType(Async)");
        }

        // verify the required parameter 'tableTypeName' is set
        if (tableTypeName == null) {
            throw new ApiException("Missing the required parameter 'tableTypeName' when calling catalogGetTableType(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling catalogGetTableType(Async)");
        }

        return catalogGetTableTypeCall(databaseName, schemaName, tableTypeName, apiVersion, _callback);

    }

    /**
     * 
     * Retrieves the specified table type from the Data Lake Analytics catalog.
     * @param databaseName The name of the database containing the table type. (required)
     * @param schemaName The name of the schema containing the table type. (required)
     * @param tableTypeName The name of the table type to retrieve. (required)
     * @param apiVersion Client Api Version. (required)
     * @return USqlTableType
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the specified table type from the underlying database and schema combination </td><td>  -  </td></tr>
     </table>
     */
    public USqlTableType catalogGetTableType(String databaseName, String schemaName, String tableTypeName, String apiVersion) throws ApiException {
        ApiResponse<USqlTableType> localVarResp = catalogGetTableTypeWithHttpInfo(databaseName, schemaName, tableTypeName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves the specified table type from the Data Lake Analytics catalog.
     * @param databaseName The name of the database containing the table type. (required)
     * @param schemaName The name of the schema containing the table type. (required)
     * @param tableTypeName The name of the table type to retrieve. (required)
     * @param apiVersion Client Api Version. (required)
     * @return ApiResponse&lt;USqlTableType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the specified table type from the underlying database and schema combination </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<USqlTableType> catalogGetTableTypeWithHttpInfo(String databaseName, String schemaName, String tableTypeName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = catalogGetTableTypeValidateBeforeCall(databaseName, schemaName, tableTypeName, apiVersion, null);
        Type localVarReturnType = new TypeToken<USqlTableType>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves the specified table type from the Data Lake Analytics catalog.
     * @param databaseName The name of the database containing the table type. (required)
     * @param schemaName The name of the schema containing the table type. (required)
     * @param tableTypeName The name of the table type to retrieve. (required)
     * @param apiVersion Client Api Version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the specified table type from the underlying database and schema combination </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call catalogGetTableTypeAsync(String databaseName, String schemaName, String tableTypeName, String apiVersion, final ApiCallback<USqlTableType> _callback) throws ApiException {

        okhttp3.Call localVarCall = catalogGetTableTypeValidateBeforeCall(databaseName, schemaName, tableTypeName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<USqlTableType>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for catalogGetTableValuedFunction
     * @param databaseName The name of the database containing the table valued function. (required)
     * @param schemaName The name of the schema containing the table valued function. (required)
     * @param tableValuedFunctionName The name of the tableValuedFunction. (required)
     * @param apiVersion Client Api Version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the details of the specified table valued function in the specified database and schema. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call catalogGetTableValuedFunctionCall(String databaseName, String schemaName, String tableValuedFunctionName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/catalog/usql/databases/{databaseName}/schemas/{schemaName}/tablevaluedfunctions/{tableValuedFunctionName}"
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()))
            .replace("{" + "schemaName" + "}", localVarApiClient.escapeString(schemaName.toString()))
            .replace("{" + "tableValuedFunctionName" + "}", localVarApiClient.escapeString(tableValuedFunctionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call catalogGetTableValuedFunctionValidateBeforeCall(String databaseName, String schemaName, String tableValuedFunctionName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling catalogGetTableValuedFunction(Async)");
        }

        // verify the required parameter 'schemaName' is set
        if (schemaName == null) {
            throw new ApiException("Missing the required parameter 'schemaName' when calling catalogGetTableValuedFunction(Async)");
        }

        // verify the required parameter 'tableValuedFunctionName' is set
        if (tableValuedFunctionName == null) {
            throw new ApiException("Missing the required parameter 'tableValuedFunctionName' when calling catalogGetTableValuedFunction(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling catalogGetTableValuedFunction(Async)");
        }

        return catalogGetTableValuedFunctionCall(databaseName, schemaName, tableValuedFunctionName, apiVersion, _callback);

    }

    /**
     * 
     * Retrieves the specified table valued function from the Data Lake Analytics catalog.
     * @param databaseName The name of the database containing the table valued function. (required)
     * @param schemaName The name of the schema containing the table valued function. (required)
     * @param tableValuedFunctionName The name of the tableValuedFunction. (required)
     * @param apiVersion Client Api Version. (required)
     * @return USqlTableValuedFunction
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the details of the specified table valued function in the specified database and schema. </td><td>  -  </td></tr>
     </table>
     */
    public USqlTableValuedFunction catalogGetTableValuedFunction(String databaseName, String schemaName, String tableValuedFunctionName, String apiVersion) throws ApiException {
        ApiResponse<USqlTableValuedFunction> localVarResp = catalogGetTableValuedFunctionWithHttpInfo(databaseName, schemaName, tableValuedFunctionName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves the specified table valued function from the Data Lake Analytics catalog.
     * @param databaseName The name of the database containing the table valued function. (required)
     * @param schemaName The name of the schema containing the table valued function. (required)
     * @param tableValuedFunctionName The name of the tableValuedFunction. (required)
     * @param apiVersion Client Api Version. (required)
     * @return ApiResponse&lt;USqlTableValuedFunction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the details of the specified table valued function in the specified database and schema. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<USqlTableValuedFunction> catalogGetTableValuedFunctionWithHttpInfo(String databaseName, String schemaName, String tableValuedFunctionName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = catalogGetTableValuedFunctionValidateBeforeCall(databaseName, schemaName, tableValuedFunctionName, apiVersion, null);
        Type localVarReturnType = new TypeToken<USqlTableValuedFunction>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves the specified table valued function from the Data Lake Analytics catalog.
     * @param databaseName The name of the database containing the table valued function. (required)
     * @param schemaName The name of the schema containing the table valued function. (required)
     * @param tableValuedFunctionName The name of the tableValuedFunction. (required)
     * @param apiVersion Client Api Version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the details of the specified table valued function in the specified database and schema. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call catalogGetTableValuedFunctionAsync(String databaseName, String schemaName, String tableValuedFunctionName, String apiVersion, final ApiCallback<USqlTableValuedFunction> _callback) throws ApiException {

        okhttp3.Call localVarCall = catalogGetTableValuedFunctionValidateBeforeCall(databaseName, schemaName, tableValuedFunctionName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<USqlTableValuedFunction>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for catalogGetView
     * @param databaseName The name of the database containing the view. (required)
     * @param schemaName The name of the schema containing the view. (required)
     * @param viewName The name of the view. (required)
     * @param apiVersion Client Api Version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the specified view from the underlying database and schema combination </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call catalogGetViewCall(String databaseName, String schemaName, String viewName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/catalog/usql/databases/{databaseName}/schemas/{schemaName}/views/{viewName}"
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()))
            .replace("{" + "schemaName" + "}", localVarApiClient.escapeString(schemaName.toString()))
            .replace("{" + "viewName" + "}", localVarApiClient.escapeString(viewName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call catalogGetViewValidateBeforeCall(String databaseName, String schemaName, String viewName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling catalogGetView(Async)");
        }

        // verify the required parameter 'schemaName' is set
        if (schemaName == null) {
            throw new ApiException("Missing the required parameter 'schemaName' when calling catalogGetView(Async)");
        }

        // verify the required parameter 'viewName' is set
        if (viewName == null) {
            throw new ApiException("Missing the required parameter 'viewName' when calling catalogGetView(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling catalogGetView(Async)");
        }

        return catalogGetViewCall(databaseName, schemaName, viewName, apiVersion, _callback);

    }

    /**
     * 
     * Retrieves the specified view from the Data Lake Analytics catalog.
     * @param databaseName The name of the database containing the view. (required)
     * @param schemaName The name of the schema containing the view. (required)
     * @param viewName The name of the view. (required)
     * @param apiVersion Client Api Version. (required)
     * @return USqlView
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the specified view from the underlying database and schema combination </td><td>  -  </td></tr>
     </table>
     */
    public USqlView catalogGetView(String databaseName, String schemaName, String viewName, String apiVersion) throws ApiException {
        ApiResponse<USqlView> localVarResp = catalogGetViewWithHttpInfo(databaseName, schemaName, viewName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves the specified view from the Data Lake Analytics catalog.
     * @param databaseName The name of the database containing the view. (required)
     * @param schemaName The name of the schema containing the view. (required)
     * @param viewName The name of the view. (required)
     * @param apiVersion Client Api Version. (required)
     * @return ApiResponse&lt;USqlView&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the specified view from the underlying database and schema combination </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<USqlView> catalogGetViewWithHttpInfo(String databaseName, String schemaName, String viewName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = catalogGetViewValidateBeforeCall(databaseName, schemaName, viewName, apiVersion, null);
        Type localVarReturnType = new TypeToken<USqlView>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves the specified view from the Data Lake Analytics catalog.
     * @param databaseName The name of the database containing the view. (required)
     * @param schemaName The name of the schema containing the view. (required)
     * @param viewName The name of the view. (required)
     * @param apiVersion Client Api Version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the specified view from the underlying database and schema combination </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call catalogGetViewAsync(String databaseName, String schemaName, String viewName, String apiVersion, final ApiCallback<USqlView> _callback) throws ApiException {

        okhttp3.Call localVarCall = catalogGetViewValidateBeforeCall(databaseName, schemaName, viewName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<USqlView>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for catalogListAcls
     * @param apiVersion Client Api Version. (required)
     * @param $filter OData filter. Optional. (optional)
     * @param $top The number of items to return. Optional. (optional)
     * @param $skip The number of items to skip over before returning elements. Optional. (optional)
     * @param $select OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select&#x3D;CategoryName,Description. Optional. (optional)
     * @param $orderby OrderBy clause. One or more comma-separated expressions with an optional \&quot;asc\&quot; (the default) or \&quot;desc\&quot; depending on the order you&#39;d like the values sorted, e.g. Categories?$orderby&#x3D;CategoryName desc. Optional. (optional)
     * @param $count The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count&#x3D;true. Optional. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of access control list (ACL) entries for the Data Lake Analytics catalog. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call catalogListAclsCall(String apiVersion, String $filter, Integer $top, Integer $skip, String $select, String $orderby, Boolean $count, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/catalog/usql/acl";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if ($top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$top", $top));
        }

        if ($skip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$skip", $skip));
        }

        if ($select != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$select", $select));
        }

        if ($orderby != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$orderby", $orderby));
        }

        if ($count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$count", $count));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call catalogListAclsValidateBeforeCall(String apiVersion, String $filter, Integer $top, Integer $skip, String $select, String $orderby, Boolean $count, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling catalogListAcls(Async)");
        }

        return catalogListAclsCall(apiVersion, $filter, $top, $skip, $select, $orderby, $count, _callback);

    }

    /**
     * 
     * Retrieves the list of access control list (ACL) entries for the Data Lake Analytics catalog.
     * @param apiVersion Client Api Version. (required)
     * @param $filter OData filter. Optional. (optional)
     * @param $top The number of items to return. Optional. (optional)
     * @param $skip The number of items to skip over before returning elements. Optional. (optional)
     * @param $select OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select&#x3D;CategoryName,Description. Optional. (optional)
     * @param $orderby OrderBy clause. One or more comma-separated expressions with an optional \&quot;asc\&quot; (the default) or \&quot;desc\&quot; depending on the order you&#39;d like the values sorted, e.g. Categories?$orderby&#x3D;CategoryName desc. Optional. (optional)
     * @param $count The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count&#x3D;true. Optional. (optional)
     * @return AclList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of access control list (ACL) entries for the Data Lake Analytics catalog. </td><td>  -  </td></tr>
     </table>
     */
    public AclList catalogListAcls(String apiVersion, String $filter, Integer $top, Integer $skip, String $select, String $orderby, Boolean $count) throws ApiException {
        ApiResponse<AclList> localVarResp = catalogListAclsWithHttpInfo(apiVersion, $filter, $top, $skip, $select, $orderby, $count);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves the list of access control list (ACL) entries for the Data Lake Analytics catalog.
     * @param apiVersion Client Api Version. (required)
     * @param $filter OData filter. Optional. (optional)
     * @param $top The number of items to return. Optional. (optional)
     * @param $skip The number of items to skip over before returning elements. Optional. (optional)
     * @param $select OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select&#x3D;CategoryName,Description. Optional. (optional)
     * @param $orderby OrderBy clause. One or more comma-separated expressions with an optional \&quot;asc\&quot; (the default) or \&quot;desc\&quot; depending on the order you&#39;d like the values sorted, e.g. Categories?$orderby&#x3D;CategoryName desc. Optional. (optional)
     * @param $count The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count&#x3D;true. Optional. (optional)
     * @return ApiResponse&lt;AclList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of access control list (ACL) entries for the Data Lake Analytics catalog. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AclList> catalogListAclsWithHttpInfo(String apiVersion, String $filter, Integer $top, Integer $skip, String $select, String $orderby, Boolean $count) throws ApiException {
        okhttp3.Call localVarCall = catalogListAclsValidateBeforeCall(apiVersion, $filter, $top, $skip, $select, $orderby, $count, null);
        Type localVarReturnType = new TypeToken<AclList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves the list of access control list (ACL) entries for the Data Lake Analytics catalog.
     * @param apiVersion Client Api Version. (required)
     * @param $filter OData filter. Optional. (optional)
     * @param $top The number of items to return. Optional. (optional)
     * @param $skip The number of items to skip over before returning elements. Optional. (optional)
     * @param $select OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select&#x3D;CategoryName,Description. Optional. (optional)
     * @param $orderby OrderBy clause. One or more comma-separated expressions with an optional \&quot;asc\&quot; (the default) or \&quot;desc\&quot; depending on the order you&#39;d like the values sorted, e.g. Categories?$orderby&#x3D;CategoryName desc. Optional. (optional)
     * @param $count The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count&#x3D;true. Optional. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of access control list (ACL) entries for the Data Lake Analytics catalog. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call catalogListAclsAsync(String apiVersion, String $filter, Integer $top, Integer $skip, String $select, String $orderby, Boolean $count, final ApiCallback<AclList> _callback) throws ApiException {

        okhttp3.Call localVarCall = catalogListAclsValidateBeforeCall(apiVersion, $filter, $top, $skip, $select, $orderby, $count, _callback);
        Type localVarReturnType = new TypeToken<AclList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for catalogListAclsByDatabase
     * @param databaseName The name of the database. (required)
     * @param apiVersion Client Api Version. (required)
     * @param $filter OData filter. Optional. (optional)
     * @param $top The number of items to return. Optional. (optional)
     * @param $skip The number of items to skip over before returning elements. Optional. (optional)
     * @param $select OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select&#x3D;CategoryName,Description. Optional. (optional)
     * @param $orderby OrderBy clause. One or more comma-separated expressions with an optional \&quot;asc\&quot; (the default) or \&quot;desc\&quot; depending on the order you&#39;d like the values sorted, e.g. Categories?$orderby&#x3D;CategoryName desc. Optional. (optional)
     * @param $count The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count&#x3D;true. Optional. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of access control list (ACL) entries for the specified database. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call catalogListAclsByDatabaseCall(String databaseName, String apiVersion, String $filter, Integer $top, Integer $skip, String $select, String $orderby, Boolean $count, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/catalog/usql/databases/{databaseName}/acl"
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if ($top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$top", $top));
        }

        if ($skip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$skip", $skip));
        }

        if ($select != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$select", $select));
        }

        if ($orderby != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$orderby", $orderby));
        }

        if ($count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$count", $count));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call catalogListAclsByDatabaseValidateBeforeCall(String databaseName, String apiVersion, String $filter, Integer $top, Integer $skip, String $select, String $orderby, Boolean $count, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling catalogListAclsByDatabase(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling catalogListAclsByDatabase(Async)");
        }

        return catalogListAclsByDatabaseCall(databaseName, apiVersion, $filter, $top, $skip, $select, $orderby, $count, _callback);

    }

    /**
     * 
     * Retrieves the list of access control list (ACL) entries for the database from the Data Lake Analytics catalog.
     * @param databaseName The name of the database. (required)
     * @param apiVersion Client Api Version. (required)
     * @param $filter OData filter. Optional. (optional)
     * @param $top The number of items to return. Optional. (optional)
     * @param $skip The number of items to skip over before returning elements. Optional. (optional)
     * @param $select OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select&#x3D;CategoryName,Description. Optional. (optional)
     * @param $orderby OrderBy clause. One or more comma-separated expressions with an optional \&quot;asc\&quot; (the default) or \&quot;desc\&quot; depending on the order you&#39;d like the values sorted, e.g. Categories?$orderby&#x3D;CategoryName desc. Optional. (optional)
     * @param $count The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count&#x3D;true. Optional. (optional)
     * @return AclList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of access control list (ACL) entries for the specified database. </td><td>  -  </td></tr>
     </table>
     */
    public AclList catalogListAclsByDatabase(String databaseName, String apiVersion, String $filter, Integer $top, Integer $skip, String $select, String $orderby, Boolean $count) throws ApiException {
        ApiResponse<AclList> localVarResp = catalogListAclsByDatabaseWithHttpInfo(databaseName, apiVersion, $filter, $top, $skip, $select, $orderby, $count);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves the list of access control list (ACL) entries for the database from the Data Lake Analytics catalog.
     * @param databaseName The name of the database. (required)
     * @param apiVersion Client Api Version. (required)
     * @param $filter OData filter. Optional. (optional)
     * @param $top The number of items to return. Optional. (optional)
     * @param $skip The number of items to skip over before returning elements. Optional. (optional)
     * @param $select OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select&#x3D;CategoryName,Description. Optional. (optional)
     * @param $orderby OrderBy clause. One or more comma-separated expressions with an optional \&quot;asc\&quot; (the default) or \&quot;desc\&quot; depending on the order you&#39;d like the values sorted, e.g. Categories?$orderby&#x3D;CategoryName desc. Optional. (optional)
     * @param $count The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count&#x3D;true. Optional. (optional)
     * @return ApiResponse&lt;AclList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of access control list (ACL) entries for the specified database. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AclList> catalogListAclsByDatabaseWithHttpInfo(String databaseName, String apiVersion, String $filter, Integer $top, Integer $skip, String $select, String $orderby, Boolean $count) throws ApiException {
        okhttp3.Call localVarCall = catalogListAclsByDatabaseValidateBeforeCall(databaseName, apiVersion, $filter, $top, $skip, $select, $orderby, $count, null);
        Type localVarReturnType = new TypeToken<AclList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves the list of access control list (ACL) entries for the database from the Data Lake Analytics catalog.
     * @param databaseName The name of the database. (required)
     * @param apiVersion Client Api Version. (required)
     * @param $filter OData filter. Optional. (optional)
     * @param $top The number of items to return. Optional. (optional)
     * @param $skip The number of items to skip over before returning elements. Optional. (optional)
     * @param $select OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select&#x3D;CategoryName,Description. Optional. (optional)
     * @param $orderby OrderBy clause. One or more comma-separated expressions with an optional \&quot;asc\&quot; (the default) or \&quot;desc\&quot; depending on the order you&#39;d like the values sorted, e.g. Categories?$orderby&#x3D;CategoryName desc. Optional. (optional)
     * @param $count The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count&#x3D;true. Optional. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of access control list (ACL) entries for the specified database. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call catalogListAclsByDatabaseAsync(String databaseName, String apiVersion, String $filter, Integer $top, Integer $skip, String $select, String $orderby, Boolean $count, final ApiCallback<AclList> _callback) throws ApiException {

        okhttp3.Call localVarCall = catalogListAclsByDatabaseValidateBeforeCall(databaseName, apiVersion, $filter, $top, $skip, $select, $orderby, $count, _callback);
        Type localVarReturnType = new TypeToken<AclList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for catalogListAssemblies
     * @param databaseName The name of the database containing the assembly. (required)
     * @param apiVersion Client Api Version. (required)
     * @param $filter OData filter. Optional. (optional)
     * @param $top The number of items to return. Optional. (optional)
     * @param $skip The number of items to skip over before returning elements. Optional. (optional)
     * @param $select OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select&#x3D;CategoryName,Description. Optional. (optional)
     * @param $orderby OrderBy clause. One or more comma-separated expressions with an optional \&quot;asc\&quot; (the default) or \&quot;desc\&quot; depending on the order you&#39;d like the values sorted, e.g. Categories?$orderby&#x3D;CategoryName desc. Optional. (optional)
     * @param $count The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count&#x3D;true. Optional. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of assemblies in the specified database. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call catalogListAssembliesCall(String databaseName, String apiVersion, String $filter, Integer $top, Integer $skip, String $select, String $orderby, Boolean $count, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/catalog/usql/databases/{databaseName}/assemblies"
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if ($top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$top", $top));
        }

        if ($skip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$skip", $skip));
        }

        if ($select != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$select", $select));
        }

        if ($orderby != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$orderby", $orderby));
        }

        if ($count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$count", $count));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call catalogListAssembliesValidateBeforeCall(String databaseName, String apiVersion, String $filter, Integer $top, Integer $skip, String $select, String $orderby, Boolean $count, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling catalogListAssemblies(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling catalogListAssemblies(Async)");
        }

        return catalogListAssembliesCall(databaseName, apiVersion, $filter, $top, $skip, $select, $orderby, $count, _callback);

    }

    /**
     * 
     * Retrieves the list of assemblies from the Data Lake Analytics catalog.
     * @param databaseName The name of the database containing the assembly. (required)
     * @param apiVersion Client Api Version. (required)
     * @param $filter OData filter. Optional. (optional)
     * @param $top The number of items to return. Optional. (optional)
     * @param $skip The number of items to skip over before returning elements. Optional. (optional)
     * @param $select OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select&#x3D;CategoryName,Description. Optional. (optional)
     * @param $orderby OrderBy clause. One or more comma-separated expressions with an optional \&quot;asc\&quot; (the default) or \&quot;desc\&quot; depending on the order you&#39;d like the values sorted, e.g. Categories?$orderby&#x3D;CategoryName desc. Optional. (optional)
     * @param $count The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count&#x3D;true. Optional. (optional)
     * @return USqlAssemblyList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of assemblies in the specified database. </td><td>  -  </td></tr>
     </table>
     */
    public USqlAssemblyList catalogListAssemblies(String databaseName, String apiVersion, String $filter, Integer $top, Integer $skip, String $select, String $orderby, Boolean $count) throws ApiException {
        ApiResponse<USqlAssemblyList> localVarResp = catalogListAssembliesWithHttpInfo(databaseName, apiVersion, $filter, $top, $skip, $select, $orderby, $count);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves the list of assemblies from the Data Lake Analytics catalog.
     * @param databaseName The name of the database containing the assembly. (required)
     * @param apiVersion Client Api Version. (required)
     * @param $filter OData filter. Optional. (optional)
     * @param $top The number of items to return. Optional. (optional)
     * @param $skip The number of items to skip over before returning elements. Optional. (optional)
     * @param $select OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select&#x3D;CategoryName,Description. Optional. (optional)
     * @param $orderby OrderBy clause. One or more comma-separated expressions with an optional \&quot;asc\&quot; (the default) or \&quot;desc\&quot; depending on the order you&#39;d like the values sorted, e.g. Categories?$orderby&#x3D;CategoryName desc. Optional. (optional)
     * @param $count The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count&#x3D;true. Optional. (optional)
     * @return ApiResponse&lt;USqlAssemblyList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of assemblies in the specified database. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<USqlAssemblyList> catalogListAssembliesWithHttpInfo(String databaseName, String apiVersion, String $filter, Integer $top, Integer $skip, String $select, String $orderby, Boolean $count) throws ApiException {
        okhttp3.Call localVarCall = catalogListAssembliesValidateBeforeCall(databaseName, apiVersion, $filter, $top, $skip, $select, $orderby, $count, null);
        Type localVarReturnType = new TypeToken<USqlAssemblyList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves the list of assemblies from the Data Lake Analytics catalog.
     * @param databaseName The name of the database containing the assembly. (required)
     * @param apiVersion Client Api Version. (required)
     * @param $filter OData filter. Optional. (optional)
     * @param $top The number of items to return. Optional. (optional)
     * @param $skip The number of items to skip over before returning elements. Optional. (optional)
     * @param $select OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select&#x3D;CategoryName,Description. Optional. (optional)
     * @param $orderby OrderBy clause. One or more comma-separated expressions with an optional \&quot;asc\&quot; (the default) or \&quot;desc\&quot; depending on the order you&#39;d like the values sorted, e.g. Categories?$orderby&#x3D;CategoryName desc. Optional. (optional)
     * @param $count The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count&#x3D;true. Optional. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of assemblies in the specified database. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call catalogListAssembliesAsync(String databaseName, String apiVersion, String $filter, Integer $top, Integer $skip, String $select, String $orderby, Boolean $count, final ApiCallback<USqlAssemblyList> _callback) throws ApiException {

        okhttp3.Call localVarCall = catalogListAssembliesValidateBeforeCall(databaseName, apiVersion, $filter, $top, $skip, $select, $orderby, $count, _callback);
        Type localVarReturnType = new TypeToken<USqlAssemblyList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for catalogListCredentials
     * @param databaseName The name of the database containing the schema. (required)
     * @param apiVersion Client Api Version. (required)
     * @param $filter OData filter. Optional. (optional)
     * @param $top The number of items to return. Optional. (optional)
     * @param $skip The number of items to skip over before returning elements. Optional. (optional)
     * @param $select OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select&#x3D;CategoryName,Description. Optional. (optional)
     * @param $orderby OrderBy clause. One or more comma-separated expressions with an optional \&quot;asc\&quot; (the default) or \&quot;desc\&quot; depending on the order you&#39;d like the values sorted, e.g. Categories?$orderby&#x3D;CategoryName desc. Optional. (optional)
     * @param $count The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count&#x3D;true. Optional. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of credentials in the specified database. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call catalogListCredentialsCall(String databaseName, String apiVersion, String $filter, Integer $top, Integer $skip, String $select, String $orderby, Boolean $count, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/catalog/usql/databases/{databaseName}/credentials"
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if ($top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$top", $top));
        }

        if ($skip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$skip", $skip));
        }

        if ($select != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$select", $select));
        }

        if ($orderby != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$orderby", $orderby));
        }

        if ($count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$count", $count));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call catalogListCredentialsValidateBeforeCall(String databaseName, String apiVersion, String $filter, Integer $top, Integer $skip, String $select, String $orderby, Boolean $count, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling catalogListCredentials(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling catalogListCredentials(Async)");
        }

        return catalogListCredentialsCall(databaseName, apiVersion, $filter, $top, $skip, $select, $orderby, $count, _callback);

    }

    /**
     * 
     * Retrieves the list of credentials from the Data Lake Analytics catalog.
     * @param databaseName The name of the database containing the schema. (required)
     * @param apiVersion Client Api Version. (required)
     * @param $filter OData filter. Optional. (optional)
     * @param $top The number of items to return. Optional. (optional)
     * @param $skip The number of items to skip over before returning elements. Optional. (optional)
     * @param $select OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select&#x3D;CategoryName,Description. Optional. (optional)
     * @param $orderby OrderBy clause. One or more comma-separated expressions with an optional \&quot;asc\&quot; (the default) or \&quot;desc\&quot; depending on the order you&#39;d like the values sorted, e.g. Categories?$orderby&#x3D;CategoryName desc. Optional. (optional)
     * @param $count The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count&#x3D;true. Optional. (optional)
     * @return USqlCredentialList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of credentials in the specified database. </td><td>  -  </td></tr>
     </table>
     */
    public USqlCredentialList catalogListCredentials(String databaseName, String apiVersion, String $filter, Integer $top, Integer $skip, String $select, String $orderby, Boolean $count) throws ApiException {
        ApiResponse<USqlCredentialList> localVarResp = catalogListCredentialsWithHttpInfo(databaseName, apiVersion, $filter, $top, $skip, $select, $orderby, $count);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves the list of credentials from the Data Lake Analytics catalog.
     * @param databaseName The name of the database containing the schema. (required)
     * @param apiVersion Client Api Version. (required)
     * @param $filter OData filter. Optional. (optional)
     * @param $top The number of items to return. Optional. (optional)
     * @param $skip The number of items to skip over before returning elements. Optional. (optional)
     * @param $select OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select&#x3D;CategoryName,Description. Optional. (optional)
     * @param $orderby OrderBy clause. One or more comma-separated expressions with an optional \&quot;asc\&quot; (the default) or \&quot;desc\&quot; depending on the order you&#39;d like the values sorted, e.g. Categories?$orderby&#x3D;CategoryName desc. Optional. (optional)
     * @param $count The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count&#x3D;true. Optional. (optional)
     * @return ApiResponse&lt;USqlCredentialList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of credentials in the specified database. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<USqlCredentialList> catalogListCredentialsWithHttpInfo(String databaseName, String apiVersion, String $filter, Integer $top, Integer $skip, String $select, String $orderby, Boolean $count) throws ApiException {
        okhttp3.Call localVarCall = catalogListCredentialsValidateBeforeCall(databaseName, apiVersion, $filter, $top, $skip, $select, $orderby, $count, null);
        Type localVarReturnType = new TypeToken<USqlCredentialList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves the list of credentials from the Data Lake Analytics catalog.
     * @param databaseName The name of the database containing the schema. (required)
     * @param apiVersion Client Api Version. (required)
     * @param $filter OData filter. Optional. (optional)
     * @param $top The number of items to return. Optional. (optional)
     * @param $skip The number of items to skip over before returning elements. Optional. (optional)
     * @param $select OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select&#x3D;CategoryName,Description. Optional. (optional)
     * @param $orderby OrderBy clause. One or more comma-separated expressions with an optional \&quot;asc\&quot; (the default) or \&quot;desc\&quot; depending on the order you&#39;d like the values sorted, e.g. Categories?$orderby&#x3D;CategoryName desc. Optional. (optional)
     * @param $count The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count&#x3D;true. Optional. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of credentials in the specified database. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call catalogListCredentialsAsync(String databaseName, String apiVersion, String $filter, Integer $top, Integer $skip, String $select, String $orderby, Boolean $count, final ApiCallback<USqlCredentialList> _callback) throws ApiException {

        okhttp3.Call localVarCall = catalogListCredentialsValidateBeforeCall(databaseName, apiVersion, $filter, $top, $skip, $select, $orderby, $count, _callback);
        Type localVarReturnType = new TypeToken<USqlCredentialList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for catalogListDatabases
     * @param apiVersion Client Api Version. (required)
     * @param $filter OData filter. Optional. (optional)
     * @param $top The number of items to return. Optional. (optional)
     * @param $skip The number of items to skip over before returning elements. Optional. (optional)
     * @param $select OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select&#x3D;CategoryName,Description. Optional. (optional)
     * @param $orderby OrderBy clause. One or more comma-separated expressions with an optional \&quot;asc\&quot; (the default) or \&quot;desc\&quot; depending on the order you&#39;d like the values sorted, e.g. Categories?$orderby&#x3D;CategoryName desc. Optional. (optional)
     * @param $count The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count&#x3D;true. Optional. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of databases. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call catalogListDatabasesCall(String apiVersion, String $filter, Integer $top, Integer $skip, String $select, String $orderby, Boolean $count, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/catalog/usql/databases";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if ($top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$top", $top));
        }

        if ($skip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$skip", $skip));
        }

        if ($select != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$select", $select));
        }

        if ($orderby != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$orderby", $orderby));
        }

        if ($count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$count", $count));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call catalogListDatabasesValidateBeforeCall(String apiVersion, String $filter, Integer $top, Integer $skip, String $select, String $orderby, Boolean $count, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling catalogListDatabases(Async)");
        }

        return catalogListDatabasesCall(apiVersion, $filter, $top, $skip, $select, $orderby, $count, _callback);

    }

    /**
     * 
     * Retrieves the list of databases from the Data Lake Analytics catalog.
     * @param apiVersion Client Api Version. (required)
     * @param $filter OData filter. Optional. (optional)
     * @param $top The number of items to return. Optional. (optional)
     * @param $skip The number of items to skip over before returning elements. Optional. (optional)
     * @param $select OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select&#x3D;CategoryName,Description. Optional. (optional)
     * @param $orderby OrderBy clause. One or more comma-separated expressions with an optional \&quot;asc\&quot; (the default) or \&quot;desc\&quot; depending on the order you&#39;d like the values sorted, e.g. Categories?$orderby&#x3D;CategoryName desc. Optional. (optional)
     * @param $count The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count&#x3D;true. Optional. (optional)
     * @return USqlDatabaseList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of databases. </td><td>  -  </td></tr>
     </table>
     */
    public USqlDatabaseList catalogListDatabases(String apiVersion, String $filter, Integer $top, Integer $skip, String $select, String $orderby, Boolean $count) throws ApiException {
        ApiResponse<USqlDatabaseList> localVarResp = catalogListDatabasesWithHttpInfo(apiVersion, $filter, $top, $skip, $select, $orderby, $count);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves the list of databases from the Data Lake Analytics catalog.
     * @param apiVersion Client Api Version. (required)
     * @param $filter OData filter. Optional. (optional)
     * @param $top The number of items to return. Optional. (optional)
     * @param $skip The number of items to skip over before returning elements. Optional. (optional)
     * @param $select OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select&#x3D;CategoryName,Description. Optional. (optional)
     * @param $orderby OrderBy clause. One or more comma-separated expressions with an optional \&quot;asc\&quot; (the default) or \&quot;desc\&quot; depending on the order you&#39;d like the values sorted, e.g. Categories?$orderby&#x3D;CategoryName desc. Optional. (optional)
     * @param $count The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count&#x3D;true. Optional. (optional)
     * @return ApiResponse&lt;USqlDatabaseList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of databases. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<USqlDatabaseList> catalogListDatabasesWithHttpInfo(String apiVersion, String $filter, Integer $top, Integer $skip, String $select, String $orderby, Boolean $count) throws ApiException {
        okhttp3.Call localVarCall = catalogListDatabasesValidateBeforeCall(apiVersion, $filter, $top, $skip, $select, $orderby, $count, null);
        Type localVarReturnType = new TypeToken<USqlDatabaseList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves the list of databases from the Data Lake Analytics catalog.
     * @param apiVersion Client Api Version. (required)
     * @param $filter OData filter. Optional. (optional)
     * @param $top The number of items to return. Optional. (optional)
     * @param $skip The number of items to skip over before returning elements. Optional. (optional)
     * @param $select OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select&#x3D;CategoryName,Description. Optional. (optional)
     * @param $orderby OrderBy clause. One or more comma-separated expressions with an optional \&quot;asc\&quot; (the default) or \&quot;desc\&quot; depending on the order you&#39;d like the values sorted, e.g. Categories?$orderby&#x3D;CategoryName desc. Optional. (optional)
     * @param $count The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count&#x3D;true. Optional. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of databases. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call catalogListDatabasesAsync(String apiVersion, String $filter, Integer $top, Integer $skip, String $select, String $orderby, Boolean $count, final ApiCallback<USqlDatabaseList> _callback) throws ApiException {

        okhttp3.Call localVarCall = catalogListDatabasesValidateBeforeCall(apiVersion, $filter, $top, $skip, $select, $orderby, $count, _callback);
        Type localVarReturnType = new TypeToken<USqlDatabaseList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for catalogListExternalDataSources
     * @param databaseName The name of the database containing the external data sources. (required)
     * @param apiVersion Client Api Version. (required)
     * @param $filter OData filter. Optional. (optional)
     * @param $top The number of items to return. Optional. (optional)
     * @param $skip The number of items to skip over before returning elements. Optional. (optional)
     * @param $select OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select&#x3D;CategoryName,Description. Optional. (optional)
     * @param $orderby OrderBy clause. One or more comma-separated expressions with an optional \&quot;asc\&quot; (the default) or \&quot;desc\&quot; depending on the order you&#39;d like the values sorted, e.g. Categories?$orderby&#x3D;CategoryName desc. Optional. (optional)
     * @param $count The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count&#x3D;true. Optional. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of external data sources in the specified database. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call catalogListExternalDataSourcesCall(String databaseName, String apiVersion, String $filter, Integer $top, Integer $skip, String $select, String $orderby, Boolean $count, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/catalog/usql/databases/{databaseName}/externaldatasources"
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if ($top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$top", $top));
        }

        if ($skip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$skip", $skip));
        }

        if ($select != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$select", $select));
        }

        if ($orderby != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$orderby", $orderby));
        }

        if ($count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$count", $count));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call catalogListExternalDataSourcesValidateBeforeCall(String databaseName, String apiVersion, String $filter, Integer $top, Integer $skip, String $select, String $orderby, Boolean $count, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling catalogListExternalDataSources(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling catalogListExternalDataSources(Async)");
        }

        return catalogListExternalDataSourcesCall(databaseName, apiVersion, $filter, $top, $skip, $select, $orderby, $count, _callback);

    }

    /**
     * 
     * Retrieves the list of external data sources from the Data Lake Analytics catalog.
     * @param databaseName The name of the database containing the external data sources. (required)
     * @param apiVersion Client Api Version. (required)
     * @param $filter OData filter. Optional. (optional)
     * @param $top The number of items to return. Optional. (optional)
     * @param $skip The number of items to skip over before returning elements. Optional. (optional)
     * @param $select OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select&#x3D;CategoryName,Description. Optional. (optional)
     * @param $orderby OrderBy clause. One or more comma-separated expressions with an optional \&quot;asc\&quot; (the default) or \&quot;desc\&quot; depending on the order you&#39;d like the values sorted, e.g. Categories?$orderby&#x3D;CategoryName desc. Optional. (optional)
     * @param $count The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count&#x3D;true. Optional. (optional)
     * @return USqlExternalDataSourceList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of external data sources in the specified database. </td><td>  -  </td></tr>
     </table>
     */
    public USqlExternalDataSourceList catalogListExternalDataSources(String databaseName, String apiVersion, String $filter, Integer $top, Integer $skip, String $select, String $orderby, Boolean $count) throws ApiException {
        ApiResponse<USqlExternalDataSourceList> localVarResp = catalogListExternalDataSourcesWithHttpInfo(databaseName, apiVersion, $filter, $top, $skip, $select, $orderby, $count);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves the list of external data sources from the Data Lake Analytics catalog.
     * @param databaseName The name of the database containing the external data sources. (required)
     * @param apiVersion Client Api Version. (required)
     * @param $filter OData filter. Optional. (optional)
     * @param $top The number of items to return. Optional. (optional)
     * @param $skip The number of items to skip over before returning elements. Optional. (optional)
     * @param $select OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select&#x3D;CategoryName,Description. Optional. (optional)
     * @param $orderby OrderBy clause. One or more comma-separated expressions with an optional \&quot;asc\&quot; (the default) or \&quot;desc\&quot; depending on the order you&#39;d like the values sorted, e.g. Categories?$orderby&#x3D;CategoryName desc. Optional. (optional)
     * @param $count The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count&#x3D;true. Optional. (optional)
     * @return ApiResponse&lt;USqlExternalDataSourceList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of external data sources in the specified database. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<USqlExternalDataSourceList> catalogListExternalDataSourcesWithHttpInfo(String databaseName, String apiVersion, String $filter, Integer $top, Integer $skip, String $select, String $orderby, Boolean $count) throws ApiException {
        okhttp3.Call localVarCall = catalogListExternalDataSourcesValidateBeforeCall(databaseName, apiVersion, $filter, $top, $skip, $select, $orderby, $count, null);
        Type localVarReturnType = new TypeToken<USqlExternalDataSourceList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves the list of external data sources from the Data Lake Analytics catalog.
     * @param databaseName The name of the database containing the external data sources. (required)
     * @param apiVersion Client Api Version. (required)
     * @param $filter OData filter. Optional. (optional)
     * @param $top The number of items to return. Optional. (optional)
     * @param $skip The number of items to skip over before returning elements. Optional. (optional)
     * @param $select OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select&#x3D;CategoryName,Description. Optional. (optional)
     * @param $orderby OrderBy clause. One or more comma-separated expressions with an optional \&quot;asc\&quot; (the default) or \&quot;desc\&quot; depending on the order you&#39;d like the values sorted, e.g. Categories?$orderby&#x3D;CategoryName desc. Optional. (optional)
     * @param $count The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count&#x3D;true. Optional. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of external data sources in the specified database. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call catalogListExternalDataSourcesAsync(String databaseName, String apiVersion, String $filter, Integer $top, Integer $skip, String $select, String $orderby, Boolean $count, final ApiCallback<USqlExternalDataSourceList> _callback) throws ApiException {

        okhttp3.Call localVarCall = catalogListExternalDataSourcesValidateBeforeCall(databaseName, apiVersion, $filter, $top, $skip, $select, $orderby, $count, _callback);
        Type localVarReturnType = new TypeToken<USqlExternalDataSourceList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for catalogListPackages
     * @param databaseName The name of the database containing the packages. (required)
     * @param schemaName The name of the schema containing the packages. (required)
     * @param apiVersion Client Api Version. (required)
     * @param $filter OData filter. Optional. (optional)
     * @param $top The number of items to return. Optional. (optional)
     * @param $skip The number of items to skip over before returning elements. Optional. (optional)
     * @param $select OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select&#x3D;CategoryName,Description. Optional. (optional)
     * @param $orderby OrderBy clause. One or more comma-separated expressions with an optional \&quot;asc\&quot; (the default) or \&quot;desc\&quot; depending on the order you&#39;d like the values sorted, e.g. Categories?$orderby&#x3D;CategoryName desc. Optional. (optional)
     * @param $count The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count&#x3D;true. Optional. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of packages in the specified database and schema. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call catalogListPackagesCall(String databaseName, String schemaName, String apiVersion, String $filter, Integer $top, Integer $skip, String $select, String $orderby, Boolean $count, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/catalog/usql/databases/{databaseName}/schemas/{schemaName}/packages"
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()))
            .replace("{" + "schemaName" + "}", localVarApiClient.escapeString(schemaName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if ($top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$top", $top));
        }

        if ($skip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$skip", $skip));
        }

        if ($select != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$select", $select));
        }

        if ($orderby != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$orderby", $orderby));
        }

        if ($count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$count", $count));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call catalogListPackagesValidateBeforeCall(String databaseName, String schemaName, String apiVersion, String $filter, Integer $top, Integer $skip, String $select, String $orderby, Boolean $count, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling catalogListPackages(Async)");
        }

        // verify the required parameter 'schemaName' is set
        if (schemaName == null) {
            throw new ApiException("Missing the required parameter 'schemaName' when calling catalogListPackages(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling catalogListPackages(Async)");
        }

        return catalogListPackagesCall(databaseName, schemaName, apiVersion, $filter, $top, $skip, $select, $orderby, $count, _callback);

    }

    /**
     * 
     * Retrieves the list of packages from the Data Lake Analytics catalog.
     * @param databaseName The name of the database containing the packages. (required)
     * @param schemaName The name of the schema containing the packages. (required)
     * @param apiVersion Client Api Version. (required)
     * @param $filter OData filter. Optional. (optional)
     * @param $top The number of items to return. Optional. (optional)
     * @param $skip The number of items to skip over before returning elements. Optional. (optional)
     * @param $select OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select&#x3D;CategoryName,Description. Optional. (optional)
     * @param $orderby OrderBy clause. One or more comma-separated expressions with an optional \&quot;asc\&quot; (the default) or \&quot;desc\&quot; depending on the order you&#39;d like the values sorted, e.g. Categories?$orderby&#x3D;CategoryName desc. Optional. (optional)
     * @param $count The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count&#x3D;true. Optional. (optional)
     * @return USqlPackageList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of packages in the specified database and schema. </td><td>  -  </td></tr>
     </table>
     */
    public USqlPackageList catalogListPackages(String databaseName, String schemaName, String apiVersion, String $filter, Integer $top, Integer $skip, String $select, String $orderby, Boolean $count) throws ApiException {
        ApiResponse<USqlPackageList> localVarResp = catalogListPackagesWithHttpInfo(databaseName, schemaName, apiVersion, $filter, $top, $skip, $select, $orderby, $count);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves the list of packages from the Data Lake Analytics catalog.
     * @param databaseName The name of the database containing the packages. (required)
     * @param schemaName The name of the schema containing the packages. (required)
     * @param apiVersion Client Api Version. (required)
     * @param $filter OData filter. Optional. (optional)
     * @param $top The number of items to return. Optional. (optional)
     * @param $skip The number of items to skip over before returning elements. Optional. (optional)
     * @param $select OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select&#x3D;CategoryName,Description. Optional. (optional)
     * @param $orderby OrderBy clause. One or more comma-separated expressions with an optional \&quot;asc\&quot; (the default) or \&quot;desc\&quot; depending on the order you&#39;d like the values sorted, e.g. Categories?$orderby&#x3D;CategoryName desc. Optional. (optional)
     * @param $count The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count&#x3D;true. Optional. (optional)
     * @return ApiResponse&lt;USqlPackageList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of packages in the specified database and schema. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<USqlPackageList> catalogListPackagesWithHttpInfo(String databaseName, String schemaName, String apiVersion, String $filter, Integer $top, Integer $skip, String $select, String $orderby, Boolean $count) throws ApiException {
        okhttp3.Call localVarCall = catalogListPackagesValidateBeforeCall(databaseName, schemaName, apiVersion, $filter, $top, $skip, $select, $orderby, $count, null);
        Type localVarReturnType = new TypeToken<USqlPackageList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves the list of packages from the Data Lake Analytics catalog.
     * @param databaseName The name of the database containing the packages. (required)
     * @param schemaName The name of the schema containing the packages. (required)
     * @param apiVersion Client Api Version. (required)
     * @param $filter OData filter. Optional. (optional)
     * @param $top The number of items to return. Optional. (optional)
     * @param $skip The number of items to skip over before returning elements. Optional. (optional)
     * @param $select OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select&#x3D;CategoryName,Description. Optional. (optional)
     * @param $orderby OrderBy clause. One or more comma-separated expressions with an optional \&quot;asc\&quot; (the default) or \&quot;desc\&quot; depending on the order you&#39;d like the values sorted, e.g. Categories?$orderby&#x3D;CategoryName desc. Optional. (optional)
     * @param $count The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count&#x3D;true. Optional. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of packages in the specified database and schema. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call catalogListPackagesAsync(String databaseName, String schemaName, String apiVersion, String $filter, Integer $top, Integer $skip, String $select, String $orderby, Boolean $count, final ApiCallback<USqlPackageList> _callback) throws ApiException {

        okhttp3.Call localVarCall = catalogListPackagesValidateBeforeCall(databaseName, schemaName, apiVersion, $filter, $top, $skip, $select, $orderby, $count, _callback);
        Type localVarReturnType = new TypeToken<USqlPackageList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for catalogListProcedures
     * @param databaseName The name of the database containing the procedures. (required)
     * @param schemaName The name of the schema containing the procedures. (required)
     * @param apiVersion Client Api Version. (required)
     * @param $filter OData filter. Optional. (optional)
     * @param $top The number of items to return. Optional. (optional)
     * @param $skip The number of items to skip over before returning elements. Optional. (optional)
     * @param $select OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select&#x3D;CategoryName,Description. Optional. (optional)
     * @param $orderby OrderBy clause. One or more comma-separated expressions with an optional \&quot;asc\&quot; (the default) or \&quot;desc\&quot; depending on the order you&#39;d like the values sorted, e.g. Categories?$orderby&#x3D;CategoryName desc. Optional. (optional)
     * @param $count The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count&#x3D;true. Optional. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of procedures in the specified database and schema. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call catalogListProceduresCall(String databaseName, String schemaName, String apiVersion, String $filter, Integer $top, Integer $skip, String $select, String $orderby, Boolean $count, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/catalog/usql/databases/{databaseName}/schemas/{schemaName}/procedures"
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()))
            .replace("{" + "schemaName" + "}", localVarApiClient.escapeString(schemaName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if ($top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$top", $top));
        }

        if ($skip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$skip", $skip));
        }

        if ($select != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$select", $select));
        }

        if ($orderby != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$orderby", $orderby));
        }

        if ($count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$count", $count));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call catalogListProceduresValidateBeforeCall(String databaseName, String schemaName, String apiVersion, String $filter, Integer $top, Integer $skip, String $select, String $orderby, Boolean $count, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling catalogListProcedures(Async)");
        }

        // verify the required parameter 'schemaName' is set
        if (schemaName == null) {
            throw new ApiException("Missing the required parameter 'schemaName' when calling catalogListProcedures(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling catalogListProcedures(Async)");
        }

        return catalogListProceduresCall(databaseName, schemaName, apiVersion, $filter, $top, $skip, $select, $orderby, $count, _callback);

    }

    /**
     * 
     * Retrieves the list of procedures from the Data Lake Analytics catalog.
     * @param databaseName The name of the database containing the procedures. (required)
     * @param schemaName The name of the schema containing the procedures. (required)
     * @param apiVersion Client Api Version. (required)
     * @param $filter OData filter. Optional. (optional)
     * @param $top The number of items to return. Optional. (optional)
     * @param $skip The number of items to skip over before returning elements. Optional. (optional)
     * @param $select OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select&#x3D;CategoryName,Description. Optional. (optional)
     * @param $orderby OrderBy clause. One or more comma-separated expressions with an optional \&quot;asc\&quot; (the default) or \&quot;desc\&quot; depending on the order you&#39;d like the values sorted, e.g. Categories?$orderby&#x3D;CategoryName desc. Optional. (optional)
     * @param $count The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count&#x3D;true. Optional. (optional)
     * @return USqlProcedureList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of procedures in the specified database and schema. </td><td>  -  </td></tr>
     </table>
     */
    public USqlProcedureList catalogListProcedures(String databaseName, String schemaName, String apiVersion, String $filter, Integer $top, Integer $skip, String $select, String $orderby, Boolean $count) throws ApiException {
        ApiResponse<USqlProcedureList> localVarResp = catalogListProceduresWithHttpInfo(databaseName, schemaName, apiVersion, $filter, $top, $skip, $select, $orderby, $count);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves the list of procedures from the Data Lake Analytics catalog.
     * @param databaseName The name of the database containing the procedures. (required)
     * @param schemaName The name of the schema containing the procedures. (required)
     * @param apiVersion Client Api Version. (required)
     * @param $filter OData filter. Optional. (optional)
     * @param $top The number of items to return. Optional. (optional)
     * @param $skip The number of items to skip over before returning elements. Optional. (optional)
     * @param $select OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select&#x3D;CategoryName,Description. Optional. (optional)
     * @param $orderby OrderBy clause. One or more comma-separated expressions with an optional \&quot;asc\&quot; (the default) or \&quot;desc\&quot; depending on the order you&#39;d like the values sorted, e.g. Categories?$orderby&#x3D;CategoryName desc. Optional. (optional)
     * @param $count The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count&#x3D;true. Optional. (optional)
     * @return ApiResponse&lt;USqlProcedureList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of procedures in the specified database and schema. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<USqlProcedureList> catalogListProceduresWithHttpInfo(String databaseName, String schemaName, String apiVersion, String $filter, Integer $top, Integer $skip, String $select, String $orderby, Boolean $count) throws ApiException {
        okhttp3.Call localVarCall = catalogListProceduresValidateBeforeCall(databaseName, schemaName, apiVersion, $filter, $top, $skip, $select, $orderby, $count, null);
        Type localVarReturnType = new TypeToken<USqlProcedureList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves the list of procedures from the Data Lake Analytics catalog.
     * @param databaseName The name of the database containing the procedures. (required)
     * @param schemaName The name of the schema containing the procedures. (required)
     * @param apiVersion Client Api Version. (required)
     * @param $filter OData filter. Optional. (optional)
     * @param $top The number of items to return. Optional. (optional)
     * @param $skip The number of items to skip over before returning elements. Optional. (optional)
     * @param $select OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select&#x3D;CategoryName,Description. Optional. (optional)
     * @param $orderby OrderBy clause. One or more comma-separated expressions with an optional \&quot;asc\&quot; (the default) or \&quot;desc\&quot; depending on the order you&#39;d like the values sorted, e.g. Categories?$orderby&#x3D;CategoryName desc. Optional. (optional)
     * @param $count The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count&#x3D;true. Optional. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of procedures in the specified database and schema. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call catalogListProceduresAsync(String databaseName, String schemaName, String apiVersion, String $filter, Integer $top, Integer $skip, String $select, String $orderby, Boolean $count, final ApiCallback<USqlProcedureList> _callback) throws ApiException {

        okhttp3.Call localVarCall = catalogListProceduresValidateBeforeCall(databaseName, schemaName, apiVersion, $filter, $top, $skip, $select, $orderby, $count, _callback);
        Type localVarReturnType = new TypeToken<USqlProcedureList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for catalogListSchemas
     * @param databaseName The name of the database containing the schema. (required)
     * @param apiVersion Client Api Version. (required)
     * @param $filter OData filter. Optional. (optional)
     * @param $top The number of items to return. Optional. (optional)
     * @param $skip The number of items to skip over before returning elements. Optional. (optional)
     * @param $select OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select&#x3D;CategoryName,Description. Optional. (optional)
     * @param $orderby OrderBy clause. One or more comma-separated expressions with an optional \&quot;asc\&quot; (the default) or \&quot;desc\&quot; depending on the order you&#39;d like the values sorted, e.g. Categories?$orderby&#x3D;CategoryName desc. Optional. (optional)
     * @param $count The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count&#x3D;true. Optional. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of schemas in the specified database. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call catalogListSchemasCall(String databaseName, String apiVersion, String $filter, Integer $top, Integer $skip, String $select, String $orderby, Boolean $count, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/catalog/usql/databases/{databaseName}/schemas"
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if ($top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$top", $top));
        }

        if ($skip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$skip", $skip));
        }

        if ($select != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$select", $select));
        }

        if ($orderby != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$orderby", $orderby));
        }

        if ($count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$count", $count));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call catalogListSchemasValidateBeforeCall(String databaseName, String apiVersion, String $filter, Integer $top, Integer $skip, String $select, String $orderby, Boolean $count, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling catalogListSchemas(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling catalogListSchemas(Async)");
        }

        return catalogListSchemasCall(databaseName, apiVersion, $filter, $top, $skip, $select, $orderby, $count, _callback);

    }

    /**
     * 
     * Retrieves the list of schemas from the Data Lake Analytics catalog.
     * @param databaseName The name of the database containing the schema. (required)
     * @param apiVersion Client Api Version. (required)
     * @param $filter OData filter. Optional. (optional)
     * @param $top The number of items to return. Optional. (optional)
     * @param $skip The number of items to skip over before returning elements. Optional. (optional)
     * @param $select OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select&#x3D;CategoryName,Description. Optional. (optional)
     * @param $orderby OrderBy clause. One or more comma-separated expressions with an optional \&quot;asc\&quot; (the default) or \&quot;desc\&quot; depending on the order you&#39;d like the values sorted, e.g. Categories?$orderby&#x3D;CategoryName desc. Optional. (optional)
     * @param $count The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count&#x3D;true. Optional. (optional)
     * @return USqlSchemaList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of schemas in the specified database. </td><td>  -  </td></tr>
     </table>
     */
    public USqlSchemaList catalogListSchemas(String databaseName, String apiVersion, String $filter, Integer $top, Integer $skip, String $select, String $orderby, Boolean $count) throws ApiException {
        ApiResponse<USqlSchemaList> localVarResp = catalogListSchemasWithHttpInfo(databaseName, apiVersion, $filter, $top, $skip, $select, $orderby, $count);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves the list of schemas from the Data Lake Analytics catalog.
     * @param databaseName The name of the database containing the schema. (required)
     * @param apiVersion Client Api Version. (required)
     * @param $filter OData filter. Optional. (optional)
     * @param $top The number of items to return. Optional. (optional)
     * @param $skip The number of items to skip over before returning elements. Optional. (optional)
     * @param $select OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select&#x3D;CategoryName,Description. Optional. (optional)
     * @param $orderby OrderBy clause. One or more comma-separated expressions with an optional \&quot;asc\&quot; (the default) or \&quot;desc\&quot; depending on the order you&#39;d like the values sorted, e.g. Categories?$orderby&#x3D;CategoryName desc. Optional. (optional)
     * @param $count The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count&#x3D;true. Optional. (optional)
     * @return ApiResponse&lt;USqlSchemaList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of schemas in the specified database. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<USqlSchemaList> catalogListSchemasWithHttpInfo(String databaseName, String apiVersion, String $filter, Integer $top, Integer $skip, String $select, String $orderby, Boolean $count) throws ApiException {
        okhttp3.Call localVarCall = catalogListSchemasValidateBeforeCall(databaseName, apiVersion, $filter, $top, $skip, $select, $orderby, $count, null);
        Type localVarReturnType = new TypeToken<USqlSchemaList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves the list of schemas from the Data Lake Analytics catalog.
     * @param databaseName The name of the database containing the schema. (required)
     * @param apiVersion Client Api Version. (required)
     * @param $filter OData filter. Optional. (optional)
     * @param $top The number of items to return. Optional. (optional)
     * @param $skip The number of items to skip over before returning elements. Optional. (optional)
     * @param $select OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select&#x3D;CategoryName,Description. Optional. (optional)
     * @param $orderby OrderBy clause. One or more comma-separated expressions with an optional \&quot;asc\&quot; (the default) or \&quot;desc\&quot; depending on the order you&#39;d like the values sorted, e.g. Categories?$orderby&#x3D;CategoryName desc. Optional. (optional)
     * @param $count The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count&#x3D;true. Optional. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of schemas in the specified database. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call catalogListSchemasAsync(String databaseName, String apiVersion, String $filter, Integer $top, Integer $skip, String $select, String $orderby, Boolean $count, final ApiCallback<USqlSchemaList> _callback) throws ApiException {

        okhttp3.Call localVarCall = catalogListSchemasValidateBeforeCall(databaseName, apiVersion, $filter, $top, $skip, $select, $orderby, $count, _callback);
        Type localVarReturnType = new TypeToken<USqlSchemaList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for catalogListTableFragments
     * @param databaseName The name of the database containing the table fragments. (required)
     * @param schemaName The name of the schema containing the table fragments. (required)
     * @param tableName The name of the table containing the table fragments. (required)
     * @param apiVersion Client Api Version. (required)
     * @param $filter OData filter. Optional. (optional)
     * @param $top The number of items to return. Optional. (optional)
     * @param $skip The number of items to skip over before returning elements. Optional. (optional)
     * @param $select OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select&#x3D;CategoryName,Description. Optional. (optional)
     * @param $orderby OrderBy clause. One or more comma-separated expressions with an optional \&quot;asc\&quot; (the default) or \&quot;desc\&quot; depending on the order you&#39;d like the values sorted, e.g. Categories?$orderby&#x3D;CategoryName desc. Optional. (optional)
     * @param $count The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count&#x3D;true. Optional. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of table fragments in the specified database and schema. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call catalogListTableFragmentsCall(String databaseName, String schemaName, String tableName, String apiVersion, String $filter, Integer $top, Integer $skip, String $select, String $orderby, Boolean $count, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/catalog/usql/databases/{databaseName}/schemas/{schemaName}/tables/{tableName}/tablefragments"
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()))
            .replace("{" + "schemaName" + "}", localVarApiClient.escapeString(schemaName.toString()))
            .replace("{" + "tableName" + "}", localVarApiClient.escapeString(tableName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if ($top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$top", $top));
        }

        if ($skip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$skip", $skip));
        }

        if ($select != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$select", $select));
        }

        if ($orderby != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$orderby", $orderby));
        }

        if ($count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$count", $count));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call catalogListTableFragmentsValidateBeforeCall(String databaseName, String schemaName, String tableName, String apiVersion, String $filter, Integer $top, Integer $skip, String $select, String $orderby, Boolean $count, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling catalogListTableFragments(Async)");
        }

        // verify the required parameter 'schemaName' is set
        if (schemaName == null) {
            throw new ApiException("Missing the required parameter 'schemaName' when calling catalogListTableFragments(Async)");
        }

        // verify the required parameter 'tableName' is set
        if (tableName == null) {
            throw new ApiException("Missing the required parameter 'tableName' when calling catalogListTableFragments(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling catalogListTableFragments(Async)");
        }

        return catalogListTableFragmentsCall(databaseName, schemaName, tableName, apiVersion, $filter, $top, $skip, $select, $orderby, $count, _callback);

    }

    /**
     * 
     * Retrieves the list of table fragments from the Data Lake Analytics catalog.
     * @param databaseName The name of the database containing the table fragments. (required)
     * @param schemaName The name of the schema containing the table fragments. (required)
     * @param tableName The name of the table containing the table fragments. (required)
     * @param apiVersion Client Api Version. (required)
     * @param $filter OData filter. Optional. (optional)
     * @param $top The number of items to return. Optional. (optional)
     * @param $skip The number of items to skip over before returning elements. Optional. (optional)
     * @param $select OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select&#x3D;CategoryName,Description. Optional. (optional)
     * @param $orderby OrderBy clause. One or more comma-separated expressions with an optional \&quot;asc\&quot; (the default) or \&quot;desc\&quot; depending on the order you&#39;d like the values sorted, e.g. Categories?$orderby&#x3D;CategoryName desc. Optional. (optional)
     * @param $count The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count&#x3D;true. Optional. (optional)
     * @return USqlTableFragmentList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of table fragments in the specified database and schema. </td><td>  -  </td></tr>
     </table>
     */
    public USqlTableFragmentList catalogListTableFragments(String databaseName, String schemaName, String tableName, String apiVersion, String $filter, Integer $top, Integer $skip, String $select, String $orderby, Boolean $count) throws ApiException {
        ApiResponse<USqlTableFragmentList> localVarResp = catalogListTableFragmentsWithHttpInfo(databaseName, schemaName, tableName, apiVersion, $filter, $top, $skip, $select, $orderby, $count);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves the list of table fragments from the Data Lake Analytics catalog.
     * @param databaseName The name of the database containing the table fragments. (required)
     * @param schemaName The name of the schema containing the table fragments. (required)
     * @param tableName The name of the table containing the table fragments. (required)
     * @param apiVersion Client Api Version. (required)
     * @param $filter OData filter. Optional. (optional)
     * @param $top The number of items to return. Optional. (optional)
     * @param $skip The number of items to skip over before returning elements. Optional. (optional)
     * @param $select OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select&#x3D;CategoryName,Description. Optional. (optional)
     * @param $orderby OrderBy clause. One or more comma-separated expressions with an optional \&quot;asc\&quot; (the default) or \&quot;desc\&quot; depending on the order you&#39;d like the values sorted, e.g. Categories?$orderby&#x3D;CategoryName desc. Optional. (optional)
     * @param $count The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count&#x3D;true. Optional. (optional)
     * @return ApiResponse&lt;USqlTableFragmentList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of table fragments in the specified database and schema. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<USqlTableFragmentList> catalogListTableFragmentsWithHttpInfo(String databaseName, String schemaName, String tableName, String apiVersion, String $filter, Integer $top, Integer $skip, String $select, String $orderby, Boolean $count) throws ApiException {
        okhttp3.Call localVarCall = catalogListTableFragmentsValidateBeforeCall(databaseName, schemaName, tableName, apiVersion, $filter, $top, $skip, $select, $orderby, $count, null);
        Type localVarReturnType = new TypeToken<USqlTableFragmentList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves the list of table fragments from the Data Lake Analytics catalog.
     * @param databaseName The name of the database containing the table fragments. (required)
     * @param schemaName The name of the schema containing the table fragments. (required)
     * @param tableName The name of the table containing the table fragments. (required)
     * @param apiVersion Client Api Version. (required)
     * @param $filter OData filter. Optional. (optional)
     * @param $top The number of items to return. Optional. (optional)
     * @param $skip The number of items to skip over before returning elements. Optional. (optional)
     * @param $select OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select&#x3D;CategoryName,Description. Optional. (optional)
     * @param $orderby OrderBy clause. One or more comma-separated expressions with an optional \&quot;asc\&quot; (the default) or \&quot;desc\&quot; depending on the order you&#39;d like the values sorted, e.g. Categories?$orderby&#x3D;CategoryName desc. Optional. (optional)
     * @param $count The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count&#x3D;true. Optional. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of table fragments in the specified database and schema. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call catalogListTableFragmentsAsync(String databaseName, String schemaName, String tableName, String apiVersion, String $filter, Integer $top, Integer $skip, String $select, String $orderby, Boolean $count, final ApiCallback<USqlTableFragmentList> _callback) throws ApiException {

        okhttp3.Call localVarCall = catalogListTableFragmentsValidateBeforeCall(databaseName, schemaName, tableName, apiVersion, $filter, $top, $skip, $select, $orderby, $count, _callback);
        Type localVarReturnType = new TypeToken<USqlTableFragmentList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for catalogListTablePartitions
     * @param databaseName The name of the database containing the partitions. (required)
     * @param schemaName The name of the schema containing the partitions. (required)
     * @param tableName The name of the table containing the partitions. (required)
     * @param apiVersion Client Api Version. (required)
     * @param $filter OData filter. Optional. (optional)
     * @param $top The number of items to return. Optional. (optional)
     * @param $skip The number of items to skip over before returning elements. Optional. (optional)
     * @param $select OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select&#x3D;CategoryName,Description. Optional. (optional)
     * @param $orderby OrderBy clause. One or more comma-separated expressions with an optional \&quot;asc\&quot; (the default) or \&quot;desc\&quot; depending on the order you&#39;d like the values sorted, e.g. Categories?$orderby&#x3D;CategoryName desc. Optional. (optional)
     * @param $count The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count&#x3D;true. Optional. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of table partitions in the specified database, schema, and table. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call catalogListTablePartitionsCall(String databaseName, String schemaName, String tableName, String apiVersion, String $filter, Integer $top, Integer $skip, String $select, String $orderby, Boolean $count, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/catalog/usql/databases/{databaseName}/schemas/{schemaName}/tables/{tableName}/partitions"
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()))
            .replace("{" + "schemaName" + "}", localVarApiClient.escapeString(schemaName.toString()))
            .replace("{" + "tableName" + "}", localVarApiClient.escapeString(tableName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if ($top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$top", $top));
        }

        if ($skip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$skip", $skip));
        }

        if ($select != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$select", $select));
        }

        if ($orderby != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$orderby", $orderby));
        }

        if ($count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$count", $count));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call catalogListTablePartitionsValidateBeforeCall(String databaseName, String schemaName, String tableName, String apiVersion, String $filter, Integer $top, Integer $skip, String $select, String $orderby, Boolean $count, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling catalogListTablePartitions(Async)");
        }

        // verify the required parameter 'schemaName' is set
        if (schemaName == null) {
            throw new ApiException("Missing the required parameter 'schemaName' when calling catalogListTablePartitions(Async)");
        }

        // verify the required parameter 'tableName' is set
        if (tableName == null) {
            throw new ApiException("Missing the required parameter 'tableName' when calling catalogListTablePartitions(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling catalogListTablePartitions(Async)");
        }

        return catalogListTablePartitionsCall(databaseName, schemaName, tableName, apiVersion, $filter, $top, $skip, $select, $orderby, $count, _callback);

    }

    /**
     * 
     * Retrieves the list of table partitions from the Data Lake Analytics catalog.
     * @param databaseName The name of the database containing the partitions. (required)
     * @param schemaName The name of the schema containing the partitions. (required)
     * @param tableName The name of the table containing the partitions. (required)
     * @param apiVersion Client Api Version. (required)
     * @param $filter OData filter. Optional. (optional)
     * @param $top The number of items to return. Optional. (optional)
     * @param $skip The number of items to skip over before returning elements. Optional. (optional)
     * @param $select OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select&#x3D;CategoryName,Description. Optional. (optional)
     * @param $orderby OrderBy clause. One or more comma-separated expressions with an optional \&quot;asc\&quot; (the default) or \&quot;desc\&quot; depending on the order you&#39;d like the values sorted, e.g. Categories?$orderby&#x3D;CategoryName desc. Optional. (optional)
     * @param $count The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count&#x3D;true. Optional. (optional)
     * @return USqlTablePartitionList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of table partitions in the specified database, schema, and table. </td><td>  -  </td></tr>
     </table>
     */
    public USqlTablePartitionList catalogListTablePartitions(String databaseName, String schemaName, String tableName, String apiVersion, String $filter, Integer $top, Integer $skip, String $select, String $orderby, Boolean $count) throws ApiException {
        ApiResponse<USqlTablePartitionList> localVarResp = catalogListTablePartitionsWithHttpInfo(databaseName, schemaName, tableName, apiVersion, $filter, $top, $skip, $select, $orderby, $count);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves the list of table partitions from the Data Lake Analytics catalog.
     * @param databaseName The name of the database containing the partitions. (required)
     * @param schemaName The name of the schema containing the partitions. (required)
     * @param tableName The name of the table containing the partitions. (required)
     * @param apiVersion Client Api Version. (required)
     * @param $filter OData filter. Optional. (optional)
     * @param $top The number of items to return. Optional. (optional)
     * @param $skip The number of items to skip over before returning elements. Optional. (optional)
     * @param $select OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select&#x3D;CategoryName,Description. Optional. (optional)
     * @param $orderby OrderBy clause. One or more comma-separated expressions with an optional \&quot;asc\&quot; (the default) or \&quot;desc\&quot; depending on the order you&#39;d like the values sorted, e.g. Categories?$orderby&#x3D;CategoryName desc. Optional. (optional)
     * @param $count The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count&#x3D;true. Optional. (optional)
     * @return ApiResponse&lt;USqlTablePartitionList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of table partitions in the specified database, schema, and table. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<USqlTablePartitionList> catalogListTablePartitionsWithHttpInfo(String databaseName, String schemaName, String tableName, String apiVersion, String $filter, Integer $top, Integer $skip, String $select, String $orderby, Boolean $count) throws ApiException {
        okhttp3.Call localVarCall = catalogListTablePartitionsValidateBeforeCall(databaseName, schemaName, tableName, apiVersion, $filter, $top, $skip, $select, $orderby, $count, null);
        Type localVarReturnType = new TypeToken<USqlTablePartitionList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves the list of table partitions from the Data Lake Analytics catalog.
     * @param databaseName The name of the database containing the partitions. (required)
     * @param schemaName The name of the schema containing the partitions. (required)
     * @param tableName The name of the table containing the partitions. (required)
     * @param apiVersion Client Api Version. (required)
     * @param $filter OData filter. Optional. (optional)
     * @param $top The number of items to return. Optional. (optional)
     * @param $skip The number of items to skip over before returning elements. Optional. (optional)
     * @param $select OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select&#x3D;CategoryName,Description. Optional. (optional)
     * @param $orderby OrderBy clause. One or more comma-separated expressions with an optional \&quot;asc\&quot; (the default) or \&quot;desc\&quot; depending on the order you&#39;d like the values sorted, e.g. Categories?$orderby&#x3D;CategoryName desc. Optional. (optional)
     * @param $count The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count&#x3D;true. Optional. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of table partitions in the specified database, schema, and table. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call catalogListTablePartitionsAsync(String databaseName, String schemaName, String tableName, String apiVersion, String $filter, Integer $top, Integer $skip, String $select, String $orderby, Boolean $count, final ApiCallback<USqlTablePartitionList> _callback) throws ApiException {

        okhttp3.Call localVarCall = catalogListTablePartitionsValidateBeforeCall(databaseName, schemaName, tableName, apiVersion, $filter, $top, $skip, $select, $orderby, $count, _callback);
        Type localVarReturnType = new TypeToken<USqlTablePartitionList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for catalogListTableStatistics
     * @param databaseName The name of the database containing the statistics. (required)
     * @param schemaName The name of the schema containing the statistics. (required)
     * @param tableName The name of the table containing the statistics. (required)
     * @param apiVersion Client Api Version. (required)
     * @param $filter OData filter. Optional. (optional)
     * @param $top The number of items to return. Optional. (optional)
     * @param $skip The number of items to skip over before returning elements. Optional. (optional)
     * @param $select OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select&#x3D;CategoryName,Description. Optional. (optional)
     * @param $orderby OrderBy clause. One or more comma-separated expressions with an optional \&quot;asc\&quot; (the default) or \&quot;desc\&quot; depending on the order you&#39;d like the values sorted, e.g. Categories?$orderby&#x3D;CategoryName desc. Optional. (optional)
     * @param $count The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count&#x3D;true. Optional. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of table statistics in the specified database and schema. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call catalogListTableStatisticsCall(String databaseName, String schemaName, String tableName, String apiVersion, String $filter, Integer $top, Integer $skip, String $select, String $orderby, Boolean $count, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/catalog/usql/databases/{databaseName}/schemas/{schemaName}/tables/{tableName}/statistics"
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()))
            .replace("{" + "schemaName" + "}", localVarApiClient.escapeString(schemaName.toString()))
            .replace("{" + "tableName" + "}", localVarApiClient.escapeString(tableName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if ($top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$top", $top));
        }

        if ($skip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$skip", $skip));
        }

        if ($select != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$select", $select));
        }

        if ($orderby != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$orderby", $orderby));
        }

        if ($count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$count", $count));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call catalogListTableStatisticsValidateBeforeCall(String databaseName, String schemaName, String tableName, String apiVersion, String $filter, Integer $top, Integer $skip, String $select, String $orderby, Boolean $count, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling catalogListTableStatistics(Async)");
        }

        // verify the required parameter 'schemaName' is set
        if (schemaName == null) {
            throw new ApiException("Missing the required parameter 'schemaName' when calling catalogListTableStatistics(Async)");
        }

        // verify the required parameter 'tableName' is set
        if (tableName == null) {
            throw new ApiException("Missing the required parameter 'tableName' when calling catalogListTableStatistics(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling catalogListTableStatistics(Async)");
        }

        return catalogListTableStatisticsCall(databaseName, schemaName, tableName, apiVersion, $filter, $top, $skip, $select, $orderby, $count, _callback);

    }

    /**
     * 
     * Retrieves the list of table statistics from the Data Lake Analytics catalog.
     * @param databaseName The name of the database containing the statistics. (required)
     * @param schemaName The name of the schema containing the statistics. (required)
     * @param tableName The name of the table containing the statistics. (required)
     * @param apiVersion Client Api Version. (required)
     * @param $filter OData filter. Optional. (optional)
     * @param $top The number of items to return. Optional. (optional)
     * @param $skip The number of items to skip over before returning elements. Optional. (optional)
     * @param $select OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select&#x3D;CategoryName,Description. Optional. (optional)
     * @param $orderby OrderBy clause. One or more comma-separated expressions with an optional \&quot;asc\&quot; (the default) or \&quot;desc\&quot; depending on the order you&#39;d like the values sorted, e.g. Categories?$orderby&#x3D;CategoryName desc. Optional. (optional)
     * @param $count The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count&#x3D;true. Optional. (optional)
     * @return USqlTableStatisticsList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of table statistics in the specified database and schema. </td><td>  -  </td></tr>
     </table>
     */
    public USqlTableStatisticsList catalogListTableStatistics(String databaseName, String schemaName, String tableName, String apiVersion, String $filter, Integer $top, Integer $skip, String $select, String $orderby, Boolean $count) throws ApiException {
        ApiResponse<USqlTableStatisticsList> localVarResp = catalogListTableStatisticsWithHttpInfo(databaseName, schemaName, tableName, apiVersion, $filter, $top, $skip, $select, $orderby, $count);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves the list of table statistics from the Data Lake Analytics catalog.
     * @param databaseName The name of the database containing the statistics. (required)
     * @param schemaName The name of the schema containing the statistics. (required)
     * @param tableName The name of the table containing the statistics. (required)
     * @param apiVersion Client Api Version. (required)
     * @param $filter OData filter. Optional. (optional)
     * @param $top The number of items to return. Optional. (optional)
     * @param $skip The number of items to skip over before returning elements. Optional. (optional)
     * @param $select OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select&#x3D;CategoryName,Description. Optional. (optional)
     * @param $orderby OrderBy clause. One or more comma-separated expressions with an optional \&quot;asc\&quot; (the default) or \&quot;desc\&quot; depending on the order you&#39;d like the values sorted, e.g. Categories?$orderby&#x3D;CategoryName desc. Optional. (optional)
     * @param $count The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count&#x3D;true. Optional. (optional)
     * @return ApiResponse&lt;USqlTableStatisticsList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of table statistics in the specified database and schema. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<USqlTableStatisticsList> catalogListTableStatisticsWithHttpInfo(String databaseName, String schemaName, String tableName, String apiVersion, String $filter, Integer $top, Integer $skip, String $select, String $orderby, Boolean $count) throws ApiException {
        okhttp3.Call localVarCall = catalogListTableStatisticsValidateBeforeCall(databaseName, schemaName, tableName, apiVersion, $filter, $top, $skip, $select, $orderby, $count, null);
        Type localVarReturnType = new TypeToken<USqlTableStatisticsList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves the list of table statistics from the Data Lake Analytics catalog.
     * @param databaseName The name of the database containing the statistics. (required)
     * @param schemaName The name of the schema containing the statistics. (required)
     * @param tableName The name of the table containing the statistics. (required)
     * @param apiVersion Client Api Version. (required)
     * @param $filter OData filter. Optional. (optional)
     * @param $top The number of items to return. Optional. (optional)
     * @param $skip The number of items to skip over before returning elements. Optional. (optional)
     * @param $select OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select&#x3D;CategoryName,Description. Optional. (optional)
     * @param $orderby OrderBy clause. One or more comma-separated expressions with an optional \&quot;asc\&quot; (the default) or \&quot;desc\&quot; depending on the order you&#39;d like the values sorted, e.g. Categories?$orderby&#x3D;CategoryName desc. Optional. (optional)
     * @param $count The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count&#x3D;true. Optional. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of table statistics in the specified database and schema. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call catalogListTableStatisticsAsync(String databaseName, String schemaName, String tableName, String apiVersion, String $filter, Integer $top, Integer $skip, String $select, String $orderby, Boolean $count, final ApiCallback<USqlTableStatisticsList> _callback) throws ApiException {

        okhttp3.Call localVarCall = catalogListTableStatisticsValidateBeforeCall(databaseName, schemaName, tableName, apiVersion, $filter, $top, $skip, $select, $orderby, $count, _callback);
        Type localVarReturnType = new TypeToken<USqlTableStatisticsList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for catalogListTableStatisticsByDatabase
     * @param databaseName The name of the database containing the table statistics. (required)
     * @param apiVersion Client Api Version. (required)
     * @param $filter OData filter. Optional. (optional)
     * @param $top The number of items to return. Optional. (optional)
     * @param $skip The number of items to skip over before returning elements. Optional. (optional)
     * @param $select OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select&#x3D;CategoryName,Description. Optional. (optional)
     * @param $orderby OrderBy clause. One or more comma-separated expressions with an optional \&quot;asc\&quot; (the default) or \&quot;desc\&quot; depending on the order you&#39;d like the values sorted, e.g. Categories?$orderby&#x3D;CategoryName desc. Optional. (optional)
     * @param $count The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count&#x3D;true. Optional. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of all table statistics in the specified database. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call catalogListTableStatisticsByDatabaseCall(String databaseName, String apiVersion, String $filter, Integer $top, Integer $skip, String $select, String $orderby, Boolean $count, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/catalog/usql/databases/{databaseName}/statistics"
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if ($top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$top", $top));
        }

        if ($skip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$skip", $skip));
        }

        if ($select != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$select", $select));
        }

        if ($orderby != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$orderby", $orderby));
        }

        if ($count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$count", $count));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call catalogListTableStatisticsByDatabaseValidateBeforeCall(String databaseName, String apiVersion, String $filter, Integer $top, Integer $skip, String $select, String $orderby, Boolean $count, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling catalogListTableStatisticsByDatabase(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling catalogListTableStatisticsByDatabase(Async)");
        }

        return catalogListTableStatisticsByDatabaseCall(databaseName, apiVersion, $filter, $top, $skip, $select, $orderby, $count, _callback);

    }

    /**
     * 
     * Retrieves the list of all statistics in a database from the Data Lake Analytics catalog.
     * @param databaseName The name of the database containing the table statistics. (required)
     * @param apiVersion Client Api Version. (required)
     * @param $filter OData filter. Optional. (optional)
     * @param $top The number of items to return. Optional. (optional)
     * @param $skip The number of items to skip over before returning elements. Optional. (optional)
     * @param $select OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select&#x3D;CategoryName,Description. Optional. (optional)
     * @param $orderby OrderBy clause. One or more comma-separated expressions with an optional \&quot;asc\&quot; (the default) or \&quot;desc\&quot; depending on the order you&#39;d like the values sorted, e.g. Categories?$orderby&#x3D;CategoryName desc. Optional. (optional)
     * @param $count The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count&#x3D;true. Optional. (optional)
     * @return USqlTableStatisticsList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of all table statistics in the specified database. </td><td>  -  </td></tr>
     </table>
     */
    public USqlTableStatisticsList catalogListTableStatisticsByDatabase(String databaseName, String apiVersion, String $filter, Integer $top, Integer $skip, String $select, String $orderby, Boolean $count) throws ApiException {
        ApiResponse<USqlTableStatisticsList> localVarResp = catalogListTableStatisticsByDatabaseWithHttpInfo(databaseName, apiVersion, $filter, $top, $skip, $select, $orderby, $count);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves the list of all statistics in a database from the Data Lake Analytics catalog.
     * @param databaseName The name of the database containing the table statistics. (required)
     * @param apiVersion Client Api Version. (required)
     * @param $filter OData filter. Optional. (optional)
     * @param $top The number of items to return. Optional. (optional)
     * @param $skip The number of items to skip over before returning elements. Optional. (optional)
     * @param $select OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select&#x3D;CategoryName,Description. Optional. (optional)
     * @param $orderby OrderBy clause. One or more comma-separated expressions with an optional \&quot;asc\&quot; (the default) or \&quot;desc\&quot; depending on the order you&#39;d like the values sorted, e.g. Categories?$orderby&#x3D;CategoryName desc. Optional. (optional)
     * @param $count The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count&#x3D;true. Optional. (optional)
     * @return ApiResponse&lt;USqlTableStatisticsList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of all table statistics in the specified database. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<USqlTableStatisticsList> catalogListTableStatisticsByDatabaseWithHttpInfo(String databaseName, String apiVersion, String $filter, Integer $top, Integer $skip, String $select, String $orderby, Boolean $count) throws ApiException {
        okhttp3.Call localVarCall = catalogListTableStatisticsByDatabaseValidateBeforeCall(databaseName, apiVersion, $filter, $top, $skip, $select, $orderby, $count, null);
        Type localVarReturnType = new TypeToken<USqlTableStatisticsList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves the list of all statistics in a database from the Data Lake Analytics catalog.
     * @param databaseName The name of the database containing the table statistics. (required)
     * @param apiVersion Client Api Version. (required)
     * @param $filter OData filter. Optional. (optional)
     * @param $top The number of items to return. Optional. (optional)
     * @param $skip The number of items to skip over before returning elements. Optional. (optional)
     * @param $select OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select&#x3D;CategoryName,Description. Optional. (optional)
     * @param $orderby OrderBy clause. One or more comma-separated expressions with an optional \&quot;asc\&quot; (the default) or \&quot;desc\&quot; depending on the order you&#39;d like the values sorted, e.g. Categories?$orderby&#x3D;CategoryName desc. Optional. (optional)
     * @param $count The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count&#x3D;true. Optional. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of all table statistics in the specified database. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call catalogListTableStatisticsByDatabaseAsync(String databaseName, String apiVersion, String $filter, Integer $top, Integer $skip, String $select, String $orderby, Boolean $count, final ApiCallback<USqlTableStatisticsList> _callback) throws ApiException {

        okhttp3.Call localVarCall = catalogListTableStatisticsByDatabaseValidateBeforeCall(databaseName, apiVersion, $filter, $top, $skip, $select, $orderby, $count, _callback);
        Type localVarReturnType = new TypeToken<USqlTableStatisticsList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for catalogListTableStatisticsByDatabaseAndSchema
     * @param databaseName The name of the database containing the statistics. (required)
     * @param schemaName The name of the schema containing the statistics. (required)
     * @param apiVersion Client Api Version. (required)
     * @param $filter OData filter. Optional. (optional)
     * @param $top The number of items to return. Optional. (optional)
     * @param $skip The number of items to skip over before returning elements. Optional. (optional)
     * @param $select OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select&#x3D;CategoryName,Description. Optional. (optional)
     * @param $orderby OrderBy clause. One or more comma-separated expressions with an optional \&quot;asc\&quot; (the default) or \&quot;desc\&quot; depending on the order you&#39;d like the values sorted, e.g. Categories?$orderby&#x3D;CategoryName desc. Optional. (optional)
     * @param $count The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count&#x3D;true. Optional. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of all table statistics in the specified database and schema. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call catalogListTableStatisticsByDatabaseAndSchemaCall(String databaseName, String schemaName, String apiVersion, String $filter, Integer $top, Integer $skip, String $select, String $orderby, Boolean $count, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/catalog/usql/databases/{databaseName}/schemas/{schemaName}/statistics"
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()))
            .replace("{" + "schemaName" + "}", localVarApiClient.escapeString(schemaName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if ($top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$top", $top));
        }

        if ($skip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$skip", $skip));
        }

        if ($select != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$select", $select));
        }

        if ($orderby != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$orderby", $orderby));
        }

        if ($count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$count", $count));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call catalogListTableStatisticsByDatabaseAndSchemaValidateBeforeCall(String databaseName, String schemaName, String apiVersion, String $filter, Integer $top, Integer $skip, String $select, String $orderby, Boolean $count, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling catalogListTableStatisticsByDatabaseAndSchema(Async)");
        }

        // verify the required parameter 'schemaName' is set
        if (schemaName == null) {
            throw new ApiException("Missing the required parameter 'schemaName' when calling catalogListTableStatisticsByDatabaseAndSchema(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling catalogListTableStatisticsByDatabaseAndSchema(Async)");
        }

        return catalogListTableStatisticsByDatabaseAndSchemaCall(databaseName, schemaName, apiVersion, $filter, $top, $skip, $select, $orderby, $count, _callback);

    }

    /**
     * 
     * Retrieves the list of all table statistics within the specified schema from the Data Lake Analytics catalog.
     * @param databaseName The name of the database containing the statistics. (required)
     * @param schemaName The name of the schema containing the statistics. (required)
     * @param apiVersion Client Api Version. (required)
     * @param $filter OData filter. Optional. (optional)
     * @param $top The number of items to return. Optional. (optional)
     * @param $skip The number of items to skip over before returning elements. Optional. (optional)
     * @param $select OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select&#x3D;CategoryName,Description. Optional. (optional)
     * @param $orderby OrderBy clause. One or more comma-separated expressions with an optional \&quot;asc\&quot; (the default) or \&quot;desc\&quot; depending on the order you&#39;d like the values sorted, e.g. Categories?$orderby&#x3D;CategoryName desc. Optional. (optional)
     * @param $count The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count&#x3D;true. Optional. (optional)
     * @return USqlTableStatisticsList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of all table statistics in the specified database and schema. </td><td>  -  </td></tr>
     </table>
     */
    public USqlTableStatisticsList catalogListTableStatisticsByDatabaseAndSchema(String databaseName, String schemaName, String apiVersion, String $filter, Integer $top, Integer $skip, String $select, String $orderby, Boolean $count) throws ApiException {
        ApiResponse<USqlTableStatisticsList> localVarResp = catalogListTableStatisticsByDatabaseAndSchemaWithHttpInfo(databaseName, schemaName, apiVersion, $filter, $top, $skip, $select, $orderby, $count);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves the list of all table statistics within the specified schema from the Data Lake Analytics catalog.
     * @param databaseName The name of the database containing the statistics. (required)
     * @param schemaName The name of the schema containing the statistics. (required)
     * @param apiVersion Client Api Version. (required)
     * @param $filter OData filter. Optional. (optional)
     * @param $top The number of items to return. Optional. (optional)
     * @param $skip The number of items to skip over before returning elements. Optional. (optional)
     * @param $select OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select&#x3D;CategoryName,Description. Optional. (optional)
     * @param $orderby OrderBy clause. One or more comma-separated expressions with an optional \&quot;asc\&quot; (the default) or \&quot;desc\&quot; depending on the order you&#39;d like the values sorted, e.g. Categories?$orderby&#x3D;CategoryName desc. Optional. (optional)
     * @param $count The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count&#x3D;true. Optional. (optional)
     * @return ApiResponse&lt;USqlTableStatisticsList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of all table statistics in the specified database and schema. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<USqlTableStatisticsList> catalogListTableStatisticsByDatabaseAndSchemaWithHttpInfo(String databaseName, String schemaName, String apiVersion, String $filter, Integer $top, Integer $skip, String $select, String $orderby, Boolean $count) throws ApiException {
        okhttp3.Call localVarCall = catalogListTableStatisticsByDatabaseAndSchemaValidateBeforeCall(databaseName, schemaName, apiVersion, $filter, $top, $skip, $select, $orderby, $count, null);
        Type localVarReturnType = new TypeToken<USqlTableStatisticsList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves the list of all table statistics within the specified schema from the Data Lake Analytics catalog.
     * @param databaseName The name of the database containing the statistics. (required)
     * @param schemaName The name of the schema containing the statistics. (required)
     * @param apiVersion Client Api Version. (required)
     * @param $filter OData filter. Optional. (optional)
     * @param $top The number of items to return. Optional. (optional)
     * @param $skip The number of items to skip over before returning elements. Optional. (optional)
     * @param $select OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select&#x3D;CategoryName,Description. Optional. (optional)
     * @param $orderby OrderBy clause. One or more comma-separated expressions with an optional \&quot;asc\&quot; (the default) or \&quot;desc\&quot; depending on the order you&#39;d like the values sorted, e.g. Categories?$orderby&#x3D;CategoryName desc. Optional. (optional)
     * @param $count The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count&#x3D;true. Optional. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of all table statistics in the specified database and schema. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call catalogListTableStatisticsByDatabaseAndSchemaAsync(String databaseName, String schemaName, String apiVersion, String $filter, Integer $top, Integer $skip, String $select, String $orderby, Boolean $count, final ApiCallback<USqlTableStatisticsList> _callback) throws ApiException {

        okhttp3.Call localVarCall = catalogListTableStatisticsByDatabaseAndSchemaValidateBeforeCall(databaseName, schemaName, apiVersion, $filter, $top, $skip, $select, $orderby, $count, _callback);
        Type localVarReturnType = new TypeToken<USqlTableStatisticsList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for catalogListTableTypes
     * @param databaseName The name of the database containing the table types. (required)
     * @param schemaName The name of the schema containing the table types. (required)
     * @param apiVersion Client Api Version. (required)
     * @param $filter OData filter. Optional. (optional)
     * @param $top The number of items to return. Optional. (optional)
     * @param $skip The number of items to skip over before returning elements. Optional. (optional)
     * @param $select OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select&#x3D;CategoryName,Description. Optional. (optional)
     * @param $orderby OrderBy clause. One or more comma-separated expressions with an optional \&quot;asc\&quot; (the default) or \&quot;desc\&quot; depending on the order you&#39;d like the values sorted, e.g. Categories?$orderby&#x3D;CategoryName desc. Optional. (optional)
     * @param $count The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count&#x3D;true. Optional. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of table types in the specified database and schema. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call catalogListTableTypesCall(String databaseName, String schemaName, String apiVersion, String $filter, Integer $top, Integer $skip, String $select, String $orderby, Boolean $count, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/catalog/usql/databases/{databaseName}/schemas/{schemaName}/tabletypes"
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()))
            .replace("{" + "schemaName" + "}", localVarApiClient.escapeString(schemaName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if ($top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$top", $top));
        }

        if ($skip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$skip", $skip));
        }

        if ($select != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$select", $select));
        }

        if ($orderby != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$orderby", $orderby));
        }

        if ($count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$count", $count));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call catalogListTableTypesValidateBeforeCall(String databaseName, String schemaName, String apiVersion, String $filter, Integer $top, Integer $skip, String $select, String $orderby, Boolean $count, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling catalogListTableTypes(Async)");
        }

        // verify the required parameter 'schemaName' is set
        if (schemaName == null) {
            throw new ApiException("Missing the required parameter 'schemaName' when calling catalogListTableTypes(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling catalogListTableTypes(Async)");
        }

        return catalogListTableTypesCall(databaseName, schemaName, apiVersion, $filter, $top, $skip, $select, $orderby, $count, _callback);

    }

    /**
     * 
     * Retrieves the list of table types from the Data Lake Analytics catalog.
     * @param databaseName The name of the database containing the table types. (required)
     * @param schemaName The name of the schema containing the table types. (required)
     * @param apiVersion Client Api Version. (required)
     * @param $filter OData filter. Optional. (optional)
     * @param $top The number of items to return. Optional. (optional)
     * @param $skip The number of items to skip over before returning elements. Optional. (optional)
     * @param $select OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select&#x3D;CategoryName,Description. Optional. (optional)
     * @param $orderby OrderBy clause. One or more comma-separated expressions with an optional \&quot;asc\&quot; (the default) or \&quot;desc\&quot; depending on the order you&#39;d like the values sorted, e.g. Categories?$orderby&#x3D;CategoryName desc. Optional. (optional)
     * @param $count The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count&#x3D;true. Optional. (optional)
     * @return USqlTableTypeList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of table types in the specified database and schema. </td><td>  -  </td></tr>
     </table>
     */
    public USqlTableTypeList catalogListTableTypes(String databaseName, String schemaName, String apiVersion, String $filter, Integer $top, Integer $skip, String $select, String $orderby, Boolean $count) throws ApiException {
        ApiResponse<USqlTableTypeList> localVarResp = catalogListTableTypesWithHttpInfo(databaseName, schemaName, apiVersion, $filter, $top, $skip, $select, $orderby, $count);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves the list of table types from the Data Lake Analytics catalog.
     * @param databaseName The name of the database containing the table types. (required)
     * @param schemaName The name of the schema containing the table types. (required)
     * @param apiVersion Client Api Version. (required)
     * @param $filter OData filter. Optional. (optional)
     * @param $top The number of items to return. Optional. (optional)
     * @param $skip The number of items to skip over before returning elements. Optional. (optional)
     * @param $select OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select&#x3D;CategoryName,Description. Optional. (optional)
     * @param $orderby OrderBy clause. One or more comma-separated expressions with an optional \&quot;asc\&quot; (the default) or \&quot;desc\&quot; depending on the order you&#39;d like the values sorted, e.g. Categories?$orderby&#x3D;CategoryName desc. Optional. (optional)
     * @param $count The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count&#x3D;true. Optional. (optional)
     * @return ApiResponse&lt;USqlTableTypeList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of table types in the specified database and schema. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<USqlTableTypeList> catalogListTableTypesWithHttpInfo(String databaseName, String schemaName, String apiVersion, String $filter, Integer $top, Integer $skip, String $select, String $orderby, Boolean $count) throws ApiException {
        okhttp3.Call localVarCall = catalogListTableTypesValidateBeforeCall(databaseName, schemaName, apiVersion, $filter, $top, $skip, $select, $orderby, $count, null);
        Type localVarReturnType = new TypeToken<USqlTableTypeList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves the list of table types from the Data Lake Analytics catalog.
     * @param databaseName The name of the database containing the table types. (required)
     * @param schemaName The name of the schema containing the table types. (required)
     * @param apiVersion Client Api Version. (required)
     * @param $filter OData filter. Optional. (optional)
     * @param $top The number of items to return. Optional. (optional)
     * @param $skip The number of items to skip over before returning elements. Optional. (optional)
     * @param $select OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select&#x3D;CategoryName,Description. Optional. (optional)
     * @param $orderby OrderBy clause. One or more comma-separated expressions with an optional \&quot;asc\&quot; (the default) or \&quot;desc\&quot; depending on the order you&#39;d like the values sorted, e.g. Categories?$orderby&#x3D;CategoryName desc. Optional. (optional)
     * @param $count The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count&#x3D;true. Optional. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of table types in the specified database and schema. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call catalogListTableTypesAsync(String databaseName, String schemaName, String apiVersion, String $filter, Integer $top, Integer $skip, String $select, String $orderby, Boolean $count, final ApiCallback<USqlTableTypeList> _callback) throws ApiException {

        okhttp3.Call localVarCall = catalogListTableTypesValidateBeforeCall(databaseName, schemaName, apiVersion, $filter, $top, $skip, $select, $orderby, $count, _callback);
        Type localVarReturnType = new TypeToken<USqlTableTypeList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for catalogListTableValuedFunctions
     * @param databaseName The name of the database containing the table valued functions. (required)
     * @param schemaName The name of the schema containing the table valued functions. (required)
     * @param apiVersion Client Api Version. (required)
     * @param $filter OData filter. Optional. (optional)
     * @param $top The number of items to return. Optional. (optional)
     * @param $skip The number of items to skip over before returning elements. Optional. (optional)
     * @param $select OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select&#x3D;CategoryName,Description. Optional. (optional)
     * @param $orderby OrderBy clause. One or more comma-separated expressions with an optional \&quot;asc\&quot; (the default) or \&quot;desc\&quot; depending on the order you&#39;d like the values sorted, e.g. Categories?$orderby&#x3D;CategoryName desc. Optional. (optional)
     * @param $count The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count&#x3D;true. Optional. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of table valued functions in the specified database and schema. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call catalogListTableValuedFunctionsCall(String databaseName, String schemaName, String apiVersion, String $filter, Integer $top, Integer $skip, String $select, String $orderby, Boolean $count, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/catalog/usql/databases/{databaseName}/schemas/{schemaName}/tablevaluedfunctions"
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()))
            .replace("{" + "schemaName" + "}", localVarApiClient.escapeString(schemaName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if ($top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$top", $top));
        }

        if ($skip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$skip", $skip));
        }

        if ($select != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$select", $select));
        }

        if ($orderby != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$orderby", $orderby));
        }

        if ($count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$count", $count));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call catalogListTableValuedFunctionsValidateBeforeCall(String databaseName, String schemaName, String apiVersion, String $filter, Integer $top, Integer $skip, String $select, String $orderby, Boolean $count, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling catalogListTableValuedFunctions(Async)");
        }

        // verify the required parameter 'schemaName' is set
        if (schemaName == null) {
            throw new ApiException("Missing the required parameter 'schemaName' when calling catalogListTableValuedFunctions(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling catalogListTableValuedFunctions(Async)");
        }

        return catalogListTableValuedFunctionsCall(databaseName, schemaName, apiVersion, $filter, $top, $skip, $select, $orderby, $count, _callback);

    }

    /**
     * 
     * Retrieves the list of table valued functions from the Data Lake Analytics catalog.
     * @param databaseName The name of the database containing the table valued functions. (required)
     * @param schemaName The name of the schema containing the table valued functions. (required)
     * @param apiVersion Client Api Version. (required)
     * @param $filter OData filter. Optional. (optional)
     * @param $top The number of items to return. Optional. (optional)
     * @param $skip The number of items to skip over before returning elements. Optional. (optional)
     * @param $select OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select&#x3D;CategoryName,Description. Optional. (optional)
     * @param $orderby OrderBy clause. One or more comma-separated expressions with an optional \&quot;asc\&quot; (the default) or \&quot;desc\&quot; depending on the order you&#39;d like the values sorted, e.g. Categories?$orderby&#x3D;CategoryName desc. Optional. (optional)
     * @param $count The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count&#x3D;true. Optional. (optional)
     * @return USqlTableValuedFunctionList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of table valued functions in the specified database and schema. </td><td>  -  </td></tr>
     </table>
     */
    public USqlTableValuedFunctionList catalogListTableValuedFunctions(String databaseName, String schemaName, String apiVersion, String $filter, Integer $top, Integer $skip, String $select, String $orderby, Boolean $count) throws ApiException {
        ApiResponse<USqlTableValuedFunctionList> localVarResp = catalogListTableValuedFunctionsWithHttpInfo(databaseName, schemaName, apiVersion, $filter, $top, $skip, $select, $orderby, $count);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves the list of table valued functions from the Data Lake Analytics catalog.
     * @param databaseName The name of the database containing the table valued functions. (required)
     * @param schemaName The name of the schema containing the table valued functions. (required)
     * @param apiVersion Client Api Version. (required)
     * @param $filter OData filter. Optional. (optional)
     * @param $top The number of items to return. Optional. (optional)
     * @param $skip The number of items to skip over before returning elements. Optional. (optional)
     * @param $select OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select&#x3D;CategoryName,Description. Optional. (optional)
     * @param $orderby OrderBy clause. One or more comma-separated expressions with an optional \&quot;asc\&quot; (the default) or \&quot;desc\&quot; depending on the order you&#39;d like the values sorted, e.g. Categories?$orderby&#x3D;CategoryName desc. Optional. (optional)
     * @param $count The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count&#x3D;true. Optional. (optional)
     * @return ApiResponse&lt;USqlTableValuedFunctionList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of table valued functions in the specified database and schema. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<USqlTableValuedFunctionList> catalogListTableValuedFunctionsWithHttpInfo(String databaseName, String schemaName, String apiVersion, String $filter, Integer $top, Integer $skip, String $select, String $orderby, Boolean $count) throws ApiException {
        okhttp3.Call localVarCall = catalogListTableValuedFunctionsValidateBeforeCall(databaseName, schemaName, apiVersion, $filter, $top, $skip, $select, $orderby, $count, null);
        Type localVarReturnType = new TypeToken<USqlTableValuedFunctionList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves the list of table valued functions from the Data Lake Analytics catalog.
     * @param databaseName The name of the database containing the table valued functions. (required)
     * @param schemaName The name of the schema containing the table valued functions. (required)
     * @param apiVersion Client Api Version. (required)
     * @param $filter OData filter. Optional. (optional)
     * @param $top The number of items to return. Optional. (optional)
     * @param $skip The number of items to skip over before returning elements. Optional. (optional)
     * @param $select OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select&#x3D;CategoryName,Description. Optional. (optional)
     * @param $orderby OrderBy clause. One or more comma-separated expressions with an optional \&quot;asc\&quot; (the default) or \&quot;desc\&quot; depending on the order you&#39;d like the values sorted, e.g. Categories?$orderby&#x3D;CategoryName desc. Optional. (optional)
     * @param $count The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count&#x3D;true. Optional. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of table valued functions in the specified database and schema. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call catalogListTableValuedFunctionsAsync(String databaseName, String schemaName, String apiVersion, String $filter, Integer $top, Integer $skip, String $select, String $orderby, Boolean $count, final ApiCallback<USqlTableValuedFunctionList> _callback) throws ApiException {

        okhttp3.Call localVarCall = catalogListTableValuedFunctionsValidateBeforeCall(databaseName, schemaName, apiVersion, $filter, $top, $skip, $select, $orderby, $count, _callback);
        Type localVarReturnType = new TypeToken<USqlTableValuedFunctionList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for catalogListTableValuedFunctionsByDatabase
     * @param databaseName The name of the database containing the table valued functions. (required)
     * @param apiVersion Client Api Version. (required)
     * @param $filter OData filter. Optional. (optional)
     * @param $top The number of items to return. Optional. (optional)
     * @param $skip The number of items to skip over before returning elements. Optional. (optional)
     * @param $select OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select&#x3D;CategoryName,Description. Optional. (optional)
     * @param $orderby OrderBy clause. One or more comma-separated expressions with an optional \&quot;asc\&quot; (the default) or \&quot;desc\&quot; depending on the order you&#39;d like the values sorted, e.g. Categories?$orderby&#x3D;CategoryName desc. Optional. (optional)
     * @param $count The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count&#x3D;true. Optional. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of all table valued functions in the specified database. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call catalogListTableValuedFunctionsByDatabaseCall(String databaseName, String apiVersion, String $filter, Integer $top, Integer $skip, String $select, String $orderby, Boolean $count, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/catalog/usql/databases/{databaseName}/tablevaluedfunctions"
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if ($top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$top", $top));
        }

        if ($skip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$skip", $skip));
        }

        if ($select != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$select", $select));
        }

        if ($orderby != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$orderby", $orderby));
        }

        if ($count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$count", $count));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call catalogListTableValuedFunctionsByDatabaseValidateBeforeCall(String databaseName, String apiVersion, String $filter, Integer $top, Integer $skip, String $select, String $orderby, Boolean $count, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling catalogListTableValuedFunctionsByDatabase(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling catalogListTableValuedFunctionsByDatabase(Async)");
        }

        return catalogListTableValuedFunctionsByDatabaseCall(databaseName, apiVersion, $filter, $top, $skip, $select, $orderby, $count, _callback);

    }

    /**
     * 
     * Retrieves the list of all table valued functions in a database from the Data Lake Analytics catalog.
     * @param databaseName The name of the database containing the table valued functions. (required)
     * @param apiVersion Client Api Version. (required)
     * @param $filter OData filter. Optional. (optional)
     * @param $top The number of items to return. Optional. (optional)
     * @param $skip The number of items to skip over before returning elements. Optional. (optional)
     * @param $select OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select&#x3D;CategoryName,Description. Optional. (optional)
     * @param $orderby OrderBy clause. One or more comma-separated expressions with an optional \&quot;asc\&quot; (the default) or \&quot;desc\&quot; depending on the order you&#39;d like the values sorted, e.g. Categories?$orderby&#x3D;CategoryName desc. Optional. (optional)
     * @param $count The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count&#x3D;true. Optional. (optional)
     * @return USqlTableValuedFunctionList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of all table valued functions in the specified database. </td><td>  -  </td></tr>
     </table>
     */
    public USqlTableValuedFunctionList catalogListTableValuedFunctionsByDatabase(String databaseName, String apiVersion, String $filter, Integer $top, Integer $skip, String $select, String $orderby, Boolean $count) throws ApiException {
        ApiResponse<USqlTableValuedFunctionList> localVarResp = catalogListTableValuedFunctionsByDatabaseWithHttpInfo(databaseName, apiVersion, $filter, $top, $skip, $select, $orderby, $count);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves the list of all table valued functions in a database from the Data Lake Analytics catalog.
     * @param databaseName The name of the database containing the table valued functions. (required)
     * @param apiVersion Client Api Version. (required)
     * @param $filter OData filter. Optional. (optional)
     * @param $top The number of items to return. Optional. (optional)
     * @param $skip The number of items to skip over before returning elements. Optional. (optional)
     * @param $select OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select&#x3D;CategoryName,Description. Optional. (optional)
     * @param $orderby OrderBy clause. One or more comma-separated expressions with an optional \&quot;asc\&quot; (the default) or \&quot;desc\&quot; depending on the order you&#39;d like the values sorted, e.g. Categories?$orderby&#x3D;CategoryName desc. Optional. (optional)
     * @param $count The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count&#x3D;true. Optional. (optional)
     * @return ApiResponse&lt;USqlTableValuedFunctionList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of all table valued functions in the specified database. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<USqlTableValuedFunctionList> catalogListTableValuedFunctionsByDatabaseWithHttpInfo(String databaseName, String apiVersion, String $filter, Integer $top, Integer $skip, String $select, String $orderby, Boolean $count) throws ApiException {
        okhttp3.Call localVarCall = catalogListTableValuedFunctionsByDatabaseValidateBeforeCall(databaseName, apiVersion, $filter, $top, $skip, $select, $orderby, $count, null);
        Type localVarReturnType = new TypeToken<USqlTableValuedFunctionList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves the list of all table valued functions in a database from the Data Lake Analytics catalog.
     * @param databaseName The name of the database containing the table valued functions. (required)
     * @param apiVersion Client Api Version. (required)
     * @param $filter OData filter. Optional. (optional)
     * @param $top The number of items to return. Optional. (optional)
     * @param $skip The number of items to skip over before returning elements. Optional. (optional)
     * @param $select OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select&#x3D;CategoryName,Description. Optional. (optional)
     * @param $orderby OrderBy clause. One or more comma-separated expressions with an optional \&quot;asc\&quot; (the default) or \&quot;desc\&quot; depending on the order you&#39;d like the values sorted, e.g. Categories?$orderby&#x3D;CategoryName desc. Optional. (optional)
     * @param $count The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count&#x3D;true. Optional. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of all table valued functions in the specified database. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call catalogListTableValuedFunctionsByDatabaseAsync(String databaseName, String apiVersion, String $filter, Integer $top, Integer $skip, String $select, String $orderby, Boolean $count, final ApiCallback<USqlTableValuedFunctionList> _callback) throws ApiException {

        okhttp3.Call localVarCall = catalogListTableValuedFunctionsByDatabaseValidateBeforeCall(databaseName, apiVersion, $filter, $top, $skip, $select, $orderby, $count, _callback);
        Type localVarReturnType = new TypeToken<USqlTableValuedFunctionList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for catalogListTables
     * @param databaseName The name of the database containing the tables. (required)
     * @param schemaName The name of the schema containing the tables. (required)
     * @param apiVersion Client Api Version. (required)
     * @param $filter OData filter. Optional. (optional)
     * @param $top The number of items to return. Optional. (optional)
     * @param $skip The number of items to skip over before returning elements. Optional. (optional)
     * @param $select OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select&#x3D;CategoryName,Description. Optional. (optional)
     * @param $orderby OrderBy clause. One or more comma-separated expressions with an optional \&quot;asc\&quot; (the default) or \&quot;desc\&quot; depending on the order you&#39;d like the values sorted, e.g. Categories?$orderby&#x3D;CategoryName desc. Optional. (optional)
     * @param $count The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count&#x3D;true. Optional. (optional)
     * @param basic The basic switch indicates what level of information to return when listing tables. When basic is true, only database_name, schema_name, table_name and version are returned for each table, otherwise all table metadata is returned. By default, it is false. Optional. (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of tables in the specified database and schema. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call catalogListTablesCall(String databaseName, String schemaName, String apiVersion, String $filter, Integer $top, Integer $skip, String $select, String $orderby, Boolean $count, Boolean basic, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/catalog/usql/databases/{databaseName}/schemas/{schemaName}/tables"
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()))
            .replace("{" + "schemaName" + "}", localVarApiClient.escapeString(schemaName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if ($top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$top", $top));
        }

        if ($skip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$skip", $skip));
        }

        if ($select != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$select", $select));
        }

        if ($orderby != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$orderby", $orderby));
        }

        if ($count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$count", $count));
        }

        if (basic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("basic", basic));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call catalogListTablesValidateBeforeCall(String databaseName, String schemaName, String apiVersion, String $filter, Integer $top, Integer $skip, String $select, String $orderby, Boolean $count, Boolean basic, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling catalogListTables(Async)");
        }

        // verify the required parameter 'schemaName' is set
        if (schemaName == null) {
            throw new ApiException("Missing the required parameter 'schemaName' when calling catalogListTables(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling catalogListTables(Async)");
        }

        return catalogListTablesCall(databaseName, schemaName, apiVersion, $filter, $top, $skip, $select, $orderby, $count, basic, _callback);

    }

    /**
     * 
     * Retrieves the list of tables from the Data Lake Analytics catalog.
     * @param databaseName The name of the database containing the tables. (required)
     * @param schemaName The name of the schema containing the tables. (required)
     * @param apiVersion Client Api Version. (required)
     * @param $filter OData filter. Optional. (optional)
     * @param $top The number of items to return. Optional. (optional)
     * @param $skip The number of items to skip over before returning elements. Optional. (optional)
     * @param $select OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select&#x3D;CategoryName,Description. Optional. (optional)
     * @param $orderby OrderBy clause. One or more comma-separated expressions with an optional \&quot;asc\&quot; (the default) or \&quot;desc\&quot; depending on the order you&#39;d like the values sorted, e.g. Categories?$orderby&#x3D;CategoryName desc. Optional. (optional)
     * @param $count The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count&#x3D;true. Optional. (optional)
     * @param basic The basic switch indicates what level of information to return when listing tables. When basic is true, only database_name, schema_name, table_name and version are returned for each table, otherwise all table metadata is returned. By default, it is false. Optional. (optional, default to false)
     * @return USqlTableList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of tables in the specified database and schema. </td><td>  -  </td></tr>
     </table>
     */
    public USqlTableList catalogListTables(String databaseName, String schemaName, String apiVersion, String $filter, Integer $top, Integer $skip, String $select, String $orderby, Boolean $count, Boolean basic) throws ApiException {
        ApiResponse<USqlTableList> localVarResp = catalogListTablesWithHttpInfo(databaseName, schemaName, apiVersion, $filter, $top, $skip, $select, $orderby, $count, basic);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves the list of tables from the Data Lake Analytics catalog.
     * @param databaseName The name of the database containing the tables. (required)
     * @param schemaName The name of the schema containing the tables. (required)
     * @param apiVersion Client Api Version. (required)
     * @param $filter OData filter. Optional. (optional)
     * @param $top The number of items to return. Optional. (optional)
     * @param $skip The number of items to skip over before returning elements. Optional. (optional)
     * @param $select OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select&#x3D;CategoryName,Description. Optional. (optional)
     * @param $orderby OrderBy clause. One or more comma-separated expressions with an optional \&quot;asc\&quot; (the default) or \&quot;desc\&quot; depending on the order you&#39;d like the values sorted, e.g. Categories?$orderby&#x3D;CategoryName desc. Optional. (optional)
     * @param $count The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count&#x3D;true. Optional. (optional)
     * @param basic The basic switch indicates what level of information to return when listing tables. When basic is true, only database_name, schema_name, table_name and version are returned for each table, otherwise all table metadata is returned. By default, it is false. Optional. (optional, default to false)
     * @return ApiResponse&lt;USqlTableList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of tables in the specified database and schema. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<USqlTableList> catalogListTablesWithHttpInfo(String databaseName, String schemaName, String apiVersion, String $filter, Integer $top, Integer $skip, String $select, String $orderby, Boolean $count, Boolean basic) throws ApiException {
        okhttp3.Call localVarCall = catalogListTablesValidateBeforeCall(databaseName, schemaName, apiVersion, $filter, $top, $skip, $select, $orderby, $count, basic, null);
        Type localVarReturnType = new TypeToken<USqlTableList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves the list of tables from the Data Lake Analytics catalog.
     * @param databaseName The name of the database containing the tables. (required)
     * @param schemaName The name of the schema containing the tables. (required)
     * @param apiVersion Client Api Version. (required)
     * @param $filter OData filter. Optional. (optional)
     * @param $top The number of items to return. Optional. (optional)
     * @param $skip The number of items to skip over before returning elements. Optional. (optional)
     * @param $select OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select&#x3D;CategoryName,Description. Optional. (optional)
     * @param $orderby OrderBy clause. One or more comma-separated expressions with an optional \&quot;asc\&quot; (the default) or \&quot;desc\&quot; depending on the order you&#39;d like the values sorted, e.g. Categories?$orderby&#x3D;CategoryName desc. Optional. (optional)
     * @param $count The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count&#x3D;true. Optional. (optional)
     * @param basic The basic switch indicates what level of information to return when listing tables. When basic is true, only database_name, schema_name, table_name and version are returned for each table, otherwise all table metadata is returned. By default, it is false. Optional. (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of tables in the specified database and schema. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call catalogListTablesAsync(String databaseName, String schemaName, String apiVersion, String $filter, Integer $top, Integer $skip, String $select, String $orderby, Boolean $count, Boolean basic, final ApiCallback<USqlTableList> _callback) throws ApiException {

        okhttp3.Call localVarCall = catalogListTablesValidateBeforeCall(databaseName, schemaName, apiVersion, $filter, $top, $skip, $select, $orderby, $count, basic, _callback);
        Type localVarReturnType = new TypeToken<USqlTableList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for catalogListTablesByDatabase
     * @param databaseName The name of the database containing the tables. (required)
     * @param apiVersion Client Api Version. (required)
     * @param $filter OData filter. Optional. (optional)
     * @param $top The number of items to return. Optional. (optional)
     * @param $skip The number of items to skip over before returning elements. Optional. (optional)
     * @param $select OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select&#x3D;CategoryName,Description. Optional. (optional)
     * @param $orderby OrderBy clause. One or more comma-separated expressions with an optional \&quot;asc\&quot; (the default) or \&quot;desc\&quot; depending on the order you&#39;d like the values sorted, e.g. Categories?$orderby&#x3D;CategoryName desc. Optional. (optional)
     * @param $count The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count&#x3D;true. Optional. (optional)
     * @param basic The basic switch indicates what level of information to return when listing tables. When basic is true, only database_name, schema_name, table_name and version are returned for each table, otherwise all table metadata is returned. By default, it is false (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of all tables in the specified database. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call catalogListTablesByDatabaseCall(String databaseName, String apiVersion, String $filter, Integer $top, Integer $skip, String $select, String $orderby, Boolean $count, Boolean basic, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/catalog/usql/databases/{databaseName}/tables"
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if ($top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$top", $top));
        }

        if ($skip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$skip", $skip));
        }

        if ($select != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$select", $select));
        }

        if ($orderby != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$orderby", $orderby));
        }

        if ($count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$count", $count));
        }

        if (basic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("basic", basic));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call catalogListTablesByDatabaseValidateBeforeCall(String databaseName, String apiVersion, String $filter, Integer $top, Integer $skip, String $select, String $orderby, Boolean $count, Boolean basic, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling catalogListTablesByDatabase(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling catalogListTablesByDatabase(Async)");
        }

        return catalogListTablesByDatabaseCall(databaseName, apiVersion, $filter, $top, $skip, $select, $orderby, $count, basic, _callback);

    }

    /**
     * 
     * Retrieves the list of all tables in a database from the Data Lake Analytics catalog.
     * @param databaseName The name of the database containing the tables. (required)
     * @param apiVersion Client Api Version. (required)
     * @param $filter OData filter. Optional. (optional)
     * @param $top The number of items to return. Optional. (optional)
     * @param $skip The number of items to skip over before returning elements. Optional. (optional)
     * @param $select OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select&#x3D;CategoryName,Description. Optional. (optional)
     * @param $orderby OrderBy clause. One or more comma-separated expressions with an optional \&quot;asc\&quot; (the default) or \&quot;desc\&quot; depending on the order you&#39;d like the values sorted, e.g. Categories?$orderby&#x3D;CategoryName desc. Optional. (optional)
     * @param $count The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count&#x3D;true. Optional. (optional)
     * @param basic The basic switch indicates what level of information to return when listing tables. When basic is true, only database_name, schema_name, table_name and version are returned for each table, otherwise all table metadata is returned. By default, it is false (optional, default to false)
     * @return USqlTableList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of all tables in the specified database. </td><td>  -  </td></tr>
     </table>
     */
    public USqlTableList catalogListTablesByDatabase(String databaseName, String apiVersion, String $filter, Integer $top, Integer $skip, String $select, String $orderby, Boolean $count, Boolean basic) throws ApiException {
        ApiResponse<USqlTableList> localVarResp = catalogListTablesByDatabaseWithHttpInfo(databaseName, apiVersion, $filter, $top, $skip, $select, $orderby, $count, basic);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves the list of all tables in a database from the Data Lake Analytics catalog.
     * @param databaseName The name of the database containing the tables. (required)
     * @param apiVersion Client Api Version. (required)
     * @param $filter OData filter. Optional. (optional)
     * @param $top The number of items to return. Optional. (optional)
     * @param $skip The number of items to skip over before returning elements. Optional. (optional)
     * @param $select OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select&#x3D;CategoryName,Description. Optional. (optional)
     * @param $orderby OrderBy clause. One or more comma-separated expressions with an optional \&quot;asc\&quot; (the default) or \&quot;desc\&quot; depending on the order you&#39;d like the values sorted, e.g. Categories?$orderby&#x3D;CategoryName desc. Optional. (optional)
     * @param $count The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count&#x3D;true. Optional. (optional)
     * @param basic The basic switch indicates what level of information to return when listing tables. When basic is true, only database_name, schema_name, table_name and version are returned for each table, otherwise all table metadata is returned. By default, it is false (optional, default to false)
     * @return ApiResponse&lt;USqlTableList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of all tables in the specified database. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<USqlTableList> catalogListTablesByDatabaseWithHttpInfo(String databaseName, String apiVersion, String $filter, Integer $top, Integer $skip, String $select, String $orderby, Boolean $count, Boolean basic) throws ApiException {
        okhttp3.Call localVarCall = catalogListTablesByDatabaseValidateBeforeCall(databaseName, apiVersion, $filter, $top, $skip, $select, $orderby, $count, basic, null);
        Type localVarReturnType = new TypeToken<USqlTableList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves the list of all tables in a database from the Data Lake Analytics catalog.
     * @param databaseName The name of the database containing the tables. (required)
     * @param apiVersion Client Api Version. (required)
     * @param $filter OData filter. Optional. (optional)
     * @param $top The number of items to return. Optional. (optional)
     * @param $skip The number of items to skip over before returning elements. Optional. (optional)
     * @param $select OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select&#x3D;CategoryName,Description. Optional. (optional)
     * @param $orderby OrderBy clause. One or more comma-separated expressions with an optional \&quot;asc\&quot; (the default) or \&quot;desc\&quot; depending on the order you&#39;d like the values sorted, e.g. Categories?$orderby&#x3D;CategoryName desc. Optional. (optional)
     * @param $count The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count&#x3D;true. Optional. (optional)
     * @param basic The basic switch indicates what level of information to return when listing tables. When basic is true, only database_name, schema_name, table_name and version are returned for each table, otherwise all table metadata is returned. By default, it is false (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of all tables in the specified database. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call catalogListTablesByDatabaseAsync(String databaseName, String apiVersion, String $filter, Integer $top, Integer $skip, String $select, String $orderby, Boolean $count, Boolean basic, final ApiCallback<USqlTableList> _callback) throws ApiException {

        okhttp3.Call localVarCall = catalogListTablesByDatabaseValidateBeforeCall(databaseName, apiVersion, $filter, $top, $skip, $select, $orderby, $count, basic, _callback);
        Type localVarReturnType = new TypeToken<USqlTableList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for catalogListTypes
     * @param databaseName The name of the database containing the types. (required)
     * @param schemaName The name of the schema containing the types. (required)
     * @param apiVersion Client Api Version. (required)
     * @param $filter OData filter. Optional. (optional)
     * @param $top The number of items to return. Optional. (optional)
     * @param $skip The number of items to skip over before returning elements. Optional. (optional)
     * @param $select OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select&#x3D;CategoryName,Description. Optional. (optional)
     * @param $orderby OrderBy clause. One or more comma-separated expressions with an optional \&quot;asc\&quot; (the default) or \&quot;desc\&quot; depending on the order you&#39;d like the values sorted, e.g. Categories?$orderby&#x3D;CategoryName desc. Optional. (optional)
     * @param $count The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count&#x3D;true. Optional. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of types in the specified database and schema. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call catalogListTypesCall(String databaseName, String schemaName, String apiVersion, String $filter, Integer $top, Integer $skip, String $select, String $orderby, Boolean $count, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/catalog/usql/databases/{databaseName}/schemas/{schemaName}/types"
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()))
            .replace("{" + "schemaName" + "}", localVarApiClient.escapeString(schemaName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if ($top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$top", $top));
        }

        if ($skip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$skip", $skip));
        }

        if ($select != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$select", $select));
        }

        if ($orderby != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$orderby", $orderby));
        }

        if ($count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$count", $count));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call catalogListTypesValidateBeforeCall(String databaseName, String schemaName, String apiVersion, String $filter, Integer $top, Integer $skip, String $select, String $orderby, Boolean $count, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling catalogListTypes(Async)");
        }

        // verify the required parameter 'schemaName' is set
        if (schemaName == null) {
            throw new ApiException("Missing the required parameter 'schemaName' when calling catalogListTypes(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling catalogListTypes(Async)");
        }

        return catalogListTypesCall(databaseName, schemaName, apiVersion, $filter, $top, $skip, $select, $orderby, $count, _callback);

    }

    /**
     * 
     * Retrieves the list of types within the specified database and schema from the Data Lake Analytics catalog.
     * @param databaseName The name of the database containing the types. (required)
     * @param schemaName The name of the schema containing the types. (required)
     * @param apiVersion Client Api Version. (required)
     * @param $filter OData filter. Optional. (optional)
     * @param $top The number of items to return. Optional. (optional)
     * @param $skip The number of items to skip over before returning elements. Optional. (optional)
     * @param $select OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select&#x3D;CategoryName,Description. Optional. (optional)
     * @param $orderby OrderBy clause. One or more comma-separated expressions with an optional \&quot;asc\&quot; (the default) or \&quot;desc\&quot; depending on the order you&#39;d like the values sorted, e.g. Categories?$orderby&#x3D;CategoryName desc. Optional. (optional)
     * @param $count The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count&#x3D;true. Optional. (optional)
     * @return USqlTypeList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of types in the specified database and schema. </td><td>  -  </td></tr>
     </table>
     */
    public USqlTypeList catalogListTypes(String databaseName, String schemaName, String apiVersion, String $filter, Integer $top, Integer $skip, String $select, String $orderby, Boolean $count) throws ApiException {
        ApiResponse<USqlTypeList> localVarResp = catalogListTypesWithHttpInfo(databaseName, schemaName, apiVersion, $filter, $top, $skip, $select, $orderby, $count);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves the list of types within the specified database and schema from the Data Lake Analytics catalog.
     * @param databaseName The name of the database containing the types. (required)
     * @param schemaName The name of the schema containing the types. (required)
     * @param apiVersion Client Api Version. (required)
     * @param $filter OData filter. Optional. (optional)
     * @param $top The number of items to return. Optional. (optional)
     * @param $skip The number of items to skip over before returning elements. Optional. (optional)
     * @param $select OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select&#x3D;CategoryName,Description. Optional. (optional)
     * @param $orderby OrderBy clause. One or more comma-separated expressions with an optional \&quot;asc\&quot; (the default) or \&quot;desc\&quot; depending on the order you&#39;d like the values sorted, e.g. Categories?$orderby&#x3D;CategoryName desc. Optional. (optional)
     * @param $count The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count&#x3D;true. Optional. (optional)
     * @return ApiResponse&lt;USqlTypeList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of types in the specified database and schema. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<USqlTypeList> catalogListTypesWithHttpInfo(String databaseName, String schemaName, String apiVersion, String $filter, Integer $top, Integer $skip, String $select, String $orderby, Boolean $count) throws ApiException {
        okhttp3.Call localVarCall = catalogListTypesValidateBeforeCall(databaseName, schemaName, apiVersion, $filter, $top, $skip, $select, $orderby, $count, null);
        Type localVarReturnType = new TypeToken<USqlTypeList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves the list of types within the specified database and schema from the Data Lake Analytics catalog.
     * @param databaseName The name of the database containing the types. (required)
     * @param schemaName The name of the schema containing the types. (required)
     * @param apiVersion Client Api Version. (required)
     * @param $filter OData filter. Optional. (optional)
     * @param $top The number of items to return. Optional. (optional)
     * @param $skip The number of items to skip over before returning elements. Optional. (optional)
     * @param $select OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select&#x3D;CategoryName,Description. Optional. (optional)
     * @param $orderby OrderBy clause. One or more comma-separated expressions with an optional \&quot;asc\&quot; (the default) or \&quot;desc\&quot; depending on the order you&#39;d like the values sorted, e.g. Categories?$orderby&#x3D;CategoryName desc. Optional. (optional)
     * @param $count The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count&#x3D;true. Optional. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of types in the specified database and schema. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call catalogListTypesAsync(String databaseName, String schemaName, String apiVersion, String $filter, Integer $top, Integer $skip, String $select, String $orderby, Boolean $count, final ApiCallback<USqlTypeList> _callback) throws ApiException {

        okhttp3.Call localVarCall = catalogListTypesValidateBeforeCall(databaseName, schemaName, apiVersion, $filter, $top, $skip, $select, $orderby, $count, _callback);
        Type localVarReturnType = new TypeToken<USqlTypeList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for catalogListViews
     * @param databaseName The name of the database containing the views. (required)
     * @param schemaName The name of the schema containing the views. (required)
     * @param apiVersion Client Api Version. (required)
     * @param $filter OData filter. Optional. (optional)
     * @param $top The number of items to return. Optional. (optional)
     * @param $skip The number of items to skip over before returning elements. Optional. (optional)
     * @param $select OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select&#x3D;CategoryName,Description. Optional. (optional)
     * @param $orderby OrderBy clause. One or more comma-separated expressions with an optional \&quot;asc\&quot; (the default) or \&quot;desc\&quot; depending on the order you&#39;d like the values sorted, e.g. Categories?$orderby&#x3D;CategoryName desc. Optional. (optional)
     * @param $count The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count&#x3D;true. Optional. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of views in the specified database and schema. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call catalogListViewsCall(String databaseName, String schemaName, String apiVersion, String $filter, Integer $top, Integer $skip, String $select, String $orderby, Boolean $count, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/catalog/usql/databases/{databaseName}/schemas/{schemaName}/views"
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()))
            .replace("{" + "schemaName" + "}", localVarApiClient.escapeString(schemaName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if ($top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$top", $top));
        }

        if ($skip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$skip", $skip));
        }

        if ($select != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$select", $select));
        }

        if ($orderby != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$orderby", $orderby));
        }

        if ($count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$count", $count));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call catalogListViewsValidateBeforeCall(String databaseName, String schemaName, String apiVersion, String $filter, Integer $top, Integer $skip, String $select, String $orderby, Boolean $count, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling catalogListViews(Async)");
        }

        // verify the required parameter 'schemaName' is set
        if (schemaName == null) {
            throw new ApiException("Missing the required parameter 'schemaName' when calling catalogListViews(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling catalogListViews(Async)");
        }

        return catalogListViewsCall(databaseName, schemaName, apiVersion, $filter, $top, $skip, $select, $orderby, $count, _callback);

    }

    /**
     * 
     * Retrieves the list of views from the Data Lake Analytics catalog.
     * @param databaseName The name of the database containing the views. (required)
     * @param schemaName The name of the schema containing the views. (required)
     * @param apiVersion Client Api Version. (required)
     * @param $filter OData filter. Optional. (optional)
     * @param $top The number of items to return. Optional. (optional)
     * @param $skip The number of items to skip over before returning elements. Optional. (optional)
     * @param $select OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select&#x3D;CategoryName,Description. Optional. (optional)
     * @param $orderby OrderBy clause. One or more comma-separated expressions with an optional \&quot;asc\&quot; (the default) or \&quot;desc\&quot; depending on the order you&#39;d like the values sorted, e.g. Categories?$orderby&#x3D;CategoryName desc. Optional. (optional)
     * @param $count The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count&#x3D;true. Optional. (optional)
     * @return USqlViewList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of views in the specified database and schema. </td><td>  -  </td></tr>
     </table>
     */
    public USqlViewList catalogListViews(String databaseName, String schemaName, String apiVersion, String $filter, Integer $top, Integer $skip, String $select, String $orderby, Boolean $count) throws ApiException {
        ApiResponse<USqlViewList> localVarResp = catalogListViewsWithHttpInfo(databaseName, schemaName, apiVersion, $filter, $top, $skip, $select, $orderby, $count);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves the list of views from the Data Lake Analytics catalog.
     * @param databaseName The name of the database containing the views. (required)
     * @param schemaName The name of the schema containing the views. (required)
     * @param apiVersion Client Api Version. (required)
     * @param $filter OData filter. Optional. (optional)
     * @param $top The number of items to return. Optional. (optional)
     * @param $skip The number of items to skip over before returning elements. Optional. (optional)
     * @param $select OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select&#x3D;CategoryName,Description. Optional. (optional)
     * @param $orderby OrderBy clause. One or more comma-separated expressions with an optional \&quot;asc\&quot; (the default) or \&quot;desc\&quot; depending on the order you&#39;d like the values sorted, e.g. Categories?$orderby&#x3D;CategoryName desc. Optional. (optional)
     * @param $count The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count&#x3D;true. Optional. (optional)
     * @return ApiResponse&lt;USqlViewList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of views in the specified database and schema. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<USqlViewList> catalogListViewsWithHttpInfo(String databaseName, String schemaName, String apiVersion, String $filter, Integer $top, Integer $skip, String $select, String $orderby, Boolean $count) throws ApiException {
        okhttp3.Call localVarCall = catalogListViewsValidateBeforeCall(databaseName, schemaName, apiVersion, $filter, $top, $skip, $select, $orderby, $count, null);
        Type localVarReturnType = new TypeToken<USqlViewList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves the list of views from the Data Lake Analytics catalog.
     * @param databaseName The name of the database containing the views. (required)
     * @param schemaName The name of the schema containing the views. (required)
     * @param apiVersion Client Api Version. (required)
     * @param $filter OData filter. Optional. (optional)
     * @param $top The number of items to return. Optional. (optional)
     * @param $skip The number of items to skip over before returning elements. Optional. (optional)
     * @param $select OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select&#x3D;CategoryName,Description. Optional. (optional)
     * @param $orderby OrderBy clause. One or more comma-separated expressions with an optional \&quot;asc\&quot; (the default) or \&quot;desc\&quot; depending on the order you&#39;d like the values sorted, e.g. Categories?$orderby&#x3D;CategoryName desc. Optional. (optional)
     * @param $count The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count&#x3D;true. Optional. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of views in the specified database and schema. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call catalogListViewsAsync(String databaseName, String schemaName, String apiVersion, String $filter, Integer $top, Integer $skip, String $select, String $orderby, Boolean $count, final ApiCallback<USqlViewList> _callback) throws ApiException {

        okhttp3.Call localVarCall = catalogListViewsValidateBeforeCall(databaseName, schemaName, apiVersion, $filter, $top, $skip, $select, $orderby, $count, _callback);
        Type localVarReturnType = new TypeToken<USqlViewList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for catalogListViewsByDatabase
     * @param databaseName The name of the database containing the views. (required)
     * @param apiVersion Client Api Version. (required)
     * @param $filter OData filter. Optional. (optional)
     * @param $top The number of items to return. Optional. (optional)
     * @param $skip The number of items to skip over before returning elements. Optional. (optional)
     * @param $select OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select&#x3D;CategoryName,Description. Optional. (optional)
     * @param $orderby OrderBy clause. One or more comma-separated expressions with an optional \&quot;asc\&quot; (the default) or \&quot;desc\&quot; depending on the order you&#39;d like the values sorted, e.g. Categories?$orderby&#x3D;CategoryName desc. Optional. (optional)
     * @param $count The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count&#x3D;true. Optional. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of all views in the specified database. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call catalogListViewsByDatabaseCall(String databaseName, String apiVersion, String $filter, Integer $top, Integer $skip, String $select, String $orderby, Boolean $count, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/catalog/usql/databases/{databaseName}/views"
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if ($top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$top", $top));
        }

        if ($skip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$skip", $skip));
        }

        if ($select != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$select", $select));
        }

        if ($orderby != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$orderby", $orderby));
        }

        if ($count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$count", $count));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call catalogListViewsByDatabaseValidateBeforeCall(String databaseName, String apiVersion, String $filter, Integer $top, Integer $skip, String $select, String $orderby, Boolean $count, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling catalogListViewsByDatabase(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling catalogListViewsByDatabase(Async)");
        }

        return catalogListViewsByDatabaseCall(databaseName, apiVersion, $filter, $top, $skip, $select, $orderby, $count, _callback);

    }

    /**
     * 
     * Retrieves the list of all views in a database from the Data Lake Analytics catalog.
     * @param databaseName The name of the database containing the views. (required)
     * @param apiVersion Client Api Version. (required)
     * @param $filter OData filter. Optional. (optional)
     * @param $top The number of items to return. Optional. (optional)
     * @param $skip The number of items to skip over before returning elements. Optional. (optional)
     * @param $select OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select&#x3D;CategoryName,Description. Optional. (optional)
     * @param $orderby OrderBy clause. One or more comma-separated expressions with an optional \&quot;asc\&quot; (the default) or \&quot;desc\&quot; depending on the order you&#39;d like the values sorted, e.g. Categories?$orderby&#x3D;CategoryName desc. Optional. (optional)
     * @param $count The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count&#x3D;true. Optional. (optional)
     * @return USqlViewList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of all views in the specified database. </td><td>  -  </td></tr>
     </table>
     */
    public USqlViewList catalogListViewsByDatabase(String databaseName, String apiVersion, String $filter, Integer $top, Integer $skip, String $select, String $orderby, Boolean $count) throws ApiException {
        ApiResponse<USqlViewList> localVarResp = catalogListViewsByDatabaseWithHttpInfo(databaseName, apiVersion, $filter, $top, $skip, $select, $orderby, $count);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves the list of all views in a database from the Data Lake Analytics catalog.
     * @param databaseName The name of the database containing the views. (required)
     * @param apiVersion Client Api Version. (required)
     * @param $filter OData filter. Optional. (optional)
     * @param $top The number of items to return. Optional. (optional)
     * @param $skip The number of items to skip over before returning elements. Optional. (optional)
     * @param $select OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select&#x3D;CategoryName,Description. Optional. (optional)
     * @param $orderby OrderBy clause. One or more comma-separated expressions with an optional \&quot;asc\&quot; (the default) or \&quot;desc\&quot; depending on the order you&#39;d like the values sorted, e.g. Categories?$orderby&#x3D;CategoryName desc. Optional. (optional)
     * @param $count The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count&#x3D;true. Optional. (optional)
     * @return ApiResponse&lt;USqlViewList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of all views in the specified database. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<USqlViewList> catalogListViewsByDatabaseWithHttpInfo(String databaseName, String apiVersion, String $filter, Integer $top, Integer $skip, String $select, String $orderby, Boolean $count) throws ApiException {
        okhttp3.Call localVarCall = catalogListViewsByDatabaseValidateBeforeCall(databaseName, apiVersion, $filter, $top, $skip, $select, $orderby, $count, null);
        Type localVarReturnType = new TypeToken<USqlViewList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves the list of all views in a database from the Data Lake Analytics catalog.
     * @param databaseName The name of the database containing the views. (required)
     * @param apiVersion Client Api Version. (required)
     * @param $filter OData filter. Optional. (optional)
     * @param $top The number of items to return. Optional. (optional)
     * @param $skip The number of items to skip over before returning elements. Optional. (optional)
     * @param $select OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select&#x3D;CategoryName,Description. Optional. (optional)
     * @param $orderby OrderBy clause. One or more comma-separated expressions with an optional \&quot;asc\&quot; (the default) or \&quot;desc\&quot; depending on the order you&#39;d like the values sorted, e.g. Categories?$orderby&#x3D;CategoryName desc. Optional. (optional)
     * @param $count The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count&#x3D;true. Optional. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of all views in the specified database. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call catalogListViewsByDatabaseAsync(String databaseName, String apiVersion, String $filter, Integer $top, Integer $skip, String $select, String $orderby, Boolean $count, final ApiCallback<USqlViewList> _callback) throws ApiException {

        okhttp3.Call localVarCall = catalogListViewsByDatabaseValidateBeforeCall(databaseName, apiVersion, $filter, $top, $skip, $select, $orderby, $count, _callback);
        Type localVarReturnType = new TypeToken<USqlViewList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for catalogPreviewTable
     * @param databaseName The name of the database containing the table. (required)
     * @param schemaName The name of the schema containing the table. (required)
     * @param tableName The name of the table. (required)
     * @param apiVersion Client Api Version. (required)
     * @param maxRows The maximum number of preview rows to be retrieved. Rows returned may be less than or equal to this number depending on row sizes and number of rows in the table. (optional)
     * @param maxColumns The maximum number of columns to be retrieved. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved preview rows for the specified table. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call catalogPreviewTableCall(String databaseName, String schemaName, String tableName, String apiVersion, Long maxRows, Long maxColumns, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/catalog/usql/databases/{databaseName}/schemas/{schemaName}/tables/{tableName}/previewrows"
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()))
            .replace("{" + "schemaName" + "}", localVarApiClient.escapeString(schemaName.toString()))
            .replace("{" + "tableName" + "}", localVarApiClient.escapeString(tableName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxRows != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxRows", maxRows));
        }

        if (maxColumns != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxColumns", maxColumns));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call catalogPreviewTableValidateBeforeCall(String databaseName, String schemaName, String tableName, String apiVersion, Long maxRows, Long maxColumns, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling catalogPreviewTable(Async)");
        }

        // verify the required parameter 'schemaName' is set
        if (schemaName == null) {
            throw new ApiException("Missing the required parameter 'schemaName' when calling catalogPreviewTable(Async)");
        }

        // verify the required parameter 'tableName' is set
        if (tableName == null) {
            throw new ApiException("Missing the required parameter 'tableName' when calling catalogPreviewTable(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling catalogPreviewTable(Async)");
        }

        return catalogPreviewTableCall(databaseName, schemaName, tableName, apiVersion, maxRows, maxColumns, _callback);

    }

    /**
     * 
     * Retrieves a preview set of rows in given table.
     * @param databaseName The name of the database containing the table. (required)
     * @param schemaName The name of the schema containing the table. (required)
     * @param tableName The name of the table. (required)
     * @param apiVersion Client Api Version. (required)
     * @param maxRows The maximum number of preview rows to be retrieved. Rows returned may be less than or equal to this number depending on row sizes and number of rows in the table. (optional)
     * @param maxColumns The maximum number of columns to be retrieved. (optional)
     * @return USqlTablePreview
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved preview rows for the specified table. </td><td>  -  </td></tr>
     </table>
     */
    public USqlTablePreview catalogPreviewTable(String databaseName, String schemaName, String tableName, String apiVersion, Long maxRows, Long maxColumns) throws ApiException {
        ApiResponse<USqlTablePreview> localVarResp = catalogPreviewTableWithHttpInfo(databaseName, schemaName, tableName, apiVersion, maxRows, maxColumns);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves a preview set of rows in given table.
     * @param databaseName The name of the database containing the table. (required)
     * @param schemaName The name of the schema containing the table. (required)
     * @param tableName The name of the table. (required)
     * @param apiVersion Client Api Version. (required)
     * @param maxRows The maximum number of preview rows to be retrieved. Rows returned may be less than or equal to this number depending on row sizes and number of rows in the table. (optional)
     * @param maxColumns The maximum number of columns to be retrieved. (optional)
     * @return ApiResponse&lt;USqlTablePreview&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved preview rows for the specified table. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<USqlTablePreview> catalogPreviewTableWithHttpInfo(String databaseName, String schemaName, String tableName, String apiVersion, Long maxRows, Long maxColumns) throws ApiException {
        okhttp3.Call localVarCall = catalogPreviewTableValidateBeforeCall(databaseName, schemaName, tableName, apiVersion, maxRows, maxColumns, null);
        Type localVarReturnType = new TypeToken<USqlTablePreview>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves a preview set of rows in given table.
     * @param databaseName The name of the database containing the table. (required)
     * @param schemaName The name of the schema containing the table. (required)
     * @param tableName The name of the table. (required)
     * @param apiVersion Client Api Version. (required)
     * @param maxRows The maximum number of preview rows to be retrieved. Rows returned may be less than or equal to this number depending on row sizes and number of rows in the table. (optional)
     * @param maxColumns The maximum number of columns to be retrieved. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved preview rows for the specified table. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call catalogPreviewTableAsync(String databaseName, String schemaName, String tableName, String apiVersion, Long maxRows, Long maxColumns, final ApiCallback<USqlTablePreview> _callback) throws ApiException {

        okhttp3.Call localVarCall = catalogPreviewTableValidateBeforeCall(databaseName, schemaName, tableName, apiVersion, maxRows, maxColumns, _callback);
        Type localVarReturnType = new TypeToken<USqlTablePreview>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for catalogPreviewTablePartition
     * @param databaseName The name of the database containing the partition. (required)
     * @param schemaName The name of the schema containing the partition. (required)
     * @param tableName The name of the table containing the partition. (required)
     * @param partitionName The name of the table partition. (required)
     * @param apiVersion Client Api Version. (required)
     * @param maxRows The maximum number of preview rows to be retrieved.Rows returned may be less than or equal to this number depending on row sizes and number of rows in the partition. (optional)
     * @param maxColumns The maximum number of columns to be retrieved. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved preview rows for the specified partition. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call catalogPreviewTablePartitionCall(String databaseName, String schemaName, String tableName, String partitionName, String apiVersion, Long maxRows, Long maxColumns, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/catalog/usql/databases/{databaseName}/schemas/{schemaName}/tables/{tableName}/partitions/{partitionName}/previewrows"
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()))
            .replace("{" + "schemaName" + "}", localVarApiClient.escapeString(schemaName.toString()))
            .replace("{" + "tableName" + "}", localVarApiClient.escapeString(tableName.toString()))
            .replace("{" + "partitionName" + "}", localVarApiClient.escapeString(partitionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxRows != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxRows", maxRows));
        }

        if (maxColumns != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxColumns", maxColumns));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call catalogPreviewTablePartitionValidateBeforeCall(String databaseName, String schemaName, String tableName, String partitionName, String apiVersion, Long maxRows, Long maxColumns, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling catalogPreviewTablePartition(Async)");
        }

        // verify the required parameter 'schemaName' is set
        if (schemaName == null) {
            throw new ApiException("Missing the required parameter 'schemaName' when calling catalogPreviewTablePartition(Async)");
        }

        // verify the required parameter 'tableName' is set
        if (tableName == null) {
            throw new ApiException("Missing the required parameter 'tableName' when calling catalogPreviewTablePartition(Async)");
        }

        // verify the required parameter 'partitionName' is set
        if (partitionName == null) {
            throw new ApiException("Missing the required parameter 'partitionName' when calling catalogPreviewTablePartition(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling catalogPreviewTablePartition(Async)");
        }

        return catalogPreviewTablePartitionCall(databaseName, schemaName, tableName, partitionName, apiVersion, maxRows, maxColumns, _callback);

    }

    /**
     * 
     * Retrieves a preview set of rows in given partition.
     * @param databaseName The name of the database containing the partition. (required)
     * @param schemaName The name of the schema containing the partition. (required)
     * @param tableName The name of the table containing the partition. (required)
     * @param partitionName The name of the table partition. (required)
     * @param apiVersion Client Api Version. (required)
     * @param maxRows The maximum number of preview rows to be retrieved.Rows returned may be less than or equal to this number depending on row sizes and number of rows in the partition. (optional)
     * @param maxColumns The maximum number of columns to be retrieved. (optional)
     * @return USqlTablePreview
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved preview rows for the specified partition. </td><td>  -  </td></tr>
     </table>
     */
    public USqlTablePreview catalogPreviewTablePartition(String databaseName, String schemaName, String tableName, String partitionName, String apiVersion, Long maxRows, Long maxColumns) throws ApiException {
        ApiResponse<USqlTablePreview> localVarResp = catalogPreviewTablePartitionWithHttpInfo(databaseName, schemaName, tableName, partitionName, apiVersion, maxRows, maxColumns);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves a preview set of rows in given partition.
     * @param databaseName The name of the database containing the partition. (required)
     * @param schemaName The name of the schema containing the partition. (required)
     * @param tableName The name of the table containing the partition. (required)
     * @param partitionName The name of the table partition. (required)
     * @param apiVersion Client Api Version. (required)
     * @param maxRows The maximum number of preview rows to be retrieved.Rows returned may be less than or equal to this number depending on row sizes and number of rows in the partition. (optional)
     * @param maxColumns The maximum number of columns to be retrieved. (optional)
     * @return ApiResponse&lt;USqlTablePreview&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved preview rows for the specified partition. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<USqlTablePreview> catalogPreviewTablePartitionWithHttpInfo(String databaseName, String schemaName, String tableName, String partitionName, String apiVersion, Long maxRows, Long maxColumns) throws ApiException {
        okhttp3.Call localVarCall = catalogPreviewTablePartitionValidateBeforeCall(databaseName, schemaName, tableName, partitionName, apiVersion, maxRows, maxColumns, null);
        Type localVarReturnType = new TypeToken<USqlTablePreview>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves a preview set of rows in given partition.
     * @param databaseName The name of the database containing the partition. (required)
     * @param schemaName The name of the schema containing the partition. (required)
     * @param tableName The name of the table containing the partition. (required)
     * @param partitionName The name of the table partition. (required)
     * @param apiVersion Client Api Version. (required)
     * @param maxRows The maximum number of preview rows to be retrieved.Rows returned may be less than or equal to this number depending on row sizes and number of rows in the partition. (optional)
     * @param maxColumns The maximum number of columns to be retrieved. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved preview rows for the specified partition. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call catalogPreviewTablePartitionAsync(String databaseName, String schemaName, String tableName, String partitionName, String apiVersion, Long maxRows, Long maxColumns, final ApiCallback<USqlTablePreview> _callback) throws ApiException {

        okhttp3.Call localVarCall = catalogPreviewTablePartitionValidateBeforeCall(databaseName, schemaName, tableName, partitionName, apiVersion, maxRows, maxColumns, _callback);
        Type localVarReturnType = new TypeToken<USqlTablePreview>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for catalogUpdateCredential
     * @param databaseName The name of the database containing the credential. (required)
     * @param credentialName The name of the credential. (required)
     * @param apiVersion Client Api Version. (required)
     * @param parameters The parameters required to modify the credential (name and password) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the specified credential&#39;s password in the specified database </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call catalogUpdateCredentialCall(String databaseName, String credentialName, String apiVersion, DataLakeAnalyticsCatalogCredentialUpdateParameters parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/catalog/usql/databases/{databaseName}/credentials/{credentialName}"
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()))
            .replace("{" + "credentialName" + "}", localVarApiClient.escapeString(credentialName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call catalogUpdateCredentialValidateBeforeCall(String databaseName, String credentialName, String apiVersion, DataLakeAnalyticsCatalogCredentialUpdateParameters parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling catalogUpdateCredential(Async)");
        }

        // verify the required parameter 'credentialName' is set
        if (credentialName == null) {
            throw new ApiException("Missing the required parameter 'credentialName' when calling catalogUpdateCredential(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling catalogUpdateCredential(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling catalogUpdateCredential(Async)");
        }

        return catalogUpdateCredentialCall(databaseName, credentialName, apiVersion, parameters, _callback);

    }

    /**
     * 
     * Modifies the specified credential for use with external data sources in the specified database
     * @param databaseName The name of the database containing the credential. (required)
     * @param credentialName The name of the credential. (required)
     * @param apiVersion Client Api Version. (required)
     * @param parameters The parameters required to modify the credential (name and password) (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the specified credential&#39;s password in the specified database </td><td>  -  </td></tr>
     </table>
     */
    public void catalogUpdateCredential(String databaseName, String credentialName, String apiVersion, DataLakeAnalyticsCatalogCredentialUpdateParameters parameters) throws ApiException {
        catalogUpdateCredentialWithHttpInfo(databaseName, credentialName, apiVersion, parameters);
    }

    /**
     * 
     * Modifies the specified credential for use with external data sources in the specified database
     * @param databaseName The name of the database containing the credential. (required)
     * @param credentialName The name of the credential. (required)
     * @param apiVersion Client Api Version. (required)
     * @param parameters The parameters required to modify the credential (name and password) (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the specified credential&#39;s password in the specified database </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> catalogUpdateCredentialWithHttpInfo(String databaseName, String credentialName, String apiVersion, DataLakeAnalyticsCatalogCredentialUpdateParameters parameters) throws ApiException {
        okhttp3.Call localVarCall = catalogUpdateCredentialValidateBeforeCall(databaseName, credentialName, apiVersion, parameters, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Modifies the specified credential for use with external data sources in the specified database
     * @param databaseName The name of the database containing the credential. (required)
     * @param credentialName The name of the credential. (required)
     * @param apiVersion Client Api Version. (required)
     * @param parameters The parameters required to modify the credential (name and password) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the specified credential&#39;s password in the specified database </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call catalogUpdateCredentialAsync(String databaseName, String credentialName, String apiVersion, DataLakeAnalyticsCatalogCredentialUpdateParameters parameters, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = catalogUpdateCredentialValidateBeforeCall(databaseName, credentialName, apiVersion, parameters, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for catalogUpdateSecret
     * @param databaseName The name of the database containing the secret. (required)
     * @param secretName The name of the secret. (required)
     * @param apiVersion Client Api Version. (required)
     * @param parameters The parameters required to modify the secret (name and password) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the details of the specified secret in the specified database. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call catalogUpdateSecretCall(String databaseName, String secretName, String apiVersion, DataLakeAnalyticsCatalogSecretCreateOrUpdateParameters parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/catalog/usql/databases/{databaseName}/secrets/{secretName}"
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()))
            .replace("{" + "secretName" + "}", localVarApiClient.escapeString(secretName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call catalogUpdateSecretValidateBeforeCall(String databaseName, String secretName, String apiVersion, DataLakeAnalyticsCatalogSecretCreateOrUpdateParameters parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling catalogUpdateSecret(Async)");
        }

        // verify the required parameter 'secretName' is set
        if (secretName == null) {
            throw new ApiException("Missing the required parameter 'secretName' when calling catalogUpdateSecret(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling catalogUpdateSecret(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling catalogUpdateSecret(Async)");
        }

        return catalogUpdateSecretCall(databaseName, secretName, apiVersion, parameters, _callback);

    }

    /**
     * 
     * Modifies the specified secret for use with external data sources in the specified database. This is deprecated and will be removed in the next release. Please use UpdateCredential instead.
     * @param databaseName The name of the database containing the secret. (required)
     * @param secretName The name of the secret. (required)
     * @param apiVersion Client Api Version. (required)
     * @param parameters The parameters required to modify the secret (name and password) (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the details of the specified secret in the specified database. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public void catalogUpdateSecret(String databaseName, String secretName, String apiVersion, DataLakeAnalyticsCatalogSecretCreateOrUpdateParameters parameters) throws ApiException {
        catalogUpdateSecretWithHttpInfo(databaseName, secretName, apiVersion, parameters);
    }

    /**
     * 
     * Modifies the specified secret for use with external data sources in the specified database. This is deprecated and will be removed in the next release. Please use UpdateCredential instead.
     * @param databaseName The name of the database containing the secret. (required)
     * @param secretName The name of the secret. (required)
     * @param apiVersion Client Api Version. (required)
     * @param parameters The parameters required to modify the secret (name and password) (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the details of the specified secret in the specified database. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Void> catalogUpdateSecretWithHttpInfo(String databaseName, String secretName, String apiVersion, DataLakeAnalyticsCatalogSecretCreateOrUpdateParameters parameters) throws ApiException {
        okhttp3.Call localVarCall = catalogUpdateSecretValidateBeforeCall(databaseName, secretName, apiVersion, parameters, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Modifies the specified secret for use with external data sources in the specified database. This is deprecated and will be removed in the next release. Please use UpdateCredential instead.
     * @param databaseName The name of the database containing the secret. (required)
     * @param secretName The name of the secret. (required)
     * @param apiVersion Client Api Version. (required)
     * @param parameters The parameters required to modify the secret (name and password) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the details of the specified secret in the specified database. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call catalogUpdateSecretAsync(String databaseName, String secretName, String apiVersion, DataLakeAnalyticsCatalogSecretCreateOrUpdateParameters parameters, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = catalogUpdateSecretValidateBeforeCall(databaseName, secretName, apiVersion, parameters, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
