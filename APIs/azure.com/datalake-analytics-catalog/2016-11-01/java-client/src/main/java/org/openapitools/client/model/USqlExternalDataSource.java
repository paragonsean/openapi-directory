/*
 * DataLakeAnalyticsCatalogManagementClient
 * Creates an Azure Data Lake Analytics catalog client.
 *
 * The version of the OpenAPI document: 2016-11-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A Data Lake Analytics catalog U-SQL external datasource item.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:54:55.754163-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class USqlExternalDataSource {
  public static final String SERIALIZED_NAME_DATABASE_NAME = "databaseName";
  @SerializedName(SERIALIZED_NAME_DATABASE_NAME)
  private String databaseName;

  public static final String SERIALIZED_NAME_EXTERNAL_DATA_SOURCE_NAME = "externalDataSourceName";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_DATA_SOURCE_NAME)
  private String externalDataSourceName;

  public static final String SERIALIZED_NAME_PROVIDER = "provider";
  @SerializedName(SERIALIZED_NAME_PROVIDER)
  private String provider;

  public static final String SERIALIZED_NAME_PROVIDER_STRING = "providerString";
  @SerializedName(SERIALIZED_NAME_PROVIDER_STRING)
  private String providerString;

  public static final String SERIALIZED_NAME_PUSHDOWN_TYPES = "pushdownTypes";
  @SerializedName(SERIALIZED_NAME_PUSHDOWN_TYPES)
  private List<String> pushdownTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_COMPUTE_ACCOUNT_NAME = "computeAccountName";
  @SerializedName(SERIALIZED_NAME_COMPUTE_ACCOUNT_NAME)
  private String computeAccountName;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private UUID version;

  public USqlExternalDataSource() {
  }

  public USqlExternalDataSource databaseName(String databaseName) {
    this.databaseName = databaseName;
    return this;
  }

  /**
   * the name of the database.
   * @return databaseName
   */
  @javax.annotation.Nullable
  public String getDatabaseName() {
    return databaseName;
  }

  public void setDatabaseName(String databaseName) {
    this.databaseName = databaseName;
  }


  public USqlExternalDataSource externalDataSourceName(String externalDataSourceName) {
    this.externalDataSourceName = externalDataSourceName;
    return this;
  }

  /**
   * the name of the external data source.
   * @return externalDataSourceName
   */
  @javax.annotation.Nullable
  public String getExternalDataSourceName() {
    return externalDataSourceName;
  }

  public void setExternalDataSourceName(String externalDataSourceName) {
    this.externalDataSourceName = externalDataSourceName;
  }


  public USqlExternalDataSource provider(String provider) {
    this.provider = provider;
    return this;
  }

  /**
   * the name of the provider for the external data source.
   * @return provider
   */
  @javax.annotation.Nullable
  public String getProvider() {
    return provider;
  }

  public void setProvider(String provider) {
    this.provider = provider;
  }


  public USqlExternalDataSource providerString(String providerString) {
    this.providerString = providerString;
    return this;
  }

  /**
   * the name of the provider string for the external data source.
   * @return providerString
   */
  @javax.annotation.Nullable
  public String getProviderString() {
    return providerString;
  }

  public void setProviderString(String providerString) {
    this.providerString = providerString;
  }


  public USqlExternalDataSource pushdownTypes(List<String> pushdownTypes) {
    this.pushdownTypes = pushdownTypes;
    return this;
  }

  public USqlExternalDataSource addPushdownTypesItem(String pushdownTypesItem) {
    if (this.pushdownTypes == null) {
      this.pushdownTypes = new ArrayList<>();
    }
    this.pushdownTypes.add(pushdownTypesItem);
    return this;
  }

  /**
   * the list of types to push down from the external data source.
   * @return pushdownTypes
   */
  @javax.annotation.Nullable
  public List<String> getPushdownTypes() {
    return pushdownTypes;
  }

  public void setPushdownTypes(List<String> pushdownTypes) {
    this.pushdownTypes = pushdownTypes;
  }


  public USqlExternalDataSource computeAccountName(String computeAccountName) {
    this.computeAccountName = computeAccountName;
    return this;
  }

  /**
   * the name of the Data Lake Analytics account.
   * @return computeAccountName
   */
  @javax.annotation.Nullable
  public String getComputeAccountName() {
    return computeAccountName;
  }

  public void setComputeAccountName(String computeAccountName) {
    this.computeAccountName = computeAccountName;
  }


  public USqlExternalDataSource version(UUID version) {
    this.version = version;
    return this;
  }

  /**
   * the version of the catalog item.
   * @return version
   */
  @javax.annotation.Nullable
  public UUID getVersion() {
    return version;
  }

  public void setVersion(UUID version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    USqlExternalDataSource usqlExternalDataSource = (USqlExternalDataSource) o;
    return Objects.equals(this.databaseName, usqlExternalDataSource.databaseName) &&
        Objects.equals(this.externalDataSourceName, usqlExternalDataSource.externalDataSourceName) &&
        Objects.equals(this.provider, usqlExternalDataSource.provider) &&
        Objects.equals(this.providerString, usqlExternalDataSource.providerString) &&
        Objects.equals(this.pushdownTypes, usqlExternalDataSource.pushdownTypes) &&
        Objects.equals(this.computeAccountName, usqlExternalDataSource.computeAccountName) &&
        Objects.equals(this.version, usqlExternalDataSource.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(databaseName, externalDataSourceName, provider, providerString, pushdownTypes, computeAccountName, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class USqlExternalDataSource {\n");
    sb.append("    databaseName: ").append(toIndentedString(databaseName)).append("\n");
    sb.append("    externalDataSourceName: ").append(toIndentedString(externalDataSourceName)).append("\n");
    sb.append("    provider: ").append(toIndentedString(provider)).append("\n");
    sb.append("    providerString: ").append(toIndentedString(providerString)).append("\n");
    sb.append("    pushdownTypes: ").append(toIndentedString(pushdownTypes)).append("\n");
    sb.append("    computeAccountName: ").append(toIndentedString(computeAccountName)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("computeAccountName");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to USqlExternalDataSource
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!USqlExternalDataSource.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in USqlExternalDataSource is not found in the empty JSON string", USqlExternalDataSource.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!USqlExternalDataSource.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `USqlExternalDataSource` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("databaseName") != null && !jsonObj.get("databaseName").isJsonNull()) && !jsonObj.get("databaseName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `databaseName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("databaseName").toString()));
      }
      if ((jsonObj.get("externalDataSourceName") != null && !jsonObj.get("externalDataSourceName").isJsonNull()) && !jsonObj.get("externalDataSourceName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `externalDataSourceName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("externalDataSourceName").toString()));
      }
      if ((jsonObj.get("provider") != null && !jsonObj.get("provider").isJsonNull()) && !jsonObj.get("provider").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provider` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provider").toString()));
      }
      if ((jsonObj.get("providerString") != null && !jsonObj.get("providerString").isJsonNull()) && !jsonObj.get("providerString").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `providerString` to be a primitive type in the JSON string but got `%s`", jsonObj.get("providerString").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("pushdownTypes") != null && !jsonObj.get("pushdownTypes").isJsonNull() && !jsonObj.get("pushdownTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `pushdownTypes` to be an array in the JSON string but got `%s`", jsonObj.get("pushdownTypes").toString()));
      }
      if ((jsonObj.get("computeAccountName") != null && !jsonObj.get("computeAccountName").isJsonNull()) && !jsonObj.get("computeAccountName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `computeAccountName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("computeAccountName").toString()));
      }
      if ((jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) && !jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!USqlExternalDataSource.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'USqlExternalDataSource' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<USqlExternalDataSource> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(USqlExternalDataSource.class));

       return (TypeAdapter<T>) new TypeAdapter<USqlExternalDataSource>() {
           @Override
           public void write(JsonWriter out, USqlExternalDataSource value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public USqlExternalDataSource read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of USqlExternalDataSource given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of USqlExternalDataSource
   * @throws IOException if the JSON string is invalid with respect to USqlExternalDataSource
   */
  public static USqlExternalDataSource fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, USqlExternalDataSource.class);
  }

  /**
   * Convert an instance of USqlExternalDataSource to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

