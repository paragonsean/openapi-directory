/**
 * DataLakeAnalyticsCatalogManagementClient
 * Creates an Azure Data Lake Analytics catalog client.
 *
 * The version of the OpenAPI document: 2016-11-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAICatalogApi_H
#define OAI_OAICatalogApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAclList.h"
#include "OAIDataLakeAnalyticsCatalogCredentialCreateParameters.h"
#include "OAIDataLakeAnalyticsCatalogCredentialDeleteParameters.h"
#include "OAIDataLakeAnalyticsCatalogCredentialUpdateParameters.h"
#include "OAIDataLakeAnalyticsCatalogSecretCreateOrUpdateParameters.h"
#include "OAIUSqlAssembly.h"
#include "OAIUSqlAssemblyList.h"
#include "OAIUSqlCredential.h"
#include "OAIUSqlCredentialList.h"
#include "OAIUSqlDatabase.h"
#include "OAIUSqlDatabaseList.h"
#include "OAIUSqlExternalDataSource.h"
#include "OAIUSqlExternalDataSourceList.h"
#include "OAIUSqlPackage.h"
#include "OAIUSqlPackageList.h"
#include "OAIUSqlProcedure.h"
#include "OAIUSqlProcedureList.h"
#include "OAIUSqlSchema.h"
#include "OAIUSqlSchemaList.h"
#include "OAIUSqlSecret.h"
#include "OAIUSqlTable.h"
#include "OAIUSqlTableFragmentList.h"
#include "OAIUSqlTableList.h"
#include "OAIUSqlTablePartition.h"
#include "OAIUSqlTablePartitionList.h"
#include "OAIUSqlTablePreview.h"
#include "OAIUSqlTableStatistics.h"
#include "OAIUSqlTableStatisticsList.h"
#include "OAIUSqlTableType.h"
#include "OAIUSqlTableTypeList.h"
#include "OAIUSqlTableValuedFunction.h"
#include "OAIUSqlTableValuedFunctionList.h"
#include "OAIUSqlTypeList.h"
#include "OAIUSqlView.h"
#include "OAIUSqlViewList.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAICatalogApi : public QObject {
    Q_OBJECT

public:
    OAICatalogApi(const int timeOut = 0);
    ~OAICatalogApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  database_name QString [required]
    * @param[in]  credential_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAIDataLakeAnalyticsCatalogCredentialCreateParameters [required]
    */
    virtual void catalogCreateCredential(const QString &database_name, const QString &credential_name, const QString &api_version, const OAIDataLakeAnalyticsCatalogCredentialCreateParameters &parameters);

    /**
    * @param[in]  database_name QString [required]
    * @param[in]  secret_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAIDataLakeAnalyticsCatalogSecretCreateOrUpdateParameters [required]
    */
    Q_DECL_DEPRECATED virtual void catalogCreateSecret(const QString &database_name, const QString &secret_name, const QString &api_version, const OAIDataLakeAnalyticsCatalogSecretCreateOrUpdateParameters &parameters);

    /**
    * @param[in]  database_name QString [required]
    * @param[in]  api_version QString [required]
    */
    Q_DECL_DEPRECATED virtual void catalogDeleteAllSecrets(const QString &database_name, const QString &api_version);

    /**
    * @param[in]  database_name QString [required]
    * @param[in]  credential_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  cascade bool [optional]
    * @param[in]  parameters OAIDataLakeAnalyticsCatalogCredentialDeleteParameters [optional]
    */
    virtual void catalogDeleteCredential(const QString &database_name, const QString &credential_name, const QString &api_version, const ::OpenAPI::OptionalParam<bool> &cascade = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAIDataLakeAnalyticsCatalogCredentialDeleteParameters> &parameters = ::OpenAPI::OptionalParam<OAIDataLakeAnalyticsCatalogCredentialDeleteParameters>());

    /**
    * @param[in]  database_name QString [required]
    * @param[in]  secret_name QString [required]
    * @param[in]  api_version QString [required]
    */
    Q_DECL_DEPRECATED virtual void catalogDeleteSecret(const QString &database_name, const QString &secret_name, const QString &api_version);

    /**
    * @param[in]  database_name QString [required]
    * @param[in]  assembly_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void catalogGetAssembly(const QString &database_name, const QString &assembly_name, const QString &api_version);

    /**
    * @param[in]  database_name QString [required]
    * @param[in]  credential_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void catalogGetCredential(const QString &database_name, const QString &credential_name, const QString &api_version);

    /**
    * @param[in]  database_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void catalogGetDatabase(const QString &database_name, const QString &api_version);

    /**
    * @param[in]  database_name QString [required]
    * @param[in]  external_data_source_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void catalogGetExternalDataSource(const QString &database_name, const QString &external_data_source_name, const QString &api_version);

    /**
    * @param[in]  database_name QString [required]
    * @param[in]  schema_name QString [required]
    * @param[in]  package_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void catalogGetPackage(const QString &database_name, const QString &schema_name, const QString &package_name, const QString &api_version);

    /**
    * @param[in]  database_name QString [required]
    * @param[in]  schema_name QString [required]
    * @param[in]  procedure_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void catalogGetProcedure(const QString &database_name, const QString &schema_name, const QString &procedure_name, const QString &api_version);

    /**
    * @param[in]  database_name QString [required]
    * @param[in]  schema_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void catalogGetSchema(const QString &database_name, const QString &schema_name, const QString &api_version);

    /**
    * @param[in]  database_name QString [required]
    * @param[in]  secret_name QString [required]
    * @param[in]  api_version QString [required]
    */
    Q_DECL_DEPRECATED virtual void catalogGetSecret(const QString &database_name, const QString &secret_name, const QString &api_version);

    /**
    * @param[in]  database_name QString [required]
    * @param[in]  schema_name QString [required]
    * @param[in]  table_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void catalogGetTable(const QString &database_name, const QString &schema_name, const QString &table_name, const QString &api_version);

    /**
    * @param[in]  database_name QString [required]
    * @param[in]  schema_name QString [required]
    * @param[in]  table_name QString [required]
    * @param[in]  partition_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void catalogGetTablePartition(const QString &database_name, const QString &schema_name, const QString &table_name, const QString &partition_name, const QString &api_version);

    /**
    * @param[in]  database_name QString [required]
    * @param[in]  schema_name QString [required]
    * @param[in]  table_name QString [required]
    * @param[in]  statistics_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void catalogGetTableStatistic(const QString &database_name, const QString &schema_name, const QString &table_name, const QString &statistics_name, const QString &api_version);

    /**
    * @param[in]  database_name QString [required]
    * @param[in]  schema_name QString [required]
    * @param[in]  table_type_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void catalogGetTableType(const QString &database_name, const QString &schema_name, const QString &table_type_name, const QString &api_version);

    /**
    * @param[in]  database_name QString [required]
    * @param[in]  schema_name QString [required]
    * @param[in]  table_valued_function_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void catalogGetTableValuedFunction(const QString &database_name, const QString &schema_name, const QString &table_valued_function_name, const QString &api_version);

    /**
    * @param[in]  database_name QString [required]
    * @param[in]  schema_name QString [required]
    * @param[in]  view_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void catalogGetView(const QString &database_name, const QString &schema_name, const QString &view_name, const QString &api_version);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [optional]
    * @param[in]  top qint32 [optional]
    * @param[in]  skip qint32 [optional]
    * @param[in]  select QString [optional]
    * @param[in]  orderby QString [optional]
    * @param[in]  count bool [optional]
    */
    virtual void catalogListAcls(const QString &api_version, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &skip = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &select = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &orderby = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &count = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  database_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [optional]
    * @param[in]  top qint32 [optional]
    * @param[in]  skip qint32 [optional]
    * @param[in]  select QString [optional]
    * @param[in]  orderby QString [optional]
    * @param[in]  count bool [optional]
    */
    virtual void catalogListAclsByDatabase(const QString &database_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &skip = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &select = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &orderby = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &count = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  database_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [optional]
    * @param[in]  top qint32 [optional]
    * @param[in]  skip qint32 [optional]
    * @param[in]  select QString [optional]
    * @param[in]  orderby QString [optional]
    * @param[in]  count bool [optional]
    */
    virtual void catalogListAssemblies(const QString &database_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &skip = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &select = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &orderby = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &count = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  database_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [optional]
    * @param[in]  top qint32 [optional]
    * @param[in]  skip qint32 [optional]
    * @param[in]  select QString [optional]
    * @param[in]  orderby QString [optional]
    * @param[in]  count bool [optional]
    */
    virtual void catalogListCredentials(const QString &database_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &skip = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &select = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &orderby = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &count = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [optional]
    * @param[in]  top qint32 [optional]
    * @param[in]  skip qint32 [optional]
    * @param[in]  select QString [optional]
    * @param[in]  orderby QString [optional]
    * @param[in]  count bool [optional]
    */
    virtual void catalogListDatabases(const QString &api_version, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &skip = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &select = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &orderby = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &count = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  database_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [optional]
    * @param[in]  top qint32 [optional]
    * @param[in]  skip qint32 [optional]
    * @param[in]  select QString [optional]
    * @param[in]  orderby QString [optional]
    * @param[in]  count bool [optional]
    */
    virtual void catalogListExternalDataSources(const QString &database_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &skip = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &select = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &orderby = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &count = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  database_name QString [required]
    * @param[in]  schema_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [optional]
    * @param[in]  top qint32 [optional]
    * @param[in]  skip qint32 [optional]
    * @param[in]  select QString [optional]
    * @param[in]  orderby QString [optional]
    * @param[in]  count bool [optional]
    */
    virtual void catalogListPackages(const QString &database_name, const QString &schema_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &skip = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &select = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &orderby = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &count = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  database_name QString [required]
    * @param[in]  schema_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [optional]
    * @param[in]  top qint32 [optional]
    * @param[in]  skip qint32 [optional]
    * @param[in]  select QString [optional]
    * @param[in]  orderby QString [optional]
    * @param[in]  count bool [optional]
    */
    virtual void catalogListProcedures(const QString &database_name, const QString &schema_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &skip = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &select = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &orderby = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &count = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  database_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [optional]
    * @param[in]  top qint32 [optional]
    * @param[in]  skip qint32 [optional]
    * @param[in]  select QString [optional]
    * @param[in]  orderby QString [optional]
    * @param[in]  count bool [optional]
    */
    virtual void catalogListSchemas(const QString &database_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &skip = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &select = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &orderby = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &count = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  database_name QString [required]
    * @param[in]  schema_name QString [required]
    * @param[in]  table_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [optional]
    * @param[in]  top qint32 [optional]
    * @param[in]  skip qint32 [optional]
    * @param[in]  select QString [optional]
    * @param[in]  orderby QString [optional]
    * @param[in]  count bool [optional]
    */
    virtual void catalogListTableFragments(const QString &database_name, const QString &schema_name, const QString &table_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &skip = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &select = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &orderby = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &count = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  database_name QString [required]
    * @param[in]  schema_name QString [required]
    * @param[in]  table_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [optional]
    * @param[in]  top qint32 [optional]
    * @param[in]  skip qint32 [optional]
    * @param[in]  select QString [optional]
    * @param[in]  orderby QString [optional]
    * @param[in]  count bool [optional]
    */
    virtual void catalogListTablePartitions(const QString &database_name, const QString &schema_name, const QString &table_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &skip = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &select = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &orderby = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &count = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  database_name QString [required]
    * @param[in]  schema_name QString [required]
    * @param[in]  table_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [optional]
    * @param[in]  top qint32 [optional]
    * @param[in]  skip qint32 [optional]
    * @param[in]  select QString [optional]
    * @param[in]  orderby QString [optional]
    * @param[in]  count bool [optional]
    */
    virtual void catalogListTableStatistics(const QString &database_name, const QString &schema_name, const QString &table_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &skip = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &select = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &orderby = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &count = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  database_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [optional]
    * @param[in]  top qint32 [optional]
    * @param[in]  skip qint32 [optional]
    * @param[in]  select QString [optional]
    * @param[in]  orderby QString [optional]
    * @param[in]  count bool [optional]
    */
    virtual void catalogListTableStatisticsByDatabase(const QString &database_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &skip = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &select = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &orderby = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &count = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  database_name QString [required]
    * @param[in]  schema_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [optional]
    * @param[in]  top qint32 [optional]
    * @param[in]  skip qint32 [optional]
    * @param[in]  select QString [optional]
    * @param[in]  orderby QString [optional]
    * @param[in]  count bool [optional]
    */
    virtual void catalogListTableStatisticsByDatabaseAndSchema(const QString &database_name, const QString &schema_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &skip = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &select = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &orderby = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &count = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  database_name QString [required]
    * @param[in]  schema_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [optional]
    * @param[in]  top qint32 [optional]
    * @param[in]  skip qint32 [optional]
    * @param[in]  select QString [optional]
    * @param[in]  orderby QString [optional]
    * @param[in]  count bool [optional]
    */
    virtual void catalogListTableTypes(const QString &database_name, const QString &schema_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &skip = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &select = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &orderby = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &count = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  database_name QString [required]
    * @param[in]  schema_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [optional]
    * @param[in]  top qint32 [optional]
    * @param[in]  skip qint32 [optional]
    * @param[in]  select QString [optional]
    * @param[in]  orderby QString [optional]
    * @param[in]  count bool [optional]
    */
    virtual void catalogListTableValuedFunctions(const QString &database_name, const QString &schema_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &skip = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &select = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &orderby = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &count = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  database_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [optional]
    * @param[in]  top qint32 [optional]
    * @param[in]  skip qint32 [optional]
    * @param[in]  select QString [optional]
    * @param[in]  orderby QString [optional]
    * @param[in]  count bool [optional]
    */
    virtual void catalogListTableValuedFunctionsByDatabase(const QString &database_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &skip = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &select = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &orderby = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &count = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  database_name QString [required]
    * @param[in]  schema_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [optional]
    * @param[in]  top qint32 [optional]
    * @param[in]  skip qint32 [optional]
    * @param[in]  select QString [optional]
    * @param[in]  orderby QString [optional]
    * @param[in]  count bool [optional]
    * @param[in]  basic bool [optional]
    */
    virtual void catalogListTables(const QString &database_name, const QString &schema_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &skip = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &select = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &orderby = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &count = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &basic = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  database_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [optional]
    * @param[in]  top qint32 [optional]
    * @param[in]  skip qint32 [optional]
    * @param[in]  select QString [optional]
    * @param[in]  orderby QString [optional]
    * @param[in]  count bool [optional]
    * @param[in]  basic bool [optional]
    */
    virtual void catalogListTablesByDatabase(const QString &database_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &skip = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &select = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &orderby = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &count = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &basic = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  database_name QString [required]
    * @param[in]  schema_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [optional]
    * @param[in]  top qint32 [optional]
    * @param[in]  skip qint32 [optional]
    * @param[in]  select QString [optional]
    * @param[in]  orderby QString [optional]
    * @param[in]  count bool [optional]
    */
    virtual void catalogListTypes(const QString &database_name, const QString &schema_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &skip = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &select = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &orderby = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &count = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  database_name QString [required]
    * @param[in]  schema_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [optional]
    * @param[in]  top qint32 [optional]
    * @param[in]  skip qint32 [optional]
    * @param[in]  select QString [optional]
    * @param[in]  orderby QString [optional]
    * @param[in]  count bool [optional]
    */
    virtual void catalogListViews(const QString &database_name, const QString &schema_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &skip = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &select = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &orderby = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &count = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  database_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [optional]
    * @param[in]  top qint32 [optional]
    * @param[in]  skip qint32 [optional]
    * @param[in]  select QString [optional]
    * @param[in]  orderby QString [optional]
    * @param[in]  count bool [optional]
    */
    virtual void catalogListViewsByDatabase(const QString &database_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &skip = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &select = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &orderby = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &count = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  database_name QString [required]
    * @param[in]  schema_name QString [required]
    * @param[in]  table_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  max_rows qint64 [optional]
    * @param[in]  max_columns qint64 [optional]
    */
    virtual void catalogPreviewTable(const QString &database_name, const QString &schema_name, const QString &table_name, const QString &api_version, const ::OpenAPI::OptionalParam<qint64> &max_rows = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint64> &max_columns = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  database_name QString [required]
    * @param[in]  schema_name QString [required]
    * @param[in]  table_name QString [required]
    * @param[in]  partition_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  max_rows qint64 [optional]
    * @param[in]  max_columns qint64 [optional]
    */
    virtual void catalogPreviewTablePartition(const QString &database_name, const QString &schema_name, const QString &table_name, const QString &partition_name, const QString &api_version, const ::OpenAPI::OptionalParam<qint64> &max_rows = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint64> &max_columns = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  database_name QString [required]
    * @param[in]  credential_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAIDataLakeAnalyticsCatalogCredentialUpdateParameters [required]
    */
    virtual void catalogUpdateCredential(const QString &database_name, const QString &credential_name, const QString &api_version, const OAIDataLakeAnalyticsCatalogCredentialUpdateParameters &parameters);

    /**
    * @param[in]  database_name QString [required]
    * @param[in]  secret_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAIDataLakeAnalyticsCatalogSecretCreateOrUpdateParameters [required]
    */
    Q_DECL_DEPRECATED virtual void catalogUpdateSecret(const QString &database_name, const QString &secret_name, const QString &api_version, const OAIDataLakeAnalyticsCatalogSecretCreateOrUpdateParameters &parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void catalogCreateCredentialCallback(OAIHttpRequestWorker *worker);
    void catalogCreateSecretCallback(OAIHttpRequestWorker *worker);
    void catalogDeleteAllSecretsCallback(OAIHttpRequestWorker *worker);
    void catalogDeleteCredentialCallback(OAIHttpRequestWorker *worker);
    void catalogDeleteSecretCallback(OAIHttpRequestWorker *worker);
    void catalogGetAssemblyCallback(OAIHttpRequestWorker *worker);
    void catalogGetCredentialCallback(OAIHttpRequestWorker *worker);
    void catalogGetDatabaseCallback(OAIHttpRequestWorker *worker);
    void catalogGetExternalDataSourceCallback(OAIHttpRequestWorker *worker);
    void catalogGetPackageCallback(OAIHttpRequestWorker *worker);
    void catalogGetProcedureCallback(OAIHttpRequestWorker *worker);
    void catalogGetSchemaCallback(OAIHttpRequestWorker *worker);
    void catalogGetSecretCallback(OAIHttpRequestWorker *worker);
    void catalogGetTableCallback(OAIHttpRequestWorker *worker);
    void catalogGetTablePartitionCallback(OAIHttpRequestWorker *worker);
    void catalogGetTableStatisticCallback(OAIHttpRequestWorker *worker);
    void catalogGetTableTypeCallback(OAIHttpRequestWorker *worker);
    void catalogGetTableValuedFunctionCallback(OAIHttpRequestWorker *worker);
    void catalogGetViewCallback(OAIHttpRequestWorker *worker);
    void catalogListAclsCallback(OAIHttpRequestWorker *worker);
    void catalogListAclsByDatabaseCallback(OAIHttpRequestWorker *worker);
    void catalogListAssembliesCallback(OAIHttpRequestWorker *worker);
    void catalogListCredentialsCallback(OAIHttpRequestWorker *worker);
    void catalogListDatabasesCallback(OAIHttpRequestWorker *worker);
    void catalogListExternalDataSourcesCallback(OAIHttpRequestWorker *worker);
    void catalogListPackagesCallback(OAIHttpRequestWorker *worker);
    void catalogListProceduresCallback(OAIHttpRequestWorker *worker);
    void catalogListSchemasCallback(OAIHttpRequestWorker *worker);
    void catalogListTableFragmentsCallback(OAIHttpRequestWorker *worker);
    void catalogListTablePartitionsCallback(OAIHttpRequestWorker *worker);
    void catalogListTableStatisticsCallback(OAIHttpRequestWorker *worker);
    void catalogListTableStatisticsByDatabaseCallback(OAIHttpRequestWorker *worker);
    void catalogListTableStatisticsByDatabaseAndSchemaCallback(OAIHttpRequestWorker *worker);
    void catalogListTableTypesCallback(OAIHttpRequestWorker *worker);
    void catalogListTableValuedFunctionsCallback(OAIHttpRequestWorker *worker);
    void catalogListTableValuedFunctionsByDatabaseCallback(OAIHttpRequestWorker *worker);
    void catalogListTablesCallback(OAIHttpRequestWorker *worker);
    void catalogListTablesByDatabaseCallback(OAIHttpRequestWorker *worker);
    void catalogListTypesCallback(OAIHttpRequestWorker *worker);
    void catalogListViewsCallback(OAIHttpRequestWorker *worker);
    void catalogListViewsByDatabaseCallback(OAIHttpRequestWorker *worker);
    void catalogPreviewTableCallback(OAIHttpRequestWorker *worker);
    void catalogPreviewTablePartitionCallback(OAIHttpRequestWorker *worker);
    void catalogUpdateCredentialCallback(OAIHttpRequestWorker *worker);
    void catalogUpdateSecretCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void catalogCreateCredentialSignal();
    void catalogCreateSecretSignal();
    void catalogDeleteAllSecretsSignal();
    void catalogDeleteCredentialSignal();
    void catalogDeleteSecretSignal();
    void catalogGetAssemblySignal(OAIUSqlAssembly summary);
    void catalogGetCredentialSignal(OAIUSqlCredential summary);
    void catalogGetDatabaseSignal(OAIUSqlDatabase summary);
    void catalogGetExternalDataSourceSignal(OAIUSqlExternalDataSource summary);
    void catalogGetPackageSignal(OAIUSqlPackage summary);
    void catalogGetProcedureSignal(OAIUSqlProcedure summary);
    void catalogGetSchemaSignal(OAIUSqlSchema summary);
    void catalogGetSecretSignal(OAIUSqlSecret summary);
    void catalogGetTableSignal(OAIUSqlTable summary);
    void catalogGetTablePartitionSignal(OAIUSqlTablePartition summary);
    void catalogGetTableStatisticSignal(OAIUSqlTableStatistics summary);
    void catalogGetTableTypeSignal(OAIUSqlTableType summary);
    void catalogGetTableValuedFunctionSignal(OAIUSqlTableValuedFunction summary);
    void catalogGetViewSignal(OAIUSqlView summary);
    void catalogListAclsSignal(OAIAclList summary);
    void catalogListAclsByDatabaseSignal(OAIAclList summary);
    void catalogListAssembliesSignal(OAIUSqlAssemblyList summary);
    void catalogListCredentialsSignal(OAIUSqlCredentialList summary);
    void catalogListDatabasesSignal(OAIUSqlDatabaseList summary);
    void catalogListExternalDataSourcesSignal(OAIUSqlExternalDataSourceList summary);
    void catalogListPackagesSignal(OAIUSqlPackageList summary);
    void catalogListProceduresSignal(OAIUSqlProcedureList summary);
    void catalogListSchemasSignal(OAIUSqlSchemaList summary);
    void catalogListTableFragmentsSignal(OAIUSqlTableFragmentList summary);
    void catalogListTablePartitionsSignal(OAIUSqlTablePartitionList summary);
    void catalogListTableStatisticsSignal(OAIUSqlTableStatisticsList summary);
    void catalogListTableStatisticsByDatabaseSignal(OAIUSqlTableStatisticsList summary);
    void catalogListTableStatisticsByDatabaseAndSchemaSignal(OAIUSqlTableStatisticsList summary);
    void catalogListTableTypesSignal(OAIUSqlTableTypeList summary);
    void catalogListTableValuedFunctionsSignal(OAIUSqlTableValuedFunctionList summary);
    void catalogListTableValuedFunctionsByDatabaseSignal(OAIUSqlTableValuedFunctionList summary);
    void catalogListTablesSignal(OAIUSqlTableList summary);
    void catalogListTablesByDatabaseSignal(OAIUSqlTableList summary);
    void catalogListTypesSignal(OAIUSqlTypeList summary);
    void catalogListViewsSignal(OAIUSqlViewList summary);
    void catalogListViewsByDatabaseSignal(OAIUSqlViewList summary);
    void catalogPreviewTableSignal(OAIUSqlTablePreview summary);
    void catalogPreviewTablePartitionSignal(OAIUSqlTablePreview summary);
    void catalogUpdateCredentialSignal();
    void catalogUpdateSecretSignal();


    void catalogCreateCredentialSignalFull(OAIHttpRequestWorker *worker);
    void catalogCreateSecretSignalFull(OAIHttpRequestWorker *worker);
    void catalogDeleteAllSecretsSignalFull(OAIHttpRequestWorker *worker);
    void catalogDeleteCredentialSignalFull(OAIHttpRequestWorker *worker);
    void catalogDeleteSecretSignalFull(OAIHttpRequestWorker *worker);
    void catalogGetAssemblySignalFull(OAIHttpRequestWorker *worker, OAIUSqlAssembly summary);
    void catalogGetCredentialSignalFull(OAIHttpRequestWorker *worker, OAIUSqlCredential summary);
    void catalogGetDatabaseSignalFull(OAIHttpRequestWorker *worker, OAIUSqlDatabase summary);
    void catalogGetExternalDataSourceSignalFull(OAIHttpRequestWorker *worker, OAIUSqlExternalDataSource summary);
    void catalogGetPackageSignalFull(OAIHttpRequestWorker *worker, OAIUSqlPackage summary);
    void catalogGetProcedureSignalFull(OAIHttpRequestWorker *worker, OAIUSqlProcedure summary);
    void catalogGetSchemaSignalFull(OAIHttpRequestWorker *worker, OAIUSqlSchema summary);
    void catalogGetSecretSignalFull(OAIHttpRequestWorker *worker, OAIUSqlSecret summary);
    void catalogGetTableSignalFull(OAIHttpRequestWorker *worker, OAIUSqlTable summary);
    void catalogGetTablePartitionSignalFull(OAIHttpRequestWorker *worker, OAIUSqlTablePartition summary);
    void catalogGetTableStatisticSignalFull(OAIHttpRequestWorker *worker, OAIUSqlTableStatistics summary);
    void catalogGetTableTypeSignalFull(OAIHttpRequestWorker *worker, OAIUSqlTableType summary);
    void catalogGetTableValuedFunctionSignalFull(OAIHttpRequestWorker *worker, OAIUSqlTableValuedFunction summary);
    void catalogGetViewSignalFull(OAIHttpRequestWorker *worker, OAIUSqlView summary);
    void catalogListAclsSignalFull(OAIHttpRequestWorker *worker, OAIAclList summary);
    void catalogListAclsByDatabaseSignalFull(OAIHttpRequestWorker *worker, OAIAclList summary);
    void catalogListAssembliesSignalFull(OAIHttpRequestWorker *worker, OAIUSqlAssemblyList summary);
    void catalogListCredentialsSignalFull(OAIHttpRequestWorker *worker, OAIUSqlCredentialList summary);
    void catalogListDatabasesSignalFull(OAIHttpRequestWorker *worker, OAIUSqlDatabaseList summary);
    void catalogListExternalDataSourcesSignalFull(OAIHttpRequestWorker *worker, OAIUSqlExternalDataSourceList summary);
    void catalogListPackagesSignalFull(OAIHttpRequestWorker *worker, OAIUSqlPackageList summary);
    void catalogListProceduresSignalFull(OAIHttpRequestWorker *worker, OAIUSqlProcedureList summary);
    void catalogListSchemasSignalFull(OAIHttpRequestWorker *worker, OAIUSqlSchemaList summary);
    void catalogListTableFragmentsSignalFull(OAIHttpRequestWorker *worker, OAIUSqlTableFragmentList summary);
    void catalogListTablePartitionsSignalFull(OAIHttpRequestWorker *worker, OAIUSqlTablePartitionList summary);
    void catalogListTableStatisticsSignalFull(OAIHttpRequestWorker *worker, OAIUSqlTableStatisticsList summary);
    void catalogListTableStatisticsByDatabaseSignalFull(OAIHttpRequestWorker *worker, OAIUSqlTableStatisticsList summary);
    void catalogListTableStatisticsByDatabaseAndSchemaSignalFull(OAIHttpRequestWorker *worker, OAIUSqlTableStatisticsList summary);
    void catalogListTableTypesSignalFull(OAIHttpRequestWorker *worker, OAIUSqlTableTypeList summary);
    void catalogListTableValuedFunctionsSignalFull(OAIHttpRequestWorker *worker, OAIUSqlTableValuedFunctionList summary);
    void catalogListTableValuedFunctionsByDatabaseSignalFull(OAIHttpRequestWorker *worker, OAIUSqlTableValuedFunctionList summary);
    void catalogListTablesSignalFull(OAIHttpRequestWorker *worker, OAIUSqlTableList summary);
    void catalogListTablesByDatabaseSignalFull(OAIHttpRequestWorker *worker, OAIUSqlTableList summary);
    void catalogListTypesSignalFull(OAIHttpRequestWorker *worker, OAIUSqlTypeList summary);
    void catalogListViewsSignalFull(OAIHttpRequestWorker *worker, OAIUSqlViewList summary);
    void catalogListViewsByDatabaseSignalFull(OAIHttpRequestWorker *worker, OAIUSqlViewList summary);
    void catalogPreviewTableSignalFull(OAIHttpRequestWorker *worker, OAIUSqlTablePreview summary);
    void catalogPreviewTablePartitionSignalFull(OAIHttpRequestWorker *worker, OAIUSqlTablePreview summary);
    void catalogUpdateCredentialSignalFull(OAIHttpRequestWorker *worker);
    void catalogUpdateSecretSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use catalogCreateCredentialSignalError() instead")
    void catalogCreateCredentialSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void catalogCreateCredentialSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use catalogCreateSecretSignalError() instead")
    void catalogCreateSecretSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void catalogCreateSecretSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use catalogDeleteAllSecretsSignalError() instead")
    void catalogDeleteAllSecretsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void catalogDeleteAllSecretsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use catalogDeleteCredentialSignalError() instead")
    void catalogDeleteCredentialSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void catalogDeleteCredentialSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use catalogDeleteSecretSignalError() instead")
    void catalogDeleteSecretSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void catalogDeleteSecretSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use catalogGetAssemblySignalError() instead")
    void catalogGetAssemblySignalE(OAIUSqlAssembly summary, QNetworkReply::NetworkError error_type, QString error_str);
    void catalogGetAssemblySignalError(OAIUSqlAssembly summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use catalogGetCredentialSignalError() instead")
    void catalogGetCredentialSignalE(OAIUSqlCredential summary, QNetworkReply::NetworkError error_type, QString error_str);
    void catalogGetCredentialSignalError(OAIUSqlCredential summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use catalogGetDatabaseSignalError() instead")
    void catalogGetDatabaseSignalE(OAIUSqlDatabase summary, QNetworkReply::NetworkError error_type, QString error_str);
    void catalogGetDatabaseSignalError(OAIUSqlDatabase summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use catalogGetExternalDataSourceSignalError() instead")
    void catalogGetExternalDataSourceSignalE(OAIUSqlExternalDataSource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void catalogGetExternalDataSourceSignalError(OAIUSqlExternalDataSource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use catalogGetPackageSignalError() instead")
    void catalogGetPackageSignalE(OAIUSqlPackage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void catalogGetPackageSignalError(OAIUSqlPackage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use catalogGetProcedureSignalError() instead")
    void catalogGetProcedureSignalE(OAIUSqlProcedure summary, QNetworkReply::NetworkError error_type, QString error_str);
    void catalogGetProcedureSignalError(OAIUSqlProcedure summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use catalogGetSchemaSignalError() instead")
    void catalogGetSchemaSignalE(OAIUSqlSchema summary, QNetworkReply::NetworkError error_type, QString error_str);
    void catalogGetSchemaSignalError(OAIUSqlSchema summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use catalogGetSecretSignalError() instead")
    void catalogGetSecretSignalE(OAIUSqlSecret summary, QNetworkReply::NetworkError error_type, QString error_str);
    void catalogGetSecretSignalError(OAIUSqlSecret summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use catalogGetTableSignalError() instead")
    void catalogGetTableSignalE(OAIUSqlTable summary, QNetworkReply::NetworkError error_type, QString error_str);
    void catalogGetTableSignalError(OAIUSqlTable summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use catalogGetTablePartitionSignalError() instead")
    void catalogGetTablePartitionSignalE(OAIUSqlTablePartition summary, QNetworkReply::NetworkError error_type, QString error_str);
    void catalogGetTablePartitionSignalError(OAIUSqlTablePartition summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use catalogGetTableStatisticSignalError() instead")
    void catalogGetTableStatisticSignalE(OAIUSqlTableStatistics summary, QNetworkReply::NetworkError error_type, QString error_str);
    void catalogGetTableStatisticSignalError(OAIUSqlTableStatistics summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use catalogGetTableTypeSignalError() instead")
    void catalogGetTableTypeSignalE(OAIUSqlTableType summary, QNetworkReply::NetworkError error_type, QString error_str);
    void catalogGetTableTypeSignalError(OAIUSqlTableType summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use catalogGetTableValuedFunctionSignalError() instead")
    void catalogGetTableValuedFunctionSignalE(OAIUSqlTableValuedFunction summary, QNetworkReply::NetworkError error_type, QString error_str);
    void catalogGetTableValuedFunctionSignalError(OAIUSqlTableValuedFunction summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use catalogGetViewSignalError() instead")
    void catalogGetViewSignalE(OAIUSqlView summary, QNetworkReply::NetworkError error_type, QString error_str);
    void catalogGetViewSignalError(OAIUSqlView summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use catalogListAclsSignalError() instead")
    void catalogListAclsSignalE(OAIAclList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void catalogListAclsSignalError(OAIAclList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use catalogListAclsByDatabaseSignalError() instead")
    void catalogListAclsByDatabaseSignalE(OAIAclList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void catalogListAclsByDatabaseSignalError(OAIAclList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use catalogListAssembliesSignalError() instead")
    void catalogListAssembliesSignalE(OAIUSqlAssemblyList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void catalogListAssembliesSignalError(OAIUSqlAssemblyList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use catalogListCredentialsSignalError() instead")
    void catalogListCredentialsSignalE(OAIUSqlCredentialList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void catalogListCredentialsSignalError(OAIUSqlCredentialList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use catalogListDatabasesSignalError() instead")
    void catalogListDatabasesSignalE(OAIUSqlDatabaseList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void catalogListDatabasesSignalError(OAIUSqlDatabaseList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use catalogListExternalDataSourcesSignalError() instead")
    void catalogListExternalDataSourcesSignalE(OAIUSqlExternalDataSourceList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void catalogListExternalDataSourcesSignalError(OAIUSqlExternalDataSourceList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use catalogListPackagesSignalError() instead")
    void catalogListPackagesSignalE(OAIUSqlPackageList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void catalogListPackagesSignalError(OAIUSqlPackageList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use catalogListProceduresSignalError() instead")
    void catalogListProceduresSignalE(OAIUSqlProcedureList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void catalogListProceduresSignalError(OAIUSqlProcedureList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use catalogListSchemasSignalError() instead")
    void catalogListSchemasSignalE(OAIUSqlSchemaList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void catalogListSchemasSignalError(OAIUSqlSchemaList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use catalogListTableFragmentsSignalError() instead")
    void catalogListTableFragmentsSignalE(OAIUSqlTableFragmentList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void catalogListTableFragmentsSignalError(OAIUSqlTableFragmentList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use catalogListTablePartitionsSignalError() instead")
    void catalogListTablePartitionsSignalE(OAIUSqlTablePartitionList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void catalogListTablePartitionsSignalError(OAIUSqlTablePartitionList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use catalogListTableStatisticsSignalError() instead")
    void catalogListTableStatisticsSignalE(OAIUSqlTableStatisticsList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void catalogListTableStatisticsSignalError(OAIUSqlTableStatisticsList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use catalogListTableStatisticsByDatabaseSignalError() instead")
    void catalogListTableStatisticsByDatabaseSignalE(OAIUSqlTableStatisticsList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void catalogListTableStatisticsByDatabaseSignalError(OAIUSqlTableStatisticsList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use catalogListTableStatisticsByDatabaseAndSchemaSignalError() instead")
    void catalogListTableStatisticsByDatabaseAndSchemaSignalE(OAIUSqlTableStatisticsList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void catalogListTableStatisticsByDatabaseAndSchemaSignalError(OAIUSqlTableStatisticsList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use catalogListTableTypesSignalError() instead")
    void catalogListTableTypesSignalE(OAIUSqlTableTypeList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void catalogListTableTypesSignalError(OAIUSqlTableTypeList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use catalogListTableValuedFunctionsSignalError() instead")
    void catalogListTableValuedFunctionsSignalE(OAIUSqlTableValuedFunctionList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void catalogListTableValuedFunctionsSignalError(OAIUSqlTableValuedFunctionList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use catalogListTableValuedFunctionsByDatabaseSignalError() instead")
    void catalogListTableValuedFunctionsByDatabaseSignalE(OAIUSqlTableValuedFunctionList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void catalogListTableValuedFunctionsByDatabaseSignalError(OAIUSqlTableValuedFunctionList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use catalogListTablesSignalError() instead")
    void catalogListTablesSignalE(OAIUSqlTableList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void catalogListTablesSignalError(OAIUSqlTableList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use catalogListTablesByDatabaseSignalError() instead")
    void catalogListTablesByDatabaseSignalE(OAIUSqlTableList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void catalogListTablesByDatabaseSignalError(OAIUSqlTableList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use catalogListTypesSignalError() instead")
    void catalogListTypesSignalE(OAIUSqlTypeList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void catalogListTypesSignalError(OAIUSqlTypeList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use catalogListViewsSignalError() instead")
    void catalogListViewsSignalE(OAIUSqlViewList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void catalogListViewsSignalError(OAIUSqlViewList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use catalogListViewsByDatabaseSignalError() instead")
    void catalogListViewsByDatabaseSignalE(OAIUSqlViewList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void catalogListViewsByDatabaseSignalError(OAIUSqlViewList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use catalogPreviewTableSignalError() instead")
    void catalogPreviewTableSignalE(OAIUSqlTablePreview summary, QNetworkReply::NetworkError error_type, QString error_str);
    void catalogPreviewTableSignalError(OAIUSqlTablePreview summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use catalogPreviewTablePartitionSignalError() instead")
    void catalogPreviewTablePartitionSignalE(OAIUSqlTablePreview summary, QNetworkReply::NetworkError error_type, QString error_str);
    void catalogPreviewTablePartitionSignalError(OAIUSqlTablePreview summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use catalogUpdateCredentialSignalError() instead")
    void catalogUpdateCredentialSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void catalogUpdateCredentialSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use catalogUpdateSecretSignalError() instead")
    void catalogUpdateSecretSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void catalogUpdateSecretSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use catalogCreateCredentialSignalErrorFull() instead")
    void catalogCreateCredentialSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void catalogCreateCredentialSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use catalogCreateSecretSignalErrorFull() instead")
    void catalogCreateSecretSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void catalogCreateSecretSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use catalogDeleteAllSecretsSignalErrorFull() instead")
    void catalogDeleteAllSecretsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void catalogDeleteAllSecretsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use catalogDeleteCredentialSignalErrorFull() instead")
    void catalogDeleteCredentialSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void catalogDeleteCredentialSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use catalogDeleteSecretSignalErrorFull() instead")
    void catalogDeleteSecretSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void catalogDeleteSecretSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use catalogGetAssemblySignalErrorFull() instead")
    void catalogGetAssemblySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void catalogGetAssemblySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use catalogGetCredentialSignalErrorFull() instead")
    void catalogGetCredentialSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void catalogGetCredentialSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use catalogGetDatabaseSignalErrorFull() instead")
    void catalogGetDatabaseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void catalogGetDatabaseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use catalogGetExternalDataSourceSignalErrorFull() instead")
    void catalogGetExternalDataSourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void catalogGetExternalDataSourceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use catalogGetPackageSignalErrorFull() instead")
    void catalogGetPackageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void catalogGetPackageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use catalogGetProcedureSignalErrorFull() instead")
    void catalogGetProcedureSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void catalogGetProcedureSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use catalogGetSchemaSignalErrorFull() instead")
    void catalogGetSchemaSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void catalogGetSchemaSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use catalogGetSecretSignalErrorFull() instead")
    void catalogGetSecretSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void catalogGetSecretSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use catalogGetTableSignalErrorFull() instead")
    void catalogGetTableSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void catalogGetTableSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use catalogGetTablePartitionSignalErrorFull() instead")
    void catalogGetTablePartitionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void catalogGetTablePartitionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use catalogGetTableStatisticSignalErrorFull() instead")
    void catalogGetTableStatisticSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void catalogGetTableStatisticSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use catalogGetTableTypeSignalErrorFull() instead")
    void catalogGetTableTypeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void catalogGetTableTypeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use catalogGetTableValuedFunctionSignalErrorFull() instead")
    void catalogGetTableValuedFunctionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void catalogGetTableValuedFunctionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use catalogGetViewSignalErrorFull() instead")
    void catalogGetViewSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void catalogGetViewSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use catalogListAclsSignalErrorFull() instead")
    void catalogListAclsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void catalogListAclsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use catalogListAclsByDatabaseSignalErrorFull() instead")
    void catalogListAclsByDatabaseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void catalogListAclsByDatabaseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use catalogListAssembliesSignalErrorFull() instead")
    void catalogListAssembliesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void catalogListAssembliesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use catalogListCredentialsSignalErrorFull() instead")
    void catalogListCredentialsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void catalogListCredentialsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use catalogListDatabasesSignalErrorFull() instead")
    void catalogListDatabasesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void catalogListDatabasesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use catalogListExternalDataSourcesSignalErrorFull() instead")
    void catalogListExternalDataSourcesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void catalogListExternalDataSourcesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use catalogListPackagesSignalErrorFull() instead")
    void catalogListPackagesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void catalogListPackagesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use catalogListProceduresSignalErrorFull() instead")
    void catalogListProceduresSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void catalogListProceduresSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use catalogListSchemasSignalErrorFull() instead")
    void catalogListSchemasSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void catalogListSchemasSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use catalogListTableFragmentsSignalErrorFull() instead")
    void catalogListTableFragmentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void catalogListTableFragmentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use catalogListTablePartitionsSignalErrorFull() instead")
    void catalogListTablePartitionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void catalogListTablePartitionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use catalogListTableStatisticsSignalErrorFull() instead")
    void catalogListTableStatisticsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void catalogListTableStatisticsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use catalogListTableStatisticsByDatabaseSignalErrorFull() instead")
    void catalogListTableStatisticsByDatabaseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void catalogListTableStatisticsByDatabaseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use catalogListTableStatisticsByDatabaseAndSchemaSignalErrorFull() instead")
    void catalogListTableStatisticsByDatabaseAndSchemaSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void catalogListTableStatisticsByDatabaseAndSchemaSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use catalogListTableTypesSignalErrorFull() instead")
    void catalogListTableTypesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void catalogListTableTypesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use catalogListTableValuedFunctionsSignalErrorFull() instead")
    void catalogListTableValuedFunctionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void catalogListTableValuedFunctionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use catalogListTableValuedFunctionsByDatabaseSignalErrorFull() instead")
    void catalogListTableValuedFunctionsByDatabaseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void catalogListTableValuedFunctionsByDatabaseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use catalogListTablesSignalErrorFull() instead")
    void catalogListTablesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void catalogListTablesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use catalogListTablesByDatabaseSignalErrorFull() instead")
    void catalogListTablesByDatabaseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void catalogListTablesByDatabaseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use catalogListTypesSignalErrorFull() instead")
    void catalogListTypesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void catalogListTypesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use catalogListViewsSignalErrorFull() instead")
    void catalogListViewsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void catalogListViewsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use catalogListViewsByDatabaseSignalErrorFull() instead")
    void catalogListViewsByDatabaseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void catalogListViewsByDatabaseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use catalogPreviewTableSignalErrorFull() instead")
    void catalogPreviewTableSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void catalogPreviewTableSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use catalogPreviewTablePartitionSignalErrorFull() instead")
    void catalogPreviewTablePartitionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void catalogPreviewTablePartitionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use catalogUpdateCredentialSignalErrorFull() instead")
    void catalogUpdateCredentialSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void catalogUpdateCredentialSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use catalogUpdateSecretSignalErrorFull() instead")
    void catalogUpdateSecretSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void catalogUpdateSecretSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
