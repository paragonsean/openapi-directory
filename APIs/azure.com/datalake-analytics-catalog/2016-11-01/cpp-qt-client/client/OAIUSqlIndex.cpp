/**
 * DataLakeAnalyticsCatalogManagementClient
 * Creates an Azure Data Lake Analytics catalog client.
 *
 * The version of the OpenAPI document: 2016-11-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUSqlIndex.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUSqlIndex::OAIUSqlIndex(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUSqlIndex::OAIUSqlIndex() {
    this->initializeModel();
}

OAIUSqlIndex::~OAIUSqlIndex() {}

void OAIUSqlIndex::initializeModel() {

    m_columns_isSet = false;
    m_columns_isValid = false;

    m_distribution_info_isSet = false;
    m_distribution_info_isValid = false;

    m_index_id_isSet = false;
    m_index_id_isValid = false;

    m_index_keys_isSet = false;
    m_index_keys_isValid = false;

    m_is_columnstore_isSet = false;
    m_is_columnstore_isValid = false;

    m_is_unique_isSet = false;
    m_is_unique_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_partition_function_isSet = false;
    m_partition_function_isValid = false;

    m_partition_key_list_isSet = false;
    m_partition_key_list_isValid = false;

    m_stream_names_isSet = false;
    m_stream_names_isValid = false;
}

void OAIUSqlIndex::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUSqlIndex::fromJsonObject(QJsonObject json) {

    m_columns_isValid = ::OpenAPI::fromJsonValue(m_columns, json[QString("columns")]);
    m_columns_isSet = !json[QString("columns")].isNull() && m_columns_isValid;

    m_distribution_info_isValid = ::OpenAPI::fromJsonValue(m_distribution_info, json[QString("distributionInfo")]);
    m_distribution_info_isSet = !json[QString("distributionInfo")].isNull() && m_distribution_info_isValid;

    m_index_id_isValid = ::OpenAPI::fromJsonValue(m_index_id, json[QString("indexId")]);
    m_index_id_isSet = !json[QString("indexId")].isNull() && m_index_id_isValid;

    m_index_keys_isValid = ::OpenAPI::fromJsonValue(m_index_keys, json[QString("indexKeys")]);
    m_index_keys_isSet = !json[QString("indexKeys")].isNull() && m_index_keys_isValid;

    m_is_columnstore_isValid = ::OpenAPI::fromJsonValue(m_is_columnstore, json[QString("isColumnstore")]);
    m_is_columnstore_isSet = !json[QString("isColumnstore")].isNull() && m_is_columnstore_isValid;

    m_is_unique_isValid = ::OpenAPI::fromJsonValue(m_is_unique, json[QString("isUnique")]);
    m_is_unique_isSet = !json[QString("isUnique")].isNull() && m_is_unique_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_partition_function_isValid = ::OpenAPI::fromJsonValue(m_partition_function, json[QString("partitionFunction")]);
    m_partition_function_isSet = !json[QString("partitionFunction")].isNull() && m_partition_function_isValid;

    m_partition_key_list_isValid = ::OpenAPI::fromJsonValue(m_partition_key_list, json[QString("partitionKeyList")]);
    m_partition_key_list_isSet = !json[QString("partitionKeyList")].isNull() && m_partition_key_list_isValid;

    m_stream_names_isValid = ::OpenAPI::fromJsonValue(m_stream_names, json[QString("streamNames")]);
    m_stream_names_isSet = !json[QString("streamNames")].isNull() && m_stream_names_isValid;
}

QString OAIUSqlIndex::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUSqlIndex::asJsonObject() const {
    QJsonObject obj;
    if (m_columns.size() > 0) {
        obj.insert(QString("columns"), ::OpenAPI::toJsonValue(m_columns));
    }
    if (m_distribution_info.isSet()) {
        obj.insert(QString("distributionInfo"), ::OpenAPI::toJsonValue(m_distribution_info));
    }
    if (m_index_id_isSet) {
        obj.insert(QString("indexId"), ::OpenAPI::toJsonValue(m_index_id));
    }
    if (m_index_keys.size() > 0) {
        obj.insert(QString("indexKeys"), ::OpenAPI::toJsonValue(m_index_keys));
    }
    if (m_is_columnstore_isSet) {
        obj.insert(QString("isColumnstore"), ::OpenAPI::toJsonValue(m_is_columnstore));
    }
    if (m_is_unique_isSet) {
        obj.insert(QString("isUnique"), ::OpenAPI::toJsonValue(m_is_unique));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_partition_function_isSet) {
        obj.insert(QString("partitionFunction"), ::OpenAPI::toJsonValue(m_partition_function));
    }
    if (m_partition_key_list.size() > 0) {
        obj.insert(QString("partitionKeyList"), ::OpenAPI::toJsonValue(m_partition_key_list));
    }
    if (m_stream_names.size() > 0) {
        obj.insert(QString("streamNames"), ::OpenAPI::toJsonValue(m_stream_names));
    }
    return obj;
}

QList<QString> OAIUSqlIndex::getColumns() const {
    return m_columns;
}
void OAIUSqlIndex::setColumns(const QList<QString> &columns) {
    m_columns = columns;
    m_columns_isSet = true;
}

bool OAIUSqlIndex::is_columns_Set() const{
    return m_columns_isSet;
}

bool OAIUSqlIndex::is_columns_Valid() const{
    return m_columns_isValid;
}

OAIUSqlDistributionInfo OAIUSqlIndex::getDistributionInfo() const {
    return m_distribution_info;
}
void OAIUSqlIndex::setDistributionInfo(const OAIUSqlDistributionInfo &distribution_info) {
    m_distribution_info = distribution_info;
    m_distribution_info_isSet = true;
}

bool OAIUSqlIndex::is_distribution_info_Set() const{
    return m_distribution_info_isSet;
}

bool OAIUSqlIndex::is_distribution_info_Valid() const{
    return m_distribution_info_isValid;
}

qint32 OAIUSqlIndex::getIndexId() const {
    return m_index_id;
}
void OAIUSqlIndex::setIndexId(const qint32 &index_id) {
    m_index_id = index_id;
    m_index_id_isSet = true;
}

bool OAIUSqlIndex::is_index_id_Set() const{
    return m_index_id_isSet;
}

bool OAIUSqlIndex::is_index_id_Valid() const{
    return m_index_id_isValid;
}

QList<OAIUSqlDirectedColumn> OAIUSqlIndex::getIndexKeys() const {
    return m_index_keys;
}
void OAIUSqlIndex::setIndexKeys(const QList<OAIUSqlDirectedColumn> &index_keys) {
    m_index_keys = index_keys;
    m_index_keys_isSet = true;
}

bool OAIUSqlIndex::is_index_keys_Set() const{
    return m_index_keys_isSet;
}

bool OAIUSqlIndex::is_index_keys_Valid() const{
    return m_index_keys_isValid;
}

bool OAIUSqlIndex::isIsColumnstore() const {
    return m_is_columnstore;
}
void OAIUSqlIndex::setIsColumnstore(const bool &is_columnstore) {
    m_is_columnstore = is_columnstore;
    m_is_columnstore_isSet = true;
}

bool OAIUSqlIndex::is_is_columnstore_Set() const{
    return m_is_columnstore_isSet;
}

bool OAIUSqlIndex::is_is_columnstore_Valid() const{
    return m_is_columnstore_isValid;
}

bool OAIUSqlIndex::isIsUnique() const {
    return m_is_unique;
}
void OAIUSqlIndex::setIsUnique(const bool &is_unique) {
    m_is_unique = is_unique;
    m_is_unique_isSet = true;
}

bool OAIUSqlIndex::is_is_unique_Set() const{
    return m_is_unique_isSet;
}

bool OAIUSqlIndex::is_is_unique_Valid() const{
    return m_is_unique_isValid;
}

QString OAIUSqlIndex::getName() const {
    return m_name;
}
void OAIUSqlIndex::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIUSqlIndex::is_name_Set() const{
    return m_name_isSet;
}

bool OAIUSqlIndex::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIUSqlIndex::getPartitionFunction() const {
    return m_partition_function;
}
void OAIUSqlIndex::setPartitionFunction(const QString &partition_function) {
    m_partition_function = partition_function;
    m_partition_function_isSet = true;
}

bool OAIUSqlIndex::is_partition_function_Set() const{
    return m_partition_function_isSet;
}

bool OAIUSqlIndex::is_partition_function_Valid() const{
    return m_partition_function_isValid;
}

QList<QString> OAIUSqlIndex::getPartitionKeyList() const {
    return m_partition_key_list;
}
void OAIUSqlIndex::setPartitionKeyList(const QList<QString> &partition_key_list) {
    m_partition_key_list = partition_key_list;
    m_partition_key_list_isSet = true;
}

bool OAIUSqlIndex::is_partition_key_list_Set() const{
    return m_partition_key_list_isSet;
}

bool OAIUSqlIndex::is_partition_key_list_Valid() const{
    return m_partition_key_list_isValid;
}

QList<QString> OAIUSqlIndex::getStreamNames() const {
    return m_stream_names;
}
void OAIUSqlIndex::setStreamNames(const QList<QString> &stream_names) {
    m_stream_names = stream_names;
    m_stream_names_isSet = true;
}

bool OAIUSqlIndex::is_stream_names_Set() const{
    return m_stream_names_isSet;
}

bool OAIUSqlIndex::is_stream_names_Valid() const{
    return m_stream_names_isValid;
}

bool OAIUSqlIndex::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_columns.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_distribution_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_index_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_index_keys.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_columnstore_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_unique_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_partition_function_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_partition_key_list.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_stream_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUSqlIndex::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
