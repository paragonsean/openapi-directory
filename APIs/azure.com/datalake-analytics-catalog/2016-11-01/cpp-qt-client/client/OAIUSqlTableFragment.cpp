/**
 * DataLakeAnalyticsCatalogManagementClient
 * Creates an Azure Data Lake Analytics catalog client.
 *
 * The version of the OpenAPI document: 2016-11-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUSqlTableFragment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUSqlTableFragment::OAIUSqlTableFragment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUSqlTableFragment::OAIUSqlTableFragment() {
    this->initializeModel();
}

OAIUSqlTableFragment::~OAIUSqlTableFragment() {}

void OAIUSqlTableFragment::initializeModel() {

    m_create_date_isSet = false;
    m_create_date_isValid = false;

    m_fragment_id_isSet = false;
    m_fragment_id_isValid = false;

    m_index_id_isSet = false;
    m_index_id_isValid = false;

    m_parent_id_isSet = false;
    m_parent_id_isValid = false;

    m_row_count_isSet = false;
    m_row_count_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;

    m_stream_path_isSet = false;
    m_stream_path_isValid = false;
}

void OAIUSqlTableFragment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUSqlTableFragment::fromJsonObject(QJsonObject json) {

    m_create_date_isValid = ::OpenAPI::fromJsonValue(m_create_date, json[QString("createDate")]);
    m_create_date_isSet = !json[QString("createDate")].isNull() && m_create_date_isValid;

    m_fragment_id_isValid = ::OpenAPI::fromJsonValue(m_fragment_id, json[QString("fragmentId")]);
    m_fragment_id_isSet = !json[QString("fragmentId")].isNull() && m_fragment_id_isValid;

    m_index_id_isValid = ::OpenAPI::fromJsonValue(m_index_id, json[QString("indexId")]);
    m_index_id_isSet = !json[QString("indexId")].isNull() && m_index_id_isValid;

    m_parent_id_isValid = ::OpenAPI::fromJsonValue(m_parent_id, json[QString("parentId")]);
    m_parent_id_isSet = !json[QString("parentId")].isNull() && m_parent_id_isValid;

    m_row_count_isValid = ::OpenAPI::fromJsonValue(m_row_count, json[QString("rowCount")]);
    m_row_count_isSet = !json[QString("rowCount")].isNull() && m_row_count_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("size")]);
    m_size_isSet = !json[QString("size")].isNull() && m_size_isValid;

    m_stream_path_isValid = ::OpenAPI::fromJsonValue(m_stream_path, json[QString("streamPath")]);
    m_stream_path_isSet = !json[QString("streamPath")].isNull() && m_stream_path_isValid;
}

QString OAIUSqlTableFragment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUSqlTableFragment::asJsonObject() const {
    QJsonObject obj;
    if (m_create_date_isSet) {
        obj.insert(QString("createDate"), ::OpenAPI::toJsonValue(m_create_date));
    }
    if (m_fragment_id_isSet) {
        obj.insert(QString("fragmentId"), ::OpenAPI::toJsonValue(m_fragment_id));
    }
    if (m_index_id_isSet) {
        obj.insert(QString("indexId"), ::OpenAPI::toJsonValue(m_index_id));
    }
    if (m_parent_id_isSet) {
        obj.insert(QString("parentId"), ::OpenAPI::toJsonValue(m_parent_id));
    }
    if (m_row_count_isSet) {
        obj.insert(QString("rowCount"), ::OpenAPI::toJsonValue(m_row_count));
    }
    if (m_size_isSet) {
        obj.insert(QString("size"), ::OpenAPI::toJsonValue(m_size));
    }
    if (m_stream_path_isSet) {
        obj.insert(QString("streamPath"), ::OpenAPI::toJsonValue(m_stream_path));
    }
    return obj;
}

QDateTime OAIUSqlTableFragment::getCreateDate() const {
    return m_create_date;
}
void OAIUSqlTableFragment::setCreateDate(const QDateTime &create_date) {
    m_create_date = create_date;
    m_create_date_isSet = true;
}

bool OAIUSqlTableFragment::is_create_date_Set() const{
    return m_create_date_isSet;
}

bool OAIUSqlTableFragment::is_create_date_Valid() const{
    return m_create_date_isValid;
}

QString OAIUSqlTableFragment::getFragmentId() const {
    return m_fragment_id;
}
void OAIUSqlTableFragment::setFragmentId(const QString &fragment_id) {
    m_fragment_id = fragment_id;
    m_fragment_id_isSet = true;
}

bool OAIUSqlTableFragment::is_fragment_id_Set() const{
    return m_fragment_id_isSet;
}

bool OAIUSqlTableFragment::is_fragment_id_Valid() const{
    return m_fragment_id_isValid;
}

qint32 OAIUSqlTableFragment::getIndexId() const {
    return m_index_id;
}
void OAIUSqlTableFragment::setIndexId(const qint32 &index_id) {
    m_index_id = index_id;
    m_index_id_isSet = true;
}

bool OAIUSqlTableFragment::is_index_id_Set() const{
    return m_index_id_isSet;
}

bool OAIUSqlTableFragment::is_index_id_Valid() const{
    return m_index_id_isValid;
}

QString OAIUSqlTableFragment::getParentId() const {
    return m_parent_id;
}
void OAIUSqlTableFragment::setParentId(const QString &parent_id) {
    m_parent_id = parent_id;
    m_parent_id_isSet = true;
}

bool OAIUSqlTableFragment::is_parent_id_Set() const{
    return m_parent_id_isSet;
}

bool OAIUSqlTableFragment::is_parent_id_Valid() const{
    return m_parent_id_isValid;
}

qint64 OAIUSqlTableFragment::getRowCount() const {
    return m_row_count;
}
void OAIUSqlTableFragment::setRowCount(const qint64 &row_count) {
    m_row_count = row_count;
    m_row_count_isSet = true;
}

bool OAIUSqlTableFragment::is_row_count_Set() const{
    return m_row_count_isSet;
}

bool OAIUSqlTableFragment::is_row_count_Valid() const{
    return m_row_count_isValid;
}

qint64 OAIUSqlTableFragment::getSize() const {
    return m_size;
}
void OAIUSqlTableFragment::setSize(const qint64 &size) {
    m_size = size;
    m_size_isSet = true;
}

bool OAIUSqlTableFragment::is_size_Set() const{
    return m_size_isSet;
}

bool OAIUSqlTableFragment::is_size_Valid() const{
    return m_size_isValid;
}

QString OAIUSqlTableFragment::getStreamPath() const {
    return m_stream_path;
}
void OAIUSqlTableFragment::setStreamPath(const QString &stream_path) {
    m_stream_path = stream_path;
    m_stream_path_isSet = true;
}

bool OAIUSqlTableFragment::is_stream_path_Set() const{
    return m_stream_path_isSet;
}

bool OAIUSqlTableFragment::is_stream_path_Valid() const{
    return m_stream_path_isValid;
}

bool OAIUSqlTableFragment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_create_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fragment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_index_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_row_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stream_path_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUSqlTableFragment::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
