/**
 * DataLakeAnalyticsCatalogManagementClient
 * Creates an Azure Data Lake Analytics catalog client.
 *
 * The version of the OpenAPI document: 2016-11-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIUSqlIndex.h
 *
 * A Data Lake Analytics catalog U-SQL table index item.
 */

#ifndef OAIUSqlIndex_H
#define OAIUSqlIndex_H

#include <QJsonObject>

#include "OAIUSqlDirectedColumn.h"
#include "OAIUSqlDistributionInfo.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIUSqlDistributionInfo;
class OAIUSqlDirectedColumn;

class OAIUSqlIndex : public OAIObject {
public:
    OAIUSqlIndex();
    OAIUSqlIndex(QString json);
    ~OAIUSqlIndex() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<QString> getColumns() const;
    void setColumns(const QList<QString> &columns);
    bool is_columns_Set() const;
    bool is_columns_Valid() const;

    OAIUSqlDistributionInfo getDistributionInfo() const;
    void setDistributionInfo(const OAIUSqlDistributionInfo &distribution_info);
    bool is_distribution_info_Set() const;
    bool is_distribution_info_Valid() const;

    qint32 getIndexId() const;
    void setIndexId(const qint32 &index_id);
    bool is_index_id_Set() const;
    bool is_index_id_Valid() const;

    QList<OAIUSqlDirectedColumn> getIndexKeys() const;
    void setIndexKeys(const QList<OAIUSqlDirectedColumn> &index_keys);
    bool is_index_keys_Set() const;
    bool is_index_keys_Valid() const;

    bool isIsColumnstore() const;
    void setIsColumnstore(const bool &is_columnstore);
    bool is_is_columnstore_Set() const;
    bool is_is_columnstore_Valid() const;

    bool isIsUnique() const;
    void setIsUnique(const bool &is_unique);
    bool is_is_unique_Set() const;
    bool is_is_unique_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getPartitionFunction() const;
    void setPartitionFunction(const QString &partition_function);
    bool is_partition_function_Set() const;
    bool is_partition_function_Valid() const;

    QList<QString> getPartitionKeyList() const;
    void setPartitionKeyList(const QList<QString> &partition_key_list);
    bool is_partition_key_list_Set() const;
    bool is_partition_key_list_Valid() const;

    QList<QString> getStreamNames() const;
    void setStreamNames(const QList<QString> &stream_names);
    bool is_stream_names_Set() const;
    bool is_stream_names_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<QString> m_columns;
    bool m_columns_isSet;
    bool m_columns_isValid;

    OAIUSqlDistributionInfo m_distribution_info;
    bool m_distribution_info_isSet;
    bool m_distribution_info_isValid;

    qint32 m_index_id;
    bool m_index_id_isSet;
    bool m_index_id_isValid;

    QList<OAIUSqlDirectedColumn> m_index_keys;
    bool m_index_keys_isSet;
    bool m_index_keys_isValid;

    bool m_is_columnstore;
    bool m_is_columnstore_isSet;
    bool m_is_columnstore_isValid;

    bool m_is_unique;
    bool m_is_unique_isSet;
    bool m_is_unique_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_partition_function;
    bool m_partition_function_isSet;
    bool m_partition_function_isValid;

    QList<QString> m_partition_key_list;
    bool m_partition_key_list_isSet;
    bool m_partition_key_list_isValid;

    QList<QString> m_stream_names;
    bool m_stream_names_isSet;
    bool m_stream_names_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIUSqlIndex)

#endif // OAIUSqlIndex_H
