/**
 * DataLakeAnalyticsCatalogManagementClient
 * Creates an Azure Data Lake Analytics catalog client.
 *
 * The version of the OpenAPI document: 2016-11-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUSqlTable.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUSqlTable::OAIUSqlTable(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUSqlTable::OAIUSqlTable() {
    this->initializeModel();
}

OAIUSqlTable::~OAIUSqlTable() {}

void OAIUSqlTable::initializeModel() {

    m_column_list_isSet = false;
    m_column_list_isValid = false;

    m_database_name_isSet = false;
    m_database_name_isValid = false;

    m_distribution_info_isSet = false;
    m_distribution_info_isValid = false;

    m_external_table_isSet = false;
    m_external_table_isValid = false;

    m_index_list_isSet = false;
    m_index_list_isValid = false;

    m_partition_key_list_isSet = false;
    m_partition_key_list_isValid = false;

    m_schema_name_isSet = false;
    m_schema_name_isValid = false;

    m_table_name_isSet = false;
    m_table_name_isValid = false;

    m_compute_account_name_isSet = false;
    m_compute_account_name_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIUSqlTable::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUSqlTable::fromJsonObject(QJsonObject json) {

    m_column_list_isValid = ::OpenAPI::fromJsonValue(m_column_list, json[QString("columnList")]);
    m_column_list_isSet = !json[QString("columnList")].isNull() && m_column_list_isValid;

    m_database_name_isValid = ::OpenAPI::fromJsonValue(m_database_name, json[QString("databaseName")]);
    m_database_name_isSet = !json[QString("databaseName")].isNull() && m_database_name_isValid;

    m_distribution_info_isValid = ::OpenAPI::fromJsonValue(m_distribution_info, json[QString("distributionInfo")]);
    m_distribution_info_isSet = !json[QString("distributionInfo")].isNull() && m_distribution_info_isValid;

    m_external_table_isValid = ::OpenAPI::fromJsonValue(m_external_table, json[QString("externalTable")]);
    m_external_table_isSet = !json[QString("externalTable")].isNull() && m_external_table_isValid;

    m_index_list_isValid = ::OpenAPI::fromJsonValue(m_index_list, json[QString("indexList")]);
    m_index_list_isSet = !json[QString("indexList")].isNull() && m_index_list_isValid;

    m_partition_key_list_isValid = ::OpenAPI::fromJsonValue(m_partition_key_list, json[QString("partitionKeyList")]);
    m_partition_key_list_isSet = !json[QString("partitionKeyList")].isNull() && m_partition_key_list_isValid;

    m_schema_name_isValid = ::OpenAPI::fromJsonValue(m_schema_name, json[QString("schemaName")]);
    m_schema_name_isSet = !json[QString("schemaName")].isNull() && m_schema_name_isValid;

    m_table_name_isValid = ::OpenAPI::fromJsonValue(m_table_name, json[QString("tableName")]);
    m_table_name_isSet = !json[QString("tableName")].isNull() && m_table_name_isValid;

    m_compute_account_name_isValid = ::OpenAPI::fromJsonValue(m_compute_account_name, json[QString("computeAccountName")]);
    m_compute_account_name_isSet = !json[QString("computeAccountName")].isNull() && m_compute_account_name_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIUSqlTable::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUSqlTable::asJsonObject() const {
    QJsonObject obj;
    if (m_column_list.size() > 0) {
        obj.insert(QString("columnList"), ::OpenAPI::toJsonValue(m_column_list));
    }
    if (m_database_name_isSet) {
        obj.insert(QString("databaseName"), ::OpenAPI::toJsonValue(m_database_name));
    }
    if (m_distribution_info.isSet()) {
        obj.insert(QString("distributionInfo"), ::OpenAPI::toJsonValue(m_distribution_info));
    }
    if (m_external_table.isSet()) {
        obj.insert(QString("externalTable"), ::OpenAPI::toJsonValue(m_external_table));
    }
    if (m_index_list.size() > 0) {
        obj.insert(QString("indexList"), ::OpenAPI::toJsonValue(m_index_list));
    }
    if (m_partition_key_list.size() > 0) {
        obj.insert(QString("partitionKeyList"), ::OpenAPI::toJsonValue(m_partition_key_list));
    }
    if (m_schema_name_isSet) {
        obj.insert(QString("schemaName"), ::OpenAPI::toJsonValue(m_schema_name));
    }
    if (m_table_name_isSet) {
        obj.insert(QString("tableName"), ::OpenAPI::toJsonValue(m_table_name));
    }
    if (m_compute_account_name_isSet) {
        obj.insert(QString("computeAccountName"), ::OpenAPI::toJsonValue(m_compute_account_name));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QList<OAIUSqlTableColumn> OAIUSqlTable::getColumnList() const {
    return m_column_list;
}
void OAIUSqlTable::setColumnList(const QList<OAIUSqlTableColumn> &column_list) {
    m_column_list = column_list;
    m_column_list_isSet = true;
}

bool OAIUSqlTable::is_column_list_Set() const{
    return m_column_list_isSet;
}

bool OAIUSqlTable::is_column_list_Valid() const{
    return m_column_list_isValid;
}

QString OAIUSqlTable::getDatabaseName() const {
    return m_database_name;
}
void OAIUSqlTable::setDatabaseName(const QString &database_name) {
    m_database_name = database_name;
    m_database_name_isSet = true;
}

bool OAIUSqlTable::is_database_name_Set() const{
    return m_database_name_isSet;
}

bool OAIUSqlTable::is_database_name_Valid() const{
    return m_database_name_isValid;
}

OAIUSqlDistributionInfo OAIUSqlTable::getDistributionInfo() const {
    return m_distribution_info;
}
void OAIUSqlTable::setDistributionInfo(const OAIUSqlDistributionInfo &distribution_info) {
    m_distribution_info = distribution_info;
    m_distribution_info_isSet = true;
}

bool OAIUSqlTable::is_distribution_info_Set() const{
    return m_distribution_info_isSet;
}

bool OAIUSqlTable::is_distribution_info_Valid() const{
    return m_distribution_info_isValid;
}

OAIExternalTable OAIUSqlTable::getExternalTable() const {
    return m_external_table;
}
void OAIUSqlTable::setExternalTable(const OAIExternalTable &external_table) {
    m_external_table = external_table;
    m_external_table_isSet = true;
}

bool OAIUSqlTable::is_external_table_Set() const{
    return m_external_table_isSet;
}

bool OAIUSqlTable::is_external_table_Valid() const{
    return m_external_table_isValid;
}

QList<OAIUSqlIndex> OAIUSqlTable::getIndexList() const {
    return m_index_list;
}
void OAIUSqlTable::setIndexList(const QList<OAIUSqlIndex> &index_list) {
    m_index_list = index_list;
    m_index_list_isSet = true;
}

bool OAIUSqlTable::is_index_list_Set() const{
    return m_index_list_isSet;
}

bool OAIUSqlTable::is_index_list_Valid() const{
    return m_index_list_isValid;
}

QList<QString> OAIUSqlTable::getPartitionKeyList() const {
    return m_partition_key_list;
}
void OAIUSqlTable::setPartitionKeyList(const QList<QString> &partition_key_list) {
    m_partition_key_list = partition_key_list;
    m_partition_key_list_isSet = true;
}

bool OAIUSqlTable::is_partition_key_list_Set() const{
    return m_partition_key_list_isSet;
}

bool OAIUSqlTable::is_partition_key_list_Valid() const{
    return m_partition_key_list_isValid;
}

QString OAIUSqlTable::getSchemaName() const {
    return m_schema_name;
}
void OAIUSqlTable::setSchemaName(const QString &schema_name) {
    m_schema_name = schema_name;
    m_schema_name_isSet = true;
}

bool OAIUSqlTable::is_schema_name_Set() const{
    return m_schema_name_isSet;
}

bool OAIUSqlTable::is_schema_name_Valid() const{
    return m_schema_name_isValid;
}

QString OAIUSqlTable::getTableName() const {
    return m_table_name;
}
void OAIUSqlTable::setTableName(const QString &table_name) {
    m_table_name = table_name;
    m_table_name_isSet = true;
}

bool OAIUSqlTable::is_table_name_Set() const{
    return m_table_name_isSet;
}

bool OAIUSqlTable::is_table_name_Valid() const{
    return m_table_name_isValid;
}

QString OAIUSqlTable::getComputeAccountName() const {
    return m_compute_account_name;
}
void OAIUSqlTable::setComputeAccountName(const QString &compute_account_name) {
    m_compute_account_name = compute_account_name;
    m_compute_account_name_isSet = true;
}

bool OAIUSqlTable::is_compute_account_name_Set() const{
    return m_compute_account_name_isSet;
}

bool OAIUSqlTable::is_compute_account_name_Valid() const{
    return m_compute_account_name_isValid;
}

QString OAIUSqlTable::getVersion() const {
    return m_version;
}
void OAIUSqlTable::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIUSqlTable::is_version_Set() const{
    return m_version_isSet;
}

bool OAIUSqlTable::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIUSqlTable::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_column_list.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_database_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_distribution_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_table.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_index_list.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_partition_key_list.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_table_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_compute_account_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUSqlTable::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
