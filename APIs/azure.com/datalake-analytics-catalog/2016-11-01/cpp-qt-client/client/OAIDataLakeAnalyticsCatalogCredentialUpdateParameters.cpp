/**
 * DataLakeAnalyticsCatalogManagementClient
 * Creates an Azure Data Lake Analytics catalog client.
 *
 * The version of the OpenAPI document: 2016-11-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataLakeAnalyticsCatalogCredentialUpdateParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataLakeAnalyticsCatalogCredentialUpdateParameters::OAIDataLakeAnalyticsCatalogCredentialUpdateParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataLakeAnalyticsCatalogCredentialUpdateParameters::OAIDataLakeAnalyticsCatalogCredentialUpdateParameters() {
    this->initializeModel();
}

OAIDataLakeAnalyticsCatalogCredentialUpdateParameters::~OAIDataLakeAnalyticsCatalogCredentialUpdateParameters() {}

void OAIDataLakeAnalyticsCatalogCredentialUpdateParameters::initializeModel() {

    m_new_password_isSet = false;
    m_new_password_isValid = false;

    m_password_isSet = false;
    m_password_isValid = false;

    m_uri_isSet = false;
    m_uri_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAIDataLakeAnalyticsCatalogCredentialUpdateParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDataLakeAnalyticsCatalogCredentialUpdateParameters::fromJsonObject(QJsonObject json) {

    m_new_password_isValid = ::OpenAPI::fromJsonValue(m_new_password, json[QString("newPassword")]);
    m_new_password_isSet = !json[QString("newPassword")].isNull() && m_new_password_isValid;

    m_password_isValid = ::OpenAPI::fromJsonValue(m_password, json[QString("password")]);
    m_password_isSet = !json[QString("password")].isNull() && m_password_isValid;

    m_uri_isValid = ::OpenAPI::fromJsonValue(m_uri, json[QString("uri")]);
    m_uri_isSet = !json[QString("uri")].isNull() && m_uri_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("userId")]);
    m_user_id_isSet = !json[QString("userId")].isNull() && m_user_id_isValid;
}

QString OAIDataLakeAnalyticsCatalogCredentialUpdateParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDataLakeAnalyticsCatalogCredentialUpdateParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_new_password_isSet) {
        obj.insert(QString("newPassword"), ::OpenAPI::toJsonValue(m_new_password));
    }
    if (m_password_isSet) {
        obj.insert(QString("password"), ::OpenAPI::toJsonValue(m_password));
    }
    if (m_uri_isSet) {
        obj.insert(QString("uri"), ::OpenAPI::toJsonValue(m_uri));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("userId"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

QString OAIDataLakeAnalyticsCatalogCredentialUpdateParameters::getNewPassword() const {
    return m_new_password;
}
void OAIDataLakeAnalyticsCatalogCredentialUpdateParameters::setNewPassword(const QString &new_password) {
    m_new_password = new_password;
    m_new_password_isSet = true;
}

bool OAIDataLakeAnalyticsCatalogCredentialUpdateParameters::is_new_password_Set() const{
    return m_new_password_isSet;
}

bool OAIDataLakeAnalyticsCatalogCredentialUpdateParameters::is_new_password_Valid() const{
    return m_new_password_isValid;
}

QString OAIDataLakeAnalyticsCatalogCredentialUpdateParameters::getPassword() const {
    return m_password;
}
void OAIDataLakeAnalyticsCatalogCredentialUpdateParameters::setPassword(const QString &password) {
    m_password = password;
    m_password_isSet = true;
}

bool OAIDataLakeAnalyticsCatalogCredentialUpdateParameters::is_password_Set() const{
    return m_password_isSet;
}

bool OAIDataLakeAnalyticsCatalogCredentialUpdateParameters::is_password_Valid() const{
    return m_password_isValid;
}

QString OAIDataLakeAnalyticsCatalogCredentialUpdateParameters::getUri() const {
    return m_uri;
}
void OAIDataLakeAnalyticsCatalogCredentialUpdateParameters::setUri(const QString &uri) {
    m_uri = uri;
    m_uri_isSet = true;
}

bool OAIDataLakeAnalyticsCatalogCredentialUpdateParameters::is_uri_Set() const{
    return m_uri_isSet;
}

bool OAIDataLakeAnalyticsCatalogCredentialUpdateParameters::is_uri_Valid() const{
    return m_uri_isValid;
}

QString OAIDataLakeAnalyticsCatalogCredentialUpdateParameters::getUserId() const {
    return m_user_id;
}
void OAIDataLakeAnalyticsCatalogCredentialUpdateParameters::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIDataLakeAnalyticsCatalogCredentialUpdateParameters::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIDataLakeAnalyticsCatalogCredentialUpdateParameters::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAIDataLakeAnalyticsCatalogCredentialUpdateParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_new_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDataLakeAnalyticsCatalogCredentialUpdateParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
