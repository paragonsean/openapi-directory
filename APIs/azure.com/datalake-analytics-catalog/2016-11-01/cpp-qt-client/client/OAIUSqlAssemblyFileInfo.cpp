/**
 * DataLakeAnalyticsCatalogManagementClient
 * Creates an Azure Data Lake Analytics catalog client.
 *
 * The version of the OpenAPI document: 2016-11-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUSqlAssemblyFileInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUSqlAssemblyFileInfo::OAIUSqlAssemblyFileInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUSqlAssemblyFileInfo::OAIUSqlAssemblyFileInfo() {
    this->initializeModel();
}

OAIUSqlAssemblyFileInfo::~OAIUSqlAssemblyFileInfo() {}

void OAIUSqlAssemblyFileInfo::initializeModel() {

    m_content_path_isSet = false;
    m_content_path_isValid = false;

    m_original_path_isSet = false;
    m_original_path_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIUSqlAssemblyFileInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUSqlAssemblyFileInfo::fromJsonObject(QJsonObject json) {

    m_content_path_isValid = ::OpenAPI::fromJsonValue(m_content_path, json[QString("contentPath")]);
    m_content_path_isSet = !json[QString("contentPath")].isNull() && m_content_path_isValid;

    m_original_path_isValid = ::OpenAPI::fromJsonValue(m_original_path, json[QString("originalPath")]);
    m_original_path_isSet = !json[QString("originalPath")].isNull() && m_original_path_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIUSqlAssemblyFileInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUSqlAssemblyFileInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_content_path_isSet) {
        obj.insert(QString("contentPath"), ::OpenAPI::toJsonValue(m_content_path));
    }
    if (m_original_path_isSet) {
        obj.insert(QString("originalPath"), ::OpenAPI::toJsonValue(m_original_path));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIUSqlAssemblyFileInfo::getContentPath() const {
    return m_content_path;
}
void OAIUSqlAssemblyFileInfo::setContentPath(const QString &content_path) {
    m_content_path = content_path;
    m_content_path_isSet = true;
}

bool OAIUSqlAssemblyFileInfo::is_content_path_Set() const{
    return m_content_path_isSet;
}

bool OAIUSqlAssemblyFileInfo::is_content_path_Valid() const{
    return m_content_path_isValid;
}

QString OAIUSqlAssemblyFileInfo::getOriginalPath() const {
    return m_original_path;
}
void OAIUSqlAssemblyFileInfo::setOriginalPath(const QString &original_path) {
    m_original_path = original_path;
    m_original_path_isSet = true;
}

bool OAIUSqlAssemblyFileInfo::is_original_path_Set() const{
    return m_original_path_isSet;
}

bool OAIUSqlAssemblyFileInfo::is_original_path_Valid() const{
    return m_original_path_isValid;
}

QString OAIUSqlAssemblyFileInfo::getType() const {
    return m_type;
}
void OAIUSqlAssemblyFileInfo::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIUSqlAssemblyFileInfo::is_type_Set() const{
    return m_type_isSet;
}

bool OAIUSqlAssemblyFileInfo::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIUSqlAssemblyFileInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_content_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUSqlAssemblyFileInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
