/**
 * DataLakeAnalyticsCatalogManagementClient
 * Creates an Azure Data Lake Analytics catalog client.
 *
 * The version of the OpenAPI document: 2016-11-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUSqlTableType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUSqlTableType::OAIUSqlTableType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUSqlTableType::OAIUSqlTableType() {
    this->initializeModel();
}

OAIUSqlTableType::~OAIUSqlTableType() {}

void OAIUSqlTableType::initializeModel() {

    m_columns_isSet = false;
    m_columns_isValid = false;

    m_c_sharp_name_isSet = false;
    m_c_sharp_name_isValid = false;

    m_database_name_isSet = false;
    m_database_name_isValid = false;

    m_full_c_sharp_name_isSet = false;
    m_full_c_sharp_name_isValid = false;

    m_is_assembly_type_isSet = false;
    m_is_assembly_type_isValid = false;

    m_is_complex_type_isSet = false;
    m_is_complex_type_isValid = false;

    m_is_nullable_isSet = false;
    m_is_nullable_isValid = false;

    m_is_table_type_isSet = false;
    m_is_table_type_isValid = false;

    m_is_user_defined_isSet = false;
    m_is_user_defined_isValid = false;

    m_principal_id_isSet = false;
    m_principal_id_isValid = false;

    m_schema_id_isSet = false;
    m_schema_id_isValid = false;

    m_schema_name_isSet = false;
    m_schema_name_isValid = false;

    m_system_type_id_isSet = false;
    m_system_type_id_isValid = false;

    m_type_family_isSet = false;
    m_type_family_isValid = false;

    m_type_name_isSet = false;
    m_type_name_isValid = false;

    m_user_type_id_isSet = false;
    m_user_type_id_isValid = false;

    m_compute_account_name_isSet = false;
    m_compute_account_name_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIUSqlTableType::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUSqlTableType::fromJsonObject(QJsonObject json) {

    m_columns_isValid = ::OpenAPI::fromJsonValue(m_columns, json[QString("columns")]);
    m_columns_isSet = !json[QString("columns")].isNull() && m_columns_isValid;

    m_c_sharp_name_isValid = ::OpenAPI::fromJsonValue(m_c_sharp_name, json[QString("cSharpName")]);
    m_c_sharp_name_isSet = !json[QString("cSharpName")].isNull() && m_c_sharp_name_isValid;

    m_database_name_isValid = ::OpenAPI::fromJsonValue(m_database_name, json[QString("databaseName")]);
    m_database_name_isSet = !json[QString("databaseName")].isNull() && m_database_name_isValid;

    m_full_c_sharp_name_isValid = ::OpenAPI::fromJsonValue(m_full_c_sharp_name, json[QString("fullCSharpName")]);
    m_full_c_sharp_name_isSet = !json[QString("fullCSharpName")].isNull() && m_full_c_sharp_name_isValid;

    m_is_assembly_type_isValid = ::OpenAPI::fromJsonValue(m_is_assembly_type, json[QString("isAssemblyType")]);
    m_is_assembly_type_isSet = !json[QString("isAssemblyType")].isNull() && m_is_assembly_type_isValid;

    m_is_complex_type_isValid = ::OpenAPI::fromJsonValue(m_is_complex_type, json[QString("isComplexType")]);
    m_is_complex_type_isSet = !json[QString("isComplexType")].isNull() && m_is_complex_type_isValid;

    m_is_nullable_isValid = ::OpenAPI::fromJsonValue(m_is_nullable, json[QString("isNullable")]);
    m_is_nullable_isSet = !json[QString("isNullable")].isNull() && m_is_nullable_isValid;

    m_is_table_type_isValid = ::OpenAPI::fromJsonValue(m_is_table_type, json[QString("isTableType")]);
    m_is_table_type_isSet = !json[QString("isTableType")].isNull() && m_is_table_type_isValid;

    m_is_user_defined_isValid = ::OpenAPI::fromJsonValue(m_is_user_defined, json[QString("isUserDefined")]);
    m_is_user_defined_isSet = !json[QString("isUserDefined")].isNull() && m_is_user_defined_isValid;

    m_principal_id_isValid = ::OpenAPI::fromJsonValue(m_principal_id, json[QString("principalId")]);
    m_principal_id_isSet = !json[QString("principalId")].isNull() && m_principal_id_isValid;

    m_schema_id_isValid = ::OpenAPI::fromJsonValue(m_schema_id, json[QString("schemaId")]);
    m_schema_id_isSet = !json[QString("schemaId")].isNull() && m_schema_id_isValid;

    m_schema_name_isValid = ::OpenAPI::fromJsonValue(m_schema_name, json[QString("schemaName")]);
    m_schema_name_isSet = !json[QString("schemaName")].isNull() && m_schema_name_isValid;

    m_system_type_id_isValid = ::OpenAPI::fromJsonValue(m_system_type_id, json[QString("systemTypeId")]);
    m_system_type_id_isSet = !json[QString("systemTypeId")].isNull() && m_system_type_id_isValid;

    m_type_family_isValid = ::OpenAPI::fromJsonValue(m_type_family, json[QString("typeFamily")]);
    m_type_family_isSet = !json[QString("typeFamily")].isNull() && m_type_family_isValid;

    m_type_name_isValid = ::OpenAPI::fromJsonValue(m_type_name, json[QString("typeName")]);
    m_type_name_isSet = !json[QString("typeName")].isNull() && m_type_name_isValid;

    m_user_type_id_isValid = ::OpenAPI::fromJsonValue(m_user_type_id, json[QString("userTypeId")]);
    m_user_type_id_isSet = !json[QString("userTypeId")].isNull() && m_user_type_id_isValid;

    m_compute_account_name_isValid = ::OpenAPI::fromJsonValue(m_compute_account_name, json[QString("computeAccountName")]);
    m_compute_account_name_isSet = !json[QString("computeAccountName")].isNull() && m_compute_account_name_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIUSqlTableType::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUSqlTableType::asJsonObject() const {
    QJsonObject obj;
    if (m_columns.size() > 0) {
        obj.insert(QString("columns"), ::OpenAPI::toJsonValue(m_columns));
    }
    if (m_c_sharp_name_isSet) {
        obj.insert(QString("cSharpName"), ::OpenAPI::toJsonValue(m_c_sharp_name));
    }
    if (m_database_name_isSet) {
        obj.insert(QString("databaseName"), ::OpenAPI::toJsonValue(m_database_name));
    }
    if (m_full_c_sharp_name_isSet) {
        obj.insert(QString("fullCSharpName"), ::OpenAPI::toJsonValue(m_full_c_sharp_name));
    }
    if (m_is_assembly_type_isSet) {
        obj.insert(QString("isAssemblyType"), ::OpenAPI::toJsonValue(m_is_assembly_type));
    }
    if (m_is_complex_type_isSet) {
        obj.insert(QString("isComplexType"), ::OpenAPI::toJsonValue(m_is_complex_type));
    }
    if (m_is_nullable_isSet) {
        obj.insert(QString("isNullable"), ::OpenAPI::toJsonValue(m_is_nullable));
    }
    if (m_is_table_type_isSet) {
        obj.insert(QString("isTableType"), ::OpenAPI::toJsonValue(m_is_table_type));
    }
    if (m_is_user_defined_isSet) {
        obj.insert(QString("isUserDefined"), ::OpenAPI::toJsonValue(m_is_user_defined));
    }
    if (m_principal_id_isSet) {
        obj.insert(QString("principalId"), ::OpenAPI::toJsonValue(m_principal_id));
    }
    if (m_schema_id_isSet) {
        obj.insert(QString("schemaId"), ::OpenAPI::toJsonValue(m_schema_id));
    }
    if (m_schema_name_isSet) {
        obj.insert(QString("schemaName"), ::OpenAPI::toJsonValue(m_schema_name));
    }
    if (m_system_type_id_isSet) {
        obj.insert(QString("systemTypeId"), ::OpenAPI::toJsonValue(m_system_type_id));
    }
    if (m_type_family_isSet) {
        obj.insert(QString("typeFamily"), ::OpenAPI::toJsonValue(m_type_family));
    }
    if (m_type_name_isSet) {
        obj.insert(QString("typeName"), ::OpenAPI::toJsonValue(m_type_name));
    }
    if (m_user_type_id_isSet) {
        obj.insert(QString("userTypeId"), ::OpenAPI::toJsonValue(m_user_type_id));
    }
    if (m_compute_account_name_isSet) {
        obj.insert(QString("computeAccountName"), ::OpenAPI::toJsonValue(m_compute_account_name));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QList<OAITypeFieldInfo> OAIUSqlTableType::getColumns() const {
    return m_columns;
}
void OAIUSqlTableType::setColumns(const QList<OAITypeFieldInfo> &columns) {
    m_columns = columns;
    m_columns_isSet = true;
}

bool OAIUSqlTableType::is_columns_Set() const{
    return m_columns_isSet;
}

bool OAIUSqlTableType::is_columns_Valid() const{
    return m_columns_isValid;
}

QString OAIUSqlTableType::getCSharpName() const {
    return m_c_sharp_name;
}
void OAIUSqlTableType::setCSharpName(const QString &c_sharp_name) {
    m_c_sharp_name = c_sharp_name;
    m_c_sharp_name_isSet = true;
}

bool OAIUSqlTableType::is_c_sharp_name_Set() const{
    return m_c_sharp_name_isSet;
}

bool OAIUSqlTableType::is_c_sharp_name_Valid() const{
    return m_c_sharp_name_isValid;
}

QString OAIUSqlTableType::getDatabaseName() const {
    return m_database_name;
}
void OAIUSqlTableType::setDatabaseName(const QString &database_name) {
    m_database_name = database_name;
    m_database_name_isSet = true;
}

bool OAIUSqlTableType::is_database_name_Set() const{
    return m_database_name_isSet;
}

bool OAIUSqlTableType::is_database_name_Valid() const{
    return m_database_name_isValid;
}

QString OAIUSqlTableType::getFullCSharpName() const {
    return m_full_c_sharp_name;
}
void OAIUSqlTableType::setFullCSharpName(const QString &full_c_sharp_name) {
    m_full_c_sharp_name = full_c_sharp_name;
    m_full_c_sharp_name_isSet = true;
}

bool OAIUSqlTableType::is_full_c_sharp_name_Set() const{
    return m_full_c_sharp_name_isSet;
}

bool OAIUSqlTableType::is_full_c_sharp_name_Valid() const{
    return m_full_c_sharp_name_isValid;
}

bool OAIUSqlTableType::isIsAssemblyType() const {
    return m_is_assembly_type;
}
void OAIUSqlTableType::setIsAssemblyType(const bool &is_assembly_type) {
    m_is_assembly_type = is_assembly_type;
    m_is_assembly_type_isSet = true;
}

bool OAIUSqlTableType::is_is_assembly_type_Set() const{
    return m_is_assembly_type_isSet;
}

bool OAIUSqlTableType::is_is_assembly_type_Valid() const{
    return m_is_assembly_type_isValid;
}

bool OAIUSqlTableType::isIsComplexType() const {
    return m_is_complex_type;
}
void OAIUSqlTableType::setIsComplexType(const bool &is_complex_type) {
    m_is_complex_type = is_complex_type;
    m_is_complex_type_isSet = true;
}

bool OAIUSqlTableType::is_is_complex_type_Set() const{
    return m_is_complex_type_isSet;
}

bool OAIUSqlTableType::is_is_complex_type_Valid() const{
    return m_is_complex_type_isValid;
}

bool OAIUSqlTableType::isIsNullable() const {
    return m_is_nullable;
}
void OAIUSqlTableType::setIsNullable(const bool &is_nullable) {
    m_is_nullable = is_nullable;
    m_is_nullable_isSet = true;
}

bool OAIUSqlTableType::is_is_nullable_Set() const{
    return m_is_nullable_isSet;
}

bool OAIUSqlTableType::is_is_nullable_Valid() const{
    return m_is_nullable_isValid;
}

bool OAIUSqlTableType::isIsTableType() const {
    return m_is_table_type;
}
void OAIUSqlTableType::setIsTableType(const bool &is_table_type) {
    m_is_table_type = is_table_type;
    m_is_table_type_isSet = true;
}

bool OAIUSqlTableType::is_is_table_type_Set() const{
    return m_is_table_type_isSet;
}

bool OAIUSqlTableType::is_is_table_type_Valid() const{
    return m_is_table_type_isValid;
}

bool OAIUSqlTableType::isIsUserDefined() const {
    return m_is_user_defined;
}
void OAIUSqlTableType::setIsUserDefined(const bool &is_user_defined) {
    m_is_user_defined = is_user_defined;
    m_is_user_defined_isSet = true;
}

bool OAIUSqlTableType::is_is_user_defined_Set() const{
    return m_is_user_defined_isSet;
}

bool OAIUSqlTableType::is_is_user_defined_Valid() const{
    return m_is_user_defined_isValid;
}

qint32 OAIUSqlTableType::getPrincipalId() const {
    return m_principal_id;
}
void OAIUSqlTableType::setPrincipalId(const qint32 &principal_id) {
    m_principal_id = principal_id;
    m_principal_id_isSet = true;
}

bool OAIUSqlTableType::is_principal_id_Set() const{
    return m_principal_id_isSet;
}

bool OAIUSqlTableType::is_principal_id_Valid() const{
    return m_principal_id_isValid;
}

qint32 OAIUSqlTableType::getSchemaId() const {
    return m_schema_id;
}
void OAIUSqlTableType::setSchemaId(const qint32 &schema_id) {
    m_schema_id = schema_id;
    m_schema_id_isSet = true;
}

bool OAIUSqlTableType::is_schema_id_Set() const{
    return m_schema_id_isSet;
}

bool OAIUSqlTableType::is_schema_id_Valid() const{
    return m_schema_id_isValid;
}

QString OAIUSqlTableType::getSchemaName() const {
    return m_schema_name;
}
void OAIUSqlTableType::setSchemaName(const QString &schema_name) {
    m_schema_name = schema_name;
    m_schema_name_isSet = true;
}

bool OAIUSqlTableType::is_schema_name_Set() const{
    return m_schema_name_isSet;
}

bool OAIUSqlTableType::is_schema_name_Valid() const{
    return m_schema_name_isValid;
}

qint32 OAIUSqlTableType::getSystemTypeId() const {
    return m_system_type_id;
}
void OAIUSqlTableType::setSystemTypeId(const qint32 &system_type_id) {
    m_system_type_id = system_type_id;
    m_system_type_id_isSet = true;
}

bool OAIUSqlTableType::is_system_type_id_Set() const{
    return m_system_type_id_isSet;
}

bool OAIUSqlTableType::is_system_type_id_Valid() const{
    return m_system_type_id_isValid;
}

QString OAIUSqlTableType::getTypeFamily() const {
    return m_type_family;
}
void OAIUSqlTableType::setTypeFamily(const QString &type_family) {
    m_type_family = type_family;
    m_type_family_isSet = true;
}

bool OAIUSqlTableType::is_type_family_Set() const{
    return m_type_family_isSet;
}

bool OAIUSqlTableType::is_type_family_Valid() const{
    return m_type_family_isValid;
}

QString OAIUSqlTableType::getTypeName() const {
    return m_type_name;
}
void OAIUSqlTableType::setTypeName(const QString &type_name) {
    m_type_name = type_name;
    m_type_name_isSet = true;
}

bool OAIUSqlTableType::is_type_name_Set() const{
    return m_type_name_isSet;
}

bool OAIUSqlTableType::is_type_name_Valid() const{
    return m_type_name_isValid;
}

qint32 OAIUSqlTableType::getUserTypeId() const {
    return m_user_type_id;
}
void OAIUSqlTableType::setUserTypeId(const qint32 &user_type_id) {
    m_user_type_id = user_type_id;
    m_user_type_id_isSet = true;
}

bool OAIUSqlTableType::is_user_type_id_Set() const{
    return m_user_type_id_isSet;
}

bool OAIUSqlTableType::is_user_type_id_Valid() const{
    return m_user_type_id_isValid;
}

QString OAIUSqlTableType::getComputeAccountName() const {
    return m_compute_account_name;
}
void OAIUSqlTableType::setComputeAccountName(const QString &compute_account_name) {
    m_compute_account_name = compute_account_name;
    m_compute_account_name_isSet = true;
}

bool OAIUSqlTableType::is_compute_account_name_Set() const{
    return m_compute_account_name_isSet;
}

bool OAIUSqlTableType::is_compute_account_name_Valid() const{
    return m_compute_account_name_isValid;
}

QString OAIUSqlTableType::getVersion() const {
    return m_version;
}
void OAIUSqlTableType::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIUSqlTableType::is_version_Set() const{
    return m_version_isSet;
}

bool OAIUSqlTableType::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIUSqlTableType::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_columns.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_c_sharp_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_database_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_full_c_sharp_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_assembly_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_complex_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_nullable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_table_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_user_defined_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_principal_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_system_type_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_family_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_type_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_compute_account_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUSqlTableType::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
