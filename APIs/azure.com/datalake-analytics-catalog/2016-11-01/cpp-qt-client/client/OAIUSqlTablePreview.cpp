/**
 * DataLakeAnalyticsCatalogManagementClient
 * Creates an Azure Data Lake Analytics catalog client.
 *
 * The version of the OpenAPI document: 2016-11-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUSqlTablePreview.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUSqlTablePreview::OAIUSqlTablePreview(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUSqlTablePreview::OAIUSqlTablePreview() {
    this->initializeModel();
}

OAIUSqlTablePreview::~OAIUSqlTablePreview() {}

void OAIUSqlTablePreview::initializeModel() {

    m_rows_isSet = false;
    m_rows_isValid = false;

    m_schema_isSet = false;
    m_schema_isValid = false;

    m_total_column_count_isSet = false;
    m_total_column_count_isValid = false;

    m_total_row_count_isSet = false;
    m_total_row_count_isValid = false;

    m_truncated_isSet = false;
    m_truncated_isValid = false;
}

void OAIUSqlTablePreview::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUSqlTablePreview::fromJsonObject(QJsonObject json) {

    if(json["rows"].isArray()){
        auto arr = json["rows"].toArray();
        m_rows_isValid = true;
        if(arr.count() > 0) {
            for (const QJsonValue jval : arr) {
                QList<QString> item;
                m_rows_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_rows_isSet = !jval.isNull() && m_rows_isValid;
                m_rows.push_back(item);
            }
        }
    }

    m_schema_isValid = ::OpenAPI::fromJsonValue(m_schema, json[QString("schema")]);
    m_schema_isSet = !json[QString("schema")].isNull() && m_schema_isValid;

    m_total_column_count_isValid = ::OpenAPI::fromJsonValue(m_total_column_count, json[QString("totalColumnCount")]);
    m_total_column_count_isSet = !json[QString("totalColumnCount")].isNull() && m_total_column_count_isValid;

    m_total_row_count_isValid = ::OpenAPI::fromJsonValue(m_total_row_count, json[QString("totalRowCount")]);
    m_total_row_count_isSet = !json[QString("totalRowCount")].isNull() && m_total_row_count_isValid;

    m_truncated_isValid = ::OpenAPI::fromJsonValue(m_truncated, json[QString("truncated")]);
    m_truncated_isSet = !json[QString("truncated")].isNull() && m_truncated_isValid;
}

QString OAIUSqlTablePreview::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUSqlTablePreview::asJsonObject() const {
    QJsonObject obj;
    if (m_rows.size() > 0) {
        
        obj.insert(QString("rows"), toJsonValue(m_rows));
    }
    if (m_schema.size() > 0) {
        obj.insert(QString("schema"), ::OpenAPI::toJsonValue(m_schema));
    }
    if (m_total_column_count_isSet) {
        obj.insert(QString("totalColumnCount"), ::OpenAPI::toJsonValue(m_total_column_count));
    }
    if (m_total_row_count_isSet) {
        obj.insert(QString("totalRowCount"), ::OpenAPI::toJsonValue(m_total_row_count));
    }
    if (m_truncated_isSet) {
        obj.insert(QString("truncated"), ::OpenAPI::toJsonValue(m_truncated));
    }
    return obj;
}

QList<QList<QString>> OAIUSqlTablePreview::getRows() const {
    return m_rows;
}
void OAIUSqlTablePreview::setRows(const QList<QList<QString>> &rows) {
    m_rows = rows;
    m_rows_isSet = true;
}

bool OAIUSqlTablePreview::is_rows_Set() const{
    return m_rows_isSet;
}

bool OAIUSqlTablePreview::is_rows_Valid() const{
    return m_rows_isValid;
}

QList<OAIUSqlTableColumn> OAIUSqlTablePreview::getSchema() const {
    return m_schema;
}
void OAIUSqlTablePreview::setSchema(const QList<OAIUSqlTableColumn> &schema) {
    m_schema = schema;
    m_schema_isSet = true;
}

bool OAIUSqlTablePreview::is_schema_Set() const{
    return m_schema_isSet;
}

bool OAIUSqlTablePreview::is_schema_Valid() const{
    return m_schema_isValid;
}

qint64 OAIUSqlTablePreview::getTotalColumnCount() const {
    return m_total_column_count;
}
void OAIUSqlTablePreview::setTotalColumnCount(const qint64 &total_column_count) {
    m_total_column_count = total_column_count;
    m_total_column_count_isSet = true;
}

bool OAIUSqlTablePreview::is_total_column_count_Set() const{
    return m_total_column_count_isSet;
}

bool OAIUSqlTablePreview::is_total_column_count_Valid() const{
    return m_total_column_count_isValid;
}

qint64 OAIUSqlTablePreview::getTotalRowCount() const {
    return m_total_row_count;
}
void OAIUSqlTablePreview::setTotalRowCount(const qint64 &total_row_count) {
    m_total_row_count = total_row_count;
    m_total_row_count_isSet = true;
}

bool OAIUSqlTablePreview::is_total_row_count_Set() const{
    return m_total_row_count_isSet;
}

bool OAIUSqlTablePreview::is_total_row_count_Valid() const{
    return m_total_row_count_isValid;
}

bool OAIUSqlTablePreview::isTruncated() const {
    return m_truncated;
}
void OAIUSqlTablePreview::setTruncated(const bool &truncated) {
    m_truncated = truncated;
    m_truncated_isSet = true;
}

bool OAIUSqlTablePreview::is_truncated_Set() const{
    return m_truncated_isSet;
}

bool OAIUSqlTablePreview::is_truncated_Valid() const{
    return m_truncated_isValid;
}

bool OAIUSqlTablePreview::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_rows.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_column_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_row_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_truncated_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUSqlTablePreview::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
