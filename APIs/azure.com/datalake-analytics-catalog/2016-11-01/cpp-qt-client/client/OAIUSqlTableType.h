/**
 * DataLakeAnalyticsCatalogManagementClient
 * Creates an Azure Data Lake Analytics catalog client.
 *
 * The version of the OpenAPI document: 2016-11-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIUSqlTableType.h
 *
 * A Data Lake Analytics catalog U-SQL table type item.
 */

#ifndef OAIUSqlTableType_H
#define OAIUSqlTableType_H

#include <QJsonObject>

#include "OAITypeFieldInfo.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAITypeFieldInfo;

class OAIUSqlTableType : public OAIObject {
public:
    OAIUSqlTableType();
    OAIUSqlTableType(QString json);
    ~OAIUSqlTableType() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAITypeFieldInfo> getColumns() const;
    void setColumns(const QList<OAITypeFieldInfo> &columns);
    bool is_columns_Set() const;
    bool is_columns_Valid() const;

    QString getCSharpName() const;
    void setCSharpName(const QString &c_sharp_name);
    bool is_c_sharp_name_Set() const;
    bool is_c_sharp_name_Valid() const;

    QString getDatabaseName() const;
    void setDatabaseName(const QString &database_name);
    bool is_database_name_Set() const;
    bool is_database_name_Valid() const;

    QString getFullCSharpName() const;
    void setFullCSharpName(const QString &full_c_sharp_name);
    bool is_full_c_sharp_name_Set() const;
    bool is_full_c_sharp_name_Valid() const;

    bool isIsAssemblyType() const;
    void setIsAssemblyType(const bool &is_assembly_type);
    bool is_is_assembly_type_Set() const;
    bool is_is_assembly_type_Valid() const;

    bool isIsComplexType() const;
    void setIsComplexType(const bool &is_complex_type);
    bool is_is_complex_type_Set() const;
    bool is_is_complex_type_Valid() const;

    bool isIsNullable() const;
    void setIsNullable(const bool &is_nullable);
    bool is_is_nullable_Set() const;
    bool is_is_nullable_Valid() const;

    bool isIsTableType() const;
    void setIsTableType(const bool &is_table_type);
    bool is_is_table_type_Set() const;
    bool is_is_table_type_Valid() const;

    bool isIsUserDefined() const;
    void setIsUserDefined(const bool &is_user_defined);
    bool is_is_user_defined_Set() const;
    bool is_is_user_defined_Valid() const;

    qint32 getPrincipalId() const;
    void setPrincipalId(const qint32 &principal_id);
    bool is_principal_id_Set() const;
    bool is_principal_id_Valid() const;

    qint32 getSchemaId() const;
    void setSchemaId(const qint32 &schema_id);
    bool is_schema_id_Set() const;
    bool is_schema_id_Valid() const;

    QString getSchemaName() const;
    void setSchemaName(const QString &schema_name);
    bool is_schema_name_Set() const;
    bool is_schema_name_Valid() const;

    qint32 getSystemTypeId() const;
    void setSystemTypeId(const qint32 &system_type_id);
    bool is_system_type_id_Set() const;
    bool is_system_type_id_Valid() const;

    QString getTypeFamily() const;
    void setTypeFamily(const QString &type_family);
    bool is_type_family_Set() const;
    bool is_type_family_Valid() const;

    QString getTypeName() const;
    void setTypeName(const QString &type_name);
    bool is_type_name_Set() const;
    bool is_type_name_Valid() const;

    qint32 getUserTypeId() const;
    void setUserTypeId(const qint32 &user_type_id);
    bool is_user_type_id_Set() const;
    bool is_user_type_id_Valid() const;

    QString getComputeAccountName() const;
    void setComputeAccountName(const QString &compute_account_name);
    bool is_compute_account_name_Set() const;
    bool is_compute_account_name_Valid() const;

    QString getVersion() const;
    void setVersion(const QString &version);
    bool is_version_Set() const;
    bool is_version_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAITypeFieldInfo> m_columns;
    bool m_columns_isSet;
    bool m_columns_isValid;

    QString m_c_sharp_name;
    bool m_c_sharp_name_isSet;
    bool m_c_sharp_name_isValid;

    QString m_database_name;
    bool m_database_name_isSet;
    bool m_database_name_isValid;

    QString m_full_c_sharp_name;
    bool m_full_c_sharp_name_isSet;
    bool m_full_c_sharp_name_isValid;

    bool m_is_assembly_type;
    bool m_is_assembly_type_isSet;
    bool m_is_assembly_type_isValid;

    bool m_is_complex_type;
    bool m_is_complex_type_isSet;
    bool m_is_complex_type_isValid;

    bool m_is_nullable;
    bool m_is_nullable_isSet;
    bool m_is_nullable_isValid;

    bool m_is_table_type;
    bool m_is_table_type_isSet;
    bool m_is_table_type_isValid;

    bool m_is_user_defined;
    bool m_is_user_defined_isSet;
    bool m_is_user_defined_isValid;

    qint32 m_principal_id;
    bool m_principal_id_isSet;
    bool m_principal_id_isValid;

    qint32 m_schema_id;
    bool m_schema_id_isSet;
    bool m_schema_id_isValid;

    QString m_schema_name;
    bool m_schema_name_isSet;
    bool m_schema_name_isValid;

    qint32 m_system_type_id;
    bool m_system_type_id_isSet;
    bool m_system_type_id_isValid;

    QString m_type_family;
    bool m_type_family_isSet;
    bool m_type_family_isValid;

    QString m_type_name;
    bool m_type_name_isSet;
    bool m_type_name_isValid;

    qint32 m_user_type_id;
    bool m_user_type_id_isSet;
    bool m_user_type_id_isValid;

    QString m_compute_account_name;
    bool m_compute_account_name_isSet;
    bool m_compute_account_name_isValid;

    QString m_version;
    bool m_version_isSet;
    bool m_version_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIUSqlTableType)

#endif // OAIUSqlTableType_H
