/**
 * DataLakeAnalyticsCatalogManagementClient
 * Creates an Azure Data Lake Analytics catalog client.
 *
 * The version of the OpenAPI document: 2016-11-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUSqlTableStatistics.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUSqlTableStatistics::OAIUSqlTableStatistics(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUSqlTableStatistics::OAIUSqlTableStatistics() {
    this->initializeModel();
}

OAIUSqlTableStatistics::~OAIUSqlTableStatistics() {}

void OAIUSqlTableStatistics::initializeModel() {

    m_col_names_isSet = false;
    m_col_names_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_database_name_isSet = false;
    m_database_name_isValid = false;

    m_filter_definition_isSet = false;
    m_filter_definition_isValid = false;

    m_has_filter_isSet = false;
    m_has_filter_isValid = false;

    m_is_auto_created_isSet = false;
    m_is_auto_created_isValid = false;

    m_is_user_created_isSet = false;
    m_is_user_created_isValid = false;

    m_schema_name_isSet = false;
    m_schema_name_isValid = false;

    m_stat_data_path_isSet = false;
    m_stat_data_path_isValid = false;

    m_statistics_name_isSet = false;
    m_statistics_name_isValid = false;

    m_table_name_isSet = false;
    m_table_name_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;

    m_user_stat_name_isSet = false;
    m_user_stat_name_isValid = false;

    m_compute_account_name_isSet = false;
    m_compute_account_name_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIUSqlTableStatistics::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUSqlTableStatistics::fromJsonObject(QJsonObject json) {

    m_col_names_isValid = ::OpenAPI::fromJsonValue(m_col_names, json[QString("colNames")]);
    m_col_names_isSet = !json[QString("colNames")].isNull() && m_col_names_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_database_name_isValid = ::OpenAPI::fromJsonValue(m_database_name, json[QString("databaseName")]);
    m_database_name_isSet = !json[QString("databaseName")].isNull() && m_database_name_isValid;

    m_filter_definition_isValid = ::OpenAPI::fromJsonValue(m_filter_definition, json[QString("filterDefinition")]);
    m_filter_definition_isSet = !json[QString("filterDefinition")].isNull() && m_filter_definition_isValid;

    m_has_filter_isValid = ::OpenAPI::fromJsonValue(m_has_filter, json[QString("hasFilter")]);
    m_has_filter_isSet = !json[QString("hasFilter")].isNull() && m_has_filter_isValid;

    m_is_auto_created_isValid = ::OpenAPI::fromJsonValue(m_is_auto_created, json[QString("isAutoCreated")]);
    m_is_auto_created_isSet = !json[QString("isAutoCreated")].isNull() && m_is_auto_created_isValid;

    m_is_user_created_isValid = ::OpenAPI::fromJsonValue(m_is_user_created, json[QString("isUserCreated")]);
    m_is_user_created_isSet = !json[QString("isUserCreated")].isNull() && m_is_user_created_isValid;

    m_schema_name_isValid = ::OpenAPI::fromJsonValue(m_schema_name, json[QString("schemaName")]);
    m_schema_name_isSet = !json[QString("schemaName")].isNull() && m_schema_name_isValid;

    m_stat_data_path_isValid = ::OpenAPI::fromJsonValue(m_stat_data_path, json[QString("statDataPath")]);
    m_stat_data_path_isSet = !json[QString("statDataPath")].isNull() && m_stat_data_path_isValid;

    m_statistics_name_isValid = ::OpenAPI::fromJsonValue(m_statistics_name, json[QString("statisticsName")]);
    m_statistics_name_isSet = !json[QString("statisticsName")].isNull() && m_statistics_name_isValid;

    m_table_name_isValid = ::OpenAPI::fromJsonValue(m_table_name, json[QString("tableName")]);
    m_table_name_isSet = !json[QString("tableName")].isNull() && m_table_name_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;

    m_user_stat_name_isValid = ::OpenAPI::fromJsonValue(m_user_stat_name, json[QString("userStatName")]);
    m_user_stat_name_isSet = !json[QString("userStatName")].isNull() && m_user_stat_name_isValid;

    m_compute_account_name_isValid = ::OpenAPI::fromJsonValue(m_compute_account_name, json[QString("computeAccountName")]);
    m_compute_account_name_isSet = !json[QString("computeAccountName")].isNull() && m_compute_account_name_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIUSqlTableStatistics::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUSqlTableStatistics::asJsonObject() const {
    QJsonObject obj;
    if (m_col_names.size() > 0) {
        obj.insert(QString("colNames"), ::OpenAPI::toJsonValue(m_col_names));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_database_name_isSet) {
        obj.insert(QString("databaseName"), ::OpenAPI::toJsonValue(m_database_name));
    }
    if (m_filter_definition_isSet) {
        obj.insert(QString("filterDefinition"), ::OpenAPI::toJsonValue(m_filter_definition));
    }
    if (m_has_filter_isSet) {
        obj.insert(QString("hasFilter"), ::OpenAPI::toJsonValue(m_has_filter));
    }
    if (m_is_auto_created_isSet) {
        obj.insert(QString("isAutoCreated"), ::OpenAPI::toJsonValue(m_is_auto_created));
    }
    if (m_is_user_created_isSet) {
        obj.insert(QString("isUserCreated"), ::OpenAPI::toJsonValue(m_is_user_created));
    }
    if (m_schema_name_isSet) {
        obj.insert(QString("schemaName"), ::OpenAPI::toJsonValue(m_schema_name));
    }
    if (m_stat_data_path_isSet) {
        obj.insert(QString("statDataPath"), ::OpenAPI::toJsonValue(m_stat_data_path));
    }
    if (m_statistics_name_isSet) {
        obj.insert(QString("statisticsName"), ::OpenAPI::toJsonValue(m_statistics_name));
    }
    if (m_table_name_isSet) {
        obj.insert(QString("tableName"), ::OpenAPI::toJsonValue(m_table_name));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    if (m_user_stat_name_isSet) {
        obj.insert(QString("userStatName"), ::OpenAPI::toJsonValue(m_user_stat_name));
    }
    if (m_compute_account_name_isSet) {
        obj.insert(QString("computeAccountName"), ::OpenAPI::toJsonValue(m_compute_account_name));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QList<QString> OAIUSqlTableStatistics::getColNames() const {
    return m_col_names;
}
void OAIUSqlTableStatistics::setColNames(const QList<QString> &col_names) {
    m_col_names = col_names;
    m_col_names_isSet = true;
}

bool OAIUSqlTableStatistics::is_col_names_Set() const{
    return m_col_names_isSet;
}

bool OAIUSqlTableStatistics::is_col_names_Valid() const{
    return m_col_names_isValid;
}

QDateTime OAIUSqlTableStatistics::getCreateTime() const {
    return m_create_time;
}
void OAIUSqlTableStatistics::setCreateTime(const QDateTime &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIUSqlTableStatistics::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIUSqlTableStatistics::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAIUSqlTableStatistics::getDatabaseName() const {
    return m_database_name;
}
void OAIUSqlTableStatistics::setDatabaseName(const QString &database_name) {
    m_database_name = database_name;
    m_database_name_isSet = true;
}

bool OAIUSqlTableStatistics::is_database_name_Set() const{
    return m_database_name_isSet;
}

bool OAIUSqlTableStatistics::is_database_name_Valid() const{
    return m_database_name_isValid;
}

QString OAIUSqlTableStatistics::getFilterDefinition() const {
    return m_filter_definition;
}
void OAIUSqlTableStatistics::setFilterDefinition(const QString &filter_definition) {
    m_filter_definition = filter_definition;
    m_filter_definition_isSet = true;
}

bool OAIUSqlTableStatistics::is_filter_definition_Set() const{
    return m_filter_definition_isSet;
}

bool OAIUSqlTableStatistics::is_filter_definition_Valid() const{
    return m_filter_definition_isValid;
}

bool OAIUSqlTableStatistics::isHasFilter() const {
    return m_has_filter;
}
void OAIUSqlTableStatistics::setHasFilter(const bool &has_filter) {
    m_has_filter = has_filter;
    m_has_filter_isSet = true;
}

bool OAIUSqlTableStatistics::is_has_filter_Set() const{
    return m_has_filter_isSet;
}

bool OAIUSqlTableStatistics::is_has_filter_Valid() const{
    return m_has_filter_isValid;
}

bool OAIUSqlTableStatistics::isIsAutoCreated() const {
    return m_is_auto_created;
}
void OAIUSqlTableStatistics::setIsAutoCreated(const bool &is_auto_created) {
    m_is_auto_created = is_auto_created;
    m_is_auto_created_isSet = true;
}

bool OAIUSqlTableStatistics::is_is_auto_created_Set() const{
    return m_is_auto_created_isSet;
}

bool OAIUSqlTableStatistics::is_is_auto_created_Valid() const{
    return m_is_auto_created_isValid;
}

bool OAIUSqlTableStatistics::isIsUserCreated() const {
    return m_is_user_created;
}
void OAIUSqlTableStatistics::setIsUserCreated(const bool &is_user_created) {
    m_is_user_created = is_user_created;
    m_is_user_created_isSet = true;
}

bool OAIUSqlTableStatistics::is_is_user_created_Set() const{
    return m_is_user_created_isSet;
}

bool OAIUSqlTableStatistics::is_is_user_created_Valid() const{
    return m_is_user_created_isValid;
}

QString OAIUSqlTableStatistics::getSchemaName() const {
    return m_schema_name;
}
void OAIUSqlTableStatistics::setSchemaName(const QString &schema_name) {
    m_schema_name = schema_name;
    m_schema_name_isSet = true;
}

bool OAIUSqlTableStatistics::is_schema_name_Set() const{
    return m_schema_name_isSet;
}

bool OAIUSqlTableStatistics::is_schema_name_Valid() const{
    return m_schema_name_isValid;
}

QString OAIUSqlTableStatistics::getStatDataPath() const {
    return m_stat_data_path;
}
void OAIUSqlTableStatistics::setStatDataPath(const QString &stat_data_path) {
    m_stat_data_path = stat_data_path;
    m_stat_data_path_isSet = true;
}

bool OAIUSqlTableStatistics::is_stat_data_path_Set() const{
    return m_stat_data_path_isSet;
}

bool OAIUSqlTableStatistics::is_stat_data_path_Valid() const{
    return m_stat_data_path_isValid;
}

QString OAIUSqlTableStatistics::getStatisticsName() const {
    return m_statistics_name;
}
void OAIUSqlTableStatistics::setStatisticsName(const QString &statistics_name) {
    m_statistics_name = statistics_name;
    m_statistics_name_isSet = true;
}

bool OAIUSqlTableStatistics::is_statistics_name_Set() const{
    return m_statistics_name_isSet;
}

bool OAIUSqlTableStatistics::is_statistics_name_Valid() const{
    return m_statistics_name_isValid;
}

QString OAIUSqlTableStatistics::getTableName() const {
    return m_table_name;
}
void OAIUSqlTableStatistics::setTableName(const QString &table_name) {
    m_table_name = table_name;
    m_table_name_isSet = true;
}

bool OAIUSqlTableStatistics::is_table_name_Set() const{
    return m_table_name_isSet;
}

bool OAIUSqlTableStatistics::is_table_name_Valid() const{
    return m_table_name_isValid;
}

QDateTime OAIUSqlTableStatistics::getUpdateTime() const {
    return m_update_time;
}
void OAIUSqlTableStatistics::setUpdateTime(const QDateTime &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIUSqlTableStatistics::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIUSqlTableStatistics::is_update_time_Valid() const{
    return m_update_time_isValid;
}

QString OAIUSqlTableStatistics::getUserStatName() const {
    return m_user_stat_name;
}
void OAIUSqlTableStatistics::setUserStatName(const QString &user_stat_name) {
    m_user_stat_name = user_stat_name;
    m_user_stat_name_isSet = true;
}

bool OAIUSqlTableStatistics::is_user_stat_name_Set() const{
    return m_user_stat_name_isSet;
}

bool OAIUSqlTableStatistics::is_user_stat_name_Valid() const{
    return m_user_stat_name_isValid;
}

QString OAIUSqlTableStatistics::getComputeAccountName() const {
    return m_compute_account_name;
}
void OAIUSqlTableStatistics::setComputeAccountName(const QString &compute_account_name) {
    m_compute_account_name = compute_account_name;
    m_compute_account_name_isSet = true;
}

bool OAIUSqlTableStatistics::is_compute_account_name_Set() const{
    return m_compute_account_name_isSet;
}

bool OAIUSqlTableStatistics::is_compute_account_name_Valid() const{
    return m_compute_account_name_isValid;
}

QString OAIUSqlTableStatistics::getVersion() const {
    return m_version;
}
void OAIUSqlTableStatistics::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIUSqlTableStatistics::is_version_Set() const{
    return m_version_isSet;
}

bool OAIUSqlTableStatistics::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIUSqlTableStatistics::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_col_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_database_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter_definition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_filter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_auto_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_user_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stat_data_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_statistics_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_table_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_stat_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_compute_account_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUSqlTableStatistics::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
