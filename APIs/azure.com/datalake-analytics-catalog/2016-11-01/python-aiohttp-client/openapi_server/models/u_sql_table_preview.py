# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.u_sql_table_column import USqlTableColumn
from openapi_server import util


class USqlTablePreview(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, rows: List[List[str]]=None, _schema: List[USqlTableColumn]=None, total_column_count: int=None, total_row_count: int=None, truncated: bool=None):
        """USqlTablePreview - a model defined in OpenAPI

        :param rows: The rows of this USqlTablePreview.
        :param _schema: The _schema of this USqlTablePreview.
        :param total_column_count: The total_column_count of this USqlTablePreview.
        :param total_row_count: The total_row_count of this USqlTablePreview.
        :param truncated: The truncated of this USqlTablePreview.
        """
        self.openapi_types = {
            'rows': List[List[str]],
            '_schema': List[USqlTableColumn],
            'total_column_count': int,
            'total_row_count': int,
            'truncated': bool
        }

        self.attribute_map = {
            'rows': 'rows',
            '_schema': 'schema',
            'total_column_count': 'totalColumnCount',
            'total_row_count': 'totalRowCount',
            'truncated': 'truncated'
        }

        self._rows = rows
        self.__schema = _schema
        self._total_column_count = total_column_count
        self._total_row_count = total_row_count
        self._truncated = truncated

    @classmethod
    def from_dict(cls, dikt: dict) -> 'USqlTablePreview':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The USqlTablePreview of this USqlTablePreview.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def rows(self):
        """Gets the rows of this USqlTablePreview.

        the rows of the table or partition preview, where each row is an array of string representations the row's values. Note: Byte arrays will appear as base-64 encoded values, SqlMap and SqlArray objects will appear as escaped JSON objects, and DateTime objects will appear as ISO formatted UTC date-times.

        :return: The rows of this USqlTablePreview.
        :rtype: List[List[str]]
        """
        return self._rows

    @rows.setter
    def rows(self, rows):
        """Sets the rows of this USqlTablePreview.

        the rows of the table or partition preview, where each row is an array of string representations the row's values. Note: Byte arrays will appear as base-64 encoded values, SqlMap and SqlArray objects will appear as escaped JSON objects, and DateTime objects will appear as ISO formatted UTC date-times.

        :param rows: The rows of this USqlTablePreview.
        :type rows: List[List[str]]
        """

        self._rows = rows

    @property
    def _schema(self):
        """Gets the _schema of this USqlTablePreview.

        the schema of the table or partition.

        :return: The _schema of this USqlTablePreview.
        :rtype: List[USqlTableColumn]
        """
        return self.__schema

    @_schema.setter
    def _schema(self, _schema):
        """Sets the _schema of this USqlTablePreview.

        the schema of the table or partition.

        :param _schema: The _schema of this USqlTablePreview.
        :type _schema: List[USqlTableColumn]
        """

        self.__schema = _schema

    @property
    def total_column_count(self):
        """Gets the total_column_count of this USqlTablePreview.

        the total number of columns in the table or partition.

        :return: The total_column_count of this USqlTablePreview.
        :rtype: int
        """
        return self._total_column_count

    @total_column_count.setter
    def total_column_count(self, total_column_count):
        """Sets the total_column_count of this USqlTablePreview.

        the total number of columns in the table or partition.

        :param total_column_count: The total_column_count of this USqlTablePreview.
        :type total_column_count: int
        """

        self._total_column_count = total_column_count

    @property
    def total_row_count(self):
        """Gets the total_row_count of this USqlTablePreview.

        the total number of rows in the table or partition.

        :return: The total_row_count of this USqlTablePreview.
        :rtype: int
        """
        return self._total_row_count

    @total_row_count.setter
    def total_row_count(self, total_row_count):
        """Sets the total_row_count of this USqlTablePreview.

        the total number of rows in the table or partition.

        :param total_row_count: The total_row_count of this USqlTablePreview.
        :type total_row_count: int
        """

        self._total_row_count = total_row_count

    @property
    def truncated(self):
        """Gets the truncated of this USqlTablePreview.

        true if the amount of data in the response is less than expected due to the preview operation's size limitations. This can occur if the requested rows or row counts are too large.

        :return: The truncated of this USqlTablePreview.
        :rtype: bool
        """
        return self._truncated

    @truncated.setter
    def truncated(self, truncated):
        """Sets the truncated of this USqlTablePreview.

        true if the amount of data in the response is less than expected due to the preview operation's size limitations. This can occur if the requested rows or row counts are too large.

        :param truncated: The truncated of this USqlTablePreview.
        :type truncated: bool
        """

        self._truncated = truncated
