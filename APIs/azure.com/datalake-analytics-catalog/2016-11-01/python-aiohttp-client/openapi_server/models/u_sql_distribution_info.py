# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.u_sql_directed_column import USqlDirectedColumn
from openapi_server import util


class USqlDistributionInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, count: int=None, dynamic_count: int=None, keys: List[USqlDirectedColumn]=None, type: int=None):
        """USqlDistributionInfo - a model defined in OpenAPI

        :param count: The count of this USqlDistributionInfo.
        :param dynamic_count: The dynamic_count of this USqlDistributionInfo.
        :param keys: The keys of this USqlDistributionInfo.
        :param type: The type of this USqlDistributionInfo.
        """
        self.openapi_types = {
            'count': int,
            'dynamic_count': int,
            'keys': List[USqlDirectedColumn],
            'type': int
        }

        self.attribute_map = {
            'count': 'count',
            'dynamic_count': 'dynamicCount',
            'keys': 'keys',
            'type': 'type'
        }

        self._count = count
        self._dynamic_count = dynamic_count
        self._keys = keys
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'USqlDistributionInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The USqlDistributionInfo of this USqlDistributionInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def count(self):
        """Gets the count of this USqlDistributionInfo.

        the count of indices using this distribution.

        :return: The count of this USqlDistributionInfo.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this USqlDistributionInfo.

        the count of indices using this distribution.

        :param count: The count of this USqlDistributionInfo.
        :type count: int
        """

        self._count = count

    @property
    def dynamic_count(self):
        """Gets the dynamic_count of this USqlDistributionInfo.

        the dynamic count of indices using this distribution.

        :return: The dynamic_count of this USqlDistributionInfo.
        :rtype: int
        """
        return self._dynamic_count

    @dynamic_count.setter
    def dynamic_count(self, dynamic_count):
        """Sets the dynamic_count of this USqlDistributionInfo.

        the dynamic count of indices using this distribution.

        :param dynamic_count: The dynamic_count of this USqlDistributionInfo.
        :type dynamic_count: int
        """

        self._dynamic_count = dynamic_count

    @property
    def keys(self):
        """Gets the keys of this USqlDistributionInfo.

        the list of directed columns in the distribution

        :return: The keys of this USqlDistributionInfo.
        :rtype: List[USqlDirectedColumn]
        """
        return self._keys

    @keys.setter
    def keys(self, keys):
        """Sets the keys of this USqlDistributionInfo.

        the list of directed columns in the distribution

        :param keys: The keys of this USqlDistributionInfo.
        :type keys: List[USqlDirectedColumn]
        """

        self._keys = keys

    @property
    def type(self):
        """Gets the type of this USqlDistributionInfo.

        the type of this distribution.

        :return: The type of this USqlDistributionInfo.
        :rtype: int
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this USqlDistributionInfo.

        the type of this distribution.

        :param type: The type of this USqlDistributionInfo.
        :type type: int
        """

        self._type = type
