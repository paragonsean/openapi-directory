# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class USqlTableFragment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, create_date: datetime=None, fragment_id: str=None, index_id: int=None, parent_id: str=None, row_count: int=None, size: int=None, stream_path: str=None):
        """USqlTableFragment - a model defined in OpenAPI

        :param create_date: The create_date of this USqlTableFragment.
        :param fragment_id: The fragment_id of this USqlTableFragment.
        :param index_id: The index_id of this USqlTableFragment.
        :param parent_id: The parent_id of this USqlTableFragment.
        :param row_count: The row_count of this USqlTableFragment.
        :param size: The size of this USqlTableFragment.
        :param stream_path: The stream_path of this USqlTableFragment.
        """
        self.openapi_types = {
            'create_date': datetime,
            'fragment_id': str,
            'index_id': int,
            'parent_id': str,
            'row_count': int,
            'size': int,
            'stream_path': str
        }

        self.attribute_map = {
            'create_date': 'createDate',
            'fragment_id': 'fragmentId',
            'index_id': 'indexId',
            'parent_id': 'parentId',
            'row_count': 'rowCount',
            'size': 'size',
            'stream_path': 'streamPath'
        }

        self._create_date = create_date
        self._fragment_id = fragment_id
        self._index_id = index_id
        self._parent_id = parent_id
        self._row_count = row_count
        self._size = size
        self._stream_path = stream_path

    @classmethod
    def from_dict(cls, dikt: dict) -> 'USqlTableFragment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The USqlTableFragment of this USqlTableFragment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def create_date(self):
        """Gets the create_date of this USqlTableFragment.

        the creation time of the table fragment.

        :return: The create_date of this USqlTableFragment.
        :rtype: datetime
        """
        return self._create_date

    @create_date.setter
    def create_date(self, create_date):
        """Sets the create_date of this USqlTableFragment.

        the creation time of the table fragment.

        :param create_date: The create_date of this USqlTableFragment.
        :type create_date: datetime
        """

        self._create_date = create_date

    @property
    def fragment_id(self):
        """Gets the fragment_id of this USqlTableFragment.

        the version of the catalog item.

        :return: The fragment_id of this USqlTableFragment.
        :rtype: str
        """
        return self._fragment_id

    @fragment_id.setter
    def fragment_id(self, fragment_id):
        """Sets the fragment_id of this USqlTableFragment.

        the version of the catalog item.

        :param fragment_id: The fragment_id of this USqlTableFragment.
        :type fragment_id: str
        """

        self._fragment_id = fragment_id

    @property
    def index_id(self):
        """Gets the index_id of this USqlTableFragment.

        the ordinal of the index which contains the table fragment.

        :return: The index_id of this USqlTableFragment.
        :rtype: int
        """
        return self._index_id

    @index_id.setter
    def index_id(self, index_id):
        """Sets the index_id of this USqlTableFragment.

        the ordinal of the index which contains the table fragment.

        :param index_id: The index_id of this USqlTableFragment.
        :type index_id: int
        """

        self._index_id = index_id

    @property
    def parent_id(self):
        """Gets the parent_id of this USqlTableFragment.

        the parent object Id of the table fragment. The parent could be a table or table partition.

        :return: The parent_id of this USqlTableFragment.
        :rtype: str
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this USqlTableFragment.

        the parent object Id of the table fragment. The parent could be a table or table partition.

        :param parent_id: The parent_id of this USqlTableFragment.
        :type parent_id: str
        """

        self._parent_id = parent_id

    @property
    def row_count(self):
        """Gets the row_count of this USqlTableFragment.

        the number of rows in the table fragment.

        :return: The row_count of this USqlTableFragment.
        :rtype: int
        """
        return self._row_count

    @row_count.setter
    def row_count(self, row_count):
        """Sets the row_count of this USqlTableFragment.

        the number of rows in the table fragment.

        :param row_count: The row_count of this USqlTableFragment.
        :type row_count: int
        """

        self._row_count = row_count

    @property
    def size(self):
        """Gets the size of this USqlTableFragment.

        the data size of the table fragment in bytes.

        :return: The size of this USqlTableFragment.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this USqlTableFragment.

        the data size of the table fragment in bytes.

        :param size: The size of this USqlTableFragment.
        :type size: int
        """

        self._size = size

    @property
    def stream_path(self):
        """Gets the stream_path of this USqlTableFragment.

        the relative path for the table fragment location.

        :return: The stream_path of this USqlTableFragment.
        :rtype: str
        """
        return self._stream_path

    @stream_path.setter
    def stream_path(self, stream_path):
        """Sets the stream_path of this USqlTableFragment.

        the relative path for the table fragment location.

        :param stream_path: The stream_path of this USqlTableFragment.
        :type stream_path: str
        """

        self._stream_path = stream_path
