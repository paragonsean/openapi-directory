# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.ddl_name import DdlName
from openapi_server import util


class USqlTablePartition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, create_date: datetime=None, database_name: str=None, index_id: int=None, label: List[str]=None, parent_name: DdlName=None, partition_name: str=None, schema_name: str=None, compute_account_name: str=None, version: str=None):
        """USqlTablePartition - a model defined in OpenAPI

        :param create_date: The create_date of this USqlTablePartition.
        :param database_name: The database_name of this USqlTablePartition.
        :param index_id: The index_id of this USqlTablePartition.
        :param label: The label of this USqlTablePartition.
        :param parent_name: The parent_name of this USqlTablePartition.
        :param partition_name: The partition_name of this USqlTablePartition.
        :param schema_name: The schema_name of this USqlTablePartition.
        :param compute_account_name: The compute_account_name of this USqlTablePartition.
        :param version: The version of this USqlTablePartition.
        """
        self.openapi_types = {
            'create_date': datetime,
            'database_name': str,
            'index_id': int,
            'label': List[str],
            'parent_name': DdlName,
            'partition_name': str,
            'schema_name': str,
            'compute_account_name': str,
            'version': str
        }

        self.attribute_map = {
            'create_date': 'createDate',
            'database_name': 'databaseName',
            'index_id': 'indexId',
            'label': 'label',
            'parent_name': 'parentName',
            'partition_name': 'partitionName',
            'schema_name': 'schemaName',
            'compute_account_name': 'computeAccountName',
            'version': 'version'
        }

        self._create_date = create_date
        self._database_name = database_name
        self._index_id = index_id
        self._label = label
        self._parent_name = parent_name
        self._partition_name = partition_name
        self._schema_name = schema_name
        self._compute_account_name = compute_account_name
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'USqlTablePartition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The USqlTablePartition of this USqlTablePartition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def create_date(self):
        """Gets the create_date of this USqlTablePartition.

        the creation time of the partition

        :return: The create_date of this USqlTablePartition.
        :rtype: datetime
        """
        return self._create_date

    @create_date.setter
    def create_date(self, create_date):
        """Sets the create_date of this USqlTablePartition.

        the creation time of the partition

        :param create_date: The create_date of this USqlTablePartition.
        :type create_date: datetime
        """

        self._create_date = create_date

    @property
    def database_name(self):
        """Gets the database_name of this USqlTablePartition.

        the name of the database.

        :return: The database_name of this USqlTablePartition.
        :rtype: str
        """
        return self._database_name

    @database_name.setter
    def database_name(self, database_name):
        """Sets the database_name of this USqlTablePartition.

        the name of the database.

        :param database_name: The database_name of this USqlTablePartition.
        :type database_name: str
        """

        self._database_name = database_name

    @property
    def index_id(self):
        """Gets the index_id of this USqlTablePartition.

        the index ID for this partition.

        :return: The index_id of this USqlTablePartition.
        :rtype: int
        """
        return self._index_id

    @index_id.setter
    def index_id(self, index_id):
        """Sets the index_id of this USqlTablePartition.

        the index ID for this partition.

        :param index_id: The index_id of this USqlTablePartition.
        :type index_id: int
        """

        self._index_id = index_id

    @property
    def label(self):
        """Gets the label of this USqlTablePartition.

        the list of labels associated with this partition.

        :return: The label of this USqlTablePartition.
        :rtype: List[str]
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this USqlTablePartition.

        the list of labels associated with this partition.

        :param label: The label of this USqlTablePartition.
        :type label: List[str]
        """

        self._label = label

    @property
    def parent_name(self):
        """Gets the parent_name of this USqlTablePartition.


        :return: The parent_name of this USqlTablePartition.
        :rtype: DdlName
        """
        return self._parent_name

    @parent_name.setter
    def parent_name(self, parent_name):
        """Sets the parent_name of this USqlTablePartition.


        :param parent_name: The parent_name of this USqlTablePartition.
        :type parent_name: DdlName
        """

        self._parent_name = parent_name

    @property
    def partition_name(self):
        """Gets the partition_name of this USqlTablePartition.

        the name of the table partition.

        :return: The partition_name of this USqlTablePartition.
        :rtype: str
        """
        return self._partition_name

    @partition_name.setter
    def partition_name(self, partition_name):
        """Sets the partition_name of this USqlTablePartition.

        the name of the table partition.

        :param partition_name: The partition_name of this USqlTablePartition.
        :type partition_name: str
        """

        self._partition_name = partition_name

    @property
    def schema_name(self):
        """Gets the schema_name of this USqlTablePartition.

        the name of the schema associated with this table partition and database.

        :return: The schema_name of this USqlTablePartition.
        :rtype: str
        """
        return self._schema_name

    @schema_name.setter
    def schema_name(self, schema_name):
        """Sets the schema_name of this USqlTablePartition.

        the name of the schema associated with this table partition and database.

        :param schema_name: The schema_name of this USqlTablePartition.
        :type schema_name: str
        """

        self._schema_name = schema_name

    @property
    def compute_account_name(self):
        """Gets the compute_account_name of this USqlTablePartition.

        the name of the Data Lake Analytics account.

        :return: The compute_account_name of this USqlTablePartition.
        :rtype: str
        """
        return self._compute_account_name

    @compute_account_name.setter
    def compute_account_name(self, compute_account_name):
        """Sets the compute_account_name of this USqlTablePartition.

        the name of the Data Lake Analytics account.

        :param compute_account_name: The compute_account_name of this USqlTablePartition.
        :type compute_account_name: str
        """

        self._compute_account_name = compute_account_name

    @property
    def version(self):
        """Gets the version of this USqlTablePartition.

        the version of the catalog item.

        :return: The version of this USqlTablePartition.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this USqlTablePartition.

        the version of the catalog item.

        :param version: The version of this USqlTablePartition.
        :type version: str
        """

        self._version = version
