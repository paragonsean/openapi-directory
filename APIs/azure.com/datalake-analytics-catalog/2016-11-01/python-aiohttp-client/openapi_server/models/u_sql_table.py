# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.external_table import ExternalTable
from openapi_server.models.u_sql_distribution_info import USqlDistributionInfo
from openapi_server.models.u_sql_index import USqlIndex
from openapi_server.models.u_sql_table_column import USqlTableColumn
from openapi_server import util


class USqlTable(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, column_list: List[USqlTableColumn]=None, database_name: str=None, distribution_info: USqlDistributionInfo=None, external_table: ExternalTable=None, index_list: List[USqlIndex]=None, partition_key_list: List[str]=None, schema_name: str=None, table_name: str=None, compute_account_name: str=None, version: str=None):
        """USqlTable - a model defined in OpenAPI

        :param column_list: The column_list of this USqlTable.
        :param database_name: The database_name of this USqlTable.
        :param distribution_info: The distribution_info of this USqlTable.
        :param external_table: The external_table of this USqlTable.
        :param index_list: The index_list of this USqlTable.
        :param partition_key_list: The partition_key_list of this USqlTable.
        :param schema_name: The schema_name of this USqlTable.
        :param table_name: The table_name of this USqlTable.
        :param compute_account_name: The compute_account_name of this USqlTable.
        :param version: The version of this USqlTable.
        """
        self.openapi_types = {
            'column_list': List[USqlTableColumn],
            'database_name': str,
            'distribution_info': USqlDistributionInfo,
            'external_table': ExternalTable,
            'index_list': List[USqlIndex],
            'partition_key_list': List[str],
            'schema_name': str,
            'table_name': str,
            'compute_account_name': str,
            'version': str
        }

        self.attribute_map = {
            'column_list': 'columnList',
            'database_name': 'databaseName',
            'distribution_info': 'distributionInfo',
            'external_table': 'externalTable',
            'index_list': 'indexList',
            'partition_key_list': 'partitionKeyList',
            'schema_name': 'schemaName',
            'table_name': 'tableName',
            'compute_account_name': 'computeAccountName',
            'version': 'version'
        }

        self._column_list = column_list
        self._database_name = database_name
        self._distribution_info = distribution_info
        self._external_table = external_table
        self._index_list = index_list
        self._partition_key_list = partition_key_list
        self._schema_name = schema_name
        self._table_name = table_name
        self._compute_account_name = compute_account_name
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'USqlTable':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The USqlTable of this USqlTable.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def column_list(self):
        """Gets the column_list of this USqlTable.

        the list of columns in this table

        :return: The column_list of this USqlTable.
        :rtype: List[USqlTableColumn]
        """
        return self._column_list

    @column_list.setter
    def column_list(self, column_list):
        """Sets the column_list of this USqlTable.

        the list of columns in this table

        :param column_list: The column_list of this USqlTable.
        :type column_list: List[USqlTableColumn]
        """

        self._column_list = column_list

    @property
    def database_name(self):
        """Gets the database_name of this USqlTable.

        the name of the database.

        :return: The database_name of this USqlTable.
        :rtype: str
        """
        return self._database_name

    @database_name.setter
    def database_name(self, database_name):
        """Sets the database_name of this USqlTable.

        the name of the database.

        :param database_name: The database_name of this USqlTable.
        :type database_name: str
        """

        self._database_name = database_name

    @property
    def distribution_info(self):
        """Gets the distribution_info of this USqlTable.


        :return: The distribution_info of this USqlTable.
        :rtype: USqlDistributionInfo
        """
        return self._distribution_info

    @distribution_info.setter
    def distribution_info(self, distribution_info):
        """Sets the distribution_info of this USqlTable.


        :param distribution_info: The distribution_info of this USqlTable.
        :type distribution_info: USqlDistributionInfo
        """

        self._distribution_info = distribution_info

    @property
    def external_table(self):
        """Gets the external_table of this USqlTable.


        :return: The external_table of this USqlTable.
        :rtype: ExternalTable
        """
        return self._external_table

    @external_table.setter
    def external_table(self, external_table):
        """Sets the external_table of this USqlTable.


        :param external_table: The external_table of this USqlTable.
        :type external_table: ExternalTable
        """

        self._external_table = external_table

    @property
    def index_list(self):
        """Gets the index_list of this USqlTable.

        the list of indices in this table

        :return: The index_list of this USqlTable.
        :rtype: List[USqlIndex]
        """
        return self._index_list

    @index_list.setter
    def index_list(self, index_list):
        """Sets the index_list of this USqlTable.

        the list of indices in this table

        :param index_list: The index_list of this USqlTable.
        :type index_list: List[USqlIndex]
        """

        self._index_list = index_list

    @property
    def partition_key_list(self):
        """Gets the partition_key_list of this USqlTable.

        the list of partition keys in the table

        :return: The partition_key_list of this USqlTable.
        :rtype: List[str]
        """
        return self._partition_key_list

    @partition_key_list.setter
    def partition_key_list(self, partition_key_list):
        """Sets the partition_key_list of this USqlTable.

        the list of partition keys in the table

        :param partition_key_list: The partition_key_list of this USqlTable.
        :type partition_key_list: List[str]
        """

        self._partition_key_list = partition_key_list

    @property
    def schema_name(self):
        """Gets the schema_name of this USqlTable.

        the name of the schema associated with this table and database.

        :return: The schema_name of this USqlTable.
        :rtype: str
        """
        return self._schema_name

    @schema_name.setter
    def schema_name(self, schema_name):
        """Sets the schema_name of this USqlTable.

        the name of the schema associated with this table and database.

        :param schema_name: The schema_name of this USqlTable.
        :type schema_name: str
        """

        self._schema_name = schema_name

    @property
    def table_name(self):
        """Gets the table_name of this USqlTable.

        the name of the table.

        :return: The table_name of this USqlTable.
        :rtype: str
        """
        return self._table_name

    @table_name.setter
    def table_name(self, table_name):
        """Sets the table_name of this USqlTable.

        the name of the table.

        :param table_name: The table_name of this USqlTable.
        :type table_name: str
        """

        self._table_name = table_name

    @property
    def compute_account_name(self):
        """Gets the compute_account_name of this USqlTable.

        the name of the Data Lake Analytics account.

        :return: The compute_account_name of this USqlTable.
        :rtype: str
        """
        return self._compute_account_name

    @compute_account_name.setter
    def compute_account_name(self, compute_account_name):
        """Sets the compute_account_name of this USqlTable.

        the name of the Data Lake Analytics account.

        :param compute_account_name: The compute_account_name of this USqlTable.
        :type compute_account_name: str
        """

        self._compute_account_name = compute_account_name

    @property
    def version(self):
        """Gets the version of this USqlTable.

        the version of the catalog item.

        :return: The version of this USqlTable.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this USqlTable.

        the version of the catalog item.

        :param version: The version of this USqlTable.
        :type version: str
        """

        self._version = version
