# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Acl(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ace_type: str=None, permission: str=None, principal_id: str=None):
        """Acl - a model defined in OpenAPI

        :param ace_type: The ace_type of this Acl.
        :param permission: The permission of this Acl.
        :param principal_id: The principal_id of this Acl.
        """
        self.openapi_types = {
            'ace_type': str,
            'permission': str,
            'principal_id': str
        }

        self.attribute_map = {
            'ace_type': 'aceType',
            'permission': 'permission',
            'principal_id': 'principalId'
        }

        self._ace_type = ace_type
        self._permission = permission
        self._principal_id = principal_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Acl':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Acl of this Acl.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ace_type(self):
        """Gets the ace_type of this Acl.

        the access control list (ACL) entry type. UserObj and GroupObj denote the owning user and group, respectively.

        :return: The ace_type of this Acl.
        :rtype: str
        """
        return self._ace_type

    @ace_type.setter
    def ace_type(self, ace_type):
        """Sets the ace_type of this Acl.

        the access control list (ACL) entry type. UserObj and GroupObj denote the owning user and group, respectively.

        :param ace_type: The ace_type of this Acl.
        :type ace_type: str
        """
        allowed_values = ["UserObj", "GroupObj", "Other", "User", "Group"]  # noqa: E501
        if ace_type not in allowed_values:
            raise ValueError(
                "Invalid value for `ace_type` ({0}), must be one of {1}"
                .format(ace_type, allowed_values)
            )

        self._ace_type = ace_type

    @property
    def permission(self):
        """Gets the permission of this Acl.

        the permission type of the access control list (ACL) entry.

        :return: The permission of this Acl.
        :rtype: str
        """
        return self._permission

    @permission.setter
    def permission(self, permission):
        """Sets the permission of this Acl.

        the permission type of the access control list (ACL) entry.

        :param permission: The permission of this Acl.
        :type permission: str
        """
        allowed_values = ["None", "Use", "Create", "Drop", "Alter", "Write", "All"]  # noqa: E501
        if permission not in allowed_values:
            raise ValueError(
                "Invalid value for `permission` ({0}), must be one of {1}"
                .format(permission, allowed_values)
            )

        self._permission = permission

    @property
    def principal_id(self):
        """Gets the principal_id of this Acl.

        the Azure AD object ID of the user or group being specified in the access control list (ACL) entry.

        :return: The principal_id of this Acl.
        :rtype: str
        """
        return self._principal_id

    @principal_id.setter
    def principal_id(self, principal_id):
        """Sets the principal_id of this Acl.

        the Azure AD object ID of the user or group being specified in the access control list (ACL) entry.

        :param principal_id: The principal_id of this Acl.
        :type principal_id: str
        """

        self._principal_id = principal_id
