# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.u_sql_assembly_dependency_info import USqlAssemblyDependencyInfo
from openapi_server.models.u_sql_assembly_file_info import USqlAssemblyFileInfo
from openapi_server import util


class USqlAssembly(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, assembly_name: str=None, clr_name: str=None, database_name: str=None, dependencies: List[USqlAssemblyDependencyInfo]=None, files: List[USqlAssemblyFileInfo]=None, is_user_defined: bool=None, is_visible: bool=None, compute_account_name: str=None, version: str=None):
        """USqlAssembly - a model defined in OpenAPI

        :param assembly_name: The assembly_name of this USqlAssembly.
        :param clr_name: The clr_name of this USqlAssembly.
        :param database_name: The database_name of this USqlAssembly.
        :param dependencies: The dependencies of this USqlAssembly.
        :param files: The files of this USqlAssembly.
        :param is_user_defined: The is_user_defined of this USqlAssembly.
        :param is_visible: The is_visible of this USqlAssembly.
        :param compute_account_name: The compute_account_name of this USqlAssembly.
        :param version: The version of this USqlAssembly.
        """
        self.openapi_types = {
            'assembly_name': str,
            'clr_name': str,
            'database_name': str,
            'dependencies': List[USqlAssemblyDependencyInfo],
            'files': List[USqlAssemblyFileInfo],
            'is_user_defined': bool,
            'is_visible': bool,
            'compute_account_name': str,
            'version': str
        }

        self.attribute_map = {
            'assembly_name': 'assemblyName',
            'clr_name': 'clrName',
            'database_name': 'databaseName',
            'dependencies': 'dependencies',
            'files': 'files',
            'is_user_defined': 'isUserDefined',
            'is_visible': 'isVisible',
            'compute_account_name': 'computeAccountName',
            'version': 'version'
        }

        self._assembly_name = assembly_name
        self._clr_name = clr_name
        self._database_name = database_name
        self._dependencies = dependencies
        self._files = files
        self._is_user_defined = is_user_defined
        self._is_visible = is_visible
        self._compute_account_name = compute_account_name
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'USqlAssembly':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The USqlAssembly of this USqlAssembly.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def assembly_name(self):
        """Gets the assembly_name of this USqlAssembly.

        the name of the assembly.

        :return: The assembly_name of this USqlAssembly.
        :rtype: str
        """
        return self._assembly_name

    @assembly_name.setter
    def assembly_name(self, assembly_name):
        """Sets the assembly_name of this USqlAssembly.

        the name of the assembly.

        :param assembly_name: The assembly_name of this USqlAssembly.
        :type assembly_name: str
        """

        self._assembly_name = assembly_name

    @property
    def clr_name(self):
        """Gets the clr_name of this USqlAssembly.

        the name of the CLR.

        :return: The clr_name of this USqlAssembly.
        :rtype: str
        """
        return self._clr_name

    @clr_name.setter
    def clr_name(self, clr_name):
        """Sets the clr_name of this USqlAssembly.

        the name of the CLR.

        :param clr_name: The clr_name of this USqlAssembly.
        :type clr_name: str
        """

        self._clr_name = clr_name

    @property
    def database_name(self):
        """Gets the database_name of this USqlAssembly.

        the name of the database.

        :return: The database_name of this USqlAssembly.
        :rtype: str
        """
        return self._database_name

    @database_name.setter
    def database_name(self, database_name):
        """Sets the database_name of this USqlAssembly.

        the name of the database.

        :param database_name: The database_name of this USqlAssembly.
        :type database_name: str
        """

        self._database_name = database_name

    @property
    def dependencies(self):
        """Gets the dependencies of this USqlAssembly.

        the list of dependencies associated with the assembly

        :return: The dependencies of this USqlAssembly.
        :rtype: List[USqlAssemblyDependencyInfo]
        """
        return self._dependencies

    @dependencies.setter
    def dependencies(self, dependencies):
        """Sets the dependencies of this USqlAssembly.

        the list of dependencies associated with the assembly

        :param dependencies: The dependencies of this USqlAssembly.
        :type dependencies: List[USqlAssemblyDependencyInfo]
        """

        self._dependencies = dependencies

    @property
    def files(self):
        """Gets the files of this USqlAssembly.

        the list of files associated with the assembly

        :return: The files of this USqlAssembly.
        :rtype: List[USqlAssemblyFileInfo]
        """
        return self._files

    @files.setter
    def files(self, files):
        """Sets the files of this USqlAssembly.

        the list of files associated with the assembly

        :param files: The files of this USqlAssembly.
        :type files: List[USqlAssemblyFileInfo]
        """

        self._files = files

    @property
    def is_user_defined(self):
        """Gets the is_user_defined of this USqlAssembly.

        the switch indicating if this assembly is user defined or not.

        :return: The is_user_defined of this USqlAssembly.
        :rtype: bool
        """
        return self._is_user_defined

    @is_user_defined.setter
    def is_user_defined(self, is_user_defined):
        """Sets the is_user_defined of this USqlAssembly.

        the switch indicating if this assembly is user defined or not.

        :param is_user_defined: The is_user_defined of this USqlAssembly.
        :type is_user_defined: bool
        """

        self._is_user_defined = is_user_defined

    @property
    def is_visible(self):
        """Gets the is_visible of this USqlAssembly.

        the switch indicating if this assembly is visible or not.

        :return: The is_visible of this USqlAssembly.
        :rtype: bool
        """
        return self._is_visible

    @is_visible.setter
    def is_visible(self, is_visible):
        """Sets the is_visible of this USqlAssembly.

        the switch indicating if this assembly is visible or not.

        :param is_visible: The is_visible of this USqlAssembly.
        :type is_visible: bool
        """

        self._is_visible = is_visible

    @property
    def compute_account_name(self):
        """Gets the compute_account_name of this USqlAssembly.

        the name of the Data Lake Analytics account.

        :return: The compute_account_name of this USqlAssembly.
        :rtype: str
        """
        return self._compute_account_name

    @compute_account_name.setter
    def compute_account_name(self, compute_account_name):
        """Sets the compute_account_name of this USqlAssembly.

        the name of the Data Lake Analytics account.

        :param compute_account_name: The compute_account_name of this USqlAssembly.
        :type compute_account_name: str
        """

        self._compute_account_name = compute_account_name

    @property
    def version(self):
        """Gets the version of this USqlAssembly.

        the version of the catalog item.

        :return: The version of this USqlAssembly.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this USqlAssembly.

        the version of the catalog item.

        :param version: The version of this USqlAssembly.
        :type version: str
        """

        self._version = version
