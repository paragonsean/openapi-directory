/**
 * DataLakeAnalyticsCatalogManagementClient
 * Creates an Azure Data Lake Analytics catalog client.
 *
 * The version of the OpenAPI document: 2016-11-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CatalogItem from './CatalogItem';

/**
 * The USqlTableStatistics model module.
 * @module model/USqlTableStatistics
 * @version 2016-11-01
 */
class USqlTableStatistics {
    /**
     * Constructs a new <code>USqlTableStatistics</code>.
     * A Data Lake Analytics catalog U-SQL table statistics item.
     * @alias module:model/USqlTableStatistics
     * @implements module:model/CatalogItem
     */
    constructor() { 
        CatalogItem.initialize(this);
        USqlTableStatistics.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>USqlTableStatistics</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/USqlTableStatistics} obj Optional instance to populate.
     * @return {module:model/USqlTableStatistics} The populated <code>USqlTableStatistics</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new USqlTableStatistics();
            CatalogItem.constructFromObject(data, obj);

            if (data.hasOwnProperty('colNames')) {
                obj['colNames'] = ApiClient.convertToType(data['colNames'], ['String']);
            }
            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'Date');
            }
            if (data.hasOwnProperty('databaseName')) {
                obj['databaseName'] = ApiClient.convertToType(data['databaseName'], 'String');
            }
            if (data.hasOwnProperty('filterDefinition')) {
                obj['filterDefinition'] = ApiClient.convertToType(data['filterDefinition'], 'String');
            }
            if (data.hasOwnProperty('hasFilter')) {
                obj['hasFilter'] = ApiClient.convertToType(data['hasFilter'], 'Boolean');
            }
            if (data.hasOwnProperty('isAutoCreated')) {
                obj['isAutoCreated'] = ApiClient.convertToType(data['isAutoCreated'], 'Boolean');
            }
            if (data.hasOwnProperty('isUserCreated')) {
                obj['isUserCreated'] = ApiClient.convertToType(data['isUserCreated'], 'Boolean');
            }
            if (data.hasOwnProperty('schemaName')) {
                obj['schemaName'] = ApiClient.convertToType(data['schemaName'], 'String');
            }
            if (data.hasOwnProperty('statDataPath')) {
                obj['statDataPath'] = ApiClient.convertToType(data['statDataPath'], 'String');
            }
            if (data.hasOwnProperty('statisticsName')) {
                obj['statisticsName'] = ApiClient.convertToType(data['statisticsName'], 'String');
            }
            if (data.hasOwnProperty('tableName')) {
                obj['tableName'] = ApiClient.convertToType(data['tableName'], 'String');
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'Date');
            }
            if (data.hasOwnProperty('userStatName')) {
                obj['userStatName'] = ApiClient.convertToType(data['userStatName'], 'String');
            }
            if (data.hasOwnProperty('computeAccountName')) {
                obj['computeAccountName'] = ApiClient.convertToType(data['computeAccountName'], 'String');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>USqlTableStatistics</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>USqlTableStatistics</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['colNames'])) {
            throw new Error("Expected the field `colNames` to be an array in the JSON data but got " + data['colNames']);
        }
        // ensure the json data is a string
        if (data['databaseName'] && !(typeof data['databaseName'] === 'string' || data['databaseName'] instanceof String)) {
            throw new Error("Expected the field `databaseName` to be a primitive type in the JSON string but got " + data['databaseName']);
        }
        // ensure the json data is a string
        if (data['filterDefinition'] && !(typeof data['filterDefinition'] === 'string' || data['filterDefinition'] instanceof String)) {
            throw new Error("Expected the field `filterDefinition` to be a primitive type in the JSON string but got " + data['filterDefinition']);
        }
        // ensure the json data is a string
        if (data['schemaName'] && !(typeof data['schemaName'] === 'string' || data['schemaName'] instanceof String)) {
            throw new Error("Expected the field `schemaName` to be a primitive type in the JSON string but got " + data['schemaName']);
        }
        // ensure the json data is a string
        if (data['statDataPath'] && !(typeof data['statDataPath'] === 'string' || data['statDataPath'] instanceof String)) {
            throw new Error("Expected the field `statDataPath` to be a primitive type in the JSON string but got " + data['statDataPath']);
        }
        // ensure the json data is a string
        if (data['statisticsName'] && !(typeof data['statisticsName'] === 'string' || data['statisticsName'] instanceof String)) {
            throw new Error("Expected the field `statisticsName` to be a primitive type in the JSON string but got " + data['statisticsName']);
        }
        // ensure the json data is a string
        if (data['tableName'] && !(typeof data['tableName'] === 'string' || data['tableName'] instanceof String)) {
            throw new Error("Expected the field `tableName` to be a primitive type in the JSON string but got " + data['tableName']);
        }
        // ensure the json data is a string
        if (data['userStatName'] && !(typeof data['userStatName'] === 'string' || data['userStatName'] instanceof String)) {
            throw new Error("Expected the field `userStatName` to be a primitive type in the JSON string but got " + data['userStatName']);
        }
        // ensure the json data is a string
        if (data['computeAccountName'] && !(typeof data['computeAccountName'] === 'string' || data['computeAccountName'] instanceof String)) {
            throw new Error("Expected the field `computeAccountName` to be a primitive type in the JSON string but got " + data['computeAccountName']);
        }
        // ensure the json data is a string
        if (data['version'] && !(typeof data['version'] === 'string' || data['version'] instanceof String)) {
            throw new Error("Expected the field `version` to be a primitive type in the JSON string but got " + data['version']);
        }

        return true;
    }


}



/**
 * the list of column names associated with these statistics.
 * @member {Array.<String>} colNames
 */
USqlTableStatistics.prototype['colNames'] = undefined;

/**
 * the creation time of the statistics.
 * @member {Date} createTime
 */
USqlTableStatistics.prototype['createTime'] = undefined;

/**
 * the name of the database.
 * @member {String} databaseName
 */
USqlTableStatistics.prototype['databaseName'] = undefined;

/**
 * the filter definition for the statistics.
 * @member {String} filterDefinition
 */
USqlTableStatistics.prototype['filterDefinition'] = undefined;

/**
 * the switch indicating if these statistics have a filter.
 * @member {Boolean} hasFilter
 */
USqlTableStatistics.prototype['hasFilter'] = undefined;

/**
 * the switch indicating if these statistics are automatically created.
 * @member {Boolean} isAutoCreated
 */
USqlTableStatistics.prototype['isAutoCreated'] = undefined;

/**
 * the switch indicating if these statistics are user created.
 * @member {Boolean} isUserCreated
 */
USqlTableStatistics.prototype['isUserCreated'] = undefined;

/**
 * the name of the schema associated with this table and database.
 * @member {String} schemaName
 */
USqlTableStatistics.prototype['schemaName'] = undefined;

/**
 * the path to the statistics data.
 * @member {String} statDataPath
 */
USqlTableStatistics.prototype['statDataPath'] = undefined;

/**
 * the name of the table statistics.
 * @member {String} statisticsName
 */
USqlTableStatistics.prototype['statisticsName'] = undefined;

/**
 * the name of the table.
 * @member {String} tableName
 */
USqlTableStatistics.prototype['tableName'] = undefined;

/**
 * the last time the statistics were updated.
 * @member {Date} updateTime
 */
USqlTableStatistics.prototype['updateTime'] = undefined;

/**
 * the name of the user statistics.
 * @member {String} userStatName
 */
USqlTableStatistics.prototype['userStatName'] = undefined;

/**
 * the name of the Data Lake Analytics account.
 * @member {String} computeAccountName
 */
USqlTableStatistics.prototype['computeAccountName'] = undefined;

/**
 * the version of the catalog item.
 * @member {String} version
 */
USqlTableStatistics.prototype['version'] = undefined;


// Implement CatalogItem interface:
/**
 * the name of the Data Lake Analytics account.
 * @member {String} computeAccountName
 */
CatalogItem.prototype['computeAccountName'] = undefined;
/**
 * the version of the catalog item.
 * @member {String} version
 */
CatalogItem.prototype['version'] = undefined;




export default USqlTableStatistics;

