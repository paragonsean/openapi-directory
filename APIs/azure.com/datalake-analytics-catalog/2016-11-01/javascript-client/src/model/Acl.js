/**
 * DataLakeAnalyticsCatalogManagementClient
 * Creates an Azure Data Lake Analytics catalog client.
 *
 * The version of the OpenAPI document: 2016-11-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Acl model module.
 * @module model/Acl
 * @version 2016-11-01
 */
class Acl {
    /**
     * Constructs a new <code>Acl</code>.
     * A Data Lake Analytics catalog access control list (ACL) entry.
     * @alias module:model/Acl
     */
    constructor() { 
        
        Acl.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Acl</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Acl} obj Optional instance to populate.
     * @return {module:model/Acl} The populated <code>Acl</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Acl();

            if (data.hasOwnProperty('aceType')) {
                obj['aceType'] = ApiClient.convertToType(data['aceType'], 'String');
            }
            if (data.hasOwnProperty('permission')) {
                obj['permission'] = ApiClient.convertToType(data['permission'], 'String');
            }
            if (data.hasOwnProperty('principalId')) {
                obj['principalId'] = ApiClient.convertToType(data['principalId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Acl</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Acl</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['aceType'] && !(typeof data['aceType'] === 'string' || data['aceType'] instanceof String)) {
            throw new Error("Expected the field `aceType` to be a primitive type in the JSON string but got " + data['aceType']);
        }
        // ensure the json data is a string
        if (data['permission'] && !(typeof data['permission'] === 'string' || data['permission'] instanceof String)) {
            throw new Error("Expected the field `permission` to be a primitive type in the JSON string but got " + data['permission']);
        }
        // ensure the json data is a string
        if (data['principalId'] && !(typeof data['principalId'] === 'string' || data['principalId'] instanceof String)) {
            throw new Error("Expected the field `principalId` to be a primitive type in the JSON string but got " + data['principalId']);
        }

        return true;
    }


}



/**
 * the access control list (ACL) entry type. UserObj and GroupObj denote the owning user and group, respectively.
 * @member {module:model/Acl.AceTypeEnum} aceType
 */
Acl.prototype['aceType'] = undefined;

/**
 * the permission type of the access control list (ACL) entry.
 * @member {module:model/Acl.PermissionEnum} permission
 */
Acl.prototype['permission'] = undefined;

/**
 * the Azure AD object ID of the user or group being specified in the access control list (ACL) entry.
 * @member {String} principalId
 */
Acl.prototype['principalId'] = undefined;





/**
 * Allowed values for the <code>aceType</code> property.
 * @enum {String}
 * @readonly
 */
Acl['AceTypeEnum'] = {

    /**
     * value: "UserObj"
     * @const
     */
    "UserObj": "UserObj",

    /**
     * value: "GroupObj"
     * @const
     */
    "GroupObj": "GroupObj",

    /**
     * value: "Other"
     * @const
     */
    "Other": "Other",

    /**
     * value: "User"
     * @const
     */
    "User": "User",

    /**
     * value: "Group"
     * @const
     */
    "Group": "Group"
};


/**
 * Allowed values for the <code>permission</code> property.
 * @enum {String}
 * @readonly
 */
Acl['PermissionEnum'] = {

    /**
     * value: "None"
     * @const
     */
    "None": "None",

    /**
     * value: "Use"
     * @const
     */
    "Use": "Use",

    /**
     * value: "Create"
     * @const
     */
    "Create": "Create",

    /**
     * value: "Drop"
     * @const
     */
    "Drop": "Drop",

    /**
     * value: "Alter"
     * @const
     */
    "Alter": "Alter",

    /**
     * value: "Write"
     * @const
     */
    "Write": "Write",

    /**
     * value: "All"
     * @const
     */
    "All": "All"
};



export default Acl;

