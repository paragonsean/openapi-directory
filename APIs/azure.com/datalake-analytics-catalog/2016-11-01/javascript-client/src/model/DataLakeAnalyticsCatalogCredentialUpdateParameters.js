/**
 * DataLakeAnalyticsCatalogManagementClient
 * Creates an Azure Data Lake Analytics catalog client.
 *
 * The version of the OpenAPI document: 2016-11-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DataLakeAnalyticsCatalogCredentialUpdateParameters model module.
 * @module model/DataLakeAnalyticsCatalogCredentialUpdateParameters
 * @version 2016-11-01
 */
class DataLakeAnalyticsCatalogCredentialUpdateParameters {
    /**
     * Constructs a new <code>DataLakeAnalyticsCatalogCredentialUpdateParameters</code>.
     * Data Lake Analytics catalog credential update parameters.
     * @alias module:model/DataLakeAnalyticsCatalogCredentialUpdateParameters
     */
    constructor() { 
        
        DataLakeAnalyticsCatalogCredentialUpdateParameters.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DataLakeAnalyticsCatalogCredentialUpdateParameters</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DataLakeAnalyticsCatalogCredentialUpdateParameters} obj Optional instance to populate.
     * @return {module:model/DataLakeAnalyticsCatalogCredentialUpdateParameters} The populated <code>DataLakeAnalyticsCatalogCredentialUpdateParameters</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DataLakeAnalyticsCatalogCredentialUpdateParameters();

            if (data.hasOwnProperty('newPassword')) {
                obj['newPassword'] = ApiClient.convertToType(data['newPassword'], 'String');
            }
            if (data.hasOwnProperty('password')) {
                obj['password'] = ApiClient.convertToType(data['password'], 'String');
            }
            if (data.hasOwnProperty('uri')) {
                obj['uri'] = ApiClient.convertToType(data['uri'], 'String');
            }
            if (data.hasOwnProperty('userId')) {
                obj['userId'] = ApiClient.convertToType(data['userId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DataLakeAnalyticsCatalogCredentialUpdateParameters</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DataLakeAnalyticsCatalogCredentialUpdateParameters</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['newPassword'] && !(typeof data['newPassword'] === 'string' || data['newPassword'] instanceof String)) {
            throw new Error("Expected the field `newPassword` to be a primitive type in the JSON string but got " + data['newPassword']);
        }
        // ensure the json data is a string
        if (data['password'] && !(typeof data['password'] === 'string' || data['password'] instanceof String)) {
            throw new Error("Expected the field `password` to be a primitive type in the JSON string but got " + data['password']);
        }
        // ensure the json data is a string
        if (data['uri'] && !(typeof data['uri'] === 'string' || data['uri'] instanceof String)) {
            throw new Error("Expected the field `uri` to be a primitive type in the JSON string but got " + data['uri']);
        }
        // ensure the json data is a string
        if (data['userId'] && !(typeof data['userId'] === 'string' || data['userId'] instanceof String)) {
            throw new Error("Expected the field `userId` to be a primitive type in the JSON string but got " + data['userId']);
        }

        return true;
    }


}



/**
 * the new password for the credential and user with access to the data source.
 * @member {String} newPassword
 */
DataLakeAnalyticsCatalogCredentialUpdateParameters.prototype['newPassword'] = undefined;

/**
 * the current password for the credential and user with access to the data source. This is required if the requester is not the account owner.
 * @member {String} password
 */
DataLakeAnalyticsCatalogCredentialUpdateParameters.prototype['password'] = undefined;

/**
 * the URI identifier for the data source this credential can connect to in the format <hostname>:<port>
 * @member {String} uri
 */
DataLakeAnalyticsCatalogCredentialUpdateParameters.prototype['uri'] = undefined;

/**
 * the object identifier for the user associated with this credential with access to the data source.
 * @member {String} userId
 */
DataLakeAnalyticsCatalogCredentialUpdateParameters.prototype['userId'] = undefined;






export default DataLakeAnalyticsCatalogCredentialUpdateParameters;

