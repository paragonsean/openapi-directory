/**
 * DataLakeAnalyticsCatalogManagementClient
 * Creates an Azure Data Lake Analytics catalog client.
 *
 * The version of the OpenAPI document: 2016-11-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CatalogItem from './CatalogItem';

/**
 * The USqlTableValuedFunction model module.
 * @module model/USqlTableValuedFunction
 * @version 2016-11-01
 */
class USqlTableValuedFunction {
    /**
     * Constructs a new <code>USqlTableValuedFunction</code>.
     * A Data Lake Analytics catalog U-SQL table valued function item.
     * @alias module:model/USqlTableValuedFunction
     * @implements module:model/CatalogItem
     */
    constructor() { 
        CatalogItem.initialize(this);
        USqlTableValuedFunction.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>USqlTableValuedFunction</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/USqlTableValuedFunction} obj Optional instance to populate.
     * @return {module:model/USqlTableValuedFunction} The populated <code>USqlTableValuedFunction</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new USqlTableValuedFunction();
            CatalogItem.constructFromObject(data, obj);

            if (data.hasOwnProperty('databaseName')) {
                obj['databaseName'] = ApiClient.convertToType(data['databaseName'], 'String');
            }
            if (data.hasOwnProperty('definition')) {
                obj['definition'] = ApiClient.convertToType(data['definition'], 'String');
            }
            if (data.hasOwnProperty('schemaName')) {
                obj['schemaName'] = ApiClient.convertToType(data['schemaName'], 'String');
            }
            if (data.hasOwnProperty('tvfName')) {
                obj['tvfName'] = ApiClient.convertToType(data['tvfName'], 'String');
            }
            if (data.hasOwnProperty('computeAccountName')) {
                obj['computeAccountName'] = ApiClient.convertToType(data['computeAccountName'], 'String');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>USqlTableValuedFunction</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>USqlTableValuedFunction</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['databaseName'] && !(typeof data['databaseName'] === 'string' || data['databaseName'] instanceof String)) {
            throw new Error("Expected the field `databaseName` to be a primitive type in the JSON string but got " + data['databaseName']);
        }
        // ensure the json data is a string
        if (data['definition'] && !(typeof data['definition'] === 'string' || data['definition'] instanceof String)) {
            throw new Error("Expected the field `definition` to be a primitive type in the JSON string but got " + data['definition']);
        }
        // ensure the json data is a string
        if (data['schemaName'] && !(typeof data['schemaName'] === 'string' || data['schemaName'] instanceof String)) {
            throw new Error("Expected the field `schemaName` to be a primitive type in the JSON string but got " + data['schemaName']);
        }
        // ensure the json data is a string
        if (data['tvfName'] && !(typeof data['tvfName'] === 'string' || data['tvfName'] instanceof String)) {
            throw new Error("Expected the field `tvfName` to be a primitive type in the JSON string but got " + data['tvfName']);
        }
        // ensure the json data is a string
        if (data['computeAccountName'] && !(typeof data['computeAccountName'] === 'string' || data['computeAccountName'] instanceof String)) {
            throw new Error("Expected the field `computeAccountName` to be a primitive type in the JSON string but got " + data['computeAccountName']);
        }
        // ensure the json data is a string
        if (data['version'] && !(typeof data['version'] === 'string' || data['version'] instanceof String)) {
            throw new Error("Expected the field `version` to be a primitive type in the JSON string but got " + data['version']);
        }

        return true;
    }


}



/**
 * the name of the database.
 * @member {String} databaseName
 */
USqlTableValuedFunction.prototype['databaseName'] = undefined;

/**
 * the definition of the table valued function.
 * @member {String} definition
 */
USqlTableValuedFunction.prototype['definition'] = undefined;

/**
 * the name of the schema associated with this database.
 * @member {String} schemaName
 */
USqlTableValuedFunction.prototype['schemaName'] = undefined;

/**
 * the name of the table valued function.
 * @member {String} tvfName
 */
USqlTableValuedFunction.prototype['tvfName'] = undefined;

/**
 * the name of the Data Lake Analytics account.
 * @member {String} computeAccountName
 */
USqlTableValuedFunction.prototype['computeAccountName'] = undefined;

/**
 * the version of the catalog item.
 * @member {String} version
 */
USqlTableValuedFunction.prototype['version'] = undefined;


// Implement CatalogItem interface:
/**
 * the name of the Data Lake Analytics account.
 * @member {String} computeAccountName
 */
CatalogItem.prototype['computeAccountName'] = undefined;
/**
 * the version of the catalog item.
 * @member {String} version
 */
CatalogItem.prototype['version'] = undefined;




export default USqlTableValuedFunction;

