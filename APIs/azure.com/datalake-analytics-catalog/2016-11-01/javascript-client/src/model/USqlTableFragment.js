/**
 * DataLakeAnalyticsCatalogManagementClient
 * Creates an Azure Data Lake Analytics catalog client.
 *
 * The version of the OpenAPI document: 2016-11-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The USqlTableFragment model module.
 * @module model/USqlTableFragment
 * @version 2016-11-01
 */
class USqlTableFragment {
    /**
     * Constructs a new <code>USqlTableFragment</code>.
     * A Data Lake Analytics catalog U-SQL table fragment item.
     * @alias module:model/USqlTableFragment
     */
    constructor() { 
        
        USqlTableFragment.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>USqlTableFragment</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/USqlTableFragment} obj Optional instance to populate.
     * @return {module:model/USqlTableFragment} The populated <code>USqlTableFragment</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new USqlTableFragment();

            if (data.hasOwnProperty('createDate')) {
                obj['createDate'] = ApiClient.convertToType(data['createDate'], 'Date');
            }
            if (data.hasOwnProperty('fragmentId')) {
                obj['fragmentId'] = ApiClient.convertToType(data['fragmentId'], 'String');
            }
            if (data.hasOwnProperty('indexId')) {
                obj['indexId'] = ApiClient.convertToType(data['indexId'], 'Number');
            }
            if (data.hasOwnProperty('parentId')) {
                obj['parentId'] = ApiClient.convertToType(data['parentId'], 'String');
            }
            if (data.hasOwnProperty('rowCount')) {
                obj['rowCount'] = ApiClient.convertToType(data['rowCount'], 'Number');
            }
            if (data.hasOwnProperty('size')) {
                obj['size'] = ApiClient.convertToType(data['size'], 'Number');
            }
            if (data.hasOwnProperty('streamPath')) {
                obj['streamPath'] = ApiClient.convertToType(data['streamPath'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>USqlTableFragment</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>USqlTableFragment</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['fragmentId'] && !(typeof data['fragmentId'] === 'string' || data['fragmentId'] instanceof String)) {
            throw new Error("Expected the field `fragmentId` to be a primitive type in the JSON string but got " + data['fragmentId']);
        }
        // ensure the json data is a string
        if (data['parentId'] && !(typeof data['parentId'] === 'string' || data['parentId'] instanceof String)) {
            throw new Error("Expected the field `parentId` to be a primitive type in the JSON string but got " + data['parentId']);
        }
        // ensure the json data is a string
        if (data['streamPath'] && !(typeof data['streamPath'] === 'string' || data['streamPath'] instanceof String)) {
            throw new Error("Expected the field `streamPath` to be a primitive type in the JSON string but got " + data['streamPath']);
        }

        return true;
    }


}



/**
 * the creation time of the table fragment.
 * @member {Date} createDate
 */
USqlTableFragment.prototype['createDate'] = undefined;

/**
 * the version of the catalog item.
 * @member {String} fragmentId
 */
USqlTableFragment.prototype['fragmentId'] = undefined;

/**
 * the ordinal of the index which contains the table fragment.
 * @member {Number} indexId
 */
USqlTableFragment.prototype['indexId'] = undefined;

/**
 * the parent object Id of the table fragment. The parent could be a table or table partition.
 * @member {String} parentId
 */
USqlTableFragment.prototype['parentId'] = undefined;

/**
 * the number of rows in the table fragment.
 * @member {Number} rowCount
 */
USqlTableFragment.prototype['rowCount'] = undefined;

/**
 * the data size of the table fragment in bytes.
 * @member {Number} size
 */
USqlTableFragment.prototype['size'] = undefined;

/**
 * the relative path for the table fragment location.
 * @member {String} streamPath
 */
USqlTableFragment.prototype['streamPath'] = undefined;






export default USqlTableFragment;

