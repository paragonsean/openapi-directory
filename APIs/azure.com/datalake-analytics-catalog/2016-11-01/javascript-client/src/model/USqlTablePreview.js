/**
 * DataLakeAnalyticsCatalogManagementClient
 * Creates an Azure Data Lake Analytics catalog client.
 *
 * The version of the OpenAPI document: 2016-11-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import USqlTableColumn from './USqlTableColumn';

/**
 * The USqlTablePreview model module.
 * @module model/USqlTablePreview
 * @version 2016-11-01
 */
class USqlTablePreview {
    /**
     * Constructs a new <code>USqlTablePreview</code>.
     * A Data Lake Analytics catalog table or partition preview rows item.
     * @alias module:model/USqlTablePreview
     */
    constructor() { 
        
        USqlTablePreview.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>USqlTablePreview</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/USqlTablePreview} obj Optional instance to populate.
     * @return {module:model/USqlTablePreview} The populated <code>USqlTablePreview</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new USqlTablePreview();

            if (data.hasOwnProperty('rows')) {
                obj['rows'] = ApiClient.convertToType(data['rows'], [['String']]);
            }
            if (data.hasOwnProperty('schema')) {
                obj['schema'] = ApiClient.convertToType(data['schema'], [USqlTableColumn]);
            }
            if (data.hasOwnProperty('totalColumnCount')) {
                obj['totalColumnCount'] = ApiClient.convertToType(data['totalColumnCount'], 'Number');
            }
            if (data.hasOwnProperty('totalRowCount')) {
                obj['totalRowCount'] = ApiClient.convertToType(data['totalRowCount'], 'Number');
            }
            if (data.hasOwnProperty('truncated')) {
                obj['truncated'] = ApiClient.convertToType(data['truncated'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>USqlTablePreview</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>USqlTablePreview</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['rows'])) {
            throw new Error("Expected the field `rows` to be an array in the JSON data but got " + data['rows']);
        }
        if (data['schema']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['schema'])) {
                throw new Error("Expected the field `schema` to be an array in the JSON data but got " + data['schema']);
            }
            // validate the optional field `schema` (array)
            for (const item of data['schema']) {
                USqlTableColumn.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * the rows of the table or partition preview, where each row is an array of string representations the row's values. Note: Byte arrays will appear as base-64 encoded values, SqlMap and SqlArray objects will appear as escaped JSON objects, and DateTime objects will appear as ISO formatted UTC date-times.
 * @member {Array.<Array.<String>>} rows
 */
USqlTablePreview.prototype['rows'] = undefined;

/**
 * the schema of the table or partition.
 * @member {Array.<module:model/USqlTableColumn>} schema
 */
USqlTablePreview.prototype['schema'] = undefined;

/**
 * the total number of columns in the table or partition.
 * @member {Number} totalColumnCount
 */
USqlTablePreview.prototype['totalColumnCount'] = undefined;

/**
 * the total number of rows in the table or partition.
 * @member {Number} totalRowCount
 */
USqlTablePreview.prototype['totalRowCount'] = undefined;

/**
 * true if the amount of data in the response is less than expected due to the preview operation's size limitations. This can occur if the requested rows or row counts are too large.
 * @member {Boolean} truncated
 */
USqlTablePreview.prototype['truncated'] = undefined;






export default USqlTablePreview;

