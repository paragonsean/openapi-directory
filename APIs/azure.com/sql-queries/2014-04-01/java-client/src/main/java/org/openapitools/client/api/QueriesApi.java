/*
 * Azure SQL Database
 * Provides create, read, update and delete functionality for Azure SQL Database resources including servers, databases, elastic pools, recommendations, operations, and usage metrics.
 *
 * The version of the OpenAPI document: 2014-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.QueryStatisticListResult;
import org.openapitools.client.model.QueryTextListResult;
import org.openapitools.client.model.TopQueriesListResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class QueriesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public QueriesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public QueriesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for queriesListByDatabase
     * @param apiVersion The API version to use for the request. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param serverName The name of the server. (required)
     * @param databaseName The name of the database. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queriesListByDatabaseCall(String apiVersion, String subscriptionId, String resourceGroupName, String serverName, String databaseName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/topQueries"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "serverName" + "}", localVarApiClient.escapeString(serverName.toString()))
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queriesListByDatabaseValidateBeforeCall(String apiVersion, String subscriptionId, String resourceGroupName, String serverName, String databaseName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling queriesListByDatabase(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling queriesListByDatabase(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling queriesListByDatabase(Async)");
        }

        // verify the required parameter 'serverName' is set
        if (serverName == null) {
            throw new ApiException("Missing the required parameter 'serverName' when calling queriesListByDatabase(Async)");
        }

        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling queriesListByDatabase(Async)");
        }

        return queriesListByDatabaseCall(apiVersion, subscriptionId, resourceGroupName, serverName, databaseName, _callback);

    }

    /**
     * 
     * Gets a list of top queries by database.
     * @param apiVersion The API version to use for the request. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param serverName The name of the server. (required)
     * @param databaseName The name of the database. (required)
     * @return TopQueriesListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public TopQueriesListResult queriesListByDatabase(String apiVersion, String subscriptionId, String resourceGroupName, String serverName, String databaseName) throws ApiException {
        ApiResponse<TopQueriesListResult> localVarResp = queriesListByDatabaseWithHttpInfo(apiVersion, subscriptionId, resourceGroupName, serverName, databaseName);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets a list of top queries by database.
     * @param apiVersion The API version to use for the request. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param serverName The name of the server. (required)
     * @param databaseName The name of the database. (required)
     * @return ApiResponse&lt;TopQueriesListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TopQueriesListResult> queriesListByDatabaseWithHttpInfo(String apiVersion, String subscriptionId, String resourceGroupName, String serverName, String databaseName) throws ApiException {
        okhttp3.Call localVarCall = queriesListByDatabaseValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, serverName, databaseName, null);
        Type localVarReturnType = new TypeToken<TopQueriesListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets a list of top queries by database.
     * @param apiVersion The API version to use for the request. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param serverName The name of the server. (required)
     * @param databaseName The name of the database. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queriesListByDatabaseAsync(String apiVersion, String subscriptionId, String resourceGroupName, String serverName, String databaseName, final ApiCallback<TopQueriesListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = queriesListByDatabaseValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, serverName, databaseName, _callback);
        Type localVarReturnType = new TypeToken<TopQueriesListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for queryStatisticsListByQuery
     * @param apiVersion The API version to use for the request. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param serverName The name of the server. (required)
     * @param databaseName The name of the database. (required)
     * @param queryId The id of the query (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queryStatisticsListByQueryCall(String apiVersion, String subscriptionId, String resourceGroupName, String serverName, String databaseName, String queryId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/topQueries/{queryId}/statistics"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "serverName" + "}", localVarApiClient.escapeString(serverName.toString()))
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()))
            .replace("{" + "queryId" + "}", localVarApiClient.escapeString(queryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queryStatisticsListByQueryValidateBeforeCall(String apiVersion, String subscriptionId, String resourceGroupName, String serverName, String databaseName, String queryId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling queryStatisticsListByQuery(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling queryStatisticsListByQuery(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling queryStatisticsListByQuery(Async)");
        }

        // verify the required parameter 'serverName' is set
        if (serverName == null) {
            throw new ApiException("Missing the required parameter 'serverName' when calling queryStatisticsListByQuery(Async)");
        }

        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling queryStatisticsListByQuery(Async)");
        }

        // verify the required parameter 'queryId' is set
        if (queryId == null) {
            throw new ApiException("Missing the required parameter 'queryId' when calling queryStatisticsListByQuery(Async)");
        }

        return queryStatisticsListByQueryCall(apiVersion, subscriptionId, resourceGroupName, serverName, databaseName, queryId, _callback);

    }

    /**
     * 
     * Lists a query&#39;s statistics.
     * @param apiVersion The API version to use for the request. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param serverName The name of the server. (required)
     * @param databaseName The name of the database. (required)
     * @param queryId The id of the query (required)
     * @return QueryStatisticListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public QueryStatisticListResult queryStatisticsListByQuery(String apiVersion, String subscriptionId, String resourceGroupName, String serverName, String databaseName, String queryId) throws ApiException {
        ApiResponse<QueryStatisticListResult> localVarResp = queryStatisticsListByQueryWithHttpInfo(apiVersion, subscriptionId, resourceGroupName, serverName, databaseName, queryId);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists a query&#39;s statistics.
     * @param apiVersion The API version to use for the request. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param serverName The name of the server. (required)
     * @param databaseName The name of the database. (required)
     * @param queryId The id of the query (required)
     * @return ApiResponse&lt;QueryStatisticListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<QueryStatisticListResult> queryStatisticsListByQueryWithHttpInfo(String apiVersion, String subscriptionId, String resourceGroupName, String serverName, String databaseName, String queryId) throws ApiException {
        okhttp3.Call localVarCall = queryStatisticsListByQueryValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, serverName, databaseName, queryId, null);
        Type localVarReturnType = new TypeToken<QueryStatisticListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists a query&#39;s statistics.
     * @param apiVersion The API version to use for the request. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param serverName The name of the server. (required)
     * @param databaseName The name of the database. (required)
     * @param queryId The id of the query (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queryStatisticsListByQueryAsync(String apiVersion, String subscriptionId, String resourceGroupName, String serverName, String databaseName, String queryId, final ApiCallback<QueryStatisticListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = queryStatisticsListByQueryValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, serverName, databaseName, queryId, _callback);
        Type localVarReturnType = new TypeToken<QueryStatisticListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for queryTextsListByQuery
     * @param apiVersion The API version to use for the request. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param serverName The name of the server. (required)
     * @param databaseName The name of the database. (required)
     * @param queryId The id of the query (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queryTextsListByQueryCall(String apiVersion, String subscriptionId, String resourceGroupName, String serverName, String databaseName, String queryId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/topQueries/{queryId}/queryText"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "serverName" + "}", localVarApiClient.escapeString(serverName.toString()))
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()))
            .replace("{" + "queryId" + "}", localVarApiClient.escapeString(queryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queryTextsListByQueryValidateBeforeCall(String apiVersion, String subscriptionId, String resourceGroupName, String serverName, String databaseName, String queryId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling queryTextsListByQuery(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling queryTextsListByQuery(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling queryTextsListByQuery(Async)");
        }

        // verify the required parameter 'serverName' is set
        if (serverName == null) {
            throw new ApiException("Missing the required parameter 'serverName' when calling queryTextsListByQuery(Async)");
        }

        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling queryTextsListByQuery(Async)");
        }

        // verify the required parameter 'queryId' is set
        if (queryId == null) {
            throw new ApiException("Missing the required parameter 'queryId' when calling queryTextsListByQuery(Async)");
        }

        return queryTextsListByQueryCall(apiVersion, subscriptionId, resourceGroupName, serverName, databaseName, queryId, _callback);

    }

    /**
     * 
     * Gets a query&#39;s text.
     * @param apiVersion The API version to use for the request. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param serverName The name of the server. (required)
     * @param databaseName The name of the database. (required)
     * @param queryId The id of the query (required)
     * @return QueryTextListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public QueryTextListResult queryTextsListByQuery(String apiVersion, String subscriptionId, String resourceGroupName, String serverName, String databaseName, String queryId) throws ApiException {
        ApiResponse<QueryTextListResult> localVarResp = queryTextsListByQueryWithHttpInfo(apiVersion, subscriptionId, resourceGroupName, serverName, databaseName, queryId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets a query&#39;s text.
     * @param apiVersion The API version to use for the request. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param serverName The name of the server. (required)
     * @param databaseName The name of the database. (required)
     * @param queryId The id of the query (required)
     * @return ApiResponse&lt;QueryTextListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<QueryTextListResult> queryTextsListByQueryWithHttpInfo(String apiVersion, String subscriptionId, String resourceGroupName, String serverName, String databaseName, String queryId) throws ApiException {
        okhttp3.Call localVarCall = queryTextsListByQueryValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, serverName, databaseName, queryId, null);
        Type localVarReturnType = new TypeToken<QueryTextListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets a query&#39;s text.
     * @param apiVersion The API version to use for the request. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param serverName The name of the server. (required)
     * @param databaseName The name of the database. (required)
     * @param queryId The id of the query (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queryTextsListByQueryAsync(String apiVersion, String subscriptionId, String resourceGroupName, String serverName, String databaseName, String queryId, final ApiCallback<QueryTextListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = queryTextsListByQueryValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, serverName, databaseName, queryId, _callback);
        Type localVarReturnType = new TypeToken<QueryTextListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
