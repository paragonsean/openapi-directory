/*
 * Azure SQL Database
 * Provides create, read, update and delete functionality for Azure SQL Database resources including servers, databases, elastic pools, recommendations, operations, and usage metrics.
 *
 * The version of the OpenAPI document: 2014-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.QueryStatistic;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A database query.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:24:13.132413-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TopQueries {
  /**
   * The function that is used to aggregate each query&#39;s metrics.
   */
  @JsonAdapter(AggregationFunctionEnum.Adapter.class)
  public enum AggregationFunctionEnum {
    MIN("min"),
    
    MAX("max"),
    
    AVG("avg"),
    
    SUM("sum");

    private String value;

    AggregationFunctionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AggregationFunctionEnum fromValue(String value) {
      for (AggregationFunctionEnum b : AggregationFunctionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AggregationFunctionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AggregationFunctionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AggregationFunctionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AggregationFunctionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AggregationFunctionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AGGREGATION_FUNCTION = "aggregationFunction";
  @SerializedName(SERIALIZED_NAME_AGGREGATION_FUNCTION)
  private AggregationFunctionEnum aggregationFunction;

  /**
   * The execution type that is used to filter the query instances that are returned.
   */
  @JsonAdapter(ExecutionTypeEnum.Adapter.class)
  public enum ExecutionTypeEnum {
    ANY("any"),
    
    REGULAR("regular"),
    
    IRREGULAR("irregular"),
    
    ABORTED("aborted"),
    
    EXCEPTION("exception");

    private String value;

    ExecutionTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ExecutionTypeEnum fromValue(String value) {
      for (ExecutionTypeEnum b : ExecutionTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ExecutionTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ExecutionTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ExecutionTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ExecutionTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ExecutionTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_EXECUTION_TYPE = "executionType";
  @SerializedName(SERIALIZED_NAME_EXECUTION_TYPE)
  private ExecutionTypeEnum executionType;

  public static final String SERIALIZED_NAME_INTERVAL_TYPE = "intervalType";
  @SerializedName(SERIALIZED_NAME_INTERVAL_TYPE)
  private String intervalType;

  public static final String SERIALIZED_NAME_NUMBER_OF_TOP_QUERIES = "numberOfTopQueries";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_TOP_QUERIES)
  private BigDecimal numberOfTopQueries;

  public static final String SERIALIZED_NAME_OBSERVATION_END_TIME = "observationEndTime";
  @SerializedName(SERIALIZED_NAME_OBSERVATION_END_TIME)
  private OffsetDateTime observationEndTime;

  public static final String SERIALIZED_NAME_OBSERVATION_START_TIME = "observationStartTime";
  @SerializedName(SERIALIZED_NAME_OBSERVATION_START_TIME)
  private OffsetDateTime observationStartTime;

  /**
   * The type of metric to use for ordering the top metrics.
   */
  @JsonAdapter(ObservedMetricEnum.Adapter.class)
  public enum ObservedMetricEnum {
    CPU("cpu"),
    
    IO("io"),
    
    LOGIO("logio"),
    
    DURATION("duration"),
    
    EXECUTION_COUNT("executionCount");

    private String value;

    ObservedMetricEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ObservedMetricEnum fromValue(String value) {
      for (ObservedMetricEnum b : ObservedMetricEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ObservedMetricEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ObservedMetricEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ObservedMetricEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ObservedMetricEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ObservedMetricEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_OBSERVED_METRIC = "observedMetric";
  @SerializedName(SERIALIZED_NAME_OBSERVED_METRIC)
  private ObservedMetricEnum observedMetric;

  public static final String SERIALIZED_NAME_QUERIES = "queries";
  @SerializedName(SERIALIZED_NAME_QUERIES)
  private List<QueryStatistic> queries = new ArrayList<>();

  public TopQueries() {
  }

  public TopQueries(
     AggregationFunctionEnum aggregationFunction, 
     ExecutionTypeEnum executionType, 
     String intervalType, 
     BigDecimal numberOfTopQueries, 
     OffsetDateTime observationEndTime, 
     OffsetDateTime observationStartTime, 
     ObservedMetricEnum observedMetric, 
     List<QueryStatistic> queries
  ) {
    this();
    this.aggregationFunction = aggregationFunction;
    this.executionType = executionType;
    this.intervalType = intervalType;
    this.numberOfTopQueries = numberOfTopQueries;
    this.observationEndTime = observationEndTime;
    this.observationStartTime = observationStartTime;
    this.observedMetric = observedMetric;
    this.queries = queries;
  }

  /**
   * The function that is used to aggregate each query&#39;s metrics.
   * @return aggregationFunction
   */
  @javax.annotation.Nullable
  public AggregationFunctionEnum getAggregationFunction() {
    return aggregationFunction;
  }



  /**
   * The execution type that is used to filter the query instances that are returned.
   * @return executionType
   */
  @javax.annotation.Nullable
  public ExecutionTypeEnum getExecutionType() {
    return executionType;
  }



  /**
   * The duration of the interval (ISO8601 duration format).
   * @return intervalType
   */
  @javax.annotation.Nullable
  public String getIntervalType() {
    return intervalType;
  }



  /**
   * The number of requested queries.
   * @return numberOfTopQueries
   */
  @javax.annotation.Nullable
  public BigDecimal getNumberOfTopQueries() {
    return numberOfTopQueries;
  }



  /**
   * The end time for queries that are returned (ISO8601 format)
   * @return observationEndTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getObservationEndTime() {
    return observationEndTime;
  }



  /**
   * The start time for queries that are returned (ISO8601 format)
   * @return observationStartTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getObservationStartTime() {
    return observationStartTime;
  }



  /**
   * The type of metric to use for ordering the top metrics.
   * @return observedMetric
   */
  @javax.annotation.Nullable
  public ObservedMetricEnum getObservedMetric() {
    return observedMetric;
  }



  /**
   * The list of queries.
   * @return queries
   */
  @javax.annotation.Nullable
  public List<QueryStatistic> getQueries() {
    return queries;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TopQueries topQueries = (TopQueries) o;
    return Objects.equals(this.aggregationFunction, topQueries.aggregationFunction) &&
        Objects.equals(this.executionType, topQueries.executionType) &&
        Objects.equals(this.intervalType, topQueries.intervalType) &&
        Objects.equals(this.numberOfTopQueries, topQueries.numberOfTopQueries) &&
        Objects.equals(this.observationEndTime, topQueries.observationEndTime) &&
        Objects.equals(this.observationStartTime, topQueries.observationStartTime) &&
        Objects.equals(this.observedMetric, topQueries.observedMetric) &&
        Objects.equals(this.queries, topQueries.queries);
  }

  @Override
  public int hashCode() {
    return Objects.hash(aggregationFunction, executionType, intervalType, numberOfTopQueries, observationEndTime, observationStartTime, observedMetric, queries);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TopQueries {\n");
    sb.append("    aggregationFunction: ").append(toIndentedString(aggregationFunction)).append("\n");
    sb.append("    executionType: ").append(toIndentedString(executionType)).append("\n");
    sb.append("    intervalType: ").append(toIndentedString(intervalType)).append("\n");
    sb.append("    numberOfTopQueries: ").append(toIndentedString(numberOfTopQueries)).append("\n");
    sb.append("    observationEndTime: ").append(toIndentedString(observationEndTime)).append("\n");
    sb.append("    observationStartTime: ").append(toIndentedString(observationStartTime)).append("\n");
    sb.append("    observedMetric: ").append(toIndentedString(observedMetric)).append("\n");
    sb.append("    queries: ").append(toIndentedString(queries)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("aggregationFunction");
    openapiFields.add("executionType");
    openapiFields.add("intervalType");
    openapiFields.add("numberOfTopQueries");
    openapiFields.add("observationEndTime");
    openapiFields.add("observationStartTime");
    openapiFields.add("observedMetric");
    openapiFields.add("queries");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TopQueries
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TopQueries.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TopQueries is not found in the empty JSON string", TopQueries.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TopQueries.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TopQueries` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("aggregationFunction") != null && !jsonObj.get("aggregationFunction").isJsonNull()) && !jsonObj.get("aggregationFunction").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `aggregationFunction` to be a primitive type in the JSON string but got `%s`", jsonObj.get("aggregationFunction").toString()));
      }
      // validate the optional field `aggregationFunction`
      if (jsonObj.get("aggregationFunction") != null && !jsonObj.get("aggregationFunction").isJsonNull()) {
        AggregationFunctionEnum.validateJsonElement(jsonObj.get("aggregationFunction"));
      }
      if ((jsonObj.get("executionType") != null && !jsonObj.get("executionType").isJsonNull()) && !jsonObj.get("executionType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `executionType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("executionType").toString()));
      }
      // validate the optional field `executionType`
      if (jsonObj.get("executionType") != null && !jsonObj.get("executionType").isJsonNull()) {
        ExecutionTypeEnum.validateJsonElement(jsonObj.get("executionType"));
      }
      if ((jsonObj.get("intervalType") != null && !jsonObj.get("intervalType").isJsonNull()) && !jsonObj.get("intervalType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `intervalType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("intervalType").toString()));
      }
      if ((jsonObj.get("observedMetric") != null && !jsonObj.get("observedMetric").isJsonNull()) && !jsonObj.get("observedMetric").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `observedMetric` to be a primitive type in the JSON string but got `%s`", jsonObj.get("observedMetric").toString()));
      }
      // validate the optional field `observedMetric`
      if (jsonObj.get("observedMetric") != null && !jsonObj.get("observedMetric").isJsonNull()) {
        ObservedMetricEnum.validateJsonElement(jsonObj.get("observedMetric"));
      }
      if (jsonObj.get("queries") != null && !jsonObj.get("queries").isJsonNull()) {
        JsonArray jsonArrayqueries = jsonObj.getAsJsonArray("queries");
        if (jsonArrayqueries != null) {
          // ensure the json data is an array
          if (!jsonObj.get("queries").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `queries` to be an array in the JSON string but got `%s`", jsonObj.get("queries").toString()));
          }

          // validate the optional field `queries` (array)
          for (int i = 0; i < jsonArrayqueries.size(); i++) {
            QueryStatistic.validateJsonElement(jsonArrayqueries.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TopQueries.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TopQueries' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TopQueries> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TopQueries.class));

       return (TypeAdapter<T>) new TypeAdapter<TopQueries>() {
           @Override
           public void write(JsonWriter out, TopQueries value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TopQueries read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TopQueries given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TopQueries
   * @throws IOException if the JSON string is invalid with respect to TopQueries
   */
  public static TopQueries fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TopQueries.class);
  }

  /**
   * Convert an instance of TopQueries to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

