/**
 * Azure SQL Database
 * Provides create, read, update and delete functionality for Azure SQL Database resources including servers, databases, elastic pools, recommendations, operations, and usage metrics.
 *
 * The version of the OpenAPI document: 2014-04-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQueryInterval.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQueryInterval::OAIQueryInterval(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQueryInterval::OAIQueryInterval() {
    this->initializeModel();
}

OAIQueryInterval::~OAIQueryInterval() {}

void OAIQueryInterval::initializeModel() {

    m_execution_count_isSet = false;
    m_execution_count_isValid = false;

    m_interval_start_time_isSet = false;
    m_interval_start_time_isValid = false;

    m_metrics_isSet = false;
    m_metrics_isValid = false;
}

void OAIQueryInterval::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQueryInterval::fromJsonObject(QJsonObject json) {

    m_execution_count_isValid = ::OpenAPI::fromJsonValue(m_execution_count, json[QString("executionCount")]);
    m_execution_count_isSet = !json[QString("executionCount")].isNull() && m_execution_count_isValid;

    m_interval_start_time_isValid = ::OpenAPI::fromJsonValue(m_interval_start_time, json[QString("intervalStartTime")]);
    m_interval_start_time_isSet = !json[QString("intervalStartTime")].isNull() && m_interval_start_time_isValid;

    m_metrics_isValid = ::OpenAPI::fromJsonValue(m_metrics, json[QString("metrics")]);
    m_metrics_isSet = !json[QString("metrics")].isNull() && m_metrics_isValid;
}

QString OAIQueryInterval::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQueryInterval::asJsonObject() const {
    QJsonObject obj;
    if (m_execution_count_isSet) {
        obj.insert(QString("executionCount"), ::OpenAPI::toJsonValue(m_execution_count));
    }
    if (m_interval_start_time_isSet) {
        obj.insert(QString("intervalStartTime"), ::OpenAPI::toJsonValue(m_interval_start_time));
    }
    if (m_metrics.size() > 0) {
        obj.insert(QString("metrics"), ::OpenAPI::toJsonValue(m_metrics));
    }
    return obj;
}

double OAIQueryInterval::getExecutionCount() const {
    return m_execution_count;
}
void OAIQueryInterval::setExecutionCount(const double &execution_count) {
    m_execution_count = execution_count;
    m_execution_count_isSet = true;
}

bool OAIQueryInterval::is_execution_count_Set() const{
    return m_execution_count_isSet;
}

bool OAIQueryInterval::is_execution_count_Valid() const{
    return m_execution_count_isValid;
}

QDateTime OAIQueryInterval::getIntervalStartTime() const {
    return m_interval_start_time;
}
void OAIQueryInterval::setIntervalStartTime(const QDateTime &interval_start_time) {
    m_interval_start_time = interval_start_time;
    m_interval_start_time_isSet = true;
}

bool OAIQueryInterval::is_interval_start_time_Set() const{
    return m_interval_start_time_isSet;
}

bool OAIQueryInterval::is_interval_start_time_Valid() const{
    return m_interval_start_time_isValid;
}

QList<OAIQueryMetric> OAIQueryInterval::getMetrics() const {
    return m_metrics;
}
void OAIQueryInterval::setMetrics(const QList<OAIQueryMetric> &metrics) {
    m_metrics = metrics;
    m_metrics_isSet = true;
}

bool OAIQueryInterval::is_metrics_Set() const{
    return m_metrics_isSet;
}

bool OAIQueryInterval::is_metrics_Valid() const{
    return m_metrics_isValid;
}

bool OAIQueryInterval::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_execution_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interval_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metrics.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQueryInterval::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
