/**
 * Azure SQL Database
 * Provides create, read, update and delete functionality for Azure SQL Database resources including servers, databases, elastic pools, recommendations, operations, and usage metrics.
 *
 * The version of the OpenAPI document: 2014-04-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAITopQueries.h
 *
 * A database query.
 */

#ifndef OAITopQueries_H
#define OAITopQueries_H

#include <QJsonObject>

#include "OAIQueryStatistic.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIQueryStatistic;

class OAITopQueries : public OAIObject {
public:
    OAITopQueries();
    OAITopQueries(QString json);
    ~OAITopQueries() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAggregationFunction() const;
    void setAggregationFunction(const QString &aggregation_function);
    bool is_aggregation_function_Set() const;
    bool is_aggregation_function_Valid() const;

    QString getExecutionType() const;
    void setExecutionType(const QString &execution_type);
    bool is_execution_type_Set() const;
    bool is_execution_type_Valid() const;

    QString getIntervalType() const;
    void setIntervalType(const QString &interval_type);
    bool is_interval_type_Set() const;
    bool is_interval_type_Valid() const;

    double getNumberOfTopQueries() const;
    void setNumberOfTopQueries(const double &number_of_top_queries);
    bool is_number_of_top_queries_Set() const;
    bool is_number_of_top_queries_Valid() const;

    QDateTime getObservationEndTime() const;
    void setObservationEndTime(const QDateTime &observation_end_time);
    bool is_observation_end_time_Set() const;
    bool is_observation_end_time_Valid() const;

    QDateTime getObservationStartTime() const;
    void setObservationStartTime(const QDateTime &observation_start_time);
    bool is_observation_start_time_Set() const;
    bool is_observation_start_time_Valid() const;

    QString getObservedMetric() const;
    void setObservedMetric(const QString &observed_metric);
    bool is_observed_metric_Set() const;
    bool is_observed_metric_Valid() const;

    QList<OAIQueryStatistic> getQueries() const;
    void setQueries(const QList<OAIQueryStatistic> &queries);
    bool is_queries_Set() const;
    bool is_queries_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_aggregation_function;
    bool m_aggregation_function_isSet;
    bool m_aggregation_function_isValid;

    QString m_execution_type;
    bool m_execution_type_isSet;
    bool m_execution_type_isValid;

    QString m_interval_type;
    bool m_interval_type_isSet;
    bool m_interval_type_isValid;

    double m_number_of_top_queries;
    bool m_number_of_top_queries_isSet;
    bool m_number_of_top_queries_isValid;

    QDateTime m_observation_end_time;
    bool m_observation_end_time_isSet;
    bool m_observation_end_time_isValid;

    QDateTime m_observation_start_time;
    bool m_observation_start_time_isSet;
    bool m_observation_start_time_isValid;

    QString m_observed_metric;
    bool m_observed_metric_isSet;
    bool m_observed_metric_isValid;

    QList<OAIQueryStatistic> m_queries;
    bool m_queries_isSet;
    bool m_queries_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAITopQueries)

#endif // OAITopQueries_H
