/**
 * Azure SQL Database
 * Provides create, read, update and delete functionality for Azure SQL Database resources including servers, databases, elastic pools, recommendations, operations, and usage metrics.
 *
 * The version of the OpenAPI document: 2014-04-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITopQueries.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITopQueries::OAITopQueries(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITopQueries::OAITopQueries() {
    this->initializeModel();
}

OAITopQueries::~OAITopQueries() {}

void OAITopQueries::initializeModel() {

    m_aggregation_function_isSet = false;
    m_aggregation_function_isValid = false;

    m_execution_type_isSet = false;
    m_execution_type_isValid = false;

    m_interval_type_isSet = false;
    m_interval_type_isValid = false;

    m_number_of_top_queries_isSet = false;
    m_number_of_top_queries_isValid = false;

    m_observation_end_time_isSet = false;
    m_observation_end_time_isValid = false;

    m_observation_start_time_isSet = false;
    m_observation_start_time_isValid = false;

    m_observed_metric_isSet = false;
    m_observed_metric_isValid = false;

    m_queries_isSet = false;
    m_queries_isValid = false;
}

void OAITopQueries::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITopQueries::fromJsonObject(QJsonObject json) {

    m_aggregation_function_isValid = ::OpenAPI::fromJsonValue(m_aggregation_function, json[QString("aggregationFunction")]);
    m_aggregation_function_isSet = !json[QString("aggregationFunction")].isNull() && m_aggregation_function_isValid;

    m_execution_type_isValid = ::OpenAPI::fromJsonValue(m_execution_type, json[QString("executionType")]);
    m_execution_type_isSet = !json[QString("executionType")].isNull() && m_execution_type_isValid;

    m_interval_type_isValid = ::OpenAPI::fromJsonValue(m_interval_type, json[QString("intervalType")]);
    m_interval_type_isSet = !json[QString("intervalType")].isNull() && m_interval_type_isValid;

    m_number_of_top_queries_isValid = ::OpenAPI::fromJsonValue(m_number_of_top_queries, json[QString("numberOfTopQueries")]);
    m_number_of_top_queries_isSet = !json[QString("numberOfTopQueries")].isNull() && m_number_of_top_queries_isValid;

    m_observation_end_time_isValid = ::OpenAPI::fromJsonValue(m_observation_end_time, json[QString("observationEndTime")]);
    m_observation_end_time_isSet = !json[QString("observationEndTime")].isNull() && m_observation_end_time_isValid;

    m_observation_start_time_isValid = ::OpenAPI::fromJsonValue(m_observation_start_time, json[QString("observationStartTime")]);
    m_observation_start_time_isSet = !json[QString("observationStartTime")].isNull() && m_observation_start_time_isValid;

    m_observed_metric_isValid = ::OpenAPI::fromJsonValue(m_observed_metric, json[QString("observedMetric")]);
    m_observed_metric_isSet = !json[QString("observedMetric")].isNull() && m_observed_metric_isValid;

    m_queries_isValid = ::OpenAPI::fromJsonValue(m_queries, json[QString("queries")]);
    m_queries_isSet = !json[QString("queries")].isNull() && m_queries_isValid;
}

QString OAITopQueries::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITopQueries::asJsonObject() const {
    QJsonObject obj;
    if (m_aggregation_function_isSet) {
        obj.insert(QString("aggregationFunction"), ::OpenAPI::toJsonValue(m_aggregation_function));
    }
    if (m_execution_type_isSet) {
        obj.insert(QString("executionType"), ::OpenAPI::toJsonValue(m_execution_type));
    }
    if (m_interval_type_isSet) {
        obj.insert(QString("intervalType"), ::OpenAPI::toJsonValue(m_interval_type));
    }
    if (m_number_of_top_queries_isSet) {
        obj.insert(QString("numberOfTopQueries"), ::OpenAPI::toJsonValue(m_number_of_top_queries));
    }
    if (m_observation_end_time_isSet) {
        obj.insert(QString("observationEndTime"), ::OpenAPI::toJsonValue(m_observation_end_time));
    }
    if (m_observation_start_time_isSet) {
        obj.insert(QString("observationStartTime"), ::OpenAPI::toJsonValue(m_observation_start_time));
    }
    if (m_observed_metric_isSet) {
        obj.insert(QString("observedMetric"), ::OpenAPI::toJsonValue(m_observed_metric));
    }
    if (m_queries.size() > 0) {
        obj.insert(QString("queries"), ::OpenAPI::toJsonValue(m_queries));
    }
    return obj;
}

QString OAITopQueries::getAggregationFunction() const {
    return m_aggregation_function;
}
void OAITopQueries::setAggregationFunction(const QString &aggregation_function) {
    m_aggregation_function = aggregation_function;
    m_aggregation_function_isSet = true;
}

bool OAITopQueries::is_aggregation_function_Set() const{
    return m_aggregation_function_isSet;
}

bool OAITopQueries::is_aggregation_function_Valid() const{
    return m_aggregation_function_isValid;
}

QString OAITopQueries::getExecutionType() const {
    return m_execution_type;
}
void OAITopQueries::setExecutionType(const QString &execution_type) {
    m_execution_type = execution_type;
    m_execution_type_isSet = true;
}

bool OAITopQueries::is_execution_type_Set() const{
    return m_execution_type_isSet;
}

bool OAITopQueries::is_execution_type_Valid() const{
    return m_execution_type_isValid;
}

QString OAITopQueries::getIntervalType() const {
    return m_interval_type;
}
void OAITopQueries::setIntervalType(const QString &interval_type) {
    m_interval_type = interval_type;
    m_interval_type_isSet = true;
}

bool OAITopQueries::is_interval_type_Set() const{
    return m_interval_type_isSet;
}

bool OAITopQueries::is_interval_type_Valid() const{
    return m_interval_type_isValid;
}

double OAITopQueries::getNumberOfTopQueries() const {
    return m_number_of_top_queries;
}
void OAITopQueries::setNumberOfTopQueries(const double &number_of_top_queries) {
    m_number_of_top_queries = number_of_top_queries;
    m_number_of_top_queries_isSet = true;
}

bool OAITopQueries::is_number_of_top_queries_Set() const{
    return m_number_of_top_queries_isSet;
}

bool OAITopQueries::is_number_of_top_queries_Valid() const{
    return m_number_of_top_queries_isValid;
}

QDateTime OAITopQueries::getObservationEndTime() const {
    return m_observation_end_time;
}
void OAITopQueries::setObservationEndTime(const QDateTime &observation_end_time) {
    m_observation_end_time = observation_end_time;
    m_observation_end_time_isSet = true;
}

bool OAITopQueries::is_observation_end_time_Set() const{
    return m_observation_end_time_isSet;
}

bool OAITopQueries::is_observation_end_time_Valid() const{
    return m_observation_end_time_isValid;
}

QDateTime OAITopQueries::getObservationStartTime() const {
    return m_observation_start_time;
}
void OAITopQueries::setObservationStartTime(const QDateTime &observation_start_time) {
    m_observation_start_time = observation_start_time;
    m_observation_start_time_isSet = true;
}

bool OAITopQueries::is_observation_start_time_Set() const{
    return m_observation_start_time_isSet;
}

bool OAITopQueries::is_observation_start_time_Valid() const{
    return m_observation_start_time_isValid;
}

QString OAITopQueries::getObservedMetric() const {
    return m_observed_metric;
}
void OAITopQueries::setObservedMetric(const QString &observed_metric) {
    m_observed_metric = observed_metric;
    m_observed_metric_isSet = true;
}

bool OAITopQueries::is_observed_metric_Set() const{
    return m_observed_metric_isSet;
}

bool OAITopQueries::is_observed_metric_Valid() const{
    return m_observed_metric_isValid;
}

QList<OAIQueryStatistic> OAITopQueries::getQueries() const {
    return m_queries;
}
void OAITopQueries::setQueries(const QList<OAIQueryStatistic> &queries) {
    m_queries = queries;
    m_queries_isSet = true;
}

bool OAITopQueries::is_queries_Set() const{
    return m_queries_isSet;
}

bool OAITopQueries::is_queries_Valid() const{
    return m_queries_isValid;
}

bool OAITopQueries::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_aggregation_function_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_execution_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interval_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_top_queries_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_observation_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_observation_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_observed_metric_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_queries.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITopQueries::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
