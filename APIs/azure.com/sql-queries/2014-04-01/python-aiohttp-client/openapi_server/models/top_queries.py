# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.query_statistic import QueryStatistic
from openapi_server import util


class TopQueries(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, aggregation_function: str=None, execution_type: str=None, interval_type: str=None, number_of_top_queries: float=None, observation_end_time: datetime=None, observation_start_time: datetime=None, observed_metric: str=None, queries: List[QueryStatistic]=None):
        """TopQueries - a model defined in OpenAPI

        :param aggregation_function: The aggregation_function of this TopQueries.
        :param execution_type: The execution_type of this TopQueries.
        :param interval_type: The interval_type of this TopQueries.
        :param number_of_top_queries: The number_of_top_queries of this TopQueries.
        :param observation_end_time: The observation_end_time of this TopQueries.
        :param observation_start_time: The observation_start_time of this TopQueries.
        :param observed_metric: The observed_metric of this TopQueries.
        :param queries: The queries of this TopQueries.
        """
        self.openapi_types = {
            'aggregation_function': str,
            'execution_type': str,
            'interval_type': str,
            'number_of_top_queries': float,
            'observation_end_time': datetime,
            'observation_start_time': datetime,
            'observed_metric': str,
            'queries': List[QueryStatistic]
        }

        self.attribute_map = {
            'aggregation_function': 'aggregationFunction',
            'execution_type': 'executionType',
            'interval_type': 'intervalType',
            'number_of_top_queries': 'numberOfTopQueries',
            'observation_end_time': 'observationEndTime',
            'observation_start_time': 'observationStartTime',
            'observed_metric': 'observedMetric',
            'queries': 'queries'
        }

        self._aggregation_function = aggregation_function
        self._execution_type = execution_type
        self._interval_type = interval_type
        self._number_of_top_queries = number_of_top_queries
        self._observation_end_time = observation_end_time
        self._observation_start_time = observation_start_time
        self._observed_metric = observed_metric
        self._queries = queries

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TopQueries':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TopQueries of this TopQueries.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aggregation_function(self):
        """Gets the aggregation_function of this TopQueries.

        The function that is used to aggregate each query's metrics.

        :return: The aggregation_function of this TopQueries.
        :rtype: str
        """
        return self._aggregation_function

    @aggregation_function.setter
    def aggregation_function(self, aggregation_function):
        """Sets the aggregation_function of this TopQueries.

        The function that is used to aggregate each query's metrics.

        :param aggregation_function: The aggregation_function of this TopQueries.
        :type aggregation_function: str
        """
        allowed_values = ["min", "max", "avg", "sum"]  # noqa: E501
        if aggregation_function not in allowed_values:
            raise ValueError(
                "Invalid value for `aggregation_function` ({0}), must be one of {1}"
                .format(aggregation_function, allowed_values)
            )

        self._aggregation_function = aggregation_function

    @property
    def execution_type(self):
        """Gets the execution_type of this TopQueries.

        The execution type that is used to filter the query instances that are returned.

        :return: The execution_type of this TopQueries.
        :rtype: str
        """
        return self._execution_type

    @execution_type.setter
    def execution_type(self, execution_type):
        """Sets the execution_type of this TopQueries.

        The execution type that is used to filter the query instances that are returned.

        :param execution_type: The execution_type of this TopQueries.
        :type execution_type: str
        """
        allowed_values = ["any", "regular", "irregular", "aborted", "exception"]  # noqa: E501
        if execution_type not in allowed_values:
            raise ValueError(
                "Invalid value for `execution_type` ({0}), must be one of {1}"
                .format(execution_type, allowed_values)
            )

        self._execution_type = execution_type

    @property
    def interval_type(self):
        """Gets the interval_type of this TopQueries.

        The duration of the interval (ISO8601 duration format).

        :return: The interval_type of this TopQueries.
        :rtype: str
        """
        return self._interval_type

    @interval_type.setter
    def interval_type(self, interval_type):
        """Sets the interval_type of this TopQueries.

        The duration of the interval (ISO8601 duration format).

        :param interval_type: The interval_type of this TopQueries.
        :type interval_type: str
        """

        self._interval_type = interval_type

    @property
    def number_of_top_queries(self):
        """Gets the number_of_top_queries of this TopQueries.

        The number of requested queries.

        :return: The number_of_top_queries of this TopQueries.
        :rtype: float
        """
        return self._number_of_top_queries

    @number_of_top_queries.setter
    def number_of_top_queries(self, number_of_top_queries):
        """Sets the number_of_top_queries of this TopQueries.

        The number of requested queries.

        :param number_of_top_queries: The number_of_top_queries of this TopQueries.
        :type number_of_top_queries: float
        """

        self._number_of_top_queries = number_of_top_queries

    @property
    def observation_end_time(self):
        """Gets the observation_end_time of this TopQueries.

        The end time for queries that are returned (ISO8601 format)

        :return: The observation_end_time of this TopQueries.
        :rtype: datetime
        """
        return self._observation_end_time

    @observation_end_time.setter
    def observation_end_time(self, observation_end_time):
        """Sets the observation_end_time of this TopQueries.

        The end time for queries that are returned (ISO8601 format)

        :param observation_end_time: The observation_end_time of this TopQueries.
        :type observation_end_time: datetime
        """

        self._observation_end_time = observation_end_time

    @property
    def observation_start_time(self):
        """Gets the observation_start_time of this TopQueries.

        The start time for queries that are returned (ISO8601 format)

        :return: The observation_start_time of this TopQueries.
        :rtype: datetime
        """
        return self._observation_start_time

    @observation_start_time.setter
    def observation_start_time(self, observation_start_time):
        """Sets the observation_start_time of this TopQueries.

        The start time for queries that are returned (ISO8601 format)

        :param observation_start_time: The observation_start_time of this TopQueries.
        :type observation_start_time: datetime
        """

        self._observation_start_time = observation_start_time

    @property
    def observed_metric(self):
        """Gets the observed_metric of this TopQueries.

        The type of metric to use for ordering the top metrics.

        :return: The observed_metric of this TopQueries.
        :rtype: str
        """
        return self._observed_metric

    @observed_metric.setter
    def observed_metric(self, observed_metric):
        """Sets the observed_metric of this TopQueries.

        The type of metric to use for ordering the top metrics.

        :param observed_metric: The observed_metric of this TopQueries.
        :type observed_metric: str
        """
        allowed_values = ["cpu", "io", "logio", "duration", "executionCount"]  # noqa: E501
        if observed_metric not in allowed_values:
            raise ValueError(
                "Invalid value for `observed_metric` ({0}), must be one of {1}"
                .format(observed_metric, allowed_values)
            )

        self._observed_metric = observed_metric

    @property
    def queries(self):
        """Gets the queries of this TopQueries.

        The list of queries.

        :return: The queries of this TopQueries.
        :rtype: List[QueryStatistic]
        """
        return self._queries

    @queries.setter
    def queries(self, queries):
        """Sets the queries of this TopQueries.

        The list of queries.

        :param queries: The queries of this TopQueries.
        :type queries: List[QueryStatistic]
        """

        self._queries = queries
