# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class QueryMetric(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, display_name: str=None, name: str=None, unit: str=None, value: float=None):
        """QueryMetric - a model defined in OpenAPI

        :param display_name: The display_name of this QueryMetric.
        :param name: The name of this QueryMetric.
        :param unit: The unit of this QueryMetric.
        :param value: The value of this QueryMetric.
        """
        self.openapi_types = {
            'display_name': str,
            'name': str,
            'unit': str,
            'value': float
        }

        self.attribute_map = {
            'display_name': 'displayName',
            'name': 'name',
            'unit': 'unit',
            'value': 'value'
        }

        self._display_name = display_name
        self._name = name
        self._unit = unit
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'QueryMetric':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The QueryMetric of this QueryMetric.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def display_name(self):
        """Gets the display_name of this QueryMetric.

        The name of the metric for display in user interface

        :return: The display_name of this QueryMetric.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this QueryMetric.

        The name of the metric for display in user interface

        :param display_name: The display_name of this QueryMetric.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def name(self):
        """Gets the name of this QueryMetric.

        The name of the metric

        :return: The name of this QueryMetric.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this QueryMetric.

        The name of the metric

        :param name: The name of this QueryMetric.
        :type name: str
        """

        self._name = name

    @property
    def unit(self):
        """Gets the unit of this QueryMetric.

        The unit of measurement

        :return: The unit of this QueryMetric.
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this QueryMetric.

        The unit of measurement

        :param unit: The unit of this QueryMetric.
        :type unit: str
        """
        allowed_values = ["percentage", "KB", "microseconds"]  # noqa: E501
        if unit not in allowed_values:
            raise ValueError(
                "Invalid value for `unit` ({0}), must be one of {1}"
                .format(unit, allowed_values)
            )

        self._unit = unit

    @property
    def value(self):
        """Gets the value of this QueryMetric.

        The measured value

        :return: The value of this QueryMetric.
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this QueryMetric.

        The measured value

        :param value: The value of this QueryMetric.
        :type value: float
        """

        self._value = value
