# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.query_metric import QueryMetric
from openapi_server import util


class QueryInterval(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, execution_count: float=None, interval_start_time: datetime=None, metrics: List[QueryMetric]=None):
        """QueryInterval - a model defined in OpenAPI

        :param execution_count: The execution_count of this QueryInterval.
        :param interval_start_time: The interval_start_time of this QueryInterval.
        :param metrics: The metrics of this QueryInterval.
        """
        self.openapi_types = {
            'execution_count': float,
            'interval_start_time': datetime,
            'metrics': List[QueryMetric]
        }

        self.attribute_map = {
            'execution_count': 'executionCount',
            'interval_start_time': 'intervalStartTime',
            'metrics': 'metrics'
        }

        self._execution_count = execution_count
        self._interval_start_time = interval_start_time
        self._metrics = metrics

    @classmethod
    def from_dict(cls, dikt: dict) -> 'QueryInterval':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The QueryInterval of this QueryInterval.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def execution_count(self):
        """Gets the execution_count of this QueryInterval.

        The number of times the query was executed during this interval.

        :return: The execution_count of this QueryInterval.
        :rtype: float
        """
        return self._execution_count

    @execution_count.setter
    def execution_count(self, execution_count):
        """Sets the execution_count of this QueryInterval.

        The number of times the query was executed during this interval.

        :param execution_count: The execution_count of this QueryInterval.
        :type execution_count: float
        """

        self._execution_count = execution_count

    @property
    def interval_start_time(self):
        """Gets the interval_start_time of this QueryInterval.

        The start time of the measurement interval (ISO8601 format).

        :return: The interval_start_time of this QueryInterval.
        :rtype: datetime
        """
        return self._interval_start_time

    @interval_start_time.setter
    def interval_start_time(self, interval_start_time):
        """Sets the interval_start_time of this QueryInterval.

        The start time of the measurement interval (ISO8601 format).

        :param interval_start_time: The interval_start_time of this QueryInterval.
        :type interval_start_time: datetime
        """

        self._interval_start_time = interval_start_time

    @property
    def metrics(self):
        """Gets the metrics of this QueryInterval.

        The list of query metrics during this interval.

        :return: The metrics of this QueryInterval.
        :rtype: List[QueryMetric]
        """
        return self._metrics

    @metrics.setter
    def metrics(self, metrics):
        """Sets the metrics of this QueryInterval.

        The list of query metrics during this interval.

        :param metrics: The metrics of this QueryInterval.
        :type metrics: List[QueryMetric]
        """

        self._metrics = metrics
