/**
 * Azure SQL Database
 * Provides create, read, update and delete functionality for Azure SQL Database resources including servers, databases, elastic pools, recommendations, operations, and usage metrics.
 *
 * The version of the OpenAPI document: 2014-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import QueryStatistic from './QueryStatistic';

/**
 * The TopQueries model module.
 * @module model/TopQueries
 * @version 2014-04-01
 */
class TopQueries {
    /**
     * Constructs a new <code>TopQueries</code>.
     * A database query.
     * @alias module:model/TopQueries
     */
    constructor() { 
        
        TopQueries.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TopQueries</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TopQueries} obj Optional instance to populate.
     * @return {module:model/TopQueries} The populated <code>TopQueries</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TopQueries();

            if (data.hasOwnProperty('aggregationFunction')) {
                obj['aggregationFunction'] = ApiClient.convertToType(data['aggregationFunction'], 'String');
            }
            if (data.hasOwnProperty('executionType')) {
                obj['executionType'] = ApiClient.convertToType(data['executionType'], 'String');
            }
            if (data.hasOwnProperty('intervalType')) {
                obj['intervalType'] = ApiClient.convertToType(data['intervalType'], 'String');
            }
            if (data.hasOwnProperty('numberOfTopQueries')) {
                obj['numberOfTopQueries'] = ApiClient.convertToType(data['numberOfTopQueries'], 'Number');
            }
            if (data.hasOwnProperty('observationEndTime')) {
                obj['observationEndTime'] = ApiClient.convertToType(data['observationEndTime'], 'Date');
            }
            if (data.hasOwnProperty('observationStartTime')) {
                obj['observationStartTime'] = ApiClient.convertToType(data['observationStartTime'], 'Date');
            }
            if (data.hasOwnProperty('observedMetric')) {
                obj['observedMetric'] = ApiClient.convertToType(data['observedMetric'], 'String');
            }
            if (data.hasOwnProperty('queries')) {
                obj['queries'] = ApiClient.convertToType(data['queries'], [QueryStatistic]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TopQueries</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TopQueries</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['aggregationFunction'] && !(typeof data['aggregationFunction'] === 'string' || data['aggregationFunction'] instanceof String)) {
            throw new Error("Expected the field `aggregationFunction` to be a primitive type in the JSON string but got " + data['aggregationFunction']);
        }
        // ensure the json data is a string
        if (data['executionType'] && !(typeof data['executionType'] === 'string' || data['executionType'] instanceof String)) {
            throw new Error("Expected the field `executionType` to be a primitive type in the JSON string but got " + data['executionType']);
        }
        // ensure the json data is a string
        if (data['intervalType'] && !(typeof data['intervalType'] === 'string' || data['intervalType'] instanceof String)) {
            throw new Error("Expected the field `intervalType` to be a primitive type in the JSON string but got " + data['intervalType']);
        }
        // ensure the json data is a string
        if (data['observedMetric'] && !(typeof data['observedMetric'] === 'string' || data['observedMetric'] instanceof String)) {
            throw new Error("Expected the field `observedMetric` to be a primitive type in the JSON string but got " + data['observedMetric']);
        }
        if (data['queries']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['queries'])) {
                throw new Error("Expected the field `queries` to be an array in the JSON data but got " + data['queries']);
            }
            // validate the optional field `queries` (array)
            for (const item of data['queries']) {
                QueryStatistic.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The function that is used to aggregate each query's metrics.
 * @member {module:model/TopQueries.AggregationFunctionEnum} aggregationFunction
 */
TopQueries.prototype['aggregationFunction'] = undefined;

/**
 * The execution type that is used to filter the query instances that are returned.
 * @member {module:model/TopQueries.ExecutionTypeEnum} executionType
 */
TopQueries.prototype['executionType'] = undefined;

/**
 * The duration of the interval (ISO8601 duration format).
 * @member {String} intervalType
 */
TopQueries.prototype['intervalType'] = undefined;

/**
 * The number of requested queries.
 * @member {Number} numberOfTopQueries
 */
TopQueries.prototype['numberOfTopQueries'] = undefined;

/**
 * The end time for queries that are returned (ISO8601 format)
 * @member {Date} observationEndTime
 */
TopQueries.prototype['observationEndTime'] = undefined;

/**
 * The start time for queries that are returned (ISO8601 format)
 * @member {Date} observationStartTime
 */
TopQueries.prototype['observationStartTime'] = undefined;

/**
 * The type of metric to use for ordering the top metrics.
 * @member {module:model/TopQueries.ObservedMetricEnum} observedMetric
 */
TopQueries.prototype['observedMetric'] = undefined;

/**
 * The list of queries.
 * @member {Array.<module:model/QueryStatistic>} queries
 */
TopQueries.prototype['queries'] = undefined;





/**
 * Allowed values for the <code>aggregationFunction</code> property.
 * @enum {String}
 * @readonly
 */
TopQueries['AggregationFunctionEnum'] = {

    /**
     * value: "min"
     * @const
     */
    "min": "min",

    /**
     * value: "max"
     * @const
     */
    "max": "max",

    /**
     * value: "avg"
     * @const
     */
    "avg": "avg",

    /**
     * value: "sum"
     * @const
     */
    "sum": "sum"
};


/**
 * Allowed values for the <code>executionType</code> property.
 * @enum {String}
 * @readonly
 */
TopQueries['ExecutionTypeEnum'] = {

    /**
     * value: "any"
     * @const
     */
    "any": "any",

    /**
     * value: "regular"
     * @const
     */
    "regular": "regular",

    /**
     * value: "irregular"
     * @const
     */
    "irregular": "irregular",

    /**
     * value: "aborted"
     * @const
     */
    "aborted": "aborted",

    /**
     * value: "exception"
     * @const
     */
    "exception": "exception"
};


/**
 * Allowed values for the <code>observedMetric</code> property.
 * @enum {String}
 * @readonly
 */
TopQueries['ObservedMetricEnum'] = {

    /**
     * value: "cpu"
     * @const
     */
    "cpu": "cpu",

    /**
     * value: "io"
     * @const
     */
    "io": "io",

    /**
     * value: "logio"
     * @const
     */
    "logio": "logio",

    /**
     * value: "duration"
     * @const
     */
    "duration": "duration",

    /**
     * value: "executionCount"
     * @const
     */
    "executionCount": "executionCount"
};



export default TopQueries;

