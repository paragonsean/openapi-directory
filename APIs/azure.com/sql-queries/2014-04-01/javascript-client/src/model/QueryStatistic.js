/**
 * Azure SQL Database
 * Provides create, read, update and delete functionality for Azure SQL Database resources including servers, databases, elastic pools, recommendations, operations, and usage metrics.
 *
 * The version of the OpenAPI document: 2014-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import QueryInterval from './QueryInterval';

/**
 * The QueryStatistic model module.
 * @module model/QueryStatistic
 * @version 2014-04-01
 */
class QueryStatistic {
    /**
     * Constructs a new <code>QueryStatistic</code>.
     * A database query.
     * @alias module:model/QueryStatistic
     */
    constructor() { 
        
        QueryStatistic.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>QueryStatistic</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/QueryStatistic} obj Optional instance to populate.
     * @return {module:model/QueryStatistic} The populated <code>QueryStatistic</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new QueryStatistic();

            if (data.hasOwnProperty('intervals')) {
                obj['intervals'] = ApiClient.convertToType(data['intervals'], [QueryInterval]);
            }
            if (data.hasOwnProperty('queryId')) {
                obj['queryId'] = ApiClient.convertToType(data['queryId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>QueryStatistic</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>QueryStatistic</code>.
     */
    static validateJSON(data) {
        if (data['intervals']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['intervals'])) {
                throw new Error("Expected the field `intervals` to be an array in the JSON data but got " + data['intervals']);
            }
            // validate the optional field `intervals` (array)
            for (const item of data['intervals']) {
                QueryInterval.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['queryId'] && !(typeof data['queryId'] === 'string' || data['queryId'] instanceof String)) {
            throw new Error("Expected the field `queryId` to be a primitive type in the JSON string but got " + data['queryId']);
        }

        return true;
    }


}



/**
 * The list of query intervals.
 * @member {Array.<module:model/QueryInterval>} intervals
 */
QueryStatistic.prototype['intervals'] = undefined;

/**
 * The id of the query
 * @member {String} queryId
 */
QueryStatistic.prototype['queryId'] = undefined;






export default QueryStatistic;

