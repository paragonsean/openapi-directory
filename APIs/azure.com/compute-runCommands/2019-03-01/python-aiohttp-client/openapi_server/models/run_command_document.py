# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.run_command_parameter_definition import RunCommandParameterDefinition
from openapi_server import util


class RunCommandDocument(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, parameters: List[RunCommandParameterDefinition]=None, script: List[str]=None, _schema: str=None, description: str=None, id: str=None, label: str=None, os_type: str=None):
        """RunCommandDocument - a model defined in OpenAPI

        :param parameters: The parameters of this RunCommandDocument.
        :param script: The script of this RunCommandDocument.
        :param _schema: The _schema of this RunCommandDocument.
        :param description: The description of this RunCommandDocument.
        :param id: The id of this RunCommandDocument.
        :param label: The label of this RunCommandDocument.
        :param os_type: The os_type of this RunCommandDocument.
        """
        self.openapi_types = {
            'parameters': List[RunCommandParameterDefinition],
            'script': List[str],
            '_schema': str,
            'description': str,
            'id': str,
            'label': str,
            'os_type': str
        }

        self.attribute_map = {
            'parameters': 'parameters',
            'script': 'script',
            '_schema': '$schema',
            'description': 'description',
            'id': 'id',
            'label': 'label',
            'os_type': 'osType'
        }

        self._parameters = parameters
        self._script = script
        self.__schema = _schema
        self._description = description
        self._id = id
        self._label = label
        self._os_type = os_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RunCommandDocument':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RunCommandDocument of this RunCommandDocument.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def parameters(self):
        """Gets the parameters of this RunCommandDocument.

        The parameters used by the script.

        :return: The parameters of this RunCommandDocument.
        :rtype: List[RunCommandParameterDefinition]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this RunCommandDocument.

        The parameters used by the script.

        :param parameters: The parameters of this RunCommandDocument.
        :type parameters: List[RunCommandParameterDefinition]
        """

        self._parameters = parameters

    @property
    def script(self):
        """Gets the script of this RunCommandDocument.

        The script to be executed.

        :return: The script of this RunCommandDocument.
        :rtype: List[str]
        """
        return self._script

    @script.setter
    def script(self, script):
        """Sets the script of this RunCommandDocument.

        The script to be executed.

        :param script: The script of this RunCommandDocument.
        :type script: List[str]
        """
        if script is None:
            raise ValueError("Invalid value for `script`, must not be `None`")

        self._script = script

    @property
    def _schema(self):
        """Gets the _schema of this RunCommandDocument.

        The VM run command schema.

        :return: The _schema of this RunCommandDocument.
        :rtype: str
        """
        return self.__schema

    @_schema.setter
    def _schema(self, _schema):
        """Sets the _schema of this RunCommandDocument.

        The VM run command schema.

        :param _schema: The _schema of this RunCommandDocument.
        :type _schema: str
        """
        if _schema is None:
            raise ValueError("Invalid value for `_schema`, must not be `None`")

        self.__schema = _schema

    @property
    def description(self):
        """Gets the description of this RunCommandDocument.

        The VM run command description.

        :return: The description of this RunCommandDocument.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this RunCommandDocument.

        The VM run command description.

        :param description: The description of this RunCommandDocument.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def id(self):
        """Gets the id of this RunCommandDocument.

        The VM run command id.

        :return: The id of this RunCommandDocument.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RunCommandDocument.

        The VM run command id.

        :param id: The id of this RunCommandDocument.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def label(self):
        """Gets the label of this RunCommandDocument.

        The VM run command label.

        :return: The label of this RunCommandDocument.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this RunCommandDocument.

        The VM run command label.

        :param label: The label of this RunCommandDocument.
        :type label: str
        """
        if label is None:
            raise ValueError("Invalid value for `label`, must not be `None`")

        self._label = label

    @property
    def os_type(self):
        """Gets the os_type of this RunCommandDocument.

        The Operating System type.

        :return: The os_type of this RunCommandDocument.
        :rtype: str
        """
        return self._os_type

    @os_type.setter
    def os_type(self, os_type):
        """Sets the os_type of this RunCommandDocument.

        The Operating System type.

        :param os_type: The os_type of this RunCommandDocument.
        :type os_type: str
        """
        allowed_values = ["Windows", "Linux"]  # noqa: E501
        if os_type not in allowed_values:
            raise ValueError(
                "Invalid value for `os_type` ({0}), must be one of {1}"
                .format(os_type, allowed_values)
            )

        self._os_type = os_type
