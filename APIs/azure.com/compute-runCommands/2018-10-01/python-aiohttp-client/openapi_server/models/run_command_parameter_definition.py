# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RunCommandParameterDefinition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, default_value: str=None, name: str=None, required: bool=False, type: str=None):
        """RunCommandParameterDefinition - a model defined in OpenAPI

        :param default_value: The default_value of this RunCommandParameterDefinition.
        :param name: The name of this RunCommandParameterDefinition.
        :param required: The required of this RunCommandParameterDefinition.
        :param type: The type of this RunCommandParameterDefinition.
        """
        self.openapi_types = {
            'default_value': str,
            'name': str,
            'required': bool,
            'type': str
        }

        self.attribute_map = {
            'default_value': 'defaultValue',
            'name': 'name',
            'required': 'required',
            'type': 'type'
        }

        self._default_value = default_value
        self._name = name
        self._required = required
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RunCommandParameterDefinition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RunCommandParameterDefinition of this RunCommandParameterDefinition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def default_value(self):
        """Gets the default_value of this RunCommandParameterDefinition.

        The run command parameter default value.

        :return: The default_value of this RunCommandParameterDefinition.
        :rtype: str
        """
        return self._default_value

    @default_value.setter
    def default_value(self, default_value):
        """Sets the default_value of this RunCommandParameterDefinition.

        The run command parameter default value.

        :param default_value: The default_value of this RunCommandParameterDefinition.
        :type default_value: str
        """

        self._default_value = default_value

    @property
    def name(self):
        """Gets the name of this RunCommandParameterDefinition.

        The run command parameter name.

        :return: The name of this RunCommandParameterDefinition.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RunCommandParameterDefinition.

        The run command parameter name.

        :param name: The name of this RunCommandParameterDefinition.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def required(self):
        """Gets the required of this RunCommandParameterDefinition.

        The run command parameter required.

        :return: The required of this RunCommandParameterDefinition.
        :rtype: bool
        """
        return self._required

    @required.setter
    def required(self, required):
        """Sets the required of this RunCommandParameterDefinition.

        The run command parameter required.

        :param required: The required of this RunCommandParameterDefinition.
        :type required: bool
        """

        self._required = required

    @property
    def type(self):
        """Gets the type of this RunCommandParameterDefinition.

        The run command parameter type.

        :return: The type of this RunCommandParameterDefinition.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this RunCommandParameterDefinition.

        The run command parameter type.

        :param type: The type of this RunCommandParameterDefinition.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
