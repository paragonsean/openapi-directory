# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.run_command_input_parameter import RunCommandInputParameter
from openapi_server import util


class RunCommandInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, command_id: str=None, parameters: List[RunCommandInputParameter]=None, script: List[str]=None):
        """RunCommandInput - a model defined in OpenAPI

        :param command_id: The command_id of this RunCommandInput.
        :param parameters: The parameters of this RunCommandInput.
        :param script: The script of this RunCommandInput.
        """
        self.openapi_types = {
            'command_id': str,
            'parameters': List[RunCommandInputParameter],
            'script': List[str]
        }

        self.attribute_map = {
            'command_id': 'commandId',
            'parameters': 'parameters',
            'script': 'script'
        }

        self._command_id = command_id
        self._parameters = parameters
        self._script = script

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RunCommandInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RunCommandInput of this RunCommandInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def command_id(self):
        """Gets the command_id of this RunCommandInput.

        The run command id.

        :return: The command_id of this RunCommandInput.
        :rtype: str
        """
        return self._command_id

    @command_id.setter
    def command_id(self, command_id):
        """Sets the command_id of this RunCommandInput.

        The run command id.

        :param command_id: The command_id of this RunCommandInput.
        :type command_id: str
        """
        if command_id is None:
            raise ValueError("Invalid value for `command_id`, must not be `None`")

        self._command_id = command_id

    @property
    def parameters(self):
        """Gets the parameters of this RunCommandInput.

        The run command parameters.

        :return: The parameters of this RunCommandInput.
        :rtype: List[RunCommandInputParameter]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this RunCommandInput.

        The run command parameters.

        :param parameters: The parameters of this RunCommandInput.
        :type parameters: List[RunCommandInputParameter]
        """

        self._parameters = parameters

    @property
    def script(self):
        """Gets the script of this RunCommandInput.

        Optional. The script to be executed.  When this value is given, the given script will override the default script of the command.

        :return: The script of this RunCommandInput.
        :rtype: List[str]
        """
        return self._script

    @script.setter
    def script(self, script):
        """Sets the script of this RunCommandInput.

        Optional. The script to be executed.  When this value is given, the given script will override the default script of the command.

        :param script: The script of this RunCommandInput.
        :type script: List[str]
        """

        self._script = script
