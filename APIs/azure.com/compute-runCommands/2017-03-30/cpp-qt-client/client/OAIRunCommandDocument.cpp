/**
 * RunCommandsClient
 * The Run Commands Client.
 *
 * The version of the OpenAPI document: 2017-03-30
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRunCommandDocument.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRunCommandDocument::OAIRunCommandDocument(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRunCommandDocument::OAIRunCommandDocument() {
    this->initializeModel();
}

OAIRunCommandDocument::~OAIRunCommandDocument() {}

void OAIRunCommandDocument::initializeModel() {

    m_parameters_isSet = false;
    m_parameters_isValid = false;

    m_script_isSet = false;
    m_script_isValid = false;

    m_schema_isSet = false;
    m_schema_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_label_isSet = false;
    m_label_isValid = false;

    m_os_type_isSet = false;
    m_os_type_isValid = false;
}

void OAIRunCommandDocument::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRunCommandDocument::fromJsonObject(QJsonObject json) {

    m_parameters_isValid = ::OpenAPI::fromJsonValue(m_parameters, json[QString("parameters")]);
    m_parameters_isSet = !json[QString("parameters")].isNull() && m_parameters_isValid;

    m_script_isValid = ::OpenAPI::fromJsonValue(m_script, json[QString("script")]);
    m_script_isSet = !json[QString("script")].isNull() && m_script_isValid;

    m_schema_isValid = ::OpenAPI::fromJsonValue(m_schema, json[QString("$schema")]);
    m_schema_isSet = !json[QString("$schema")].isNull() && m_schema_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_label_isValid = ::OpenAPI::fromJsonValue(m_label, json[QString("label")]);
    m_label_isSet = !json[QString("label")].isNull() && m_label_isValid;

    m_os_type_isValid = ::OpenAPI::fromJsonValue(m_os_type, json[QString("osType")]);
    m_os_type_isSet = !json[QString("osType")].isNull() && m_os_type_isValid;
}

QString OAIRunCommandDocument::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRunCommandDocument::asJsonObject() const {
    QJsonObject obj;
    if (m_parameters.size() > 0) {
        obj.insert(QString("parameters"), ::OpenAPI::toJsonValue(m_parameters));
    }
    if (m_script.size() > 0) {
        obj.insert(QString("script"), ::OpenAPI::toJsonValue(m_script));
    }
    if (m_schema_isSet) {
        obj.insert(QString("$schema"), ::OpenAPI::toJsonValue(m_schema));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_label_isSet) {
        obj.insert(QString("label"), ::OpenAPI::toJsonValue(m_label));
    }
    if (m_os_type_isSet) {
        obj.insert(QString("osType"), ::OpenAPI::toJsonValue(m_os_type));
    }
    return obj;
}

QList<OAIRunCommandParameterDefinition> OAIRunCommandDocument::getParameters() const {
    return m_parameters;
}
void OAIRunCommandDocument::setParameters(const QList<OAIRunCommandParameterDefinition> &parameters) {
    m_parameters = parameters;
    m_parameters_isSet = true;
}

bool OAIRunCommandDocument::is_parameters_Set() const{
    return m_parameters_isSet;
}

bool OAIRunCommandDocument::is_parameters_Valid() const{
    return m_parameters_isValid;
}

QList<QString> OAIRunCommandDocument::getScript() const {
    return m_script;
}
void OAIRunCommandDocument::setScript(const QList<QString> &script) {
    m_script = script;
    m_script_isSet = true;
}

bool OAIRunCommandDocument::is_script_Set() const{
    return m_script_isSet;
}

bool OAIRunCommandDocument::is_script_Valid() const{
    return m_script_isValid;
}

QString OAIRunCommandDocument::getSchema() const {
    return m_schema;
}
void OAIRunCommandDocument::setSchema(const QString &schema) {
    m_schema = schema;
    m_schema_isSet = true;
}

bool OAIRunCommandDocument::is_schema_Set() const{
    return m_schema_isSet;
}

bool OAIRunCommandDocument::is_schema_Valid() const{
    return m_schema_isValid;
}

QString OAIRunCommandDocument::getDescription() const {
    return m_description;
}
void OAIRunCommandDocument::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIRunCommandDocument::is_description_Set() const{
    return m_description_isSet;
}

bool OAIRunCommandDocument::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIRunCommandDocument::getId() const {
    return m_id;
}
void OAIRunCommandDocument::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIRunCommandDocument::is_id_Set() const{
    return m_id_isSet;
}

bool OAIRunCommandDocument::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIRunCommandDocument::getLabel() const {
    return m_label;
}
void OAIRunCommandDocument::setLabel(const QString &label) {
    m_label = label;
    m_label_isSet = true;
}

bool OAIRunCommandDocument::is_label_Set() const{
    return m_label_isSet;
}

bool OAIRunCommandDocument::is_label_Valid() const{
    return m_label_isValid;
}

QString OAIRunCommandDocument::getOsType() const {
    return m_os_type;
}
void OAIRunCommandDocument::setOsType(const QString &os_type) {
    m_os_type = os_type;
    m_os_type_isSet = true;
}

bool OAIRunCommandDocument::is_os_type_Set() const{
    return m_os_type_isSet;
}

bool OAIRunCommandDocument::is_os_type_Valid() const{
    return m_os_type_isValid;
}

bool OAIRunCommandDocument::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_parameters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_script.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRunCommandDocument::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_script_isValid && m_schema_isValid && m_description_isValid && m_id_isValid && m_label_isValid && m_os_type_isValid && true;
}

} // namespace OpenAPI
