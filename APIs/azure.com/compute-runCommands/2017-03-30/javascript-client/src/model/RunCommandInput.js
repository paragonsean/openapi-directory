/**
 * RunCommandsClient
 * The Run Commands Client.
 *
 * The version of the OpenAPI document: 2017-03-30
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import RunCommandInputParameter from './RunCommandInputParameter';

/**
 * The RunCommandInput model module.
 * @module model/RunCommandInput
 * @version 2017-03-30
 */
class RunCommandInput {
    /**
     * Constructs a new <code>RunCommandInput</code>.
     * Capture Virtual Machine parameters.
     * @alias module:model/RunCommandInput
     * @param commandId {String} The run command id.
     */
    constructor(commandId) { 
        
        RunCommandInput.initialize(this, commandId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, commandId) { 
        obj['commandId'] = commandId;
    }

    /**
     * Constructs a <code>RunCommandInput</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RunCommandInput} obj Optional instance to populate.
     * @return {module:model/RunCommandInput} The populated <code>RunCommandInput</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RunCommandInput();

            if (data.hasOwnProperty('commandId')) {
                obj['commandId'] = ApiClient.convertToType(data['commandId'], 'String');
            }
            if (data.hasOwnProperty('parameters')) {
                obj['parameters'] = ApiClient.convertToType(data['parameters'], [RunCommandInputParameter]);
            }
            if (data.hasOwnProperty('script')) {
                obj['script'] = ApiClient.convertToType(data['script'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RunCommandInput</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RunCommandInput</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of RunCommandInput.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['commandId'] && !(typeof data['commandId'] === 'string' || data['commandId'] instanceof String)) {
            throw new Error("Expected the field `commandId` to be a primitive type in the JSON string but got " + data['commandId']);
        }
        if (data['parameters']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['parameters'])) {
                throw new Error("Expected the field `parameters` to be an array in the JSON data but got " + data['parameters']);
            }
            // validate the optional field `parameters` (array)
            for (const item of data['parameters']) {
                RunCommandInputParameter.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['script'])) {
            throw new Error("Expected the field `script` to be an array in the JSON data but got " + data['script']);
        }

        return true;
    }


}

RunCommandInput.RequiredProperties = ["commandId"];

/**
 * The run command id.
 * @member {String} commandId
 */
RunCommandInput.prototype['commandId'] = undefined;

/**
 * The run command parameters.
 * @member {Array.<module:model/RunCommandInputParameter>} parameters
 */
RunCommandInput.prototype['parameters'] = undefined;

/**
 * Optional. The script to be executed.  When this value is given, the given script will override the default script of the command.
 * @member {Array.<String>} script
 */
RunCommandInput.prototype['script'] = undefined;






export default RunCommandInput;

