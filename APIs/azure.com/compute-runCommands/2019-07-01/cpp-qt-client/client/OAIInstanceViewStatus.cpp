/**
 * RunCommandsClient
 * The Run Commands Client.
 *
 * The version of the OpenAPI document: 2019-07-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInstanceViewStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInstanceViewStatus::OAIInstanceViewStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInstanceViewStatus::OAIInstanceViewStatus() {
    this->initializeModel();
}

OAIInstanceViewStatus::~OAIInstanceViewStatus() {}

void OAIInstanceViewStatus::initializeModel() {

    m_code_isSet = false;
    m_code_isValid = false;

    m_display_status_isSet = false;
    m_display_status_isValid = false;

    m_level_isSet = false;
    m_level_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_time_isSet = false;
    m_time_isValid = false;
}

void OAIInstanceViewStatus::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInstanceViewStatus::fromJsonObject(QJsonObject json) {

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_display_status_isValid = ::OpenAPI::fromJsonValue(m_display_status, json[QString("displayStatus")]);
    m_display_status_isSet = !json[QString("displayStatus")].isNull() && m_display_status_isValid;

    m_level_isValid = ::OpenAPI::fromJsonValue(m_level, json[QString("level")]);
    m_level_isSet = !json[QString("level")].isNull() && m_level_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_time_isValid = ::OpenAPI::fromJsonValue(m_time, json[QString("time")]);
    m_time_isSet = !json[QString("time")].isNull() && m_time_isValid;
}

QString OAIInstanceViewStatus::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInstanceViewStatus::asJsonObject() const {
    QJsonObject obj;
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_display_status_isSet) {
        obj.insert(QString("displayStatus"), ::OpenAPI::toJsonValue(m_display_status));
    }
    if (m_level_isSet) {
        obj.insert(QString("level"), ::OpenAPI::toJsonValue(m_level));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_time_isSet) {
        obj.insert(QString("time"), ::OpenAPI::toJsonValue(m_time));
    }
    return obj;
}

QString OAIInstanceViewStatus::getCode() const {
    return m_code;
}
void OAIInstanceViewStatus::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIInstanceViewStatus::is_code_Set() const{
    return m_code_isSet;
}

bool OAIInstanceViewStatus::is_code_Valid() const{
    return m_code_isValid;
}

QString OAIInstanceViewStatus::getDisplayStatus() const {
    return m_display_status;
}
void OAIInstanceViewStatus::setDisplayStatus(const QString &display_status) {
    m_display_status = display_status;
    m_display_status_isSet = true;
}

bool OAIInstanceViewStatus::is_display_status_Set() const{
    return m_display_status_isSet;
}

bool OAIInstanceViewStatus::is_display_status_Valid() const{
    return m_display_status_isValid;
}

QString OAIInstanceViewStatus::getLevel() const {
    return m_level;
}
void OAIInstanceViewStatus::setLevel(const QString &level) {
    m_level = level;
    m_level_isSet = true;
}

bool OAIInstanceViewStatus::is_level_Set() const{
    return m_level_isSet;
}

bool OAIInstanceViewStatus::is_level_Valid() const{
    return m_level_isValid;
}

QString OAIInstanceViewStatus::getMessage() const {
    return m_message;
}
void OAIInstanceViewStatus::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIInstanceViewStatus::is_message_Set() const{
    return m_message_isSet;
}

bool OAIInstanceViewStatus::is_message_Valid() const{
    return m_message_isValid;
}

QDateTime OAIInstanceViewStatus::getTime() const {
    return m_time;
}
void OAIInstanceViewStatus::setTime(const QDateTime &time) {
    m_time = time;
    m_time_isSet = true;
}

bool OAIInstanceViewStatus::is_time_Set() const{
    return m_time_isSet;
}

bool OAIInstanceViewStatus::is_time_Valid() const{
    return m_time_isValid;
}

bool OAIInstanceViewStatus::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInstanceViewStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
