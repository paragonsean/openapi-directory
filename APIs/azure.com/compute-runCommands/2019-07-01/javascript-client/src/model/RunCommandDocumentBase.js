/**
 * RunCommandsClient
 * The Run Commands Client.
 *
 * The version of the OpenAPI document: 2019-07-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The RunCommandDocumentBase model module.
 * @module model/RunCommandDocumentBase
 * @version 2019-07-01
 */
class RunCommandDocumentBase {
    /**
     * Constructs a new <code>RunCommandDocumentBase</code>.
     * Describes the properties of a Run Command metadata.
     * @alias module:model/RunCommandDocumentBase
     * @param schema {String} The VM run command schema.
     * @param description {String} The VM run command description.
     * @param id {String} The VM run command id.
     * @param label {String} The VM run command label.
     * @param osType {module:model/RunCommandDocumentBase.OsTypeEnum} The Operating System type.
     */
    constructor(schema, description, id, label, osType) { 
        
        RunCommandDocumentBase.initialize(this, schema, description, id, label, osType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, schema, description, id, label, osType) { 
        obj['$schema'] = schema;
        obj['description'] = description;
        obj['id'] = id;
        obj['label'] = label;
        obj['osType'] = osType;
    }

    /**
     * Constructs a <code>RunCommandDocumentBase</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RunCommandDocumentBase} obj Optional instance to populate.
     * @return {module:model/RunCommandDocumentBase} The populated <code>RunCommandDocumentBase</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RunCommandDocumentBase();

            if (data.hasOwnProperty('$schema')) {
                obj['$schema'] = ApiClient.convertToType(data['$schema'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('label')) {
                obj['label'] = ApiClient.convertToType(data['label'], 'String');
            }
            if (data.hasOwnProperty('osType')) {
                obj['osType'] = ApiClient.convertToType(data['osType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RunCommandDocumentBase</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RunCommandDocumentBase</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of RunCommandDocumentBase.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['$schema'] && !(typeof data['$schema'] === 'string' || data['$schema'] instanceof String)) {
            throw new Error("Expected the field `$schema` to be a primitive type in the JSON string but got " + data['$schema']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['label'] && !(typeof data['label'] === 'string' || data['label'] instanceof String)) {
            throw new Error("Expected the field `label` to be a primitive type in the JSON string but got " + data['label']);
        }
        // ensure the json data is a string
        if (data['osType'] && !(typeof data['osType'] === 'string' || data['osType'] instanceof String)) {
            throw new Error("Expected the field `osType` to be a primitive type in the JSON string but got " + data['osType']);
        }

        return true;
    }


}

RunCommandDocumentBase.RequiredProperties = ["$schema", "description", "id", "label", "osType"];

/**
 * The VM run command schema.
 * @member {String} $schema
 */
RunCommandDocumentBase.prototype['$schema'] = undefined;

/**
 * The VM run command description.
 * @member {String} description
 */
RunCommandDocumentBase.prototype['description'] = undefined;

/**
 * The VM run command id.
 * @member {String} id
 */
RunCommandDocumentBase.prototype['id'] = undefined;

/**
 * The VM run command label.
 * @member {String} label
 */
RunCommandDocumentBase.prototype['label'] = undefined;

/**
 * The Operating System type.
 * @member {module:model/RunCommandDocumentBase.OsTypeEnum} osType
 */
RunCommandDocumentBase.prototype['osType'] = undefined;





/**
 * Allowed values for the <code>osType</code> property.
 * @enum {String}
 * @readonly
 */
RunCommandDocumentBase['OsTypeEnum'] = {

    /**
     * value: "Windows"
     * @const
     */
    "Windows": "Windows",

    /**
     * value: "Linux"
     * @const
     */
    "Linux": "Linux"
};



export default RunCommandDocumentBase;

