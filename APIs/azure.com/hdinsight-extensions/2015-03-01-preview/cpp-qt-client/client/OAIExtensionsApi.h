/**
 * HDInsightManagementClient
 * The HDInsight Management Client.
 *
 * The version of the OpenAPI document: 2015-03-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIExtensionsApi_H
#define OAI_OAIExtensionsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIClusterMonitoringRequest.h"
#include "OAIClusterMonitoringResponse.h"
#include "OAIExtension.h"
#include "OAIExtension_GetMonitoringStatus_default_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIExtensionsApi : public QObject {
    Q_OBJECT

public:
    OAIExtensionsApi(const int timeOut = 0);
    ~OAIExtensionsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  cluster_name QString [required]
    * @param[in]  extension_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAIExtension [required]
    */
    virtual void extensionCreate(const QString &subscription_id, const QString &resource_group_name, const QString &cluster_name, const QString &extension_name, const QString &api_version, const OAIExtension &parameters);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  cluster_name QString [required]
    * @param[in]  extension_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void extensionDelete(const QString &subscription_id, const QString &resource_group_name, const QString &cluster_name, const QString &extension_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  cluster_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void extensionDisableMonitoring(const QString &subscription_id, const QString &resource_group_name, const QString &cluster_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  cluster_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAIClusterMonitoringRequest [required]
    */
    virtual void extensionEnableMonitoring(const QString &subscription_id, const QString &resource_group_name, const QString &cluster_name, const QString &api_version, const OAIClusterMonitoringRequest &parameters);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  cluster_name QString [required]
    * @param[in]  extension_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void extensionGet(const QString &subscription_id, const QString &resource_group_name, const QString &cluster_name, const QString &extension_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  cluster_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void extensionGetMonitoringStatus(const QString &subscription_id, const QString &resource_group_name, const QString &cluster_name, const QString &api_version);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void extensionCreateCallback(OAIHttpRequestWorker *worker);
    void extensionDeleteCallback(OAIHttpRequestWorker *worker);
    void extensionDisableMonitoringCallback(OAIHttpRequestWorker *worker);
    void extensionEnableMonitoringCallback(OAIHttpRequestWorker *worker);
    void extensionGetCallback(OAIHttpRequestWorker *worker);
    void extensionGetMonitoringStatusCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void extensionCreateSignal();
    void extensionDeleteSignal();
    void extensionDisableMonitoringSignal();
    void extensionEnableMonitoringSignal();
    void extensionGetSignal(OAIExtension summary);
    void extensionGetMonitoringStatusSignal(OAIClusterMonitoringResponse summary);


    void extensionCreateSignalFull(OAIHttpRequestWorker *worker);
    void extensionDeleteSignalFull(OAIHttpRequestWorker *worker);
    void extensionDisableMonitoringSignalFull(OAIHttpRequestWorker *worker);
    void extensionEnableMonitoringSignalFull(OAIHttpRequestWorker *worker);
    void extensionGetSignalFull(OAIHttpRequestWorker *worker, OAIExtension summary);
    void extensionGetMonitoringStatusSignalFull(OAIHttpRequestWorker *worker, OAIClusterMonitoringResponse summary);

    Q_DECL_DEPRECATED_X("Use extensionCreateSignalError() instead")
    void extensionCreateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void extensionCreateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use extensionDeleteSignalError() instead")
    void extensionDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void extensionDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use extensionDisableMonitoringSignalError() instead")
    void extensionDisableMonitoringSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void extensionDisableMonitoringSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use extensionEnableMonitoringSignalError() instead")
    void extensionEnableMonitoringSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void extensionEnableMonitoringSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use extensionGetSignalError() instead")
    void extensionGetSignalE(OAIExtension summary, QNetworkReply::NetworkError error_type, QString error_str);
    void extensionGetSignalError(OAIExtension summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use extensionGetMonitoringStatusSignalError() instead")
    void extensionGetMonitoringStatusSignalE(OAIClusterMonitoringResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void extensionGetMonitoringStatusSignalError(OAIClusterMonitoringResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use extensionCreateSignalErrorFull() instead")
    void extensionCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void extensionCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use extensionDeleteSignalErrorFull() instead")
    void extensionDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void extensionDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use extensionDisableMonitoringSignalErrorFull() instead")
    void extensionDisableMonitoringSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void extensionDisableMonitoringSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use extensionEnableMonitoringSignalErrorFull() instead")
    void extensionEnableMonitoringSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void extensionEnableMonitoringSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use extensionGetSignalErrorFull() instead")
    void extensionGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void extensionGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use extensionGetMonitoringStatusSignalErrorFull() instead")
    void extensionGetMonitoringStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void extensionGetMonitoringStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
