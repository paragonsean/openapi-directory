/**
 * WebApplicationFirewallManagement
 * APIs to manage web application firewall rules
 *
 * The version of the OpenAPI document: 2018-08-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITransform.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITransform::OAITransform(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITransform::OAITransform() {
    this->initializeModel();
}

OAITransform::~OAITransform() {}

void OAITransform::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAITransform::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAITransform::fromJson(QString jsonString) {
    
    if ( jsonString.compare("Lowercase", Qt::CaseInsensitive) == 0) {
        m_value = eOAITransform::LOWERCASE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Uppercase", Qt::CaseInsensitive) == 0) {
        m_value = eOAITransform::UPPERCASE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Trim", Qt::CaseInsensitive) == 0) {
        m_value = eOAITransform::TRIM;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UrlDecode", Qt::CaseInsensitive) == 0) {
        m_value = eOAITransform::URLDECODE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UrlEncode", Qt::CaseInsensitive) == 0) {
        m_value = eOAITransform::URLENCODE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RemoveNulls", Qt::CaseInsensitive) == 0) {
        m_value = eOAITransform::REMOVENULLS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("HtmlEntityDecode", Qt::CaseInsensitive) == 0) {
        m_value = eOAITransform::HTMLENTITYDECODE;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAITransform::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAITransform::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAITransform::LOWERCASE:
            val = "Lowercase";
            break;
        case eOAITransform::UPPERCASE:
            val = "Uppercase";
            break;
        case eOAITransform::TRIM:
            val = "Trim";
            break;
        case eOAITransform::URLDECODE:
            val = "UrlDecode";
            break;
        case eOAITransform::URLENCODE:
            val = "UrlEncode";
            break;
        case eOAITransform::REMOVENULLS:
            val = "RemoveNulls";
            break;
        case eOAITransform::HTMLENTITYDECODE:
            val = "HtmlEntityDecode";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAITransform::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAITransform::eOAITransform OAITransform::getValue() const {
    return m_value;
}

void OAITransform::setValue(const OAITransform::eOAITransform& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAITransform::isSet() const {
    
    return m_value_isSet;
}

bool OAITransform::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
