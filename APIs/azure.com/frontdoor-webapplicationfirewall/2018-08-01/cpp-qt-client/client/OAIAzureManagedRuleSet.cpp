/**
 * WebApplicationFirewallManagement
 * APIs to manage web application firewall rules
 *
 * The version of the OpenAPI document: 2018-08-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAzureManagedRuleSet.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAzureManagedRuleSet::OAIAzureManagedRuleSet(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAzureManagedRuleSet::OAIAzureManagedRuleSet() {
    this->initializeModel();
}

OAIAzureManagedRuleSet::~OAIAzureManagedRuleSet() {}

void OAIAzureManagedRuleSet::initializeModel() {

    m_rule_group_overrides_isSet = false;
    m_rule_group_overrides_isValid = false;

    m_priority_isSet = false;
    m_priority_isValid = false;

    m_rule_set_type_isSet = false;
    m_rule_set_type_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIAzureManagedRuleSet::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAzureManagedRuleSet::fromJsonObject(QJsonObject json) {

    m_rule_group_overrides_isValid = ::OpenAPI::fromJsonValue(m_rule_group_overrides, json[QString("ruleGroupOverrides")]);
    m_rule_group_overrides_isSet = !json[QString("ruleGroupOverrides")].isNull() && m_rule_group_overrides_isValid;

    m_priority_isValid = ::OpenAPI::fromJsonValue(m_priority, json[QString("priority")]);
    m_priority_isSet = !json[QString("priority")].isNull() && m_priority_isValid;

    m_rule_set_type_isValid = ::OpenAPI::fromJsonValue(m_rule_set_type, json[QString("ruleSetType")]);
    m_rule_set_type_isSet = !json[QString("ruleSetType")].isNull() && m_rule_set_type_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIAzureManagedRuleSet::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAzureManagedRuleSet::asJsonObject() const {
    QJsonObject obj;
    if (m_rule_group_overrides.size() > 0) {
        obj.insert(QString("ruleGroupOverrides"), ::OpenAPI::toJsonValue(m_rule_group_overrides));
    }
    if (m_priority_isSet) {
        obj.insert(QString("priority"), ::OpenAPI::toJsonValue(m_priority));
    }
    if (m_rule_set_type_isSet) {
        obj.insert(QString("ruleSetType"), ::OpenAPI::toJsonValue(m_rule_set_type));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QList<OAIAzureManagedOverrideRuleGroup> OAIAzureManagedRuleSet::getRuleGroupOverrides() const {
    return m_rule_group_overrides;
}
void OAIAzureManagedRuleSet::setRuleGroupOverrides(const QList<OAIAzureManagedOverrideRuleGroup> &rule_group_overrides) {
    m_rule_group_overrides = rule_group_overrides;
    m_rule_group_overrides_isSet = true;
}

bool OAIAzureManagedRuleSet::is_rule_group_overrides_Set() const{
    return m_rule_group_overrides_isSet;
}

bool OAIAzureManagedRuleSet::is_rule_group_overrides_Valid() const{
    return m_rule_group_overrides_isValid;
}

qint32 OAIAzureManagedRuleSet::getPriority() const {
    return m_priority;
}
void OAIAzureManagedRuleSet::setPriority(const qint32 &priority) {
    m_priority = priority;
    m_priority_isSet = true;
}

bool OAIAzureManagedRuleSet::is_priority_Set() const{
    return m_priority_isSet;
}

bool OAIAzureManagedRuleSet::is_priority_Valid() const{
    return m_priority_isValid;
}

QString OAIAzureManagedRuleSet::getRuleSetType() const {
    return m_rule_set_type;
}
void OAIAzureManagedRuleSet::setRuleSetType(const QString &rule_set_type) {
    m_rule_set_type = rule_set_type;
    m_rule_set_type_isSet = true;
}

bool OAIAzureManagedRuleSet::is_rule_set_type_Set() const{
    return m_rule_set_type_isSet;
}

bool OAIAzureManagedRuleSet::is_rule_set_type_Valid() const{
    return m_rule_set_type_isValid;
}

qint32 OAIAzureManagedRuleSet::getVersion() const {
    return m_version;
}
void OAIAzureManagedRuleSet::setVersion(const qint32 &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIAzureManagedRuleSet::is_version_Set() const{
    return m_version_isSet;
}

bool OAIAzureManagedRuleSet::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIAzureManagedRuleSet::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_rule_group_overrides.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_priority_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rule_set_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAzureManagedRuleSet::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_rule_set_type_isValid && true;
}

} // namespace OpenAPI
