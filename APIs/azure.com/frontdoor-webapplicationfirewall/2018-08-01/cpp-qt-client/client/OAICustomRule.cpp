/**
 * WebApplicationFirewallManagement
 * APIs to manage web application firewall rules
 *
 * The version of the OpenAPI document: 2018-08-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICustomRule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICustomRule::OAICustomRule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICustomRule::OAICustomRule() {
    this->initializeModel();
}

OAICustomRule::~OAICustomRule() {}

void OAICustomRule::initializeModel() {

    m_action_isSet = false;
    m_action_isValid = false;

    m_etag_isSet = false;
    m_etag_isValid = false;

    m_match_conditions_isSet = false;
    m_match_conditions_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_priority_isSet = false;
    m_priority_isValid = false;

    m_rate_limit_duration_in_minutes_isSet = false;
    m_rate_limit_duration_in_minutes_isValid = false;

    m_rate_limit_threshold_isSet = false;
    m_rate_limit_threshold_isValid = false;

    m_rule_type_isSet = false;
    m_rule_type_isValid = false;

    m_transforms_isSet = false;
    m_transforms_isValid = false;
}

void OAICustomRule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICustomRule::fromJsonObject(QJsonObject json) {

    m_action_isValid = ::OpenAPI::fromJsonValue(m_action, json[QString("action")]);
    m_action_isSet = !json[QString("action")].isNull() && m_action_isValid;

    m_etag_isValid = ::OpenAPI::fromJsonValue(m_etag, json[QString("etag")]);
    m_etag_isSet = !json[QString("etag")].isNull() && m_etag_isValid;

    m_match_conditions_isValid = ::OpenAPI::fromJsonValue(m_match_conditions, json[QString("matchConditions")]);
    m_match_conditions_isSet = !json[QString("matchConditions")].isNull() && m_match_conditions_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_priority_isValid = ::OpenAPI::fromJsonValue(m_priority, json[QString("priority")]);
    m_priority_isSet = !json[QString("priority")].isNull() && m_priority_isValid;

    m_rate_limit_duration_in_minutes_isValid = ::OpenAPI::fromJsonValue(m_rate_limit_duration_in_minutes, json[QString("rateLimitDurationInMinutes")]);
    m_rate_limit_duration_in_minutes_isSet = !json[QString("rateLimitDurationInMinutes")].isNull() && m_rate_limit_duration_in_minutes_isValid;

    m_rate_limit_threshold_isValid = ::OpenAPI::fromJsonValue(m_rate_limit_threshold, json[QString("rateLimitThreshold")]);
    m_rate_limit_threshold_isSet = !json[QString("rateLimitThreshold")].isNull() && m_rate_limit_threshold_isValid;

    m_rule_type_isValid = ::OpenAPI::fromJsonValue(m_rule_type, json[QString("ruleType")]);
    m_rule_type_isSet = !json[QString("ruleType")].isNull() && m_rule_type_isValid;

    m_transforms_isValid = ::OpenAPI::fromJsonValue(m_transforms, json[QString("transforms")]);
    m_transforms_isSet = !json[QString("transforms")].isNull() && m_transforms_isValid;
}

QString OAICustomRule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICustomRule::asJsonObject() const {
    QJsonObject obj;
    if (m_action_isSet) {
        obj.insert(QString("action"), ::OpenAPI::toJsonValue(m_action));
    }
    if (m_etag_isSet) {
        obj.insert(QString("etag"), ::OpenAPI::toJsonValue(m_etag));
    }
    if (m_match_conditions.size() > 0) {
        obj.insert(QString("matchConditions"), ::OpenAPI::toJsonValue(m_match_conditions));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_priority_isSet) {
        obj.insert(QString("priority"), ::OpenAPI::toJsonValue(m_priority));
    }
    if (m_rate_limit_duration_in_minutes_isSet) {
        obj.insert(QString("rateLimitDurationInMinutes"), ::OpenAPI::toJsonValue(m_rate_limit_duration_in_minutes));
    }
    if (m_rate_limit_threshold_isSet) {
        obj.insert(QString("rateLimitThreshold"), ::OpenAPI::toJsonValue(m_rate_limit_threshold));
    }
    if (m_rule_type_isSet) {
        obj.insert(QString("ruleType"), ::OpenAPI::toJsonValue(m_rule_type));
    }
    if (m_transforms.size() > 0) {
        obj.insert(QString("transforms"), ::OpenAPI::toJsonValue(m_transforms));
    }
    return obj;
}

QString OAICustomRule::getAction() const {
    return m_action;
}
void OAICustomRule::setAction(const QString &action) {
    m_action = action;
    m_action_isSet = true;
}

bool OAICustomRule::is_action_Set() const{
    return m_action_isSet;
}

bool OAICustomRule::is_action_Valid() const{
    return m_action_isValid;
}

QString OAICustomRule::getEtag() const {
    return m_etag;
}
void OAICustomRule::setEtag(const QString &etag) {
    m_etag = etag;
    m_etag_isSet = true;
}

bool OAICustomRule::is_etag_Set() const{
    return m_etag_isSet;
}

bool OAICustomRule::is_etag_Valid() const{
    return m_etag_isValid;
}

QList<OAIMatchCondition> OAICustomRule::getMatchConditions() const {
    return m_match_conditions;
}
void OAICustomRule::setMatchConditions(const QList<OAIMatchCondition> &match_conditions) {
    m_match_conditions = match_conditions;
    m_match_conditions_isSet = true;
}

bool OAICustomRule::is_match_conditions_Set() const{
    return m_match_conditions_isSet;
}

bool OAICustomRule::is_match_conditions_Valid() const{
    return m_match_conditions_isValid;
}

QString OAICustomRule::getName() const {
    return m_name;
}
void OAICustomRule::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICustomRule::is_name_Set() const{
    return m_name_isSet;
}

bool OAICustomRule::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAICustomRule::getPriority() const {
    return m_priority;
}
void OAICustomRule::setPriority(const qint32 &priority) {
    m_priority = priority;
    m_priority_isSet = true;
}

bool OAICustomRule::is_priority_Set() const{
    return m_priority_isSet;
}

bool OAICustomRule::is_priority_Valid() const{
    return m_priority_isValid;
}

qint32 OAICustomRule::getRateLimitDurationInMinutes() const {
    return m_rate_limit_duration_in_minutes;
}
void OAICustomRule::setRateLimitDurationInMinutes(const qint32 &rate_limit_duration_in_minutes) {
    m_rate_limit_duration_in_minutes = rate_limit_duration_in_minutes;
    m_rate_limit_duration_in_minutes_isSet = true;
}

bool OAICustomRule::is_rate_limit_duration_in_minutes_Set() const{
    return m_rate_limit_duration_in_minutes_isSet;
}

bool OAICustomRule::is_rate_limit_duration_in_minutes_Valid() const{
    return m_rate_limit_duration_in_minutes_isValid;
}

qint32 OAICustomRule::getRateLimitThreshold() const {
    return m_rate_limit_threshold;
}
void OAICustomRule::setRateLimitThreshold(const qint32 &rate_limit_threshold) {
    m_rate_limit_threshold = rate_limit_threshold;
    m_rate_limit_threshold_isSet = true;
}

bool OAICustomRule::is_rate_limit_threshold_Set() const{
    return m_rate_limit_threshold_isSet;
}

bool OAICustomRule::is_rate_limit_threshold_Valid() const{
    return m_rate_limit_threshold_isValid;
}

QString OAICustomRule::getRuleType() const {
    return m_rule_type;
}
void OAICustomRule::setRuleType(const QString &rule_type) {
    m_rule_type = rule_type;
    m_rule_type_isSet = true;
}

bool OAICustomRule::is_rule_type_Set() const{
    return m_rule_type_isSet;
}

bool OAICustomRule::is_rule_type_Valid() const{
    return m_rule_type_isValid;
}

QList<OAITransform> OAICustomRule::getTransforms() const {
    return m_transforms;
}
void OAICustomRule::setTransforms(const QList<OAITransform> &transforms) {
    m_transforms = transforms;
    m_transforms_isSet = true;
}

bool OAICustomRule::is_transforms_Set() const{
    return m_transforms_isSet;
}

bool OAICustomRule::is_transforms_Valid() const{
    return m_transforms_isValid;
}

bool OAICustomRule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_etag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_match_conditions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_priority_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rate_limit_duration_in_minutes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rate_limit_threshold_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rule_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transforms.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICustomRule::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_action_isValid && m_match_conditions_isValid && m_priority_isValid && m_rule_type_isValid && true;
}

} // namespace OpenAPI
