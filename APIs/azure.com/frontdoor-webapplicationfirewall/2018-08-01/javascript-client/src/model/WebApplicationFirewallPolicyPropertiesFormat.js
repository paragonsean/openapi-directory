/**
 * WebApplicationFirewallManagement
 * APIs to manage web application firewall rules
 *
 * The version of the OpenAPI document: 2018-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CustomRules from './CustomRules';
import ManagedRuleSets from './ManagedRuleSets';
import PolicySettings from './PolicySettings';

/**
 * The WebApplicationFirewallPolicyPropertiesFormat model module.
 * @module model/WebApplicationFirewallPolicyPropertiesFormat
 * @version 2018-08-01
 */
class WebApplicationFirewallPolicyPropertiesFormat {
    /**
     * Constructs a new <code>WebApplicationFirewallPolicyPropertiesFormat</code>.
     * Defines web application firewall policy properties
     * @alias module:model/WebApplicationFirewallPolicyPropertiesFormat
     */
    constructor() { 
        
        WebApplicationFirewallPolicyPropertiesFormat.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>WebApplicationFirewallPolicyPropertiesFormat</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WebApplicationFirewallPolicyPropertiesFormat} obj Optional instance to populate.
     * @return {module:model/WebApplicationFirewallPolicyPropertiesFormat} The populated <code>WebApplicationFirewallPolicyPropertiesFormat</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WebApplicationFirewallPolicyPropertiesFormat();

            if (data.hasOwnProperty('customRules')) {
                obj['customRules'] = CustomRules.constructFromObject(data['customRules']);
            }
            if (data.hasOwnProperty('managedRules')) {
                obj['managedRules'] = ManagedRuleSets.constructFromObject(data['managedRules']);
            }
            if (data.hasOwnProperty('policySettings')) {
                obj['policySettings'] = PolicySettings.constructFromObject(data['policySettings']);
            }
            if (data.hasOwnProperty('provisioningState')) {
                obj['provisioningState'] = ApiClient.convertToType(data['provisioningState'], 'String');
            }
            if (data.hasOwnProperty('resourceState')) {
                obj['resourceState'] = ApiClient.convertToType(data['resourceState'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WebApplicationFirewallPolicyPropertiesFormat</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WebApplicationFirewallPolicyPropertiesFormat</code>.
     */
    static validateJSON(data) {
        // validate the optional field `customRules`
        if (data['customRules']) { // data not null
          CustomRules.validateJSON(data['customRules']);
        }
        // validate the optional field `managedRules`
        if (data['managedRules']) { // data not null
          ManagedRuleSets.validateJSON(data['managedRules']);
        }
        // validate the optional field `policySettings`
        if (data['policySettings']) { // data not null
          PolicySettings.validateJSON(data['policySettings']);
        }
        // ensure the json data is a string
        if (data['provisioningState'] && !(typeof data['provisioningState'] === 'string' || data['provisioningState'] instanceof String)) {
            throw new Error("Expected the field `provisioningState` to be a primitive type in the JSON string but got " + data['provisioningState']);
        }
        // ensure the json data is a string
        if (data['resourceState'] && !(typeof data['resourceState'] === 'string' || data['resourceState'] instanceof String)) {
            throw new Error("Expected the field `resourceState` to be a primitive type in the JSON string but got " + data['resourceState']);
        }

        return true;
    }


}



/**
 * @member {module:model/CustomRules} customRules
 */
WebApplicationFirewallPolicyPropertiesFormat.prototype['customRules'] = undefined;

/**
 * @member {module:model/ManagedRuleSets} managedRules
 */
WebApplicationFirewallPolicyPropertiesFormat.prototype['managedRules'] = undefined;

/**
 * @member {module:model/PolicySettings} policySettings
 */
WebApplicationFirewallPolicyPropertiesFormat.prototype['policySettings'] = undefined;

/**
 * Provisioning state of the WebApplicationFirewallPolicy.
 * @member {String} provisioningState
 */
WebApplicationFirewallPolicyPropertiesFormat.prototype['provisioningState'] = undefined;

/**
 * @member {module:model/WebApplicationFirewallPolicyPropertiesFormat.ResourceStateEnum} resourceState
 */
WebApplicationFirewallPolicyPropertiesFormat.prototype['resourceState'] = undefined;





/**
 * Allowed values for the <code>resourceState</code> property.
 * @enum {String}
 * @readonly
 */
WebApplicationFirewallPolicyPropertiesFormat['ResourceStateEnum'] = {

    /**
     * value: "Creating"
     * @const
     */
    "Creating": "Creating",

    /**
     * value: "Enabling"
     * @const
     */
    "Enabling": "Enabling",

    /**
     * value: "Enabled"
     * @const
     */
    "Enabled": "Enabled",

    /**
     * value: "Disabling"
     * @const
     */
    "Disabling": "Disabling",

    /**
     * value: "Disabled"
     * @const
     */
    "Disabled": "Disabled",

    /**
     * value: "Deleting"
     * @const
     */
    "Deleting": "Deleting"
};



export default WebApplicationFirewallPolicyPropertiesFormat;

