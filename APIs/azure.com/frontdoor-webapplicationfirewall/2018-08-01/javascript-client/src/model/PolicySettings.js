/**
 * WebApplicationFirewallManagement
 * APIs to manage web application firewall rules
 *
 * The version of the OpenAPI document: 2018-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PolicySettings model module.
 * @module model/PolicySettings
 * @version 2018-08-01
 */
class PolicySettings {
    /**
     * Constructs a new <code>PolicySettings</code>.
     * Defines contents of a web application firewall global configuration
     * @alias module:model/PolicySettings
     */
    constructor() { 
        
        PolicySettings.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PolicySettings</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PolicySettings} obj Optional instance to populate.
     * @return {module:model/PolicySettings} The populated <code>PolicySettings</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PolicySettings();

            if (data.hasOwnProperty('enabledState')) {
                obj['enabledState'] = ApiClient.convertToType(data['enabledState'], 'String');
            }
            if (data.hasOwnProperty('mode')) {
                obj['mode'] = ApiClient.convertToType(data['mode'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PolicySettings</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PolicySettings</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['enabledState'] && !(typeof data['enabledState'] === 'string' || data['enabledState'] instanceof String)) {
            throw new Error("Expected the field `enabledState` to be a primitive type in the JSON string but got " + data['enabledState']);
        }
        // ensure the json data is a string
        if (data['mode'] && !(typeof data['mode'] === 'string' || data['mode'] instanceof String)) {
            throw new Error("Expected the field `mode` to be a primitive type in the JSON string but got " + data['mode']);
        }

        return true;
    }


}



/**
 * describes if the policy is in enabled state or disabled state
 * @member {module:model/PolicySettings.EnabledStateEnum} enabledState
 */
PolicySettings.prototype['enabledState'] = undefined;

/**
 * Describes if it is in detection mode  or prevention mode at policy level
 * @member {module:model/PolicySettings.ModeEnum} mode
 */
PolicySettings.prototype['mode'] = undefined;





/**
 * Allowed values for the <code>enabledState</code> property.
 * @enum {String}
 * @readonly
 */
PolicySettings['EnabledStateEnum'] = {

    /**
     * value: "Disabled"
     * @const
     */
    "Disabled": "Disabled",

    /**
     * value: "Enabled"
     * @const
     */
    "Enabled": "Enabled"
};


/**
 * Allowed values for the <code>mode</code> property.
 * @enum {String}
 * @readonly
 */
PolicySettings['ModeEnum'] = {

    /**
     * value: "Prevention"
     * @const
     */
    "Prevention": "Prevention",

    /**
     * value: "Detection"
     * @const
     */
    "Detection": "Detection"
};



export default PolicySettings;

