# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MatchCondition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, match_value: List[str]=None, match_variable: str=None, negate_condition: bool=None, operator: str=None, selector: str=None):
        """MatchCondition - a model defined in OpenAPI

        :param match_value: The match_value of this MatchCondition.
        :param match_variable: The match_variable of this MatchCondition.
        :param negate_condition: The negate_condition of this MatchCondition.
        :param operator: The operator of this MatchCondition.
        :param selector: The selector of this MatchCondition.
        """
        self.openapi_types = {
            'match_value': List[str],
            'match_variable': str,
            'negate_condition': bool,
            'operator': str,
            'selector': str
        }

        self.attribute_map = {
            'match_value': 'matchValue',
            'match_variable': 'matchVariable',
            'negate_condition': 'negateCondition',
            'operator': 'operator',
            'selector': 'selector'
        }

        self._match_value = match_value
        self._match_variable = match_variable
        self._negate_condition = negate_condition
        self._operator = operator
        self._selector = selector

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MatchCondition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MatchCondition of this MatchCondition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def match_value(self):
        """Gets the match_value of this MatchCondition.

        Match value

        :return: The match_value of this MatchCondition.
        :rtype: List[str]
        """
        return self._match_value

    @match_value.setter
    def match_value(self, match_value):
        """Sets the match_value of this MatchCondition.

        Match value

        :param match_value: The match_value of this MatchCondition.
        :type match_value: List[str]
        """
        if match_value is None:
            raise ValueError("Invalid value for `match_value`, must not be `None`")

        self._match_value = match_value

    @property
    def match_variable(self):
        """Gets the match_variable of this MatchCondition.

        Match Variable

        :return: The match_variable of this MatchCondition.
        :rtype: str
        """
        return self._match_variable

    @match_variable.setter
    def match_variable(self, match_variable):
        """Sets the match_variable of this MatchCondition.

        Match Variable

        :param match_variable: The match_variable of this MatchCondition.
        :type match_variable: str
        """
        allowed_values = ["RemoteAddr", "RequestMethod", "QueryString", "PostArgs", "RequestUri", "RequestHeader", "RequestBody"]  # noqa: E501
        if match_variable not in allowed_values:
            raise ValueError(
                "Invalid value for `match_variable` ({0}), must be one of {1}"
                .format(match_variable, allowed_values)
            )

        self._match_variable = match_variable

    @property
    def negate_condition(self):
        """Gets the negate_condition of this MatchCondition.

        Describes if this is negate condition or not

        :return: The negate_condition of this MatchCondition.
        :rtype: bool
        """
        return self._negate_condition

    @negate_condition.setter
    def negate_condition(self, negate_condition):
        """Sets the negate_condition of this MatchCondition.

        Describes if this is negate condition or not

        :param negate_condition: The negate_condition of this MatchCondition.
        :type negate_condition: bool
        """

        self._negate_condition = negate_condition

    @property
    def operator(self):
        """Gets the operator of this MatchCondition.

        Describes operator to be matched

        :return: The operator of this MatchCondition.
        :rtype: str
        """
        return self._operator

    @operator.setter
    def operator(self, operator):
        """Sets the operator of this MatchCondition.

        Describes operator to be matched

        :param operator: The operator of this MatchCondition.
        :type operator: str
        """
        allowed_values = ["Any", "IPMatch", "GeoMatch", "Equal", "Contains", "LessThan", "GreaterThan", "LessThanOrEqual", "GreaterThanOrEqual", "BeginsWith", "EndsWith"]  # noqa: E501
        if operator not in allowed_values:
            raise ValueError(
                "Invalid value for `operator` ({0}), must be one of {1}"
                .format(operator, allowed_values)
            )

        self._operator = operator

    @property
    def selector(self):
        """Gets the selector of this MatchCondition.

        Name of selector in RequestHeader or RequestBody to be matched

        :return: The selector of this MatchCondition.
        :rtype: str
        """
        return self._selector

    @selector.setter
    def selector(self, selector):
        """Sets the selector of this MatchCondition.

        Name of selector in RequestHeader or RequestBody to be matched

        :param selector: The selector of this MatchCondition.
        :type selector: str
        """

        self._selector = selector
