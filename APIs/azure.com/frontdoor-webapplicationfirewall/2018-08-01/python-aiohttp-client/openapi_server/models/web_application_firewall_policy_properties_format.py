# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.custom_rules import CustomRules
from openapi_server.models.managed_rule_sets import ManagedRuleSets
from openapi_server.models.policy_settings import PolicySettings
from openapi_server import util


class WebApplicationFirewallPolicyPropertiesFormat(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, custom_rules: CustomRules=None, managed_rules: ManagedRuleSets=None, policy_settings: PolicySettings=None, provisioning_state: str=None, resource_state: str=None):
        """WebApplicationFirewallPolicyPropertiesFormat - a model defined in OpenAPI

        :param custom_rules: The custom_rules of this WebApplicationFirewallPolicyPropertiesFormat.
        :param managed_rules: The managed_rules of this WebApplicationFirewallPolicyPropertiesFormat.
        :param policy_settings: The policy_settings of this WebApplicationFirewallPolicyPropertiesFormat.
        :param provisioning_state: The provisioning_state of this WebApplicationFirewallPolicyPropertiesFormat.
        :param resource_state: The resource_state of this WebApplicationFirewallPolicyPropertiesFormat.
        """
        self.openapi_types = {
            'custom_rules': CustomRules,
            'managed_rules': ManagedRuleSets,
            'policy_settings': PolicySettings,
            'provisioning_state': str,
            'resource_state': str
        }

        self.attribute_map = {
            'custom_rules': 'customRules',
            'managed_rules': 'managedRules',
            'policy_settings': 'policySettings',
            'provisioning_state': 'provisioningState',
            'resource_state': 'resourceState'
        }

        self._custom_rules = custom_rules
        self._managed_rules = managed_rules
        self._policy_settings = policy_settings
        self._provisioning_state = provisioning_state
        self._resource_state = resource_state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WebApplicationFirewallPolicyPropertiesFormat':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WebApplicationFirewallPolicyPropertiesFormat of this WebApplicationFirewallPolicyPropertiesFormat.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def custom_rules(self):
        """Gets the custom_rules of this WebApplicationFirewallPolicyPropertiesFormat.


        :return: The custom_rules of this WebApplicationFirewallPolicyPropertiesFormat.
        :rtype: CustomRules
        """
        return self._custom_rules

    @custom_rules.setter
    def custom_rules(self, custom_rules):
        """Sets the custom_rules of this WebApplicationFirewallPolicyPropertiesFormat.


        :param custom_rules: The custom_rules of this WebApplicationFirewallPolicyPropertiesFormat.
        :type custom_rules: CustomRules
        """

        self._custom_rules = custom_rules

    @property
    def managed_rules(self):
        """Gets the managed_rules of this WebApplicationFirewallPolicyPropertiesFormat.


        :return: The managed_rules of this WebApplicationFirewallPolicyPropertiesFormat.
        :rtype: ManagedRuleSets
        """
        return self._managed_rules

    @managed_rules.setter
    def managed_rules(self, managed_rules):
        """Sets the managed_rules of this WebApplicationFirewallPolicyPropertiesFormat.


        :param managed_rules: The managed_rules of this WebApplicationFirewallPolicyPropertiesFormat.
        :type managed_rules: ManagedRuleSets
        """

        self._managed_rules = managed_rules

    @property
    def policy_settings(self):
        """Gets the policy_settings of this WebApplicationFirewallPolicyPropertiesFormat.


        :return: The policy_settings of this WebApplicationFirewallPolicyPropertiesFormat.
        :rtype: PolicySettings
        """
        return self._policy_settings

    @policy_settings.setter
    def policy_settings(self, policy_settings):
        """Sets the policy_settings of this WebApplicationFirewallPolicyPropertiesFormat.


        :param policy_settings: The policy_settings of this WebApplicationFirewallPolicyPropertiesFormat.
        :type policy_settings: PolicySettings
        """

        self._policy_settings = policy_settings

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this WebApplicationFirewallPolicyPropertiesFormat.

        Provisioning state of the WebApplicationFirewallPolicy.

        :return: The provisioning_state of this WebApplicationFirewallPolicyPropertiesFormat.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this WebApplicationFirewallPolicyPropertiesFormat.

        Provisioning state of the WebApplicationFirewallPolicy.

        :param provisioning_state: The provisioning_state of this WebApplicationFirewallPolicyPropertiesFormat.
        :type provisioning_state: str
        """

        self._provisioning_state = provisioning_state

    @property
    def resource_state(self):
        """Gets the resource_state of this WebApplicationFirewallPolicyPropertiesFormat.


        :return: The resource_state of this WebApplicationFirewallPolicyPropertiesFormat.
        :rtype: str
        """
        return self._resource_state

    @resource_state.setter
    def resource_state(self, resource_state):
        """Sets the resource_state of this WebApplicationFirewallPolicyPropertiesFormat.


        :param resource_state: The resource_state of this WebApplicationFirewallPolicyPropertiesFormat.
        :type resource_state: str
        """
        allowed_values = ["Creating", "Enabling", "Enabled", "Disabling", "Disabled", "Deleting"]  # noqa: E501
        if resource_state not in allowed_values:
            raise ValueError(
                "Invalid value for `resource_state` ({0}), must be one of {1}"
                .format(resource_state, allowed_values)
            )

        self._resource_state = resource_state
