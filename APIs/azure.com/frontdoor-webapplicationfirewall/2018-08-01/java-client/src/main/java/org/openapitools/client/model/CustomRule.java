/*
 * WebApplicationFirewallManagement
 * APIs to manage web application firewall rules
 *
 * The version of the OpenAPI document: 2018-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.MatchCondition;
import org.openapitools.client.model.Transform;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Defines contents of a web application rule
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:01:58.352293-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CustomRule {
  /**
   * Type of Actions
   */
  @JsonAdapter(ActionEnum.Adapter.class)
  public enum ActionEnum {
    ALLOW("Allow"),
    
    BLOCK("Block"),
    
    LOG("Log");

    private String value;

    ActionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ActionEnum fromValue(String value) {
      for (ActionEnum b : ActionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ActionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ActionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ActionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ActionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ActionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ACTION = "action";
  @SerializedName(SERIALIZED_NAME_ACTION)
  private ActionEnum action;

  public static final String SERIALIZED_NAME_ETAG = "etag";
  @SerializedName(SERIALIZED_NAME_ETAG)
  private String etag;

  public static final String SERIALIZED_NAME_MATCH_CONDITIONS = "matchConditions";
  @SerializedName(SERIALIZED_NAME_MATCH_CONDITIONS)
  private List<MatchCondition> matchConditions = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PRIORITY = "priority";
  @SerializedName(SERIALIZED_NAME_PRIORITY)
  private Integer priority;

  public static final String SERIALIZED_NAME_RATE_LIMIT_DURATION_IN_MINUTES = "rateLimitDurationInMinutes";
  @SerializedName(SERIALIZED_NAME_RATE_LIMIT_DURATION_IN_MINUTES)
  private Integer rateLimitDurationInMinutes;

  public static final String SERIALIZED_NAME_RATE_LIMIT_THRESHOLD = "rateLimitThreshold";
  @SerializedName(SERIALIZED_NAME_RATE_LIMIT_THRESHOLD)
  private Integer rateLimitThreshold;

  /**
   * Describes type of rule
   */
  @JsonAdapter(RuleTypeEnum.Adapter.class)
  public enum RuleTypeEnum {
    MATCH_RULE("MatchRule"),
    
    RATE_LIMIT_RULE("RateLimitRule");

    private String value;

    RuleTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RuleTypeEnum fromValue(String value) {
      for (RuleTypeEnum b : RuleTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RuleTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RuleTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RuleTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RuleTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RuleTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RULE_TYPE = "ruleType";
  @SerializedName(SERIALIZED_NAME_RULE_TYPE)
  private RuleTypeEnum ruleType;

  public static final String SERIALIZED_NAME_TRANSFORMS = "transforms";
  @SerializedName(SERIALIZED_NAME_TRANSFORMS)
  private List<Transform> transforms = new ArrayList<>();

  public CustomRule() {
  }

  public CustomRule(
     String etag
  ) {
    this();
    this.etag = etag;
  }

  public CustomRule action(ActionEnum action) {
    this.action = action;
    return this;
  }

  /**
   * Type of Actions
   * @return action
   */
  @javax.annotation.Nonnull
  public ActionEnum getAction() {
    return action;
  }

  public void setAction(ActionEnum action) {
    this.action = action;
  }


  /**
   * Gets a unique read-only string that changes whenever the resource is updated.
   * @return etag
   */
  @javax.annotation.Nullable
  public String getEtag() {
    return etag;
  }



  public CustomRule matchConditions(List<MatchCondition> matchConditions) {
    this.matchConditions = matchConditions;
    return this;
  }

  public CustomRule addMatchConditionsItem(MatchCondition matchConditionsItem) {
    if (this.matchConditions == null) {
      this.matchConditions = new ArrayList<>();
    }
    this.matchConditions.add(matchConditionsItem);
    return this;
  }

  /**
   * List of match conditions
   * @return matchConditions
   */
  @javax.annotation.Nonnull
  public List<MatchCondition> getMatchConditions() {
    return matchConditions;
  }

  public void setMatchConditions(List<MatchCondition> matchConditions) {
    this.matchConditions = matchConditions;
  }


  public CustomRule name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Gets name of the resource that is unique within a policy. This name can be used to access the resource.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CustomRule priority(Integer priority) {
    this.priority = priority;
    return this;
  }

  /**
   * Describes priority of the rule. Rules with a lower value will be evaluated before rules with a higher value
   * @return priority
   */
  @javax.annotation.Nonnull
  public Integer getPriority() {
    return priority;
  }

  public void setPriority(Integer priority) {
    this.priority = priority;
  }


  public CustomRule rateLimitDurationInMinutes(Integer rateLimitDurationInMinutes) {
    this.rateLimitDurationInMinutes = rateLimitDurationInMinutes;
    return this;
  }

  /**
   * Defines rate limit duration. Default - 1 minute
   * @return rateLimitDurationInMinutes
   */
  @javax.annotation.Nullable
  public Integer getRateLimitDurationInMinutes() {
    return rateLimitDurationInMinutes;
  }

  public void setRateLimitDurationInMinutes(Integer rateLimitDurationInMinutes) {
    this.rateLimitDurationInMinutes = rateLimitDurationInMinutes;
  }


  public CustomRule rateLimitThreshold(Integer rateLimitThreshold) {
    this.rateLimitThreshold = rateLimitThreshold;
    return this;
  }

  /**
   * Defines rate limit threshold
   * @return rateLimitThreshold
   */
  @javax.annotation.Nullable
  public Integer getRateLimitThreshold() {
    return rateLimitThreshold;
  }

  public void setRateLimitThreshold(Integer rateLimitThreshold) {
    this.rateLimitThreshold = rateLimitThreshold;
  }


  public CustomRule ruleType(RuleTypeEnum ruleType) {
    this.ruleType = ruleType;
    return this;
  }

  /**
   * Describes type of rule
   * @return ruleType
   */
  @javax.annotation.Nonnull
  public RuleTypeEnum getRuleType() {
    return ruleType;
  }

  public void setRuleType(RuleTypeEnum ruleType) {
    this.ruleType = ruleType;
  }


  public CustomRule transforms(List<Transform> transforms) {
    this.transforms = transforms;
    return this;
  }

  public CustomRule addTransformsItem(Transform transformsItem) {
    if (this.transforms == null) {
      this.transforms = new ArrayList<>();
    }
    this.transforms.add(transformsItem);
    return this;
  }

  /**
   * List of transforms
   * @return transforms
   */
  @javax.annotation.Nullable
  public List<Transform> getTransforms() {
    return transforms;
  }

  public void setTransforms(List<Transform> transforms) {
    this.transforms = transforms;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CustomRule customRule = (CustomRule) o;
    return Objects.equals(this.action, customRule.action) &&
        Objects.equals(this.etag, customRule.etag) &&
        Objects.equals(this.matchConditions, customRule.matchConditions) &&
        Objects.equals(this.name, customRule.name) &&
        Objects.equals(this.priority, customRule.priority) &&
        Objects.equals(this.rateLimitDurationInMinutes, customRule.rateLimitDurationInMinutes) &&
        Objects.equals(this.rateLimitThreshold, customRule.rateLimitThreshold) &&
        Objects.equals(this.ruleType, customRule.ruleType) &&
        Objects.equals(this.transforms, customRule.transforms);
  }

  @Override
  public int hashCode() {
    return Objects.hash(action, etag, matchConditions, name, priority, rateLimitDurationInMinutes, rateLimitThreshold, ruleType, transforms);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CustomRule {\n");
    sb.append("    action: ").append(toIndentedString(action)).append("\n");
    sb.append("    etag: ").append(toIndentedString(etag)).append("\n");
    sb.append("    matchConditions: ").append(toIndentedString(matchConditions)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    priority: ").append(toIndentedString(priority)).append("\n");
    sb.append("    rateLimitDurationInMinutes: ").append(toIndentedString(rateLimitDurationInMinutes)).append("\n");
    sb.append("    rateLimitThreshold: ").append(toIndentedString(rateLimitThreshold)).append("\n");
    sb.append("    ruleType: ").append(toIndentedString(ruleType)).append("\n");
    sb.append("    transforms: ").append(toIndentedString(transforms)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("action");
    openapiFields.add("etag");
    openapiFields.add("matchConditions");
    openapiFields.add("name");
    openapiFields.add("priority");
    openapiFields.add("rateLimitDurationInMinutes");
    openapiFields.add("rateLimitThreshold");
    openapiFields.add("ruleType");
    openapiFields.add("transforms");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("action");
    openapiRequiredFields.add("matchConditions");
    openapiRequiredFields.add("priority");
    openapiRequiredFields.add("ruleType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CustomRule
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CustomRule.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CustomRule is not found in the empty JSON string", CustomRule.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CustomRule.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CustomRule` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CustomRule.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("action").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `action` to be a primitive type in the JSON string but got `%s`", jsonObj.get("action").toString()));
      }
      // validate the required field `action`
      ActionEnum.validateJsonElement(jsonObj.get("action"));
      if ((jsonObj.get("etag") != null && !jsonObj.get("etag").isJsonNull()) && !jsonObj.get("etag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `etag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("etag").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("matchConditions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `matchConditions` to be an array in the JSON string but got `%s`", jsonObj.get("matchConditions").toString()));
      }

      JsonArray jsonArraymatchConditions = jsonObj.getAsJsonArray("matchConditions");
      // validate the required field `matchConditions` (array)
      for (int i = 0; i < jsonArraymatchConditions.size(); i++) {
        MatchCondition.validateJsonElement(jsonArraymatchConditions.get(i));
      };
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("ruleType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ruleType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ruleType").toString()));
      }
      // validate the required field `ruleType`
      RuleTypeEnum.validateJsonElement(jsonObj.get("ruleType"));
      // ensure the optional json data is an array if present
      if (jsonObj.get("transforms") != null && !jsonObj.get("transforms").isJsonNull() && !jsonObj.get("transforms").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `transforms` to be an array in the JSON string but got `%s`", jsonObj.get("transforms").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CustomRule.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CustomRule' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CustomRule> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CustomRule.class));

       return (TypeAdapter<T>) new TypeAdapter<CustomRule>() {
           @Override
           public void write(JsonWriter out, CustomRule value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CustomRule read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CustomRule given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CustomRule
   * @throws IOException if the JSON string is invalid with respect to CustomRule
   */
  public static CustomRule fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CustomRule.class);
  }

  /**
   * Convert an instance of CustomRule to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

