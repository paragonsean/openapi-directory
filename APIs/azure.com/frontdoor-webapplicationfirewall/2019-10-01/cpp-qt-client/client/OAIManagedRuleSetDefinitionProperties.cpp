/**
 * WebApplicationFirewallManagement
 * APIs to manage web application firewall rules.
 *
 * The version of the OpenAPI document: 2019-10-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIManagedRuleSetDefinitionProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIManagedRuleSetDefinitionProperties::OAIManagedRuleSetDefinitionProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIManagedRuleSetDefinitionProperties::OAIManagedRuleSetDefinitionProperties() {
    this->initializeModel();
}

OAIManagedRuleSetDefinitionProperties::~OAIManagedRuleSetDefinitionProperties() {}

void OAIManagedRuleSetDefinitionProperties::initializeModel() {

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_rule_groups_isSet = false;
    m_rule_groups_isValid = false;

    m_rule_set_type_isSet = false;
    m_rule_set_type_isValid = false;

    m_rule_set_version_isSet = false;
    m_rule_set_version_isValid = false;
}

void OAIManagedRuleSetDefinitionProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIManagedRuleSetDefinitionProperties::fromJsonObject(QJsonObject json) {

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_rule_groups_isValid = ::OpenAPI::fromJsonValue(m_rule_groups, json[QString("ruleGroups")]);
    m_rule_groups_isSet = !json[QString("ruleGroups")].isNull() && m_rule_groups_isValid;

    m_rule_set_type_isValid = ::OpenAPI::fromJsonValue(m_rule_set_type, json[QString("ruleSetType")]);
    m_rule_set_type_isSet = !json[QString("ruleSetType")].isNull() && m_rule_set_type_isValid;

    m_rule_set_version_isValid = ::OpenAPI::fromJsonValue(m_rule_set_version, json[QString("ruleSetVersion")]);
    m_rule_set_version_isSet = !json[QString("ruleSetVersion")].isNull() && m_rule_set_version_isValid;
}

QString OAIManagedRuleSetDefinitionProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIManagedRuleSetDefinitionProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_rule_groups.size() > 0) {
        obj.insert(QString("ruleGroups"), ::OpenAPI::toJsonValue(m_rule_groups));
    }
    if (m_rule_set_type_isSet) {
        obj.insert(QString("ruleSetType"), ::OpenAPI::toJsonValue(m_rule_set_type));
    }
    if (m_rule_set_version_isSet) {
        obj.insert(QString("ruleSetVersion"), ::OpenAPI::toJsonValue(m_rule_set_version));
    }
    return obj;
}

QString OAIManagedRuleSetDefinitionProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIManagedRuleSetDefinitionProperties::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIManagedRuleSetDefinitionProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIManagedRuleSetDefinitionProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

QList<OAIManagedRuleGroupDefinition> OAIManagedRuleSetDefinitionProperties::getRuleGroups() const {
    return m_rule_groups;
}
void OAIManagedRuleSetDefinitionProperties::setRuleGroups(const QList<OAIManagedRuleGroupDefinition> &rule_groups) {
    m_rule_groups = rule_groups;
    m_rule_groups_isSet = true;
}

bool OAIManagedRuleSetDefinitionProperties::is_rule_groups_Set() const{
    return m_rule_groups_isSet;
}

bool OAIManagedRuleSetDefinitionProperties::is_rule_groups_Valid() const{
    return m_rule_groups_isValid;
}

QString OAIManagedRuleSetDefinitionProperties::getRuleSetType() const {
    return m_rule_set_type;
}
void OAIManagedRuleSetDefinitionProperties::setRuleSetType(const QString &rule_set_type) {
    m_rule_set_type = rule_set_type;
    m_rule_set_type_isSet = true;
}

bool OAIManagedRuleSetDefinitionProperties::is_rule_set_type_Set() const{
    return m_rule_set_type_isSet;
}

bool OAIManagedRuleSetDefinitionProperties::is_rule_set_type_Valid() const{
    return m_rule_set_type_isValid;
}

QString OAIManagedRuleSetDefinitionProperties::getRuleSetVersion() const {
    return m_rule_set_version;
}
void OAIManagedRuleSetDefinitionProperties::setRuleSetVersion(const QString &rule_set_version) {
    m_rule_set_version = rule_set_version;
    m_rule_set_version_isSet = true;
}

bool OAIManagedRuleSetDefinitionProperties::is_rule_set_version_Set() const{
    return m_rule_set_version_isSet;
}

bool OAIManagedRuleSetDefinitionProperties::is_rule_set_version_Valid() const{
    return m_rule_set_version_isValid;
}

bool OAIManagedRuleSetDefinitionProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rule_groups.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_rule_set_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rule_set_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIManagedRuleSetDefinitionProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
