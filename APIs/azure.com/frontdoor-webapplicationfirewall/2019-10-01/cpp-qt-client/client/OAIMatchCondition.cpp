/**
 * WebApplicationFirewallManagement
 * APIs to manage web application firewall rules.
 *
 * The version of the OpenAPI document: 2019-10-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMatchCondition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMatchCondition::OAIMatchCondition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMatchCondition::OAIMatchCondition() {
    this->initializeModel();
}

OAIMatchCondition::~OAIMatchCondition() {}

void OAIMatchCondition::initializeModel() {

    m_match_value_isSet = false;
    m_match_value_isValid = false;

    m_match_variable_isSet = false;
    m_match_variable_isValid = false;

    m_negate_condition_isSet = false;
    m_negate_condition_isValid = false;

    m_r_operator_isSet = false;
    m_r_operator_isValid = false;

    m_selector_isSet = false;
    m_selector_isValid = false;

    m_transforms_isSet = false;
    m_transforms_isValid = false;
}

void OAIMatchCondition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMatchCondition::fromJsonObject(QJsonObject json) {

    m_match_value_isValid = ::OpenAPI::fromJsonValue(m_match_value, json[QString("matchValue")]);
    m_match_value_isSet = !json[QString("matchValue")].isNull() && m_match_value_isValid;

    m_match_variable_isValid = ::OpenAPI::fromJsonValue(m_match_variable, json[QString("matchVariable")]);
    m_match_variable_isSet = !json[QString("matchVariable")].isNull() && m_match_variable_isValid;

    m_negate_condition_isValid = ::OpenAPI::fromJsonValue(m_negate_condition, json[QString("negateCondition")]);
    m_negate_condition_isSet = !json[QString("negateCondition")].isNull() && m_negate_condition_isValid;

    m_r_operator_isValid = ::OpenAPI::fromJsonValue(m_r_operator, json[QString("operator")]);
    m_r_operator_isSet = !json[QString("operator")].isNull() && m_r_operator_isValid;

    m_selector_isValid = ::OpenAPI::fromJsonValue(m_selector, json[QString("selector")]);
    m_selector_isSet = !json[QString("selector")].isNull() && m_selector_isValid;

    m_transforms_isValid = ::OpenAPI::fromJsonValue(m_transforms, json[QString("transforms")]);
    m_transforms_isSet = !json[QString("transforms")].isNull() && m_transforms_isValid;
}

QString OAIMatchCondition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMatchCondition::asJsonObject() const {
    QJsonObject obj;
    if (m_match_value.size() > 0) {
        obj.insert(QString("matchValue"), ::OpenAPI::toJsonValue(m_match_value));
    }
    if (m_match_variable_isSet) {
        obj.insert(QString("matchVariable"), ::OpenAPI::toJsonValue(m_match_variable));
    }
    if (m_negate_condition_isSet) {
        obj.insert(QString("negateCondition"), ::OpenAPI::toJsonValue(m_negate_condition));
    }
    if (m_r_operator_isSet) {
        obj.insert(QString("operator"), ::OpenAPI::toJsonValue(m_r_operator));
    }
    if (m_selector_isSet) {
        obj.insert(QString("selector"), ::OpenAPI::toJsonValue(m_selector));
    }
    if (m_transforms.size() > 0) {
        obj.insert(QString("transforms"), ::OpenAPI::toJsonValue(m_transforms));
    }
    return obj;
}

QList<QString> OAIMatchCondition::getMatchValue() const {
    return m_match_value;
}
void OAIMatchCondition::setMatchValue(const QList<QString> &match_value) {
    m_match_value = match_value;
    m_match_value_isSet = true;
}

bool OAIMatchCondition::is_match_value_Set() const{
    return m_match_value_isSet;
}

bool OAIMatchCondition::is_match_value_Valid() const{
    return m_match_value_isValid;
}

QString OAIMatchCondition::getMatchVariable() const {
    return m_match_variable;
}
void OAIMatchCondition::setMatchVariable(const QString &match_variable) {
    m_match_variable = match_variable;
    m_match_variable_isSet = true;
}

bool OAIMatchCondition::is_match_variable_Set() const{
    return m_match_variable_isSet;
}

bool OAIMatchCondition::is_match_variable_Valid() const{
    return m_match_variable_isValid;
}

bool OAIMatchCondition::isNegateCondition() const {
    return m_negate_condition;
}
void OAIMatchCondition::setNegateCondition(const bool &negate_condition) {
    m_negate_condition = negate_condition;
    m_negate_condition_isSet = true;
}

bool OAIMatchCondition::is_negate_condition_Set() const{
    return m_negate_condition_isSet;
}

bool OAIMatchCondition::is_negate_condition_Valid() const{
    return m_negate_condition_isValid;
}

QString OAIMatchCondition::getROperator() const {
    return m_r_operator;
}
void OAIMatchCondition::setROperator(const QString &r_operator) {
    m_r_operator = r_operator;
    m_r_operator_isSet = true;
}

bool OAIMatchCondition::is_r_operator_Set() const{
    return m_r_operator_isSet;
}

bool OAIMatchCondition::is_r_operator_Valid() const{
    return m_r_operator_isValid;
}

QString OAIMatchCondition::getSelector() const {
    return m_selector;
}
void OAIMatchCondition::setSelector(const QString &selector) {
    m_selector = selector;
    m_selector_isSet = true;
}

bool OAIMatchCondition::is_selector_Set() const{
    return m_selector_isSet;
}

bool OAIMatchCondition::is_selector_Valid() const{
    return m_selector_isValid;
}

QList<OAITransformType> OAIMatchCondition::getTransforms() const {
    return m_transforms;
}
void OAIMatchCondition::setTransforms(const QList<OAITransformType> &transforms) {
    m_transforms = transforms;
    m_transforms_isSet = true;
}

bool OAIMatchCondition::is_transforms_Set() const{
    return m_transforms_isSet;
}

bool OAIMatchCondition::is_transforms_Valid() const{
    return m_transforms_isValid;
}

bool OAIMatchCondition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_match_value.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_match_variable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_negate_condition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_operator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_selector_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transforms.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMatchCondition::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_match_value_isValid && m_match_variable_isValid && m_r_operator_isValid && true;
}

} // namespace OpenAPI
