/**
 * WebApplicationFirewallManagement
 * APIs to manage web application firewall rules.
 *
 * The version of the OpenAPI document: 2019-10-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIManagedRuleExclusion.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIManagedRuleExclusion::OAIManagedRuleExclusion(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIManagedRuleExclusion::OAIManagedRuleExclusion() {
    this->initializeModel();
}

OAIManagedRuleExclusion::~OAIManagedRuleExclusion() {}

void OAIManagedRuleExclusion::initializeModel() {

    m_match_variable_isSet = false;
    m_match_variable_isValid = false;

    m_selector_isSet = false;
    m_selector_isValid = false;

    m_selector_match_operator_isSet = false;
    m_selector_match_operator_isValid = false;
}

void OAIManagedRuleExclusion::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIManagedRuleExclusion::fromJsonObject(QJsonObject json) {

    m_match_variable_isValid = ::OpenAPI::fromJsonValue(m_match_variable, json[QString("matchVariable")]);
    m_match_variable_isSet = !json[QString("matchVariable")].isNull() && m_match_variable_isValid;

    m_selector_isValid = ::OpenAPI::fromJsonValue(m_selector, json[QString("selector")]);
    m_selector_isSet = !json[QString("selector")].isNull() && m_selector_isValid;

    m_selector_match_operator_isValid = ::OpenAPI::fromJsonValue(m_selector_match_operator, json[QString("selectorMatchOperator")]);
    m_selector_match_operator_isSet = !json[QString("selectorMatchOperator")].isNull() && m_selector_match_operator_isValid;
}

QString OAIManagedRuleExclusion::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIManagedRuleExclusion::asJsonObject() const {
    QJsonObject obj;
    if (m_match_variable_isSet) {
        obj.insert(QString("matchVariable"), ::OpenAPI::toJsonValue(m_match_variable));
    }
    if (m_selector_isSet) {
        obj.insert(QString("selector"), ::OpenAPI::toJsonValue(m_selector));
    }
    if (m_selector_match_operator_isSet) {
        obj.insert(QString("selectorMatchOperator"), ::OpenAPI::toJsonValue(m_selector_match_operator));
    }
    return obj;
}

QString OAIManagedRuleExclusion::getMatchVariable() const {
    return m_match_variable;
}
void OAIManagedRuleExclusion::setMatchVariable(const QString &match_variable) {
    m_match_variable = match_variable;
    m_match_variable_isSet = true;
}

bool OAIManagedRuleExclusion::is_match_variable_Set() const{
    return m_match_variable_isSet;
}

bool OAIManagedRuleExclusion::is_match_variable_Valid() const{
    return m_match_variable_isValid;
}

QString OAIManagedRuleExclusion::getSelector() const {
    return m_selector;
}
void OAIManagedRuleExclusion::setSelector(const QString &selector) {
    m_selector = selector;
    m_selector_isSet = true;
}

bool OAIManagedRuleExclusion::is_selector_Set() const{
    return m_selector_isSet;
}

bool OAIManagedRuleExclusion::is_selector_Valid() const{
    return m_selector_isValid;
}

QString OAIManagedRuleExclusion::getSelectorMatchOperator() const {
    return m_selector_match_operator;
}
void OAIManagedRuleExclusion::setSelectorMatchOperator(const QString &selector_match_operator) {
    m_selector_match_operator = selector_match_operator;
    m_selector_match_operator_isSet = true;
}

bool OAIManagedRuleExclusion::is_selector_match_operator_Set() const{
    return m_selector_match_operator_isSet;
}

bool OAIManagedRuleExclusion::is_selector_match_operator_Valid() const{
    return m_selector_match_operator_isValid;
}

bool OAIManagedRuleExclusion::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_match_variable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_selector_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_selector_match_operator_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIManagedRuleExclusion::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_match_variable_isValid && m_selector_isValid && m_selector_match_operator_isValid && true;
}

} // namespace OpenAPI
