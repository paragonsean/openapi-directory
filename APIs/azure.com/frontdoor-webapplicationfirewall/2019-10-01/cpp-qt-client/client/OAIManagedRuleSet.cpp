/**
 * WebApplicationFirewallManagement
 * APIs to manage web application firewall rules.
 *
 * The version of the OpenAPI document: 2019-10-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIManagedRuleSet.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIManagedRuleSet::OAIManagedRuleSet(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIManagedRuleSet::OAIManagedRuleSet() {
    this->initializeModel();
}

OAIManagedRuleSet::~OAIManagedRuleSet() {}

void OAIManagedRuleSet::initializeModel() {

    m_exclusions_isSet = false;
    m_exclusions_isValid = false;

    m_rule_group_overrides_isSet = false;
    m_rule_group_overrides_isValid = false;

    m_rule_set_type_isSet = false;
    m_rule_set_type_isValid = false;

    m_rule_set_version_isSet = false;
    m_rule_set_version_isValid = false;
}

void OAIManagedRuleSet::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIManagedRuleSet::fromJsonObject(QJsonObject json) {

    m_exclusions_isValid = ::OpenAPI::fromJsonValue(m_exclusions, json[QString("exclusions")]);
    m_exclusions_isSet = !json[QString("exclusions")].isNull() && m_exclusions_isValid;

    m_rule_group_overrides_isValid = ::OpenAPI::fromJsonValue(m_rule_group_overrides, json[QString("ruleGroupOverrides")]);
    m_rule_group_overrides_isSet = !json[QString("ruleGroupOverrides")].isNull() && m_rule_group_overrides_isValid;

    m_rule_set_type_isValid = ::OpenAPI::fromJsonValue(m_rule_set_type, json[QString("ruleSetType")]);
    m_rule_set_type_isSet = !json[QString("ruleSetType")].isNull() && m_rule_set_type_isValid;

    m_rule_set_version_isValid = ::OpenAPI::fromJsonValue(m_rule_set_version, json[QString("ruleSetVersion")]);
    m_rule_set_version_isSet = !json[QString("ruleSetVersion")].isNull() && m_rule_set_version_isValid;
}

QString OAIManagedRuleSet::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIManagedRuleSet::asJsonObject() const {
    QJsonObject obj;
    if (m_exclusions.size() > 0) {
        obj.insert(QString("exclusions"), ::OpenAPI::toJsonValue(m_exclusions));
    }
    if (m_rule_group_overrides.size() > 0) {
        obj.insert(QString("ruleGroupOverrides"), ::OpenAPI::toJsonValue(m_rule_group_overrides));
    }
    if (m_rule_set_type_isSet) {
        obj.insert(QString("ruleSetType"), ::OpenAPI::toJsonValue(m_rule_set_type));
    }
    if (m_rule_set_version_isSet) {
        obj.insert(QString("ruleSetVersion"), ::OpenAPI::toJsonValue(m_rule_set_version));
    }
    return obj;
}

QList<OAIManagedRuleExclusion> OAIManagedRuleSet::getExclusions() const {
    return m_exclusions;
}
void OAIManagedRuleSet::setExclusions(const QList<OAIManagedRuleExclusion> &exclusions) {
    m_exclusions = exclusions;
    m_exclusions_isSet = true;
}

bool OAIManagedRuleSet::is_exclusions_Set() const{
    return m_exclusions_isSet;
}

bool OAIManagedRuleSet::is_exclusions_Valid() const{
    return m_exclusions_isValid;
}

QList<OAIManagedRuleGroupOverride> OAIManagedRuleSet::getRuleGroupOverrides() const {
    return m_rule_group_overrides;
}
void OAIManagedRuleSet::setRuleGroupOverrides(const QList<OAIManagedRuleGroupOverride> &rule_group_overrides) {
    m_rule_group_overrides = rule_group_overrides;
    m_rule_group_overrides_isSet = true;
}

bool OAIManagedRuleSet::is_rule_group_overrides_Set() const{
    return m_rule_group_overrides_isSet;
}

bool OAIManagedRuleSet::is_rule_group_overrides_Valid() const{
    return m_rule_group_overrides_isValid;
}

QString OAIManagedRuleSet::getRuleSetType() const {
    return m_rule_set_type;
}
void OAIManagedRuleSet::setRuleSetType(const QString &rule_set_type) {
    m_rule_set_type = rule_set_type;
    m_rule_set_type_isSet = true;
}

bool OAIManagedRuleSet::is_rule_set_type_Set() const{
    return m_rule_set_type_isSet;
}

bool OAIManagedRuleSet::is_rule_set_type_Valid() const{
    return m_rule_set_type_isValid;
}

QString OAIManagedRuleSet::getRuleSetVersion() const {
    return m_rule_set_version;
}
void OAIManagedRuleSet::setRuleSetVersion(const QString &rule_set_version) {
    m_rule_set_version = rule_set_version;
    m_rule_set_version_isSet = true;
}

bool OAIManagedRuleSet::is_rule_set_version_Set() const{
    return m_rule_set_version_isSet;
}

bool OAIManagedRuleSet::is_rule_set_version_Valid() const{
    return m_rule_set_version_isValid;
}

bool OAIManagedRuleSet::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_exclusions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_rule_group_overrides.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_rule_set_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rule_set_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIManagedRuleSet::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_rule_set_type_isValid && m_rule_set_version_isValid && true;
}

} // namespace OpenAPI
