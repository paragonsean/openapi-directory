/**
 * WebApplicationFirewallManagement
 * APIs to manage web application firewall rules.
 *
 * The version of the OpenAPI document: 2019-10-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ManagedRuleExclusion model module.
 * @module model/ManagedRuleExclusion
 * @version 2019-10-01
 */
class ManagedRuleExclusion {
    /**
     * Constructs a new <code>ManagedRuleExclusion</code>.
     * Exclude variables from managed rule evaluation.
     * @alias module:model/ManagedRuleExclusion
     * @param matchVariable {module:model/ManagedRuleExclusion.MatchVariableEnum} The variable type to be excluded.
     * @param selector {String} Selector value for which elements in the collection this exclusion applies to.
     * @param selectorMatchOperator {module:model/ManagedRuleExclusion.SelectorMatchOperatorEnum} Comparison operator to apply to the selector when specifying which elements in the collection this exclusion applies to.
     */
    constructor(matchVariable, selector, selectorMatchOperator) { 
        
        ManagedRuleExclusion.initialize(this, matchVariable, selector, selectorMatchOperator);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, matchVariable, selector, selectorMatchOperator) { 
        obj['matchVariable'] = matchVariable;
        obj['selector'] = selector;
        obj['selectorMatchOperator'] = selectorMatchOperator;
    }

    /**
     * Constructs a <code>ManagedRuleExclusion</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ManagedRuleExclusion} obj Optional instance to populate.
     * @return {module:model/ManagedRuleExclusion} The populated <code>ManagedRuleExclusion</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ManagedRuleExclusion();

            if (data.hasOwnProperty('matchVariable')) {
                obj['matchVariable'] = ApiClient.convertToType(data['matchVariable'], 'String');
            }
            if (data.hasOwnProperty('selector')) {
                obj['selector'] = ApiClient.convertToType(data['selector'], 'String');
            }
            if (data.hasOwnProperty('selectorMatchOperator')) {
                obj['selectorMatchOperator'] = ApiClient.convertToType(data['selectorMatchOperator'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ManagedRuleExclusion</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ManagedRuleExclusion</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ManagedRuleExclusion.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['matchVariable'] && !(typeof data['matchVariable'] === 'string' || data['matchVariable'] instanceof String)) {
            throw new Error("Expected the field `matchVariable` to be a primitive type in the JSON string but got " + data['matchVariable']);
        }
        // ensure the json data is a string
        if (data['selector'] && !(typeof data['selector'] === 'string' || data['selector'] instanceof String)) {
            throw new Error("Expected the field `selector` to be a primitive type in the JSON string but got " + data['selector']);
        }
        // ensure the json data is a string
        if (data['selectorMatchOperator'] && !(typeof data['selectorMatchOperator'] === 'string' || data['selectorMatchOperator'] instanceof String)) {
            throw new Error("Expected the field `selectorMatchOperator` to be a primitive type in the JSON string but got " + data['selectorMatchOperator']);
        }

        return true;
    }


}

ManagedRuleExclusion.RequiredProperties = ["matchVariable", "selector", "selectorMatchOperator"];

/**
 * The variable type to be excluded.
 * @member {module:model/ManagedRuleExclusion.MatchVariableEnum} matchVariable
 */
ManagedRuleExclusion.prototype['matchVariable'] = undefined;

/**
 * Selector value for which elements in the collection this exclusion applies to.
 * @member {String} selector
 */
ManagedRuleExclusion.prototype['selector'] = undefined;

/**
 * Comparison operator to apply to the selector when specifying which elements in the collection this exclusion applies to.
 * @member {module:model/ManagedRuleExclusion.SelectorMatchOperatorEnum} selectorMatchOperator
 */
ManagedRuleExclusion.prototype['selectorMatchOperator'] = undefined;





/**
 * Allowed values for the <code>matchVariable</code> property.
 * @enum {String}
 * @readonly
 */
ManagedRuleExclusion['MatchVariableEnum'] = {

    /**
     * value: "RequestHeaderNames"
     * @const
     */
    "RequestHeaderNames": "RequestHeaderNames",

    /**
     * value: "RequestCookieNames"
     * @const
     */
    "RequestCookieNames": "RequestCookieNames",

    /**
     * value: "QueryStringArgNames"
     * @const
     */
    "QueryStringArgNames": "QueryStringArgNames",

    /**
     * value: "RequestBodyPostArgNames"
     * @const
     */
    "RequestBodyPostArgNames": "RequestBodyPostArgNames"
};


/**
 * Allowed values for the <code>selectorMatchOperator</code> property.
 * @enum {String}
 * @readonly
 */
ManagedRuleExclusion['SelectorMatchOperatorEnum'] = {

    /**
     * value: "Equals"
     * @const
     */
    "Equals": "Equals",

    /**
     * value: "Contains"
     * @const
     */
    "Contains": "Contains",

    /**
     * value: "StartsWith"
     * @const
     */
    "StartsWith": "StartsWith",

    /**
     * value: "EndsWith"
     * @const
     */
    "EndsWith": "EndsWith",

    /**
     * value: "EqualsAny"
     * @const
     */
    "EqualsAny": "EqualsAny"
};



export default ManagedRuleExclusion;

