/**
 * WebApplicationFirewallManagement
 * APIs to manage web application firewall rules.
 *
 * The version of the OpenAPI document: 2019-10-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PolicySettings model module.
 * @module model/PolicySettings
 * @version 2019-10-01
 */
class PolicySettings {
    /**
     * Constructs a new <code>PolicySettings</code>.
     * Defines top-level WebApplicationFirewallPolicy configuration settings.
     * @alias module:model/PolicySettings
     */
    constructor() { 
        
        PolicySettings.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PolicySettings</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PolicySettings} obj Optional instance to populate.
     * @return {module:model/PolicySettings} The populated <code>PolicySettings</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PolicySettings();

            if (data.hasOwnProperty('customBlockResponseBody')) {
                obj['customBlockResponseBody'] = ApiClient.convertToType(data['customBlockResponseBody'], 'String');
            }
            if (data.hasOwnProperty('customBlockResponseStatusCode')) {
                obj['customBlockResponseStatusCode'] = ApiClient.convertToType(data['customBlockResponseStatusCode'], 'Number');
            }
            if (data.hasOwnProperty('enabledState')) {
                obj['enabledState'] = ApiClient.convertToType(data['enabledState'], 'String');
            }
            if (data.hasOwnProperty('mode')) {
                obj['mode'] = ApiClient.convertToType(data['mode'], 'String');
            }
            if (data.hasOwnProperty('redirectUrl')) {
                obj['redirectUrl'] = ApiClient.convertToType(data['redirectUrl'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PolicySettings</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PolicySettings</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['customBlockResponseBody'] && !(typeof data['customBlockResponseBody'] === 'string' || data['customBlockResponseBody'] instanceof String)) {
            throw new Error("Expected the field `customBlockResponseBody` to be a primitive type in the JSON string but got " + data['customBlockResponseBody']);
        }
        // ensure the json data is a string
        if (data['enabledState'] && !(typeof data['enabledState'] === 'string' || data['enabledState'] instanceof String)) {
            throw new Error("Expected the field `enabledState` to be a primitive type in the JSON string but got " + data['enabledState']);
        }
        // ensure the json data is a string
        if (data['mode'] && !(typeof data['mode'] === 'string' || data['mode'] instanceof String)) {
            throw new Error("Expected the field `mode` to be a primitive type in the JSON string but got " + data['mode']);
        }
        // ensure the json data is a string
        if (data['redirectUrl'] && !(typeof data['redirectUrl'] === 'string' || data['redirectUrl'] instanceof String)) {
            throw new Error("Expected the field `redirectUrl` to be a primitive type in the JSON string but got " + data['redirectUrl']);
        }

        return true;
    }


}



/**
 * If the action type is block, customer can override the response body. The body must be specified in base64 encoding.
 * @member {String} customBlockResponseBody
 */
PolicySettings.prototype['customBlockResponseBody'] = undefined;

/**
 * If the action type is block, customer can override the response status code.
 * @member {Number} customBlockResponseStatusCode
 */
PolicySettings.prototype['customBlockResponseStatusCode'] = undefined;

/**
 * Describes if the policy is in enabled or disabled state. Defaults to Enabled if not specified.
 * @member {module:model/PolicySettings.EnabledStateEnum} enabledState
 */
PolicySettings.prototype['enabledState'] = undefined;

/**
 * Describes if it is in detection mode or prevention mode at policy level.
 * @member {module:model/PolicySettings.ModeEnum} mode
 */
PolicySettings.prototype['mode'] = undefined;

/**
 * If action type is redirect, this field represents redirect URL for the client.
 * @member {String} redirectUrl
 */
PolicySettings.prototype['redirectUrl'] = undefined;





/**
 * Allowed values for the <code>enabledState</code> property.
 * @enum {String}
 * @readonly
 */
PolicySettings['EnabledStateEnum'] = {

    /**
     * value: "Disabled"
     * @const
     */
    "Disabled": "Disabled",

    /**
     * value: "Enabled"
     * @const
     */
    "Enabled": "Enabled"
};


/**
 * Allowed values for the <code>mode</code> property.
 * @enum {String}
 * @readonly
 */
PolicySettings['ModeEnum'] = {

    /**
     * value: "Prevention"
     * @const
     */
    "Prevention": "Prevention",

    /**
     * value: "Detection"
     * @const
     */
    "Detection": "Detection"
};



export default PolicySettings;

