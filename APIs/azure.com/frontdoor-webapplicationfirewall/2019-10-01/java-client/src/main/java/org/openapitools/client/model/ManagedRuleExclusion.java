/*
 * WebApplicationFirewallManagement
 * APIs to manage web application firewall rules.
 *
 * The version of the OpenAPI document: 2019-10-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Exclude variables from managed rule evaluation.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:01:56.437663-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ManagedRuleExclusion {
  /**
   * The variable type to be excluded.
   */
  @JsonAdapter(MatchVariableEnum.Adapter.class)
  public enum MatchVariableEnum {
    REQUEST_HEADER_NAMES("RequestHeaderNames"),
    
    REQUEST_COOKIE_NAMES("RequestCookieNames"),
    
    QUERY_STRING_ARG_NAMES("QueryStringArgNames"),
    
    REQUEST_BODY_POST_ARG_NAMES("RequestBodyPostArgNames");

    private String value;

    MatchVariableEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MatchVariableEnum fromValue(String value) {
      for (MatchVariableEnum b : MatchVariableEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MatchVariableEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MatchVariableEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MatchVariableEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MatchVariableEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MatchVariableEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MATCH_VARIABLE = "matchVariable";
  @SerializedName(SERIALIZED_NAME_MATCH_VARIABLE)
  private MatchVariableEnum matchVariable;

  public static final String SERIALIZED_NAME_SELECTOR = "selector";
  @SerializedName(SERIALIZED_NAME_SELECTOR)
  private String selector;

  /**
   * Comparison operator to apply to the selector when specifying which elements in the collection this exclusion applies to.
   */
  @JsonAdapter(SelectorMatchOperatorEnum.Adapter.class)
  public enum SelectorMatchOperatorEnum {
    EQUALS("Equals"),
    
    CONTAINS("Contains"),
    
    STARTS_WITH("StartsWith"),
    
    ENDS_WITH("EndsWith"),
    
    EQUALS_ANY("EqualsAny");

    private String value;

    SelectorMatchOperatorEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SelectorMatchOperatorEnum fromValue(String value) {
      for (SelectorMatchOperatorEnum b : SelectorMatchOperatorEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SelectorMatchOperatorEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SelectorMatchOperatorEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SelectorMatchOperatorEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SelectorMatchOperatorEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SelectorMatchOperatorEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SELECTOR_MATCH_OPERATOR = "selectorMatchOperator";
  @SerializedName(SERIALIZED_NAME_SELECTOR_MATCH_OPERATOR)
  private SelectorMatchOperatorEnum selectorMatchOperator;

  public ManagedRuleExclusion() {
  }

  public ManagedRuleExclusion matchVariable(MatchVariableEnum matchVariable) {
    this.matchVariable = matchVariable;
    return this;
  }

  /**
   * The variable type to be excluded.
   * @return matchVariable
   */
  @javax.annotation.Nonnull
  public MatchVariableEnum getMatchVariable() {
    return matchVariable;
  }

  public void setMatchVariable(MatchVariableEnum matchVariable) {
    this.matchVariable = matchVariable;
  }


  public ManagedRuleExclusion selector(String selector) {
    this.selector = selector;
    return this;
  }

  /**
   * Selector value for which elements in the collection this exclusion applies to.
   * @return selector
   */
  @javax.annotation.Nonnull
  public String getSelector() {
    return selector;
  }

  public void setSelector(String selector) {
    this.selector = selector;
  }


  public ManagedRuleExclusion selectorMatchOperator(SelectorMatchOperatorEnum selectorMatchOperator) {
    this.selectorMatchOperator = selectorMatchOperator;
    return this;
  }

  /**
   * Comparison operator to apply to the selector when specifying which elements in the collection this exclusion applies to.
   * @return selectorMatchOperator
   */
  @javax.annotation.Nonnull
  public SelectorMatchOperatorEnum getSelectorMatchOperator() {
    return selectorMatchOperator;
  }

  public void setSelectorMatchOperator(SelectorMatchOperatorEnum selectorMatchOperator) {
    this.selectorMatchOperator = selectorMatchOperator;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ManagedRuleExclusion managedRuleExclusion = (ManagedRuleExclusion) o;
    return Objects.equals(this.matchVariable, managedRuleExclusion.matchVariable) &&
        Objects.equals(this.selector, managedRuleExclusion.selector) &&
        Objects.equals(this.selectorMatchOperator, managedRuleExclusion.selectorMatchOperator);
  }

  @Override
  public int hashCode() {
    return Objects.hash(matchVariable, selector, selectorMatchOperator);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ManagedRuleExclusion {\n");
    sb.append("    matchVariable: ").append(toIndentedString(matchVariable)).append("\n");
    sb.append("    selector: ").append(toIndentedString(selector)).append("\n");
    sb.append("    selectorMatchOperator: ").append(toIndentedString(selectorMatchOperator)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("matchVariable");
    openapiFields.add("selector");
    openapiFields.add("selectorMatchOperator");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("matchVariable");
    openapiRequiredFields.add("selector");
    openapiRequiredFields.add("selectorMatchOperator");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ManagedRuleExclusion
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ManagedRuleExclusion.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ManagedRuleExclusion is not found in the empty JSON string", ManagedRuleExclusion.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ManagedRuleExclusion.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ManagedRuleExclusion` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ManagedRuleExclusion.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("matchVariable").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `matchVariable` to be a primitive type in the JSON string but got `%s`", jsonObj.get("matchVariable").toString()));
      }
      // validate the required field `matchVariable`
      MatchVariableEnum.validateJsonElement(jsonObj.get("matchVariable"));
      if (!jsonObj.get("selector").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `selector` to be a primitive type in the JSON string but got `%s`", jsonObj.get("selector").toString()));
      }
      if (!jsonObj.get("selectorMatchOperator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `selectorMatchOperator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("selectorMatchOperator").toString()));
      }
      // validate the required field `selectorMatchOperator`
      SelectorMatchOperatorEnum.validateJsonElement(jsonObj.get("selectorMatchOperator"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ManagedRuleExclusion.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ManagedRuleExclusion' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ManagedRuleExclusion> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ManagedRuleExclusion.class));

       return (TypeAdapter<T>) new TypeAdapter<ManagedRuleExclusion>() {
           @Override
           public void write(JsonWriter out, ManagedRuleExclusion value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ManagedRuleExclusion read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ManagedRuleExclusion given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ManagedRuleExclusion
   * @throws IOException if the JSON string is invalid with respect to ManagedRuleExclusion
   */
  public static ManagedRuleExclusion fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ManagedRuleExclusion.class);
  }

  /**
   * Convert an instance of ManagedRuleExclusion to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

