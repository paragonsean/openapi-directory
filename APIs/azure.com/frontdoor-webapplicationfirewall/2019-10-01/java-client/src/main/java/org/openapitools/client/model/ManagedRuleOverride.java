/*
 * WebApplicationFirewallManagement
 * APIs to manage web application firewall rules.
 *
 * The version of the OpenAPI document: 2019-10-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ActionType;
import org.openapitools.client.model.ManagedRuleEnabledState;
import org.openapitools.client.model.ManagedRuleExclusion;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Defines a managed rule group override setting.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:01:56.437663-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ManagedRuleOverride {
  public static final String SERIALIZED_NAME_ACTION = "action";
  @SerializedName(SERIALIZED_NAME_ACTION)
  private ActionType action;

  public static final String SERIALIZED_NAME_ENABLED_STATE = "enabledState";
  @SerializedName(SERIALIZED_NAME_ENABLED_STATE)
  private ManagedRuleEnabledState enabledState;

  public static final String SERIALIZED_NAME_EXCLUSIONS = "exclusions";
  @SerializedName(SERIALIZED_NAME_EXCLUSIONS)
  private List<ManagedRuleExclusion> exclusions = new ArrayList<>();

  public static final String SERIALIZED_NAME_RULE_ID = "ruleId";
  @SerializedName(SERIALIZED_NAME_RULE_ID)
  private String ruleId;

  public ManagedRuleOverride() {
  }

  public ManagedRuleOverride action(ActionType action) {
    this.action = action;
    return this;
  }

  /**
   * Get action
   * @return action
   */
  @javax.annotation.Nullable
  public ActionType getAction() {
    return action;
  }

  public void setAction(ActionType action) {
    this.action = action;
  }


  public ManagedRuleOverride enabledState(ManagedRuleEnabledState enabledState) {
    this.enabledState = enabledState;
    return this;
  }

  /**
   * Get enabledState
   * @return enabledState
   */
  @javax.annotation.Nullable
  public ManagedRuleEnabledState getEnabledState() {
    return enabledState;
  }

  public void setEnabledState(ManagedRuleEnabledState enabledState) {
    this.enabledState = enabledState;
  }


  public ManagedRuleOverride exclusions(List<ManagedRuleExclusion> exclusions) {
    this.exclusions = exclusions;
    return this;
  }

  public ManagedRuleOverride addExclusionsItem(ManagedRuleExclusion exclusionsItem) {
    if (this.exclusions == null) {
      this.exclusions = new ArrayList<>();
    }
    this.exclusions.add(exclusionsItem);
    return this;
  }

  /**
   * Describes the exclusions that are applied to this specific rule.
   * @return exclusions
   */
  @javax.annotation.Nullable
  public List<ManagedRuleExclusion> getExclusions() {
    return exclusions;
  }

  public void setExclusions(List<ManagedRuleExclusion> exclusions) {
    this.exclusions = exclusions;
  }


  public ManagedRuleOverride ruleId(String ruleId) {
    this.ruleId = ruleId;
    return this;
  }

  /**
   * Identifier for the managed rule.
   * @return ruleId
   */
  @javax.annotation.Nonnull
  public String getRuleId() {
    return ruleId;
  }

  public void setRuleId(String ruleId) {
    this.ruleId = ruleId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ManagedRuleOverride managedRuleOverride = (ManagedRuleOverride) o;
    return Objects.equals(this.action, managedRuleOverride.action) &&
        Objects.equals(this.enabledState, managedRuleOverride.enabledState) &&
        Objects.equals(this.exclusions, managedRuleOverride.exclusions) &&
        Objects.equals(this.ruleId, managedRuleOverride.ruleId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(action, enabledState, exclusions, ruleId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ManagedRuleOverride {\n");
    sb.append("    action: ").append(toIndentedString(action)).append("\n");
    sb.append("    enabledState: ").append(toIndentedString(enabledState)).append("\n");
    sb.append("    exclusions: ").append(toIndentedString(exclusions)).append("\n");
    sb.append("    ruleId: ").append(toIndentedString(ruleId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("action");
    openapiFields.add("enabledState");
    openapiFields.add("exclusions");
    openapiFields.add("ruleId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ruleId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ManagedRuleOverride
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ManagedRuleOverride.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ManagedRuleOverride is not found in the empty JSON string", ManagedRuleOverride.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ManagedRuleOverride.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ManagedRuleOverride` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ManagedRuleOverride.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `action`
      if (jsonObj.get("action") != null && !jsonObj.get("action").isJsonNull()) {
        ActionType.validateJsonElement(jsonObj.get("action"));
      }
      // validate the optional field `enabledState`
      if (jsonObj.get("enabledState") != null && !jsonObj.get("enabledState").isJsonNull()) {
        ManagedRuleEnabledState.validateJsonElement(jsonObj.get("enabledState"));
      }
      if (jsonObj.get("exclusions") != null && !jsonObj.get("exclusions").isJsonNull()) {
        JsonArray jsonArrayexclusions = jsonObj.getAsJsonArray("exclusions");
        if (jsonArrayexclusions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("exclusions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `exclusions` to be an array in the JSON string but got `%s`", jsonObj.get("exclusions").toString()));
          }

          // validate the optional field `exclusions` (array)
          for (int i = 0; i < jsonArrayexclusions.size(); i++) {
            ManagedRuleExclusion.validateJsonElement(jsonArrayexclusions.get(i));
          };
        }
      }
      if (!jsonObj.get("ruleId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ruleId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ruleId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ManagedRuleOverride.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ManagedRuleOverride' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ManagedRuleOverride> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ManagedRuleOverride.class));

       return (TypeAdapter<T>) new TypeAdapter<ManagedRuleOverride>() {
           @Override
           public void write(JsonWriter out, ManagedRuleOverride value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ManagedRuleOverride read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ManagedRuleOverride given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ManagedRuleOverride
   * @throws IOException if the JSON string is invalid with respect to ManagedRuleOverride
   */
  public static ManagedRuleOverride fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ManagedRuleOverride.class);
  }

  /**
   * Convert an instance of ManagedRuleOverride to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

