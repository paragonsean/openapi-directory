# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ManagedRuleExclusion(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, match_variable: str=None, selector: str=None, selector_match_operator: str=None):
        """ManagedRuleExclusion - a model defined in OpenAPI

        :param match_variable: The match_variable of this ManagedRuleExclusion.
        :param selector: The selector of this ManagedRuleExclusion.
        :param selector_match_operator: The selector_match_operator of this ManagedRuleExclusion.
        """
        self.openapi_types = {
            'match_variable': str,
            'selector': str,
            'selector_match_operator': str
        }

        self.attribute_map = {
            'match_variable': 'matchVariable',
            'selector': 'selector',
            'selector_match_operator': 'selectorMatchOperator'
        }

        self._match_variable = match_variable
        self._selector = selector
        self._selector_match_operator = selector_match_operator

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ManagedRuleExclusion':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ManagedRuleExclusion of this ManagedRuleExclusion.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def match_variable(self):
        """Gets the match_variable of this ManagedRuleExclusion.

        The variable type to be excluded.

        :return: The match_variable of this ManagedRuleExclusion.
        :rtype: str
        """
        return self._match_variable

    @match_variable.setter
    def match_variable(self, match_variable):
        """Sets the match_variable of this ManagedRuleExclusion.

        The variable type to be excluded.

        :param match_variable: The match_variable of this ManagedRuleExclusion.
        :type match_variable: str
        """
        allowed_values = ["RequestHeaderNames", "RequestCookieNames", "QueryStringArgNames", "RequestBodyPostArgNames"]  # noqa: E501
        if match_variable not in allowed_values:
            raise ValueError(
                "Invalid value for `match_variable` ({0}), must be one of {1}"
                .format(match_variable, allowed_values)
            )

        self._match_variable = match_variable

    @property
    def selector(self):
        """Gets the selector of this ManagedRuleExclusion.

        Selector value for which elements in the collection this exclusion applies to.

        :return: The selector of this ManagedRuleExclusion.
        :rtype: str
        """
        return self._selector

    @selector.setter
    def selector(self, selector):
        """Sets the selector of this ManagedRuleExclusion.

        Selector value for which elements in the collection this exclusion applies to.

        :param selector: The selector of this ManagedRuleExclusion.
        :type selector: str
        """
        if selector is None:
            raise ValueError("Invalid value for `selector`, must not be `None`")

        self._selector = selector

    @property
    def selector_match_operator(self):
        """Gets the selector_match_operator of this ManagedRuleExclusion.

        Comparison operator to apply to the selector when specifying which elements in the collection this exclusion applies to.

        :return: The selector_match_operator of this ManagedRuleExclusion.
        :rtype: str
        """
        return self._selector_match_operator

    @selector_match_operator.setter
    def selector_match_operator(self, selector_match_operator):
        """Sets the selector_match_operator of this ManagedRuleExclusion.

        Comparison operator to apply to the selector when specifying which elements in the collection this exclusion applies to.

        :param selector_match_operator: The selector_match_operator of this ManagedRuleExclusion.
        :type selector_match_operator: str
        """
        allowed_values = ["Equals", "Contains", "StartsWith", "EndsWith", "EqualsAny"]  # noqa: E501
        if selector_match_operator not in allowed_values:
            raise ValueError(
                "Invalid value for `selector_match_operator` ({0}), must be one of {1}"
                .format(selector_match_operator, allowed_values)
            )

        self._selector_match_operator = selector_match_operator
