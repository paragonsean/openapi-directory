# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class PolicySettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, custom_block_response_body: str=None, custom_block_response_status_code: int=None, enabled_state: str=None, mode: str=None, redirect_url: str=None):
        """PolicySettings - a model defined in OpenAPI

        :param custom_block_response_body: The custom_block_response_body of this PolicySettings.
        :param custom_block_response_status_code: The custom_block_response_status_code of this PolicySettings.
        :param enabled_state: The enabled_state of this PolicySettings.
        :param mode: The mode of this PolicySettings.
        :param redirect_url: The redirect_url of this PolicySettings.
        """
        self.openapi_types = {
            'custom_block_response_body': str,
            'custom_block_response_status_code': int,
            'enabled_state': str,
            'mode': str,
            'redirect_url': str
        }

        self.attribute_map = {
            'custom_block_response_body': 'customBlockResponseBody',
            'custom_block_response_status_code': 'customBlockResponseStatusCode',
            'enabled_state': 'enabledState',
            'mode': 'mode',
            'redirect_url': 'redirectUrl'
        }

        self._custom_block_response_body = custom_block_response_body
        self._custom_block_response_status_code = custom_block_response_status_code
        self._enabled_state = enabled_state
        self._mode = mode
        self._redirect_url = redirect_url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PolicySettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PolicySettings of this PolicySettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def custom_block_response_body(self):
        """Gets the custom_block_response_body of this PolicySettings.

        If the action type is block, customer can override the response body. The body must be specified in base64 encoding.

        :return: The custom_block_response_body of this PolicySettings.
        :rtype: str
        """
        return self._custom_block_response_body

    @custom_block_response_body.setter
    def custom_block_response_body(self, custom_block_response_body):
        """Sets the custom_block_response_body of this PolicySettings.

        If the action type is block, customer can override the response body. The body must be specified in base64 encoding.

        :param custom_block_response_body: The custom_block_response_body of this PolicySettings.
        :type custom_block_response_body: str
        """
        if custom_block_response_body is not None and not re.search(r'^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=|[A-Za-z0-9+\/]{4})$', custom_block_response_body):
            raise ValueError("Invalid value for `custom_block_response_body`, must be a follow pattern or equal to `/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=|[A-Za-z0-9+\/]{4})$/`")

        self._custom_block_response_body = custom_block_response_body

    @property
    def custom_block_response_status_code(self):
        """Gets the custom_block_response_status_code of this PolicySettings.

        If the action type is block, customer can override the response status code.

        :return: The custom_block_response_status_code of this PolicySettings.
        :rtype: int
        """
        return self._custom_block_response_status_code

    @custom_block_response_status_code.setter
    def custom_block_response_status_code(self, custom_block_response_status_code):
        """Sets the custom_block_response_status_code of this PolicySettings.

        If the action type is block, customer can override the response status code.

        :param custom_block_response_status_code: The custom_block_response_status_code of this PolicySettings.
        :type custom_block_response_status_code: int
        """

        self._custom_block_response_status_code = custom_block_response_status_code

    @property
    def enabled_state(self):
        """Gets the enabled_state of this PolicySettings.

        Describes if the policy is in enabled or disabled state. Defaults to Enabled if not specified.

        :return: The enabled_state of this PolicySettings.
        :rtype: str
        """
        return self._enabled_state

    @enabled_state.setter
    def enabled_state(self, enabled_state):
        """Sets the enabled_state of this PolicySettings.

        Describes if the policy is in enabled or disabled state. Defaults to Enabled if not specified.

        :param enabled_state: The enabled_state of this PolicySettings.
        :type enabled_state: str
        """
        allowed_values = ["Disabled", "Enabled"]  # noqa: E501
        if enabled_state not in allowed_values:
            raise ValueError(
                "Invalid value for `enabled_state` ({0}), must be one of {1}"
                .format(enabled_state, allowed_values)
            )

        self._enabled_state = enabled_state

    @property
    def mode(self):
        """Gets the mode of this PolicySettings.

        Describes if it is in detection mode or prevention mode at policy level.

        :return: The mode of this PolicySettings.
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this PolicySettings.

        Describes if it is in detection mode or prevention mode at policy level.

        :param mode: The mode of this PolicySettings.
        :type mode: str
        """
        allowed_values = ["Prevention", "Detection"]  # noqa: E501
        if mode not in allowed_values:
            raise ValueError(
                "Invalid value for `mode` ({0}), must be one of {1}"
                .format(mode, allowed_values)
            )

        self._mode = mode

    @property
    def redirect_url(self):
        """Gets the redirect_url of this PolicySettings.

        If action type is redirect, this field represents redirect URL for the client.

        :return: The redirect_url of this PolicySettings.
        :rtype: str
        """
        return self._redirect_url

    @redirect_url.setter
    def redirect_url(self, redirect_url):
        """Sets the redirect_url of this PolicySettings.

        If action type is redirect, this field represents redirect URL for the client.

        :param redirect_url: The redirect_url of this PolicySettings.
        :type redirect_url: str
        """

        self._redirect_url = redirect_url
