# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.action_type import ActionType
from openapi_server.models.managed_rule_enabled_state import ManagedRuleEnabledState
from openapi_server.models.managed_rule_exclusion import ManagedRuleExclusion
from openapi_server import util


class ManagedRuleOverride(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action: ActionType=None, enabled_state: ManagedRuleEnabledState=None, exclusions: List[ManagedRuleExclusion]=None, rule_id: str=None):
        """ManagedRuleOverride - a model defined in OpenAPI

        :param action: The action of this ManagedRuleOverride.
        :param enabled_state: The enabled_state of this ManagedRuleOverride.
        :param exclusions: The exclusions of this ManagedRuleOverride.
        :param rule_id: The rule_id of this ManagedRuleOverride.
        """
        self.openapi_types = {
            'action': ActionType,
            'enabled_state': ManagedRuleEnabledState,
            'exclusions': List[ManagedRuleExclusion],
            'rule_id': str
        }

        self.attribute_map = {
            'action': 'action',
            'enabled_state': 'enabledState',
            'exclusions': 'exclusions',
            'rule_id': 'ruleId'
        }

        self._action = action
        self._enabled_state = enabled_state
        self._exclusions = exclusions
        self._rule_id = rule_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ManagedRuleOverride':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ManagedRuleOverride of this ManagedRuleOverride.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action(self):
        """Gets the action of this ManagedRuleOverride.


        :return: The action of this ManagedRuleOverride.
        :rtype: ActionType
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this ManagedRuleOverride.


        :param action: The action of this ManagedRuleOverride.
        :type action: ActionType
        """

        self._action = action

    @property
    def enabled_state(self):
        """Gets the enabled_state of this ManagedRuleOverride.


        :return: The enabled_state of this ManagedRuleOverride.
        :rtype: ManagedRuleEnabledState
        """
        return self._enabled_state

    @enabled_state.setter
    def enabled_state(self, enabled_state):
        """Sets the enabled_state of this ManagedRuleOverride.


        :param enabled_state: The enabled_state of this ManagedRuleOverride.
        :type enabled_state: ManagedRuleEnabledState
        """

        self._enabled_state = enabled_state

    @property
    def exclusions(self):
        """Gets the exclusions of this ManagedRuleOverride.

        Describes the exclusions that are applied to this specific rule.

        :return: The exclusions of this ManagedRuleOverride.
        :rtype: List[ManagedRuleExclusion]
        """
        return self._exclusions

    @exclusions.setter
    def exclusions(self, exclusions):
        """Sets the exclusions of this ManagedRuleOverride.

        Describes the exclusions that are applied to this specific rule.

        :param exclusions: The exclusions of this ManagedRuleOverride.
        :type exclusions: List[ManagedRuleExclusion]
        """

        self._exclusions = exclusions

    @property
    def rule_id(self):
        """Gets the rule_id of this ManagedRuleOverride.

        Identifier for the managed rule.

        :return: The rule_id of this ManagedRuleOverride.
        :rtype: str
        """
        return self._rule_id

    @rule_id.setter
    def rule_id(self, rule_id):
        """Sets the rule_id of this ManagedRuleOverride.

        Identifier for the managed rule.

        :param rule_id: The rule_id of this ManagedRuleOverride.
        :type rule_id: str
        """
        if rule_id is None:
            raise ValueError("Invalid value for `rule_id`, must not be `None`")

        self._rule_id = rule_id
