# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.action_type import ActionType
from openapi_server.models.match_condition import MatchCondition
from openapi_server import util


class CustomRule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action: ActionType=None, enabled_state: str=None, match_conditions: List[MatchCondition]=None, name: str=None, priority: int=None, rate_limit_duration_in_minutes: int=None, rate_limit_threshold: int=None, rule_type: str=None):
        """CustomRule - a model defined in OpenAPI

        :param action: The action of this CustomRule.
        :param enabled_state: The enabled_state of this CustomRule.
        :param match_conditions: The match_conditions of this CustomRule.
        :param name: The name of this CustomRule.
        :param priority: The priority of this CustomRule.
        :param rate_limit_duration_in_minutes: The rate_limit_duration_in_minutes of this CustomRule.
        :param rate_limit_threshold: The rate_limit_threshold of this CustomRule.
        :param rule_type: The rule_type of this CustomRule.
        """
        self.openapi_types = {
            'action': ActionType,
            'enabled_state': str,
            'match_conditions': List[MatchCondition],
            'name': str,
            'priority': int,
            'rate_limit_duration_in_minutes': int,
            'rate_limit_threshold': int,
            'rule_type': str
        }

        self.attribute_map = {
            'action': 'action',
            'enabled_state': 'enabledState',
            'match_conditions': 'matchConditions',
            'name': 'name',
            'priority': 'priority',
            'rate_limit_duration_in_minutes': 'rateLimitDurationInMinutes',
            'rate_limit_threshold': 'rateLimitThreshold',
            'rule_type': 'ruleType'
        }

        self._action = action
        self._enabled_state = enabled_state
        self._match_conditions = match_conditions
        self._name = name
        self._priority = priority
        self._rate_limit_duration_in_minutes = rate_limit_duration_in_minutes
        self._rate_limit_threshold = rate_limit_threshold
        self._rule_type = rule_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CustomRule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CustomRule of this CustomRule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action(self):
        """Gets the action of this CustomRule.


        :return: The action of this CustomRule.
        :rtype: ActionType
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this CustomRule.


        :param action: The action of this CustomRule.
        :type action: ActionType
        """
        if action is None:
            raise ValueError("Invalid value for `action`, must not be `None`")

        self._action = action

    @property
    def enabled_state(self):
        """Gets the enabled_state of this CustomRule.

        Describes if the custom rule is in enabled or disabled state. Defaults to Enabled if not specified.

        :return: The enabled_state of this CustomRule.
        :rtype: str
        """
        return self._enabled_state

    @enabled_state.setter
    def enabled_state(self, enabled_state):
        """Sets the enabled_state of this CustomRule.

        Describes if the custom rule is in enabled or disabled state. Defaults to Enabled if not specified.

        :param enabled_state: The enabled_state of this CustomRule.
        :type enabled_state: str
        """
        allowed_values = ["Disabled", "Enabled"]  # noqa: E501
        if enabled_state not in allowed_values:
            raise ValueError(
                "Invalid value for `enabled_state` ({0}), must be one of {1}"
                .format(enabled_state, allowed_values)
            )

        self._enabled_state = enabled_state

    @property
    def match_conditions(self):
        """Gets the match_conditions of this CustomRule.

        List of match conditions.

        :return: The match_conditions of this CustomRule.
        :rtype: List[MatchCondition]
        """
        return self._match_conditions

    @match_conditions.setter
    def match_conditions(self, match_conditions):
        """Sets the match_conditions of this CustomRule.

        List of match conditions.

        :param match_conditions: The match_conditions of this CustomRule.
        :type match_conditions: List[MatchCondition]
        """
        if match_conditions is None:
            raise ValueError("Invalid value for `match_conditions`, must not be `None`")

        self._match_conditions = match_conditions

    @property
    def name(self):
        """Gets the name of this CustomRule.

        Describes the name of the rule.

        :return: The name of this CustomRule.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CustomRule.

        Describes the name of the rule.

        :param name: The name of this CustomRule.
        :type name: str
        """
        if name is not None and len(name) > 128:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `128`")

        self._name = name

    @property
    def priority(self):
        """Gets the priority of this CustomRule.

        Describes priority of the rule. Rules with a lower value will be evaluated before rules with a higher value.

        :return: The priority of this CustomRule.
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this CustomRule.

        Describes priority of the rule. Rules with a lower value will be evaluated before rules with a higher value.

        :param priority: The priority of this CustomRule.
        :type priority: int
        """
        if priority is None:
            raise ValueError("Invalid value for `priority`, must not be `None`")

        self._priority = priority

    @property
    def rate_limit_duration_in_minutes(self):
        """Gets the rate_limit_duration_in_minutes of this CustomRule.

        Time window for resetting the rate limit count. Default is 1 minute.

        :return: The rate_limit_duration_in_minutes of this CustomRule.
        :rtype: int
        """
        return self._rate_limit_duration_in_minutes

    @rate_limit_duration_in_minutes.setter
    def rate_limit_duration_in_minutes(self, rate_limit_duration_in_minutes):
        """Sets the rate_limit_duration_in_minutes of this CustomRule.

        Time window for resetting the rate limit count. Default is 1 minute.

        :param rate_limit_duration_in_minutes: The rate_limit_duration_in_minutes of this CustomRule.
        :type rate_limit_duration_in_minutes: int
        """
        if rate_limit_duration_in_minutes is not None and rate_limit_duration_in_minutes > 5:
            raise ValueError("Invalid value for `rate_limit_duration_in_minutes`, must be a value less than or equal to `5`")
        if rate_limit_duration_in_minutes is not None and rate_limit_duration_in_minutes < 0:
            raise ValueError("Invalid value for `rate_limit_duration_in_minutes`, must be a value greater than or equal to `0`")

        self._rate_limit_duration_in_minutes = rate_limit_duration_in_minutes

    @property
    def rate_limit_threshold(self):
        """Gets the rate_limit_threshold of this CustomRule.

        Number of allowed requests per client within the time window.

        :return: The rate_limit_threshold of this CustomRule.
        :rtype: int
        """
        return self._rate_limit_threshold

    @rate_limit_threshold.setter
    def rate_limit_threshold(self, rate_limit_threshold):
        """Sets the rate_limit_threshold of this CustomRule.

        Number of allowed requests per client within the time window.

        :param rate_limit_threshold: The rate_limit_threshold of this CustomRule.
        :type rate_limit_threshold: int
        """
        if rate_limit_threshold is not None and rate_limit_threshold < 0:
            raise ValueError("Invalid value for `rate_limit_threshold`, must be a value greater than or equal to `0`")

        self._rate_limit_threshold = rate_limit_threshold

    @property
    def rule_type(self):
        """Gets the rule_type of this CustomRule.

        Describes type of rule.

        :return: The rule_type of this CustomRule.
        :rtype: str
        """
        return self._rule_type

    @rule_type.setter
    def rule_type(self, rule_type):
        """Sets the rule_type of this CustomRule.

        Describes type of rule.

        :param rule_type: The rule_type of this CustomRule.
        :type rule_type: str
        """
        allowed_values = ["MatchRule", "RateLimitRule"]  # noqa: E501
        if rule_type not in allowed_values:
            raise ValueError(
                "Invalid value for `rule_type` ({0}), must be one of {1}"
                .format(rule_type, allowed_values)
            )

        self._rule_type = rule_type
