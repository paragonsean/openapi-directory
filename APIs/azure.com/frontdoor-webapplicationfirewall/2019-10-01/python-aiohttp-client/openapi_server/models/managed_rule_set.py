# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.managed_rule_exclusion import ManagedRuleExclusion
from openapi_server.models.managed_rule_group_override import ManagedRuleGroupOverride
from openapi_server import util


class ManagedRuleSet(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, exclusions: List[ManagedRuleExclusion]=None, rule_group_overrides: List[ManagedRuleGroupOverride]=None, rule_set_type: str=None, rule_set_version: str=None):
        """ManagedRuleSet - a model defined in OpenAPI

        :param exclusions: The exclusions of this ManagedRuleSet.
        :param rule_group_overrides: The rule_group_overrides of this ManagedRuleSet.
        :param rule_set_type: The rule_set_type of this ManagedRuleSet.
        :param rule_set_version: The rule_set_version of this ManagedRuleSet.
        """
        self.openapi_types = {
            'exclusions': List[ManagedRuleExclusion],
            'rule_group_overrides': List[ManagedRuleGroupOverride],
            'rule_set_type': str,
            'rule_set_version': str
        }

        self.attribute_map = {
            'exclusions': 'exclusions',
            'rule_group_overrides': 'ruleGroupOverrides',
            'rule_set_type': 'ruleSetType',
            'rule_set_version': 'ruleSetVersion'
        }

        self._exclusions = exclusions
        self._rule_group_overrides = rule_group_overrides
        self._rule_set_type = rule_set_type
        self._rule_set_version = rule_set_version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ManagedRuleSet':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ManagedRuleSet of this ManagedRuleSet.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def exclusions(self):
        """Gets the exclusions of this ManagedRuleSet.

        Describes the exclusions that are applied to all rules in the set.

        :return: The exclusions of this ManagedRuleSet.
        :rtype: List[ManagedRuleExclusion]
        """
        return self._exclusions

    @exclusions.setter
    def exclusions(self, exclusions):
        """Sets the exclusions of this ManagedRuleSet.

        Describes the exclusions that are applied to all rules in the set.

        :param exclusions: The exclusions of this ManagedRuleSet.
        :type exclusions: List[ManagedRuleExclusion]
        """

        self._exclusions = exclusions

    @property
    def rule_group_overrides(self):
        """Gets the rule_group_overrides of this ManagedRuleSet.

        Defines the rule group overrides to apply to the rule set.

        :return: The rule_group_overrides of this ManagedRuleSet.
        :rtype: List[ManagedRuleGroupOverride]
        """
        return self._rule_group_overrides

    @rule_group_overrides.setter
    def rule_group_overrides(self, rule_group_overrides):
        """Sets the rule_group_overrides of this ManagedRuleSet.

        Defines the rule group overrides to apply to the rule set.

        :param rule_group_overrides: The rule_group_overrides of this ManagedRuleSet.
        :type rule_group_overrides: List[ManagedRuleGroupOverride]
        """

        self._rule_group_overrides = rule_group_overrides

    @property
    def rule_set_type(self):
        """Gets the rule_set_type of this ManagedRuleSet.

        Defines the rule set type to use.

        :return: The rule_set_type of this ManagedRuleSet.
        :rtype: str
        """
        return self._rule_set_type

    @rule_set_type.setter
    def rule_set_type(self, rule_set_type):
        """Sets the rule_set_type of this ManagedRuleSet.

        Defines the rule set type to use.

        :param rule_set_type: The rule_set_type of this ManagedRuleSet.
        :type rule_set_type: str
        """
        if rule_set_type is None:
            raise ValueError("Invalid value for `rule_set_type`, must not be `None`")

        self._rule_set_type = rule_set_type

    @property
    def rule_set_version(self):
        """Gets the rule_set_version of this ManagedRuleSet.

        Defines the version of the rule set to use.

        :return: The rule_set_version of this ManagedRuleSet.
        :rtype: str
        """
        return self._rule_set_version

    @rule_set_version.setter
    def rule_set_version(self, rule_set_version):
        """Sets the rule_set_version of this ManagedRuleSet.

        Defines the version of the rule set to use.

        :param rule_set_version: The rule_set_version of this ManagedRuleSet.
        :type rule_set_version: str
        """
        if rule_set_version is None:
            raise ValueError("Invalid value for `rule_set_version`, must not be `None`")

        self._rule_set_version = rule_set_version
