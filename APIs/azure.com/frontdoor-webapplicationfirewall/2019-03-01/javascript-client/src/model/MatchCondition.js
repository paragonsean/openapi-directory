/**
 * WebApplicationFirewallManagement
 * APIs to manage web application firewall rules.
 *
 * The version of the OpenAPI document: 2019-03-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TransformType from './TransformType';

/**
 * The MatchCondition model module.
 * @module model/MatchCondition
 * @version 2019-03-01
 */
class MatchCondition {
    /**
     * Constructs a new <code>MatchCondition</code>.
     * Define a match condition.
     * @alias module:model/MatchCondition
     * @param matchValue {Array.<String>} List of possible match values.
     * @param matchVariable {module:model/MatchCondition.MatchVariableEnum} Request variable to compare with.
     * @param operator {module:model/MatchCondition.OperatorEnum} Comparison type to use for matching with the variable value.
     */
    constructor(matchValue, matchVariable, operator) { 
        
        MatchCondition.initialize(this, matchValue, matchVariable, operator);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, matchValue, matchVariable, operator) { 
        obj['matchValue'] = matchValue;
        obj['matchVariable'] = matchVariable;
        obj['operator'] = operator;
    }

    /**
     * Constructs a <code>MatchCondition</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MatchCondition} obj Optional instance to populate.
     * @return {module:model/MatchCondition} The populated <code>MatchCondition</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MatchCondition();

            if (data.hasOwnProperty('matchValue')) {
                obj['matchValue'] = ApiClient.convertToType(data['matchValue'], ['String']);
            }
            if (data.hasOwnProperty('matchVariable')) {
                obj['matchVariable'] = ApiClient.convertToType(data['matchVariable'], 'String');
            }
            if (data.hasOwnProperty('negateCondition')) {
                obj['negateCondition'] = ApiClient.convertToType(data['negateCondition'], 'Boolean');
            }
            if (data.hasOwnProperty('operator')) {
                obj['operator'] = ApiClient.convertToType(data['operator'], 'String');
            }
            if (data.hasOwnProperty('selector')) {
                obj['selector'] = ApiClient.convertToType(data['selector'], 'String');
            }
            if (data.hasOwnProperty('transforms')) {
                obj['transforms'] = ApiClient.convertToType(data['transforms'], [TransformType]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MatchCondition</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MatchCondition</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of MatchCondition.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['matchValue'])) {
            throw new Error("Expected the field `matchValue` to be an array in the JSON data but got " + data['matchValue']);
        }
        // ensure the json data is a string
        if (data['matchVariable'] && !(typeof data['matchVariable'] === 'string' || data['matchVariable'] instanceof String)) {
            throw new Error("Expected the field `matchVariable` to be a primitive type in the JSON string but got " + data['matchVariable']);
        }
        // ensure the json data is a string
        if (data['operator'] && !(typeof data['operator'] === 'string' || data['operator'] instanceof String)) {
            throw new Error("Expected the field `operator` to be a primitive type in the JSON string but got " + data['operator']);
        }
        // ensure the json data is a string
        if (data['selector'] && !(typeof data['selector'] === 'string' || data['selector'] instanceof String)) {
            throw new Error("Expected the field `selector` to be a primitive type in the JSON string but got " + data['selector']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['transforms'])) {
            throw new Error("Expected the field `transforms` to be an array in the JSON data but got " + data['transforms']);
        }

        return true;
    }


}

MatchCondition.RequiredProperties = ["matchValue", "matchVariable", "operator"];

/**
 * List of possible match values.
 * @member {Array.<String>} matchValue
 */
MatchCondition.prototype['matchValue'] = undefined;

/**
 * Request variable to compare with.
 * @member {module:model/MatchCondition.MatchVariableEnum} matchVariable
 */
MatchCondition.prototype['matchVariable'] = undefined;

/**
 * Describes if the result of this condition should be negated.
 * @member {Boolean} negateCondition
 */
MatchCondition.prototype['negateCondition'] = undefined;

/**
 * Comparison type to use for matching with the variable value.
 * @member {module:model/MatchCondition.OperatorEnum} operator
 */
MatchCondition.prototype['operator'] = undefined;

/**
 * Match against a specific key from the QueryString, PostArgs, RequestHeader or Cookies variables. Default is null.
 * @member {String} selector
 */
MatchCondition.prototype['selector'] = undefined;

/**
 * List of transforms.
 * @member {Array.<module:model/TransformType>} transforms
 */
MatchCondition.prototype['transforms'] = undefined;





/**
 * Allowed values for the <code>matchVariable</code> property.
 * @enum {String}
 * @readonly
 */
MatchCondition['MatchVariableEnum'] = {

    /**
     * value: "RemoteAddr"
     * @const
     */
    "RemoteAddr": "RemoteAddr",

    /**
     * value: "RequestMethod"
     * @const
     */
    "RequestMethod": "RequestMethod",

    /**
     * value: "QueryString"
     * @const
     */
    "QueryString": "QueryString",

    /**
     * value: "PostArgs"
     * @const
     */
    "PostArgs": "PostArgs",

    /**
     * value: "RequestUri"
     * @const
     */
    "RequestUri": "RequestUri",

    /**
     * value: "RequestHeader"
     * @const
     */
    "RequestHeader": "RequestHeader",

    /**
     * value: "RequestBody"
     * @const
     */
    "RequestBody": "RequestBody",

    /**
     * value: "Cookies"
     * @const
     */
    "Cookies": "Cookies",

    /**
     * value: "SocketAddr"
     * @const
     */
    "SocketAddr": "SocketAddr"
};


/**
 * Allowed values for the <code>operator</code> property.
 * @enum {String}
 * @readonly
 */
MatchCondition['OperatorEnum'] = {

    /**
     * value: "Any"
     * @const
     */
    "Any": "Any",

    /**
     * value: "IPMatch"
     * @const
     */
    "IPMatch": "IPMatch",

    /**
     * value: "GeoMatch"
     * @const
     */
    "GeoMatch": "GeoMatch",

    /**
     * value: "Equal"
     * @const
     */
    "Equal": "Equal",

    /**
     * value: "Contains"
     * @const
     */
    "Contains": "Contains",

    /**
     * value: "LessThan"
     * @const
     */
    "LessThan": "LessThan",

    /**
     * value: "GreaterThan"
     * @const
     */
    "GreaterThan": "GreaterThan",

    /**
     * value: "LessThanOrEqual"
     * @const
     */
    "LessThanOrEqual": "LessThanOrEqual",

    /**
     * value: "GreaterThanOrEqual"
     * @const
     */
    "GreaterThanOrEqual": "GreaterThanOrEqual",

    /**
     * value: "BeginsWith"
     * @const
     */
    "BeginsWith": "BeginsWith",

    /**
     * value: "EndsWith"
     * @const
     */
    "EndsWith": "EndsWith",

    /**
     * value: "RegEx"
     * @const
     */
    "RegEx": "RegEx"
};



export default MatchCondition;

