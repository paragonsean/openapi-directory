/*
 * WebApplicationFirewallManagement
 * APIs to manage web application firewall rules.
 *
 * The version of the OpenAPI document: 2019-03-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ManagedRuleGroupDefinition;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties for a managed rule set definition.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:01:54.581219-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ManagedRuleSetDefinitionProperties {
  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private String provisioningState;

  public static final String SERIALIZED_NAME_RULE_GROUPS = "ruleGroups";
  @SerializedName(SERIALIZED_NAME_RULE_GROUPS)
  private List<ManagedRuleGroupDefinition> ruleGroups = new ArrayList<>();

  public static final String SERIALIZED_NAME_RULE_SET_TYPE = "ruleSetType";
  @SerializedName(SERIALIZED_NAME_RULE_SET_TYPE)
  private String ruleSetType;

  public static final String SERIALIZED_NAME_RULE_SET_VERSION = "ruleSetVersion";
  @SerializedName(SERIALIZED_NAME_RULE_SET_VERSION)
  private String ruleSetVersion;

  public ManagedRuleSetDefinitionProperties() {
  }

  public ManagedRuleSetDefinitionProperties(
     String provisioningState, 
     List<ManagedRuleGroupDefinition> ruleGroups, 
     String ruleSetType, 
     String ruleSetVersion
  ) {
    this();
    this.provisioningState = provisioningState;
    this.ruleGroups = ruleGroups;
    this.ruleSetType = ruleSetType;
    this.ruleSetVersion = ruleSetVersion;
  }

  /**
   * Provisioning state of the managed rule set.
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public String getProvisioningState() {
    return provisioningState;
  }



  /**
   * Rule groups of the managed rule set.
   * @return ruleGroups
   */
  @javax.annotation.Nullable
  public List<ManagedRuleGroupDefinition> getRuleGroups() {
    return ruleGroups;
  }



  /**
   * Type of the managed rule set.
   * @return ruleSetType
   */
  @javax.annotation.Nullable
  public String getRuleSetType() {
    return ruleSetType;
  }



  /**
   * Version of the managed rule set type.
   * @return ruleSetVersion
   */
  @javax.annotation.Nullable
  public String getRuleSetVersion() {
    return ruleSetVersion;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ManagedRuleSetDefinitionProperties managedRuleSetDefinitionProperties = (ManagedRuleSetDefinitionProperties) o;
    return Objects.equals(this.provisioningState, managedRuleSetDefinitionProperties.provisioningState) &&
        Objects.equals(this.ruleGroups, managedRuleSetDefinitionProperties.ruleGroups) &&
        Objects.equals(this.ruleSetType, managedRuleSetDefinitionProperties.ruleSetType) &&
        Objects.equals(this.ruleSetVersion, managedRuleSetDefinitionProperties.ruleSetVersion);
  }

  @Override
  public int hashCode() {
    return Objects.hash(provisioningState, ruleGroups, ruleSetType, ruleSetVersion);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ManagedRuleSetDefinitionProperties {\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("    ruleGroups: ").append(toIndentedString(ruleGroups)).append("\n");
    sb.append("    ruleSetType: ").append(toIndentedString(ruleSetType)).append("\n");
    sb.append("    ruleSetVersion: ").append(toIndentedString(ruleSetVersion)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("provisioningState");
    openapiFields.add("ruleGroups");
    openapiFields.add("ruleSetType");
    openapiFields.add("ruleSetVersion");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ManagedRuleSetDefinitionProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ManagedRuleSetDefinitionProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ManagedRuleSetDefinitionProperties is not found in the empty JSON string", ManagedRuleSetDefinitionProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ManagedRuleSetDefinitionProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ManagedRuleSetDefinitionProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) && !jsonObj.get("provisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningState").toString()));
      }
      if (jsonObj.get("ruleGroups") != null && !jsonObj.get("ruleGroups").isJsonNull()) {
        JsonArray jsonArrayruleGroups = jsonObj.getAsJsonArray("ruleGroups");
        if (jsonArrayruleGroups != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ruleGroups").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ruleGroups` to be an array in the JSON string but got `%s`", jsonObj.get("ruleGroups").toString()));
          }

          // validate the optional field `ruleGroups` (array)
          for (int i = 0; i < jsonArrayruleGroups.size(); i++) {
            ManagedRuleGroupDefinition.validateJsonElement(jsonArrayruleGroups.get(i));
          };
        }
      }
      if ((jsonObj.get("ruleSetType") != null && !jsonObj.get("ruleSetType").isJsonNull()) && !jsonObj.get("ruleSetType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ruleSetType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ruleSetType").toString()));
      }
      if ((jsonObj.get("ruleSetVersion") != null && !jsonObj.get("ruleSetVersion").isJsonNull()) && !jsonObj.get("ruleSetVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ruleSetVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ruleSetVersion").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ManagedRuleSetDefinitionProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ManagedRuleSetDefinitionProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ManagedRuleSetDefinitionProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ManagedRuleSetDefinitionProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<ManagedRuleSetDefinitionProperties>() {
           @Override
           public void write(JsonWriter out, ManagedRuleSetDefinitionProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ManagedRuleSetDefinitionProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ManagedRuleSetDefinitionProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ManagedRuleSetDefinitionProperties
   * @throws IOException if the JSON string is invalid with respect to ManagedRuleSetDefinitionProperties
   */
  public static ManagedRuleSetDefinitionProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ManagedRuleSetDefinitionProperties.class);
  }

  /**
   * Convert an instance of ManagedRuleSetDefinitionProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

