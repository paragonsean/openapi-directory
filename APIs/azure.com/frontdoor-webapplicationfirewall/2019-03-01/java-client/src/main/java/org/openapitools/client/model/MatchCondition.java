/*
 * WebApplicationFirewallManagement
 * APIs to manage web application firewall rules.
 *
 * The version of the OpenAPI document: 2019-03-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.TransformType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Define a match condition.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:01:54.581219-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MatchCondition {
  public static final String SERIALIZED_NAME_MATCH_VALUE = "matchValue";
  @SerializedName(SERIALIZED_NAME_MATCH_VALUE)
  private List<String> matchValue = new ArrayList<>();

  /**
   * Request variable to compare with.
   */
  @JsonAdapter(MatchVariableEnum.Adapter.class)
  public enum MatchVariableEnum {
    REMOTE_ADDR("RemoteAddr"),
    
    REQUEST_METHOD("RequestMethod"),
    
    QUERY_STRING("QueryString"),
    
    POST_ARGS("PostArgs"),
    
    REQUEST_URI("RequestUri"),
    
    REQUEST_HEADER("RequestHeader"),
    
    REQUEST_BODY("RequestBody"),
    
    COOKIES("Cookies"),
    
    SOCKET_ADDR("SocketAddr");

    private String value;

    MatchVariableEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MatchVariableEnum fromValue(String value) {
      for (MatchVariableEnum b : MatchVariableEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MatchVariableEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MatchVariableEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MatchVariableEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MatchVariableEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MatchVariableEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MATCH_VARIABLE = "matchVariable";
  @SerializedName(SERIALIZED_NAME_MATCH_VARIABLE)
  private MatchVariableEnum matchVariable;

  public static final String SERIALIZED_NAME_NEGATE_CONDITION = "negateCondition";
  @SerializedName(SERIALIZED_NAME_NEGATE_CONDITION)
  private Boolean negateCondition;

  /**
   * Comparison type to use for matching with the variable value.
   */
  @JsonAdapter(OperatorEnum.Adapter.class)
  public enum OperatorEnum {
    ANY("Any"),
    
    IP_MATCH("IPMatch"),
    
    GEO_MATCH("GeoMatch"),
    
    EQUAL("Equal"),
    
    CONTAINS("Contains"),
    
    LESS_THAN("LessThan"),
    
    GREATER_THAN("GreaterThan"),
    
    LESS_THAN_OR_EQUAL("LessThanOrEqual"),
    
    GREATER_THAN_OR_EQUAL("GreaterThanOrEqual"),
    
    BEGINS_WITH("BeginsWith"),
    
    ENDS_WITH("EndsWith"),
    
    REG_EX("RegEx");

    private String value;

    OperatorEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OperatorEnum fromValue(String value) {
      for (OperatorEnum b : OperatorEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OperatorEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OperatorEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OperatorEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OperatorEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OperatorEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_OPERATOR = "operator";
  @SerializedName(SERIALIZED_NAME_OPERATOR)
  private OperatorEnum operator;

  public static final String SERIALIZED_NAME_SELECTOR = "selector";
  @SerializedName(SERIALIZED_NAME_SELECTOR)
  private String selector;

  public static final String SERIALIZED_NAME_TRANSFORMS = "transforms";
  @SerializedName(SERIALIZED_NAME_TRANSFORMS)
  private List<TransformType> transforms = new ArrayList<>();

  public MatchCondition() {
  }

  public MatchCondition matchValue(List<String> matchValue) {
    this.matchValue = matchValue;
    return this;
  }

  public MatchCondition addMatchValueItem(String matchValueItem) {
    if (this.matchValue == null) {
      this.matchValue = new ArrayList<>();
    }
    this.matchValue.add(matchValueItem);
    return this;
  }

  /**
   * List of possible match values.
   * @return matchValue
   */
  @javax.annotation.Nonnull
  public List<String> getMatchValue() {
    return matchValue;
  }

  public void setMatchValue(List<String> matchValue) {
    this.matchValue = matchValue;
  }


  public MatchCondition matchVariable(MatchVariableEnum matchVariable) {
    this.matchVariable = matchVariable;
    return this;
  }

  /**
   * Request variable to compare with.
   * @return matchVariable
   */
  @javax.annotation.Nonnull
  public MatchVariableEnum getMatchVariable() {
    return matchVariable;
  }

  public void setMatchVariable(MatchVariableEnum matchVariable) {
    this.matchVariable = matchVariable;
  }


  public MatchCondition negateCondition(Boolean negateCondition) {
    this.negateCondition = negateCondition;
    return this;
  }

  /**
   * Describes if the result of this condition should be negated.
   * @return negateCondition
   */
  @javax.annotation.Nullable
  public Boolean getNegateCondition() {
    return negateCondition;
  }

  public void setNegateCondition(Boolean negateCondition) {
    this.negateCondition = negateCondition;
  }


  public MatchCondition operator(OperatorEnum operator) {
    this.operator = operator;
    return this;
  }

  /**
   * Comparison type to use for matching with the variable value.
   * @return operator
   */
  @javax.annotation.Nonnull
  public OperatorEnum getOperator() {
    return operator;
  }

  public void setOperator(OperatorEnum operator) {
    this.operator = operator;
  }


  public MatchCondition selector(String selector) {
    this.selector = selector;
    return this;
  }

  /**
   * Match against a specific key from the QueryString, PostArgs, RequestHeader or Cookies variables. Default is null.
   * @return selector
   */
  @javax.annotation.Nullable
  public String getSelector() {
    return selector;
  }

  public void setSelector(String selector) {
    this.selector = selector;
  }


  public MatchCondition transforms(List<TransformType> transforms) {
    this.transforms = transforms;
    return this;
  }

  public MatchCondition addTransformsItem(TransformType transformsItem) {
    if (this.transforms == null) {
      this.transforms = new ArrayList<>();
    }
    this.transforms.add(transformsItem);
    return this;
  }

  /**
   * List of transforms.
   * @return transforms
   */
  @javax.annotation.Nullable
  public List<TransformType> getTransforms() {
    return transforms;
  }

  public void setTransforms(List<TransformType> transforms) {
    this.transforms = transforms;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MatchCondition matchCondition = (MatchCondition) o;
    return Objects.equals(this.matchValue, matchCondition.matchValue) &&
        Objects.equals(this.matchVariable, matchCondition.matchVariable) &&
        Objects.equals(this.negateCondition, matchCondition.negateCondition) &&
        Objects.equals(this.operator, matchCondition.operator) &&
        Objects.equals(this.selector, matchCondition.selector) &&
        Objects.equals(this.transforms, matchCondition.transforms);
  }

  @Override
  public int hashCode() {
    return Objects.hash(matchValue, matchVariable, negateCondition, operator, selector, transforms);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MatchCondition {\n");
    sb.append("    matchValue: ").append(toIndentedString(matchValue)).append("\n");
    sb.append("    matchVariable: ").append(toIndentedString(matchVariable)).append("\n");
    sb.append("    negateCondition: ").append(toIndentedString(negateCondition)).append("\n");
    sb.append("    operator: ").append(toIndentedString(operator)).append("\n");
    sb.append("    selector: ").append(toIndentedString(selector)).append("\n");
    sb.append("    transforms: ").append(toIndentedString(transforms)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("matchValue");
    openapiFields.add("matchVariable");
    openapiFields.add("negateCondition");
    openapiFields.add("operator");
    openapiFields.add("selector");
    openapiFields.add("transforms");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("matchValue");
    openapiRequiredFields.add("matchVariable");
    openapiRequiredFields.add("operator");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MatchCondition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MatchCondition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MatchCondition is not found in the empty JSON string", MatchCondition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MatchCondition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MatchCondition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : MatchCondition.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the required json array is present
      if (jsonObj.get("matchValue") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("matchValue").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `matchValue` to be an array in the JSON string but got `%s`", jsonObj.get("matchValue").toString()));
      }
      if (!jsonObj.get("matchVariable").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `matchVariable` to be a primitive type in the JSON string but got `%s`", jsonObj.get("matchVariable").toString()));
      }
      // validate the required field `matchVariable`
      MatchVariableEnum.validateJsonElement(jsonObj.get("matchVariable"));
      if (!jsonObj.get("operator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `operator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("operator").toString()));
      }
      // validate the required field `operator`
      OperatorEnum.validateJsonElement(jsonObj.get("operator"));
      if ((jsonObj.get("selector") != null && !jsonObj.get("selector").isJsonNull()) && !jsonObj.get("selector").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `selector` to be a primitive type in the JSON string but got `%s`", jsonObj.get("selector").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("transforms") != null && !jsonObj.get("transforms").isJsonNull() && !jsonObj.get("transforms").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `transforms` to be an array in the JSON string but got `%s`", jsonObj.get("transforms").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MatchCondition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MatchCondition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MatchCondition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MatchCondition.class));

       return (TypeAdapter<T>) new TypeAdapter<MatchCondition>() {
           @Override
           public void write(JsonWriter out, MatchCondition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MatchCondition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MatchCondition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MatchCondition
   * @throws IOException if the JSON string is invalid with respect to MatchCondition
   */
  public static MatchCondition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MatchCondition.class);
  }

  /**
   * Convert an instance of MatchCondition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

