/**
 * AttestationClient
 * Describes the interface for the per-tenant enclave service.
 *
 * The version of the OpenAPI document: 2018-09-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AttestationPolicy from '../model/AttestationPolicy';
import CloudError from '../model/CloudError';

/**
* Policy service.
* @module api/PolicyApi
* @version 2018-09-01-preview
*/
export default class PolicyApi {

    /**
    * Constructs a new PolicyApi. 
    * @alias module:api/PolicyApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the policyGet operation.
     * @callback module:api/PolicyApi~policyGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AttestationPolicy} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the current policy for a given kind of TEE.
     * @param {module:model/String} apiVersion Client API version.
     * @param {module:model/String} tee Specifies the trusted execution environment to be used to validate the evidence
     * @param {module:api/PolicyApi~policyGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AttestationPolicy}
     */
    policyGet(apiVersion, tee, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling policyGet");
      }
      // verify the required parameter 'tee' is set
      if (tee === undefined || tee === null) {
        throw new Error("Missing the required parameter 'tee' when calling policyGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'api-version': apiVersion,
        'tee': tee
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AttestationPolicy;
      return this.apiClient.callApi(
        '/operations/policy/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the policyPrepareToSet operation.
     * @callback module:api/PolicyApi~policyPrepareToSetCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Accepts a new policy document and returns a JWT which expresses  used in preparation to set attestation policy.
     * @param {module:model/String} apiVersion Client API version.
     * @param {module:model/String} tee Specifies the trusted execution environment to be used to validate the evidence
     * @param {String} policyJws JSON Web Signature (See RFC7515) expressing the new policy
     * @param {module:api/PolicyApi~policyPrepareToSetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    policyPrepareToSet(apiVersion, tee, policyJws, callback) {
      let postBody = policyJws;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling policyPrepareToSet");
      }
      // verify the required parameter 'tee' is set
      if (tee === undefined || tee === null) {
        throw new Error("Missing the required parameter 'tee' when calling policyPrepareToSet");
      }
      // verify the required parameter 'policyJws' is set
      if (policyJws === undefined || policyJws === null) {
        throw new Error("Missing the required parameter 'policyJws' when calling policyPrepareToSet");
      }

      let pathParams = {
      };
      let queryParams = {
        'api-version': apiVersion,
        'tee': tee
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['text/plain'];
      let accepts = ['text/plain', 'application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/operations/policy/updatepolicy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the policyReset operation.
     * @callback module:api/PolicyApi~policyResetCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Resets the attestation policy for the specified tenant and reverts to the default policy.
     * @param {module:model/String} apiVersion Client API version.
     * @param {module:model/String} tee Specifies the trusted execution environment to be used to validate the evidence
     * @param {String} policyJws JSON Web Signature with an empty policy document
     * @param {module:api/PolicyApi~policyResetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    policyReset(apiVersion, tee, policyJws, callback) {
      let postBody = policyJws;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling policyReset");
      }
      // verify the required parameter 'tee' is set
      if (tee === undefined || tee === null) {
        throw new Error("Missing the required parameter 'tee' when calling policyReset");
      }
      // verify the required parameter 'policyJws' is set
      if (policyJws === undefined || policyJws === null) {
        throw new Error("Missing the required parameter 'policyJws' when calling policyReset");
      }

      let pathParams = {
      };
      let queryParams = {
        'api-version': apiVersion,
        'tee': tee
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['text/plain'];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/operations/policy/current', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the policySet operation.
     * @callback module:api/PolicyApi~policySetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sets the policy for a given kind of TEE.
     * @param {module:model/String} apiVersion Client API version.
     * @param {module:model/String} tee Specifies the trusted execution environment to be used to validate the evidence
     * @param {String} newAttestationPolicy JWT Expressing the new policy
     * @param {module:api/PolicyApi~policySetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    policySet(apiVersion, tee, newAttestationPolicy, callback) {
      let postBody = newAttestationPolicy;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling policySet");
      }
      // verify the required parameter 'tee' is set
      if (tee === undefined || tee === null) {
        throw new Error("Missing the required parameter 'tee' when calling policySet");
      }
      // verify the required parameter 'newAttestationPolicy' is set
      if (newAttestationPolicy === undefined || newAttestationPolicy === null) {
        throw new Error("Missing the required parameter 'newAttestationPolicy' when calling policySet");
      }

      let pathParams = {
      };
      let queryParams = {
        'api-version': apiVersion,
        'tee': tee
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['text/plain'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/operations/policy/current', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
