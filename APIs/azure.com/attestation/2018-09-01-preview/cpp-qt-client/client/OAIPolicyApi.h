/**
 * AttestationClient
 * Describes the interface for the per-tenant enclave service.
 *
 * The version of the OpenAPI document: 2018-09-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPolicyApi_H
#define OAI_OAIPolicyApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAttestationPolicy.h"
#include "OAICloudError.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPolicyApi : public QObject {
    Q_OBJECT

public:
    OAIPolicyApi(const int timeOut = 0);
    ~OAIPolicyApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  tee QString [required]
    */
    virtual void policyGet(const QString &api_version, const QString &tee);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  tee QString [required]
    * @param[in]  policy_jws QString [required]
    */
    virtual void policyPrepareToSet(const QString &api_version, const QString &tee, const QString &policy_jws);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  tee QString [required]
    * @param[in]  policy_jws QString [required]
    */
    virtual void policyReset(const QString &api_version, const QString &tee, const QString &policy_jws);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  tee QString [required]
    * @param[in]  new_attestation_policy QString [required]
    */
    virtual void policySet(const QString &api_version, const QString &tee, const QString &new_attestation_policy);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void policyGetCallback(OAIHttpRequestWorker *worker);
    void policyPrepareToSetCallback(OAIHttpRequestWorker *worker);
    void policyResetCallback(OAIHttpRequestWorker *worker);
    void policySetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void policyGetSignal(OAIAttestationPolicy summary);
    void policyPrepareToSetSignal(QString summary);
    void policyResetSignal(QString summary);
    void policySetSignal();


    void policyGetSignalFull(OAIHttpRequestWorker *worker, OAIAttestationPolicy summary);
    void policyPrepareToSetSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void policyResetSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void policySetSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use policyGetSignalError() instead")
    void policyGetSignalE(OAIAttestationPolicy summary, QNetworkReply::NetworkError error_type, QString error_str);
    void policyGetSignalError(OAIAttestationPolicy summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use policyPrepareToSetSignalError() instead")
    void policyPrepareToSetSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void policyPrepareToSetSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use policyResetSignalError() instead")
    void policyResetSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void policyResetSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use policySetSignalError() instead")
    void policySetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void policySetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use policyGetSignalErrorFull() instead")
    void policyGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void policyGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use policyPrepareToSetSignalErrorFull() instead")
    void policyPrepareToSetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void policyPrepareToSetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use policyResetSignalErrorFull() instead")
    void policyResetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void policyResetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use policySetSignalErrorFull() instead")
    void policySetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void policySetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
