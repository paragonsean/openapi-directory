/*
 * AttestationClient
 * Describes the interface for the per-tenant enclave service.
 *
 * The version of the OpenAPI document: 2018-09-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AttestationPolicy;
import org.openapitools.client.model.CloudError;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PolicyApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PolicyApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PolicyApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for policyGet
     * @param apiVersion Client API version. (required)
     * @param tee Specifies the trusted execution environment to be used to validate the evidence (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Request is unauthorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policyGetCall(String apiVersion, String tee, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/operations/policy/current";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (tee != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tee", tee));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call policyGetValidateBeforeCall(String apiVersion, String tee, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling policyGet(Async)");
        }

        // verify the required parameter 'tee' is set
        if (tee == null) {
            throw new ApiException("Missing the required parameter 'tee' when calling policyGet(Async)");
        }

        return policyGetCall(apiVersion, tee, _callback);

    }

    /**
     * Retrieves the current policy for a given kind of TEE.
     * 
     * @param apiVersion Client API version. (required)
     * @param tee Specifies the trusted execution environment to be used to validate the evidence (required)
     * @return AttestationPolicy
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Request is unauthorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public AttestationPolicy policyGet(String apiVersion, String tee) throws ApiException {
        ApiResponse<AttestationPolicy> localVarResp = policyGetWithHttpInfo(apiVersion, tee);
        return localVarResp.getData();
    }

    /**
     * Retrieves the current policy for a given kind of TEE.
     * 
     * @param apiVersion Client API version. (required)
     * @param tee Specifies the trusted execution environment to be used to validate the evidence (required)
     * @return ApiResponse&lt;AttestationPolicy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Request is unauthorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AttestationPolicy> policyGetWithHttpInfo(String apiVersion, String tee) throws ApiException {
        okhttp3.Call localVarCall = policyGetValidateBeforeCall(apiVersion, tee, null);
        Type localVarReturnType = new TypeToken<AttestationPolicy>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves the current policy for a given kind of TEE. (asynchronously)
     * 
     * @param apiVersion Client API version. (required)
     * @param tee Specifies the trusted execution environment to be used to validate the evidence (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Request is unauthorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policyGetAsync(String apiVersion, String tee, final ApiCallback<AttestationPolicy> _callback) throws ApiException {

        okhttp3.Call localVarCall = policyGetValidateBeforeCall(apiVersion, tee, _callback);
        Type localVarReturnType = new TypeToken<AttestationPolicy>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for policyPrepareToSet
     * @param apiVersion Client API version. (required)
     * @param tee Specifies the trusted execution environment to be used to validate the evidence (required)
     * @param policyJws JSON Web Signature (See RFC7515) expressing the new policy (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - Returns a JWT signed by the metadata signing key that contains the hash of the supplied policy to be set. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Request is unauthorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policyPrepareToSetCall(String apiVersion, String tee, String policyJws, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = policyJws;

        // create path and map variables
        String localVarPath = "/operations/policy/updatepolicy";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (tee != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tee", tee));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/plain"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call policyPrepareToSetValidateBeforeCall(String apiVersion, String tee, String policyJws, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling policyPrepareToSet(Async)");
        }

        // verify the required parameter 'tee' is set
        if (tee == null) {
            throw new ApiException("Missing the required parameter 'tee' when calling policyPrepareToSet(Async)");
        }

        // verify the required parameter 'policyJws' is set
        if (policyJws == null) {
            throw new ApiException("Missing the required parameter 'policyJws' when calling policyPrepareToSet(Async)");
        }

        return policyPrepareToSetCall(apiVersion, tee, policyJws, _callback);

    }

    /**
     * Accepts a new policy document and returns a JWT which expresses  used in preparation to set attestation policy.
     * 
     * @param apiVersion Client API version. (required)
     * @param tee Specifies the trusted execution environment to be used to validate the evidence (required)
     * @param policyJws JSON Web Signature (See RFC7515) expressing the new policy (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - Returns a JWT signed by the metadata signing key that contains the hash of the supplied policy to be set. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Request is unauthorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public String policyPrepareToSet(String apiVersion, String tee, String policyJws) throws ApiException {
        ApiResponse<String> localVarResp = policyPrepareToSetWithHttpInfo(apiVersion, tee, policyJws);
        return localVarResp.getData();
    }

    /**
     * Accepts a new policy document and returns a JWT which expresses  used in preparation to set attestation policy.
     * 
     * @param apiVersion Client API version. (required)
     * @param tee Specifies the trusted execution environment to be used to validate the evidence (required)
     * @param policyJws JSON Web Signature (See RFC7515) expressing the new policy (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - Returns a JWT signed by the metadata signing key that contains the hash of the supplied policy to be set. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Request is unauthorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> policyPrepareToSetWithHttpInfo(String apiVersion, String tee, String policyJws) throws ApiException {
        okhttp3.Call localVarCall = policyPrepareToSetValidateBeforeCall(apiVersion, tee, policyJws, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Accepts a new policy document and returns a JWT which expresses  used in preparation to set attestation policy. (asynchronously)
     * 
     * @param apiVersion Client API version. (required)
     * @param tee Specifies the trusted execution environment to be used to validate the evidence (required)
     * @param policyJws JSON Web Signature (See RFC7515) expressing the new policy (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - Returns a JWT signed by the metadata signing key that contains the hash of the supplied policy to be set. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Request is unauthorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policyPrepareToSetAsync(String apiVersion, String tee, String policyJws, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = policyPrepareToSetValidateBeforeCall(apiVersion, tee, policyJws, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for policyReset
     * @param apiVersion Client API version. (required)
     * @param tee Specifies the trusted execution environment to be used to validate the evidence (required)
     * @param policyJws JSON Web Signature with an empty policy document (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - Returns a JWT signed by the metadata signing key that contains the hash of the supplied policy to be set. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Request is unauthorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policyResetCall(String apiVersion, String tee, String policyJws, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = policyJws;

        // create path and map variables
        String localVarPath = "/operations/policy/current";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (tee != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tee", tee));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/plain"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call policyResetValidateBeforeCall(String apiVersion, String tee, String policyJws, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling policyReset(Async)");
        }

        // verify the required parameter 'tee' is set
        if (tee == null) {
            throw new ApiException("Missing the required parameter 'tee' when calling policyReset(Async)");
        }

        // verify the required parameter 'policyJws' is set
        if (policyJws == null) {
            throw new ApiException("Missing the required parameter 'policyJws' when calling policyReset(Async)");
        }

        return policyResetCall(apiVersion, tee, policyJws, _callback);

    }

    /**
     * Resets the attestation policy for the specified tenant and reverts to the default policy.
     * 
     * @param apiVersion Client API version. (required)
     * @param tee Specifies the trusted execution environment to be used to validate the evidence (required)
     * @param policyJws JSON Web Signature with an empty policy document (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - Returns a JWT signed by the metadata signing key that contains the hash of the supplied policy to be set. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Request is unauthorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public String policyReset(String apiVersion, String tee, String policyJws) throws ApiException {
        ApiResponse<String> localVarResp = policyResetWithHttpInfo(apiVersion, tee, policyJws);
        return localVarResp.getData();
    }

    /**
     * Resets the attestation policy for the specified tenant and reverts to the default policy.
     * 
     * @param apiVersion Client API version. (required)
     * @param tee Specifies the trusted execution environment to be used to validate the evidence (required)
     * @param policyJws JSON Web Signature with an empty policy document (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - Returns a JWT signed by the metadata signing key that contains the hash of the supplied policy to be set. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Request is unauthorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> policyResetWithHttpInfo(String apiVersion, String tee, String policyJws) throws ApiException {
        okhttp3.Call localVarCall = policyResetValidateBeforeCall(apiVersion, tee, policyJws, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Resets the attestation policy for the specified tenant and reverts to the default policy. (asynchronously)
     * 
     * @param apiVersion Client API version. (required)
     * @param tee Specifies the trusted execution environment to be used to validate the evidence (required)
     * @param policyJws JSON Web Signature with an empty policy document (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - Returns a JWT signed by the metadata signing key that contains the hash of the supplied policy to be set. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Request is unauthorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policyResetAsync(String apiVersion, String tee, String policyJws, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = policyResetValidateBeforeCall(apiVersion, tee, policyJws, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for policySet
     * @param apiVersion Client API version. (required)
     * @param tee Specifies the trusted execution environment to be used to validate the evidence (required)
     * @param newAttestationPolicy JWT Expressing the new policy (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Request is unauthorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policySetCall(String apiVersion, String tee, String newAttestationPolicy, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = newAttestationPolicy;

        // create path and map variables
        String localVarPath = "/operations/policy/current";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (tee != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tee", tee));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/plain"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call policySetValidateBeforeCall(String apiVersion, String tee, String newAttestationPolicy, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling policySet(Async)");
        }

        // verify the required parameter 'tee' is set
        if (tee == null) {
            throw new ApiException("Missing the required parameter 'tee' when calling policySet(Async)");
        }

        // verify the required parameter 'newAttestationPolicy' is set
        if (newAttestationPolicy == null) {
            throw new ApiException("Missing the required parameter 'newAttestationPolicy' when calling policySet(Async)");
        }

        return policySetCall(apiVersion, tee, newAttestationPolicy, _callback);

    }

    /**
     * Sets the policy for a given kind of TEE.
     * 
     * @param apiVersion Client API version. (required)
     * @param tee Specifies the trusted execution environment to be used to validate the evidence (required)
     * @param newAttestationPolicy JWT Expressing the new policy (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Request is unauthorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public void policySet(String apiVersion, String tee, String newAttestationPolicy) throws ApiException {
        policySetWithHttpInfo(apiVersion, tee, newAttestationPolicy);
    }

    /**
     * Sets the policy for a given kind of TEE.
     * 
     * @param apiVersion Client API version. (required)
     * @param tee Specifies the trusted execution environment to be used to validate the evidence (required)
     * @param newAttestationPolicy JWT Expressing the new policy (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Request is unauthorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> policySetWithHttpInfo(String apiVersion, String tee, String newAttestationPolicy) throws ApiException {
        okhttp3.Call localVarCall = policySetValidateBeforeCall(apiVersion, tee, newAttestationPolicy, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Sets the policy for a given kind of TEE. (asynchronously)
     * 
     * @param apiVersion Client API version. (required)
     * @param tee Specifies the trusted execution environment to be used to validate the evidence (required)
     * @param newAttestationPolicy JWT Expressing the new policy (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Request is unauthorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policySetAsync(String apiVersion, String tee, String newAttestationPolicy, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = policySetValidateBeforeCall(apiVersion, tee, newAttestationPolicy, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
