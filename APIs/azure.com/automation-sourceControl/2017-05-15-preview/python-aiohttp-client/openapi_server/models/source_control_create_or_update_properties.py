# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.source_control_security_token_properties import SourceControlSecurityTokenProperties
from openapi_server import util


class SourceControlCreateOrUpdateProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, auto_sync: bool=None, branch: str=None, description: str=None, folder_path: str=None, publish_runbook: bool=None, repo_url: str=None, security_token: SourceControlSecurityTokenProperties=None, source_type: str=None):
        """SourceControlCreateOrUpdateProperties - a model defined in OpenAPI

        :param auto_sync: The auto_sync of this SourceControlCreateOrUpdateProperties.
        :param branch: The branch of this SourceControlCreateOrUpdateProperties.
        :param description: The description of this SourceControlCreateOrUpdateProperties.
        :param folder_path: The folder_path of this SourceControlCreateOrUpdateProperties.
        :param publish_runbook: The publish_runbook of this SourceControlCreateOrUpdateProperties.
        :param repo_url: The repo_url of this SourceControlCreateOrUpdateProperties.
        :param security_token: The security_token of this SourceControlCreateOrUpdateProperties.
        :param source_type: The source_type of this SourceControlCreateOrUpdateProperties.
        """
        self.openapi_types = {
            'auto_sync': bool,
            'branch': str,
            'description': str,
            'folder_path': str,
            'publish_runbook': bool,
            'repo_url': str,
            'security_token': SourceControlSecurityTokenProperties,
            'source_type': str
        }

        self.attribute_map = {
            'auto_sync': 'autoSync',
            'branch': 'branch',
            'description': 'description',
            'folder_path': 'folderPath',
            'publish_runbook': 'publishRunbook',
            'repo_url': 'repoUrl',
            'security_token': 'securityToken',
            'source_type': 'sourceType'
        }

        self._auto_sync = auto_sync
        self._branch = branch
        self._description = description
        self._folder_path = folder_path
        self._publish_runbook = publish_runbook
        self._repo_url = repo_url
        self._security_token = security_token
        self._source_type = source_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SourceControlCreateOrUpdateProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SourceControlCreateOrUpdateProperties of this SourceControlCreateOrUpdateProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def auto_sync(self):
        """Gets the auto_sync of this SourceControlCreateOrUpdateProperties.

        The auto async of the source control. Default is false.

        :return: The auto_sync of this SourceControlCreateOrUpdateProperties.
        :rtype: bool
        """
        return self._auto_sync

    @auto_sync.setter
    def auto_sync(self, auto_sync):
        """Sets the auto_sync of this SourceControlCreateOrUpdateProperties.

        The auto async of the source control. Default is false.

        :param auto_sync: The auto_sync of this SourceControlCreateOrUpdateProperties.
        :type auto_sync: bool
        """

        self._auto_sync = auto_sync

    @property
    def branch(self):
        """Gets the branch of this SourceControlCreateOrUpdateProperties.

        The repo branch of the source control. Include branch as empty string for VsoTfvc.

        :return: The branch of this SourceControlCreateOrUpdateProperties.
        :rtype: str
        """
        return self._branch

    @branch.setter
    def branch(self, branch):
        """Sets the branch of this SourceControlCreateOrUpdateProperties.

        The repo branch of the source control. Include branch as empty string for VsoTfvc.

        :param branch: The branch of this SourceControlCreateOrUpdateProperties.
        :type branch: str
        """
        if branch is not None and len(branch) > 255:
            raise ValueError("Invalid value for `branch`, length must be less than or equal to `255`")

        self._branch = branch

    @property
    def description(self):
        """Gets the description of this SourceControlCreateOrUpdateProperties.

        The user description of the source control.

        :return: The description of this SourceControlCreateOrUpdateProperties.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SourceControlCreateOrUpdateProperties.

        The user description of the source control.

        :param description: The description of this SourceControlCreateOrUpdateProperties.
        :type description: str
        """
        if description is not None and len(description) > 512:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `512`")

        self._description = description

    @property
    def folder_path(self):
        """Gets the folder_path of this SourceControlCreateOrUpdateProperties.

        The folder path of the source control. Path must be relative.

        :return: The folder_path of this SourceControlCreateOrUpdateProperties.
        :rtype: str
        """
        return self._folder_path

    @folder_path.setter
    def folder_path(self, folder_path):
        """Sets the folder_path of this SourceControlCreateOrUpdateProperties.

        The folder path of the source control. Path must be relative.

        :param folder_path: The folder_path of this SourceControlCreateOrUpdateProperties.
        :type folder_path: str
        """
        if folder_path is not None and len(folder_path) > 255:
            raise ValueError("Invalid value for `folder_path`, length must be less than or equal to `255`")

        self._folder_path = folder_path

    @property
    def publish_runbook(self):
        """Gets the publish_runbook of this SourceControlCreateOrUpdateProperties.

        The auto publish of the source control. Default is true.

        :return: The publish_runbook of this SourceControlCreateOrUpdateProperties.
        :rtype: bool
        """
        return self._publish_runbook

    @publish_runbook.setter
    def publish_runbook(self, publish_runbook):
        """Sets the publish_runbook of this SourceControlCreateOrUpdateProperties.

        The auto publish of the source control. Default is true.

        :param publish_runbook: The publish_runbook of this SourceControlCreateOrUpdateProperties.
        :type publish_runbook: bool
        """

        self._publish_runbook = publish_runbook

    @property
    def repo_url(self):
        """Gets the repo_url of this SourceControlCreateOrUpdateProperties.

        The repo url of the source control.

        :return: The repo_url of this SourceControlCreateOrUpdateProperties.
        :rtype: str
        """
        return self._repo_url

    @repo_url.setter
    def repo_url(self, repo_url):
        """Sets the repo_url of this SourceControlCreateOrUpdateProperties.

        The repo url of the source control.

        :param repo_url: The repo_url of this SourceControlCreateOrUpdateProperties.
        :type repo_url: str
        """
        if repo_url is not None and len(repo_url) > 2000:
            raise ValueError("Invalid value for `repo_url`, length must be less than or equal to `2000`")

        self._repo_url = repo_url

    @property
    def security_token(self):
        """Gets the security_token of this SourceControlCreateOrUpdateProperties.


        :return: The security_token of this SourceControlCreateOrUpdateProperties.
        :rtype: SourceControlSecurityTokenProperties
        """
        return self._security_token

    @security_token.setter
    def security_token(self, security_token):
        """Sets the security_token of this SourceControlCreateOrUpdateProperties.


        :param security_token: The security_token of this SourceControlCreateOrUpdateProperties.
        :type security_token: SourceControlSecurityTokenProperties
        """

        self._security_token = security_token

    @property
    def source_type(self):
        """Gets the source_type of this SourceControlCreateOrUpdateProperties.

        The source type. Must be one of VsoGit, VsoTfvc, GitHub, case sensitive.

        :return: The source_type of this SourceControlCreateOrUpdateProperties.
        :rtype: str
        """
        return self._source_type

    @source_type.setter
    def source_type(self, source_type):
        """Sets the source_type of this SourceControlCreateOrUpdateProperties.

        The source type. Must be one of VsoGit, VsoTfvc, GitHub, case sensitive.

        :param source_type: The source_type of this SourceControlCreateOrUpdateProperties.
        :type source_type: str
        """
        allowed_values = ["VsoGit", "VsoTfvc", "GitHub"]  # noqa: E501
        if source_type not in allowed_values:
            raise ValueError(
                "Invalid value for `source_type` ({0}), must be one of {1}"
                .format(source_type, allowed_values)
            )

        self._source_type = source_type
