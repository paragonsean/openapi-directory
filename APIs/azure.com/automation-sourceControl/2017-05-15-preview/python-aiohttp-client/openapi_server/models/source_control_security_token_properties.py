# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SourceControlSecurityTokenProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access_token: str=None, refresh_token: str=None, token_type: str=None):
        """SourceControlSecurityTokenProperties - a model defined in OpenAPI

        :param access_token: The access_token of this SourceControlSecurityTokenProperties.
        :param refresh_token: The refresh_token of this SourceControlSecurityTokenProperties.
        :param token_type: The token_type of this SourceControlSecurityTokenProperties.
        """
        self.openapi_types = {
            'access_token': str,
            'refresh_token': str,
            'token_type': str
        }

        self.attribute_map = {
            'access_token': 'accessToken',
            'refresh_token': 'refreshToken',
            'token_type': 'tokenType'
        }

        self._access_token = access_token
        self._refresh_token = refresh_token
        self._token_type = token_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SourceControlSecurityTokenProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SourceControlSecurityTokenProperties of this SourceControlSecurityTokenProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access_token(self):
        """Gets the access_token of this SourceControlSecurityTokenProperties.

        The access token.

        :return: The access_token of this SourceControlSecurityTokenProperties.
        :rtype: str
        """
        return self._access_token

    @access_token.setter
    def access_token(self, access_token):
        """Sets the access_token of this SourceControlSecurityTokenProperties.

        The access token.

        :param access_token: The access_token of this SourceControlSecurityTokenProperties.
        :type access_token: str
        """
        if access_token is not None and len(access_token) > 1024:
            raise ValueError("Invalid value for `access_token`, length must be less than or equal to `1024`")

        self._access_token = access_token

    @property
    def refresh_token(self):
        """Gets the refresh_token of this SourceControlSecurityTokenProperties.

        The refresh token.

        :return: The refresh_token of this SourceControlSecurityTokenProperties.
        :rtype: str
        """
        return self._refresh_token

    @refresh_token.setter
    def refresh_token(self, refresh_token):
        """Sets the refresh_token of this SourceControlSecurityTokenProperties.

        The refresh token.

        :param refresh_token: The refresh_token of this SourceControlSecurityTokenProperties.
        :type refresh_token: str
        """
        if refresh_token is not None and len(refresh_token) > 1024:
            raise ValueError("Invalid value for `refresh_token`, length must be less than or equal to `1024`")

        self._refresh_token = refresh_token

    @property
    def token_type(self):
        """Gets the token_type of this SourceControlSecurityTokenProperties.

        The token type. Must be either PersonalAccessToken or Oauth.

        :return: The token_type of this SourceControlSecurityTokenProperties.
        :rtype: str
        """
        return self._token_type

    @token_type.setter
    def token_type(self, token_type):
        """Sets the token_type of this SourceControlSecurityTokenProperties.

        The token type. Must be either PersonalAccessToken or Oauth.

        :param token_type: The token_type of this SourceControlSecurityTokenProperties.
        :type token_type: str
        """
        allowed_values = ["PersonalAccessToken", "Oauth"]  # noqa: E501
        if token_type not in allowed_values:
            raise ValueError(
                "Invalid value for `token_type` ({0}), must be one of {1}"
                .format(token_type, allowed_values)
            )

        self._token_type = token_type
