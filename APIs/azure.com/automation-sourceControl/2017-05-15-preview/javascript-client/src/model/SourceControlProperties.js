/**
 * AutomationManagement
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-05-15-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SourceControlProperties model module.
 * @module model/SourceControlProperties
 * @version 2017-05-15-preview
 */
class SourceControlProperties {
    /**
     * Constructs a new <code>SourceControlProperties</code>.
     * Definition of the source control properties
     * @alias module:model/SourceControlProperties
     */
    constructor() { 
        
        SourceControlProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SourceControlProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SourceControlProperties} obj Optional instance to populate.
     * @return {module:model/SourceControlProperties} The populated <code>SourceControlProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SourceControlProperties();

            if (data.hasOwnProperty('autoSync')) {
                obj['autoSync'] = ApiClient.convertToType(data['autoSync'], 'Boolean');
            }
            if (data.hasOwnProperty('branch')) {
                obj['branch'] = ApiClient.convertToType(data['branch'], 'String');
            }
            if (data.hasOwnProperty('creationTime')) {
                obj['creationTime'] = ApiClient.convertToType(data['creationTime'], 'Date');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('folderPath')) {
                obj['folderPath'] = ApiClient.convertToType(data['folderPath'], 'String');
            }
            if (data.hasOwnProperty('lastModifiedTime')) {
                obj['lastModifiedTime'] = ApiClient.convertToType(data['lastModifiedTime'], 'Date');
            }
            if (data.hasOwnProperty('publishRunbook')) {
                obj['publishRunbook'] = ApiClient.convertToType(data['publishRunbook'], 'Boolean');
            }
            if (data.hasOwnProperty('repoUrl')) {
                obj['repoUrl'] = ApiClient.convertToType(data['repoUrl'], 'String');
            }
            if (data.hasOwnProperty('sourceType')) {
                obj['sourceType'] = ApiClient.convertToType(data['sourceType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SourceControlProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SourceControlProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['branch'] && !(typeof data['branch'] === 'string' || data['branch'] instanceof String)) {
            throw new Error("Expected the field `branch` to be a primitive type in the JSON string but got " + data['branch']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['folderPath'] && !(typeof data['folderPath'] === 'string' || data['folderPath'] instanceof String)) {
            throw new Error("Expected the field `folderPath` to be a primitive type in the JSON string but got " + data['folderPath']);
        }
        // ensure the json data is a string
        if (data['repoUrl'] && !(typeof data['repoUrl'] === 'string' || data['repoUrl'] instanceof String)) {
            throw new Error("Expected the field `repoUrl` to be a primitive type in the JSON string but got " + data['repoUrl']);
        }
        // ensure the json data is a string
        if (data['sourceType'] && !(typeof data['sourceType'] === 'string' || data['sourceType'] instanceof String)) {
            throw new Error("Expected the field `sourceType` to be a primitive type in the JSON string but got " + data['sourceType']);
        }

        return true;
    }


}



/**
 * The auto sync of the source control. Default is false.
 * @member {Boolean} autoSync
 */
SourceControlProperties.prototype['autoSync'] = undefined;

/**
 * The repo branch of the source control. Include branch as empty string for VsoTfvc.
 * @member {String} branch
 */
SourceControlProperties.prototype['branch'] = undefined;

/**
 * The creation time.
 * @member {Date} creationTime
 */
SourceControlProperties.prototype['creationTime'] = undefined;

/**
 * The description.
 * @member {String} description
 */
SourceControlProperties.prototype['description'] = undefined;

/**
 * The folder path of the source control.
 * @member {String} folderPath
 */
SourceControlProperties.prototype['folderPath'] = undefined;

/**
 * The last modified time.
 * @member {Date} lastModifiedTime
 */
SourceControlProperties.prototype['lastModifiedTime'] = undefined;

/**
 * The auto publish of the source control. Default is true.
 * @member {Boolean} publishRunbook
 */
SourceControlProperties.prototype['publishRunbook'] = undefined;

/**
 * The repo url of the source control.
 * @member {String} repoUrl
 */
SourceControlProperties.prototype['repoUrl'] = undefined;

/**
 * The source type. Must be one of VsoGit, VsoTfvc, GitHub.
 * @member {module:model/SourceControlProperties.SourceTypeEnum} sourceType
 */
SourceControlProperties.prototype['sourceType'] = undefined;





/**
 * Allowed values for the <code>sourceType</code> property.
 * @enum {String}
 * @readonly
 */
SourceControlProperties['SourceTypeEnum'] = {

    /**
     * value: "VsoGit"
     * @const
     */
    "VsoGit": "VsoGit",

    /**
     * value: "VsoTfvc"
     * @const
     */
    "VsoTfvc": "VsoTfvc",

    /**
     * value: "GitHub"
     * @const
     */
    "GitHub": "GitHub"
};



export default SourceControlProperties;

