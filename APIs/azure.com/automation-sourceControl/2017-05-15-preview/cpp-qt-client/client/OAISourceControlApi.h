/**
 * AutomationManagement
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-05-15-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISourceControlApi_H
#define OAI_OAISourceControlApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAISourceControl.h"
#include "OAISourceControlCreateOrUpdateParameters.h"
#include "OAISourceControlListResult.h"
#include "OAISourceControlUpdateParameters.h"
#include "OAISourceControl_ListByAutomationAccount_default_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISourceControlApi : public QObject {
    Q_OBJECT

public:
    OAISourceControlApi(const int timeOut = 0);
    ~OAISourceControlApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  automation_account_name QString [required]
    * @param[in]  source_control_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAISourceControlCreateOrUpdateParameters [required]
    */
    virtual void sourceControlCreateOrUpdate(const QString &resource_group_name, const QString &automation_account_name, const QString &source_control_name, const QString &subscription_id, const QString &api_version, const OAISourceControlCreateOrUpdateParameters &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  automation_account_name QString [required]
    * @param[in]  source_control_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void sourceControlDelete(const QString &resource_group_name, const QString &automation_account_name, const QString &source_control_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  automation_account_name QString [required]
    * @param[in]  source_control_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void sourceControlGet(const QString &resource_group_name, const QString &automation_account_name, const QString &source_control_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  automation_account_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [optional]
    */
    virtual void sourceControlListByAutomationAccount(const QString &resource_group_name, const QString &automation_account_name, const QString &subscription_id, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  automation_account_name QString [required]
    * @param[in]  source_control_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAISourceControlUpdateParameters [required]
    */
    virtual void sourceControlUpdate(const QString &resource_group_name, const QString &automation_account_name, const QString &source_control_name, const QString &subscription_id, const QString &api_version, const OAISourceControlUpdateParameters &parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void sourceControlCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void sourceControlDeleteCallback(OAIHttpRequestWorker *worker);
    void sourceControlGetCallback(OAIHttpRequestWorker *worker);
    void sourceControlListByAutomationAccountCallback(OAIHttpRequestWorker *worker);
    void sourceControlUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void sourceControlCreateOrUpdateSignal(OAISourceControl summary);
    void sourceControlDeleteSignal();
    void sourceControlGetSignal(OAISourceControl summary);
    void sourceControlListByAutomationAccountSignal(OAISourceControlListResult summary);
    void sourceControlUpdateSignal(OAISourceControl summary);


    void sourceControlCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAISourceControl summary);
    void sourceControlDeleteSignalFull(OAIHttpRequestWorker *worker);
    void sourceControlGetSignalFull(OAIHttpRequestWorker *worker, OAISourceControl summary);
    void sourceControlListByAutomationAccountSignalFull(OAIHttpRequestWorker *worker, OAISourceControlListResult summary);
    void sourceControlUpdateSignalFull(OAIHttpRequestWorker *worker, OAISourceControl summary);

    Q_DECL_DEPRECATED_X("Use sourceControlCreateOrUpdateSignalError() instead")
    void sourceControlCreateOrUpdateSignalE(OAISourceControl summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sourceControlCreateOrUpdateSignalError(OAISourceControl summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sourceControlDeleteSignalError() instead")
    void sourceControlDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void sourceControlDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sourceControlGetSignalError() instead")
    void sourceControlGetSignalE(OAISourceControl summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sourceControlGetSignalError(OAISourceControl summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sourceControlListByAutomationAccountSignalError() instead")
    void sourceControlListByAutomationAccountSignalE(OAISourceControlListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sourceControlListByAutomationAccountSignalError(OAISourceControlListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sourceControlUpdateSignalError() instead")
    void sourceControlUpdateSignalE(OAISourceControl summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sourceControlUpdateSignalError(OAISourceControl summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use sourceControlCreateOrUpdateSignalErrorFull() instead")
    void sourceControlCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sourceControlCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sourceControlDeleteSignalErrorFull() instead")
    void sourceControlDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sourceControlDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sourceControlGetSignalErrorFull() instead")
    void sourceControlGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sourceControlGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sourceControlListByAutomationAccountSignalErrorFull() instead")
    void sourceControlListByAutomationAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sourceControlListByAutomationAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sourceControlUpdateSignalErrorFull() instead")
    void sourceControlUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sourceControlUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
