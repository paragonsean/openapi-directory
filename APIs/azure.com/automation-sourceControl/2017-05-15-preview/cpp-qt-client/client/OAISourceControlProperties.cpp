/**
 * AutomationManagement
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-05-15-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISourceControlProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISourceControlProperties::OAISourceControlProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISourceControlProperties::OAISourceControlProperties() {
    this->initializeModel();
}

OAISourceControlProperties::~OAISourceControlProperties() {}

void OAISourceControlProperties::initializeModel() {

    m_auto_sync_isSet = false;
    m_auto_sync_isValid = false;

    m_branch_isSet = false;
    m_branch_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_folder_path_isSet = false;
    m_folder_path_isValid = false;

    m_last_modified_time_isSet = false;
    m_last_modified_time_isValid = false;

    m_publish_runbook_isSet = false;
    m_publish_runbook_isValid = false;

    m_repo_url_isSet = false;
    m_repo_url_isValid = false;

    m_source_type_isSet = false;
    m_source_type_isValid = false;
}

void OAISourceControlProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISourceControlProperties::fromJsonObject(QJsonObject json) {

    m_auto_sync_isValid = ::OpenAPI::fromJsonValue(m_auto_sync, json[QString("autoSync")]);
    m_auto_sync_isSet = !json[QString("autoSync")].isNull() && m_auto_sync_isValid;

    m_branch_isValid = ::OpenAPI::fromJsonValue(m_branch, json[QString("branch")]);
    m_branch_isSet = !json[QString("branch")].isNull() && m_branch_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("creationTime")]);
    m_creation_time_isSet = !json[QString("creationTime")].isNull() && m_creation_time_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_folder_path_isValid = ::OpenAPI::fromJsonValue(m_folder_path, json[QString("folderPath")]);
    m_folder_path_isSet = !json[QString("folderPath")].isNull() && m_folder_path_isValid;

    m_last_modified_time_isValid = ::OpenAPI::fromJsonValue(m_last_modified_time, json[QString("lastModifiedTime")]);
    m_last_modified_time_isSet = !json[QString("lastModifiedTime")].isNull() && m_last_modified_time_isValid;

    m_publish_runbook_isValid = ::OpenAPI::fromJsonValue(m_publish_runbook, json[QString("publishRunbook")]);
    m_publish_runbook_isSet = !json[QString("publishRunbook")].isNull() && m_publish_runbook_isValid;

    m_repo_url_isValid = ::OpenAPI::fromJsonValue(m_repo_url, json[QString("repoUrl")]);
    m_repo_url_isSet = !json[QString("repoUrl")].isNull() && m_repo_url_isValid;

    m_source_type_isValid = ::OpenAPI::fromJsonValue(m_source_type, json[QString("sourceType")]);
    m_source_type_isSet = !json[QString("sourceType")].isNull() && m_source_type_isValid;
}

QString OAISourceControlProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISourceControlProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_auto_sync_isSet) {
        obj.insert(QString("autoSync"), ::OpenAPI::toJsonValue(m_auto_sync));
    }
    if (m_branch_isSet) {
        obj.insert(QString("branch"), ::OpenAPI::toJsonValue(m_branch));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("creationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_folder_path_isSet) {
        obj.insert(QString("folderPath"), ::OpenAPI::toJsonValue(m_folder_path));
    }
    if (m_last_modified_time_isSet) {
        obj.insert(QString("lastModifiedTime"), ::OpenAPI::toJsonValue(m_last_modified_time));
    }
    if (m_publish_runbook_isSet) {
        obj.insert(QString("publishRunbook"), ::OpenAPI::toJsonValue(m_publish_runbook));
    }
    if (m_repo_url_isSet) {
        obj.insert(QString("repoUrl"), ::OpenAPI::toJsonValue(m_repo_url));
    }
    if (m_source_type_isSet) {
        obj.insert(QString("sourceType"), ::OpenAPI::toJsonValue(m_source_type));
    }
    return obj;
}

bool OAISourceControlProperties::isAutoSync() const {
    return m_auto_sync;
}
void OAISourceControlProperties::setAutoSync(const bool &auto_sync) {
    m_auto_sync = auto_sync;
    m_auto_sync_isSet = true;
}

bool OAISourceControlProperties::is_auto_sync_Set() const{
    return m_auto_sync_isSet;
}

bool OAISourceControlProperties::is_auto_sync_Valid() const{
    return m_auto_sync_isValid;
}

QString OAISourceControlProperties::getBranch() const {
    return m_branch;
}
void OAISourceControlProperties::setBranch(const QString &branch) {
    m_branch = branch;
    m_branch_isSet = true;
}

bool OAISourceControlProperties::is_branch_Set() const{
    return m_branch_isSet;
}

bool OAISourceControlProperties::is_branch_Valid() const{
    return m_branch_isValid;
}

QDateTime OAISourceControlProperties::getCreationTime() const {
    return m_creation_time;
}
void OAISourceControlProperties::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAISourceControlProperties::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAISourceControlProperties::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QString OAISourceControlProperties::getDescription() const {
    return m_description;
}
void OAISourceControlProperties::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAISourceControlProperties::is_description_Set() const{
    return m_description_isSet;
}

bool OAISourceControlProperties::is_description_Valid() const{
    return m_description_isValid;
}

QString OAISourceControlProperties::getFolderPath() const {
    return m_folder_path;
}
void OAISourceControlProperties::setFolderPath(const QString &folder_path) {
    m_folder_path = folder_path;
    m_folder_path_isSet = true;
}

bool OAISourceControlProperties::is_folder_path_Set() const{
    return m_folder_path_isSet;
}

bool OAISourceControlProperties::is_folder_path_Valid() const{
    return m_folder_path_isValid;
}

QDateTime OAISourceControlProperties::getLastModifiedTime() const {
    return m_last_modified_time;
}
void OAISourceControlProperties::setLastModifiedTime(const QDateTime &last_modified_time) {
    m_last_modified_time = last_modified_time;
    m_last_modified_time_isSet = true;
}

bool OAISourceControlProperties::is_last_modified_time_Set() const{
    return m_last_modified_time_isSet;
}

bool OAISourceControlProperties::is_last_modified_time_Valid() const{
    return m_last_modified_time_isValid;
}

bool OAISourceControlProperties::isPublishRunbook() const {
    return m_publish_runbook;
}
void OAISourceControlProperties::setPublishRunbook(const bool &publish_runbook) {
    m_publish_runbook = publish_runbook;
    m_publish_runbook_isSet = true;
}

bool OAISourceControlProperties::is_publish_runbook_Set() const{
    return m_publish_runbook_isSet;
}

bool OAISourceControlProperties::is_publish_runbook_Valid() const{
    return m_publish_runbook_isValid;
}

QString OAISourceControlProperties::getRepoUrl() const {
    return m_repo_url;
}
void OAISourceControlProperties::setRepoUrl(const QString &repo_url) {
    m_repo_url = repo_url;
    m_repo_url_isSet = true;
}

bool OAISourceControlProperties::is_repo_url_Set() const{
    return m_repo_url_isSet;
}

bool OAISourceControlProperties::is_repo_url_Valid() const{
    return m_repo_url_isValid;
}

QString OAISourceControlProperties::getSourceType() const {
    return m_source_type;
}
void OAISourceControlProperties::setSourceType(const QString &source_type) {
    m_source_type = source_type;
    m_source_type_isSet = true;
}

bool OAISourceControlProperties::is_source_type_Set() const{
    return m_source_type_isSet;
}

bool OAISourceControlProperties::is_source_type_Valid() const{
    return m_source_type_isValid;
}

bool OAISourceControlProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_auto_sync_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_branch_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_folder_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_publish_runbook_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repo_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISourceControlProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
