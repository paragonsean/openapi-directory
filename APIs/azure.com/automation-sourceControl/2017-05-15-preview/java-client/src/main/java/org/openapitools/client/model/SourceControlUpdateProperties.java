/*
 * AutomationManagement
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-05-15-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.SourceControlSecurityTokenProperties;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The properties of the update source control
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:11:24.102334-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SourceControlUpdateProperties {
  public static final String SERIALIZED_NAME_AUTO_SYNC = "autoSync";
  @SerializedName(SERIALIZED_NAME_AUTO_SYNC)
  private Boolean autoSync;

  public static final String SERIALIZED_NAME_BRANCH = "branch";
  @SerializedName(SERIALIZED_NAME_BRANCH)
  private String branch;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_FOLDER_PATH = "folderPath";
  @SerializedName(SERIALIZED_NAME_FOLDER_PATH)
  private String folderPath;

  public static final String SERIALIZED_NAME_PUBLISH_RUNBOOK = "publishRunbook";
  @SerializedName(SERIALIZED_NAME_PUBLISH_RUNBOOK)
  private Boolean publishRunbook;

  public static final String SERIALIZED_NAME_SECURITY_TOKEN = "securityToken";
  @SerializedName(SERIALIZED_NAME_SECURITY_TOKEN)
  private SourceControlSecurityTokenProperties securityToken;

  public SourceControlUpdateProperties() {
  }

  public SourceControlUpdateProperties autoSync(Boolean autoSync) {
    this.autoSync = autoSync;
    return this;
  }

  /**
   * The auto sync of the source control. Default is false.
   * @return autoSync
   */
  @javax.annotation.Nullable
  public Boolean getAutoSync() {
    return autoSync;
  }

  public void setAutoSync(Boolean autoSync) {
    this.autoSync = autoSync;
  }


  public SourceControlUpdateProperties branch(String branch) {
    this.branch = branch;
    return this;
  }

  /**
   * The repo branch of the source control.
   * @return branch
   */
  @javax.annotation.Nullable
  public String getBranch() {
    return branch;
  }

  public void setBranch(String branch) {
    this.branch = branch;
  }


  public SourceControlUpdateProperties description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The user description of the source control.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public SourceControlUpdateProperties folderPath(String folderPath) {
    this.folderPath = folderPath;
    return this;
  }

  /**
   * The folder path of the source control. Path must be relative.
   * @return folderPath
   */
  @javax.annotation.Nullable
  public String getFolderPath() {
    return folderPath;
  }

  public void setFolderPath(String folderPath) {
    this.folderPath = folderPath;
  }


  public SourceControlUpdateProperties publishRunbook(Boolean publishRunbook) {
    this.publishRunbook = publishRunbook;
    return this;
  }

  /**
   * The auto publish of the source control. Default is true.
   * @return publishRunbook
   */
  @javax.annotation.Nullable
  public Boolean getPublishRunbook() {
    return publishRunbook;
  }

  public void setPublishRunbook(Boolean publishRunbook) {
    this.publishRunbook = publishRunbook;
  }


  public SourceControlUpdateProperties securityToken(SourceControlSecurityTokenProperties securityToken) {
    this.securityToken = securityToken;
    return this;
  }

  /**
   * Get securityToken
   * @return securityToken
   */
  @javax.annotation.Nullable
  public SourceControlSecurityTokenProperties getSecurityToken() {
    return securityToken;
  }

  public void setSecurityToken(SourceControlSecurityTokenProperties securityToken) {
    this.securityToken = securityToken;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SourceControlUpdateProperties sourceControlUpdateProperties = (SourceControlUpdateProperties) o;
    return Objects.equals(this.autoSync, sourceControlUpdateProperties.autoSync) &&
        Objects.equals(this.branch, sourceControlUpdateProperties.branch) &&
        Objects.equals(this.description, sourceControlUpdateProperties.description) &&
        Objects.equals(this.folderPath, sourceControlUpdateProperties.folderPath) &&
        Objects.equals(this.publishRunbook, sourceControlUpdateProperties.publishRunbook) &&
        Objects.equals(this.securityToken, sourceControlUpdateProperties.securityToken);
  }

  @Override
  public int hashCode() {
    return Objects.hash(autoSync, branch, description, folderPath, publishRunbook, securityToken);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SourceControlUpdateProperties {\n");
    sb.append("    autoSync: ").append(toIndentedString(autoSync)).append("\n");
    sb.append("    branch: ").append(toIndentedString(branch)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    folderPath: ").append(toIndentedString(folderPath)).append("\n");
    sb.append("    publishRunbook: ").append(toIndentedString(publishRunbook)).append("\n");
    sb.append("    securityToken: ").append(toIndentedString(securityToken)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("autoSync");
    openapiFields.add("branch");
    openapiFields.add("description");
    openapiFields.add("folderPath");
    openapiFields.add("publishRunbook");
    openapiFields.add("securityToken");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SourceControlUpdateProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SourceControlUpdateProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SourceControlUpdateProperties is not found in the empty JSON string", SourceControlUpdateProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SourceControlUpdateProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SourceControlUpdateProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("branch") != null && !jsonObj.get("branch").isJsonNull()) && !jsonObj.get("branch").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `branch` to be a primitive type in the JSON string but got `%s`", jsonObj.get("branch").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("folderPath") != null && !jsonObj.get("folderPath").isJsonNull()) && !jsonObj.get("folderPath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `folderPath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("folderPath").toString()));
      }
      // validate the optional field `securityToken`
      if (jsonObj.get("securityToken") != null && !jsonObj.get("securityToken").isJsonNull()) {
        SourceControlSecurityTokenProperties.validateJsonElement(jsonObj.get("securityToken"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SourceControlUpdateProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SourceControlUpdateProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SourceControlUpdateProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SourceControlUpdateProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<SourceControlUpdateProperties>() {
           @Override
           public void write(JsonWriter out, SourceControlUpdateProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SourceControlUpdateProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SourceControlUpdateProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SourceControlUpdateProperties
   * @throws IOException if the JSON string is invalid with respect to SourceControlUpdateProperties
   */
  public static SourceControlUpdateProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SourceControlUpdateProperties.class);
  }

  /**
   * Convert an instance of SourceControlUpdateProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

