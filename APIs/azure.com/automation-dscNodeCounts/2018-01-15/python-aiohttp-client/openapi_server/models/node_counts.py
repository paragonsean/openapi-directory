# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.node_count import NodeCount
from openapi_server import util


class NodeCounts(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, total_count: int=None, value: List[NodeCount]=None):
        """NodeCounts - a model defined in OpenAPI

        :param total_count: The total_count of this NodeCounts.
        :param value: The value of this NodeCounts.
        """
        self.openapi_types = {
            'total_count': int,
            'value': List[NodeCount]
        }

        self.attribute_map = {
            'total_count': 'totalCount',
            'value': 'value'
        }

        self._total_count = total_count
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NodeCounts':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NodeCounts of this NodeCounts.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def total_count(self):
        """Gets the total_count of this NodeCounts.

        Gets the total number of records matching countType criteria.

        :return: The total_count of this NodeCounts.
        :rtype: int
        """
        return self._total_count

    @total_count.setter
    def total_count(self, total_count):
        """Sets the total_count of this NodeCounts.

        Gets the total number of records matching countType criteria.

        :param total_count: The total_count of this NodeCounts.
        :type total_count: int
        """

        self._total_count = total_count

    @property
    def value(self):
        """Gets the value of this NodeCounts.

        Gets an array of counts

        :return: The value of this NodeCounts.
        :rtype: List[NodeCount]
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this NodeCounts.

        Gets an array of counts

        :param value: The value of this NodeCounts.
        :type value: List[NodeCount]
        """

        self._value = value
