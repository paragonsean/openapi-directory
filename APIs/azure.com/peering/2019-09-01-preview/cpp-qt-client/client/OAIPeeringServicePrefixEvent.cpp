/**
 * PeeringManagementClient
 * APIs to manage Peering resources through the Azure Resource Manager.
 *
 * The version of the OpenAPI document: 2019-09-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPeeringServicePrefixEvent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPeeringServicePrefixEvent::OAIPeeringServicePrefixEvent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPeeringServicePrefixEvent::OAIPeeringServicePrefixEvent() {
    this->initializeModel();
}

OAIPeeringServicePrefixEvent::~OAIPeeringServicePrefixEvent() {}

void OAIPeeringServicePrefixEvent::initializeModel() {

    m_event_description_isSet = false;
    m_event_description_isValid = false;

    m_event_level_isSet = false;
    m_event_level_isValid = false;

    m_event_summary_isSet = false;
    m_event_summary_isValid = false;

    m_event_timestamp_isSet = false;
    m_event_timestamp_isValid = false;

    m_event_type_isSet = false;
    m_event_type_isValid = false;
}

void OAIPeeringServicePrefixEvent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPeeringServicePrefixEvent::fromJsonObject(QJsonObject json) {

    m_event_description_isValid = ::OpenAPI::fromJsonValue(m_event_description, json[QString("eventDescription")]);
    m_event_description_isSet = !json[QString("eventDescription")].isNull() && m_event_description_isValid;

    m_event_level_isValid = ::OpenAPI::fromJsonValue(m_event_level, json[QString("eventLevel")]);
    m_event_level_isSet = !json[QString("eventLevel")].isNull() && m_event_level_isValid;

    m_event_summary_isValid = ::OpenAPI::fromJsonValue(m_event_summary, json[QString("eventSummary")]);
    m_event_summary_isSet = !json[QString("eventSummary")].isNull() && m_event_summary_isValid;

    m_event_timestamp_isValid = ::OpenAPI::fromJsonValue(m_event_timestamp, json[QString("eventTimestamp")]);
    m_event_timestamp_isSet = !json[QString("eventTimestamp")].isNull() && m_event_timestamp_isValid;

    m_event_type_isValid = ::OpenAPI::fromJsonValue(m_event_type, json[QString("eventType")]);
    m_event_type_isSet = !json[QString("eventType")].isNull() && m_event_type_isValid;
}

QString OAIPeeringServicePrefixEvent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPeeringServicePrefixEvent::asJsonObject() const {
    QJsonObject obj;
    if (m_event_description_isSet) {
        obj.insert(QString("eventDescription"), ::OpenAPI::toJsonValue(m_event_description));
    }
    if (m_event_level_isSet) {
        obj.insert(QString("eventLevel"), ::OpenAPI::toJsonValue(m_event_level));
    }
    if (m_event_summary_isSet) {
        obj.insert(QString("eventSummary"), ::OpenAPI::toJsonValue(m_event_summary));
    }
    if (m_event_timestamp_isSet) {
        obj.insert(QString("eventTimestamp"), ::OpenAPI::toJsonValue(m_event_timestamp));
    }
    if (m_event_type_isSet) {
        obj.insert(QString("eventType"), ::OpenAPI::toJsonValue(m_event_type));
    }
    return obj;
}

QString OAIPeeringServicePrefixEvent::getEventDescription() const {
    return m_event_description;
}
void OAIPeeringServicePrefixEvent::setEventDescription(const QString &event_description) {
    m_event_description = event_description;
    m_event_description_isSet = true;
}

bool OAIPeeringServicePrefixEvent::is_event_description_Set() const{
    return m_event_description_isSet;
}

bool OAIPeeringServicePrefixEvent::is_event_description_Valid() const{
    return m_event_description_isValid;
}

QString OAIPeeringServicePrefixEvent::getEventLevel() const {
    return m_event_level;
}
void OAIPeeringServicePrefixEvent::setEventLevel(const QString &event_level) {
    m_event_level = event_level;
    m_event_level_isSet = true;
}

bool OAIPeeringServicePrefixEvent::is_event_level_Set() const{
    return m_event_level_isSet;
}

bool OAIPeeringServicePrefixEvent::is_event_level_Valid() const{
    return m_event_level_isValid;
}

QString OAIPeeringServicePrefixEvent::getEventSummary() const {
    return m_event_summary;
}
void OAIPeeringServicePrefixEvent::setEventSummary(const QString &event_summary) {
    m_event_summary = event_summary;
    m_event_summary_isSet = true;
}

bool OAIPeeringServicePrefixEvent::is_event_summary_Set() const{
    return m_event_summary_isSet;
}

bool OAIPeeringServicePrefixEvent::is_event_summary_Valid() const{
    return m_event_summary_isValid;
}

QDateTime OAIPeeringServicePrefixEvent::getEventTimestamp() const {
    return m_event_timestamp;
}
void OAIPeeringServicePrefixEvent::setEventTimestamp(const QDateTime &event_timestamp) {
    m_event_timestamp = event_timestamp;
    m_event_timestamp_isSet = true;
}

bool OAIPeeringServicePrefixEvent::is_event_timestamp_Set() const{
    return m_event_timestamp_isSet;
}

bool OAIPeeringServicePrefixEvent::is_event_timestamp_Valid() const{
    return m_event_timestamp_isValid;
}

QString OAIPeeringServicePrefixEvent::getEventType() const {
    return m_event_type;
}
void OAIPeeringServicePrefixEvent::setEventType(const QString &event_type) {
    m_event_type = event_type;
    m_event_type_isSet = true;
}

bool OAIPeeringServicePrefixEvent::is_event_type_Set() const{
    return m_event_type_isSet;
}

bool OAIPeeringServicePrefixEvent::is_event_type_Valid() const{
    return m_event_type_isValid;
}

bool OAIPeeringServicePrefixEvent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_event_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_summary_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPeeringServicePrefixEvent::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
