/**
 * PeeringManagementClient
 * APIs to manage Peering resources through the Azure Resource Manager.
 *
 * The version of the OpenAPI document: 2019-09-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPeeringProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPeeringProperties::OAIPeeringProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPeeringProperties::OAIPeeringProperties() {
    this->initializeModel();
}

OAIPeeringProperties::~OAIPeeringProperties() {}

void OAIPeeringProperties::initializeModel() {

    m_direct_isSet = false;
    m_direct_isValid = false;

    m_exchange_isSet = false;
    m_exchange_isValid = false;

    m_peering_location_isSet = false;
    m_peering_location_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;
}

void OAIPeeringProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPeeringProperties::fromJsonObject(QJsonObject json) {

    m_direct_isValid = ::OpenAPI::fromJsonValue(m_direct, json[QString("direct")]);
    m_direct_isSet = !json[QString("direct")].isNull() && m_direct_isValid;

    m_exchange_isValid = ::OpenAPI::fromJsonValue(m_exchange, json[QString("exchange")]);
    m_exchange_isSet = !json[QString("exchange")].isNull() && m_exchange_isValid;

    m_peering_location_isValid = ::OpenAPI::fromJsonValue(m_peering_location, json[QString("peeringLocation")]);
    m_peering_location_isSet = !json[QString("peeringLocation")].isNull() && m_peering_location_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;
}

QString OAIPeeringProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPeeringProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_direct.isSet()) {
        obj.insert(QString("direct"), ::OpenAPI::toJsonValue(m_direct));
    }
    if (m_exchange.isSet()) {
        obj.insert(QString("exchange"), ::OpenAPI::toJsonValue(m_exchange));
    }
    if (m_peering_location_isSet) {
        obj.insert(QString("peeringLocation"), ::OpenAPI::toJsonValue(m_peering_location));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    return obj;
}

OAIPeeringPropertiesDirect OAIPeeringProperties::getDirect() const {
    return m_direct;
}
void OAIPeeringProperties::setDirect(const OAIPeeringPropertiesDirect &direct) {
    m_direct = direct;
    m_direct_isSet = true;
}

bool OAIPeeringProperties::is_direct_Set() const{
    return m_direct_isSet;
}

bool OAIPeeringProperties::is_direct_Valid() const{
    return m_direct_isValid;
}

OAIPeeringPropertiesExchange OAIPeeringProperties::getExchange() const {
    return m_exchange;
}
void OAIPeeringProperties::setExchange(const OAIPeeringPropertiesExchange &exchange) {
    m_exchange = exchange;
    m_exchange_isSet = true;
}

bool OAIPeeringProperties::is_exchange_Set() const{
    return m_exchange_isSet;
}

bool OAIPeeringProperties::is_exchange_Valid() const{
    return m_exchange_isValid;
}

QString OAIPeeringProperties::getPeeringLocation() const {
    return m_peering_location;
}
void OAIPeeringProperties::setPeeringLocation(const QString &peering_location) {
    m_peering_location = peering_location;
    m_peering_location_isSet = true;
}

bool OAIPeeringProperties::is_peering_location_Set() const{
    return m_peering_location_isSet;
}

bool OAIPeeringProperties::is_peering_location_Valid() const{
    return m_peering_location_isValid;
}

QString OAIPeeringProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIPeeringProperties::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIPeeringProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIPeeringProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

bool OAIPeeringProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_direct.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_exchange.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_peering_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPeeringProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
