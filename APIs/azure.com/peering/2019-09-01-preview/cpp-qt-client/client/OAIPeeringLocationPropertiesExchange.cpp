/**
 * PeeringManagementClient
 * APIs to manage Peering resources through the Azure Resource Manager.
 *
 * The version of the OpenAPI document: 2019-09-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPeeringLocationPropertiesExchange.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPeeringLocationPropertiesExchange::OAIPeeringLocationPropertiesExchange(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPeeringLocationPropertiesExchange::OAIPeeringLocationPropertiesExchange() {
    this->initializeModel();
}

OAIPeeringLocationPropertiesExchange::~OAIPeeringLocationPropertiesExchange() {}

void OAIPeeringLocationPropertiesExchange::initializeModel() {

    m_peering_facilities_isSet = false;
    m_peering_facilities_isValid = false;
}

void OAIPeeringLocationPropertiesExchange::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPeeringLocationPropertiesExchange::fromJsonObject(QJsonObject json) {

    m_peering_facilities_isValid = ::OpenAPI::fromJsonValue(m_peering_facilities, json[QString("peeringFacilities")]);
    m_peering_facilities_isSet = !json[QString("peeringFacilities")].isNull() && m_peering_facilities_isValid;
}

QString OAIPeeringLocationPropertiesExchange::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPeeringLocationPropertiesExchange::asJsonObject() const {
    QJsonObject obj;
    if (m_peering_facilities.size() > 0) {
        obj.insert(QString("peeringFacilities"), ::OpenAPI::toJsonValue(m_peering_facilities));
    }
    return obj;
}

QList<OAIExchangePeeringFacility> OAIPeeringLocationPropertiesExchange::getPeeringFacilities() const {
    return m_peering_facilities;
}
void OAIPeeringLocationPropertiesExchange::setPeeringFacilities(const QList<OAIExchangePeeringFacility> &peering_facilities) {
    m_peering_facilities = peering_facilities;
    m_peering_facilities_isSet = true;
}

bool OAIPeeringLocationPropertiesExchange::is_peering_facilities_Set() const{
    return m_peering_facilities_isSet;
}

bool OAIPeeringLocationPropertiesExchange::is_peering_facilities_Valid() const{
    return m_peering_facilities_isValid;
}

bool OAIPeeringLocationPropertiesExchange::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_peering_facilities.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPeeringLocationPropertiesExchange::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
