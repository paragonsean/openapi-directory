/**
 * PeeringManagementClient
 * APIs to manage Peering resources through the Azure Resource Manager.
 *
 * The version of the OpenAPI document: 2019-09-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDirectConnection.h
 *
 * The properties that define a direct connection.
 */

#ifndef OAIDirectConnection_H
#define OAIDirectConnection_H

#include <QJsonObject>

#include "OAIBgpSession.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIBgpSession;

class OAIDirectConnection : public OAIObject {
public:
    OAIDirectConnection();
    OAIDirectConnection(QString json);
    ~OAIDirectConnection() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getBandwidthInMbps() const;
    void setBandwidthInMbps(const qint32 &bandwidth_in_mbps);
    bool is_bandwidth_in_mbps_Set() const;
    bool is_bandwidth_in_mbps_Valid() const;

    OAIBgpSession getBgpSession() const;
    void setBgpSession(const OAIBgpSession &bgp_session);
    bool is_bgp_session_Set() const;
    bool is_bgp_session_Valid() const;

    QString getConnectionIdentifier() const;
    void setConnectionIdentifier(const QString &connection_identifier);
    bool is_connection_identifier_Set() const;
    bool is_connection_identifier_Valid() const;

    QString getConnectionState() const;
    void setConnectionState(const QString &connection_state);
    bool is_connection_state_Set() const;
    bool is_connection_state_Valid() const;

    QString getErrorMessage() const;
    void setErrorMessage(const QString &error_message);
    bool is_error_message_Set() const;
    bool is_error_message_Valid() const;

    qint32 getPeeringDbFacilityId() const;
    void setPeeringDbFacilityId(const qint32 &peering_db_facility_id);
    bool is_peering_db_facility_id_Set() const;
    bool is_peering_db_facility_id_Valid() const;

    qint32 getProvisionedBandwidthInMbps() const;
    void setProvisionedBandwidthInMbps(const qint32 &provisioned_bandwidth_in_mbps);
    bool is_provisioned_bandwidth_in_mbps_Set() const;
    bool is_provisioned_bandwidth_in_mbps_Valid() const;

    QString getSessionAddressProvider() const;
    void setSessionAddressProvider(const QString &session_address_provider);
    bool is_session_address_provider_Set() const;
    bool is_session_address_provider_Valid() const;

    bool isUseForPeeringService() const;
    void setUseForPeeringService(const bool &use_for_peering_service);
    bool is_use_for_peering_service_Set() const;
    bool is_use_for_peering_service_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_bandwidth_in_mbps;
    bool m_bandwidth_in_mbps_isSet;
    bool m_bandwidth_in_mbps_isValid;

    OAIBgpSession m_bgp_session;
    bool m_bgp_session_isSet;
    bool m_bgp_session_isValid;

    QString m_connection_identifier;
    bool m_connection_identifier_isSet;
    bool m_connection_identifier_isValid;

    QString m_connection_state;
    bool m_connection_state_isSet;
    bool m_connection_state_isValid;

    QString m_error_message;
    bool m_error_message_isSet;
    bool m_error_message_isValid;

    qint32 m_peering_db_facility_id;
    bool m_peering_db_facility_id_isSet;
    bool m_peering_db_facility_id_isValid;

    qint32 m_provisioned_bandwidth_in_mbps;
    bool m_provisioned_bandwidth_in_mbps_isSet;
    bool m_provisioned_bandwidth_in_mbps_isValid;

    QString m_session_address_provider;
    bool m_session_address_provider_isSet;
    bool m_session_address_provider_isValid;

    bool m_use_for_peering_service;
    bool m_use_for_peering_service_isSet;
    bool m_use_for_peering_service_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDirectConnection)

#endif // OAIDirectConnection_H
