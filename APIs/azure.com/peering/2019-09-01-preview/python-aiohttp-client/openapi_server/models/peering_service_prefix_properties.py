# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.peering_service_prefix_event import PeeringServicePrefixEvent
from openapi_server import util


class PeeringServicePrefixProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, error_message: str=None, events: List[PeeringServicePrefixEvent]=None, learned_type: str=None, prefix: str=None, prefix_validation_state: str=None, provisioning_state: str=None):
        """PeeringServicePrefixProperties - a model defined in OpenAPI

        :param error_message: The error_message of this PeeringServicePrefixProperties.
        :param events: The events of this PeeringServicePrefixProperties.
        :param learned_type: The learned_type of this PeeringServicePrefixProperties.
        :param prefix: The prefix of this PeeringServicePrefixProperties.
        :param prefix_validation_state: The prefix_validation_state of this PeeringServicePrefixProperties.
        :param provisioning_state: The provisioning_state of this PeeringServicePrefixProperties.
        """
        self.openapi_types = {
            'error_message': str,
            'events': List[PeeringServicePrefixEvent],
            'learned_type': str,
            'prefix': str,
            'prefix_validation_state': str,
            'provisioning_state': str
        }

        self.attribute_map = {
            'error_message': 'errorMessage',
            'events': 'events',
            'learned_type': 'learnedType',
            'prefix': 'prefix',
            'prefix_validation_state': 'prefixValidationState',
            'provisioning_state': 'provisioningState'
        }

        self._error_message = error_message
        self._events = events
        self._learned_type = learned_type
        self._prefix = prefix
        self._prefix_validation_state = prefix_validation_state
        self._provisioning_state = provisioning_state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PeeringServicePrefixProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PeeringServicePrefixProperties of this PeeringServicePrefixProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def error_message(self):
        """Gets the error_message of this PeeringServicePrefixProperties.

        The error message for validation state

        :return: The error_message of this PeeringServicePrefixProperties.
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this PeeringServicePrefixProperties.

        The error message for validation state

        :param error_message: The error_message of this PeeringServicePrefixProperties.
        :type error_message: str
        """

        self._error_message = error_message

    @property
    def events(self):
        """Gets the events of this PeeringServicePrefixProperties.

        The list of events for peering service prefix

        :return: The events of this PeeringServicePrefixProperties.
        :rtype: List[PeeringServicePrefixEvent]
        """
        return self._events

    @events.setter
    def events(self, events):
        """Sets the events of this PeeringServicePrefixProperties.

        The list of events for peering service prefix

        :param events: The events of this PeeringServicePrefixProperties.
        :type events: List[PeeringServicePrefixEvent]
        """

        self._events = events

    @property
    def learned_type(self):
        """Gets the learned_type of this PeeringServicePrefixProperties.

        The prefix learned type

        :return: The learned_type of this PeeringServicePrefixProperties.
        :rtype: str
        """
        return self._learned_type

    @learned_type.setter
    def learned_type(self, learned_type):
        """Sets the learned_type of this PeeringServicePrefixProperties.

        The prefix learned type

        :param learned_type: The learned_type of this PeeringServicePrefixProperties.
        :type learned_type: str
        """
        allowed_values = ["None", "ViaServiceProvider", "ViaSession"]  # noqa: E501
        if learned_type not in allowed_values:
            raise ValueError(
                "Invalid value for `learned_type` ({0}), must be one of {1}"
                .format(learned_type, allowed_values)
            )

        self._learned_type = learned_type

    @property
    def prefix(self):
        """Gets the prefix of this PeeringServicePrefixProperties.

        The prefix from which your traffic originates.

        :return: The prefix of this PeeringServicePrefixProperties.
        :rtype: str
        """
        return self._prefix

    @prefix.setter
    def prefix(self, prefix):
        """Sets the prefix of this PeeringServicePrefixProperties.

        The prefix from which your traffic originates.

        :param prefix: The prefix of this PeeringServicePrefixProperties.
        :type prefix: str
        """

        self._prefix = prefix

    @property
    def prefix_validation_state(self):
        """Gets the prefix_validation_state of this PeeringServicePrefixProperties.

        The prefix validation state

        :return: The prefix_validation_state of this PeeringServicePrefixProperties.
        :rtype: str
        """
        return self._prefix_validation_state

    @prefix_validation_state.setter
    def prefix_validation_state(self, prefix_validation_state):
        """Sets the prefix_validation_state of this PeeringServicePrefixProperties.

        The prefix validation state

        :param prefix_validation_state: The prefix_validation_state of this PeeringServicePrefixProperties.
        :type prefix_validation_state: str
        """
        allowed_values = ["None", "Invalid", "Verified", "Failed", "Pending", "Warning", "Unknown"]  # noqa: E501
        if prefix_validation_state not in allowed_values:
            raise ValueError(
                "Invalid value for `prefix_validation_state` ({0}), must be one of {1}"
                .format(prefix_validation_state, allowed_values)
            )

        self._prefix_validation_state = prefix_validation_state

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this PeeringServicePrefixProperties.

        The provisioning state of the resource.

        :return: The provisioning_state of this PeeringServicePrefixProperties.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this PeeringServicePrefixProperties.

        The provisioning state of the resource.

        :param provisioning_state: The provisioning_state of this PeeringServicePrefixProperties.
        :type provisioning_state: str
        """
        allowed_values = ["Succeeded", "Updating", "Deleting", "Failed"]  # noqa: E501
        if provisioning_state not in allowed_values:
            raise ValueError(
                "Invalid value for `provisioning_state` ({0}), must be one of {1}"
                .format(provisioning_state, allowed_values)
            )

        self._provisioning_state = provisioning_state
