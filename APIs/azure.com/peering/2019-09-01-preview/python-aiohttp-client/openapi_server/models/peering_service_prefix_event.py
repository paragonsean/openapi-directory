# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PeeringServicePrefixEvent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, event_description: str=None, event_level: str=None, event_summary: str=None, event_timestamp: datetime=None, event_type: str=None):
        """PeeringServicePrefixEvent - a model defined in OpenAPI

        :param event_description: The event_description of this PeeringServicePrefixEvent.
        :param event_level: The event_level of this PeeringServicePrefixEvent.
        :param event_summary: The event_summary of this PeeringServicePrefixEvent.
        :param event_timestamp: The event_timestamp of this PeeringServicePrefixEvent.
        :param event_type: The event_type of this PeeringServicePrefixEvent.
        """
        self.openapi_types = {
            'event_description': str,
            'event_level': str,
            'event_summary': str,
            'event_timestamp': datetime,
            'event_type': str
        }

        self.attribute_map = {
            'event_description': 'eventDescription',
            'event_level': 'eventLevel',
            'event_summary': 'eventSummary',
            'event_timestamp': 'eventTimestamp',
            'event_type': 'eventType'
        }

        self._event_description = event_description
        self._event_level = event_level
        self._event_summary = event_summary
        self._event_timestamp = event_timestamp
        self._event_type = event_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PeeringServicePrefixEvent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PeeringServicePrefixEvent of this PeeringServicePrefixEvent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def event_description(self):
        """Gets the event_description of this PeeringServicePrefixEvent.

        The description of the event associated with a prefix.

        :return: The event_description of this PeeringServicePrefixEvent.
        :rtype: str
        """
        return self._event_description

    @event_description.setter
    def event_description(self, event_description):
        """Sets the event_description of this PeeringServicePrefixEvent.

        The description of the event associated with a prefix.

        :param event_description: The event_description of this PeeringServicePrefixEvent.
        :type event_description: str
        """

        self._event_description = event_description

    @property
    def event_level(self):
        """Gets the event_level of this PeeringServicePrefixEvent.

        The level of the event associated with a prefix.

        :return: The event_level of this PeeringServicePrefixEvent.
        :rtype: str
        """
        return self._event_level

    @event_level.setter
    def event_level(self, event_level):
        """Sets the event_level of this PeeringServicePrefixEvent.

        The level of the event associated with a prefix.

        :param event_level: The event_level of this PeeringServicePrefixEvent.
        :type event_level: str
        """

        self._event_level = event_level

    @property
    def event_summary(self):
        """Gets the event_summary of this PeeringServicePrefixEvent.

        The summary of the event associated with a prefix.

        :return: The event_summary of this PeeringServicePrefixEvent.
        :rtype: str
        """
        return self._event_summary

    @event_summary.setter
    def event_summary(self, event_summary):
        """Sets the event_summary of this PeeringServicePrefixEvent.

        The summary of the event associated with a prefix.

        :param event_summary: The event_summary of this PeeringServicePrefixEvent.
        :type event_summary: str
        """

        self._event_summary = event_summary

    @property
    def event_timestamp(self):
        """Gets the event_timestamp of this PeeringServicePrefixEvent.

        The timestamp of the event associated with a prefix.

        :return: The event_timestamp of this PeeringServicePrefixEvent.
        :rtype: datetime
        """
        return self._event_timestamp

    @event_timestamp.setter
    def event_timestamp(self, event_timestamp):
        """Sets the event_timestamp of this PeeringServicePrefixEvent.

        The timestamp of the event associated with a prefix.

        :param event_timestamp: The event_timestamp of this PeeringServicePrefixEvent.
        :type event_timestamp: datetime
        """

        self._event_timestamp = event_timestamp

    @property
    def event_type(self):
        """Gets the event_type of this PeeringServicePrefixEvent.

        The type of the event associated with a prefix.

        :return: The event_type of this PeeringServicePrefixEvent.
        :rtype: str
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """Sets the event_type of this PeeringServicePrefixEvent.

        The type of the event associated with a prefix.

        :param event_type: The event_type of this PeeringServicePrefixEvent.
        :type event_type: str
        """

        self._event_type = event_type
