# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PeeringServiceProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, peering_service_location: str=None, peering_service_provider: str=None, provisioning_state: str=None):
        """PeeringServiceProperties - a model defined in OpenAPI

        :param peering_service_location: The peering_service_location of this PeeringServiceProperties.
        :param peering_service_provider: The peering_service_provider of this PeeringServiceProperties.
        :param provisioning_state: The provisioning_state of this PeeringServiceProperties.
        """
        self.openapi_types = {
            'peering_service_location': str,
            'peering_service_provider': str,
            'provisioning_state': str
        }

        self.attribute_map = {
            'peering_service_location': 'peeringServiceLocation',
            'peering_service_provider': 'peeringServiceProvider',
            'provisioning_state': 'provisioningState'
        }

        self._peering_service_location = peering_service_location
        self._peering_service_provider = peering_service_provider
        self._provisioning_state = provisioning_state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PeeringServiceProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PeeringServiceProperties of this PeeringServiceProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def peering_service_location(self):
        """Gets the peering_service_location of this PeeringServiceProperties.

        The PeeringServiceLocation of the Customer.

        :return: The peering_service_location of this PeeringServiceProperties.
        :rtype: str
        """
        return self._peering_service_location

    @peering_service_location.setter
    def peering_service_location(self, peering_service_location):
        """Sets the peering_service_location of this PeeringServiceProperties.

        The PeeringServiceLocation of the Customer.

        :param peering_service_location: The peering_service_location of this PeeringServiceProperties.
        :type peering_service_location: str
        """

        self._peering_service_location = peering_service_location

    @property
    def peering_service_provider(self):
        """Gets the peering_service_provider of this PeeringServiceProperties.

        The MAPS Provider Name.

        :return: The peering_service_provider of this PeeringServiceProperties.
        :rtype: str
        """
        return self._peering_service_provider

    @peering_service_provider.setter
    def peering_service_provider(self, peering_service_provider):
        """Sets the peering_service_provider of this PeeringServiceProperties.

        The MAPS Provider Name.

        :param peering_service_provider: The peering_service_provider of this PeeringServiceProperties.
        :type peering_service_provider: str
        """

        self._peering_service_provider = peering_service_provider

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this PeeringServiceProperties.

        The provisioning state of the resource.

        :return: The provisioning_state of this PeeringServiceProperties.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this PeeringServiceProperties.

        The provisioning state of the resource.

        :param provisioning_state: The provisioning_state of this PeeringServiceProperties.
        :type provisioning_state: str
        """
        allowed_values = ["Succeeded", "Updating", "Deleting", "Failed"]  # noqa: E501
        if provisioning_state not in allowed_values:
            raise ValueError(
                "Invalid value for `provisioning_state` ({0}), must be one of {1}"
                .format(provisioning_state, allowed_values)
            )

        self._provisioning_state = provisioning_state
