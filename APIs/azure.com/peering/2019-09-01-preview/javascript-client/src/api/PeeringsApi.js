/**
 * PeeringManagementClient
 * APIs to manage Peering resources through the Azure Resource Manager.
 *
 * The version of the OpenAPI document: 2019-09-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorResponse from '../model/ErrorResponse';
import Peering from '../model/Peering';
import PeeringListResult from '../model/PeeringListResult';
import ResourceTags from '../model/ResourceTags';

/**
* Peerings service.
* @module api/PeeringsApi
* @version 2019-09-01-preview
*/
export default class PeeringsApi {

    /**
    * Constructs a new PeeringsApi. 
    * @alias module:api/PeeringsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the peeringsCreateOrUpdate operation.
     * @callback module:api/PeeringsApi~peeringsCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Peering} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new peering or updates an existing peering with the specified name under the given subscription and resource group.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} peeringName The name of the peering.
     * @param {String} subscriptionId The Azure subscription ID.
     * @param {String} apiVersion The client API version.
     * @param {module:model/Peering} peering The properties needed to create or update a peering.
     * @param {module:api/PeeringsApi~peeringsCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Peering}
     */
    peeringsCreateOrUpdate(resourceGroupName, peeringName, subscriptionId, apiVersion, peering, callback) {
      let postBody = peering;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling peeringsCreateOrUpdate");
      }
      // verify the required parameter 'peeringName' is set
      if (peeringName === undefined || peeringName === null) {
        throw new Error("Missing the required parameter 'peeringName' when calling peeringsCreateOrUpdate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling peeringsCreateOrUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling peeringsCreateOrUpdate");
      }
      // verify the required parameter 'peering' is set
      if (peering === undefined || peering === null) {
        throw new Error("Missing the required parameter 'peering' when calling peeringsCreateOrUpdate");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'peeringName': peeringName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Peering;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Peering/peerings/{peeringName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the peeringsDelete operation.
     * @callback module:api/PeeringsApi~peeringsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an existing peering with the specified name under the given subscription and resource group.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} peeringName The name of the peering.
     * @param {String} subscriptionId The Azure subscription ID.
     * @param {String} apiVersion The client API version.
     * @param {module:api/PeeringsApi~peeringsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    peeringsDelete(resourceGroupName, peeringName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling peeringsDelete");
      }
      // verify the required parameter 'peeringName' is set
      if (peeringName === undefined || peeringName === null) {
        throw new Error("Missing the required parameter 'peeringName' when calling peeringsDelete");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling peeringsDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling peeringsDelete");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'peeringName': peeringName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Peering/peerings/{peeringName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the peeringsGet operation.
     * @callback module:api/PeeringsApi~peeringsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Peering} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets an existing peering with the specified name under the given subscription and resource group.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} peeringName The name of the peering.
     * @param {String} subscriptionId The Azure subscription ID.
     * @param {String} apiVersion The client API version.
     * @param {module:api/PeeringsApi~peeringsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Peering}
     */
    peeringsGet(resourceGroupName, peeringName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling peeringsGet");
      }
      // verify the required parameter 'peeringName' is set
      if (peeringName === undefined || peeringName === null) {
        throw new Error("Missing the required parameter 'peeringName' when calling peeringsGet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling peeringsGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling peeringsGet");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'peeringName': peeringName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Peering;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Peering/peerings/{peeringName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the peeringsListByResourceGroup operation.
     * @callback module:api/PeeringsApi~peeringsListByResourceGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PeeringListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all of the peerings under the given subscription and resource group.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} subscriptionId The Azure subscription ID.
     * @param {String} apiVersion The client API version.
     * @param {module:api/PeeringsApi~peeringsListByResourceGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PeeringListResult}
     */
    peeringsListByResourceGroup(resourceGroupName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling peeringsListByResourceGroup");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling peeringsListByResourceGroup");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling peeringsListByResourceGroup");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PeeringListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Peering/peerings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the peeringsListBySubscription operation.
     * @callback module:api/PeeringsApi~peeringsListBySubscriptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PeeringListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all of the peerings under the given subscription.
     * @param {String} subscriptionId The Azure subscription ID.
     * @param {String} apiVersion The client API version.
     * @param {module:api/PeeringsApi~peeringsListBySubscriptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PeeringListResult}
     */
    peeringsListBySubscription(subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling peeringsListBySubscription");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling peeringsListBySubscription");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PeeringListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Peering/peerings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the peeringsUpdate operation.
     * @callback module:api/PeeringsApi~peeringsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Peering} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates tags for a peering with the specified name under the given subscription and resource group.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} peeringName The name of the peering.
     * @param {String} subscriptionId The Azure subscription ID.
     * @param {String} apiVersion The client API version.
     * @param {module:model/ResourceTags} tags The resource tags.
     * @param {module:api/PeeringsApi~peeringsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Peering}
     */
    peeringsUpdate(resourceGroupName, peeringName, subscriptionId, apiVersion, tags, callback) {
      let postBody = tags;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling peeringsUpdate");
      }
      // verify the required parameter 'peeringName' is set
      if (peeringName === undefined || peeringName === null) {
        throw new Error("Missing the required parameter 'peeringName' when calling peeringsUpdate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling peeringsUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling peeringsUpdate");
      }
      // verify the required parameter 'tags' is set
      if (tags === undefined || tags === null) {
        throw new Error("Missing the required parameter 'tags' when calling peeringsUpdate");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'peeringName': peeringName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Peering;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Peering/peerings/{peeringName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
