/**
 * PeeringManagementClient
 * APIs to manage Peering resources through the Azure Resource Manager.
 *
 * The version of the OpenAPI document: 2019-09-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DirectConnection from './DirectConnection';
import SubResource from './SubResource';

/**
 * The PeeringPropertiesDirect model module.
 * @module model/PeeringPropertiesDirect
 * @version 2019-09-01-preview
 */
class PeeringPropertiesDirect {
    /**
     * Constructs a new <code>PeeringPropertiesDirect</code>.
     * The properties that define a direct peering.
     * @alias module:model/PeeringPropertiesDirect
     */
    constructor() { 
        
        PeeringPropertiesDirect.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PeeringPropertiesDirect</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PeeringPropertiesDirect} obj Optional instance to populate.
     * @return {module:model/PeeringPropertiesDirect} The populated <code>PeeringPropertiesDirect</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PeeringPropertiesDirect();

            if (data.hasOwnProperty('connections')) {
                obj['connections'] = ApiClient.convertToType(data['connections'], [DirectConnection]);
            }
            if (data.hasOwnProperty('directPeeringType')) {
                obj['directPeeringType'] = ApiClient.convertToType(data['directPeeringType'], 'String');
            }
            if (data.hasOwnProperty('peerAsn')) {
                obj['peerAsn'] = SubResource.constructFromObject(data['peerAsn']);
            }
            if (data.hasOwnProperty('useForPeeringService')) {
                obj['useForPeeringService'] = ApiClient.convertToType(data['useForPeeringService'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PeeringPropertiesDirect</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PeeringPropertiesDirect</code>.
     */
    static validateJSON(data) {
        if (data['connections']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['connections'])) {
                throw new Error("Expected the field `connections` to be an array in the JSON data but got " + data['connections']);
            }
            // validate the optional field `connections` (array)
            for (const item of data['connections']) {
                DirectConnection.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['directPeeringType'] && !(typeof data['directPeeringType'] === 'string' || data['directPeeringType'] instanceof String)) {
            throw new Error("Expected the field `directPeeringType` to be a primitive type in the JSON string but got " + data['directPeeringType']);
        }
        // validate the optional field `peerAsn`
        if (data['peerAsn']) { // data not null
          SubResource.validateJSON(data['peerAsn']);
        }

        return true;
    }


}



/**
 * The set of connections that constitute a direct peering.
 * @member {Array.<module:model/DirectConnection>} connections
 */
PeeringPropertiesDirect.prototype['connections'] = undefined;

/**
 * The type of direct peering.
 * @member {module:model/PeeringPropertiesDirect.DirectPeeringTypeEnum} directPeeringType
 */
PeeringPropertiesDirect.prototype['directPeeringType'] = undefined;

/**
 * @member {module:model/SubResource} peerAsn
 */
PeeringPropertiesDirect.prototype['peerAsn'] = undefined;

/**
 * The flag that indicates whether or not the peering is used for peering service.
 * @member {Boolean} useForPeeringService
 */
PeeringPropertiesDirect.prototype['useForPeeringService'] = undefined;





/**
 * Allowed values for the <code>directPeeringType</code> property.
 * @enum {String}
 * @readonly
 */
PeeringPropertiesDirect['DirectPeeringTypeEnum'] = {

    /**
     * value: "Edge"
     * @const
     */
    "Edge": "Edge",

    /**
     * value: "Transit"
     * @const
     */
    "Transit": "Transit",

    /**
     * value: "Cdn"
     * @const
     */
    "Cdn": "Cdn",

    /**
     * value: "Internal"
     * @const
     */
    "Internal": "Internal"
};



export default PeeringPropertiesDirect;

