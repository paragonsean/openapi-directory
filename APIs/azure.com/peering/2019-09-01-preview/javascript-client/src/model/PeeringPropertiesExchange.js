/**
 * PeeringManagementClient
 * APIs to manage Peering resources through the Azure Resource Manager.
 *
 * The version of the OpenAPI document: 2019-09-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ExchangeConnection from './ExchangeConnection';
import SubResource from './SubResource';

/**
 * The PeeringPropertiesExchange model module.
 * @module model/PeeringPropertiesExchange
 * @version 2019-09-01-preview
 */
class PeeringPropertiesExchange {
    /**
     * Constructs a new <code>PeeringPropertiesExchange</code>.
     * The properties that define an exchange peering.
     * @alias module:model/PeeringPropertiesExchange
     */
    constructor() { 
        
        PeeringPropertiesExchange.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PeeringPropertiesExchange</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PeeringPropertiesExchange} obj Optional instance to populate.
     * @return {module:model/PeeringPropertiesExchange} The populated <code>PeeringPropertiesExchange</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PeeringPropertiesExchange();

            if (data.hasOwnProperty('connections')) {
                obj['connections'] = ApiClient.convertToType(data['connections'], [ExchangeConnection]);
            }
            if (data.hasOwnProperty('peerAsn')) {
                obj['peerAsn'] = SubResource.constructFromObject(data['peerAsn']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PeeringPropertiesExchange</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PeeringPropertiesExchange</code>.
     */
    static validateJSON(data) {
        if (data['connections']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['connections'])) {
                throw new Error("Expected the field `connections` to be an array in the JSON data but got " + data['connections']);
            }
            // validate the optional field `connections` (array)
            for (const item of data['connections']) {
                ExchangeConnection.validateJSON(item);
            };
        }
        // validate the optional field `peerAsn`
        if (data['peerAsn']) { // data not null
          SubResource.validateJSON(data['peerAsn']);
        }

        return true;
    }


}



/**
 * The set of connections that constitute an exchange peering.
 * @member {Array.<module:model/ExchangeConnection>} connections
 */
PeeringPropertiesExchange.prototype['connections'] = undefined;

/**
 * @member {module:model/SubResource} peerAsn
 */
PeeringPropertiesExchange.prototype['peerAsn'] = undefined;






export default PeeringPropertiesExchange;

