/*
 * PeeringManagementClient
 * APIs to manage Peering resources through the Azure Resource Manager.
 *
 * The version of the OpenAPI document: 2019-09-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The properties that define an exchange peering facility.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:11:15.109247-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ExchangePeeringFacility {
  public static final String SERIALIZED_NAME_BANDWIDTH_IN_MBPS = "bandwidthInMbps";
  @SerializedName(SERIALIZED_NAME_BANDWIDTH_IN_MBPS)
  private Integer bandwidthInMbps;

  public static final String SERIALIZED_NAME_EXCHANGE_NAME = "exchangeName";
  @SerializedName(SERIALIZED_NAME_EXCHANGE_NAME)
  private String exchangeName;

  public static final String SERIALIZED_NAME_FACILITY_I_PV4_PREFIX = "facilityIPv4Prefix";
  @SerializedName(SERIALIZED_NAME_FACILITY_I_PV4_PREFIX)
  private String facilityIPv4Prefix;

  public static final String SERIALIZED_NAME_FACILITY_I_PV6_PREFIX = "facilityIPv6Prefix";
  @SerializedName(SERIALIZED_NAME_FACILITY_I_PV6_PREFIX)
  private String facilityIPv6Prefix;

  public static final String SERIALIZED_NAME_MICROSOFT_I_PV4_ADDRESS = "microsoftIPv4Address";
  @SerializedName(SERIALIZED_NAME_MICROSOFT_I_PV4_ADDRESS)
  private String microsoftIPv4Address;

  public static final String SERIALIZED_NAME_MICROSOFT_I_PV6_ADDRESS = "microsoftIPv6Address";
  @SerializedName(SERIALIZED_NAME_MICROSOFT_I_PV6_ADDRESS)
  private String microsoftIPv6Address;

  public static final String SERIALIZED_NAME_PEERING_D_B_FACILITY_ID = "peeringDBFacilityId";
  @SerializedName(SERIALIZED_NAME_PEERING_D_B_FACILITY_ID)
  private Integer peeringDBFacilityId;

  public static final String SERIALIZED_NAME_PEERING_D_B_FACILITY_LINK = "peeringDBFacilityLink";
  @SerializedName(SERIALIZED_NAME_PEERING_D_B_FACILITY_LINK)
  private String peeringDBFacilityLink;

  public ExchangePeeringFacility() {
  }

  public ExchangePeeringFacility bandwidthInMbps(Integer bandwidthInMbps) {
    this.bandwidthInMbps = bandwidthInMbps;
    return this;
  }

  /**
   * The bandwidth of the connection between Microsoft and the exchange peering facility.
   * @return bandwidthInMbps
   */
  @javax.annotation.Nullable
  public Integer getBandwidthInMbps() {
    return bandwidthInMbps;
  }

  public void setBandwidthInMbps(Integer bandwidthInMbps) {
    this.bandwidthInMbps = bandwidthInMbps;
  }


  public ExchangePeeringFacility exchangeName(String exchangeName) {
    this.exchangeName = exchangeName;
    return this;
  }

  /**
   * The name of the exchange peering facility.
   * @return exchangeName
   */
  @javax.annotation.Nullable
  public String getExchangeName() {
    return exchangeName;
  }

  public void setExchangeName(String exchangeName) {
    this.exchangeName = exchangeName;
  }


  public ExchangePeeringFacility facilityIPv4Prefix(String facilityIPv4Prefix) {
    this.facilityIPv4Prefix = facilityIPv4Prefix;
    return this;
  }

  /**
   * The IPv4 prefixes associated with the exchange peering facility.
   * @return facilityIPv4Prefix
   */
  @javax.annotation.Nullable
  public String getFacilityIPv4Prefix() {
    return facilityIPv4Prefix;
  }

  public void setFacilityIPv4Prefix(String facilityIPv4Prefix) {
    this.facilityIPv4Prefix = facilityIPv4Prefix;
  }


  public ExchangePeeringFacility facilityIPv6Prefix(String facilityIPv6Prefix) {
    this.facilityIPv6Prefix = facilityIPv6Prefix;
    return this;
  }

  /**
   * The IPv6 prefixes associated with the exchange peering facility.
   * @return facilityIPv6Prefix
   */
  @javax.annotation.Nullable
  public String getFacilityIPv6Prefix() {
    return facilityIPv6Prefix;
  }

  public void setFacilityIPv6Prefix(String facilityIPv6Prefix) {
    this.facilityIPv6Prefix = facilityIPv6Prefix;
  }


  public ExchangePeeringFacility microsoftIPv4Address(String microsoftIPv4Address) {
    this.microsoftIPv4Address = microsoftIPv4Address;
    return this;
  }

  /**
   * The IPv4 address of Microsoft at the exchange peering facility.
   * @return microsoftIPv4Address
   */
  @javax.annotation.Nullable
  public String getMicrosoftIPv4Address() {
    return microsoftIPv4Address;
  }

  public void setMicrosoftIPv4Address(String microsoftIPv4Address) {
    this.microsoftIPv4Address = microsoftIPv4Address;
  }


  public ExchangePeeringFacility microsoftIPv6Address(String microsoftIPv6Address) {
    this.microsoftIPv6Address = microsoftIPv6Address;
    return this;
  }

  /**
   * The IPv6 address of Microsoft at the exchange peering facility.
   * @return microsoftIPv6Address
   */
  @javax.annotation.Nullable
  public String getMicrosoftIPv6Address() {
    return microsoftIPv6Address;
  }

  public void setMicrosoftIPv6Address(String microsoftIPv6Address) {
    this.microsoftIPv6Address = microsoftIPv6Address;
  }


  public ExchangePeeringFacility peeringDBFacilityId(Integer peeringDBFacilityId) {
    this.peeringDBFacilityId = peeringDBFacilityId;
    return this;
  }

  /**
   * The PeeringDB.com ID of the facility.
   * @return peeringDBFacilityId
   */
  @javax.annotation.Nullable
  public Integer getPeeringDBFacilityId() {
    return peeringDBFacilityId;
  }

  public void setPeeringDBFacilityId(Integer peeringDBFacilityId) {
    this.peeringDBFacilityId = peeringDBFacilityId;
  }


  public ExchangePeeringFacility peeringDBFacilityLink(String peeringDBFacilityLink) {
    this.peeringDBFacilityLink = peeringDBFacilityLink;
    return this;
  }

  /**
   * The PeeringDB.com URL of the facility.
   * @return peeringDBFacilityLink
   */
  @javax.annotation.Nullable
  public String getPeeringDBFacilityLink() {
    return peeringDBFacilityLink;
  }

  public void setPeeringDBFacilityLink(String peeringDBFacilityLink) {
    this.peeringDBFacilityLink = peeringDBFacilityLink;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExchangePeeringFacility exchangePeeringFacility = (ExchangePeeringFacility) o;
    return Objects.equals(this.bandwidthInMbps, exchangePeeringFacility.bandwidthInMbps) &&
        Objects.equals(this.exchangeName, exchangePeeringFacility.exchangeName) &&
        Objects.equals(this.facilityIPv4Prefix, exchangePeeringFacility.facilityIPv4Prefix) &&
        Objects.equals(this.facilityIPv6Prefix, exchangePeeringFacility.facilityIPv6Prefix) &&
        Objects.equals(this.microsoftIPv4Address, exchangePeeringFacility.microsoftIPv4Address) &&
        Objects.equals(this.microsoftIPv6Address, exchangePeeringFacility.microsoftIPv6Address) &&
        Objects.equals(this.peeringDBFacilityId, exchangePeeringFacility.peeringDBFacilityId) &&
        Objects.equals(this.peeringDBFacilityLink, exchangePeeringFacility.peeringDBFacilityLink);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bandwidthInMbps, exchangeName, facilityIPv4Prefix, facilityIPv6Prefix, microsoftIPv4Address, microsoftIPv6Address, peeringDBFacilityId, peeringDBFacilityLink);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExchangePeeringFacility {\n");
    sb.append("    bandwidthInMbps: ").append(toIndentedString(bandwidthInMbps)).append("\n");
    sb.append("    exchangeName: ").append(toIndentedString(exchangeName)).append("\n");
    sb.append("    facilityIPv4Prefix: ").append(toIndentedString(facilityIPv4Prefix)).append("\n");
    sb.append("    facilityIPv6Prefix: ").append(toIndentedString(facilityIPv6Prefix)).append("\n");
    sb.append("    microsoftIPv4Address: ").append(toIndentedString(microsoftIPv4Address)).append("\n");
    sb.append("    microsoftIPv6Address: ").append(toIndentedString(microsoftIPv6Address)).append("\n");
    sb.append("    peeringDBFacilityId: ").append(toIndentedString(peeringDBFacilityId)).append("\n");
    sb.append("    peeringDBFacilityLink: ").append(toIndentedString(peeringDBFacilityLink)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bandwidthInMbps");
    openapiFields.add("exchangeName");
    openapiFields.add("facilityIPv4Prefix");
    openapiFields.add("facilityIPv6Prefix");
    openapiFields.add("microsoftIPv4Address");
    openapiFields.add("microsoftIPv6Address");
    openapiFields.add("peeringDBFacilityId");
    openapiFields.add("peeringDBFacilityLink");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ExchangePeeringFacility
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ExchangePeeringFacility.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExchangePeeringFacility is not found in the empty JSON string", ExchangePeeringFacility.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ExchangePeeringFacility.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ExchangePeeringFacility` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("exchangeName") != null && !jsonObj.get("exchangeName").isJsonNull()) && !jsonObj.get("exchangeName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `exchangeName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("exchangeName").toString()));
      }
      if ((jsonObj.get("facilityIPv4Prefix") != null && !jsonObj.get("facilityIPv4Prefix").isJsonNull()) && !jsonObj.get("facilityIPv4Prefix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `facilityIPv4Prefix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("facilityIPv4Prefix").toString()));
      }
      if ((jsonObj.get("facilityIPv6Prefix") != null && !jsonObj.get("facilityIPv6Prefix").isJsonNull()) && !jsonObj.get("facilityIPv6Prefix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `facilityIPv6Prefix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("facilityIPv6Prefix").toString()));
      }
      if ((jsonObj.get("microsoftIPv4Address") != null && !jsonObj.get("microsoftIPv4Address").isJsonNull()) && !jsonObj.get("microsoftIPv4Address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `microsoftIPv4Address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("microsoftIPv4Address").toString()));
      }
      if ((jsonObj.get("microsoftIPv6Address") != null && !jsonObj.get("microsoftIPv6Address").isJsonNull()) && !jsonObj.get("microsoftIPv6Address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `microsoftIPv6Address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("microsoftIPv6Address").toString()));
      }
      if ((jsonObj.get("peeringDBFacilityLink") != null && !jsonObj.get("peeringDBFacilityLink").isJsonNull()) && !jsonObj.get("peeringDBFacilityLink").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `peeringDBFacilityLink` to be a primitive type in the JSON string but got `%s`", jsonObj.get("peeringDBFacilityLink").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExchangePeeringFacility.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExchangePeeringFacility' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExchangePeeringFacility> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExchangePeeringFacility.class));

       return (TypeAdapter<T>) new TypeAdapter<ExchangePeeringFacility>() {
           @Override
           public void write(JsonWriter out, ExchangePeeringFacility value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ExchangePeeringFacility read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ExchangePeeringFacility given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ExchangePeeringFacility
   * @throws IOException if the JSON string is invalid with respect to ExchangePeeringFacility
   */
  public static ExchangePeeringFacility fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExchangePeeringFacility.class);
  }

  /**
   * Convert an instance of ExchangePeeringFacility to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

