# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.direct_connection import DirectConnection
from openapi_server.models.sub_resource import SubResource
from openapi_server import util


class PeeringPropertiesDirect(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, connections: List[DirectConnection]=None, direct_peering_type: str=None, peer_asn: SubResource=None, use_for_peering_service: bool=None):
        """PeeringPropertiesDirect - a model defined in OpenAPI

        :param connections: The connections of this PeeringPropertiesDirect.
        :param direct_peering_type: The direct_peering_type of this PeeringPropertiesDirect.
        :param peer_asn: The peer_asn of this PeeringPropertiesDirect.
        :param use_for_peering_service: The use_for_peering_service of this PeeringPropertiesDirect.
        """
        self.openapi_types = {
            'connections': List[DirectConnection],
            'direct_peering_type': str,
            'peer_asn': SubResource,
            'use_for_peering_service': bool
        }

        self.attribute_map = {
            'connections': 'connections',
            'direct_peering_type': 'directPeeringType',
            'peer_asn': 'peerAsn',
            'use_for_peering_service': 'useForPeeringService'
        }

        self._connections = connections
        self._direct_peering_type = direct_peering_type
        self._peer_asn = peer_asn
        self._use_for_peering_service = use_for_peering_service

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PeeringPropertiesDirect':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PeeringPropertiesDirect of this PeeringPropertiesDirect.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def connections(self):
        """Gets the connections of this PeeringPropertiesDirect.

        The set of connections that constitute a direct peering.

        :return: The connections of this PeeringPropertiesDirect.
        :rtype: List[DirectConnection]
        """
        return self._connections

    @connections.setter
    def connections(self, connections):
        """Sets the connections of this PeeringPropertiesDirect.

        The set of connections that constitute a direct peering.

        :param connections: The connections of this PeeringPropertiesDirect.
        :type connections: List[DirectConnection]
        """

        self._connections = connections

    @property
    def direct_peering_type(self):
        """Gets the direct_peering_type of this PeeringPropertiesDirect.

        The type of direct peering.

        :return: The direct_peering_type of this PeeringPropertiesDirect.
        :rtype: str
        """
        return self._direct_peering_type

    @direct_peering_type.setter
    def direct_peering_type(self, direct_peering_type):
        """Sets the direct_peering_type of this PeeringPropertiesDirect.

        The type of direct peering.

        :param direct_peering_type: The direct_peering_type of this PeeringPropertiesDirect.
        :type direct_peering_type: str
        """
        allowed_values = ["Edge", "Transit", "Cdn", "Internal", "Ix", "IxRs"]  # noqa: E501
        if direct_peering_type not in allowed_values:
            raise ValueError(
                "Invalid value for `direct_peering_type` ({0}), must be one of {1}"
                .format(direct_peering_type, allowed_values)
            )

        self._direct_peering_type = direct_peering_type

    @property
    def peer_asn(self):
        """Gets the peer_asn of this PeeringPropertiesDirect.


        :return: The peer_asn of this PeeringPropertiesDirect.
        :rtype: SubResource
        """
        return self._peer_asn

    @peer_asn.setter
    def peer_asn(self, peer_asn):
        """Sets the peer_asn of this PeeringPropertiesDirect.


        :param peer_asn: The peer_asn of this PeeringPropertiesDirect.
        :type peer_asn: SubResource
        """

        self._peer_asn = peer_asn

    @property
    def use_for_peering_service(self):
        """Gets the use_for_peering_service of this PeeringPropertiesDirect.

        The flag that indicates whether or not the peering is used for peering service.

        :return: The use_for_peering_service of this PeeringPropertiesDirect.
        :rtype: bool
        """
        return self._use_for_peering_service

    @use_for_peering_service.setter
    def use_for_peering_service(self, use_for_peering_service):
        """Sets the use_for_peering_service of this PeeringPropertiesDirect.

        The flag that indicates whether or not the peering is used for peering service.

        :param use_for_peering_service: The use_for_peering_service of this PeeringPropertiesDirect.
        :type use_for_peering_service: bool
        """

        self._use_for_peering_service = use_for_peering_service
