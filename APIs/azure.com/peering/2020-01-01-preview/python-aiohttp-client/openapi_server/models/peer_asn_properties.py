# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.contact_detail import ContactDetail
from openapi_server import util


class PeerAsnProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, error_message: str=None, peer_asn: int=None, peer_contact_detail: List[ContactDetail]=None, peer_name: str=None, validation_state: str=None):
        """PeerAsnProperties - a model defined in OpenAPI

        :param error_message: The error_message of this PeerAsnProperties.
        :param peer_asn: The peer_asn of this PeerAsnProperties.
        :param peer_contact_detail: The peer_contact_detail of this PeerAsnProperties.
        :param peer_name: The peer_name of this PeerAsnProperties.
        :param validation_state: The validation_state of this PeerAsnProperties.
        """
        self.openapi_types = {
            'error_message': str,
            'peer_asn': int,
            'peer_contact_detail': List[ContactDetail],
            'peer_name': str,
            'validation_state': str
        }

        self.attribute_map = {
            'error_message': 'errorMessage',
            'peer_asn': 'peerAsn',
            'peer_contact_detail': 'peerContactDetail',
            'peer_name': 'peerName',
            'validation_state': 'validationState'
        }

        self._error_message = error_message
        self._peer_asn = peer_asn
        self._peer_contact_detail = peer_contact_detail
        self._peer_name = peer_name
        self._validation_state = validation_state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PeerAsnProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PeerAsnProperties of this PeerAsnProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def error_message(self):
        """Gets the error_message of this PeerAsnProperties.

        The error message for the validation state

        :return: The error_message of this PeerAsnProperties.
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this PeerAsnProperties.

        The error message for the validation state

        :param error_message: The error_message of this PeerAsnProperties.
        :type error_message: str
        """

        self._error_message = error_message

    @property
    def peer_asn(self):
        """Gets the peer_asn of this PeerAsnProperties.

        The Autonomous System Number (ASN) of the peer.

        :return: The peer_asn of this PeerAsnProperties.
        :rtype: int
        """
        return self._peer_asn

    @peer_asn.setter
    def peer_asn(self, peer_asn):
        """Sets the peer_asn of this PeerAsnProperties.

        The Autonomous System Number (ASN) of the peer.

        :param peer_asn: The peer_asn of this PeerAsnProperties.
        :type peer_asn: int
        """

        self._peer_asn = peer_asn

    @property
    def peer_contact_detail(self):
        """Gets the peer_contact_detail of this PeerAsnProperties.

        The contact details of the peer.

        :return: The peer_contact_detail of this PeerAsnProperties.
        :rtype: List[ContactDetail]
        """
        return self._peer_contact_detail

    @peer_contact_detail.setter
    def peer_contact_detail(self, peer_contact_detail):
        """Sets the peer_contact_detail of this PeerAsnProperties.

        The contact details of the peer.

        :param peer_contact_detail: The peer_contact_detail of this PeerAsnProperties.
        :type peer_contact_detail: List[ContactDetail]
        """

        self._peer_contact_detail = peer_contact_detail

    @property
    def peer_name(self):
        """Gets the peer_name of this PeerAsnProperties.

        The name of the peer.

        :return: The peer_name of this PeerAsnProperties.
        :rtype: str
        """
        return self._peer_name

    @peer_name.setter
    def peer_name(self, peer_name):
        """Sets the peer_name of this PeerAsnProperties.

        The name of the peer.

        :param peer_name: The peer_name of this PeerAsnProperties.
        :type peer_name: str
        """

        self._peer_name = peer_name

    @property
    def validation_state(self):
        """Gets the validation_state of this PeerAsnProperties.

        The validation state of the ASN associated with the peer.

        :return: The validation_state of this PeerAsnProperties.
        :rtype: str
        """
        return self._validation_state

    @validation_state.setter
    def validation_state(self, validation_state):
        """Sets the validation_state of this PeerAsnProperties.

        The validation state of the ASN associated with the peer.

        :param validation_state: The validation_state of this PeerAsnProperties.
        :type validation_state: str
        """
        allowed_values = ["None", "Pending", "Approved", "Failed"]  # noqa: E501
        if validation_state not in allowed_values:
            raise ValueError(
                "Invalid value for `validation_state` ({0}), must be one of {1}"
                .format(validation_state, allowed_values)
            )

        self._validation_state = validation_state
