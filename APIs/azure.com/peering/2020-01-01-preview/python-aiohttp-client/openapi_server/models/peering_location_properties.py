# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.peering_location_properties_direct import PeeringLocationPropertiesDirect
from openapi_server.models.peering_location_properties_exchange import PeeringLocationPropertiesExchange
from openapi_server import util


class PeeringLocationProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, azure_region: str=None, country: str=None, direct: PeeringLocationPropertiesDirect=None, exchange: PeeringLocationPropertiesExchange=None, peering_location: str=None):
        """PeeringLocationProperties - a model defined in OpenAPI

        :param azure_region: The azure_region of this PeeringLocationProperties.
        :param country: The country of this PeeringLocationProperties.
        :param direct: The direct of this PeeringLocationProperties.
        :param exchange: The exchange of this PeeringLocationProperties.
        :param peering_location: The peering_location of this PeeringLocationProperties.
        """
        self.openapi_types = {
            'azure_region': str,
            'country': str,
            'direct': PeeringLocationPropertiesDirect,
            'exchange': PeeringLocationPropertiesExchange,
            'peering_location': str
        }

        self.attribute_map = {
            'azure_region': 'azureRegion',
            'country': 'country',
            'direct': 'direct',
            'exchange': 'exchange',
            'peering_location': 'peeringLocation'
        }

        self._azure_region = azure_region
        self._country = country
        self._direct = direct
        self._exchange = exchange
        self._peering_location = peering_location

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PeeringLocationProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PeeringLocationProperties of this PeeringLocationProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def azure_region(self):
        """Gets the azure_region of this PeeringLocationProperties.

        The Azure region associated with the peering location.

        :return: The azure_region of this PeeringLocationProperties.
        :rtype: str
        """
        return self._azure_region

    @azure_region.setter
    def azure_region(self, azure_region):
        """Sets the azure_region of this PeeringLocationProperties.

        The Azure region associated with the peering location.

        :param azure_region: The azure_region of this PeeringLocationProperties.
        :type azure_region: str
        """

        self._azure_region = azure_region

    @property
    def country(self):
        """Gets the country of this PeeringLocationProperties.

        The country in which the peering location exists.

        :return: The country of this PeeringLocationProperties.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this PeeringLocationProperties.

        The country in which the peering location exists.

        :param country: The country of this PeeringLocationProperties.
        :type country: str
        """

        self._country = country

    @property
    def direct(self):
        """Gets the direct of this PeeringLocationProperties.


        :return: The direct of this PeeringLocationProperties.
        :rtype: PeeringLocationPropertiesDirect
        """
        return self._direct

    @direct.setter
    def direct(self, direct):
        """Sets the direct of this PeeringLocationProperties.


        :param direct: The direct of this PeeringLocationProperties.
        :type direct: PeeringLocationPropertiesDirect
        """

        self._direct = direct

    @property
    def exchange(self):
        """Gets the exchange of this PeeringLocationProperties.


        :return: The exchange of this PeeringLocationProperties.
        :rtype: PeeringLocationPropertiesExchange
        """
        return self._exchange

    @exchange.setter
    def exchange(self, exchange):
        """Sets the exchange of this PeeringLocationProperties.


        :param exchange: The exchange of this PeeringLocationProperties.
        :type exchange: PeeringLocationPropertiesExchange
        """

        self._exchange = exchange

    @property
    def peering_location(self):
        """Gets the peering_location of this PeeringLocationProperties.

        The name of the peering location.

        :return: The peering_location of this PeeringLocationProperties.
        :rtype: str
        """
        return self._peering_location

    @peering_location.setter
    def peering_location(self, peering_location):
        """Sets the peering_location of this PeeringLocationProperties.

        The name of the peering location.

        :param peering_location: The peering_location of this PeeringLocationProperties.
        :type peering_location: str
        """

        self._peering_location = peering_location
