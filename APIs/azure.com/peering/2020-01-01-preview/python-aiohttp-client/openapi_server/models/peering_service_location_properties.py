# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PeeringServiceLocationProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, azure_region: str=None, country: str=None, state: str=None):
        """PeeringServiceLocationProperties - a model defined in OpenAPI

        :param azure_region: The azure_region of this PeeringServiceLocationProperties.
        :param country: The country of this PeeringServiceLocationProperties.
        :param state: The state of this PeeringServiceLocationProperties.
        """
        self.openapi_types = {
            'azure_region': str,
            'country': str,
            'state': str
        }

        self.attribute_map = {
            'azure_region': 'azureRegion',
            'country': 'country',
            'state': 'state'
        }

        self._azure_region = azure_region
        self._country = country
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PeeringServiceLocationProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PeeringServiceLocationProperties of this PeeringServiceLocationProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def azure_region(self):
        """Gets the azure_region of this PeeringServiceLocationProperties.

        Azure region for the location

        :return: The azure_region of this PeeringServiceLocationProperties.
        :rtype: str
        """
        return self._azure_region

    @azure_region.setter
    def azure_region(self, azure_region):
        """Sets the azure_region of this PeeringServiceLocationProperties.

        Azure region for the location

        :param azure_region: The azure_region of this PeeringServiceLocationProperties.
        :type azure_region: str
        """

        self._azure_region = azure_region

    @property
    def country(self):
        """Gets the country of this PeeringServiceLocationProperties.

        Country of the customer

        :return: The country of this PeeringServiceLocationProperties.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this PeeringServiceLocationProperties.

        Country of the customer

        :param country: The country of this PeeringServiceLocationProperties.
        :type country: str
        """

        self._country = country

    @property
    def state(self):
        """Gets the state of this PeeringServiceLocationProperties.

        State of the customer

        :return: The state of this PeeringServiceLocationProperties.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this PeeringServiceLocationProperties.

        State of the customer

        :param state: The state of this PeeringServiceLocationProperties.
        :type state: str
        """

        self._state = state
