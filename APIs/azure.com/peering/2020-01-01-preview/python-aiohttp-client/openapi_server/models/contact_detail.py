# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ContactDetail(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, email: str=None, phone: str=None, role: str=None):
        """ContactDetail - a model defined in OpenAPI

        :param email: The email of this ContactDetail.
        :param phone: The phone of this ContactDetail.
        :param role: The role of this ContactDetail.
        """
        self.openapi_types = {
            'email': str,
            'phone': str,
            'role': str
        }

        self.attribute_map = {
            'email': 'email',
            'phone': 'phone',
            'role': 'role'
        }

        self._email = email
        self._phone = phone
        self._role = role

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContactDetail':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ContactDetail of this ContactDetail.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def email(self):
        """Gets the email of this ContactDetail.

        The e-mail address of the contact.

        :return: The email of this ContactDetail.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this ContactDetail.

        The e-mail address of the contact.

        :param email: The email of this ContactDetail.
        :type email: str
        """

        self._email = email

    @property
    def phone(self):
        """Gets the phone of this ContactDetail.

        The phone number of the contact.

        :return: The phone of this ContactDetail.
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this ContactDetail.

        The phone number of the contact.

        :param phone: The phone of this ContactDetail.
        :type phone: str
        """

        self._phone = phone

    @property
    def role(self):
        """Gets the role of this ContactDetail.

        The role of the contact.

        :return: The role of this ContactDetail.
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this ContactDetail.

        The role of the contact.

        :param role: The role of this ContactDetail.
        :type role: str
        """
        allowed_values = ["Noc", "Policy", "Technical", "Service", "Other"]  # noqa: E501
        if role not in allowed_values:
            raise ValueError(
                "Invalid value for `role` ({0}), must be one of {1}"
                .format(role, allowed_values)
            )

        self._role = role
