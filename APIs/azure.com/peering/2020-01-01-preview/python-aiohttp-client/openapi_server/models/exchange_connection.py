# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.bgp_session import BgpSession
from openapi_server import util


class ExchangeConnection(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bgp_session: BgpSession=None, connection_identifier: str=None, connection_state: str=None, error_message: str=None, peering_db_facility_id: int=None):
        """ExchangeConnection - a model defined in OpenAPI

        :param bgp_session: The bgp_session of this ExchangeConnection.
        :param connection_identifier: The connection_identifier of this ExchangeConnection.
        :param connection_state: The connection_state of this ExchangeConnection.
        :param error_message: The error_message of this ExchangeConnection.
        :param peering_db_facility_id: The peering_db_facility_id of this ExchangeConnection.
        """
        self.openapi_types = {
            'bgp_session': BgpSession,
            'connection_identifier': str,
            'connection_state': str,
            'error_message': str,
            'peering_db_facility_id': int
        }

        self.attribute_map = {
            'bgp_session': 'bgpSession',
            'connection_identifier': 'connectionIdentifier',
            'connection_state': 'connectionState',
            'error_message': 'errorMessage',
            'peering_db_facility_id': 'peeringDBFacilityId'
        }

        self._bgp_session = bgp_session
        self._connection_identifier = connection_identifier
        self._connection_state = connection_state
        self._error_message = error_message
        self._peering_db_facility_id = peering_db_facility_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExchangeConnection':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ExchangeConnection of this ExchangeConnection.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bgp_session(self):
        """Gets the bgp_session of this ExchangeConnection.


        :return: The bgp_session of this ExchangeConnection.
        :rtype: BgpSession
        """
        return self._bgp_session

    @bgp_session.setter
    def bgp_session(self, bgp_session):
        """Sets the bgp_session of this ExchangeConnection.


        :param bgp_session: The bgp_session of this ExchangeConnection.
        :type bgp_session: BgpSession
        """

        self._bgp_session = bgp_session

    @property
    def connection_identifier(self):
        """Gets the connection_identifier of this ExchangeConnection.

        The unique identifier (GUID) for the connection.

        :return: The connection_identifier of this ExchangeConnection.
        :rtype: str
        """
        return self._connection_identifier

    @connection_identifier.setter
    def connection_identifier(self, connection_identifier):
        """Sets the connection_identifier of this ExchangeConnection.

        The unique identifier (GUID) for the connection.

        :param connection_identifier: The connection_identifier of this ExchangeConnection.
        :type connection_identifier: str
        """

        self._connection_identifier = connection_identifier

    @property
    def connection_state(self):
        """Gets the connection_state of this ExchangeConnection.

        The state of the connection.

        :return: The connection_state of this ExchangeConnection.
        :rtype: str
        """
        return self._connection_state

    @connection_state.setter
    def connection_state(self, connection_state):
        """Sets the connection_state of this ExchangeConnection.

        The state of the connection.

        :param connection_state: The connection_state of this ExchangeConnection.
        :type connection_state: str
        """
        allowed_values = ["None", "PendingApproval", "Approved", "ProvisioningStarted", "ProvisioningFailed", "ProvisioningCompleted", "Validating", "Active"]  # noqa: E501
        if connection_state not in allowed_values:
            raise ValueError(
                "Invalid value for `connection_state` ({0}), must be one of {1}"
                .format(connection_state, allowed_values)
            )

        self._connection_state = connection_state

    @property
    def error_message(self):
        """Gets the error_message of this ExchangeConnection.

        The error message related to the connection state, if any.

        :return: The error_message of this ExchangeConnection.
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this ExchangeConnection.

        The error message related to the connection state, if any.

        :param error_message: The error_message of this ExchangeConnection.
        :type error_message: str
        """

        self._error_message = error_message

    @property
    def peering_db_facility_id(self):
        """Gets the peering_db_facility_id of this ExchangeConnection.

        The PeeringDB.com ID of the facility at which the connection has to be set up.

        :return: The peering_db_facility_id of this ExchangeConnection.
        :rtype: int
        """
        return self._peering_db_facility_id

    @peering_db_facility_id.setter
    def peering_db_facility_id(self, peering_db_facility_id):
        """Sets the peering_db_facility_id of this ExchangeConnection.

        The PeeringDB.com ID of the facility at which the connection has to be set up.

        :param peering_db_facility_id: The peering_db_facility_id of this ExchangeConnection.
        :type peering_db_facility_id: int
        """

        self._peering_db_facility_id = peering_db_facility_id
