# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PeeringRegisteredAsnProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, asn: int=None, peering_service_prefix_key: str=None, provisioning_state: str=None):
        """PeeringRegisteredAsnProperties - a model defined in OpenAPI

        :param asn: The asn of this PeeringRegisteredAsnProperties.
        :param peering_service_prefix_key: The peering_service_prefix_key of this PeeringRegisteredAsnProperties.
        :param provisioning_state: The provisioning_state of this PeeringRegisteredAsnProperties.
        """
        self.openapi_types = {
            'asn': int,
            'peering_service_prefix_key': str,
            'provisioning_state': str
        }

        self.attribute_map = {
            'asn': 'asn',
            'peering_service_prefix_key': 'peeringServicePrefixKey',
            'provisioning_state': 'provisioningState'
        }

        self._asn = asn
        self._peering_service_prefix_key = peering_service_prefix_key
        self._provisioning_state = provisioning_state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PeeringRegisteredAsnProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PeeringRegisteredAsnProperties of this PeeringRegisteredAsnProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def asn(self):
        """Gets the asn of this PeeringRegisteredAsnProperties.

        The customer's ASN from which traffic originates.

        :return: The asn of this PeeringRegisteredAsnProperties.
        :rtype: int
        """
        return self._asn

    @asn.setter
    def asn(self, asn):
        """Sets the asn of this PeeringRegisteredAsnProperties.

        The customer's ASN from which traffic originates.

        :param asn: The asn of this PeeringRegisteredAsnProperties.
        :type asn: int
        """

        self._asn = asn

    @property
    def peering_service_prefix_key(self):
        """Gets the peering_service_prefix_key of this PeeringRegisteredAsnProperties.

        The peering service prefix key that is to be shared with the customer.

        :return: The peering_service_prefix_key of this PeeringRegisteredAsnProperties.
        :rtype: str
        """
        return self._peering_service_prefix_key

    @peering_service_prefix_key.setter
    def peering_service_prefix_key(self, peering_service_prefix_key):
        """Sets the peering_service_prefix_key of this PeeringRegisteredAsnProperties.

        The peering service prefix key that is to be shared with the customer.

        :param peering_service_prefix_key: The peering_service_prefix_key of this PeeringRegisteredAsnProperties.
        :type peering_service_prefix_key: str
        """

        self._peering_service_prefix_key = peering_service_prefix_key

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this PeeringRegisteredAsnProperties.

        The provisioning state of the resource.

        :return: The provisioning_state of this PeeringRegisteredAsnProperties.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this PeeringRegisteredAsnProperties.

        The provisioning state of the resource.

        :param provisioning_state: The provisioning_state of this PeeringRegisteredAsnProperties.
        :type provisioning_state: str
        """
        allowed_values = ["Succeeded", "Updating", "Deleting", "Failed"]  # noqa: E501
        if provisioning_state not in allowed_values:
            raise ValueError(
                "Invalid value for `provisioning_state` ({0}), must be one of {1}"
                .format(provisioning_state, allowed_values)
            )

        self._provisioning_state = provisioning_state
