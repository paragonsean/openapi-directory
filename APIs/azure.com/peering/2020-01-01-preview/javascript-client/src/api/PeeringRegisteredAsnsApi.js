/**
 * PeeringManagementClient
 * APIs to manage Peering resources through the Azure Resource Manager.
 *
 * The version of the OpenAPI document: 2020-01-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorResponse from '../model/ErrorResponse';
import PeeringRegisteredAsn from '../model/PeeringRegisteredAsn';
import PeeringRegisteredAsnListResult from '../model/PeeringRegisteredAsnListResult';

/**
* PeeringRegisteredAsns service.
* @module api/PeeringRegisteredAsnsApi
* @version 2020-01-01-preview
*/
export default class PeeringRegisteredAsnsApi {

    /**
    * Constructs a new PeeringRegisteredAsnsApi. 
    * @alias module:api/PeeringRegisteredAsnsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the registeredAsnsCreateOrUpdate operation.
     * @callback module:api/PeeringRegisteredAsnsApi~registeredAsnsCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PeeringRegisteredAsn} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new registered ASN with the specified name under the given subscription, resource group and peering.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} peeringName The name of the peering.
     * @param {String} registeredAsnName The name of the ASN.
     * @param {String} subscriptionId The Azure subscription ID.
     * @param {String} apiVersion The client API version.
     * @param {module:model/PeeringRegisteredAsn} registeredAsn The properties needed to create a registered ASN.
     * @param {module:api/PeeringRegisteredAsnsApi~registeredAsnsCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PeeringRegisteredAsn}
     */
    registeredAsnsCreateOrUpdate(resourceGroupName, peeringName, registeredAsnName, subscriptionId, apiVersion, registeredAsn, callback) {
      let postBody = registeredAsn;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling registeredAsnsCreateOrUpdate");
      }
      // verify the required parameter 'peeringName' is set
      if (peeringName === undefined || peeringName === null) {
        throw new Error("Missing the required parameter 'peeringName' when calling registeredAsnsCreateOrUpdate");
      }
      // verify the required parameter 'registeredAsnName' is set
      if (registeredAsnName === undefined || registeredAsnName === null) {
        throw new Error("Missing the required parameter 'registeredAsnName' when calling registeredAsnsCreateOrUpdate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling registeredAsnsCreateOrUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling registeredAsnsCreateOrUpdate");
      }
      // verify the required parameter 'registeredAsn' is set
      if (registeredAsn === undefined || registeredAsn === null) {
        throw new Error("Missing the required parameter 'registeredAsn' when calling registeredAsnsCreateOrUpdate");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'peeringName': peeringName,
        'registeredAsnName': registeredAsnName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PeeringRegisteredAsn;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Peering/peerings/{peeringName}/registeredAsns/{registeredAsnName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the registeredAsnsDelete operation.
     * @callback module:api/PeeringRegisteredAsnsApi~registeredAsnsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an existing registered ASN with the specified name under the given subscription, resource group and peering.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} peeringName The name of the peering.
     * @param {String} registeredAsnName The name of the registered ASN.
     * @param {String} subscriptionId The Azure subscription ID.
     * @param {String} apiVersion The client API version.
     * @param {module:api/PeeringRegisteredAsnsApi~registeredAsnsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    registeredAsnsDelete(resourceGroupName, peeringName, registeredAsnName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling registeredAsnsDelete");
      }
      // verify the required parameter 'peeringName' is set
      if (peeringName === undefined || peeringName === null) {
        throw new Error("Missing the required parameter 'peeringName' when calling registeredAsnsDelete");
      }
      // verify the required parameter 'registeredAsnName' is set
      if (registeredAsnName === undefined || registeredAsnName === null) {
        throw new Error("Missing the required parameter 'registeredAsnName' when calling registeredAsnsDelete");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling registeredAsnsDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling registeredAsnsDelete");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'peeringName': peeringName,
        'registeredAsnName': registeredAsnName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Peering/peerings/{peeringName}/registeredAsns/{registeredAsnName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the registeredAsnsGet operation.
     * @callback module:api/PeeringRegisteredAsnsApi~registeredAsnsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PeeringRegisteredAsn} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets an existing registered ASN with the specified name under the given subscription, resource group and peering.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} peeringName The name of the peering.
     * @param {String} registeredAsnName The name of the registered ASN.
     * @param {String} subscriptionId The Azure subscription ID.
     * @param {String} apiVersion The client API version.
     * @param {module:api/PeeringRegisteredAsnsApi~registeredAsnsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PeeringRegisteredAsn}
     */
    registeredAsnsGet(resourceGroupName, peeringName, registeredAsnName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling registeredAsnsGet");
      }
      // verify the required parameter 'peeringName' is set
      if (peeringName === undefined || peeringName === null) {
        throw new Error("Missing the required parameter 'peeringName' when calling registeredAsnsGet");
      }
      // verify the required parameter 'registeredAsnName' is set
      if (registeredAsnName === undefined || registeredAsnName === null) {
        throw new Error("Missing the required parameter 'registeredAsnName' when calling registeredAsnsGet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling registeredAsnsGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling registeredAsnsGet");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'peeringName': peeringName,
        'registeredAsnName': registeredAsnName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PeeringRegisteredAsn;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Peering/peerings/{peeringName}/registeredAsns/{registeredAsnName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the registeredAsnsListByPeering operation.
     * @callback module:api/PeeringRegisteredAsnsApi~registeredAsnsListByPeeringCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PeeringRegisteredAsnListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all registered ASNs under the given subscription, resource group and peering.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} peeringName The name of the peering.
     * @param {String} subscriptionId The Azure subscription ID.
     * @param {String} apiVersion The client API version.
     * @param {module:api/PeeringRegisteredAsnsApi~registeredAsnsListByPeeringCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PeeringRegisteredAsnListResult}
     */
    registeredAsnsListByPeering(resourceGroupName, peeringName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling registeredAsnsListByPeering");
      }
      // verify the required parameter 'peeringName' is set
      if (peeringName === undefined || peeringName === null) {
        throw new Error("Missing the required parameter 'peeringName' when calling registeredAsnsListByPeering");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling registeredAsnsListByPeering");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling registeredAsnsListByPeering");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'peeringName': peeringName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PeeringRegisteredAsnListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Peering/peerings/{peeringName}/registeredAsns', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
