/**
 * PeeringManagementClient
 * APIs to manage Peering resources through the Azure Resource Manager.
 *
 * The version of the OpenAPI document: 2020-01-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ContactDetail from './ContactDetail';

/**
 * The PeerAsnProperties model module.
 * @module model/PeerAsnProperties
 * @version 2020-01-01-preview
 */
class PeerAsnProperties {
    /**
     * Constructs a new <code>PeerAsnProperties</code>.
     * The properties that define a peer&#39;s ASN.
     * @alias module:model/PeerAsnProperties
     */
    constructor() { 
        
        PeerAsnProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PeerAsnProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PeerAsnProperties} obj Optional instance to populate.
     * @return {module:model/PeerAsnProperties} The populated <code>PeerAsnProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PeerAsnProperties();

            if (data.hasOwnProperty('errorMessage')) {
                obj['errorMessage'] = ApiClient.convertToType(data['errorMessage'], 'String');
            }
            if (data.hasOwnProperty('peerAsn')) {
                obj['peerAsn'] = ApiClient.convertToType(data['peerAsn'], 'Number');
            }
            if (data.hasOwnProperty('peerContactDetail')) {
                obj['peerContactDetail'] = ApiClient.convertToType(data['peerContactDetail'], [ContactDetail]);
            }
            if (data.hasOwnProperty('peerName')) {
                obj['peerName'] = ApiClient.convertToType(data['peerName'], 'String');
            }
            if (data.hasOwnProperty('validationState')) {
                obj['validationState'] = ApiClient.convertToType(data['validationState'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PeerAsnProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PeerAsnProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['errorMessage'] && !(typeof data['errorMessage'] === 'string' || data['errorMessage'] instanceof String)) {
            throw new Error("Expected the field `errorMessage` to be a primitive type in the JSON string but got " + data['errorMessage']);
        }
        if (data['peerContactDetail']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['peerContactDetail'])) {
                throw new Error("Expected the field `peerContactDetail` to be an array in the JSON data but got " + data['peerContactDetail']);
            }
            // validate the optional field `peerContactDetail` (array)
            for (const item of data['peerContactDetail']) {
                ContactDetail.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['peerName'] && !(typeof data['peerName'] === 'string' || data['peerName'] instanceof String)) {
            throw new Error("Expected the field `peerName` to be a primitive type in the JSON string but got " + data['peerName']);
        }
        // ensure the json data is a string
        if (data['validationState'] && !(typeof data['validationState'] === 'string' || data['validationState'] instanceof String)) {
            throw new Error("Expected the field `validationState` to be a primitive type in the JSON string but got " + data['validationState']);
        }

        return true;
    }


}



/**
 * The error message for the validation state
 * @member {String} errorMessage
 */
PeerAsnProperties.prototype['errorMessage'] = undefined;

/**
 * The Autonomous System Number (ASN) of the peer.
 * @member {Number} peerAsn
 */
PeerAsnProperties.prototype['peerAsn'] = undefined;

/**
 * The contact details of the peer.
 * @member {Array.<module:model/ContactDetail>} peerContactDetail
 */
PeerAsnProperties.prototype['peerContactDetail'] = undefined;

/**
 * The name of the peer.
 * @member {String} peerName
 */
PeerAsnProperties.prototype['peerName'] = undefined;

/**
 * The validation state of the ASN associated with the peer.
 * @member {module:model/PeerAsnProperties.ValidationStateEnum} validationState
 */
PeerAsnProperties.prototype['validationState'] = undefined;





/**
 * Allowed values for the <code>validationState</code> property.
 * @enum {String}
 * @readonly
 */
PeerAsnProperties['ValidationStateEnum'] = {

    /**
     * value: "None"
     * @const
     */
    "None": "None",

    /**
     * value: "Pending"
     * @const
     */
    "Pending": "Pending",

    /**
     * value: "Approved"
     * @const
     */
    "Approved": "Approved",

    /**
     * value: "Failed"
     * @const
     */
    "Failed": "Failed"
};



export default PeerAsnProperties;

