/**
 * PeeringManagementClient
 * APIs to manage Peering resources through the Azure Resource Manager.
 *
 * The version of the OpenAPI document: 2020-01-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ContactDetail model module.
 * @module model/ContactDetail
 * @version 2020-01-01-preview
 */
class ContactDetail {
    /**
     * Constructs a new <code>ContactDetail</code>.
     * The contact detail class.
     * @alias module:model/ContactDetail
     */
    constructor() { 
        
        ContactDetail.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ContactDetail</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ContactDetail} obj Optional instance to populate.
     * @return {module:model/ContactDetail} The populated <code>ContactDetail</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ContactDetail();

            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('phone')) {
                obj['phone'] = ApiClient.convertToType(data['phone'], 'String');
            }
            if (data.hasOwnProperty('role')) {
                obj['role'] = ApiClient.convertToType(data['role'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ContactDetail</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ContactDetail</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['phone'] && !(typeof data['phone'] === 'string' || data['phone'] instanceof String)) {
            throw new Error("Expected the field `phone` to be a primitive type in the JSON string but got " + data['phone']);
        }
        // ensure the json data is a string
        if (data['role'] && !(typeof data['role'] === 'string' || data['role'] instanceof String)) {
            throw new Error("Expected the field `role` to be a primitive type in the JSON string but got " + data['role']);
        }

        return true;
    }


}



/**
 * The e-mail address of the contact.
 * @member {String} email
 */
ContactDetail.prototype['email'] = undefined;

/**
 * The phone number of the contact.
 * @member {String} phone
 */
ContactDetail.prototype['phone'] = undefined;

/**
 * The role of the contact.
 * @member {module:model/ContactDetail.RoleEnum} role
 */
ContactDetail.prototype['role'] = undefined;





/**
 * Allowed values for the <code>role</code> property.
 * @enum {String}
 * @readonly
 */
ContactDetail['RoleEnum'] = {

    /**
     * value: "Noc"
     * @const
     */
    "Noc": "Noc",

    /**
     * value: "Policy"
     * @const
     */
    "Policy": "Policy",

    /**
     * value: "Technical"
     * @const
     */
    "Technical": "Technical",

    /**
     * value: "Service"
     * @const
     */
    "Service": "Service",

    /**
     * value: "Other"
     * @const
     */
    "Other": "Other"
};



export default ContactDetail;

