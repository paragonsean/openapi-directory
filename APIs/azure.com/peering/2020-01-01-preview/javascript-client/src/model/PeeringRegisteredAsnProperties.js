/**
 * PeeringManagementClient
 * APIs to manage Peering resources through the Azure Resource Manager.
 *
 * The version of the OpenAPI document: 2020-01-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PeeringRegisteredAsnProperties model module.
 * @module model/PeeringRegisteredAsnProperties
 * @version 2020-01-01-preview
 */
class PeeringRegisteredAsnProperties {
    /**
     * Constructs a new <code>PeeringRegisteredAsnProperties</code>.
     * The properties that define a registered ASN.
     * @alias module:model/PeeringRegisteredAsnProperties
     */
    constructor() { 
        
        PeeringRegisteredAsnProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PeeringRegisteredAsnProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PeeringRegisteredAsnProperties} obj Optional instance to populate.
     * @return {module:model/PeeringRegisteredAsnProperties} The populated <code>PeeringRegisteredAsnProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PeeringRegisteredAsnProperties();

            if (data.hasOwnProperty('asn')) {
                obj['asn'] = ApiClient.convertToType(data['asn'], 'Number');
            }
            if (data.hasOwnProperty('peeringServicePrefixKey')) {
                obj['peeringServicePrefixKey'] = ApiClient.convertToType(data['peeringServicePrefixKey'], 'String');
            }
            if (data.hasOwnProperty('provisioningState')) {
                obj['provisioningState'] = ApiClient.convertToType(data['provisioningState'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PeeringRegisteredAsnProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PeeringRegisteredAsnProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['peeringServicePrefixKey'] && !(typeof data['peeringServicePrefixKey'] === 'string' || data['peeringServicePrefixKey'] instanceof String)) {
            throw new Error("Expected the field `peeringServicePrefixKey` to be a primitive type in the JSON string but got " + data['peeringServicePrefixKey']);
        }
        // ensure the json data is a string
        if (data['provisioningState'] && !(typeof data['provisioningState'] === 'string' || data['provisioningState'] instanceof String)) {
            throw new Error("Expected the field `provisioningState` to be a primitive type in the JSON string but got " + data['provisioningState']);
        }

        return true;
    }


}



/**
 * The customer's ASN from which traffic originates.
 * @member {Number} asn
 */
PeeringRegisteredAsnProperties.prototype['asn'] = undefined;

/**
 * The peering service prefix key that is to be shared with the customer.
 * @member {String} peeringServicePrefixKey
 */
PeeringRegisteredAsnProperties.prototype['peeringServicePrefixKey'] = undefined;

/**
 * The provisioning state of the resource.
 * @member {module:model/PeeringRegisteredAsnProperties.ProvisioningStateEnum} provisioningState
 */
PeeringRegisteredAsnProperties.prototype['provisioningState'] = undefined;





/**
 * Allowed values for the <code>provisioningState</code> property.
 * @enum {String}
 * @readonly
 */
PeeringRegisteredAsnProperties['ProvisioningStateEnum'] = {

    /**
     * value: "Succeeded"
     * @const
     */
    "Succeeded": "Succeeded",

    /**
     * value: "Updating"
     * @const
     */
    "Updating": "Updating",

    /**
     * value: "Deleting"
     * @const
     */
    "Deleting": "Deleting",

    /**
     * value: "Failed"
     * @const
     */
    "Failed": "Failed"
};



export default PeeringRegisteredAsnProperties;

