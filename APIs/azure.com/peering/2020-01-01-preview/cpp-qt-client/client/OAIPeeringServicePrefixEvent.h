/**
 * PeeringManagementClient
 * APIs to manage Peering resources through the Azure Resource Manager.
 *
 * The version of the OpenAPI document: 2020-01-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPeeringServicePrefixEvent.h
 *
 * The details of the event associated with a prefix.
 */

#ifndef OAIPeeringServicePrefixEvent_H
#define OAIPeeringServicePrefixEvent_H

#include <QJsonObject>

#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIPeeringServicePrefixEvent : public OAIObject {
public:
    OAIPeeringServicePrefixEvent();
    OAIPeeringServicePrefixEvent(QString json);
    ~OAIPeeringServicePrefixEvent() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getEventDescription() const;
    void setEventDescription(const QString &event_description);
    bool is_event_description_Set() const;
    bool is_event_description_Valid() const;

    QString getEventLevel() const;
    void setEventLevel(const QString &event_level);
    bool is_event_level_Set() const;
    bool is_event_level_Valid() const;

    QString getEventSummary() const;
    void setEventSummary(const QString &event_summary);
    bool is_event_summary_Set() const;
    bool is_event_summary_Valid() const;

    QDateTime getEventTimestamp() const;
    void setEventTimestamp(const QDateTime &event_timestamp);
    bool is_event_timestamp_Set() const;
    bool is_event_timestamp_Valid() const;

    QString getEventType() const;
    void setEventType(const QString &event_type);
    bool is_event_type_Set() const;
    bool is_event_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_event_description;
    bool m_event_description_isSet;
    bool m_event_description_isValid;

    QString m_event_level;
    bool m_event_level_isSet;
    bool m_event_level_isValid;

    QString m_event_summary;
    bool m_event_summary_isSet;
    bool m_event_summary_isValid;

    QDateTime m_event_timestamp;
    bool m_event_timestamp_isSet;
    bool m_event_timestamp_isValid;

    QString m_event_type;
    bool m_event_type_isSet;
    bool m_event_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPeeringServicePrefixEvent)

#endif // OAIPeeringServicePrefixEvent_H
