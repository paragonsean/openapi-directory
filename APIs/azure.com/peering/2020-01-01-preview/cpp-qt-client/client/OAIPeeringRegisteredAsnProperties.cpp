/**
 * PeeringManagementClient
 * APIs to manage Peering resources through the Azure Resource Manager.
 *
 * The version of the OpenAPI document: 2020-01-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPeeringRegisteredAsnProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPeeringRegisteredAsnProperties::OAIPeeringRegisteredAsnProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPeeringRegisteredAsnProperties::OAIPeeringRegisteredAsnProperties() {
    this->initializeModel();
}

OAIPeeringRegisteredAsnProperties::~OAIPeeringRegisteredAsnProperties() {}

void OAIPeeringRegisteredAsnProperties::initializeModel() {

    m_asn_isSet = false;
    m_asn_isValid = false;

    m_peering_service_prefix_key_isSet = false;
    m_peering_service_prefix_key_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;
}

void OAIPeeringRegisteredAsnProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPeeringRegisteredAsnProperties::fromJsonObject(QJsonObject json) {

    m_asn_isValid = ::OpenAPI::fromJsonValue(m_asn, json[QString("asn")]);
    m_asn_isSet = !json[QString("asn")].isNull() && m_asn_isValid;

    m_peering_service_prefix_key_isValid = ::OpenAPI::fromJsonValue(m_peering_service_prefix_key, json[QString("peeringServicePrefixKey")]);
    m_peering_service_prefix_key_isSet = !json[QString("peeringServicePrefixKey")].isNull() && m_peering_service_prefix_key_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;
}

QString OAIPeeringRegisteredAsnProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPeeringRegisteredAsnProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_asn_isSet) {
        obj.insert(QString("asn"), ::OpenAPI::toJsonValue(m_asn));
    }
    if (m_peering_service_prefix_key_isSet) {
        obj.insert(QString("peeringServicePrefixKey"), ::OpenAPI::toJsonValue(m_peering_service_prefix_key));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    return obj;
}

qint32 OAIPeeringRegisteredAsnProperties::getAsn() const {
    return m_asn;
}
void OAIPeeringRegisteredAsnProperties::setAsn(const qint32 &asn) {
    m_asn = asn;
    m_asn_isSet = true;
}

bool OAIPeeringRegisteredAsnProperties::is_asn_Set() const{
    return m_asn_isSet;
}

bool OAIPeeringRegisteredAsnProperties::is_asn_Valid() const{
    return m_asn_isValid;
}

QString OAIPeeringRegisteredAsnProperties::getPeeringServicePrefixKey() const {
    return m_peering_service_prefix_key;
}
void OAIPeeringRegisteredAsnProperties::setPeeringServicePrefixKey(const QString &peering_service_prefix_key) {
    m_peering_service_prefix_key = peering_service_prefix_key;
    m_peering_service_prefix_key_isSet = true;
}

bool OAIPeeringRegisteredAsnProperties::is_peering_service_prefix_key_Set() const{
    return m_peering_service_prefix_key_isSet;
}

bool OAIPeeringRegisteredAsnProperties::is_peering_service_prefix_key_Valid() const{
    return m_peering_service_prefix_key_isValid;
}

QString OAIPeeringRegisteredAsnProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIPeeringRegisteredAsnProperties::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIPeeringRegisteredAsnProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIPeeringRegisteredAsnProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

bool OAIPeeringRegisteredAsnProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_asn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_peering_service_prefix_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPeeringRegisteredAsnProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
