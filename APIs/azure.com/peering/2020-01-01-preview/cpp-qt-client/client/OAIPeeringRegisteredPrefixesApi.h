/**
 * PeeringManagementClient
 * APIs to manage Peering resources through the Azure Resource Manager.
 *
 * The version of the OpenAPI document: 2020-01-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPeeringRegisteredPrefixesApi_H
#define OAI_OAIPeeringRegisteredPrefixesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIErrorResponse.h"
#include "OAIPeeringRegisteredPrefix.h"
#include "OAIPeeringRegisteredPrefixListResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPeeringRegisteredPrefixesApi : public QObject {
    Q_OBJECT

public:
    OAIPeeringRegisteredPrefixesApi(const int timeOut = 0);
    ~OAIPeeringRegisteredPrefixesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  peering_name QString [required]
    * @param[in]  registered_prefix_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  registered_prefix OAIPeeringRegisteredPrefix [required]
    */
    virtual void registeredPrefixesCreateOrUpdate(const QString &resource_group_name, const QString &peering_name, const QString &registered_prefix_name, const QString &subscription_id, const QString &api_version, const OAIPeeringRegisteredPrefix &registered_prefix);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  peering_name QString [required]
    * @param[in]  registered_prefix_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void registeredPrefixesDelete(const QString &resource_group_name, const QString &peering_name, const QString &registered_prefix_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  peering_name QString [required]
    * @param[in]  registered_prefix_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void registeredPrefixesGet(const QString &resource_group_name, const QString &peering_name, const QString &registered_prefix_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  peering_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void registeredPrefixesListByPeering(const QString &resource_group_name, const QString &peering_name, const QString &subscription_id, const QString &api_version);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void registeredPrefixesCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void registeredPrefixesDeleteCallback(OAIHttpRequestWorker *worker);
    void registeredPrefixesGetCallback(OAIHttpRequestWorker *worker);
    void registeredPrefixesListByPeeringCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void registeredPrefixesCreateOrUpdateSignal(OAIPeeringRegisteredPrefix summary);
    void registeredPrefixesDeleteSignal();
    void registeredPrefixesGetSignal(OAIPeeringRegisteredPrefix summary);
    void registeredPrefixesListByPeeringSignal(OAIPeeringRegisteredPrefixListResult summary);


    void registeredPrefixesCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIPeeringRegisteredPrefix summary);
    void registeredPrefixesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void registeredPrefixesGetSignalFull(OAIHttpRequestWorker *worker, OAIPeeringRegisteredPrefix summary);
    void registeredPrefixesListByPeeringSignalFull(OAIHttpRequestWorker *worker, OAIPeeringRegisteredPrefixListResult summary);

    Q_DECL_DEPRECATED_X("Use registeredPrefixesCreateOrUpdateSignalError() instead")
    void registeredPrefixesCreateOrUpdateSignalE(OAIPeeringRegisteredPrefix summary, QNetworkReply::NetworkError error_type, QString error_str);
    void registeredPrefixesCreateOrUpdateSignalError(OAIPeeringRegisteredPrefix summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registeredPrefixesDeleteSignalError() instead")
    void registeredPrefixesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void registeredPrefixesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registeredPrefixesGetSignalError() instead")
    void registeredPrefixesGetSignalE(OAIPeeringRegisteredPrefix summary, QNetworkReply::NetworkError error_type, QString error_str);
    void registeredPrefixesGetSignalError(OAIPeeringRegisteredPrefix summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registeredPrefixesListByPeeringSignalError() instead")
    void registeredPrefixesListByPeeringSignalE(OAIPeeringRegisteredPrefixListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void registeredPrefixesListByPeeringSignalError(OAIPeeringRegisteredPrefixListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use registeredPrefixesCreateOrUpdateSignalErrorFull() instead")
    void registeredPrefixesCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void registeredPrefixesCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registeredPrefixesDeleteSignalErrorFull() instead")
    void registeredPrefixesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void registeredPrefixesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registeredPrefixesGetSignalErrorFull() instead")
    void registeredPrefixesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void registeredPrefixesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registeredPrefixesListByPeeringSignalErrorFull() instead")
    void registeredPrefixesListByPeeringSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void registeredPrefixesListByPeeringSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
