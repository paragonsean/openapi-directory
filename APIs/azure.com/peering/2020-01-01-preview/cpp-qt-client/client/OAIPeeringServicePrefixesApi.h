/**
 * PeeringManagementClient
 * APIs to manage Peering resources through the Azure Resource Manager.
 *
 * The version of the OpenAPI document: 2020-01-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPeeringServicePrefixesApi_H
#define OAI_OAIPeeringServicePrefixesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIErrorResponse.h"
#include "OAIPeeringServicePrefix.h"
#include "OAIPeeringServicePrefixListResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPeeringServicePrefixesApi : public QObject {
    Q_OBJECT

public:
    OAIPeeringServicePrefixesApi(const int timeOut = 0);
    ~OAIPeeringServicePrefixesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  peering_service_name QString [required]
    * @param[in]  prefix_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  peering_service_prefix OAIPeeringServicePrefix [required]
    */
    virtual void prefixesCreateOrUpdate(const QString &resource_group_name, const QString &peering_service_name, const QString &prefix_name, const QString &subscription_id, const QString &api_version, const OAIPeeringServicePrefix &peering_service_prefix);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  peering_service_name QString [required]
    * @param[in]  prefix_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void prefixesDelete(const QString &resource_group_name, const QString &peering_service_name, const QString &prefix_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  peering_service_name QString [required]
    * @param[in]  prefix_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  expand QString [optional]
    */
    virtual void prefixesGet(const QString &resource_group_name, const QString &peering_service_name, const QString &prefix_name, const QString &subscription_id, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  peering_service_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  expand QString [optional]
    */
    virtual void prefixesListByPeeringService(const QString &resource_group_name, const QString &peering_service_name, const QString &subscription_id, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void prefixesCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void prefixesDeleteCallback(OAIHttpRequestWorker *worker);
    void prefixesGetCallback(OAIHttpRequestWorker *worker);
    void prefixesListByPeeringServiceCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void prefixesCreateOrUpdateSignal(OAIPeeringServicePrefix summary);
    void prefixesDeleteSignal();
    void prefixesGetSignal(OAIPeeringServicePrefix summary);
    void prefixesListByPeeringServiceSignal(OAIPeeringServicePrefixListResult summary);


    void prefixesCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIPeeringServicePrefix summary);
    void prefixesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void prefixesGetSignalFull(OAIHttpRequestWorker *worker, OAIPeeringServicePrefix summary);
    void prefixesListByPeeringServiceSignalFull(OAIHttpRequestWorker *worker, OAIPeeringServicePrefixListResult summary);

    Q_DECL_DEPRECATED_X("Use prefixesCreateOrUpdateSignalError() instead")
    void prefixesCreateOrUpdateSignalE(OAIPeeringServicePrefix summary, QNetworkReply::NetworkError error_type, QString error_str);
    void prefixesCreateOrUpdateSignalError(OAIPeeringServicePrefix summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use prefixesDeleteSignalError() instead")
    void prefixesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void prefixesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use prefixesGetSignalError() instead")
    void prefixesGetSignalE(OAIPeeringServicePrefix summary, QNetworkReply::NetworkError error_type, QString error_str);
    void prefixesGetSignalError(OAIPeeringServicePrefix summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use prefixesListByPeeringServiceSignalError() instead")
    void prefixesListByPeeringServiceSignalE(OAIPeeringServicePrefixListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void prefixesListByPeeringServiceSignalError(OAIPeeringServicePrefixListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use prefixesCreateOrUpdateSignalErrorFull() instead")
    void prefixesCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void prefixesCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use prefixesDeleteSignalErrorFull() instead")
    void prefixesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void prefixesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use prefixesGetSignalErrorFull() instead")
    void prefixesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void prefixesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use prefixesListByPeeringServiceSignalErrorFull() instead")
    void prefixesListByPeeringServiceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void prefixesListByPeeringServiceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
