/**
 * PeeringManagementClient
 * APIs to manage Peering resources through the Azure Resource Manager.
 *
 * The version of the OpenAPI document: 2020-01-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExchangePeeringFacility.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExchangePeeringFacility::OAIExchangePeeringFacility(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExchangePeeringFacility::OAIExchangePeeringFacility() {
    this->initializeModel();
}

OAIExchangePeeringFacility::~OAIExchangePeeringFacility() {}

void OAIExchangePeeringFacility::initializeModel() {

    m_bandwidth_in_mbps_isSet = false;
    m_bandwidth_in_mbps_isValid = false;

    m_exchange_name_isSet = false;
    m_exchange_name_isValid = false;

    m_facility_ipv4_prefix_isSet = false;
    m_facility_ipv4_prefix_isValid = false;

    m_facility_ipv6_prefix_isSet = false;
    m_facility_ipv6_prefix_isValid = false;

    m_microsoft_ipv4_address_isSet = false;
    m_microsoft_ipv4_address_isValid = false;

    m_microsoft_ipv6_address_isSet = false;
    m_microsoft_ipv6_address_isValid = false;

    m_peering_db_facility_id_isSet = false;
    m_peering_db_facility_id_isValid = false;

    m_peering_db_facility_link_isSet = false;
    m_peering_db_facility_link_isValid = false;
}

void OAIExchangePeeringFacility::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExchangePeeringFacility::fromJsonObject(QJsonObject json) {

    m_bandwidth_in_mbps_isValid = ::OpenAPI::fromJsonValue(m_bandwidth_in_mbps, json[QString("bandwidthInMbps")]);
    m_bandwidth_in_mbps_isSet = !json[QString("bandwidthInMbps")].isNull() && m_bandwidth_in_mbps_isValid;

    m_exchange_name_isValid = ::OpenAPI::fromJsonValue(m_exchange_name, json[QString("exchangeName")]);
    m_exchange_name_isSet = !json[QString("exchangeName")].isNull() && m_exchange_name_isValid;

    m_facility_ipv4_prefix_isValid = ::OpenAPI::fromJsonValue(m_facility_ipv4_prefix, json[QString("facilityIPv4Prefix")]);
    m_facility_ipv4_prefix_isSet = !json[QString("facilityIPv4Prefix")].isNull() && m_facility_ipv4_prefix_isValid;

    m_facility_ipv6_prefix_isValid = ::OpenAPI::fromJsonValue(m_facility_ipv6_prefix, json[QString("facilityIPv6Prefix")]);
    m_facility_ipv6_prefix_isSet = !json[QString("facilityIPv6Prefix")].isNull() && m_facility_ipv6_prefix_isValid;

    m_microsoft_ipv4_address_isValid = ::OpenAPI::fromJsonValue(m_microsoft_ipv4_address, json[QString("microsoftIPv4Address")]);
    m_microsoft_ipv4_address_isSet = !json[QString("microsoftIPv4Address")].isNull() && m_microsoft_ipv4_address_isValid;

    m_microsoft_ipv6_address_isValid = ::OpenAPI::fromJsonValue(m_microsoft_ipv6_address, json[QString("microsoftIPv6Address")]);
    m_microsoft_ipv6_address_isSet = !json[QString("microsoftIPv6Address")].isNull() && m_microsoft_ipv6_address_isValid;

    m_peering_db_facility_id_isValid = ::OpenAPI::fromJsonValue(m_peering_db_facility_id, json[QString("peeringDBFacilityId")]);
    m_peering_db_facility_id_isSet = !json[QString("peeringDBFacilityId")].isNull() && m_peering_db_facility_id_isValid;

    m_peering_db_facility_link_isValid = ::OpenAPI::fromJsonValue(m_peering_db_facility_link, json[QString("peeringDBFacilityLink")]);
    m_peering_db_facility_link_isSet = !json[QString("peeringDBFacilityLink")].isNull() && m_peering_db_facility_link_isValid;
}

QString OAIExchangePeeringFacility::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExchangePeeringFacility::asJsonObject() const {
    QJsonObject obj;
    if (m_bandwidth_in_mbps_isSet) {
        obj.insert(QString("bandwidthInMbps"), ::OpenAPI::toJsonValue(m_bandwidth_in_mbps));
    }
    if (m_exchange_name_isSet) {
        obj.insert(QString("exchangeName"), ::OpenAPI::toJsonValue(m_exchange_name));
    }
    if (m_facility_ipv4_prefix_isSet) {
        obj.insert(QString("facilityIPv4Prefix"), ::OpenAPI::toJsonValue(m_facility_ipv4_prefix));
    }
    if (m_facility_ipv6_prefix_isSet) {
        obj.insert(QString("facilityIPv6Prefix"), ::OpenAPI::toJsonValue(m_facility_ipv6_prefix));
    }
    if (m_microsoft_ipv4_address_isSet) {
        obj.insert(QString("microsoftIPv4Address"), ::OpenAPI::toJsonValue(m_microsoft_ipv4_address));
    }
    if (m_microsoft_ipv6_address_isSet) {
        obj.insert(QString("microsoftIPv6Address"), ::OpenAPI::toJsonValue(m_microsoft_ipv6_address));
    }
    if (m_peering_db_facility_id_isSet) {
        obj.insert(QString("peeringDBFacilityId"), ::OpenAPI::toJsonValue(m_peering_db_facility_id));
    }
    if (m_peering_db_facility_link_isSet) {
        obj.insert(QString("peeringDBFacilityLink"), ::OpenAPI::toJsonValue(m_peering_db_facility_link));
    }
    return obj;
}

qint32 OAIExchangePeeringFacility::getBandwidthInMbps() const {
    return m_bandwidth_in_mbps;
}
void OAIExchangePeeringFacility::setBandwidthInMbps(const qint32 &bandwidth_in_mbps) {
    m_bandwidth_in_mbps = bandwidth_in_mbps;
    m_bandwidth_in_mbps_isSet = true;
}

bool OAIExchangePeeringFacility::is_bandwidth_in_mbps_Set() const{
    return m_bandwidth_in_mbps_isSet;
}

bool OAIExchangePeeringFacility::is_bandwidth_in_mbps_Valid() const{
    return m_bandwidth_in_mbps_isValid;
}

QString OAIExchangePeeringFacility::getExchangeName() const {
    return m_exchange_name;
}
void OAIExchangePeeringFacility::setExchangeName(const QString &exchange_name) {
    m_exchange_name = exchange_name;
    m_exchange_name_isSet = true;
}

bool OAIExchangePeeringFacility::is_exchange_name_Set() const{
    return m_exchange_name_isSet;
}

bool OAIExchangePeeringFacility::is_exchange_name_Valid() const{
    return m_exchange_name_isValid;
}

QString OAIExchangePeeringFacility::getFacilityIpv4Prefix() const {
    return m_facility_ipv4_prefix;
}
void OAIExchangePeeringFacility::setFacilityIpv4Prefix(const QString &facility_ipv4_prefix) {
    m_facility_ipv4_prefix = facility_ipv4_prefix;
    m_facility_ipv4_prefix_isSet = true;
}

bool OAIExchangePeeringFacility::is_facility_ipv4_prefix_Set() const{
    return m_facility_ipv4_prefix_isSet;
}

bool OAIExchangePeeringFacility::is_facility_ipv4_prefix_Valid() const{
    return m_facility_ipv4_prefix_isValid;
}

QString OAIExchangePeeringFacility::getFacilityIpv6Prefix() const {
    return m_facility_ipv6_prefix;
}
void OAIExchangePeeringFacility::setFacilityIpv6Prefix(const QString &facility_ipv6_prefix) {
    m_facility_ipv6_prefix = facility_ipv6_prefix;
    m_facility_ipv6_prefix_isSet = true;
}

bool OAIExchangePeeringFacility::is_facility_ipv6_prefix_Set() const{
    return m_facility_ipv6_prefix_isSet;
}

bool OAIExchangePeeringFacility::is_facility_ipv6_prefix_Valid() const{
    return m_facility_ipv6_prefix_isValid;
}

QString OAIExchangePeeringFacility::getMicrosoftIpv4Address() const {
    return m_microsoft_ipv4_address;
}
void OAIExchangePeeringFacility::setMicrosoftIpv4Address(const QString &microsoft_ipv4_address) {
    m_microsoft_ipv4_address = microsoft_ipv4_address;
    m_microsoft_ipv4_address_isSet = true;
}

bool OAIExchangePeeringFacility::is_microsoft_ipv4_address_Set() const{
    return m_microsoft_ipv4_address_isSet;
}

bool OAIExchangePeeringFacility::is_microsoft_ipv4_address_Valid() const{
    return m_microsoft_ipv4_address_isValid;
}

QString OAIExchangePeeringFacility::getMicrosoftIpv6Address() const {
    return m_microsoft_ipv6_address;
}
void OAIExchangePeeringFacility::setMicrosoftIpv6Address(const QString &microsoft_ipv6_address) {
    m_microsoft_ipv6_address = microsoft_ipv6_address;
    m_microsoft_ipv6_address_isSet = true;
}

bool OAIExchangePeeringFacility::is_microsoft_ipv6_address_Set() const{
    return m_microsoft_ipv6_address_isSet;
}

bool OAIExchangePeeringFacility::is_microsoft_ipv6_address_Valid() const{
    return m_microsoft_ipv6_address_isValid;
}

qint32 OAIExchangePeeringFacility::getPeeringDbFacilityId() const {
    return m_peering_db_facility_id;
}
void OAIExchangePeeringFacility::setPeeringDbFacilityId(const qint32 &peering_db_facility_id) {
    m_peering_db_facility_id = peering_db_facility_id;
    m_peering_db_facility_id_isSet = true;
}

bool OAIExchangePeeringFacility::is_peering_db_facility_id_Set() const{
    return m_peering_db_facility_id_isSet;
}

bool OAIExchangePeeringFacility::is_peering_db_facility_id_Valid() const{
    return m_peering_db_facility_id_isValid;
}

QString OAIExchangePeeringFacility::getPeeringDbFacilityLink() const {
    return m_peering_db_facility_link;
}
void OAIExchangePeeringFacility::setPeeringDbFacilityLink(const QString &peering_db_facility_link) {
    m_peering_db_facility_link = peering_db_facility_link;
    m_peering_db_facility_link_isSet = true;
}

bool OAIExchangePeeringFacility::is_peering_db_facility_link_Set() const{
    return m_peering_db_facility_link_isSet;
}

bool OAIExchangePeeringFacility::is_peering_db_facility_link_Valid() const{
    return m_peering_db_facility_link_isValid;
}

bool OAIExchangePeeringFacility::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bandwidth_in_mbps_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exchange_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_facility_ipv4_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_facility_ipv6_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_microsoft_ipv4_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_microsoft_ipv6_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_peering_db_facility_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_peering_db_facility_link_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExchangePeeringFacility::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
