/**
 * PeeringManagementClient
 * APIs to manage Peering resources through the Azure Resource Manager.
 *
 * The version of the OpenAPI document: 2020-01-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPeeringServicesApi_H
#define OAI_OAIPeeringServicesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIErrorResponse.h"
#include "OAIPeeringService.h"
#include "OAIPeeringServiceListResult.h"
#include "OAIResourceTags.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPeeringServicesApi : public QObject {
    Q_OBJECT

public:
    OAIPeeringServicesApi(const int timeOut = 0);
    ~OAIPeeringServicesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  peering_service_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  peering_service OAIPeeringService [required]
    */
    virtual void peeringServicesCreateOrUpdate(const QString &resource_group_name, const QString &peering_service_name, const QString &subscription_id, const QString &api_version, const OAIPeeringService &peering_service);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  peering_service_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void peeringServicesDelete(const QString &resource_group_name, const QString &peering_service_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  peering_service_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void peeringServicesGet(const QString &resource_group_name, const QString &peering_service_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void peeringServicesListByResourceGroup(const QString &resource_group_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void peeringServicesListBySubscription(const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  peering_service_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  tags OAIResourceTags [required]
    */
    virtual void peeringServicesUpdate(const QString &resource_group_name, const QString &peering_service_name, const QString &subscription_id, const QString &api_version, const OAIResourceTags &tags);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void peeringServicesCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void peeringServicesDeleteCallback(OAIHttpRequestWorker *worker);
    void peeringServicesGetCallback(OAIHttpRequestWorker *worker);
    void peeringServicesListByResourceGroupCallback(OAIHttpRequestWorker *worker);
    void peeringServicesListBySubscriptionCallback(OAIHttpRequestWorker *worker);
    void peeringServicesUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void peeringServicesCreateOrUpdateSignal(OAIPeeringService summary);
    void peeringServicesDeleteSignal();
    void peeringServicesGetSignal(OAIPeeringService summary);
    void peeringServicesListByResourceGroupSignal(OAIPeeringServiceListResult summary);
    void peeringServicesListBySubscriptionSignal(OAIPeeringServiceListResult summary);
    void peeringServicesUpdateSignal(OAIPeeringService summary);


    void peeringServicesCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIPeeringService summary);
    void peeringServicesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void peeringServicesGetSignalFull(OAIHttpRequestWorker *worker, OAIPeeringService summary);
    void peeringServicesListByResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAIPeeringServiceListResult summary);
    void peeringServicesListBySubscriptionSignalFull(OAIHttpRequestWorker *worker, OAIPeeringServiceListResult summary);
    void peeringServicesUpdateSignalFull(OAIHttpRequestWorker *worker, OAIPeeringService summary);

    Q_DECL_DEPRECATED_X("Use peeringServicesCreateOrUpdateSignalError() instead")
    void peeringServicesCreateOrUpdateSignalE(OAIPeeringService summary, QNetworkReply::NetworkError error_type, QString error_str);
    void peeringServicesCreateOrUpdateSignalError(OAIPeeringService summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use peeringServicesDeleteSignalError() instead")
    void peeringServicesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void peeringServicesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use peeringServicesGetSignalError() instead")
    void peeringServicesGetSignalE(OAIPeeringService summary, QNetworkReply::NetworkError error_type, QString error_str);
    void peeringServicesGetSignalError(OAIPeeringService summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use peeringServicesListByResourceGroupSignalError() instead")
    void peeringServicesListByResourceGroupSignalE(OAIPeeringServiceListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void peeringServicesListByResourceGroupSignalError(OAIPeeringServiceListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use peeringServicesListBySubscriptionSignalError() instead")
    void peeringServicesListBySubscriptionSignalE(OAIPeeringServiceListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void peeringServicesListBySubscriptionSignalError(OAIPeeringServiceListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use peeringServicesUpdateSignalError() instead")
    void peeringServicesUpdateSignalE(OAIPeeringService summary, QNetworkReply::NetworkError error_type, QString error_str);
    void peeringServicesUpdateSignalError(OAIPeeringService summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use peeringServicesCreateOrUpdateSignalErrorFull() instead")
    void peeringServicesCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void peeringServicesCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use peeringServicesDeleteSignalErrorFull() instead")
    void peeringServicesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void peeringServicesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use peeringServicesGetSignalErrorFull() instead")
    void peeringServicesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void peeringServicesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use peeringServicesListByResourceGroupSignalErrorFull() instead")
    void peeringServicesListByResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void peeringServicesListByResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use peeringServicesListBySubscriptionSignalErrorFull() instead")
    void peeringServicesListBySubscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void peeringServicesListBySubscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use peeringServicesUpdateSignalErrorFull() instead")
    void peeringServicesUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void peeringServicesUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
