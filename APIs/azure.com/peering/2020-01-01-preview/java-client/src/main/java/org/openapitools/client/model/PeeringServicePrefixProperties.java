/*
 * PeeringManagementClient
 * APIs to manage Peering resources through the Azure Resource Manager.
 *
 * The version of the OpenAPI document: 2020-01-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.PeeringServicePrefixEvent;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The peering service prefix properties class.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:11:04.969930-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PeeringServicePrefixProperties {
  public static final String SERIALIZED_NAME_ERROR_MESSAGE = "errorMessage";
  @SerializedName(SERIALIZED_NAME_ERROR_MESSAGE)
  private String errorMessage;

  public static final String SERIALIZED_NAME_EVENTS = "events";
  @SerializedName(SERIALIZED_NAME_EVENTS)
  private List<PeeringServicePrefixEvent> events = new ArrayList<>();

  /**
   * The prefix learned type
   */
  @JsonAdapter(LearnedTypeEnum.Adapter.class)
  public enum LearnedTypeEnum {
    NONE("None"),
    
    VIA_SERVICE_PROVIDER("ViaServiceProvider"),
    
    VIA_SESSION("ViaSession");

    private String value;

    LearnedTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LearnedTypeEnum fromValue(String value) {
      for (LearnedTypeEnum b : LearnedTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LearnedTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LearnedTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LearnedTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LearnedTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LearnedTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LEARNED_TYPE = "learnedType";
  @SerializedName(SERIALIZED_NAME_LEARNED_TYPE)
  private LearnedTypeEnum learnedType;

  public static final String SERIALIZED_NAME_PEERING_SERVICE_PREFIX_KEY = "peeringServicePrefixKey";
  @SerializedName(SERIALIZED_NAME_PEERING_SERVICE_PREFIX_KEY)
  private String peeringServicePrefixKey;

  public static final String SERIALIZED_NAME_PREFIX = "prefix";
  @SerializedName(SERIALIZED_NAME_PREFIX)
  private String prefix;

  /**
   * The prefix validation state
   */
  @JsonAdapter(PrefixValidationStateEnum.Adapter.class)
  public enum PrefixValidationStateEnum {
    NONE("None"),
    
    INVALID("Invalid"),
    
    VERIFIED("Verified"),
    
    FAILED("Failed"),
    
    PENDING("Pending"),
    
    WARNING("Warning"),
    
    UNKNOWN("Unknown");

    private String value;

    PrefixValidationStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PrefixValidationStateEnum fromValue(String value) {
      for (PrefixValidationStateEnum b : PrefixValidationStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PrefixValidationStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PrefixValidationStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PrefixValidationStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PrefixValidationStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PrefixValidationStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PREFIX_VALIDATION_STATE = "prefixValidationState";
  @SerializedName(SERIALIZED_NAME_PREFIX_VALIDATION_STATE)
  private PrefixValidationStateEnum prefixValidationState;

  /**
   * The provisioning state of the resource.
   */
  @JsonAdapter(ProvisioningStateEnum.Adapter.class)
  public enum ProvisioningStateEnum {
    SUCCEEDED("Succeeded"),
    
    UPDATING("Updating"),
    
    DELETING("Deleting"),
    
    FAILED("Failed");

    private String value;

    ProvisioningStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProvisioningStateEnum fromValue(String value) {
      for (ProvisioningStateEnum b : ProvisioningStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProvisioningStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProvisioningStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProvisioningStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProvisioningStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProvisioningStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private ProvisioningStateEnum provisioningState;

  public PeeringServicePrefixProperties() {
  }

  public PeeringServicePrefixProperties(
     String errorMessage, 
     List<PeeringServicePrefixEvent> events, 
     LearnedTypeEnum learnedType, 
     PrefixValidationStateEnum prefixValidationState, 
     ProvisioningStateEnum provisioningState
  ) {
    this();
    this.errorMessage = errorMessage;
    this.events = events;
    this.learnedType = learnedType;
    this.prefixValidationState = prefixValidationState;
    this.provisioningState = provisioningState;
  }

  /**
   * The error message for validation state
   * @return errorMessage
   */
  @javax.annotation.Nullable
  public String getErrorMessage() {
    return errorMessage;
  }



  /**
   * The list of events for peering service prefix
   * @return events
   */
  @javax.annotation.Nullable
  public List<PeeringServicePrefixEvent> getEvents() {
    return events;
  }



  /**
   * The prefix learned type
   * @return learnedType
   */
  @javax.annotation.Nullable
  public LearnedTypeEnum getLearnedType() {
    return learnedType;
  }



  public PeeringServicePrefixProperties peeringServicePrefixKey(String peeringServicePrefixKey) {
    this.peeringServicePrefixKey = peeringServicePrefixKey;
    return this;
  }

  /**
   * The peering service prefix key
   * @return peeringServicePrefixKey
   */
  @javax.annotation.Nullable
  public String getPeeringServicePrefixKey() {
    return peeringServicePrefixKey;
  }

  public void setPeeringServicePrefixKey(String peeringServicePrefixKey) {
    this.peeringServicePrefixKey = peeringServicePrefixKey;
  }


  public PeeringServicePrefixProperties prefix(String prefix) {
    this.prefix = prefix;
    return this;
  }

  /**
   * The prefix from which your traffic originates.
   * @return prefix
   */
  @javax.annotation.Nullable
  public String getPrefix() {
    return prefix;
  }

  public void setPrefix(String prefix) {
    this.prefix = prefix;
  }


  /**
   * The prefix validation state
   * @return prefixValidationState
   */
  @javax.annotation.Nullable
  public PrefixValidationStateEnum getPrefixValidationState() {
    return prefixValidationState;
  }



  /**
   * The provisioning state of the resource.
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public ProvisioningStateEnum getProvisioningState() {
    return provisioningState;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PeeringServicePrefixProperties peeringServicePrefixProperties = (PeeringServicePrefixProperties) o;
    return Objects.equals(this.errorMessage, peeringServicePrefixProperties.errorMessage) &&
        Objects.equals(this.events, peeringServicePrefixProperties.events) &&
        Objects.equals(this.learnedType, peeringServicePrefixProperties.learnedType) &&
        Objects.equals(this.peeringServicePrefixKey, peeringServicePrefixProperties.peeringServicePrefixKey) &&
        Objects.equals(this.prefix, peeringServicePrefixProperties.prefix) &&
        Objects.equals(this.prefixValidationState, peeringServicePrefixProperties.prefixValidationState) &&
        Objects.equals(this.provisioningState, peeringServicePrefixProperties.provisioningState);
  }

  @Override
  public int hashCode() {
    return Objects.hash(errorMessage, events, learnedType, peeringServicePrefixKey, prefix, prefixValidationState, provisioningState);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PeeringServicePrefixProperties {\n");
    sb.append("    errorMessage: ").append(toIndentedString(errorMessage)).append("\n");
    sb.append("    events: ").append(toIndentedString(events)).append("\n");
    sb.append("    learnedType: ").append(toIndentedString(learnedType)).append("\n");
    sb.append("    peeringServicePrefixKey: ").append(toIndentedString(peeringServicePrefixKey)).append("\n");
    sb.append("    prefix: ").append(toIndentedString(prefix)).append("\n");
    sb.append("    prefixValidationState: ").append(toIndentedString(prefixValidationState)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("errorMessage");
    openapiFields.add("events");
    openapiFields.add("learnedType");
    openapiFields.add("peeringServicePrefixKey");
    openapiFields.add("prefix");
    openapiFields.add("prefixValidationState");
    openapiFields.add("provisioningState");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PeeringServicePrefixProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PeeringServicePrefixProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PeeringServicePrefixProperties is not found in the empty JSON string", PeeringServicePrefixProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PeeringServicePrefixProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PeeringServicePrefixProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("errorMessage") != null && !jsonObj.get("errorMessage").isJsonNull()) && !jsonObj.get("errorMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `errorMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("errorMessage").toString()));
      }
      if (jsonObj.get("events") != null && !jsonObj.get("events").isJsonNull()) {
        JsonArray jsonArrayevents = jsonObj.getAsJsonArray("events");
        if (jsonArrayevents != null) {
          // ensure the json data is an array
          if (!jsonObj.get("events").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `events` to be an array in the JSON string but got `%s`", jsonObj.get("events").toString()));
          }

          // validate the optional field `events` (array)
          for (int i = 0; i < jsonArrayevents.size(); i++) {
            PeeringServicePrefixEvent.validateJsonElement(jsonArrayevents.get(i));
          };
        }
      }
      if ((jsonObj.get("learnedType") != null && !jsonObj.get("learnedType").isJsonNull()) && !jsonObj.get("learnedType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `learnedType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("learnedType").toString()));
      }
      // validate the optional field `learnedType`
      if (jsonObj.get("learnedType") != null && !jsonObj.get("learnedType").isJsonNull()) {
        LearnedTypeEnum.validateJsonElement(jsonObj.get("learnedType"));
      }
      if ((jsonObj.get("peeringServicePrefixKey") != null && !jsonObj.get("peeringServicePrefixKey").isJsonNull()) && !jsonObj.get("peeringServicePrefixKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `peeringServicePrefixKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("peeringServicePrefixKey").toString()));
      }
      if ((jsonObj.get("prefix") != null && !jsonObj.get("prefix").isJsonNull()) && !jsonObj.get("prefix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `prefix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("prefix").toString()));
      }
      if ((jsonObj.get("prefixValidationState") != null && !jsonObj.get("prefixValidationState").isJsonNull()) && !jsonObj.get("prefixValidationState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `prefixValidationState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("prefixValidationState").toString()));
      }
      // validate the optional field `prefixValidationState`
      if (jsonObj.get("prefixValidationState") != null && !jsonObj.get("prefixValidationState").isJsonNull()) {
        PrefixValidationStateEnum.validateJsonElement(jsonObj.get("prefixValidationState"));
      }
      if ((jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) && !jsonObj.get("provisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningState").toString()));
      }
      // validate the optional field `provisioningState`
      if (jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) {
        ProvisioningStateEnum.validateJsonElement(jsonObj.get("provisioningState"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PeeringServicePrefixProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PeeringServicePrefixProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PeeringServicePrefixProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PeeringServicePrefixProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<PeeringServicePrefixProperties>() {
           @Override
           public void write(JsonWriter out, PeeringServicePrefixProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PeeringServicePrefixProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PeeringServicePrefixProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PeeringServicePrefixProperties
   * @throws IOException if the JSON string is invalid with respect to PeeringServicePrefixProperties
   */
  public static PeeringServicePrefixProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PeeringServicePrefixProperties.class);
  }

  /**
   * Convert an instance of PeeringServicePrefixProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

