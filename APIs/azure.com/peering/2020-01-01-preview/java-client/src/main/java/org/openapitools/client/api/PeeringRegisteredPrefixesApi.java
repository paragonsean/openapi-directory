/*
 * PeeringManagementClient
 * APIs to manage Peering resources through the Azure Resource Manager.
 *
 * The version of the OpenAPI document: 2020-01-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.PeeringRegisteredPrefix;
import org.openapitools.client.model.PeeringRegisteredPrefixListResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PeeringRegisteredPrefixesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PeeringRegisteredPrefixesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PeeringRegisteredPrefixesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for registeredPrefixesCreateOrUpdate
     * @param resourceGroupName The name of the resource group. (required)
     * @param peeringName The name of the peering. (required)
     * @param registeredPrefixName The name of the registered prefix. (required)
     * @param subscriptionId The Azure subscription ID. (required)
     * @param apiVersion The client API version. (required)
     * @param registeredPrefix The properties needed to create a registered prefix. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation has failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registeredPrefixesCreateOrUpdateCall(String resourceGroupName, String peeringName, String registeredPrefixName, String subscriptionId, String apiVersion, PeeringRegisteredPrefix registeredPrefix, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = registeredPrefix;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Peering/peerings/{peeringName}/registeredPrefixes/{registeredPrefixName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "peeringName" + "}", localVarApiClient.escapeString(peeringName.toString()))
            .replace("{" + "registeredPrefixName" + "}", localVarApiClient.escapeString(registeredPrefixName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call registeredPrefixesCreateOrUpdateValidateBeforeCall(String resourceGroupName, String peeringName, String registeredPrefixName, String subscriptionId, String apiVersion, PeeringRegisteredPrefix registeredPrefix, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling registeredPrefixesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'peeringName' is set
        if (peeringName == null) {
            throw new ApiException("Missing the required parameter 'peeringName' when calling registeredPrefixesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'registeredPrefixName' is set
        if (registeredPrefixName == null) {
            throw new ApiException("Missing the required parameter 'registeredPrefixName' when calling registeredPrefixesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling registeredPrefixesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling registeredPrefixesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'registeredPrefix' is set
        if (registeredPrefix == null) {
            throw new ApiException("Missing the required parameter 'registeredPrefix' when calling registeredPrefixesCreateOrUpdate(Async)");
        }

        return registeredPrefixesCreateOrUpdateCall(resourceGroupName, peeringName, registeredPrefixName, subscriptionId, apiVersion, registeredPrefix, _callback);

    }

    /**
     * 
     * Creates a new registered prefix with the specified name under the given subscription, resource group and peering.
     * @param resourceGroupName The name of the resource group. (required)
     * @param peeringName The name of the peering. (required)
     * @param registeredPrefixName The name of the registered prefix. (required)
     * @param subscriptionId The Azure subscription ID. (required)
     * @param apiVersion The client API version. (required)
     * @param registeredPrefix The properties needed to create a registered prefix. (required)
     * @return PeeringRegisteredPrefix
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation has failed. </td><td>  -  </td></tr>
     </table>
     */
    public PeeringRegisteredPrefix registeredPrefixesCreateOrUpdate(String resourceGroupName, String peeringName, String registeredPrefixName, String subscriptionId, String apiVersion, PeeringRegisteredPrefix registeredPrefix) throws ApiException {
        ApiResponse<PeeringRegisteredPrefix> localVarResp = registeredPrefixesCreateOrUpdateWithHttpInfo(resourceGroupName, peeringName, registeredPrefixName, subscriptionId, apiVersion, registeredPrefix);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a new registered prefix with the specified name under the given subscription, resource group and peering.
     * @param resourceGroupName The name of the resource group. (required)
     * @param peeringName The name of the peering. (required)
     * @param registeredPrefixName The name of the registered prefix. (required)
     * @param subscriptionId The Azure subscription ID. (required)
     * @param apiVersion The client API version. (required)
     * @param registeredPrefix The properties needed to create a registered prefix. (required)
     * @return ApiResponse&lt;PeeringRegisteredPrefix&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation has failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PeeringRegisteredPrefix> registeredPrefixesCreateOrUpdateWithHttpInfo(String resourceGroupName, String peeringName, String registeredPrefixName, String subscriptionId, String apiVersion, PeeringRegisteredPrefix registeredPrefix) throws ApiException {
        okhttp3.Call localVarCall = registeredPrefixesCreateOrUpdateValidateBeforeCall(resourceGroupName, peeringName, registeredPrefixName, subscriptionId, apiVersion, registeredPrefix, null);
        Type localVarReturnType = new TypeToken<PeeringRegisteredPrefix>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a new registered prefix with the specified name under the given subscription, resource group and peering.
     * @param resourceGroupName The name of the resource group. (required)
     * @param peeringName The name of the peering. (required)
     * @param registeredPrefixName The name of the registered prefix. (required)
     * @param subscriptionId The Azure subscription ID. (required)
     * @param apiVersion The client API version. (required)
     * @param registeredPrefix The properties needed to create a registered prefix. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation has failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registeredPrefixesCreateOrUpdateAsync(String resourceGroupName, String peeringName, String registeredPrefixName, String subscriptionId, String apiVersion, PeeringRegisteredPrefix registeredPrefix, final ApiCallback<PeeringRegisteredPrefix> _callback) throws ApiException {

        okhttp3.Call localVarCall = registeredPrefixesCreateOrUpdateValidateBeforeCall(resourceGroupName, peeringName, registeredPrefixName, subscriptionId, apiVersion, registeredPrefix, _callback);
        Type localVarReturnType = new TypeToken<PeeringRegisteredPrefix>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for registeredPrefixesDelete
     * @param resourceGroupName The name of the resource group. (required)
     * @param peeringName The name of the peering. (required)
     * @param registeredPrefixName The name of the registered prefix. (required)
     * @param subscriptionId The Azure subscription ID. (required)
     * @param apiVersion The client API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> NoContent </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation has failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registeredPrefixesDeleteCall(String resourceGroupName, String peeringName, String registeredPrefixName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Peering/peerings/{peeringName}/registeredPrefixes/{registeredPrefixName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "peeringName" + "}", localVarApiClient.escapeString(peeringName.toString()))
            .replace("{" + "registeredPrefixName" + "}", localVarApiClient.escapeString(registeredPrefixName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call registeredPrefixesDeleteValidateBeforeCall(String resourceGroupName, String peeringName, String registeredPrefixName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling registeredPrefixesDelete(Async)");
        }

        // verify the required parameter 'peeringName' is set
        if (peeringName == null) {
            throw new ApiException("Missing the required parameter 'peeringName' when calling registeredPrefixesDelete(Async)");
        }

        // verify the required parameter 'registeredPrefixName' is set
        if (registeredPrefixName == null) {
            throw new ApiException("Missing the required parameter 'registeredPrefixName' when calling registeredPrefixesDelete(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling registeredPrefixesDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling registeredPrefixesDelete(Async)");
        }

        return registeredPrefixesDeleteCall(resourceGroupName, peeringName, registeredPrefixName, subscriptionId, apiVersion, _callback);

    }

    /**
     * 
     * Deletes an existing registered prefix with the specified name under the given subscription, resource group and peering.
     * @param resourceGroupName The name of the resource group. (required)
     * @param peeringName The name of the peering. (required)
     * @param registeredPrefixName The name of the registered prefix. (required)
     * @param subscriptionId The Azure subscription ID. (required)
     * @param apiVersion The client API version. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> NoContent </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation has failed. </td><td>  -  </td></tr>
     </table>
     */
    public void registeredPrefixesDelete(String resourceGroupName, String peeringName, String registeredPrefixName, String subscriptionId, String apiVersion) throws ApiException {
        registeredPrefixesDeleteWithHttpInfo(resourceGroupName, peeringName, registeredPrefixName, subscriptionId, apiVersion);
    }

    /**
     * 
     * Deletes an existing registered prefix with the specified name under the given subscription, resource group and peering.
     * @param resourceGroupName The name of the resource group. (required)
     * @param peeringName The name of the peering. (required)
     * @param registeredPrefixName The name of the registered prefix. (required)
     * @param subscriptionId The Azure subscription ID. (required)
     * @param apiVersion The client API version. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> NoContent </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation has failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> registeredPrefixesDeleteWithHttpInfo(String resourceGroupName, String peeringName, String registeredPrefixName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = registeredPrefixesDeleteValidateBeforeCall(resourceGroupName, peeringName, registeredPrefixName, subscriptionId, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes an existing registered prefix with the specified name under the given subscription, resource group and peering.
     * @param resourceGroupName The name of the resource group. (required)
     * @param peeringName The name of the peering. (required)
     * @param registeredPrefixName The name of the registered prefix. (required)
     * @param subscriptionId The Azure subscription ID. (required)
     * @param apiVersion The client API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> NoContent </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation has failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registeredPrefixesDeleteAsync(String resourceGroupName, String peeringName, String registeredPrefixName, String subscriptionId, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = registeredPrefixesDeleteValidateBeforeCall(resourceGroupName, peeringName, registeredPrefixName, subscriptionId, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for registeredPrefixesGet
     * @param resourceGroupName The name of the resource group. (required)
     * @param peeringName The name of the peering. (required)
     * @param registeredPrefixName The name of the registered prefix. (required)
     * @param subscriptionId The Azure subscription ID. (required)
     * @param apiVersion The client API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation has failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registeredPrefixesGetCall(String resourceGroupName, String peeringName, String registeredPrefixName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Peering/peerings/{peeringName}/registeredPrefixes/{registeredPrefixName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "peeringName" + "}", localVarApiClient.escapeString(peeringName.toString()))
            .replace("{" + "registeredPrefixName" + "}", localVarApiClient.escapeString(registeredPrefixName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call registeredPrefixesGetValidateBeforeCall(String resourceGroupName, String peeringName, String registeredPrefixName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling registeredPrefixesGet(Async)");
        }

        // verify the required parameter 'peeringName' is set
        if (peeringName == null) {
            throw new ApiException("Missing the required parameter 'peeringName' when calling registeredPrefixesGet(Async)");
        }

        // verify the required parameter 'registeredPrefixName' is set
        if (registeredPrefixName == null) {
            throw new ApiException("Missing the required parameter 'registeredPrefixName' when calling registeredPrefixesGet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling registeredPrefixesGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling registeredPrefixesGet(Async)");
        }

        return registeredPrefixesGetCall(resourceGroupName, peeringName, registeredPrefixName, subscriptionId, apiVersion, _callback);

    }

    /**
     * 
     * Gets an existing registered prefix with the specified name under the given subscription, resource group and peering.
     * @param resourceGroupName The name of the resource group. (required)
     * @param peeringName The name of the peering. (required)
     * @param registeredPrefixName The name of the registered prefix. (required)
     * @param subscriptionId The Azure subscription ID. (required)
     * @param apiVersion The client API version. (required)
     * @return PeeringRegisteredPrefix
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation has failed. </td><td>  -  </td></tr>
     </table>
     */
    public PeeringRegisteredPrefix registeredPrefixesGet(String resourceGroupName, String peeringName, String registeredPrefixName, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<PeeringRegisteredPrefix> localVarResp = registeredPrefixesGetWithHttpInfo(resourceGroupName, peeringName, registeredPrefixName, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets an existing registered prefix with the specified name under the given subscription, resource group and peering.
     * @param resourceGroupName The name of the resource group. (required)
     * @param peeringName The name of the peering. (required)
     * @param registeredPrefixName The name of the registered prefix. (required)
     * @param subscriptionId The Azure subscription ID. (required)
     * @param apiVersion The client API version. (required)
     * @return ApiResponse&lt;PeeringRegisteredPrefix&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation has failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PeeringRegisteredPrefix> registeredPrefixesGetWithHttpInfo(String resourceGroupName, String peeringName, String registeredPrefixName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = registeredPrefixesGetValidateBeforeCall(resourceGroupName, peeringName, registeredPrefixName, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<PeeringRegisteredPrefix>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets an existing registered prefix with the specified name under the given subscription, resource group and peering.
     * @param resourceGroupName The name of the resource group. (required)
     * @param peeringName The name of the peering. (required)
     * @param registeredPrefixName The name of the registered prefix. (required)
     * @param subscriptionId The Azure subscription ID. (required)
     * @param apiVersion The client API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation has failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registeredPrefixesGetAsync(String resourceGroupName, String peeringName, String registeredPrefixName, String subscriptionId, String apiVersion, final ApiCallback<PeeringRegisteredPrefix> _callback) throws ApiException {

        okhttp3.Call localVarCall = registeredPrefixesGetValidateBeforeCall(resourceGroupName, peeringName, registeredPrefixName, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<PeeringRegisteredPrefix>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for registeredPrefixesListByPeering
     * @param resourceGroupName The name of the resource group. (required)
     * @param peeringName The name of the peering. (required)
     * @param subscriptionId The Azure subscription ID. (required)
     * @param apiVersion The client API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation has failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registeredPrefixesListByPeeringCall(String resourceGroupName, String peeringName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Peering/peerings/{peeringName}/registeredPrefixes"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "peeringName" + "}", localVarApiClient.escapeString(peeringName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call registeredPrefixesListByPeeringValidateBeforeCall(String resourceGroupName, String peeringName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling registeredPrefixesListByPeering(Async)");
        }

        // verify the required parameter 'peeringName' is set
        if (peeringName == null) {
            throw new ApiException("Missing the required parameter 'peeringName' when calling registeredPrefixesListByPeering(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling registeredPrefixesListByPeering(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling registeredPrefixesListByPeering(Async)");
        }

        return registeredPrefixesListByPeeringCall(resourceGroupName, peeringName, subscriptionId, apiVersion, _callback);

    }

    /**
     * 
     * Lists all registered prefixes under the given subscription, resource group and peering.
     * @param resourceGroupName The name of the resource group. (required)
     * @param peeringName The name of the peering. (required)
     * @param subscriptionId The Azure subscription ID. (required)
     * @param apiVersion The client API version. (required)
     * @return PeeringRegisteredPrefixListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation has failed. </td><td>  -  </td></tr>
     </table>
     */
    public PeeringRegisteredPrefixListResult registeredPrefixesListByPeering(String resourceGroupName, String peeringName, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<PeeringRegisteredPrefixListResult> localVarResp = registeredPrefixesListByPeeringWithHttpInfo(resourceGroupName, peeringName, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists all registered prefixes under the given subscription, resource group and peering.
     * @param resourceGroupName The name of the resource group. (required)
     * @param peeringName The name of the peering. (required)
     * @param subscriptionId The Azure subscription ID. (required)
     * @param apiVersion The client API version. (required)
     * @return ApiResponse&lt;PeeringRegisteredPrefixListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation has failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PeeringRegisteredPrefixListResult> registeredPrefixesListByPeeringWithHttpInfo(String resourceGroupName, String peeringName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = registeredPrefixesListByPeeringValidateBeforeCall(resourceGroupName, peeringName, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<PeeringRegisteredPrefixListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists all registered prefixes under the given subscription, resource group and peering.
     * @param resourceGroupName The name of the resource group. (required)
     * @param peeringName The name of the peering. (required)
     * @param subscriptionId The Azure subscription ID. (required)
     * @param apiVersion The client API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation has failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registeredPrefixesListByPeeringAsync(String resourceGroupName, String peeringName, String subscriptionId, String apiVersion, final ApiCallback<PeeringRegisteredPrefixListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = registeredPrefixesListByPeeringValidateBeforeCall(resourceGroupName, peeringName, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<PeeringRegisteredPrefixListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
