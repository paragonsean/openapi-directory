/*
 * PeeringManagementClient
 * APIs to manage Peering resources through the Azure Resource Manager.
 *
 * The version of the OpenAPI document: 2020-01-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.BgpSession;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The properties that define a direct connection.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:11:04.969930-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DirectConnection {
  public static final String SERIALIZED_NAME_BANDWIDTH_IN_MBPS = "bandwidthInMbps";
  @SerializedName(SERIALIZED_NAME_BANDWIDTH_IN_MBPS)
  private Integer bandwidthInMbps;

  public static final String SERIALIZED_NAME_BGP_SESSION = "bgpSession";
  @SerializedName(SERIALIZED_NAME_BGP_SESSION)
  private BgpSession bgpSession;

  public static final String SERIALIZED_NAME_CONNECTION_IDENTIFIER = "connectionIdentifier";
  @SerializedName(SERIALIZED_NAME_CONNECTION_IDENTIFIER)
  private String connectionIdentifier;

  /**
   * The state of the connection.
   */
  @JsonAdapter(ConnectionStateEnum.Adapter.class)
  public enum ConnectionStateEnum {
    NONE("None"),
    
    PENDING_APPROVAL("PendingApproval"),
    
    APPROVED("Approved"),
    
    PROVISIONING_STARTED("ProvisioningStarted"),
    
    PROVISIONING_FAILED("ProvisioningFailed"),
    
    PROVISIONING_COMPLETED("ProvisioningCompleted"),
    
    VALIDATING("Validating"),
    
    ACTIVE("Active");

    private String value;

    ConnectionStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ConnectionStateEnum fromValue(String value) {
      for (ConnectionStateEnum b : ConnectionStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ConnectionStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ConnectionStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ConnectionStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ConnectionStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ConnectionStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CONNECTION_STATE = "connectionState";
  @SerializedName(SERIALIZED_NAME_CONNECTION_STATE)
  private ConnectionStateEnum connectionState;

  public static final String SERIALIZED_NAME_ERROR_MESSAGE = "errorMessage";
  @SerializedName(SERIALIZED_NAME_ERROR_MESSAGE)
  private String errorMessage;

  public static final String SERIALIZED_NAME_PEERING_D_B_FACILITY_ID = "peeringDBFacilityId";
  @SerializedName(SERIALIZED_NAME_PEERING_D_B_FACILITY_ID)
  private Integer peeringDBFacilityId;

  public static final String SERIALIZED_NAME_PROVISIONED_BANDWIDTH_IN_MBPS = "provisionedBandwidthInMbps";
  @SerializedName(SERIALIZED_NAME_PROVISIONED_BANDWIDTH_IN_MBPS)
  private Integer provisionedBandwidthInMbps;

  /**
   * The field indicating if Microsoft provides session ip addresses.
   */
  @JsonAdapter(SessionAddressProviderEnum.Adapter.class)
  public enum SessionAddressProviderEnum {
    MICROSOFT("Microsoft"),
    
    PEER("Peer");

    private String value;

    SessionAddressProviderEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SessionAddressProviderEnum fromValue(String value) {
      for (SessionAddressProviderEnum b : SessionAddressProviderEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SessionAddressProviderEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SessionAddressProviderEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SessionAddressProviderEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SessionAddressProviderEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SessionAddressProviderEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SESSION_ADDRESS_PROVIDER = "sessionAddressProvider";
  @SerializedName(SERIALIZED_NAME_SESSION_ADDRESS_PROVIDER)
  private SessionAddressProviderEnum sessionAddressProvider;

  public static final String SERIALIZED_NAME_USE_FOR_PEERING_SERVICE = "useForPeeringService";
  @SerializedName(SERIALIZED_NAME_USE_FOR_PEERING_SERVICE)
  private Boolean useForPeeringService;

  public DirectConnection() {
  }

  public DirectConnection(
     ConnectionStateEnum connectionState, 
     String errorMessage, 
     Integer provisionedBandwidthInMbps
  ) {
    this();
    this.connectionState = connectionState;
    this.errorMessage = errorMessage;
    this.provisionedBandwidthInMbps = provisionedBandwidthInMbps;
  }

  public DirectConnection bandwidthInMbps(Integer bandwidthInMbps) {
    this.bandwidthInMbps = bandwidthInMbps;
    return this;
  }

  /**
   * The bandwidth of the connection.
   * @return bandwidthInMbps
   */
  @javax.annotation.Nullable
  public Integer getBandwidthInMbps() {
    return bandwidthInMbps;
  }

  public void setBandwidthInMbps(Integer bandwidthInMbps) {
    this.bandwidthInMbps = bandwidthInMbps;
  }


  public DirectConnection bgpSession(BgpSession bgpSession) {
    this.bgpSession = bgpSession;
    return this;
  }

  /**
   * Get bgpSession
   * @return bgpSession
   */
  @javax.annotation.Nullable
  public BgpSession getBgpSession() {
    return bgpSession;
  }

  public void setBgpSession(BgpSession bgpSession) {
    this.bgpSession = bgpSession;
  }


  public DirectConnection connectionIdentifier(String connectionIdentifier) {
    this.connectionIdentifier = connectionIdentifier;
    return this;
  }

  /**
   * The unique identifier (GUID) for the connection.
   * @return connectionIdentifier
   */
  @javax.annotation.Nullable
  public String getConnectionIdentifier() {
    return connectionIdentifier;
  }

  public void setConnectionIdentifier(String connectionIdentifier) {
    this.connectionIdentifier = connectionIdentifier;
  }


  /**
   * The state of the connection.
   * @return connectionState
   */
  @javax.annotation.Nullable
  public ConnectionStateEnum getConnectionState() {
    return connectionState;
  }



  /**
   * The error message related to the connection state, if any.
   * @return errorMessage
   */
  @javax.annotation.Nullable
  public String getErrorMessage() {
    return errorMessage;
  }



  public DirectConnection peeringDBFacilityId(Integer peeringDBFacilityId) {
    this.peeringDBFacilityId = peeringDBFacilityId;
    return this;
  }

  /**
   * The PeeringDB.com ID of the facility at which the connection has to be set up.
   * @return peeringDBFacilityId
   */
  @javax.annotation.Nullable
  public Integer getPeeringDBFacilityId() {
    return peeringDBFacilityId;
  }

  public void setPeeringDBFacilityId(Integer peeringDBFacilityId) {
    this.peeringDBFacilityId = peeringDBFacilityId;
  }


  /**
   * The bandwidth that is actually provisioned.
   * @return provisionedBandwidthInMbps
   */
  @javax.annotation.Nullable
  public Integer getProvisionedBandwidthInMbps() {
    return provisionedBandwidthInMbps;
  }



  public DirectConnection sessionAddressProvider(SessionAddressProviderEnum sessionAddressProvider) {
    this.sessionAddressProvider = sessionAddressProvider;
    return this;
  }

  /**
   * The field indicating if Microsoft provides session ip addresses.
   * @return sessionAddressProvider
   */
  @javax.annotation.Nullable
  public SessionAddressProviderEnum getSessionAddressProvider() {
    return sessionAddressProvider;
  }

  public void setSessionAddressProvider(SessionAddressProviderEnum sessionAddressProvider) {
    this.sessionAddressProvider = sessionAddressProvider;
  }


  public DirectConnection useForPeeringService(Boolean useForPeeringService) {
    this.useForPeeringService = useForPeeringService;
    return this;
  }

  /**
   * The flag that indicates whether or not the connection is used for peering service.
   * @return useForPeeringService
   */
  @javax.annotation.Nullable
  public Boolean getUseForPeeringService() {
    return useForPeeringService;
  }

  public void setUseForPeeringService(Boolean useForPeeringService) {
    this.useForPeeringService = useForPeeringService;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DirectConnection directConnection = (DirectConnection) o;
    return Objects.equals(this.bandwidthInMbps, directConnection.bandwidthInMbps) &&
        Objects.equals(this.bgpSession, directConnection.bgpSession) &&
        Objects.equals(this.connectionIdentifier, directConnection.connectionIdentifier) &&
        Objects.equals(this.connectionState, directConnection.connectionState) &&
        Objects.equals(this.errorMessage, directConnection.errorMessage) &&
        Objects.equals(this.peeringDBFacilityId, directConnection.peeringDBFacilityId) &&
        Objects.equals(this.provisionedBandwidthInMbps, directConnection.provisionedBandwidthInMbps) &&
        Objects.equals(this.sessionAddressProvider, directConnection.sessionAddressProvider) &&
        Objects.equals(this.useForPeeringService, directConnection.useForPeeringService);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bandwidthInMbps, bgpSession, connectionIdentifier, connectionState, errorMessage, peeringDBFacilityId, provisionedBandwidthInMbps, sessionAddressProvider, useForPeeringService);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DirectConnection {\n");
    sb.append("    bandwidthInMbps: ").append(toIndentedString(bandwidthInMbps)).append("\n");
    sb.append("    bgpSession: ").append(toIndentedString(bgpSession)).append("\n");
    sb.append("    connectionIdentifier: ").append(toIndentedString(connectionIdentifier)).append("\n");
    sb.append("    connectionState: ").append(toIndentedString(connectionState)).append("\n");
    sb.append("    errorMessage: ").append(toIndentedString(errorMessage)).append("\n");
    sb.append("    peeringDBFacilityId: ").append(toIndentedString(peeringDBFacilityId)).append("\n");
    sb.append("    provisionedBandwidthInMbps: ").append(toIndentedString(provisionedBandwidthInMbps)).append("\n");
    sb.append("    sessionAddressProvider: ").append(toIndentedString(sessionAddressProvider)).append("\n");
    sb.append("    useForPeeringService: ").append(toIndentedString(useForPeeringService)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bandwidthInMbps");
    openapiFields.add("bgpSession");
    openapiFields.add("connectionIdentifier");
    openapiFields.add("connectionState");
    openapiFields.add("errorMessage");
    openapiFields.add("peeringDBFacilityId");
    openapiFields.add("provisionedBandwidthInMbps");
    openapiFields.add("sessionAddressProvider");
    openapiFields.add("useForPeeringService");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DirectConnection
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DirectConnection.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DirectConnection is not found in the empty JSON string", DirectConnection.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DirectConnection.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DirectConnection` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `bgpSession`
      if (jsonObj.get("bgpSession") != null && !jsonObj.get("bgpSession").isJsonNull()) {
        BgpSession.validateJsonElement(jsonObj.get("bgpSession"));
      }
      if ((jsonObj.get("connectionIdentifier") != null && !jsonObj.get("connectionIdentifier").isJsonNull()) && !jsonObj.get("connectionIdentifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `connectionIdentifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("connectionIdentifier").toString()));
      }
      if ((jsonObj.get("connectionState") != null && !jsonObj.get("connectionState").isJsonNull()) && !jsonObj.get("connectionState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `connectionState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("connectionState").toString()));
      }
      // validate the optional field `connectionState`
      if (jsonObj.get("connectionState") != null && !jsonObj.get("connectionState").isJsonNull()) {
        ConnectionStateEnum.validateJsonElement(jsonObj.get("connectionState"));
      }
      if ((jsonObj.get("errorMessage") != null && !jsonObj.get("errorMessage").isJsonNull()) && !jsonObj.get("errorMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `errorMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("errorMessage").toString()));
      }
      if ((jsonObj.get("sessionAddressProvider") != null && !jsonObj.get("sessionAddressProvider").isJsonNull()) && !jsonObj.get("sessionAddressProvider").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sessionAddressProvider` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sessionAddressProvider").toString()));
      }
      // validate the optional field `sessionAddressProvider`
      if (jsonObj.get("sessionAddressProvider") != null && !jsonObj.get("sessionAddressProvider").isJsonNull()) {
        SessionAddressProviderEnum.validateJsonElement(jsonObj.get("sessionAddressProvider"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DirectConnection.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DirectConnection' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DirectConnection> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DirectConnection.class));

       return (TypeAdapter<T>) new TypeAdapter<DirectConnection>() {
           @Override
           public void write(JsonWriter out, DirectConnection value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DirectConnection read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DirectConnection given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DirectConnection
   * @throws IOException if the JSON string is invalid with respect to DirectConnection
   */
  public static DirectConnection fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DirectConnection.class);
  }

  /**
   * Convert an instance of DirectConnection to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

