/*
 * PeeringManagementClient
 * APIs to manage Peering resources through the Azure Resource Manager.
 *
 * The version of the OpenAPI document: 2020-01-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The properties that define a BGP session.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:11:04.969930-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BgpSession {
  public static final String SERIALIZED_NAME_MAX_PREFIXES_ADVERTISED_V4 = "maxPrefixesAdvertisedV4";
  @SerializedName(SERIALIZED_NAME_MAX_PREFIXES_ADVERTISED_V4)
  private Integer maxPrefixesAdvertisedV4;

  public static final String SERIALIZED_NAME_MAX_PREFIXES_ADVERTISED_V6 = "maxPrefixesAdvertisedV6";
  @SerializedName(SERIALIZED_NAME_MAX_PREFIXES_ADVERTISED_V6)
  private Integer maxPrefixesAdvertisedV6;

  public static final String SERIALIZED_NAME_MD5_AUTHENTICATION_KEY = "md5AuthenticationKey";
  @SerializedName(SERIALIZED_NAME_MD5_AUTHENTICATION_KEY)
  private String md5AuthenticationKey;

  public static final String SERIALIZED_NAME_MICROSOFT_SESSION_I_PV4_ADDRESS = "microsoftSessionIPv4Address";
  @SerializedName(SERIALIZED_NAME_MICROSOFT_SESSION_I_PV4_ADDRESS)
  private String microsoftSessionIPv4Address;

  public static final String SERIALIZED_NAME_MICROSOFT_SESSION_I_PV6_ADDRESS = "microsoftSessionIPv6Address";
  @SerializedName(SERIALIZED_NAME_MICROSOFT_SESSION_I_PV6_ADDRESS)
  private String microsoftSessionIPv6Address;

  public static final String SERIALIZED_NAME_PEER_SESSION_I_PV4_ADDRESS = "peerSessionIPv4Address";
  @SerializedName(SERIALIZED_NAME_PEER_SESSION_I_PV4_ADDRESS)
  private String peerSessionIPv4Address;

  public static final String SERIALIZED_NAME_PEER_SESSION_I_PV6_ADDRESS = "peerSessionIPv6Address";
  @SerializedName(SERIALIZED_NAME_PEER_SESSION_I_PV6_ADDRESS)
  private String peerSessionIPv6Address;

  public static final String SERIALIZED_NAME_SESSION_PREFIX_V4 = "sessionPrefixV4";
  @SerializedName(SERIALIZED_NAME_SESSION_PREFIX_V4)
  private String sessionPrefixV4;

  public static final String SERIALIZED_NAME_SESSION_PREFIX_V6 = "sessionPrefixV6";
  @SerializedName(SERIALIZED_NAME_SESSION_PREFIX_V6)
  private String sessionPrefixV6;

  /**
   * The state of the IPv4 session.
   */
  @JsonAdapter(SessionStateV4Enum.Adapter.class)
  public enum SessionStateV4Enum {
    NONE("None"),
    
    IDLE("Idle"),
    
    CONNECT("Connect"),
    
    ACTIVE("Active"),
    
    OPEN_SENT("OpenSent"),
    
    OPEN_CONFIRM("OpenConfirm"),
    
    OPEN_RECEIVED("OpenReceived"),
    
    ESTABLISHED("Established"),
    
    PENDING_ADD("PendingAdd"),
    
    PENDING_UPDATE("PendingUpdate"),
    
    PENDING_REMOVE("PendingRemove");

    private String value;

    SessionStateV4Enum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SessionStateV4Enum fromValue(String value) {
      for (SessionStateV4Enum b : SessionStateV4Enum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SessionStateV4Enum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SessionStateV4Enum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SessionStateV4Enum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SessionStateV4Enum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SessionStateV4Enum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SESSION_STATE_V4 = "sessionStateV4";
  @SerializedName(SERIALIZED_NAME_SESSION_STATE_V4)
  private SessionStateV4Enum sessionStateV4;

  /**
   * The state of the IPv6 session.
   */
  @JsonAdapter(SessionStateV6Enum.Adapter.class)
  public enum SessionStateV6Enum {
    NONE("None"),
    
    IDLE("Idle"),
    
    CONNECT("Connect"),
    
    ACTIVE("Active"),
    
    OPEN_SENT("OpenSent"),
    
    OPEN_CONFIRM("OpenConfirm"),
    
    OPEN_RECEIVED("OpenReceived"),
    
    ESTABLISHED("Established"),
    
    PENDING_ADD("PendingAdd"),
    
    PENDING_UPDATE("PendingUpdate"),
    
    PENDING_REMOVE("PendingRemove");

    private String value;

    SessionStateV6Enum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SessionStateV6Enum fromValue(String value) {
      for (SessionStateV6Enum b : SessionStateV6Enum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SessionStateV6Enum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SessionStateV6Enum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SessionStateV6Enum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SessionStateV6Enum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SessionStateV6Enum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SESSION_STATE_V6 = "sessionStateV6";
  @SerializedName(SERIALIZED_NAME_SESSION_STATE_V6)
  private SessionStateV6Enum sessionStateV6;

  public BgpSession() {
  }

  public BgpSession(
     String microsoftSessionIPv4Address, 
     String microsoftSessionIPv6Address, 
     SessionStateV4Enum sessionStateV4, 
     SessionStateV6Enum sessionStateV6
  ) {
    this();
    this.microsoftSessionIPv4Address = microsoftSessionIPv4Address;
    this.microsoftSessionIPv6Address = microsoftSessionIPv6Address;
    this.sessionStateV4 = sessionStateV4;
    this.sessionStateV6 = sessionStateV6;
  }

  public BgpSession maxPrefixesAdvertisedV4(Integer maxPrefixesAdvertisedV4) {
    this.maxPrefixesAdvertisedV4 = maxPrefixesAdvertisedV4;
    return this;
  }

  /**
   * The maximum number of prefixes advertised over the IPv4 session.
   * @return maxPrefixesAdvertisedV4
   */
  @javax.annotation.Nullable
  public Integer getMaxPrefixesAdvertisedV4() {
    return maxPrefixesAdvertisedV4;
  }

  public void setMaxPrefixesAdvertisedV4(Integer maxPrefixesAdvertisedV4) {
    this.maxPrefixesAdvertisedV4 = maxPrefixesAdvertisedV4;
  }


  public BgpSession maxPrefixesAdvertisedV6(Integer maxPrefixesAdvertisedV6) {
    this.maxPrefixesAdvertisedV6 = maxPrefixesAdvertisedV6;
    return this;
  }

  /**
   * The maximum number of prefixes advertised over the IPv6 session.
   * @return maxPrefixesAdvertisedV6
   */
  @javax.annotation.Nullable
  public Integer getMaxPrefixesAdvertisedV6() {
    return maxPrefixesAdvertisedV6;
  }

  public void setMaxPrefixesAdvertisedV6(Integer maxPrefixesAdvertisedV6) {
    this.maxPrefixesAdvertisedV6 = maxPrefixesAdvertisedV6;
  }


  public BgpSession md5AuthenticationKey(String md5AuthenticationKey) {
    this.md5AuthenticationKey = md5AuthenticationKey;
    return this;
  }

  /**
   * The MD5 authentication key of the session.
   * @return md5AuthenticationKey
   */
  @javax.annotation.Nullable
  public String getMd5AuthenticationKey() {
    return md5AuthenticationKey;
  }

  public void setMd5AuthenticationKey(String md5AuthenticationKey) {
    this.md5AuthenticationKey = md5AuthenticationKey;
  }


  /**
   * The IPv4 session address on Microsoft&#39;s end.
   * @return microsoftSessionIPv4Address
   */
  @javax.annotation.Nullable
  public String getMicrosoftSessionIPv4Address() {
    return microsoftSessionIPv4Address;
  }



  /**
   * The IPv6 session address on Microsoft&#39;s end.
   * @return microsoftSessionIPv6Address
   */
  @javax.annotation.Nullable
  public String getMicrosoftSessionIPv6Address() {
    return microsoftSessionIPv6Address;
  }



  public BgpSession peerSessionIPv4Address(String peerSessionIPv4Address) {
    this.peerSessionIPv4Address = peerSessionIPv4Address;
    return this;
  }

  /**
   * The IPv4 session address on peer&#39;s end.
   * @return peerSessionIPv4Address
   */
  @javax.annotation.Nullable
  public String getPeerSessionIPv4Address() {
    return peerSessionIPv4Address;
  }

  public void setPeerSessionIPv4Address(String peerSessionIPv4Address) {
    this.peerSessionIPv4Address = peerSessionIPv4Address;
  }


  public BgpSession peerSessionIPv6Address(String peerSessionIPv6Address) {
    this.peerSessionIPv6Address = peerSessionIPv6Address;
    return this;
  }

  /**
   * The IPv6 session address on peer&#39;s end.
   * @return peerSessionIPv6Address
   */
  @javax.annotation.Nullable
  public String getPeerSessionIPv6Address() {
    return peerSessionIPv6Address;
  }

  public void setPeerSessionIPv6Address(String peerSessionIPv6Address) {
    this.peerSessionIPv6Address = peerSessionIPv6Address;
  }


  public BgpSession sessionPrefixV4(String sessionPrefixV4) {
    this.sessionPrefixV4 = sessionPrefixV4;
    return this;
  }

  /**
   * The IPv4 prefix that contains both ends&#39; IPv4 addresses.
   * @return sessionPrefixV4
   */
  @javax.annotation.Nullable
  public String getSessionPrefixV4() {
    return sessionPrefixV4;
  }

  public void setSessionPrefixV4(String sessionPrefixV4) {
    this.sessionPrefixV4 = sessionPrefixV4;
  }


  public BgpSession sessionPrefixV6(String sessionPrefixV6) {
    this.sessionPrefixV6 = sessionPrefixV6;
    return this;
  }

  /**
   * The IPv6 prefix that contains both ends&#39; IPv6 addresses.
   * @return sessionPrefixV6
   */
  @javax.annotation.Nullable
  public String getSessionPrefixV6() {
    return sessionPrefixV6;
  }

  public void setSessionPrefixV6(String sessionPrefixV6) {
    this.sessionPrefixV6 = sessionPrefixV6;
  }


  /**
   * The state of the IPv4 session.
   * @return sessionStateV4
   */
  @javax.annotation.Nullable
  public SessionStateV4Enum getSessionStateV4() {
    return sessionStateV4;
  }



  /**
   * The state of the IPv6 session.
   * @return sessionStateV6
   */
  @javax.annotation.Nullable
  public SessionStateV6Enum getSessionStateV6() {
    return sessionStateV6;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BgpSession bgpSession = (BgpSession) o;
    return Objects.equals(this.maxPrefixesAdvertisedV4, bgpSession.maxPrefixesAdvertisedV4) &&
        Objects.equals(this.maxPrefixesAdvertisedV6, bgpSession.maxPrefixesAdvertisedV6) &&
        Objects.equals(this.md5AuthenticationKey, bgpSession.md5AuthenticationKey) &&
        Objects.equals(this.microsoftSessionIPv4Address, bgpSession.microsoftSessionIPv4Address) &&
        Objects.equals(this.microsoftSessionIPv6Address, bgpSession.microsoftSessionIPv6Address) &&
        Objects.equals(this.peerSessionIPv4Address, bgpSession.peerSessionIPv4Address) &&
        Objects.equals(this.peerSessionIPv6Address, bgpSession.peerSessionIPv6Address) &&
        Objects.equals(this.sessionPrefixV4, bgpSession.sessionPrefixV4) &&
        Objects.equals(this.sessionPrefixV6, bgpSession.sessionPrefixV6) &&
        Objects.equals(this.sessionStateV4, bgpSession.sessionStateV4) &&
        Objects.equals(this.sessionStateV6, bgpSession.sessionStateV6);
  }

  @Override
  public int hashCode() {
    return Objects.hash(maxPrefixesAdvertisedV4, maxPrefixesAdvertisedV6, md5AuthenticationKey, microsoftSessionIPv4Address, microsoftSessionIPv6Address, peerSessionIPv4Address, peerSessionIPv6Address, sessionPrefixV4, sessionPrefixV6, sessionStateV4, sessionStateV6);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BgpSession {\n");
    sb.append("    maxPrefixesAdvertisedV4: ").append(toIndentedString(maxPrefixesAdvertisedV4)).append("\n");
    sb.append("    maxPrefixesAdvertisedV6: ").append(toIndentedString(maxPrefixesAdvertisedV6)).append("\n");
    sb.append("    md5AuthenticationKey: ").append(toIndentedString(md5AuthenticationKey)).append("\n");
    sb.append("    microsoftSessionIPv4Address: ").append(toIndentedString(microsoftSessionIPv4Address)).append("\n");
    sb.append("    microsoftSessionIPv6Address: ").append(toIndentedString(microsoftSessionIPv6Address)).append("\n");
    sb.append("    peerSessionIPv4Address: ").append(toIndentedString(peerSessionIPv4Address)).append("\n");
    sb.append("    peerSessionIPv6Address: ").append(toIndentedString(peerSessionIPv6Address)).append("\n");
    sb.append("    sessionPrefixV4: ").append(toIndentedString(sessionPrefixV4)).append("\n");
    sb.append("    sessionPrefixV6: ").append(toIndentedString(sessionPrefixV6)).append("\n");
    sb.append("    sessionStateV4: ").append(toIndentedString(sessionStateV4)).append("\n");
    sb.append("    sessionStateV6: ").append(toIndentedString(sessionStateV6)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("maxPrefixesAdvertisedV4");
    openapiFields.add("maxPrefixesAdvertisedV6");
    openapiFields.add("md5AuthenticationKey");
    openapiFields.add("microsoftSessionIPv4Address");
    openapiFields.add("microsoftSessionIPv6Address");
    openapiFields.add("peerSessionIPv4Address");
    openapiFields.add("peerSessionIPv6Address");
    openapiFields.add("sessionPrefixV4");
    openapiFields.add("sessionPrefixV6");
    openapiFields.add("sessionStateV4");
    openapiFields.add("sessionStateV6");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BgpSession
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BgpSession.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BgpSession is not found in the empty JSON string", BgpSession.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BgpSession.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BgpSession` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("md5AuthenticationKey") != null && !jsonObj.get("md5AuthenticationKey").isJsonNull()) && !jsonObj.get("md5AuthenticationKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `md5AuthenticationKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("md5AuthenticationKey").toString()));
      }
      if ((jsonObj.get("microsoftSessionIPv4Address") != null && !jsonObj.get("microsoftSessionIPv4Address").isJsonNull()) && !jsonObj.get("microsoftSessionIPv4Address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `microsoftSessionIPv4Address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("microsoftSessionIPv4Address").toString()));
      }
      if ((jsonObj.get("microsoftSessionIPv6Address") != null && !jsonObj.get("microsoftSessionIPv6Address").isJsonNull()) && !jsonObj.get("microsoftSessionIPv6Address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `microsoftSessionIPv6Address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("microsoftSessionIPv6Address").toString()));
      }
      if ((jsonObj.get("peerSessionIPv4Address") != null && !jsonObj.get("peerSessionIPv4Address").isJsonNull()) && !jsonObj.get("peerSessionIPv4Address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `peerSessionIPv4Address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("peerSessionIPv4Address").toString()));
      }
      if ((jsonObj.get("peerSessionIPv6Address") != null && !jsonObj.get("peerSessionIPv6Address").isJsonNull()) && !jsonObj.get("peerSessionIPv6Address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `peerSessionIPv6Address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("peerSessionIPv6Address").toString()));
      }
      if ((jsonObj.get("sessionPrefixV4") != null && !jsonObj.get("sessionPrefixV4").isJsonNull()) && !jsonObj.get("sessionPrefixV4").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sessionPrefixV4` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sessionPrefixV4").toString()));
      }
      if ((jsonObj.get("sessionPrefixV6") != null && !jsonObj.get("sessionPrefixV6").isJsonNull()) && !jsonObj.get("sessionPrefixV6").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sessionPrefixV6` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sessionPrefixV6").toString()));
      }
      if ((jsonObj.get("sessionStateV4") != null && !jsonObj.get("sessionStateV4").isJsonNull()) && !jsonObj.get("sessionStateV4").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sessionStateV4` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sessionStateV4").toString()));
      }
      // validate the optional field `sessionStateV4`
      if (jsonObj.get("sessionStateV4") != null && !jsonObj.get("sessionStateV4").isJsonNull()) {
        SessionStateV4Enum.validateJsonElement(jsonObj.get("sessionStateV4"));
      }
      if ((jsonObj.get("sessionStateV6") != null && !jsonObj.get("sessionStateV6").isJsonNull()) && !jsonObj.get("sessionStateV6").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sessionStateV6` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sessionStateV6").toString()));
      }
      // validate the optional field `sessionStateV6`
      if (jsonObj.get("sessionStateV6") != null && !jsonObj.get("sessionStateV6").isJsonNull()) {
        SessionStateV6Enum.validateJsonElement(jsonObj.get("sessionStateV6"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BgpSession.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BgpSession' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BgpSession> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BgpSession.class));

       return (TypeAdapter<T>) new TypeAdapter<BgpSession>() {
           @Override
           public void write(JsonWriter out, BgpSession value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BgpSession read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BgpSession given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BgpSession
   * @throws IOException if the JSON string is invalid with respect to BgpSession
   */
  public static BgpSession fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BgpSession.class);
  }

  /**
   * Convert an instance of BgpSession to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

