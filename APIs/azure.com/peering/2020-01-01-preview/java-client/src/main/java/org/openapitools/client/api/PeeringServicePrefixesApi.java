/*
 * PeeringManagementClient
 * APIs to manage Peering resources through the Azure Resource Manager.
 *
 * The version of the OpenAPI document: 2020-01-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.PeeringServicePrefix;
import org.openapitools.client.model.PeeringServicePrefixListResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PeeringServicePrefixesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PeeringServicePrefixesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PeeringServicePrefixesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for prefixesCreateOrUpdate
     * @param resourceGroupName The name of the resource group. (required)
     * @param peeringServiceName The name of the peering service. (required)
     * @param prefixName The name of the prefix. (required)
     * @param subscriptionId The Azure subscription ID. (required)
     * @param apiVersion The client API version. (required)
     * @param peeringServicePrefix The properties needed to create a prefix. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation has failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call prefixesCreateOrUpdateCall(String resourceGroupName, String peeringServiceName, String prefixName, String subscriptionId, String apiVersion, PeeringServicePrefix peeringServicePrefix, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = peeringServicePrefix;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Peering/peeringServices/{peeringServiceName}/prefixes/{prefixName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "peeringServiceName" + "}", localVarApiClient.escapeString(peeringServiceName.toString()))
            .replace("{" + "prefixName" + "}", localVarApiClient.escapeString(prefixName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call prefixesCreateOrUpdateValidateBeforeCall(String resourceGroupName, String peeringServiceName, String prefixName, String subscriptionId, String apiVersion, PeeringServicePrefix peeringServicePrefix, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling prefixesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'peeringServiceName' is set
        if (peeringServiceName == null) {
            throw new ApiException("Missing the required parameter 'peeringServiceName' when calling prefixesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'prefixName' is set
        if (prefixName == null) {
            throw new ApiException("Missing the required parameter 'prefixName' when calling prefixesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling prefixesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling prefixesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'peeringServicePrefix' is set
        if (peeringServicePrefix == null) {
            throw new ApiException("Missing the required parameter 'peeringServicePrefix' when calling prefixesCreateOrUpdate(Async)");
        }

        return prefixesCreateOrUpdateCall(resourceGroupName, peeringServiceName, prefixName, subscriptionId, apiVersion, peeringServicePrefix, _callback);

    }

    /**
     * 
     * Creates a new prefix with the specified name under the given subscription, resource group and peering service.
     * @param resourceGroupName The name of the resource group. (required)
     * @param peeringServiceName The name of the peering service. (required)
     * @param prefixName The name of the prefix. (required)
     * @param subscriptionId The Azure subscription ID. (required)
     * @param apiVersion The client API version. (required)
     * @param peeringServicePrefix The properties needed to create a prefix. (required)
     * @return PeeringServicePrefix
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation has failed. </td><td>  -  </td></tr>
     </table>
     */
    public PeeringServicePrefix prefixesCreateOrUpdate(String resourceGroupName, String peeringServiceName, String prefixName, String subscriptionId, String apiVersion, PeeringServicePrefix peeringServicePrefix) throws ApiException {
        ApiResponse<PeeringServicePrefix> localVarResp = prefixesCreateOrUpdateWithHttpInfo(resourceGroupName, peeringServiceName, prefixName, subscriptionId, apiVersion, peeringServicePrefix);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a new prefix with the specified name under the given subscription, resource group and peering service.
     * @param resourceGroupName The name of the resource group. (required)
     * @param peeringServiceName The name of the peering service. (required)
     * @param prefixName The name of the prefix. (required)
     * @param subscriptionId The Azure subscription ID. (required)
     * @param apiVersion The client API version. (required)
     * @param peeringServicePrefix The properties needed to create a prefix. (required)
     * @return ApiResponse&lt;PeeringServicePrefix&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation has failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PeeringServicePrefix> prefixesCreateOrUpdateWithHttpInfo(String resourceGroupName, String peeringServiceName, String prefixName, String subscriptionId, String apiVersion, PeeringServicePrefix peeringServicePrefix) throws ApiException {
        okhttp3.Call localVarCall = prefixesCreateOrUpdateValidateBeforeCall(resourceGroupName, peeringServiceName, prefixName, subscriptionId, apiVersion, peeringServicePrefix, null);
        Type localVarReturnType = new TypeToken<PeeringServicePrefix>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a new prefix with the specified name under the given subscription, resource group and peering service.
     * @param resourceGroupName The name of the resource group. (required)
     * @param peeringServiceName The name of the peering service. (required)
     * @param prefixName The name of the prefix. (required)
     * @param subscriptionId The Azure subscription ID. (required)
     * @param apiVersion The client API version. (required)
     * @param peeringServicePrefix The properties needed to create a prefix. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation has failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call prefixesCreateOrUpdateAsync(String resourceGroupName, String peeringServiceName, String prefixName, String subscriptionId, String apiVersion, PeeringServicePrefix peeringServicePrefix, final ApiCallback<PeeringServicePrefix> _callback) throws ApiException {

        okhttp3.Call localVarCall = prefixesCreateOrUpdateValidateBeforeCall(resourceGroupName, peeringServiceName, prefixName, subscriptionId, apiVersion, peeringServicePrefix, _callback);
        Type localVarReturnType = new TypeToken<PeeringServicePrefix>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for prefixesDelete
     * @param resourceGroupName The name of the resource group. (required)
     * @param peeringServiceName The name of the peering service. (required)
     * @param prefixName The name of the prefix. (required)
     * @param subscriptionId The Azure subscription ID. (required)
     * @param apiVersion The client API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> NoContent </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation has failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call prefixesDeleteCall(String resourceGroupName, String peeringServiceName, String prefixName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Peering/peeringServices/{peeringServiceName}/prefixes/{prefixName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "peeringServiceName" + "}", localVarApiClient.escapeString(peeringServiceName.toString()))
            .replace("{" + "prefixName" + "}", localVarApiClient.escapeString(prefixName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call prefixesDeleteValidateBeforeCall(String resourceGroupName, String peeringServiceName, String prefixName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling prefixesDelete(Async)");
        }

        // verify the required parameter 'peeringServiceName' is set
        if (peeringServiceName == null) {
            throw new ApiException("Missing the required parameter 'peeringServiceName' when calling prefixesDelete(Async)");
        }

        // verify the required parameter 'prefixName' is set
        if (prefixName == null) {
            throw new ApiException("Missing the required parameter 'prefixName' when calling prefixesDelete(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling prefixesDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling prefixesDelete(Async)");
        }

        return prefixesDeleteCall(resourceGroupName, peeringServiceName, prefixName, subscriptionId, apiVersion, _callback);

    }

    /**
     * 
     * Deletes an existing prefix with the specified name under the given subscription, resource group and peering service.
     * @param resourceGroupName The name of the resource group. (required)
     * @param peeringServiceName The name of the peering service. (required)
     * @param prefixName The name of the prefix. (required)
     * @param subscriptionId The Azure subscription ID. (required)
     * @param apiVersion The client API version. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> NoContent </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation has failed. </td><td>  -  </td></tr>
     </table>
     */
    public void prefixesDelete(String resourceGroupName, String peeringServiceName, String prefixName, String subscriptionId, String apiVersion) throws ApiException {
        prefixesDeleteWithHttpInfo(resourceGroupName, peeringServiceName, prefixName, subscriptionId, apiVersion);
    }

    /**
     * 
     * Deletes an existing prefix with the specified name under the given subscription, resource group and peering service.
     * @param resourceGroupName The name of the resource group. (required)
     * @param peeringServiceName The name of the peering service. (required)
     * @param prefixName The name of the prefix. (required)
     * @param subscriptionId The Azure subscription ID. (required)
     * @param apiVersion The client API version. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> NoContent </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation has failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> prefixesDeleteWithHttpInfo(String resourceGroupName, String peeringServiceName, String prefixName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = prefixesDeleteValidateBeforeCall(resourceGroupName, peeringServiceName, prefixName, subscriptionId, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes an existing prefix with the specified name under the given subscription, resource group and peering service.
     * @param resourceGroupName The name of the resource group. (required)
     * @param peeringServiceName The name of the peering service. (required)
     * @param prefixName The name of the prefix. (required)
     * @param subscriptionId The Azure subscription ID. (required)
     * @param apiVersion The client API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> NoContent </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation has failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call prefixesDeleteAsync(String resourceGroupName, String peeringServiceName, String prefixName, String subscriptionId, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = prefixesDeleteValidateBeforeCall(resourceGroupName, peeringServiceName, prefixName, subscriptionId, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for prefixesGet
     * @param resourceGroupName The name of the resource group. (required)
     * @param peeringServiceName The name of the peering service. (required)
     * @param prefixName The name of the prefix. (required)
     * @param subscriptionId The Azure subscription ID. (required)
     * @param apiVersion The client API version. (required)
     * @param $expand The properties to be expanded. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation has failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call prefixesGetCall(String resourceGroupName, String peeringServiceName, String prefixName, String subscriptionId, String apiVersion, String $expand, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Peering/peeringServices/{peeringServiceName}/prefixes/{prefixName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "peeringServiceName" + "}", localVarApiClient.escapeString(peeringServiceName.toString()))
            .replace("{" + "prefixName" + "}", localVarApiClient.escapeString(prefixName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$expand", $expand));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call prefixesGetValidateBeforeCall(String resourceGroupName, String peeringServiceName, String prefixName, String subscriptionId, String apiVersion, String $expand, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling prefixesGet(Async)");
        }

        // verify the required parameter 'peeringServiceName' is set
        if (peeringServiceName == null) {
            throw new ApiException("Missing the required parameter 'peeringServiceName' when calling prefixesGet(Async)");
        }

        // verify the required parameter 'prefixName' is set
        if (prefixName == null) {
            throw new ApiException("Missing the required parameter 'prefixName' when calling prefixesGet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling prefixesGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling prefixesGet(Async)");
        }

        return prefixesGetCall(resourceGroupName, peeringServiceName, prefixName, subscriptionId, apiVersion, $expand, _callback);

    }

    /**
     * 
     * Gets an existing prefix with the specified name under the given subscription, resource group and peering service.
     * @param resourceGroupName The name of the resource group. (required)
     * @param peeringServiceName The name of the peering service. (required)
     * @param prefixName The name of the prefix. (required)
     * @param subscriptionId The Azure subscription ID. (required)
     * @param apiVersion The client API version. (required)
     * @param $expand The properties to be expanded. (optional)
     * @return PeeringServicePrefix
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation has failed. </td><td>  -  </td></tr>
     </table>
     */
    public PeeringServicePrefix prefixesGet(String resourceGroupName, String peeringServiceName, String prefixName, String subscriptionId, String apiVersion, String $expand) throws ApiException {
        ApiResponse<PeeringServicePrefix> localVarResp = prefixesGetWithHttpInfo(resourceGroupName, peeringServiceName, prefixName, subscriptionId, apiVersion, $expand);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets an existing prefix with the specified name under the given subscription, resource group and peering service.
     * @param resourceGroupName The name of the resource group. (required)
     * @param peeringServiceName The name of the peering service. (required)
     * @param prefixName The name of the prefix. (required)
     * @param subscriptionId The Azure subscription ID. (required)
     * @param apiVersion The client API version. (required)
     * @param $expand The properties to be expanded. (optional)
     * @return ApiResponse&lt;PeeringServicePrefix&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation has failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PeeringServicePrefix> prefixesGetWithHttpInfo(String resourceGroupName, String peeringServiceName, String prefixName, String subscriptionId, String apiVersion, String $expand) throws ApiException {
        okhttp3.Call localVarCall = prefixesGetValidateBeforeCall(resourceGroupName, peeringServiceName, prefixName, subscriptionId, apiVersion, $expand, null);
        Type localVarReturnType = new TypeToken<PeeringServicePrefix>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets an existing prefix with the specified name under the given subscription, resource group and peering service.
     * @param resourceGroupName The name of the resource group. (required)
     * @param peeringServiceName The name of the peering service. (required)
     * @param prefixName The name of the prefix. (required)
     * @param subscriptionId The Azure subscription ID. (required)
     * @param apiVersion The client API version. (required)
     * @param $expand The properties to be expanded. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation has failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call prefixesGetAsync(String resourceGroupName, String peeringServiceName, String prefixName, String subscriptionId, String apiVersion, String $expand, final ApiCallback<PeeringServicePrefix> _callback) throws ApiException {

        okhttp3.Call localVarCall = prefixesGetValidateBeforeCall(resourceGroupName, peeringServiceName, prefixName, subscriptionId, apiVersion, $expand, _callback);
        Type localVarReturnType = new TypeToken<PeeringServicePrefix>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for prefixesListByPeeringService
     * @param resourceGroupName The name of the resource group. (required)
     * @param peeringServiceName The name of the peering service. (required)
     * @param subscriptionId The Azure subscription ID. (required)
     * @param apiVersion The client API version. (required)
     * @param $expand The properties to be expanded. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation has failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call prefixesListByPeeringServiceCall(String resourceGroupName, String peeringServiceName, String subscriptionId, String apiVersion, String $expand, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Peering/peeringServices/{peeringServiceName}/prefixes"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "peeringServiceName" + "}", localVarApiClient.escapeString(peeringServiceName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$expand", $expand));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call prefixesListByPeeringServiceValidateBeforeCall(String resourceGroupName, String peeringServiceName, String subscriptionId, String apiVersion, String $expand, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling prefixesListByPeeringService(Async)");
        }

        // verify the required parameter 'peeringServiceName' is set
        if (peeringServiceName == null) {
            throw new ApiException("Missing the required parameter 'peeringServiceName' when calling prefixesListByPeeringService(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling prefixesListByPeeringService(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling prefixesListByPeeringService(Async)");
        }

        return prefixesListByPeeringServiceCall(resourceGroupName, peeringServiceName, subscriptionId, apiVersion, $expand, _callback);

    }

    /**
     * 
     * Lists all prefixes under the given subscription, resource group and peering service.
     * @param resourceGroupName The name of the resource group. (required)
     * @param peeringServiceName The name of the peering service. (required)
     * @param subscriptionId The Azure subscription ID. (required)
     * @param apiVersion The client API version. (required)
     * @param $expand The properties to be expanded. (optional)
     * @return PeeringServicePrefixListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation has failed. </td><td>  -  </td></tr>
     </table>
     */
    public PeeringServicePrefixListResult prefixesListByPeeringService(String resourceGroupName, String peeringServiceName, String subscriptionId, String apiVersion, String $expand) throws ApiException {
        ApiResponse<PeeringServicePrefixListResult> localVarResp = prefixesListByPeeringServiceWithHttpInfo(resourceGroupName, peeringServiceName, subscriptionId, apiVersion, $expand);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists all prefixes under the given subscription, resource group and peering service.
     * @param resourceGroupName The name of the resource group. (required)
     * @param peeringServiceName The name of the peering service. (required)
     * @param subscriptionId The Azure subscription ID. (required)
     * @param apiVersion The client API version. (required)
     * @param $expand The properties to be expanded. (optional)
     * @return ApiResponse&lt;PeeringServicePrefixListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation has failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PeeringServicePrefixListResult> prefixesListByPeeringServiceWithHttpInfo(String resourceGroupName, String peeringServiceName, String subscriptionId, String apiVersion, String $expand) throws ApiException {
        okhttp3.Call localVarCall = prefixesListByPeeringServiceValidateBeforeCall(resourceGroupName, peeringServiceName, subscriptionId, apiVersion, $expand, null);
        Type localVarReturnType = new TypeToken<PeeringServicePrefixListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists all prefixes under the given subscription, resource group and peering service.
     * @param resourceGroupName The name of the resource group. (required)
     * @param peeringServiceName The name of the peering service. (required)
     * @param subscriptionId The Azure subscription ID. (required)
     * @param apiVersion The client API version. (required)
     * @param $expand The properties to be expanded. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation has failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call prefixesListByPeeringServiceAsync(String resourceGroupName, String peeringServiceName, String subscriptionId, String apiVersion, String $expand, final ApiCallback<PeeringServicePrefixListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = prefixesListByPeeringServiceValidateBeforeCall(resourceGroupName, peeringServiceName, subscriptionId, apiVersion, $expand, _callback);
        Type localVarReturnType = new TypeToken<PeeringServicePrefixListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
