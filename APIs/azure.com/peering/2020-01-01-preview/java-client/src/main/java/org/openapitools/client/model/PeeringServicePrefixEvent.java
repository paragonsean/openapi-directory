/*
 * PeeringManagementClient
 * APIs to manage Peering resources through the Azure Resource Manager.
 *
 * The version of the OpenAPI document: 2020-01-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The details of the event associated with a prefix.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:11:04.969930-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PeeringServicePrefixEvent {
  public static final String SERIALIZED_NAME_EVENT_DESCRIPTION = "eventDescription";
  @SerializedName(SERIALIZED_NAME_EVENT_DESCRIPTION)
  private String eventDescription;

  public static final String SERIALIZED_NAME_EVENT_LEVEL = "eventLevel";
  @SerializedName(SERIALIZED_NAME_EVENT_LEVEL)
  private String eventLevel;

  public static final String SERIALIZED_NAME_EVENT_SUMMARY = "eventSummary";
  @SerializedName(SERIALIZED_NAME_EVENT_SUMMARY)
  private String eventSummary;

  public static final String SERIALIZED_NAME_EVENT_TIMESTAMP = "eventTimestamp";
  @SerializedName(SERIALIZED_NAME_EVENT_TIMESTAMP)
  private OffsetDateTime eventTimestamp;

  public static final String SERIALIZED_NAME_EVENT_TYPE = "eventType";
  @SerializedName(SERIALIZED_NAME_EVENT_TYPE)
  private String eventType;

  public PeeringServicePrefixEvent() {
  }

  public PeeringServicePrefixEvent(
     String eventDescription, 
     String eventLevel, 
     String eventSummary, 
     OffsetDateTime eventTimestamp, 
     String eventType
  ) {
    this();
    this.eventDescription = eventDescription;
    this.eventLevel = eventLevel;
    this.eventSummary = eventSummary;
    this.eventTimestamp = eventTimestamp;
    this.eventType = eventType;
  }

  /**
   * The description of the event associated with a prefix.
   * @return eventDescription
   */
  @javax.annotation.Nullable
  public String getEventDescription() {
    return eventDescription;
  }



  /**
   * The level of the event associated with a prefix.
   * @return eventLevel
   */
  @javax.annotation.Nullable
  public String getEventLevel() {
    return eventLevel;
  }



  /**
   * The summary of the event associated with a prefix.
   * @return eventSummary
   */
  @javax.annotation.Nullable
  public String getEventSummary() {
    return eventSummary;
  }



  /**
   * The timestamp of the event associated with a prefix.
   * @return eventTimestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEventTimestamp() {
    return eventTimestamp;
  }



  /**
   * The type of the event associated with a prefix.
   * @return eventType
   */
  @javax.annotation.Nullable
  public String getEventType() {
    return eventType;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PeeringServicePrefixEvent peeringServicePrefixEvent = (PeeringServicePrefixEvent) o;
    return Objects.equals(this.eventDescription, peeringServicePrefixEvent.eventDescription) &&
        Objects.equals(this.eventLevel, peeringServicePrefixEvent.eventLevel) &&
        Objects.equals(this.eventSummary, peeringServicePrefixEvent.eventSummary) &&
        Objects.equals(this.eventTimestamp, peeringServicePrefixEvent.eventTimestamp) &&
        Objects.equals(this.eventType, peeringServicePrefixEvent.eventType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(eventDescription, eventLevel, eventSummary, eventTimestamp, eventType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PeeringServicePrefixEvent {\n");
    sb.append("    eventDescription: ").append(toIndentedString(eventDescription)).append("\n");
    sb.append("    eventLevel: ").append(toIndentedString(eventLevel)).append("\n");
    sb.append("    eventSummary: ").append(toIndentedString(eventSummary)).append("\n");
    sb.append("    eventTimestamp: ").append(toIndentedString(eventTimestamp)).append("\n");
    sb.append("    eventType: ").append(toIndentedString(eventType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("eventDescription");
    openapiFields.add("eventLevel");
    openapiFields.add("eventSummary");
    openapiFields.add("eventTimestamp");
    openapiFields.add("eventType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PeeringServicePrefixEvent
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PeeringServicePrefixEvent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PeeringServicePrefixEvent is not found in the empty JSON string", PeeringServicePrefixEvent.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PeeringServicePrefixEvent.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PeeringServicePrefixEvent` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("eventDescription") != null && !jsonObj.get("eventDescription").isJsonNull()) && !jsonObj.get("eventDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eventDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eventDescription").toString()));
      }
      if ((jsonObj.get("eventLevel") != null && !jsonObj.get("eventLevel").isJsonNull()) && !jsonObj.get("eventLevel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eventLevel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eventLevel").toString()));
      }
      if ((jsonObj.get("eventSummary") != null && !jsonObj.get("eventSummary").isJsonNull()) && !jsonObj.get("eventSummary").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eventSummary` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eventSummary").toString()));
      }
      if ((jsonObj.get("eventType") != null && !jsonObj.get("eventType").isJsonNull()) && !jsonObj.get("eventType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eventType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eventType").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PeeringServicePrefixEvent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PeeringServicePrefixEvent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PeeringServicePrefixEvent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PeeringServicePrefixEvent.class));

       return (TypeAdapter<T>) new TypeAdapter<PeeringServicePrefixEvent>() {
           @Override
           public void write(JsonWriter out, PeeringServicePrefixEvent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PeeringServicePrefixEvent read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PeeringServicePrefixEvent given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PeeringServicePrefixEvent
   * @throws IOException if the JSON string is invalid with respect to PeeringServicePrefixEvent
   */
  public static PeeringServicePrefixEvent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PeeringServicePrefixEvent.class);
  }

  /**
   * Convert an instance of PeeringServicePrefixEvent to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

