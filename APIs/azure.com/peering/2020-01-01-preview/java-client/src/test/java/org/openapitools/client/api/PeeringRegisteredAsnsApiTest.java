/*
 * PeeringManagementClient
 * APIs to manage Peering resources through the Azure Resource Manager.
 *
 * The version of the OpenAPI document: 2020-01-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.PeeringRegisteredAsn;
import org.openapitools.client.model.PeeringRegisteredAsnListResult;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PeeringRegisteredAsnsApi
 */
@Disabled
public class PeeringRegisteredAsnsApiTest {

    private final PeeringRegisteredAsnsApi api = new PeeringRegisteredAsnsApi();

    /**
     * Creates a new registered ASN with the specified name under the given subscription, resource group and peering.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void registeredAsnsCreateOrUpdateTest() throws ApiException {
        String resourceGroupName = null;
        String peeringName = null;
        String registeredAsnName = null;
        String subscriptionId = null;
        String apiVersion = null;
        PeeringRegisteredAsn registeredAsn = null;
        PeeringRegisteredAsn response = api.registeredAsnsCreateOrUpdate(resourceGroupName, peeringName, registeredAsnName, subscriptionId, apiVersion, registeredAsn);
        // TODO: test validations
    }

    /**
     * Deletes an existing registered ASN with the specified name under the given subscription, resource group and peering.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void registeredAsnsDeleteTest() throws ApiException {
        String resourceGroupName = null;
        String peeringName = null;
        String registeredAsnName = null;
        String subscriptionId = null;
        String apiVersion = null;
        api.registeredAsnsDelete(resourceGroupName, peeringName, registeredAsnName, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets an existing registered ASN with the specified name under the given subscription, resource group and peering.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void registeredAsnsGetTest() throws ApiException {
        String resourceGroupName = null;
        String peeringName = null;
        String registeredAsnName = null;
        String subscriptionId = null;
        String apiVersion = null;
        PeeringRegisteredAsn response = api.registeredAsnsGet(resourceGroupName, peeringName, registeredAsnName, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Lists all registered ASNs under the given subscription, resource group and peering.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void registeredAsnsListByPeeringTest() throws ApiException {
        String resourceGroupName = null;
        String peeringName = null;
        String subscriptionId = null;
        String apiVersion = null;
        PeeringRegisteredAsnListResult response = api.registeredAsnsListByPeering(resourceGroupName, peeringName, subscriptionId, apiVersion);
        // TODO: test validations
    }

}
