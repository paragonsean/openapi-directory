/*
 * PeeringManagementClient
 * APIs to manage Peering resources through the Azure Resource Manager.
 *
 * The version of the OpenAPI document: 2020-01-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.PeeringRegisteredPrefix;
import org.openapitools.client.model.PeeringRegisteredPrefixListResult;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PeeringRegisteredPrefixesApi
 */
@Disabled
public class PeeringRegisteredPrefixesApiTest {

    private final PeeringRegisteredPrefixesApi api = new PeeringRegisteredPrefixesApi();

    /**
     * Creates a new registered prefix with the specified name under the given subscription, resource group and peering.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void registeredPrefixesCreateOrUpdateTest() throws ApiException {
        String resourceGroupName = null;
        String peeringName = null;
        String registeredPrefixName = null;
        String subscriptionId = null;
        String apiVersion = null;
        PeeringRegisteredPrefix registeredPrefix = null;
        PeeringRegisteredPrefix response = api.registeredPrefixesCreateOrUpdate(resourceGroupName, peeringName, registeredPrefixName, subscriptionId, apiVersion, registeredPrefix);
        // TODO: test validations
    }

    /**
     * Deletes an existing registered prefix with the specified name under the given subscription, resource group and peering.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void registeredPrefixesDeleteTest() throws ApiException {
        String resourceGroupName = null;
        String peeringName = null;
        String registeredPrefixName = null;
        String subscriptionId = null;
        String apiVersion = null;
        api.registeredPrefixesDelete(resourceGroupName, peeringName, registeredPrefixName, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets an existing registered prefix with the specified name under the given subscription, resource group and peering.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void registeredPrefixesGetTest() throws ApiException {
        String resourceGroupName = null;
        String peeringName = null;
        String registeredPrefixName = null;
        String subscriptionId = null;
        String apiVersion = null;
        PeeringRegisteredPrefix response = api.registeredPrefixesGet(resourceGroupName, peeringName, registeredPrefixName, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Lists all registered prefixes under the given subscription, resource group and peering.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void registeredPrefixesListByPeeringTest() throws ApiException {
        String resourceGroupName = null;
        String peeringName = null;
        String subscriptionId = null;
        String apiVersion = null;
        PeeringRegisteredPrefixListResult response = api.registeredPrefixesListByPeering(resourceGroupName, peeringName, subscriptionId, apiVersion);
        // TODO: test validations
    }

}
