/**
 * PeeringManagementClient
 * APIs to manage Peering resources through the Azure Resource Manager.
 *
 * The version of the OpenAPI document: 2019-08-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PeeringServiceProperties model module.
 * @module model/PeeringServiceProperties
 * @version 2019-08-01-preview
 */
class PeeringServiceProperties {
    /**
     * Constructs a new <code>PeeringServiceProperties</code>.
     * The properties that define connectivity to the Peering Service.
     * @alias module:model/PeeringServiceProperties
     */
    constructor() { 
        
        PeeringServiceProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PeeringServiceProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PeeringServiceProperties} obj Optional instance to populate.
     * @return {module:model/PeeringServiceProperties} The populated <code>PeeringServiceProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PeeringServiceProperties();

            if (data.hasOwnProperty('peeringServiceLocation')) {
                obj['peeringServiceLocation'] = ApiClient.convertToType(data['peeringServiceLocation'], 'String');
            }
            if (data.hasOwnProperty('peeringServiceProvider')) {
                obj['peeringServiceProvider'] = ApiClient.convertToType(data['peeringServiceProvider'], 'String');
            }
            if (data.hasOwnProperty('provisioningState')) {
                obj['provisioningState'] = ApiClient.convertToType(data['provisioningState'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PeeringServiceProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PeeringServiceProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['peeringServiceLocation'] && !(typeof data['peeringServiceLocation'] === 'string' || data['peeringServiceLocation'] instanceof String)) {
            throw new Error("Expected the field `peeringServiceLocation` to be a primitive type in the JSON string but got " + data['peeringServiceLocation']);
        }
        // ensure the json data is a string
        if (data['peeringServiceProvider'] && !(typeof data['peeringServiceProvider'] === 'string' || data['peeringServiceProvider'] instanceof String)) {
            throw new Error("Expected the field `peeringServiceProvider` to be a primitive type in the JSON string but got " + data['peeringServiceProvider']);
        }
        // ensure the json data is a string
        if (data['provisioningState'] && !(typeof data['provisioningState'] === 'string' || data['provisioningState'] instanceof String)) {
            throw new Error("Expected the field `provisioningState` to be a primitive type in the JSON string but got " + data['provisioningState']);
        }

        return true;
    }


}



/**
 * The PeeringServiceLocation of the Customer.
 * @member {String} peeringServiceLocation
 */
PeeringServiceProperties.prototype['peeringServiceLocation'] = undefined;

/**
 * The MAPS Provider Name.
 * @member {String} peeringServiceProvider
 */
PeeringServiceProperties.prototype['peeringServiceProvider'] = undefined;

/**
 * The provisioning state of the resource.
 * @member {module:model/PeeringServiceProperties.ProvisioningStateEnum} provisioningState
 */
PeeringServiceProperties.prototype['provisioningState'] = undefined;





/**
 * Allowed values for the <code>provisioningState</code> property.
 * @enum {String}
 * @readonly
 */
PeeringServiceProperties['ProvisioningStateEnum'] = {

    /**
     * value: "Succeeded"
     * @const
     */
    "Succeeded": "Succeeded",

    /**
     * value: "Updating"
     * @const
     */
    "Updating": "Updating",

    /**
     * value: "Deleting"
     * @const
     */
    "Deleting": "Deleting",

    /**
     * value: "Failed"
     * @const
     */
    "Failed": "Failed"
};



export default PeeringServiceProperties;

