# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.bgp_session import BgpSession
from openapi_server import util


class DirectConnection(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bandwidth_in_mbps: int=None, bgp_session: BgpSession=None, connection_identifier: str=None, connection_state: str=None, peering_db_facility_id: int=None, provisioned_bandwidth_in_mbps: int=None, session_address_provider: str=None, use_for_peering_service: bool=None):
        """DirectConnection - a model defined in OpenAPI

        :param bandwidth_in_mbps: The bandwidth_in_mbps of this DirectConnection.
        :param bgp_session: The bgp_session of this DirectConnection.
        :param connection_identifier: The connection_identifier of this DirectConnection.
        :param connection_state: The connection_state of this DirectConnection.
        :param peering_db_facility_id: The peering_db_facility_id of this DirectConnection.
        :param provisioned_bandwidth_in_mbps: The provisioned_bandwidth_in_mbps of this DirectConnection.
        :param session_address_provider: The session_address_provider of this DirectConnection.
        :param use_for_peering_service: The use_for_peering_service of this DirectConnection.
        """
        self.openapi_types = {
            'bandwidth_in_mbps': int,
            'bgp_session': BgpSession,
            'connection_identifier': str,
            'connection_state': str,
            'peering_db_facility_id': int,
            'provisioned_bandwidth_in_mbps': int,
            'session_address_provider': str,
            'use_for_peering_service': bool
        }

        self.attribute_map = {
            'bandwidth_in_mbps': 'bandwidthInMbps',
            'bgp_session': 'bgpSession',
            'connection_identifier': 'connectionIdentifier',
            'connection_state': 'connectionState',
            'peering_db_facility_id': 'peeringDBFacilityId',
            'provisioned_bandwidth_in_mbps': 'provisionedBandwidthInMbps',
            'session_address_provider': 'sessionAddressProvider',
            'use_for_peering_service': 'useForPeeringService'
        }

        self._bandwidth_in_mbps = bandwidth_in_mbps
        self._bgp_session = bgp_session
        self._connection_identifier = connection_identifier
        self._connection_state = connection_state
        self._peering_db_facility_id = peering_db_facility_id
        self._provisioned_bandwidth_in_mbps = provisioned_bandwidth_in_mbps
        self._session_address_provider = session_address_provider
        self._use_for_peering_service = use_for_peering_service

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DirectConnection':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DirectConnection of this DirectConnection.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bandwidth_in_mbps(self):
        """Gets the bandwidth_in_mbps of this DirectConnection.

        The bandwidth of the connection.

        :return: The bandwidth_in_mbps of this DirectConnection.
        :rtype: int
        """
        return self._bandwidth_in_mbps

    @bandwidth_in_mbps.setter
    def bandwidth_in_mbps(self, bandwidth_in_mbps):
        """Sets the bandwidth_in_mbps of this DirectConnection.

        The bandwidth of the connection.

        :param bandwidth_in_mbps: The bandwidth_in_mbps of this DirectConnection.
        :type bandwidth_in_mbps: int
        """

        self._bandwidth_in_mbps = bandwidth_in_mbps

    @property
    def bgp_session(self):
        """Gets the bgp_session of this DirectConnection.


        :return: The bgp_session of this DirectConnection.
        :rtype: BgpSession
        """
        return self._bgp_session

    @bgp_session.setter
    def bgp_session(self, bgp_session):
        """Sets the bgp_session of this DirectConnection.


        :param bgp_session: The bgp_session of this DirectConnection.
        :type bgp_session: BgpSession
        """

        self._bgp_session = bgp_session

    @property
    def connection_identifier(self):
        """Gets the connection_identifier of this DirectConnection.

        The unique identifier (GUID) for the connection.

        :return: The connection_identifier of this DirectConnection.
        :rtype: str
        """
        return self._connection_identifier

    @connection_identifier.setter
    def connection_identifier(self, connection_identifier):
        """Sets the connection_identifier of this DirectConnection.

        The unique identifier (GUID) for the connection.

        :param connection_identifier: The connection_identifier of this DirectConnection.
        :type connection_identifier: str
        """

        self._connection_identifier = connection_identifier

    @property
    def connection_state(self):
        """Gets the connection_state of this DirectConnection.

        The state of the connection.

        :return: The connection_state of this DirectConnection.
        :rtype: str
        """
        return self._connection_state

    @connection_state.setter
    def connection_state(self, connection_state):
        """Sets the connection_state of this DirectConnection.

        The state of the connection.

        :param connection_state: The connection_state of this DirectConnection.
        :type connection_state: str
        """
        allowed_values = ["None", "PendingApproval", "Approved", "ProvisioningStarted", "ProvisioningFailed", "ProvisioningCompleted", "Validating", "Active"]  # noqa: E501
        if connection_state not in allowed_values:
            raise ValueError(
                "Invalid value for `connection_state` ({0}), must be one of {1}"
                .format(connection_state, allowed_values)
            )

        self._connection_state = connection_state

    @property
    def peering_db_facility_id(self):
        """Gets the peering_db_facility_id of this DirectConnection.

        The PeeringDB.com ID of the facility at which the connection has to be set up.

        :return: The peering_db_facility_id of this DirectConnection.
        :rtype: int
        """
        return self._peering_db_facility_id

    @peering_db_facility_id.setter
    def peering_db_facility_id(self, peering_db_facility_id):
        """Sets the peering_db_facility_id of this DirectConnection.

        The PeeringDB.com ID of the facility at which the connection has to be set up.

        :param peering_db_facility_id: The peering_db_facility_id of this DirectConnection.
        :type peering_db_facility_id: int
        """

        self._peering_db_facility_id = peering_db_facility_id

    @property
    def provisioned_bandwidth_in_mbps(self):
        """Gets the provisioned_bandwidth_in_mbps of this DirectConnection.

        The bandwidth that is actually provisioned.

        :return: The provisioned_bandwidth_in_mbps of this DirectConnection.
        :rtype: int
        """
        return self._provisioned_bandwidth_in_mbps

    @provisioned_bandwidth_in_mbps.setter
    def provisioned_bandwidth_in_mbps(self, provisioned_bandwidth_in_mbps):
        """Sets the provisioned_bandwidth_in_mbps of this DirectConnection.

        The bandwidth that is actually provisioned.

        :param provisioned_bandwidth_in_mbps: The provisioned_bandwidth_in_mbps of this DirectConnection.
        :type provisioned_bandwidth_in_mbps: int
        """

        self._provisioned_bandwidth_in_mbps = provisioned_bandwidth_in_mbps

    @property
    def session_address_provider(self):
        """Gets the session_address_provider of this DirectConnection.

        The field indicating if Microsoft provides session ip addresses.

        :return: The session_address_provider of this DirectConnection.
        :rtype: str
        """
        return self._session_address_provider

    @session_address_provider.setter
    def session_address_provider(self, session_address_provider):
        """Sets the session_address_provider of this DirectConnection.

        The field indicating if Microsoft provides session ip addresses.

        :param session_address_provider: The session_address_provider of this DirectConnection.
        :type session_address_provider: str
        """
        allowed_values = ["Microsoft", "Peer"]  # noqa: E501
        if session_address_provider not in allowed_values:
            raise ValueError(
                "Invalid value for `session_address_provider` ({0}), must be one of {1}"
                .format(session_address_provider, allowed_values)
            )

        self._session_address_provider = session_address_provider

    @property
    def use_for_peering_service(self):
        """Gets the use_for_peering_service of this DirectConnection.

        The flag that indicates whether or not the connection is used for peering service.

        :return: The use_for_peering_service of this DirectConnection.
        :rtype: bool
        """
        return self._use_for_peering_service

    @use_for_peering_service.setter
    def use_for_peering_service(self, use_for_peering_service):
        """Sets the use_for_peering_service of this DirectConnection.

        The flag that indicates whether or not the connection is used for peering service.

        :param use_for_peering_service: The use_for_peering_service of this DirectConnection.
        :type use_for_peering_service: bool
        """

        self._use_for_peering_service = use_for_peering_service
