/**
 * PeeringManagementClient
 * APIs to manage Peering resources through the Azure Resource Manager.
 *
 * The version of the OpenAPI document: 2019-08-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIExchangePeeringFacility.h
 *
 * The properties that define an exchange peering facility.
 */

#ifndef OAIExchangePeeringFacility_H
#define OAIExchangePeeringFacility_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIExchangePeeringFacility : public OAIObject {
public:
    OAIExchangePeeringFacility();
    OAIExchangePeeringFacility(QString json);
    ~OAIExchangePeeringFacility() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getBandwidthInMbps() const;
    void setBandwidthInMbps(const qint32 &bandwidth_in_mbps);
    bool is_bandwidth_in_mbps_Set() const;
    bool is_bandwidth_in_mbps_Valid() const;

    QString getExchangeName() const;
    void setExchangeName(const QString &exchange_name);
    bool is_exchange_name_Set() const;
    bool is_exchange_name_Valid() const;

    QString getFacilityIpv4Prefix() const;
    void setFacilityIpv4Prefix(const QString &facility_ipv4_prefix);
    bool is_facility_ipv4_prefix_Set() const;
    bool is_facility_ipv4_prefix_Valid() const;

    QString getFacilityIpv6Prefix() const;
    void setFacilityIpv6Prefix(const QString &facility_ipv6_prefix);
    bool is_facility_ipv6_prefix_Set() const;
    bool is_facility_ipv6_prefix_Valid() const;

    QString getMicrosoftIpv4Address() const;
    void setMicrosoftIpv4Address(const QString &microsoft_ipv4_address);
    bool is_microsoft_ipv4_address_Set() const;
    bool is_microsoft_ipv4_address_Valid() const;

    QString getMicrosoftIpv6Address() const;
    void setMicrosoftIpv6Address(const QString &microsoft_ipv6_address);
    bool is_microsoft_ipv6_address_Set() const;
    bool is_microsoft_ipv6_address_Valid() const;

    qint32 getPeeringDbFacilityId() const;
    void setPeeringDbFacilityId(const qint32 &peering_db_facility_id);
    bool is_peering_db_facility_id_Set() const;
    bool is_peering_db_facility_id_Valid() const;

    QString getPeeringDbFacilityLink() const;
    void setPeeringDbFacilityLink(const QString &peering_db_facility_link);
    bool is_peering_db_facility_link_Set() const;
    bool is_peering_db_facility_link_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_bandwidth_in_mbps;
    bool m_bandwidth_in_mbps_isSet;
    bool m_bandwidth_in_mbps_isValid;

    QString m_exchange_name;
    bool m_exchange_name_isSet;
    bool m_exchange_name_isValid;

    QString m_facility_ipv4_prefix;
    bool m_facility_ipv4_prefix_isSet;
    bool m_facility_ipv4_prefix_isValid;

    QString m_facility_ipv6_prefix;
    bool m_facility_ipv6_prefix_isSet;
    bool m_facility_ipv6_prefix_isValid;

    QString m_microsoft_ipv4_address;
    bool m_microsoft_ipv4_address_isSet;
    bool m_microsoft_ipv4_address_isValid;

    QString m_microsoft_ipv6_address;
    bool m_microsoft_ipv6_address_isSet;
    bool m_microsoft_ipv6_address_isValid;

    qint32 m_peering_db_facility_id;
    bool m_peering_db_facility_id_isSet;
    bool m_peering_db_facility_id_isValid;

    QString m_peering_db_facility_link;
    bool m_peering_db_facility_link_isSet;
    bool m_peering_db_facility_link_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIExchangePeeringFacility)

#endif // OAIExchangePeeringFacility_H
