/**
 * PeeringManagementClient
 * APIs to manage Peering resources through the Azure Resource Manager.
 *
 * The version of the OpenAPI document: 2019-08-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDirectConnection.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDirectConnection::OAIDirectConnection(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDirectConnection::OAIDirectConnection() {
    this->initializeModel();
}

OAIDirectConnection::~OAIDirectConnection() {}

void OAIDirectConnection::initializeModel() {

    m_bandwidth_in_mbps_isSet = false;
    m_bandwidth_in_mbps_isValid = false;

    m_bgp_session_isSet = false;
    m_bgp_session_isValid = false;

    m_connection_identifier_isSet = false;
    m_connection_identifier_isValid = false;

    m_connection_state_isSet = false;
    m_connection_state_isValid = false;

    m_peering_db_facility_id_isSet = false;
    m_peering_db_facility_id_isValid = false;

    m_provisioned_bandwidth_in_mbps_isSet = false;
    m_provisioned_bandwidth_in_mbps_isValid = false;

    m_session_address_provider_isSet = false;
    m_session_address_provider_isValid = false;

    m_use_for_peering_service_isSet = false;
    m_use_for_peering_service_isValid = false;
}

void OAIDirectConnection::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDirectConnection::fromJsonObject(QJsonObject json) {

    m_bandwidth_in_mbps_isValid = ::OpenAPI::fromJsonValue(m_bandwidth_in_mbps, json[QString("bandwidthInMbps")]);
    m_bandwidth_in_mbps_isSet = !json[QString("bandwidthInMbps")].isNull() && m_bandwidth_in_mbps_isValid;

    m_bgp_session_isValid = ::OpenAPI::fromJsonValue(m_bgp_session, json[QString("bgpSession")]);
    m_bgp_session_isSet = !json[QString("bgpSession")].isNull() && m_bgp_session_isValid;

    m_connection_identifier_isValid = ::OpenAPI::fromJsonValue(m_connection_identifier, json[QString("connectionIdentifier")]);
    m_connection_identifier_isSet = !json[QString("connectionIdentifier")].isNull() && m_connection_identifier_isValid;

    m_connection_state_isValid = ::OpenAPI::fromJsonValue(m_connection_state, json[QString("connectionState")]);
    m_connection_state_isSet = !json[QString("connectionState")].isNull() && m_connection_state_isValid;

    m_peering_db_facility_id_isValid = ::OpenAPI::fromJsonValue(m_peering_db_facility_id, json[QString("peeringDBFacilityId")]);
    m_peering_db_facility_id_isSet = !json[QString("peeringDBFacilityId")].isNull() && m_peering_db_facility_id_isValid;

    m_provisioned_bandwidth_in_mbps_isValid = ::OpenAPI::fromJsonValue(m_provisioned_bandwidth_in_mbps, json[QString("provisionedBandwidthInMbps")]);
    m_provisioned_bandwidth_in_mbps_isSet = !json[QString("provisionedBandwidthInMbps")].isNull() && m_provisioned_bandwidth_in_mbps_isValid;

    m_session_address_provider_isValid = ::OpenAPI::fromJsonValue(m_session_address_provider, json[QString("sessionAddressProvider")]);
    m_session_address_provider_isSet = !json[QString("sessionAddressProvider")].isNull() && m_session_address_provider_isValid;

    m_use_for_peering_service_isValid = ::OpenAPI::fromJsonValue(m_use_for_peering_service, json[QString("useForPeeringService")]);
    m_use_for_peering_service_isSet = !json[QString("useForPeeringService")].isNull() && m_use_for_peering_service_isValid;
}

QString OAIDirectConnection::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDirectConnection::asJsonObject() const {
    QJsonObject obj;
    if (m_bandwidth_in_mbps_isSet) {
        obj.insert(QString("bandwidthInMbps"), ::OpenAPI::toJsonValue(m_bandwidth_in_mbps));
    }
    if (m_bgp_session.isSet()) {
        obj.insert(QString("bgpSession"), ::OpenAPI::toJsonValue(m_bgp_session));
    }
    if (m_connection_identifier_isSet) {
        obj.insert(QString("connectionIdentifier"), ::OpenAPI::toJsonValue(m_connection_identifier));
    }
    if (m_connection_state_isSet) {
        obj.insert(QString("connectionState"), ::OpenAPI::toJsonValue(m_connection_state));
    }
    if (m_peering_db_facility_id_isSet) {
        obj.insert(QString("peeringDBFacilityId"), ::OpenAPI::toJsonValue(m_peering_db_facility_id));
    }
    if (m_provisioned_bandwidth_in_mbps_isSet) {
        obj.insert(QString("provisionedBandwidthInMbps"), ::OpenAPI::toJsonValue(m_provisioned_bandwidth_in_mbps));
    }
    if (m_session_address_provider_isSet) {
        obj.insert(QString("sessionAddressProvider"), ::OpenAPI::toJsonValue(m_session_address_provider));
    }
    if (m_use_for_peering_service_isSet) {
        obj.insert(QString("useForPeeringService"), ::OpenAPI::toJsonValue(m_use_for_peering_service));
    }
    return obj;
}

qint32 OAIDirectConnection::getBandwidthInMbps() const {
    return m_bandwidth_in_mbps;
}
void OAIDirectConnection::setBandwidthInMbps(const qint32 &bandwidth_in_mbps) {
    m_bandwidth_in_mbps = bandwidth_in_mbps;
    m_bandwidth_in_mbps_isSet = true;
}

bool OAIDirectConnection::is_bandwidth_in_mbps_Set() const{
    return m_bandwidth_in_mbps_isSet;
}

bool OAIDirectConnection::is_bandwidth_in_mbps_Valid() const{
    return m_bandwidth_in_mbps_isValid;
}

OAIBgpSession OAIDirectConnection::getBgpSession() const {
    return m_bgp_session;
}
void OAIDirectConnection::setBgpSession(const OAIBgpSession &bgp_session) {
    m_bgp_session = bgp_session;
    m_bgp_session_isSet = true;
}

bool OAIDirectConnection::is_bgp_session_Set() const{
    return m_bgp_session_isSet;
}

bool OAIDirectConnection::is_bgp_session_Valid() const{
    return m_bgp_session_isValid;
}

QString OAIDirectConnection::getConnectionIdentifier() const {
    return m_connection_identifier;
}
void OAIDirectConnection::setConnectionIdentifier(const QString &connection_identifier) {
    m_connection_identifier = connection_identifier;
    m_connection_identifier_isSet = true;
}

bool OAIDirectConnection::is_connection_identifier_Set() const{
    return m_connection_identifier_isSet;
}

bool OAIDirectConnection::is_connection_identifier_Valid() const{
    return m_connection_identifier_isValid;
}

QString OAIDirectConnection::getConnectionState() const {
    return m_connection_state;
}
void OAIDirectConnection::setConnectionState(const QString &connection_state) {
    m_connection_state = connection_state;
    m_connection_state_isSet = true;
}

bool OAIDirectConnection::is_connection_state_Set() const{
    return m_connection_state_isSet;
}

bool OAIDirectConnection::is_connection_state_Valid() const{
    return m_connection_state_isValid;
}

qint32 OAIDirectConnection::getPeeringDbFacilityId() const {
    return m_peering_db_facility_id;
}
void OAIDirectConnection::setPeeringDbFacilityId(const qint32 &peering_db_facility_id) {
    m_peering_db_facility_id = peering_db_facility_id;
    m_peering_db_facility_id_isSet = true;
}

bool OAIDirectConnection::is_peering_db_facility_id_Set() const{
    return m_peering_db_facility_id_isSet;
}

bool OAIDirectConnection::is_peering_db_facility_id_Valid() const{
    return m_peering_db_facility_id_isValid;
}

qint32 OAIDirectConnection::getProvisionedBandwidthInMbps() const {
    return m_provisioned_bandwidth_in_mbps;
}
void OAIDirectConnection::setProvisionedBandwidthInMbps(const qint32 &provisioned_bandwidth_in_mbps) {
    m_provisioned_bandwidth_in_mbps = provisioned_bandwidth_in_mbps;
    m_provisioned_bandwidth_in_mbps_isSet = true;
}

bool OAIDirectConnection::is_provisioned_bandwidth_in_mbps_Set() const{
    return m_provisioned_bandwidth_in_mbps_isSet;
}

bool OAIDirectConnection::is_provisioned_bandwidth_in_mbps_Valid() const{
    return m_provisioned_bandwidth_in_mbps_isValid;
}

QString OAIDirectConnection::getSessionAddressProvider() const {
    return m_session_address_provider;
}
void OAIDirectConnection::setSessionAddressProvider(const QString &session_address_provider) {
    m_session_address_provider = session_address_provider;
    m_session_address_provider_isSet = true;
}

bool OAIDirectConnection::is_session_address_provider_Set() const{
    return m_session_address_provider_isSet;
}

bool OAIDirectConnection::is_session_address_provider_Valid() const{
    return m_session_address_provider_isValid;
}

bool OAIDirectConnection::isUseForPeeringService() const {
    return m_use_for_peering_service;
}
void OAIDirectConnection::setUseForPeeringService(const bool &use_for_peering_service) {
    m_use_for_peering_service = use_for_peering_service;
    m_use_for_peering_service_isSet = true;
}

bool OAIDirectConnection::is_use_for_peering_service_Set() const{
    return m_use_for_peering_service_isSet;
}

bool OAIDirectConnection::is_use_for_peering_service_Valid() const{
    return m_use_for_peering_service_isValid;
}

bool OAIDirectConnection::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bandwidth_in_mbps_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bgp_session.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_connection_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_connection_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_peering_db_facility_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioned_bandwidth_in_mbps_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_session_address_provider_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_for_peering_service_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDirectConnection::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
