/**
 * PeeringManagementClient
 * APIs to manage Peering resources through the Azure Resource Manager.
 *
 * The version of the OpenAPI document: 2019-08-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPeeringServicePrefixProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPeeringServicePrefixProperties::OAIPeeringServicePrefixProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPeeringServicePrefixProperties::OAIPeeringServicePrefixProperties() {
    this->initializeModel();
}

OAIPeeringServicePrefixProperties::~OAIPeeringServicePrefixProperties() {}

void OAIPeeringServicePrefixProperties::initializeModel() {

    m_learned_type_isSet = false;
    m_learned_type_isValid = false;

    m_prefix_isSet = false;
    m_prefix_isValid = false;

    m_prefix_validation_state_isSet = false;
    m_prefix_validation_state_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;
}

void OAIPeeringServicePrefixProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPeeringServicePrefixProperties::fromJsonObject(QJsonObject json) {

    m_learned_type_isValid = ::OpenAPI::fromJsonValue(m_learned_type, json[QString("learnedType")]);
    m_learned_type_isSet = !json[QString("learnedType")].isNull() && m_learned_type_isValid;

    m_prefix_isValid = ::OpenAPI::fromJsonValue(m_prefix, json[QString("prefix")]);
    m_prefix_isSet = !json[QString("prefix")].isNull() && m_prefix_isValid;

    m_prefix_validation_state_isValid = ::OpenAPI::fromJsonValue(m_prefix_validation_state, json[QString("prefixValidationState")]);
    m_prefix_validation_state_isSet = !json[QString("prefixValidationState")].isNull() && m_prefix_validation_state_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;
}

QString OAIPeeringServicePrefixProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPeeringServicePrefixProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_learned_type_isSet) {
        obj.insert(QString("learnedType"), ::OpenAPI::toJsonValue(m_learned_type));
    }
    if (m_prefix_isSet) {
        obj.insert(QString("prefix"), ::OpenAPI::toJsonValue(m_prefix));
    }
    if (m_prefix_validation_state_isSet) {
        obj.insert(QString("prefixValidationState"), ::OpenAPI::toJsonValue(m_prefix_validation_state));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    return obj;
}

QString OAIPeeringServicePrefixProperties::getLearnedType() const {
    return m_learned_type;
}
void OAIPeeringServicePrefixProperties::setLearnedType(const QString &learned_type) {
    m_learned_type = learned_type;
    m_learned_type_isSet = true;
}

bool OAIPeeringServicePrefixProperties::is_learned_type_Set() const{
    return m_learned_type_isSet;
}

bool OAIPeeringServicePrefixProperties::is_learned_type_Valid() const{
    return m_learned_type_isValid;
}

QString OAIPeeringServicePrefixProperties::getPrefix() const {
    return m_prefix;
}
void OAIPeeringServicePrefixProperties::setPrefix(const QString &prefix) {
    m_prefix = prefix;
    m_prefix_isSet = true;
}

bool OAIPeeringServicePrefixProperties::is_prefix_Set() const{
    return m_prefix_isSet;
}

bool OAIPeeringServicePrefixProperties::is_prefix_Valid() const{
    return m_prefix_isValid;
}

QString OAIPeeringServicePrefixProperties::getPrefixValidationState() const {
    return m_prefix_validation_state;
}
void OAIPeeringServicePrefixProperties::setPrefixValidationState(const QString &prefix_validation_state) {
    m_prefix_validation_state = prefix_validation_state;
    m_prefix_validation_state_isSet = true;
}

bool OAIPeeringServicePrefixProperties::is_prefix_validation_state_Set() const{
    return m_prefix_validation_state_isSet;
}

bool OAIPeeringServicePrefixProperties::is_prefix_validation_state_Valid() const{
    return m_prefix_validation_state_isValid;
}

QString OAIPeeringServicePrefixProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIPeeringServicePrefixProperties::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIPeeringServicePrefixProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIPeeringServicePrefixProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

bool OAIPeeringServicePrefixProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_learned_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prefix_validation_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPeeringServicePrefixProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
