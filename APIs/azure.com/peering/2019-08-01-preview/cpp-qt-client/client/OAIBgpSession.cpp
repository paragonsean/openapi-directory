/**
 * PeeringManagementClient
 * APIs to manage Peering resources through the Azure Resource Manager.
 *
 * The version of the OpenAPI document: 2019-08-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBgpSession.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBgpSession::OAIBgpSession(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBgpSession::OAIBgpSession() {
    this->initializeModel();
}

OAIBgpSession::~OAIBgpSession() {}

void OAIBgpSession::initializeModel() {

    m_max_prefixes_advertised_v4_isSet = false;
    m_max_prefixes_advertised_v4_isValid = false;

    m_max_prefixes_advertised_v6_isSet = false;
    m_max_prefixes_advertised_v6_isValid = false;

    m_md5_authentication_key_isSet = false;
    m_md5_authentication_key_isValid = false;

    m_microsoft_session_ipv4_address_isSet = false;
    m_microsoft_session_ipv4_address_isValid = false;

    m_microsoft_session_ipv6_address_isSet = false;
    m_microsoft_session_ipv6_address_isValid = false;

    m_peer_session_ipv4_address_isSet = false;
    m_peer_session_ipv4_address_isValid = false;

    m_peer_session_ipv6_address_isSet = false;
    m_peer_session_ipv6_address_isValid = false;

    m_session_prefix_v4_isSet = false;
    m_session_prefix_v4_isValid = false;

    m_session_prefix_v6_isSet = false;
    m_session_prefix_v6_isValid = false;

    m_session_state_v4_isSet = false;
    m_session_state_v4_isValid = false;

    m_session_state_v6_isSet = false;
    m_session_state_v6_isValid = false;
}

void OAIBgpSession::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBgpSession::fromJsonObject(QJsonObject json) {

    m_max_prefixes_advertised_v4_isValid = ::OpenAPI::fromJsonValue(m_max_prefixes_advertised_v4, json[QString("maxPrefixesAdvertisedV4")]);
    m_max_prefixes_advertised_v4_isSet = !json[QString("maxPrefixesAdvertisedV4")].isNull() && m_max_prefixes_advertised_v4_isValid;

    m_max_prefixes_advertised_v6_isValid = ::OpenAPI::fromJsonValue(m_max_prefixes_advertised_v6, json[QString("maxPrefixesAdvertisedV6")]);
    m_max_prefixes_advertised_v6_isSet = !json[QString("maxPrefixesAdvertisedV6")].isNull() && m_max_prefixes_advertised_v6_isValid;

    m_md5_authentication_key_isValid = ::OpenAPI::fromJsonValue(m_md5_authentication_key, json[QString("md5AuthenticationKey")]);
    m_md5_authentication_key_isSet = !json[QString("md5AuthenticationKey")].isNull() && m_md5_authentication_key_isValid;

    m_microsoft_session_ipv4_address_isValid = ::OpenAPI::fromJsonValue(m_microsoft_session_ipv4_address, json[QString("microsoftSessionIPv4Address")]);
    m_microsoft_session_ipv4_address_isSet = !json[QString("microsoftSessionIPv4Address")].isNull() && m_microsoft_session_ipv4_address_isValid;

    m_microsoft_session_ipv6_address_isValid = ::OpenAPI::fromJsonValue(m_microsoft_session_ipv6_address, json[QString("microsoftSessionIPv6Address")]);
    m_microsoft_session_ipv6_address_isSet = !json[QString("microsoftSessionIPv6Address")].isNull() && m_microsoft_session_ipv6_address_isValid;

    m_peer_session_ipv4_address_isValid = ::OpenAPI::fromJsonValue(m_peer_session_ipv4_address, json[QString("peerSessionIPv4Address")]);
    m_peer_session_ipv4_address_isSet = !json[QString("peerSessionIPv4Address")].isNull() && m_peer_session_ipv4_address_isValid;

    m_peer_session_ipv6_address_isValid = ::OpenAPI::fromJsonValue(m_peer_session_ipv6_address, json[QString("peerSessionIPv6Address")]);
    m_peer_session_ipv6_address_isSet = !json[QString("peerSessionIPv6Address")].isNull() && m_peer_session_ipv6_address_isValid;

    m_session_prefix_v4_isValid = ::OpenAPI::fromJsonValue(m_session_prefix_v4, json[QString("sessionPrefixV4")]);
    m_session_prefix_v4_isSet = !json[QString("sessionPrefixV4")].isNull() && m_session_prefix_v4_isValid;

    m_session_prefix_v6_isValid = ::OpenAPI::fromJsonValue(m_session_prefix_v6, json[QString("sessionPrefixV6")]);
    m_session_prefix_v6_isSet = !json[QString("sessionPrefixV6")].isNull() && m_session_prefix_v6_isValid;

    m_session_state_v4_isValid = ::OpenAPI::fromJsonValue(m_session_state_v4, json[QString("sessionStateV4")]);
    m_session_state_v4_isSet = !json[QString("sessionStateV4")].isNull() && m_session_state_v4_isValid;

    m_session_state_v6_isValid = ::OpenAPI::fromJsonValue(m_session_state_v6, json[QString("sessionStateV6")]);
    m_session_state_v6_isSet = !json[QString("sessionStateV6")].isNull() && m_session_state_v6_isValid;
}

QString OAIBgpSession::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBgpSession::asJsonObject() const {
    QJsonObject obj;
    if (m_max_prefixes_advertised_v4_isSet) {
        obj.insert(QString("maxPrefixesAdvertisedV4"), ::OpenAPI::toJsonValue(m_max_prefixes_advertised_v4));
    }
    if (m_max_prefixes_advertised_v6_isSet) {
        obj.insert(QString("maxPrefixesAdvertisedV6"), ::OpenAPI::toJsonValue(m_max_prefixes_advertised_v6));
    }
    if (m_md5_authentication_key_isSet) {
        obj.insert(QString("md5AuthenticationKey"), ::OpenAPI::toJsonValue(m_md5_authentication_key));
    }
    if (m_microsoft_session_ipv4_address_isSet) {
        obj.insert(QString("microsoftSessionIPv4Address"), ::OpenAPI::toJsonValue(m_microsoft_session_ipv4_address));
    }
    if (m_microsoft_session_ipv6_address_isSet) {
        obj.insert(QString("microsoftSessionIPv6Address"), ::OpenAPI::toJsonValue(m_microsoft_session_ipv6_address));
    }
    if (m_peer_session_ipv4_address_isSet) {
        obj.insert(QString("peerSessionIPv4Address"), ::OpenAPI::toJsonValue(m_peer_session_ipv4_address));
    }
    if (m_peer_session_ipv6_address_isSet) {
        obj.insert(QString("peerSessionIPv6Address"), ::OpenAPI::toJsonValue(m_peer_session_ipv6_address));
    }
    if (m_session_prefix_v4_isSet) {
        obj.insert(QString("sessionPrefixV4"), ::OpenAPI::toJsonValue(m_session_prefix_v4));
    }
    if (m_session_prefix_v6_isSet) {
        obj.insert(QString("sessionPrefixV6"), ::OpenAPI::toJsonValue(m_session_prefix_v6));
    }
    if (m_session_state_v4_isSet) {
        obj.insert(QString("sessionStateV4"), ::OpenAPI::toJsonValue(m_session_state_v4));
    }
    if (m_session_state_v6_isSet) {
        obj.insert(QString("sessionStateV6"), ::OpenAPI::toJsonValue(m_session_state_v6));
    }
    return obj;
}

qint32 OAIBgpSession::getMaxPrefixesAdvertisedV4() const {
    return m_max_prefixes_advertised_v4;
}
void OAIBgpSession::setMaxPrefixesAdvertisedV4(const qint32 &max_prefixes_advertised_v4) {
    m_max_prefixes_advertised_v4 = max_prefixes_advertised_v4;
    m_max_prefixes_advertised_v4_isSet = true;
}

bool OAIBgpSession::is_max_prefixes_advertised_v4_Set() const{
    return m_max_prefixes_advertised_v4_isSet;
}

bool OAIBgpSession::is_max_prefixes_advertised_v4_Valid() const{
    return m_max_prefixes_advertised_v4_isValid;
}

qint32 OAIBgpSession::getMaxPrefixesAdvertisedV6() const {
    return m_max_prefixes_advertised_v6;
}
void OAIBgpSession::setMaxPrefixesAdvertisedV6(const qint32 &max_prefixes_advertised_v6) {
    m_max_prefixes_advertised_v6 = max_prefixes_advertised_v6;
    m_max_prefixes_advertised_v6_isSet = true;
}

bool OAIBgpSession::is_max_prefixes_advertised_v6_Set() const{
    return m_max_prefixes_advertised_v6_isSet;
}

bool OAIBgpSession::is_max_prefixes_advertised_v6_Valid() const{
    return m_max_prefixes_advertised_v6_isValid;
}

QString OAIBgpSession::getMd5AuthenticationKey() const {
    return m_md5_authentication_key;
}
void OAIBgpSession::setMd5AuthenticationKey(const QString &md5_authentication_key) {
    m_md5_authentication_key = md5_authentication_key;
    m_md5_authentication_key_isSet = true;
}

bool OAIBgpSession::is_md5_authentication_key_Set() const{
    return m_md5_authentication_key_isSet;
}

bool OAIBgpSession::is_md5_authentication_key_Valid() const{
    return m_md5_authentication_key_isValid;
}

QString OAIBgpSession::getMicrosoftSessionIpv4Address() const {
    return m_microsoft_session_ipv4_address;
}
void OAIBgpSession::setMicrosoftSessionIpv4Address(const QString &microsoft_session_ipv4_address) {
    m_microsoft_session_ipv4_address = microsoft_session_ipv4_address;
    m_microsoft_session_ipv4_address_isSet = true;
}

bool OAIBgpSession::is_microsoft_session_ipv4_address_Set() const{
    return m_microsoft_session_ipv4_address_isSet;
}

bool OAIBgpSession::is_microsoft_session_ipv4_address_Valid() const{
    return m_microsoft_session_ipv4_address_isValid;
}

QString OAIBgpSession::getMicrosoftSessionIpv6Address() const {
    return m_microsoft_session_ipv6_address;
}
void OAIBgpSession::setMicrosoftSessionIpv6Address(const QString &microsoft_session_ipv6_address) {
    m_microsoft_session_ipv6_address = microsoft_session_ipv6_address;
    m_microsoft_session_ipv6_address_isSet = true;
}

bool OAIBgpSession::is_microsoft_session_ipv6_address_Set() const{
    return m_microsoft_session_ipv6_address_isSet;
}

bool OAIBgpSession::is_microsoft_session_ipv6_address_Valid() const{
    return m_microsoft_session_ipv6_address_isValid;
}

QString OAIBgpSession::getPeerSessionIpv4Address() const {
    return m_peer_session_ipv4_address;
}
void OAIBgpSession::setPeerSessionIpv4Address(const QString &peer_session_ipv4_address) {
    m_peer_session_ipv4_address = peer_session_ipv4_address;
    m_peer_session_ipv4_address_isSet = true;
}

bool OAIBgpSession::is_peer_session_ipv4_address_Set() const{
    return m_peer_session_ipv4_address_isSet;
}

bool OAIBgpSession::is_peer_session_ipv4_address_Valid() const{
    return m_peer_session_ipv4_address_isValid;
}

QString OAIBgpSession::getPeerSessionIpv6Address() const {
    return m_peer_session_ipv6_address;
}
void OAIBgpSession::setPeerSessionIpv6Address(const QString &peer_session_ipv6_address) {
    m_peer_session_ipv6_address = peer_session_ipv6_address;
    m_peer_session_ipv6_address_isSet = true;
}

bool OAIBgpSession::is_peer_session_ipv6_address_Set() const{
    return m_peer_session_ipv6_address_isSet;
}

bool OAIBgpSession::is_peer_session_ipv6_address_Valid() const{
    return m_peer_session_ipv6_address_isValid;
}

QString OAIBgpSession::getSessionPrefixV4() const {
    return m_session_prefix_v4;
}
void OAIBgpSession::setSessionPrefixV4(const QString &session_prefix_v4) {
    m_session_prefix_v4 = session_prefix_v4;
    m_session_prefix_v4_isSet = true;
}

bool OAIBgpSession::is_session_prefix_v4_Set() const{
    return m_session_prefix_v4_isSet;
}

bool OAIBgpSession::is_session_prefix_v4_Valid() const{
    return m_session_prefix_v4_isValid;
}

QString OAIBgpSession::getSessionPrefixV6() const {
    return m_session_prefix_v6;
}
void OAIBgpSession::setSessionPrefixV6(const QString &session_prefix_v6) {
    m_session_prefix_v6 = session_prefix_v6;
    m_session_prefix_v6_isSet = true;
}

bool OAIBgpSession::is_session_prefix_v6_Set() const{
    return m_session_prefix_v6_isSet;
}

bool OAIBgpSession::is_session_prefix_v6_Valid() const{
    return m_session_prefix_v6_isValid;
}

QString OAIBgpSession::getSessionStateV4() const {
    return m_session_state_v4;
}
void OAIBgpSession::setSessionStateV4(const QString &session_state_v4) {
    m_session_state_v4 = session_state_v4;
    m_session_state_v4_isSet = true;
}

bool OAIBgpSession::is_session_state_v4_Set() const{
    return m_session_state_v4_isSet;
}

bool OAIBgpSession::is_session_state_v4_Valid() const{
    return m_session_state_v4_isValid;
}

QString OAIBgpSession::getSessionStateV6() const {
    return m_session_state_v6;
}
void OAIBgpSession::setSessionStateV6(const QString &session_state_v6) {
    m_session_state_v6 = session_state_v6;
    m_session_state_v6_isSet = true;
}

bool OAIBgpSession::is_session_state_v6_Set() const{
    return m_session_state_v6_isSet;
}

bool OAIBgpSession::is_session_state_v6_Valid() const{
    return m_session_state_v6_isValid;
}

bool OAIBgpSession::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_max_prefixes_advertised_v4_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_prefixes_advertised_v6_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_md5_authentication_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_microsoft_session_ipv4_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_microsoft_session_ipv6_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_peer_session_ipv4_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_peer_session_ipv6_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_session_prefix_v4_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_session_prefix_v6_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_session_state_v4_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_session_state_v6_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBgpSession::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
