/**
 * PeeringManagementClient
 * APIs to manage Peering resources through the Azure Resource Manager.
 *
 * The version of the OpenAPI document: 2019-08-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPeeringsApi_H
#define OAI_OAIPeeringsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIErrorResponse.h"
#include "OAIPeering.h"
#include "OAIPeeringListResult.h"
#include "OAIResourceTags.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPeeringsApi : public QObject {
    Q_OBJECT

public:
    OAIPeeringsApi(const int timeOut = 0);
    ~OAIPeeringsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  peering_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  peering OAIPeering [required]
    */
    virtual void peeringsCreateOrUpdate(const QString &resource_group_name, const QString &peering_name, const QString &subscription_id, const QString &api_version, const OAIPeering &peering);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  peering_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void peeringsDelete(const QString &resource_group_name, const QString &peering_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  peering_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void peeringsGet(const QString &resource_group_name, const QString &peering_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void peeringsListByResourceGroup(const QString &resource_group_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void peeringsListBySubscription(const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  peering_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  tags OAIResourceTags [required]
    */
    virtual void peeringsUpdate(const QString &resource_group_name, const QString &peering_name, const QString &subscription_id, const QString &api_version, const OAIResourceTags &tags);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void peeringsCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void peeringsDeleteCallback(OAIHttpRequestWorker *worker);
    void peeringsGetCallback(OAIHttpRequestWorker *worker);
    void peeringsListByResourceGroupCallback(OAIHttpRequestWorker *worker);
    void peeringsListBySubscriptionCallback(OAIHttpRequestWorker *worker);
    void peeringsUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void peeringsCreateOrUpdateSignal(OAIPeering summary);
    void peeringsDeleteSignal();
    void peeringsGetSignal(OAIPeering summary);
    void peeringsListByResourceGroupSignal(OAIPeeringListResult summary);
    void peeringsListBySubscriptionSignal(OAIPeeringListResult summary);
    void peeringsUpdateSignal(OAIPeering summary);


    void peeringsCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIPeering summary);
    void peeringsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void peeringsGetSignalFull(OAIHttpRequestWorker *worker, OAIPeering summary);
    void peeringsListByResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAIPeeringListResult summary);
    void peeringsListBySubscriptionSignalFull(OAIHttpRequestWorker *worker, OAIPeeringListResult summary);
    void peeringsUpdateSignalFull(OAIHttpRequestWorker *worker, OAIPeering summary);

    Q_DECL_DEPRECATED_X("Use peeringsCreateOrUpdateSignalError() instead")
    void peeringsCreateOrUpdateSignalE(OAIPeering summary, QNetworkReply::NetworkError error_type, QString error_str);
    void peeringsCreateOrUpdateSignalError(OAIPeering summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use peeringsDeleteSignalError() instead")
    void peeringsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void peeringsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use peeringsGetSignalError() instead")
    void peeringsGetSignalE(OAIPeering summary, QNetworkReply::NetworkError error_type, QString error_str);
    void peeringsGetSignalError(OAIPeering summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use peeringsListByResourceGroupSignalError() instead")
    void peeringsListByResourceGroupSignalE(OAIPeeringListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void peeringsListByResourceGroupSignalError(OAIPeeringListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use peeringsListBySubscriptionSignalError() instead")
    void peeringsListBySubscriptionSignalE(OAIPeeringListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void peeringsListBySubscriptionSignalError(OAIPeeringListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use peeringsUpdateSignalError() instead")
    void peeringsUpdateSignalE(OAIPeering summary, QNetworkReply::NetworkError error_type, QString error_str);
    void peeringsUpdateSignalError(OAIPeering summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use peeringsCreateOrUpdateSignalErrorFull() instead")
    void peeringsCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void peeringsCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use peeringsDeleteSignalErrorFull() instead")
    void peeringsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void peeringsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use peeringsGetSignalErrorFull() instead")
    void peeringsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void peeringsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use peeringsListByResourceGroupSignalErrorFull() instead")
    void peeringsListByResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void peeringsListByResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use peeringsListBySubscriptionSignalErrorFull() instead")
    void peeringsListBySubscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void peeringsListBySubscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use peeringsUpdateSignalErrorFull() instead")
    void peeringsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void peeringsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
