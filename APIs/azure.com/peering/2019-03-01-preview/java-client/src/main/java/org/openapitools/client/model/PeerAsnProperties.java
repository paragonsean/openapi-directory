/*
 * PeeringManagementClient
 * APIs to manage Peering resources through the Azure Resource Manager.
 *
 * The version of the OpenAPI document: 2019-03-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ContactInfo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The properties that define a peer&#39;s ASN.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:11:00.024957-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PeerAsnProperties {
  public static final String SERIALIZED_NAME_PEER_ASN = "peerAsn";
  @SerializedName(SERIALIZED_NAME_PEER_ASN)
  private Integer peerAsn;

  public static final String SERIALIZED_NAME_PEER_CONTACT_INFO = "peerContactInfo";
  @SerializedName(SERIALIZED_NAME_PEER_CONTACT_INFO)
  private ContactInfo peerContactInfo;

  public static final String SERIALIZED_NAME_PEER_NAME = "peerName";
  @SerializedName(SERIALIZED_NAME_PEER_NAME)
  private String peerName;

  /**
   * The validation state of the ASN associated with the peer.
   */
  @JsonAdapter(ValidationStateEnum.Adapter.class)
  public enum ValidationStateEnum {
    NONE("None"),
    
    PENDING("Pending"),
    
    APPROVED("Approved"),
    
    FAILED("Failed");

    private String value;

    ValidationStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ValidationStateEnum fromValue(String value) {
      for (ValidationStateEnum b : ValidationStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ValidationStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ValidationStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ValidationStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ValidationStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ValidationStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_VALIDATION_STATE = "validationState";
  @SerializedName(SERIALIZED_NAME_VALIDATION_STATE)
  private ValidationStateEnum validationState;

  public PeerAsnProperties() {
  }

  public PeerAsnProperties peerAsn(Integer peerAsn) {
    this.peerAsn = peerAsn;
    return this;
  }

  /**
   * The Autonomous System Number (ASN) of the peer.
   * @return peerAsn
   */
  @javax.annotation.Nullable
  public Integer getPeerAsn() {
    return peerAsn;
  }

  public void setPeerAsn(Integer peerAsn) {
    this.peerAsn = peerAsn;
  }


  public PeerAsnProperties peerContactInfo(ContactInfo peerContactInfo) {
    this.peerContactInfo = peerContactInfo;
    return this;
  }

  /**
   * Get peerContactInfo
   * @return peerContactInfo
   */
  @javax.annotation.Nullable
  public ContactInfo getPeerContactInfo() {
    return peerContactInfo;
  }

  public void setPeerContactInfo(ContactInfo peerContactInfo) {
    this.peerContactInfo = peerContactInfo;
  }


  public PeerAsnProperties peerName(String peerName) {
    this.peerName = peerName;
    return this;
  }

  /**
   * The name of the peer.
   * @return peerName
   */
  @javax.annotation.Nullable
  public String getPeerName() {
    return peerName;
  }

  public void setPeerName(String peerName) {
    this.peerName = peerName;
  }


  public PeerAsnProperties validationState(ValidationStateEnum validationState) {
    this.validationState = validationState;
    return this;
  }

  /**
   * The validation state of the ASN associated with the peer.
   * @return validationState
   */
  @javax.annotation.Nullable
  public ValidationStateEnum getValidationState() {
    return validationState;
  }

  public void setValidationState(ValidationStateEnum validationState) {
    this.validationState = validationState;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PeerAsnProperties peerAsnProperties = (PeerAsnProperties) o;
    return Objects.equals(this.peerAsn, peerAsnProperties.peerAsn) &&
        Objects.equals(this.peerContactInfo, peerAsnProperties.peerContactInfo) &&
        Objects.equals(this.peerName, peerAsnProperties.peerName) &&
        Objects.equals(this.validationState, peerAsnProperties.validationState);
  }

  @Override
  public int hashCode() {
    return Objects.hash(peerAsn, peerContactInfo, peerName, validationState);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PeerAsnProperties {\n");
    sb.append("    peerAsn: ").append(toIndentedString(peerAsn)).append("\n");
    sb.append("    peerContactInfo: ").append(toIndentedString(peerContactInfo)).append("\n");
    sb.append("    peerName: ").append(toIndentedString(peerName)).append("\n");
    sb.append("    validationState: ").append(toIndentedString(validationState)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("peerAsn");
    openapiFields.add("peerContactInfo");
    openapiFields.add("peerName");
    openapiFields.add("validationState");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PeerAsnProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PeerAsnProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PeerAsnProperties is not found in the empty JSON string", PeerAsnProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PeerAsnProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PeerAsnProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `peerContactInfo`
      if (jsonObj.get("peerContactInfo") != null && !jsonObj.get("peerContactInfo").isJsonNull()) {
        ContactInfo.validateJsonElement(jsonObj.get("peerContactInfo"));
      }
      if ((jsonObj.get("peerName") != null && !jsonObj.get("peerName").isJsonNull()) && !jsonObj.get("peerName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `peerName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("peerName").toString()));
      }
      if ((jsonObj.get("validationState") != null && !jsonObj.get("validationState").isJsonNull()) && !jsonObj.get("validationState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `validationState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("validationState").toString()));
      }
      // validate the optional field `validationState`
      if (jsonObj.get("validationState") != null && !jsonObj.get("validationState").isJsonNull()) {
        ValidationStateEnum.validateJsonElement(jsonObj.get("validationState"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PeerAsnProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PeerAsnProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PeerAsnProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PeerAsnProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<PeerAsnProperties>() {
           @Override
           public void write(JsonWriter out, PeerAsnProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PeerAsnProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PeerAsnProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PeerAsnProperties
   * @throws IOException if the JSON string is invalid with respect to PeerAsnProperties
   */
  public static PeerAsnProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PeerAsnProperties.class);
  }

  /**
   * Convert an instance of PeerAsnProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

