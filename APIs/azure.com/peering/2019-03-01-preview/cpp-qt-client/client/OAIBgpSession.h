/**
 * PeeringManagementClient
 * APIs to manage Peering resources through the Azure Resource Manager.
 *
 * The version of the OpenAPI document: 2019-03-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIBgpSession.h
 *
 * The properties that define a BGP session.
 */

#ifndef OAIBgpSession_H
#define OAIBgpSession_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIBgpSession : public OAIObject {
public:
    OAIBgpSession();
    OAIBgpSession(QString json);
    ~OAIBgpSession() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getMaxPrefixesAdvertisedV4() const;
    void setMaxPrefixesAdvertisedV4(const qint32 &max_prefixes_advertised_v4);
    bool is_max_prefixes_advertised_v4_Set() const;
    bool is_max_prefixes_advertised_v4_Valid() const;

    qint32 getMaxPrefixesAdvertisedV6() const;
    void setMaxPrefixesAdvertisedV6(const qint32 &max_prefixes_advertised_v6);
    bool is_max_prefixes_advertised_v6_Set() const;
    bool is_max_prefixes_advertised_v6_Valid() const;

    QString getMd5AuthenticationKey() const;
    void setMd5AuthenticationKey(const QString &md5_authentication_key);
    bool is_md5_authentication_key_Set() const;
    bool is_md5_authentication_key_Valid() const;

    QString getMicrosoftSessionIpv4Address() const;
    void setMicrosoftSessionIpv4Address(const QString &microsoft_session_ipv4_address);
    bool is_microsoft_session_ipv4_address_Set() const;
    bool is_microsoft_session_ipv4_address_Valid() const;

    QString getMicrosoftSessionIpv6Address() const;
    void setMicrosoftSessionIpv6Address(const QString &microsoft_session_ipv6_address);
    bool is_microsoft_session_ipv6_address_Set() const;
    bool is_microsoft_session_ipv6_address_Valid() const;

    QString getPeerSessionIpv4Address() const;
    void setPeerSessionIpv4Address(const QString &peer_session_ipv4_address);
    bool is_peer_session_ipv4_address_Set() const;
    bool is_peer_session_ipv4_address_Valid() const;

    QString getPeerSessionIpv6Address() const;
    void setPeerSessionIpv6Address(const QString &peer_session_ipv6_address);
    bool is_peer_session_ipv6_address_Set() const;
    bool is_peer_session_ipv6_address_Valid() const;

    QString getSessionPrefixV4() const;
    void setSessionPrefixV4(const QString &session_prefix_v4);
    bool is_session_prefix_v4_Set() const;
    bool is_session_prefix_v4_Valid() const;

    QString getSessionPrefixV6() const;
    void setSessionPrefixV6(const QString &session_prefix_v6);
    bool is_session_prefix_v6_Set() const;
    bool is_session_prefix_v6_Valid() const;

    QString getSessionStateV4() const;
    void setSessionStateV4(const QString &session_state_v4);
    bool is_session_state_v4_Set() const;
    bool is_session_state_v4_Valid() const;

    QString getSessionStateV6() const;
    void setSessionStateV6(const QString &session_state_v6);
    bool is_session_state_v6_Set() const;
    bool is_session_state_v6_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_max_prefixes_advertised_v4;
    bool m_max_prefixes_advertised_v4_isSet;
    bool m_max_prefixes_advertised_v4_isValid;

    qint32 m_max_prefixes_advertised_v6;
    bool m_max_prefixes_advertised_v6_isSet;
    bool m_max_prefixes_advertised_v6_isValid;

    QString m_md5_authentication_key;
    bool m_md5_authentication_key_isSet;
    bool m_md5_authentication_key_isValid;

    QString m_microsoft_session_ipv4_address;
    bool m_microsoft_session_ipv4_address_isSet;
    bool m_microsoft_session_ipv4_address_isValid;

    QString m_microsoft_session_ipv6_address;
    bool m_microsoft_session_ipv6_address_isSet;
    bool m_microsoft_session_ipv6_address_isValid;

    QString m_peer_session_ipv4_address;
    bool m_peer_session_ipv4_address_isSet;
    bool m_peer_session_ipv4_address_isValid;

    QString m_peer_session_ipv6_address;
    bool m_peer_session_ipv6_address_isSet;
    bool m_peer_session_ipv6_address_isValid;

    QString m_session_prefix_v4;
    bool m_session_prefix_v4_isSet;
    bool m_session_prefix_v4_isValid;

    QString m_session_prefix_v6;
    bool m_session_prefix_v6_isSet;
    bool m_session_prefix_v6_isValid;

    QString m_session_state_v4;
    bool m_session_state_v4_isSet;
    bool m_session_state_v4_isValid;

    QString m_session_state_v6;
    bool m_session_state_v6_isSet;
    bool m_session_state_v6_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIBgpSession)

#endif // OAIBgpSession_H
