/**
 * PeeringManagementClient
 * APIs to manage Peering resources through the Azure Resource Manager.
 *
 * The version of the OpenAPI document: 2019-03-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPeeringPropertiesDirect.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPeeringPropertiesDirect::OAIPeeringPropertiesDirect(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPeeringPropertiesDirect::OAIPeeringPropertiesDirect() {
    this->initializeModel();
}

OAIPeeringPropertiesDirect::~OAIPeeringPropertiesDirect() {}

void OAIPeeringPropertiesDirect::initializeModel() {

    m_connections_isSet = false;
    m_connections_isValid = false;

    m_peer_asn_isSet = false;
    m_peer_asn_isValid = false;

    m_use_for_peering_service_isSet = false;
    m_use_for_peering_service_isValid = false;
}

void OAIPeeringPropertiesDirect::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPeeringPropertiesDirect::fromJsonObject(QJsonObject json) {

    m_connections_isValid = ::OpenAPI::fromJsonValue(m_connections, json[QString("connections")]);
    m_connections_isSet = !json[QString("connections")].isNull() && m_connections_isValid;

    m_peer_asn_isValid = ::OpenAPI::fromJsonValue(m_peer_asn, json[QString("peerAsn")]);
    m_peer_asn_isSet = !json[QString("peerAsn")].isNull() && m_peer_asn_isValid;

    m_use_for_peering_service_isValid = ::OpenAPI::fromJsonValue(m_use_for_peering_service, json[QString("useForPeeringService")]);
    m_use_for_peering_service_isSet = !json[QString("useForPeeringService")].isNull() && m_use_for_peering_service_isValid;
}

QString OAIPeeringPropertiesDirect::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPeeringPropertiesDirect::asJsonObject() const {
    QJsonObject obj;
    if (m_connections.size() > 0) {
        obj.insert(QString("connections"), ::OpenAPI::toJsonValue(m_connections));
    }
    if (m_peer_asn.isSet()) {
        obj.insert(QString("peerAsn"), ::OpenAPI::toJsonValue(m_peer_asn));
    }
    if (m_use_for_peering_service_isSet) {
        obj.insert(QString("useForPeeringService"), ::OpenAPI::toJsonValue(m_use_for_peering_service));
    }
    return obj;
}

QList<OAIDirectConnection> OAIPeeringPropertiesDirect::getConnections() const {
    return m_connections;
}
void OAIPeeringPropertiesDirect::setConnections(const QList<OAIDirectConnection> &connections) {
    m_connections = connections;
    m_connections_isSet = true;
}

bool OAIPeeringPropertiesDirect::is_connections_Set() const{
    return m_connections_isSet;
}

bool OAIPeeringPropertiesDirect::is_connections_Valid() const{
    return m_connections_isValid;
}

OAISubResource OAIPeeringPropertiesDirect::getPeerAsn() const {
    return m_peer_asn;
}
void OAIPeeringPropertiesDirect::setPeerAsn(const OAISubResource &peer_asn) {
    m_peer_asn = peer_asn;
    m_peer_asn_isSet = true;
}

bool OAIPeeringPropertiesDirect::is_peer_asn_Set() const{
    return m_peer_asn_isSet;
}

bool OAIPeeringPropertiesDirect::is_peer_asn_Valid() const{
    return m_peer_asn_isValid;
}

bool OAIPeeringPropertiesDirect::isUseForPeeringService() const {
    return m_use_for_peering_service;
}
void OAIPeeringPropertiesDirect::setUseForPeeringService(const bool &use_for_peering_service) {
    m_use_for_peering_service = use_for_peering_service;
    m_use_for_peering_service_isSet = true;
}

bool OAIPeeringPropertiesDirect::is_use_for_peering_service_Set() const{
    return m_use_for_peering_service_isSet;
}

bool OAIPeeringPropertiesDirect::is_use_for_peering_service_Valid() const{
    return m_use_for_peering_service_isValid;
}

bool OAIPeeringPropertiesDirect::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_connections.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_peer_asn.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_for_peering_service_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPeeringPropertiesDirect::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
