# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BgpSession(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, max_prefixes_advertised_v4: int=None, max_prefixes_advertised_v6: int=None, md5_authentication_key: str=None, microsoft_session_ipv4_address: str=None, microsoft_session_ipv6_address: str=None, peer_session_ipv4_address: str=None, peer_session_ipv6_address: str=None, session_prefix_v4: str=None, session_prefix_v6: str=None, session_state_v4: str=None, session_state_v6: str=None):
        """BgpSession - a model defined in OpenAPI

        :param max_prefixes_advertised_v4: The max_prefixes_advertised_v4 of this BgpSession.
        :param max_prefixes_advertised_v6: The max_prefixes_advertised_v6 of this BgpSession.
        :param md5_authentication_key: The md5_authentication_key of this BgpSession.
        :param microsoft_session_ipv4_address: The microsoft_session_ipv4_address of this BgpSession.
        :param microsoft_session_ipv6_address: The microsoft_session_ipv6_address of this BgpSession.
        :param peer_session_ipv4_address: The peer_session_ipv4_address of this BgpSession.
        :param peer_session_ipv6_address: The peer_session_ipv6_address of this BgpSession.
        :param session_prefix_v4: The session_prefix_v4 of this BgpSession.
        :param session_prefix_v6: The session_prefix_v6 of this BgpSession.
        :param session_state_v4: The session_state_v4 of this BgpSession.
        :param session_state_v6: The session_state_v6 of this BgpSession.
        """
        self.openapi_types = {
            'max_prefixes_advertised_v4': int,
            'max_prefixes_advertised_v6': int,
            'md5_authentication_key': str,
            'microsoft_session_ipv4_address': str,
            'microsoft_session_ipv6_address': str,
            'peer_session_ipv4_address': str,
            'peer_session_ipv6_address': str,
            'session_prefix_v4': str,
            'session_prefix_v6': str,
            'session_state_v4': str,
            'session_state_v6': str
        }

        self.attribute_map = {
            'max_prefixes_advertised_v4': 'maxPrefixesAdvertisedV4',
            'max_prefixes_advertised_v6': 'maxPrefixesAdvertisedV6',
            'md5_authentication_key': 'md5AuthenticationKey',
            'microsoft_session_ipv4_address': 'microsoftSessionIPv4Address',
            'microsoft_session_ipv6_address': 'microsoftSessionIPv6Address',
            'peer_session_ipv4_address': 'peerSessionIPv4Address',
            'peer_session_ipv6_address': 'peerSessionIPv6Address',
            'session_prefix_v4': 'sessionPrefixV4',
            'session_prefix_v6': 'sessionPrefixV6',
            'session_state_v4': 'sessionStateV4',
            'session_state_v6': 'sessionStateV6'
        }

        self._max_prefixes_advertised_v4 = max_prefixes_advertised_v4
        self._max_prefixes_advertised_v6 = max_prefixes_advertised_v6
        self._md5_authentication_key = md5_authentication_key
        self._microsoft_session_ipv4_address = microsoft_session_ipv4_address
        self._microsoft_session_ipv6_address = microsoft_session_ipv6_address
        self._peer_session_ipv4_address = peer_session_ipv4_address
        self._peer_session_ipv6_address = peer_session_ipv6_address
        self._session_prefix_v4 = session_prefix_v4
        self._session_prefix_v6 = session_prefix_v6
        self._session_state_v4 = session_state_v4
        self._session_state_v6 = session_state_v6

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BgpSession':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BgpSession of this BgpSession.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def max_prefixes_advertised_v4(self):
        """Gets the max_prefixes_advertised_v4 of this BgpSession.

        The maximum number of prefixes advertised over the IPv4 session.

        :return: The max_prefixes_advertised_v4 of this BgpSession.
        :rtype: int
        """
        return self._max_prefixes_advertised_v4

    @max_prefixes_advertised_v4.setter
    def max_prefixes_advertised_v4(self, max_prefixes_advertised_v4):
        """Sets the max_prefixes_advertised_v4 of this BgpSession.

        The maximum number of prefixes advertised over the IPv4 session.

        :param max_prefixes_advertised_v4: The max_prefixes_advertised_v4 of this BgpSession.
        :type max_prefixes_advertised_v4: int
        """

        self._max_prefixes_advertised_v4 = max_prefixes_advertised_v4

    @property
    def max_prefixes_advertised_v6(self):
        """Gets the max_prefixes_advertised_v6 of this BgpSession.

        The maximum number of prefixes advertised over the IPv6 session.

        :return: The max_prefixes_advertised_v6 of this BgpSession.
        :rtype: int
        """
        return self._max_prefixes_advertised_v6

    @max_prefixes_advertised_v6.setter
    def max_prefixes_advertised_v6(self, max_prefixes_advertised_v6):
        """Sets the max_prefixes_advertised_v6 of this BgpSession.

        The maximum number of prefixes advertised over the IPv6 session.

        :param max_prefixes_advertised_v6: The max_prefixes_advertised_v6 of this BgpSession.
        :type max_prefixes_advertised_v6: int
        """

        self._max_prefixes_advertised_v6 = max_prefixes_advertised_v6

    @property
    def md5_authentication_key(self):
        """Gets the md5_authentication_key of this BgpSession.

        The MD5 authentication key of the session.

        :return: The md5_authentication_key of this BgpSession.
        :rtype: str
        """
        return self._md5_authentication_key

    @md5_authentication_key.setter
    def md5_authentication_key(self, md5_authentication_key):
        """Sets the md5_authentication_key of this BgpSession.

        The MD5 authentication key of the session.

        :param md5_authentication_key: The md5_authentication_key of this BgpSession.
        :type md5_authentication_key: str
        """

        self._md5_authentication_key = md5_authentication_key

    @property
    def microsoft_session_ipv4_address(self):
        """Gets the microsoft_session_ipv4_address of this BgpSession.

        The IPv4 session address on Microsoft's end.

        :return: The microsoft_session_ipv4_address of this BgpSession.
        :rtype: str
        """
        return self._microsoft_session_ipv4_address

    @microsoft_session_ipv4_address.setter
    def microsoft_session_ipv4_address(self, microsoft_session_ipv4_address):
        """Sets the microsoft_session_ipv4_address of this BgpSession.

        The IPv4 session address on Microsoft's end.

        :param microsoft_session_ipv4_address: The microsoft_session_ipv4_address of this BgpSession.
        :type microsoft_session_ipv4_address: str
        """

        self._microsoft_session_ipv4_address = microsoft_session_ipv4_address

    @property
    def microsoft_session_ipv6_address(self):
        """Gets the microsoft_session_ipv6_address of this BgpSession.

        The IPv6 session address on Microsoft's end.

        :return: The microsoft_session_ipv6_address of this BgpSession.
        :rtype: str
        """
        return self._microsoft_session_ipv6_address

    @microsoft_session_ipv6_address.setter
    def microsoft_session_ipv6_address(self, microsoft_session_ipv6_address):
        """Sets the microsoft_session_ipv6_address of this BgpSession.

        The IPv6 session address on Microsoft's end.

        :param microsoft_session_ipv6_address: The microsoft_session_ipv6_address of this BgpSession.
        :type microsoft_session_ipv6_address: str
        """

        self._microsoft_session_ipv6_address = microsoft_session_ipv6_address

    @property
    def peer_session_ipv4_address(self):
        """Gets the peer_session_ipv4_address of this BgpSession.

        The IPv4 session address on peer's end.

        :return: The peer_session_ipv4_address of this BgpSession.
        :rtype: str
        """
        return self._peer_session_ipv4_address

    @peer_session_ipv4_address.setter
    def peer_session_ipv4_address(self, peer_session_ipv4_address):
        """Sets the peer_session_ipv4_address of this BgpSession.

        The IPv4 session address on peer's end.

        :param peer_session_ipv4_address: The peer_session_ipv4_address of this BgpSession.
        :type peer_session_ipv4_address: str
        """

        self._peer_session_ipv4_address = peer_session_ipv4_address

    @property
    def peer_session_ipv6_address(self):
        """Gets the peer_session_ipv6_address of this BgpSession.

        The IPv6 session address on peer's end.

        :return: The peer_session_ipv6_address of this BgpSession.
        :rtype: str
        """
        return self._peer_session_ipv6_address

    @peer_session_ipv6_address.setter
    def peer_session_ipv6_address(self, peer_session_ipv6_address):
        """Sets the peer_session_ipv6_address of this BgpSession.

        The IPv6 session address on peer's end.

        :param peer_session_ipv6_address: The peer_session_ipv6_address of this BgpSession.
        :type peer_session_ipv6_address: str
        """

        self._peer_session_ipv6_address = peer_session_ipv6_address

    @property
    def session_prefix_v4(self):
        """Gets the session_prefix_v4 of this BgpSession.

        The IPv4 prefix that contains both ends' IPv4 addresses.

        :return: The session_prefix_v4 of this BgpSession.
        :rtype: str
        """
        return self._session_prefix_v4

    @session_prefix_v4.setter
    def session_prefix_v4(self, session_prefix_v4):
        """Sets the session_prefix_v4 of this BgpSession.

        The IPv4 prefix that contains both ends' IPv4 addresses.

        :param session_prefix_v4: The session_prefix_v4 of this BgpSession.
        :type session_prefix_v4: str
        """

        self._session_prefix_v4 = session_prefix_v4

    @property
    def session_prefix_v6(self):
        """Gets the session_prefix_v6 of this BgpSession.

        The IPv6 prefix that contains both ends' IPv6 addresses.

        :return: The session_prefix_v6 of this BgpSession.
        :rtype: str
        """
        return self._session_prefix_v6

    @session_prefix_v6.setter
    def session_prefix_v6(self, session_prefix_v6):
        """Sets the session_prefix_v6 of this BgpSession.

        The IPv6 prefix that contains both ends' IPv6 addresses.

        :param session_prefix_v6: The session_prefix_v6 of this BgpSession.
        :type session_prefix_v6: str
        """

        self._session_prefix_v6 = session_prefix_v6

    @property
    def session_state_v4(self):
        """Gets the session_state_v4 of this BgpSession.

        The state of the IPv4 session.

        :return: The session_state_v4 of this BgpSession.
        :rtype: str
        """
        return self._session_state_v4

    @session_state_v4.setter
    def session_state_v4(self, session_state_v4):
        """Sets the session_state_v4 of this BgpSession.

        The state of the IPv4 session.

        :param session_state_v4: The session_state_v4 of this BgpSession.
        :type session_state_v4: str
        """
        allowed_values = ["None", "Idle", "Connect", "Active", "OpenSent", "OpenConfirm", "Established", "PendingAdd", "PendingUpdate", "PendingRemove"]  # noqa: E501
        if session_state_v4 not in allowed_values:
            raise ValueError(
                "Invalid value for `session_state_v4` ({0}), must be one of {1}"
                .format(session_state_v4, allowed_values)
            )

        self._session_state_v4 = session_state_v4

    @property
    def session_state_v6(self):
        """Gets the session_state_v6 of this BgpSession.

        The state of the IPv6 session.

        :return: The session_state_v6 of this BgpSession.
        :rtype: str
        """
        return self._session_state_v6

    @session_state_v6.setter
    def session_state_v6(self, session_state_v6):
        """Sets the session_state_v6 of this BgpSession.

        The state of the IPv6 session.

        :param session_state_v6: The session_state_v6 of this BgpSession.
        :type session_state_v6: str
        """
        allowed_values = ["None", "Idle", "Connect", "Active", "OpenSent", "OpenConfirm", "Established", "PendingAdd", "PendingUpdate", "PendingRemove"]  # noqa: E501
        if session_state_v6 not in allowed_values:
            raise ValueError(
                "Invalid value for `session_state_v6` ({0}), must be one of {1}"
                .format(session_state_v6, allowed_values)
            )

        self._session_state_v6 = session_state_v6
