# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.exchange_connection import ExchangeConnection
from openapi_server.models.sub_resource import SubResource
from openapi_server import util


class PeeringPropertiesExchange(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, connections: List[ExchangeConnection]=None, peer_asn: SubResource=None):
        """PeeringPropertiesExchange - a model defined in OpenAPI

        :param connections: The connections of this PeeringPropertiesExchange.
        :param peer_asn: The peer_asn of this PeeringPropertiesExchange.
        """
        self.openapi_types = {
            'connections': List[ExchangeConnection],
            'peer_asn': SubResource
        }

        self.attribute_map = {
            'connections': 'connections',
            'peer_asn': 'peerAsn'
        }

        self._connections = connections
        self._peer_asn = peer_asn

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PeeringPropertiesExchange':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PeeringPropertiesExchange of this PeeringPropertiesExchange.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def connections(self):
        """Gets the connections of this PeeringPropertiesExchange.

        The set of connections that constitute an exchange peering.

        :return: The connections of this PeeringPropertiesExchange.
        :rtype: List[ExchangeConnection]
        """
        return self._connections

    @connections.setter
    def connections(self, connections):
        """Sets the connections of this PeeringPropertiesExchange.

        The set of connections that constitute an exchange peering.

        :param connections: The connections of this PeeringPropertiesExchange.
        :type connections: List[ExchangeConnection]
        """

        self._connections = connections

    @property
    def peer_asn(self):
        """Gets the peer_asn of this PeeringPropertiesExchange.


        :return: The peer_asn of this PeeringPropertiesExchange.
        :rtype: SubResource
        """
        return self._peer_asn

    @peer_asn.setter
    def peer_asn(self, peer_asn):
        """Sets the peer_asn of this PeeringPropertiesExchange.


        :param peer_asn: The peer_asn of this PeeringPropertiesExchange.
        :type peer_asn: SubResource
        """

        self._peer_asn = peer_asn
