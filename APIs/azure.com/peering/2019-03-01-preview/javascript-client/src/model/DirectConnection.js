/**
 * PeeringManagementClient
 * APIs to manage Peering resources through the Azure Resource Manager.
 *
 * The version of the OpenAPI document: 2019-03-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BgpSession from './BgpSession';

/**
 * The DirectConnection model module.
 * @module model/DirectConnection
 * @version 2019-03-01-preview
 */
class DirectConnection {
    /**
     * Constructs a new <code>DirectConnection</code>.
     * The properties that define a direct connection.
     * @alias module:model/DirectConnection
     */
    constructor() { 
        
        DirectConnection.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DirectConnection</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DirectConnection} obj Optional instance to populate.
     * @return {module:model/DirectConnection} The populated <code>DirectConnection</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DirectConnection();

            if (data.hasOwnProperty('bandwidthInMbps')) {
                obj['bandwidthInMbps'] = ApiClient.convertToType(data['bandwidthInMbps'], 'Number');
            }
            if (data.hasOwnProperty('bgpSession')) {
                obj['bgpSession'] = BgpSession.constructFromObject(data['bgpSession']);
            }
            if (data.hasOwnProperty('connectionState')) {
                obj['connectionState'] = ApiClient.convertToType(data['connectionState'], 'String');
            }
            if (data.hasOwnProperty('peeringDBFacilityId')) {
                obj['peeringDBFacilityId'] = ApiClient.convertToType(data['peeringDBFacilityId'], 'Number');
            }
            if (data.hasOwnProperty('provisionedBandwidthInMbps')) {
                obj['provisionedBandwidthInMbps'] = ApiClient.convertToType(data['provisionedBandwidthInMbps'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DirectConnection</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DirectConnection</code>.
     */
    static validateJSON(data) {
        // validate the optional field `bgpSession`
        if (data['bgpSession']) { // data not null
          BgpSession.validateJSON(data['bgpSession']);
        }
        // ensure the json data is a string
        if (data['connectionState'] && !(typeof data['connectionState'] === 'string' || data['connectionState'] instanceof String)) {
            throw new Error("Expected the field `connectionState` to be a primitive type in the JSON string but got " + data['connectionState']);
        }

        return true;
    }


}



/**
 * The bandwidth of the connection.
 * @member {Number} bandwidthInMbps
 */
DirectConnection.prototype['bandwidthInMbps'] = undefined;

/**
 * @member {module:model/BgpSession} bgpSession
 */
DirectConnection.prototype['bgpSession'] = undefined;

/**
 * The state of the connection.
 * @member {module:model/DirectConnection.ConnectionStateEnum} connectionState
 */
DirectConnection.prototype['connectionState'] = undefined;

/**
 * The PeeringDB.com ID of the facility at which the connection has to be set up.
 * @member {Number} peeringDBFacilityId
 */
DirectConnection.prototype['peeringDBFacilityId'] = undefined;

/**
 * The bandwidth that is actually provisioned.
 * @member {Number} provisionedBandwidthInMbps
 */
DirectConnection.prototype['provisionedBandwidthInMbps'] = undefined;





/**
 * Allowed values for the <code>connectionState</code> property.
 * @enum {String}
 * @readonly
 */
DirectConnection['ConnectionStateEnum'] = {

    /**
     * value: "None"
     * @const
     */
    "None": "None",

    /**
     * value: "PendingApproval"
     * @const
     */
    "PendingApproval": "PendingApproval",

    /**
     * value: "Approved"
     * @const
     */
    "Approved": "Approved",

    /**
     * value: "ProvisioningStarted"
     * @const
     */
    "ProvisioningStarted": "ProvisioningStarted",

    /**
     * value: "ProvisioningFailed"
     * @const
     */
    "ProvisioningFailed": "ProvisioningFailed",

    /**
     * value: "ProvisioningCompleted"
     * @const
     */
    "ProvisioningCompleted": "ProvisioningCompleted",

    /**
     * value: "Validating"
     * @const
     */
    "Validating": "Validating",

    /**
     * value: "Active"
     * @const
     */
    "Active": "Active"
};



export default DirectConnection;

