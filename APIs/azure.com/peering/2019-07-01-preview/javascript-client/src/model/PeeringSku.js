/**
 * PeeringManagementClient
 * APIs to manage Peering resources through the Azure Resource Manager.
 *
 * The version of the OpenAPI document: 2019-07-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PeeringSku model module.
 * @module model/PeeringSku
 * @version 2019-07-01-preview
 */
class PeeringSku {
    /**
     * Constructs a new <code>PeeringSku</code>.
     * The SKU that defines the tier and kind of the peering.
     * @alias module:model/PeeringSku
     */
    constructor() { 
        
        PeeringSku.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PeeringSku</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PeeringSku} obj Optional instance to populate.
     * @return {module:model/PeeringSku} The populated <code>PeeringSku</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PeeringSku();

            if (data.hasOwnProperty('family')) {
                obj['family'] = ApiClient.convertToType(data['family'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('size')) {
                obj['size'] = ApiClient.convertToType(data['size'], 'String');
            }
            if (data.hasOwnProperty('tier')) {
                obj['tier'] = ApiClient.convertToType(data['tier'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PeeringSku</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PeeringSku</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['family'] && !(typeof data['family'] === 'string' || data['family'] instanceof String)) {
            throw new Error("Expected the field `family` to be a primitive type in the JSON string but got " + data['family']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['size'] && !(typeof data['size'] === 'string' || data['size'] instanceof String)) {
            throw new Error("Expected the field `size` to be a primitive type in the JSON string but got " + data['size']);
        }
        // ensure the json data is a string
        if (data['tier'] && !(typeof data['tier'] === 'string' || data['tier'] instanceof String)) {
            throw new Error("Expected the field `tier` to be a primitive type in the JSON string but got " + data['tier']);
        }

        return true;
    }


}



/**
 * The family of the peering SKU.
 * @member {module:model/PeeringSku.FamilyEnum} family
 */
PeeringSku.prototype['family'] = undefined;

/**
 * The name of the peering SKU.
 * @member {module:model/PeeringSku.NameEnum} name
 */
PeeringSku.prototype['name'] = undefined;

/**
 * The size of the peering SKU.
 * @member {module:model/PeeringSku.SizeEnum} size
 */
PeeringSku.prototype['size'] = undefined;

/**
 * The tier of the peering SKU.
 * @member {module:model/PeeringSku.TierEnum} tier
 */
PeeringSku.prototype['tier'] = undefined;





/**
 * Allowed values for the <code>family</code> property.
 * @enum {String}
 * @readonly
 */
PeeringSku['FamilyEnum'] = {

    /**
     * value: "Direct"
     * @const
     */
    "Direct": "Direct",

    /**
     * value: "Exchange"
     * @const
     */
    "Exchange": "Exchange"
};


/**
 * Allowed values for the <code>name</code> property.
 * @enum {String}
 * @readonly
 */
PeeringSku['NameEnum'] = {

    /**
     * value: "Basic_Exchange_Free"
     * @const
     */
    "Basic_Exchange_Free": "Basic_Exchange_Free",

    /**
     * value: "Basic_Direct_Free"
     * @const
     */
    "Basic_Direct_Free": "Basic_Direct_Free",

    /**
     * value: "Premium_Direct_Free"
     * @const
     */
    "Premium_Direct_Free": "Premium_Direct_Free",

    /**
     * value: "Premium_Exchange_Metered"
     * @const
     */
    "Premium_Exchange_Metered": "Premium_Exchange_Metered"
};


/**
 * Allowed values for the <code>size</code> property.
 * @enum {String}
 * @readonly
 */
PeeringSku['SizeEnum'] = {

    /**
     * value: "Free"
     * @const
     */
    "Free": "Free",

    /**
     * value: "Metered"
     * @const
     */
    "Metered": "Metered",

    /**
     * value: "Unlimited"
     * @const
     */
    "Unlimited": "Unlimited"
};


/**
 * Allowed values for the <code>tier</code> property.
 * @enum {String}
 * @readonly
 */
PeeringSku['TierEnum'] = {

    /**
     * value: "Basic"
     * @const
     */
    "Basic": "Basic",

    /**
     * value: "Premium"
     * @const
     */
    "Premium": "Premium"
};



export default PeeringSku;

