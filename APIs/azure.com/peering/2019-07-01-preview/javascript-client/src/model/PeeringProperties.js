/**
 * PeeringManagementClient
 * APIs to manage Peering resources through the Azure Resource Manager.
 *
 * The version of the OpenAPI document: 2019-07-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PeeringPropertiesDirect from './PeeringPropertiesDirect';
import PeeringPropertiesExchange from './PeeringPropertiesExchange';

/**
 * The PeeringProperties model module.
 * @module model/PeeringProperties
 * @version 2019-07-01-preview
 */
class PeeringProperties {
    /**
     * Constructs a new <code>PeeringProperties</code>.
     * The properties that define connectivity to the Microsoft Cloud Edge.
     * @alias module:model/PeeringProperties
     */
    constructor() { 
        
        PeeringProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PeeringProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PeeringProperties} obj Optional instance to populate.
     * @return {module:model/PeeringProperties} The populated <code>PeeringProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PeeringProperties();

            if (data.hasOwnProperty('direct')) {
                obj['direct'] = PeeringPropertiesDirect.constructFromObject(data['direct']);
            }
            if (data.hasOwnProperty('exchange')) {
                obj['exchange'] = PeeringPropertiesExchange.constructFromObject(data['exchange']);
            }
            if (data.hasOwnProperty('peeringLocation')) {
                obj['peeringLocation'] = ApiClient.convertToType(data['peeringLocation'], 'String');
            }
            if (data.hasOwnProperty('provisioningState')) {
                obj['provisioningState'] = ApiClient.convertToType(data['provisioningState'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PeeringProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PeeringProperties</code>.
     */
    static validateJSON(data) {
        // validate the optional field `direct`
        if (data['direct']) { // data not null
          PeeringPropertiesDirect.validateJSON(data['direct']);
        }
        // validate the optional field `exchange`
        if (data['exchange']) { // data not null
          PeeringPropertiesExchange.validateJSON(data['exchange']);
        }
        // ensure the json data is a string
        if (data['peeringLocation'] && !(typeof data['peeringLocation'] === 'string' || data['peeringLocation'] instanceof String)) {
            throw new Error("Expected the field `peeringLocation` to be a primitive type in the JSON string but got " + data['peeringLocation']);
        }
        // ensure the json data is a string
        if (data['provisioningState'] && !(typeof data['provisioningState'] === 'string' || data['provisioningState'] instanceof String)) {
            throw new Error("Expected the field `provisioningState` to be a primitive type in the JSON string but got " + data['provisioningState']);
        }

        return true;
    }


}



/**
 * @member {module:model/PeeringPropertiesDirect} direct
 */
PeeringProperties.prototype['direct'] = undefined;

/**
 * @member {module:model/PeeringPropertiesExchange} exchange
 */
PeeringProperties.prototype['exchange'] = undefined;

/**
 * The location of the peering.
 * @member {String} peeringLocation
 */
PeeringProperties.prototype['peeringLocation'] = undefined;

/**
 * The provisioning state of the resource.
 * @member {module:model/PeeringProperties.ProvisioningStateEnum} provisioningState
 */
PeeringProperties.prototype['provisioningState'] = undefined;





/**
 * Allowed values for the <code>provisioningState</code> property.
 * @enum {String}
 * @readonly
 */
PeeringProperties['ProvisioningStateEnum'] = {

    /**
     * value: "Succeeded"
     * @const
     */
    "Succeeded": "Succeeded",

    /**
     * value: "Updating"
     * @const
     */
    "Updating": "Updating",

    /**
     * value: "Deleting"
     * @const
     */
    "Deleting": "Deleting",

    /**
     * value: "Failed"
     * @const
     */
    "Failed": "Failed"
};



export default PeeringProperties;

