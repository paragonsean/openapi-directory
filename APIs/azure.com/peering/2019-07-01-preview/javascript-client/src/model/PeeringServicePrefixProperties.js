/**
 * PeeringManagementClient
 * APIs to manage Peering resources through the Azure Resource Manager.
 *
 * The version of the OpenAPI document: 2019-07-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PeeringServicePrefixProperties model module.
 * @module model/PeeringServicePrefixProperties
 * @version 2019-07-01-preview
 */
class PeeringServicePrefixProperties {
    /**
     * Constructs a new <code>PeeringServicePrefixProperties</code>.
     * The peering service prefix properties class.
     * @alias module:model/PeeringServicePrefixProperties
     */
    constructor() { 
        
        PeeringServicePrefixProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PeeringServicePrefixProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PeeringServicePrefixProperties} obj Optional instance to populate.
     * @return {module:model/PeeringServicePrefixProperties} The populated <code>PeeringServicePrefixProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PeeringServicePrefixProperties();

            if (data.hasOwnProperty('learnedType')) {
                obj['learnedType'] = ApiClient.convertToType(data['learnedType'], 'String');
            }
            if (data.hasOwnProperty('prefix')) {
                obj['prefix'] = ApiClient.convertToType(data['prefix'], 'String');
            }
            if (data.hasOwnProperty('prefixValidationState')) {
                obj['prefixValidationState'] = ApiClient.convertToType(data['prefixValidationState'], 'String');
            }
            if (data.hasOwnProperty('provisioningState')) {
                obj['provisioningState'] = ApiClient.convertToType(data['provisioningState'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PeeringServicePrefixProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PeeringServicePrefixProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['learnedType'] && !(typeof data['learnedType'] === 'string' || data['learnedType'] instanceof String)) {
            throw new Error("Expected the field `learnedType` to be a primitive type in the JSON string but got " + data['learnedType']);
        }
        // ensure the json data is a string
        if (data['prefix'] && !(typeof data['prefix'] === 'string' || data['prefix'] instanceof String)) {
            throw new Error("Expected the field `prefix` to be a primitive type in the JSON string but got " + data['prefix']);
        }
        // ensure the json data is a string
        if (data['prefixValidationState'] && !(typeof data['prefixValidationState'] === 'string' || data['prefixValidationState'] instanceof String)) {
            throw new Error("Expected the field `prefixValidationState` to be a primitive type in the JSON string but got " + data['prefixValidationState']);
        }
        // ensure the json data is a string
        if (data['provisioningState'] && !(typeof data['provisioningState'] === 'string' || data['provisioningState'] instanceof String)) {
            throw new Error("Expected the field `provisioningState` to be a primitive type in the JSON string but got " + data['provisioningState']);
        }

        return true;
    }


}



/**
 * The prefix learned type
 * @member {module:model/PeeringServicePrefixProperties.LearnedTypeEnum} learnedType
 */
PeeringServicePrefixProperties.prototype['learnedType'] = undefined;

/**
 * Valid route prefix
 * @member {String} prefix
 */
PeeringServicePrefixProperties.prototype['prefix'] = undefined;

/**
 * The prefix validation state
 * @member {module:model/PeeringServicePrefixProperties.PrefixValidationStateEnum} prefixValidationState
 */
PeeringServicePrefixProperties.prototype['prefixValidationState'] = undefined;

/**
 * The provisioning state of the resource.
 * @member {module:model/PeeringServicePrefixProperties.ProvisioningStateEnum} provisioningState
 */
PeeringServicePrefixProperties.prototype['provisioningState'] = undefined;





/**
 * Allowed values for the <code>learnedType</code> property.
 * @enum {String}
 * @readonly
 */
PeeringServicePrefixProperties['LearnedTypeEnum'] = {

    /**
     * value: "None"
     * @const
     */
    "None": "None",

    /**
     * value: "ViaPartner"
     * @const
     */
    "ViaPartner": "ViaPartner",

    /**
     * value: "ViaSession"
     * @const
     */
    "ViaSession": "ViaSession"
};


/**
 * Allowed values for the <code>prefixValidationState</code> property.
 * @enum {String}
 * @readonly
 */
PeeringServicePrefixProperties['PrefixValidationStateEnum'] = {

    /**
     * value: "None"
     * @const
     */
    "None": "None",

    /**
     * value: "Invalid"
     * @const
     */
    "Invalid": "Invalid",

    /**
     * value: "Verified"
     * @const
     */
    "Verified": "Verified",

    /**
     * value: "Failed"
     * @const
     */
    "Failed": "Failed",

    /**
     * value: "Pending"
     * @const
     */
    "Pending": "Pending",

    /**
     * value: "Unknown"
     * @const
     */
    "Unknown": "Unknown"
};


/**
 * Allowed values for the <code>provisioningState</code> property.
 * @enum {String}
 * @readonly
 */
PeeringServicePrefixProperties['ProvisioningStateEnum'] = {

    /**
     * value: "Succeeded"
     * @const
     */
    "Succeeded": "Succeeded",

    /**
     * value: "Updating"
     * @const
     */
    "Updating": "Updating",

    /**
     * value: "Deleting"
     * @const
     */
    "Deleting": "Deleting",

    /**
     * value: "Failed"
     * @const
     */
    "Failed": "Failed"
};



export default PeeringServicePrefixProperties;

