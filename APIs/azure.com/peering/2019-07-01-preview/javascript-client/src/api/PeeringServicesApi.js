/**
 * PeeringManagementClient
 * APIs to manage Peering resources through the Azure Resource Manager.
 *
 * The version of the OpenAPI document: 2019-07-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorResponse from '../model/ErrorResponse';
import PeeringService from '../model/PeeringService';
import PeeringServiceListResult from '../model/PeeringServiceListResult';
import ResourceTags from '../model/ResourceTags';

/**
* PeeringServices service.
* @module api/PeeringServicesApi
* @version 2019-07-01-preview
*/
export default class PeeringServicesApi {

    /**
    * Constructs a new PeeringServicesApi. 
    * @alias module:api/PeeringServicesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the peeringServicesCreateOrUpdate operation.
     * @callback module:api/PeeringServicesApi~peeringServicesCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PeeringService} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new peering service or updates an existing peering with the specified name under the given subscription and resource group.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} peeringServiceName The name of the peering service.
     * @param {String} subscriptionId The Azure subscription ID.
     * @param {String} apiVersion The client API version.
     * @param {module:model/PeeringService} peeringService The properties needed to create or update a peering service.
     * @param {module:api/PeeringServicesApi~peeringServicesCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PeeringService}
     */
    peeringServicesCreateOrUpdate(resourceGroupName, peeringServiceName, subscriptionId, apiVersion, peeringService, callback) {
      let postBody = peeringService;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling peeringServicesCreateOrUpdate");
      }
      // verify the required parameter 'peeringServiceName' is set
      if (peeringServiceName === undefined || peeringServiceName === null) {
        throw new Error("Missing the required parameter 'peeringServiceName' when calling peeringServicesCreateOrUpdate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling peeringServicesCreateOrUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling peeringServicesCreateOrUpdate");
      }
      // verify the required parameter 'peeringService' is set
      if (peeringService === undefined || peeringService === null) {
        throw new Error("Missing the required parameter 'peeringService' when calling peeringServicesCreateOrUpdate");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'peeringServiceName': peeringServiceName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PeeringService;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Peering/peeringServices/{peeringServiceName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the peeringServicesDelete operation.
     * @callback module:api/PeeringServicesApi~peeringServicesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an existing peering service with the specified name under the given subscription and resource group.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} peeringServiceName The name of the peering service.
     * @param {String} subscriptionId The Azure subscription ID.
     * @param {String} apiVersion The client API version.
     * @param {module:api/PeeringServicesApi~peeringServicesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    peeringServicesDelete(resourceGroupName, peeringServiceName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling peeringServicesDelete");
      }
      // verify the required parameter 'peeringServiceName' is set
      if (peeringServiceName === undefined || peeringServiceName === null) {
        throw new Error("Missing the required parameter 'peeringServiceName' when calling peeringServicesDelete");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling peeringServicesDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling peeringServicesDelete");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'peeringServiceName': peeringServiceName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Peering/peeringServices/{peeringServiceName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the peeringServicesGet operation.
     * @callback module:api/PeeringServicesApi~peeringServicesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PeeringService} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets an existing peering service with the specified name under the given subscription and resource group.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} peeringServiceName The name of the peering.
     * @param {String} subscriptionId The Azure subscription ID.
     * @param {String} apiVersion The client API version.
     * @param {module:api/PeeringServicesApi~peeringServicesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PeeringService}
     */
    peeringServicesGet(resourceGroupName, peeringServiceName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling peeringServicesGet");
      }
      // verify the required parameter 'peeringServiceName' is set
      if (peeringServiceName === undefined || peeringServiceName === null) {
        throw new Error("Missing the required parameter 'peeringServiceName' when calling peeringServicesGet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling peeringServicesGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling peeringServicesGet");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'peeringServiceName': peeringServiceName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PeeringService;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Peering/peeringServices/{peeringServiceName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the peeringServicesListByResourceGroup operation.
     * @callback module:api/PeeringServicesApi~peeringServicesListByResourceGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PeeringServiceListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all of the peering services under the given subscription and resource group.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} subscriptionId The Azure subscription ID.
     * @param {String} apiVersion The client API version.
     * @param {module:api/PeeringServicesApi~peeringServicesListByResourceGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PeeringServiceListResult}
     */
    peeringServicesListByResourceGroup(resourceGroupName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling peeringServicesListByResourceGroup");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling peeringServicesListByResourceGroup");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling peeringServicesListByResourceGroup");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PeeringServiceListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Peering/peeringServices', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the peeringServicesListBySubscription operation.
     * @callback module:api/PeeringServicesApi~peeringServicesListBySubscriptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PeeringServiceListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all of the peerings under the given subscription.
     * @param {String} subscriptionId The Azure subscription ID.
     * @param {String} apiVersion The client API version.
     * @param {module:api/PeeringServicesApi~peeringServicesListBySubscriptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PeeringServiceListResult}
     */
    peeringServicesListBySubscription(subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling peeringServicesListBySubscription");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling peeringServicesListBySubscription");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PeeringServiceListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Peering/peeringServices', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the peeringServicesUpdate operation.
     * @callback module:api/PeeringServicesApi~peeringServicesUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PeeringService} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates tags for a peering service with the specified name under the given subscription and resource group.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} peeringServiceName The name of the peering service.
     * @param {String} subscriptionId The Azure subscription ID.
     * @param {String} apiVersion The client API version.
     * @param {module:model/ResourceTags} tags The resource tags.
     * @param {module:api/PeeringServicesApi~peeringServicesUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PeeringService}
     */
    peeringServicesUpdate(resourceGroupName, peeringServiceName, subscriptionId, apiVersion, tags, callback) {
      let postBody = tags;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling peeringServicesUpdate");
      }
      // verify the required parameter 'peeringServiceName' is set
      if (peeringServiceName === undefined || peeringServiceName === null) {
        throw new Error("Missing the required parameter 'peeringServiceName' when calling peeringServicesUpdate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling peeringServicesUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling peeringServicesUpdate");
      }
      // verify the required parameter 'tags' is set
      if (tags === undefined || tags === null) {
        throw new Error("Missing the required parameter 'tags' when calling peeringServicesUpdate");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'peeringServiceName': peeringServiceName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PeeringService;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Peering/peeringServices/{peeringServiceName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
