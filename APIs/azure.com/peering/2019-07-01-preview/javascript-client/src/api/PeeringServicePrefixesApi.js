/**
 * PeeringManagementClient
 * APIs to manage Peering resources through the Azure Resource Manager.
 *
 * The version of the OpenAPI document: 2019-07-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorResponse from '../model/ErrorResponse';
import PeeringServicePrefix from '../model/PeeringServicePrefix';
import PeeringServicePrefixListResult from '../model/PeeringServicePrefixListResult';

/**
* PeeringServicePrefixes service.
* @module api/PeeringServicePrefixesApi
* @version 2019-07-01-preview
*/
export default class PeeringServicePrefixesApi {

    /**
    * Constructs a new PeeringServicePrefixesApi. 
    * @alias module:api/PeeringServicePrefixesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the peeringServicePrefixesCreateOrUpdate operation.
     * @callback module:api/PeeringServicePrefixesApi~peeringServicePrefixesCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PeeringServicePrefix} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates or updates the peering prefix.
     * @param {String} resourceGroupName The resource group name.
     * @param {String} peeringServiceName The peering service name.
     * @param {String} prefixName The prefix name
     * @param {String} subscriptionId The Azure subscription ID.
     * @param {String} apiVersion The client API version.
     * @param {module:model/PeeringServicePrefix} peeringServicePrefix The IP prefix for an peering
     * @param {module:api/PeeringServicePrefixesApi~peeringServicePrefixesCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PeeringServicePrefix}
     */
    peeringServicePrefixesCreateOrUpdate(resourceGroupName, peeringServiceName, prefixName, subscriptionId, apiVersion, peeringServicePrefix, callback) {
      let postBody = peeringServicePrefix;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling peeringServicePrefixesCreateOrUpdate");
      }
      // verify the required parameter 'peeringServiceName' is set
      if (peeringServiceName === undefined || peeringServiceName === null) {
        throw new Error("Missing the required parameter 'peeringServiceName' when calling peeringServicePrefixesCreateOrUpdate");
      }
      // verify the required parameter 'prefixName' is set
      if (prefixName === undefined || prefixName === null) {
        throw new Error("Missing the required parameter 'prefixName' when calling peeringServicePrefixesCreateOrUpdate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling peeringServicePrefixesCreateOrUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling peeringServicePrefixesCreateOrUpdate");
      }
      // verify the required parameter 'peeringServicePrefix' is set
      if (peeringServicePrefix === undefined || peeringServicePrefix === null) {
        throw new Error("Missing the required parameter 'peeringServicePrefix' when calling peeringServicePrefixesCreateOrUpdate");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'peeringServiceName': peeringServiceName,
        'prefixName': prefixName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PeeringServicePrefix;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Peering/peeringServices/{peeringServiceName}/prefixes/{prefixName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the peeringServicePrefixesDelete operation.
     * @callback module:api/PeeringServicePrefixesApi~peeringServicePrefixesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * removes the peering prefix.
     * @param {String} resourceGroupName The resource group name.
     * @param {String} peeringServiceName The peering service name.
     * @param {String} prefixName The prefix name
     * @param {String} subscriptionId The Azure subscription ID.
     * @param {String} apiVersion The client API version.
     * @param {module:api/PeeringServicePrefixesApi~peeringServicePrefixesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    peeringServicePrefixesDelete(resourceGroupName, peeringServiceName, prefixName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling peeringServicePrefixesDelete");
      }
      // verify the required parameter 'peeringServiceName' is set
      if (peeringServiceName === undefined || peeringServiceName === null) {
        throw new Error("Missing the required parameter 'peeringServiceName' when calling peeringServicePrefixesDelete");
      }
      // verify the required parameter 'prefixName' is set
      if (prefixName === undefined || prefixName === null) {
        throw new Error("Missing the required parameter 'prefixName' when calling peeringServicePrefixesDelete");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling peeringServicePrefixesDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling peeringServicePrefixesDelete");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'peeringServiceName': peeringServiceName,
        'prefixName': prefixName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Peering/peeringServices/{peeringServiceName}/prefixes/{prefixName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the peeringServicePrefixesGet operation.
     * @callback module:api/PeeringServicePrefixesApi~peeringServicePrefixesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PeeringServicePrefix} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the peering service prefix.
     * @param {String} resourceGroupName The resource group name.
     * @param {String} peeringServiceName The peering service name.
     * @param {String} prefixName The prefix name.
     * @param {String} subscriptionId The Azure subscription ID.
     * @param {String} apiVersion The client API version.
     * @param {module:api/PeeringServicePrefixesApi~peeringServicePrefixesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PeeringServicePrefix}
     */
    peeringServicePrefixesGet(resourceGroupName, peeringServiceName, prefixName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling peeringServicePrefixesGet");
      }
      // verify the required parameter 'peeringServiceName' is set
      if (peeringServiceName === undefined || peeringServiceName === null) {
        throw new Error("Missing the required parameter 'peeringServiceName' when calling peeringServicePrefixesGet");
      }
      // verify the required parameter 'prefixName' is set
      if (prefixName === undefined || prefixName === null) {
        throw new Error("Missing the required parameter 'prefixName' when calling peeringServicePrefixesGet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling peeringServicePrefixesGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling peeringServicePrefixesGet");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'peeringServiceName': peeringServiceName,
        'prefixName': prefixName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PeeringServicePrefix;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Peering/peeringServices/{peeringServiceName}/prefixes/{prefixName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the prefixesListByPeeringService operation.
     * @callback module:api/PeeringServicePrefixesApi~prefixesListByPeeringServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PeeringServicePrefixListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the peerings prefix in the resource group.
     * @param {String} resourceGroupName The resource group name.
     * @param {String} peeringServiceName The peering service name.
     * @param {String} subscriptionId The Azure subscription ID.
     * @param {String} apiVersion The client API version.
     * @param {module:api/PeeringServicePrefixesApi~prefixesListByPeeringServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PeeringServicePrefixListResult}
     */
    prefixesListByPeeringService(resourceGroupName, peeringServiceName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling prefixesListByPeeringService");
      }
      // verify the required parameter 'peeringServiceName' is set
      if (peeringServiceName === undefined || peeringServiceName === null) {
        throw new Error("Missing the required parameter 'peeringServiceName' when calling prefixesListByPeeringService");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling prefixesListByPeeringService");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling prefixesListByPeeringService");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'peeringServiceName': peeringServiceName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PeeringServicePrefixListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Peering/peeringServices/{peeringServiceName}/prefixes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
