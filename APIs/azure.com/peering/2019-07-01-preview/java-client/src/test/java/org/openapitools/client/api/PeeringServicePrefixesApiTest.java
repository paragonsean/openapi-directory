/*
 * PeeringManagementClient
 * APIs to manage Peering resources through the Azure Resource Manager.
 *
 * The version of the OpenAPI document: 2019-07-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.PeeringServicePrefix;
import org.openapitools.client.model.PeeringServicePrefixListResult;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PeeringServicePrefixesApi
 */
@Disabled
public class PeeringServicePrefixesApiTest {

    private final PeeringServicePrefixesApi api = new PeeringServicePrefixesApi();

    /**
     * Creates or updates the peering prefix.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void peeringServicePrefixesCreateOrUpdateTest() throws ApiException {
        String resourceGroupName = null;
        String peeringServiceName = null;
        String prefixName = null;
        String subscriptionId = null;
        String apiVersion = null;
        PeeringServicePrefix peeringServicePrefix = null;
        PeeringServicePrefix response = api.peeringServicePrefixesCreateOrUpdate(resourceGroupName, peeringServiceName, prefixName, subscriptionId, apiVersion, peeringServicePrefix);
        // TODO: test validations
    }

    /**
     * removes the peering prefix.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void peeringServicePrefixesDeleteTest() throws ApiException {
        String resourceGroupName = null;
        String peeringServiceName = null;
        String prefixName = null;
        String subscriptionId = null;
        String apiVersion = null;
        api.peeringServicePrefixesDelete(resourceGroupName, peeringServiceName, prefixName, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets the peering service prefix.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void peeringServicePrefixesGetTest() throws ApiException {
        String resourceGroupName = null;
        String peeringServiceName = null;
        String prefixName = null;
        String subscriptionId = null;
        String apiVersion = null;
        PeeringServicePrefix response = api.peeringServicePrefixesGet(resourceGroupName, peeringServiceName, prefixName, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Lists the peerings prefix in the resource group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void prefixesListByPeeringServiceTest() throws ApiException {
        String resourceGroupName = null;
        String peeringServiceName = null;
        String subscriptionId = null;
        String apiVersion = null;
        PeeringServicePrefixListResult response = api.prefixesListByPeeringService(resourceGroupName, peeringServiceName, subscriptionId, apiVersion);
        // TODO: test validations
    }

}
