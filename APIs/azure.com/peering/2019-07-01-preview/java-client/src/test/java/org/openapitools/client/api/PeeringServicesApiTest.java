/*
 * PeeringManagementClient
 * APIs to manage Peering resources through the Azure Resource Manager.
 *
 * The version of the OpenAPI document: 2019-07-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.PeeringService;
import org.openapitools.client.model.PeeringServiceListResult;
import org.openapitools.client.model.ResourceTags;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PeeringServicesApi
 */
@Disabled
public class PeeringServicesApiTest {

    private final PeeringServicesApi api = new PeeringServicesApi();

    /**
     * Creates a new peering service or updates an existing peering with the specified name under the given subscription and resource group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void peeringServicesCreateOrUpdateTest() throws ApiException {
        String resourceGroupName = null;
        String peeringServiceName = null;
        String subscriptionId = null;
        String apiVersion = null;
        PeeringService peeringService = null;
        PeeringService response = api.peeringServicesCreateOrUpdate(resourceGroupName, peeringServiceName, subscriptionId, apiVersion, peeringService);
        // TODO: test validations
    }

    /**
     * Deletes an existing peering service with the specified name under the given subscription and resource group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void peeringServicesDeleteTest() throws ApiException {
        String resourceGroupName = null;
        String peeringServiceName = null;
        String subscriptionId = null;
        String apiVersion = null;
        api.peeringServicesDelete(resourceGroupName, peeringServiceName, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets an existing peering service with the specified name under the given subscription and resource group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void peeringServicesGetTest() throws ApiException {
        String resourceGroupName = null;
        String peeringServiceName = null;
        String subscriptionId = null;
        String apiVersion = null;
        PeeringService response = api.peeringServicesGet(resourceGroupName, peeringServiceName, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Lists all of the peering services under the given subscription and resource group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void peeringServicesListByResourceGroupTest() throws ApiException {
        String resourceGroupName = null;
        String subscriptionId = null;
        String apiVersion = null;
        PeeringServiceListResult response = api.peeringServicesListByResourceGroup(resourceGroupName, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Lists all of the peerings under the given subscription.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void peeringServicesListBySubscriptionTest() throws ApiException {
        String subscriptionId = null;
        String apiVersion = null;
        PeeringServiceListResult response = api.peeringServicesListBySubscription(subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Updates tags for a peering service with the specified name under the given subscription and resource group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void peeringServicesUpdateTest() throws ApiException {
        String resourceGroupName = null;
        String peeringServiceName = null;
        String subscriptionId = null;
        String apiVersion = null;
        ResourceTags tags = null;
        PeeringService response = api.peeringServicesUpdate(resourceGroupName, peeringServiceName, subscriptionId, apiVersion, tags);
        // TODO: test validations
    }

}
