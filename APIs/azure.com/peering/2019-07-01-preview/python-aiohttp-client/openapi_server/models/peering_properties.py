# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.peering_properties_direct import PeeringPropertiesDirect
from openapi_server.models.peering_properties_exchange import PeeringPropertiesExchange
from openapi_server import util


class PeeringProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, direct: PeeringPropertiesDirect=None, exchange: PeeringPropertiesExchange=None, peering_location: str=None, provisioning_state: str=None):
        """PeeringProperties - a model defined in OpenAPI

        :param direct: The direct of this PeeringProperties.
        :param exchange: The exchange of this PeeringProperties.
        :param peering_location: The peering_location of this PeeringProperties.
        :param provisioning_state: The provisioning_state of this PeeringProperties.
        """
        self.openapi_types = {
            'direct': PeeringPropertiesDirect,
            'exchange': PeeringPropertiesExchange,
            'peering_location': str,
            'provisioning_state': str
        }

        self.attribute_map = {
            'direct': 'direct',
            'exchange': 'exchange',
            'peering_location': 'peeringLocation',
            'provisioning_state': 'provisioningState'
        }

        self._direct = direct
        self._exchange = exchange
        self._peering_location = peering_location
        self._provisioning_state = provisioning_state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PeeringProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PeeringProperties of this PeeringProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def direct(self):
        """Gets the direct of this PeeringProperties.


        :return: The direct of this PeeringProperties.
        :rtype: PeeringPropertiesDirect
        """
        return self._direct

    @direct.setter
    def direct(self, direct):
        """Sets the direct of this PeeringProperties.


        :param direct: The direct of this PeeringProperties.
        :type direct: PeeringPropertiesDirect
        """

        self._direct = direct

    @property
    def exchange(self):
        """Gets the exchange of this PeeringProperties.


        :return: The exchange of this PeeringProperties.
        :rtype: PeeringPropertiesExchange
        """
        return self._exchange

    @exchange.setter
    def exchange(self, exchange):
        """Sets the exchange of this PeeringProperties.


        :param exchange: The exchange of this PeeringProperties.
        :type exchange: PeeringPropertiesExchange
        """

        self._exchange = exchange

    @property
    def peering_location(self):
        """Gets the peering_location of this PeeringProperties.

        The location of the peering.

        :return: The peering_location of this PeeringProperties.
        :rtype: str
        """
        return self._peering_location

    @peering_location.setter
    def peering_location(self, peering_location):
        """Sets the peering_location of this PeeringProperties.

        The location of the peering.

        :param peering_location: The peering_location of this PeeringProperties.
        :type peering_location: str
        """

        self._peering_location = peering_location

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this PeeringProperties.

        The provisioning state of the resource.

        :return: The provisioning_state of this PeeringProperties.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this PeeringProperties.

        The provisioning state of the resource.

        :param provisioning_state: The provisioning_state of this PeeringProperties.
        :type provisioning_state: str
        """
        allowed_values = ["Succeeded", "Updating", "Deleting", "Failed"]  # noqa: E501
        if provisioning_state not in allowed_values:
            raise ValueError(
                "Invalid value for `provisioning_state` ({0}), must be one of {1}"
                .format(provisioning_state, allowed_values)
            )

        self._provisioning_state = provisioning_state
