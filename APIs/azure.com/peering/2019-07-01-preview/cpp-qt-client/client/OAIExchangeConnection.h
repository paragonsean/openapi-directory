/**
 * PeeringManagementClient
 * APIs to manage Peering resources through the Azure Resource Manager.
 *
 * The version of the OpenAPI document: 2019-07-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIExchangeConnection.h
 *
 * The properties that define an exchange connection.
 */

#ifndef OAIExchangeConnection_H
#define OAIExchangeConnection_H

#include <QJsonObject>

#include "OAIBgpSession.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIBgpSession;

class OAIExchangeConnection : public OAIObject {
public:
    OAIExchangeConnection();
    OAIExchangeConnection(QString json);
    ~OAIExchangeConnection() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIBgpSession getBgpSession() const;
    void setBgpSession(const OAIBgpSession &bgp_session);
    bool is_bgp_session_Set() const;
    bool is_bgp_session_Valid() const;

    QString getConnectionIdentifier() const;
    void setConnectionIdentifier(const QString &connection_identifier);
    bool is_connection_identifier_Set() const;
    bool is_connection_identifier_Valid() const;

    QString getConnectionState() const;
    void setConnectionState(const QString &connection_state);
    bool is_connection_state_Set() const;
    bool is_connection_state_Valid() const;

    qint32 getPeeringDbFacilityId() const;
    void setPeeringDbFacilityId(const qint32 &peering_db_facility_id);
    bool is_peering_db_facility_id_Set() const;
    bool is_peering_db_facility_id_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIBgpSession m_bgp_session;
    bool m_bgp_session_isSet;
    bool m_bgp_session_isValid;

    QString m_connection_identifier;
    bool m_connection_identifier_isSet;
    bool m_connection_identifier_isValid;

    QString m_connection_state;
    bool m_connection_state_isSet;
    bool m_connection_state_isValid;

    qint32 m_peering_db_facility_id;
    bool m_peering_db_facility_id_isSet;
    bool m_peering_db_facility_id_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIExchangeConnection)

#endif // OAIExchangeConnection_H
