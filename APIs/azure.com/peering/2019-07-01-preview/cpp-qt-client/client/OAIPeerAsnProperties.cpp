/**
 * PeeringManagementClient
 * APIs to manage Peering resources through the Azure Resource Manager.
 *
 * The version of the OpenAPI document: 2019-07-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPeerAsnProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPeerAsnProperties::OAIPeerAsnProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPeerAsnProperties::OAIPeerAsnProperties() {
    this->initializeModel();
}

OAIPeerAsnProperties::~OAIPeerAsnProperties() {}

void OAIPeerAsnProperties::initializeModel() {

    m_peer_asn_isSet = false;
    m_peer_asn_isValid = false;

    m_peer_contact_info_isSet = false;
    m_peer_contact_info_isValid = false;

    m_peer_name_isSet = false;
    m_peer_name_isValid = false;

    m_validation_state_isSet = false;
    m_validation_state_isValid = false;
}

void OAIPeerAsnProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPeerAsnProperties::fromJsonObject(QJsonObject json) {

    m_peer_asn_isValid = ::OpenAPI::fromJsonValue(m_peer_asn, json[QString("peerAsn")]);
    m_peer_asn_isSet = !json[QString("peerAsn")].isNull() && m_peer_asn_isValid;

    m_peer_contact_info_isValid = ::OpenAPI::fromJsonValue(m_peer_contact_info, json[QString("peerContactInfo")]);
    m_peer_contact_info_isSet = !json[QString("peerContactInfo")].isNull() && m_peer_contact_info_isValid;

    m_peer_name_isValid = ::OpenAPI::fromJsonValue(m_peer_name, json[QString("peerName")]);
    m_peer_name_isSet = !json[QString("peerName")].isNull() && m_peer_name_isValid;

    m_validation_state_isValid = ::OpenAPI::fromJsonValue(m_validation_state, json[QString("validationState")]);
    m_validation_state_isSet = !json[QString("validationState")].isNull() && m_validation_state_isValid;
}

QString OAIPeerAsnProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPeerAsnProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_peer_asn_isSet) {
        obj.insert(QString("peerAsn"), ::OpenAPI::toJsonValue(m_peer_asn));
    }
    if (m_peer_contact_info.isSet()) {
        obj.insert(QString("peerContactInfo"), ::OpenAPI::toJsonValue(m_peer_contact_info));
    }
    if (m_peer_name_isSet) {
        obj.insert(QString("peerName"), ::OpenAPI::toJsonValue(m_peer_name));
    }
    if (m_validation_state_isSet) {
        obj.insert(QString("validationState"), ::OpenAPI::toJsonValue(m_validation_state));
    }
    return obj;
}

qint32 OAIPeerAsnProperties::getPeerAsn() const {
    return m_peer_asn;
}
void OAIPeerAsnProperties::setPeerAsn(const qint32 &peer_asn) {
    m_peer_asn = peer_asn;
    m_peer_asn_isSet = true;
}

bool OAIPeerAsnProperties::is_peer_asn_Set() const{
    return m_peer_asn_isSet;
}

bool OAIPeerAsnProperties::is_peer_asn_Valid() const{
    return m_peer_asn_isValid;
}

OAIContactInfo OAIPeerAsnProperties::getPeerContactInfo() const {
    return m_peer_contact_info;
}
void OAIPeerAsnProperties::setPeerContactInfo(const OAIContactInfo &peer_contact_info) {
    m_peer_contact_info = peer_contact_info;
    m_peer_contact_info_isSet = true;
}

bool OAIPeerAsnProperties::is_peer_contact_info_Set() const{
    return m_peer_contact_info_isSet;
}

bool OAIPeerAsnProperties::is_peer_contact_info_Valid() const{
    return m_peer_contact_info_isValid;
}

QString OAIPeerAsnProperties::getPeerName() const {
    return m_peer_name;
}
void OAIPeerAsnProperties::setPeerName(const QString &peer_name) {
    m_peer_name = peer_name;
    m_peer_name_isSet = true;
}

bool OAIPeerAsnProperties::is_peer_name_Set() const{
    return m_peer_name_isSet;
}

bool OAIPeerAsnProperties::is_peer_name_Valid() const{
    return m_peer_name_isValid;
}

QString OAIPeerAsnProperties::getValidationState() const {
    return m_validation_state;
}
void OAIPeerAsnProperties::setValidationState(const QString &validation_state) {
    m_validation_state = validation_state;
    m_validation_state_isSet = true;
}

bool OAIPeerAsnProperties::is_validation_state_Set() const{
    return m_validation_state_isSet;
}

bool OAIPeerAsnProperties::is_validation_state_Valid() const{
    return m_validation_state_isValid;
}

bool OAIPeerAsnProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_peer_asn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_peer_contact_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_peer_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_validation_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPeerAsnProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
