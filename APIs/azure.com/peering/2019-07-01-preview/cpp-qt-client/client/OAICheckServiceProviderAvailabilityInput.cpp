/**
 * PeeringManagementClient
 * APIs to manage Peering resources through the Azure Resource Manager.
 *
 * The version of the OpenAPI document: 2019-07-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICheckServiceProviderAvailabilityInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICheckServiceProviderAvailabilityInput::OAICheckServiceProviderAvailabilityInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICheckServiceProviderAvailabilityInput::OAICheckServiceProviderAvailabilityInput() {
    this->initializeModel();
}

OAICheckServiceProviderAvailabilityInput::~OAICheckServiceProviderAvailabilityInput() {}

void OAICheckServiceProviderAvailabilityInput::initializeModel() {

    m_peering_service_location_isSet = false;
    m_peering_service_location_isValid = false;

    m_peering_service_provider_isSet = false;
    m_peering_service_provider_isValid = false;
}

void OAICheckServiceProviderAvailabilityInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICheckServiceProviderAvailabilityInput::fromJsonObject(QJsonObject json) {

    m_peering_service_location_isValid = ::OpenAPI::fromJsonValue(m_peering_service_location, json[QString("peeringServiceLocation")]);
    m_peering_service_location_isSet = !json[QString("peeringServiceLocation")].isNull() && m_peering_service_location_isValid;

    m_peering_service_provider_isValid = ::OpenAPI::fromJsonValue(m_peering_service_provider, json[QString("peeringServiceProvider")]);
    m_peering_service_provider_isSet = !json[QString("peeringServiceProvider")].isNull() && m_peering_service_provider_isValid;
}

QString OAICheckServiceProviderAvailabilityInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICheckServiceProviderAvailabilityInput::asJsonObject() const {
    QJsonObject obj;
    if (m_peering_service_location_isSet) {
        obj.insert(QString("peeringServiceLocation"), ::OpenAPI::toJsonValue(m_peering_service_location));
    }
    if (m_peering_service_provider_isSet) {
        obj.insert(QString("peeringServiceProvider"), ::OpenAPI::toJsonValue(m_peering_service_provider));
    }
    return obj;
}

QString OAICheckServiceProviderAvailabilityInput::getPeeringServiceLocation() const {
    return m_peering_service_location;
}
void OAICheckServiceProviderAvailabilityInput::setPeeringServiceLocation(const QString &peering_service_location) {
    m_peering_service_location = peering_service_location;
    m_peering_service_location_isSet = true;
}

bool OAICheckServiceProviderAvailabilityInput::is_peering_service_location_Set() const{
    return m_peering_service_location_isSet;
}

bool OAICheckServiceProviderAvailabilityInput::is_peering_service_location_Valid() const{
    return m_peering_service_location_isValid;
}

QString OAICheckServiceProviderAvailabilityInput::getPeeringServiceProvider() const {
    return m_peering_service_provider;
}
void OAICheckServiceProviderAvailabilityInput::setPeeringServiceProvider(const QString &peering_service_provider) {
    m_peering_service_provider = peering_service_provider;
    m_peering_service_provider_isSet = true;
}

bool OAICheckServiceProviderAvailabilityInput::is_peering_service_provider_Set() const{
    return m_peering_service_provider_isSet;
}

bool OAICheckServiceProviderAvailabilityInput::is_peering_service_provider_Valid() const{
    return m_peering_service_provider_isValid;
}

bool OAICheckServiceProviderAvailabilityInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_peering_service_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_peering_service_provider_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICheckServiceProviderAvailabilityInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
