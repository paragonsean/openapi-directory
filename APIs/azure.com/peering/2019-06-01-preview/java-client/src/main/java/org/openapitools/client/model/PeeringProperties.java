/*
 * PeeringManagementClient
 * APIs to manage Peering resources through the Azure Resource Manager.
 *
 * The version of the OpenAPI document: 2019-06-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.PeeringPropertiesDirect;
import org.openapitools.client.model.PeeringPropertiesExchange;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The properties that define connectivity to the Microsoft Cloud Edge.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:11:09.892515-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PeeringProperties {
  public static final String SERIALIZED_NAME_DIRECT = "direct";
  @SerializedName(SERIALIZED_NAME_DIRECT)
  private PeeringPropertiesDirect direct;

  public static final String SERIALIZED_NAME_EXCHANGE = "exchange";
  @SerializedName(SERIALIZED_NAME_EXCHANGE)
  private PeeringPropertiesExchange exchange;

  public static final String SERIALIZED_NAME_PEERING_LOCATION = "peeringLocation";
  @SerializedName(SERIALIZED_NAME_PEERING_LOCATION)
  private String peeringLocation;

  /**
   * The provisioning state of the resource.
   */
  @JsonAdapter(ProvisioningStateEnum.Adapter.class)
  public enum ProvisioningStateEnum {
    SUCCEEDED("Succeeded"),
    
    UPDATING("Updating"),
    
    DELETING("Deleting"),
    
    FAILED("Failed");

    private String value;

    ProvisioningStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProvisioningStateEnum fromValue(String value) {
      for (ProvisioningStateEnum b : ProvisioningStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProvisioningStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProvisioningStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProvisioningStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProvisioningStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProvisioningStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private ProvisioningStateEnum provisioningState;

  public PeeringProperties() {
  }

  public PeeringProperties(
     ProvisioningStateEnum provisioningState
  ) {
    this();
    this.provisioningState = provisioningState;
  }

  public PeeringProperties direct(PeeringPropertiesDirect direct) {
    this.direct = direct;
    return this;
  }

  /**
   * Get direct
   * @return direct
   */
  @javax.annotation.Nullable
  public PeeringPropertiesDirect getDirect() {
    return direct;
  }

  public void setDirect(PeeringPropertiesDirect direct) {
    this.direct = direct;
  }


  public PeeringProperties exchange(PeeringPropertiesExchange exchange) {
    this.exchange = exchange;
    return this;
  }

  /**
   * Get exchange
   * @return exchange
   */
  @javax.annotation.Nullable
  public PeeringPropertiesExchange getExchange() {
    return exchange;
  }

  public void setExchange(PeeringPropertiesExchange exchange) {
    this.exchange = exchange;
  }


  public PeeringProperties peeringLocation(String peeringLocation) {
    this.peeringLocation = peeringLocation;
    return this;
  }

  /**
   * The location of the peering.
   * @return peeringLocation
   */
  @javax.annotation.Nullable
  public String getPeeringLocation() {
    return peeringLocation;
  }

  public void setPeeringLocation(String peeringLocation) {
    this.peeringLocation = peeringLocation;
  }


  /**
   * The provisioning state of the resource.
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public ProvisioningStateEnum getProvisioningState() {
    return provisioningState;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PeeringProperties peeringProperties = (PeeringProperties) o;
    return Objects.equals(this.direct, peeringProperties.direct) &&
        Objects.equals(this.exchange, peeringProperties.exchange) &&
        Objects.equals(this.peeringLocation, peeringProperties.peeringLocation) &&
        Objects.equals(this.provisioningState, peeringProperties.provisioningState);
  }

  @Override
  public int hashCode() {
    return Objects.hash(direct, exchange, peeringLocation, provisioningState);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PeeringProperties {\n");
    sb.append("    direct: ").append(toIndentedString(direct)).append("\n");
    sb.append("    exchange: ").append(toIndentedString(exchange)).append("\n");
    sb.append("    peeringLocation: ").append(toIndentedString(peeringLocation)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("direct");
    openapiFields.add("exchange");
    openapiFields.add("peeringLocation");
    openapiFields.add("provisioningState");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PeeringProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PeeringProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PeeringProperties is not found in the empty JSON string", PeeringProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PeeringProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PeeringProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `direct`
      if (jsonObj.get("direct") != null && !jsonObj.get("direct").isJsonNull()) {
        PeeringPropertiesDirect.validateJsonElement(jsonObj.get("direct"));
      }
      // validate the optional field `exchange`
      if (jsonObj.get("exchange") != null && !jsonObj.get("exchange").isJsonNull()) {
        PeeringPropertiesExchange.validateJsonElement(jsonObj.get("exchange"));
      }
      if ((jsonObj.get("peeringLocation") != null && !jsonObj.get("peeringLocation").isJsonNull()) && !jsonObj.get("peeringLocation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `peeringLocation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("peeringLocation").toString()));
      }
      if ((jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) && !jsonObj.get("provisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningState").toString()));
      }
      // validate the optional field `provisioningState`
      if (jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) {
        ProvisioningStateEnum.validateJsonElement(jsonObj.get("provisioningState"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PeeringProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PeeringProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PeeringProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PeeringProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<PeeringProperties>() {
           @Override
           public void write(JsonWriter out, PeeringProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PeeringProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PeeringProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PeeringProperties
   * @throws IOException if the JSON string is invalid with respect to PeeringProperties
   */
  public static PeeringProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PeeringProperties.class);
  }

  /**
   * Convert an instance of PeeringProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

