/**
 * PeeringManagementClient
 * APIs to manage Peering resources through the Azure Resource Manager.
 *
 * The version of the OpenAPI document: 2019-06-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The BgpSession model module.
 * @module model/BgpSession
 * @version 2019-06-01-preview
 */
class BgpSession {
    /**
     * Constructs a new <code>BgpSession</code>.
     * The properties that define a BGP session.
     * @alias module:model/BgpSession
     */
    constructor() { 
        
        BgpSession.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BgpSession</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BgpSession} obj Optional instance to populate.
     * @return {module:model/BgpSession} The populated <code>BgpSession</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BgpSession();

            if (data.hasOwnProperty('maxPrefixesAdvertisedV4')) {
                obj['maxPrefixesAdvertisedV4'] = ApiClient.convertToType(data['maxPrefixesAdvertisedV4'], 'Number');
            }
            if (data.hasOwnProperty('maxPrefixesAdvertisedV6')) {
                obj['maxPrefixesAdvertisedV6'] = ApiClient.convertToType(data['maxPrefixesAdvertisedV6'], 'Number');
            }
            if (data.hasOwnProperty('md5AuthenticationKey')) {
                obj['md5AuthenticationKey'] = ApiClient.convertToType(data['md5AuthenticationKey'], 'String');
            }
            if (data.hasOwnProperty('microsoftSessionIPv4Address')) {
                obj['microsoftSessionIPv4Address'] = ApiClient.convertToType(data['microsoftSessionIPv4Address'], 'String');
            }
            if (data.hasOwnProperty('microsoftSessionIPv6Address')) {
                obj['microsoftSessionIPv6Address'] = ApiClient.convertToType(data['microsoftSessionIPv6Address'], 'String');
            }
            if (data.hasOwnProperty('peerSessionIPv4Address')) {
                obj['peerSessionIPv4Address'] = ApiClient.convertToType(data['peerSessionIPv4Address'], 'String');
            }
            if (data.hasOwnProperty('peerSessionIPv6Address')) {
                obj['peerSessionIPv6Address'] = ApiClient.convertToType(data['peerSessionIPv6Address'], 'String');
            }
            if (data.hasOwnProperty('sessionPrefixV4')) {
                obj['sessionPrefixV4'] = ApiClient.convertToType(data['sessionPrefixV4'], 'String');
            }
            if (data.hasOwnProperty('sessionPrefixV6')) {
                obj['sessionPrefixV6'] = ApiClient.convertToType(data['sessionPrefixV6'], 'String');
            }
            if (data.hasOwnProperty('sessionStateV4')) {
                obj['sessionStateV4'] = ApiClient.convertToType(data['sessionStateV4'], 'String');
            }
            if (data.hasOwnProperty('sessionStateV6')) {
                obj['sessionStateV6'] = ApiClient.convertToType(data['sessionStateV6'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BgpSession</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BgpSession</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['md5AuthenticationKey'] && !(typeof data['md5AuthenticationKey'] === 'string' || data['md5AuthenticationKey'] instanceof String)) {
            throw new Error("Expected the field `md5AuthenticationKey` to be a primitive type in the JSON string but got " + data['md5AuthenticationKey']);
        }
        // ensure the json data is a string
        if (data['microsoftSessionIPv4Address'] && !(typeof data['microsoftSessionIPv4Address'] === 'string' || data['microsoftSessionIPv4Address'] instanceof String)) {
            throw new Error("Expected the field `microsoftSessionIPv4Address` to be a primitive type in the JSON string but got " + data['microsoftSessionIPv4Address']);
        }
        // ensure the json data is a string
        if (data['microsoftSessionIPv6Address'] && !(typeof data['microsoftSessionIPv6Address'] === 'string' || data['microsoftSessionIPv6Address'] instanceof String)) {
            throw new Error("Expected the field `microsoftSessionIPv6Address` to be a primitive type in the JSON string but got " + data['microsoftSessionIPv6Address']);
        }
        // ensure the json data is a string
        if (data['peerSessionIPv4Address'] && !(typeof data['peerSessionIPv4Address'] === 'string' || data['peerSessionIPv4Address'] instanceof String)) {
            throw new Error("Expected the field `peerSessionIPv4Address` to be a primitive type in the JSON string but got " + data['peerSessionIPv4Address']);
        }
        // ensure the json data is a string
        if (data['peerSessionIPv6Address'] && !(typeof data['peerSessionIPv6Address'] === 'string' || data['peerSessionIPv6Address'] instanceof String)) {
            throw new Error("Expected the field `peerSessionIPv6Address` to be a primitive type in the JSON string but got " + data['peerSessionIPv6Address']);
        }
        // ensure the json data is a string
        if (data['sessionPrefixV4'] && !(typeof data['sessionPrefixV4'] === 'string' || data['sessionPrefixV4'] instanceof String)) {
            throw new Error("Expected the field `sessionPrefixV4` to be a primitive type in the JSON string but got " + data['sessionPrefixV4']);
        }
        // ensure the json data is a string
        if (data['sessionPrefixV6'] && !(typeof data['sessionPrefixV6'] === 'string' || data['sessionPrefixV6'] instanceof String)) {
            throw new Error("Expected the field `sessionPrefixV6` to be a primitive type in the JSON string but got " + data['sessionPrefixV6']);
        }
        // ensure the json data is a string
        if (data['sessionStateV4'] && !(typeof data['sessionStateV4'] === 'string' || data['sessionStateV4'] instanceof String)) {
            throw new Error("Expected the field `sessionStateV4` to be a primitive type in the JSON string but got " + data['sessionStateV4']);
        }
        // ensure the json data is a string
        if (data['sessionStateV6'] && !(typeof data['sessionStateV6'] === 'string' || data['sessionStateV6'] instanceof String)) {
            throw new Error("Expected the field `sessionStateV6` to be a primitive type in the JSON string but got " + data['sessionStateV6']);
        }

        return true;
    }


}



/**
 * The maximum number of prefixes advertised over the IPv4 session.
 * @member {Number} maxPrefixesAdvertisedV4
 */
BgpSession.prototype['maxPrefixesAdvertisedV4'] = undefined;

/**
 * The maximum number of prefixes advertised over the IPv6 session.
 * @member {Number} maxPrefixesAdvertisedV6
 */
BgpSession.prototype['maxPrefixesAdvertisedV6'] = undefined;

/**
 * The MD5 authentication key of the session.
 * @member {String} md5AuthenticationKey
 */
BgpSession.prototype['md5AuthenticationKey'] = undefined;

/**
 * The IPv4 session address on Microsoft's end.
 * @member {String} microsoftSessionIPv4Address
 */
BgpSession.prototype['microsoftSessionIPv4Address'] = undefined;

/**
 * The IPv6 session address on Microsoft's end.
 * @member {String} microsoftSessionIPv6Address
 */
BgpSession.prototype['microsoftSessionIPv6Address'] = undefined;

/**
 * The IPv4 session address on peer's end.
 * @member {String} peerSessionIPv4Address
 */
BgpSession.prototype['peerSessionIPv4Address'] = undefined;

/**
 * The IPv6 session address on peer's end.
 * @member {String} peerSessionIPv6Address
 */
BgpSession.prototype['peerSessionIPv6Address'] = undefined;

/**
 * The IPv4 prefix that contains both ends' IPv4 addresses.
 * @member {String} sessionPrefixV4
 */
BgpSession.prototype['sessionPrefixV4'] = undefined;

/**
 * The IPv6 prefix that contains both ends' IPv6 addresses.
 * @member {String} sessionPrefixV6
 */
BgpSession.prototype['sessionPrefixV6'] = undefined;

/**
 * The state of the IPv4 session.
 * @member {module:model/BgpSession.SessionStateV4Enum} sessionStateV4
 */
BgpSession.prototype['sessionStateV4'] = undefined;

/**
 * The state of the IPv6 session.
 * @member {module:model/BgpSession.SessionStateV6Enum} sessionStateV6
 */
BgpSession.prototype['sessionStateV6'] = undefined;





/**
 * Allowed values for the <code>sessionStateV4</code> property.
 * @enum {String}
 * @readonly
 */
BgpSession['SessionStateV4Enum'] = {

    /**
     * value: "None"
     * @const
     */
    "None": "None",

    /**
     * value: "Idle"
     * @const
     */
    "Idle": "Idle",

    /**
     * value: "Connect"
     * @const
     */
    "Connect": "Connect",

    /**
     * value: "Active"
     * @const
     */
    "Active": "Active",

    /**
     * value: "OpenSent"
     * @const
     */
    "OpenSent": "OpenSent",

    /**
     * value: "OpenConfirm"
     * @const
     */
    "OpenConfirm": "OpenConfirm",

    /**
     * value: "OpenReceived"
     * @const
     */
    "OpenReceived": "OpenReceived",

    /**
     * value: "Established"
     * @const
     */
    "Established": "Established",

    /**
     * value: "PendingAdd"
     * @const
     */
    "PendingAdd": "PendingAdd",

    /**
     * value: "PendingUpdate"
     * @const
     */
    "PendingUpdate": "PendingUpdate",

    /**
     * value: "PendingRemove"
     * @const
     */
    "PendingRemove": "PendingRemove"
};


/**
 * Allowed values for the <code>sessionStateV6</code> property.
 * @enum {String}
 * @readonly
 */
BgpSession['SessionStateV6Enum'] = {

    /**
     * value: "None"
     * @const
     */
    "None": "None",

    /**
     * value: "Idle"
     * @const
     */
    "Idle": "Idle",

    /**
     * value: "Connect"
     * @const
     */
    "Connect": "Connect",

    /**
     * value: "Active"
     * @const
     */
    "Active": "Active",

    /**
     * value: "OpenSent"
     * @const
     */
    "OpenSent": "OpenSent",

    /**
     * value: "OpenConfirm"
     * @const
     */
    "OpenConfirm": "OpenConfirm",

    /**
     * value: "OpenReceived"
     * @const
     */
    "OpenReceived": "OpenReceived",

    /**
     * value: "Established"
     * @const
     */
    "Established": "Established",

    /**
     * value: "PendingAdd"
     * @const
     */
    "PendingAdd": "PendingAdd",

    /**
     * value: "PendingUpdate"
     * @const
     */
    "PendingUpdate": "PendingUpdate",

    /**
     * value: "PendingRemove"
     * @const
     */
    "PendingRemove": "PendingRemove"
};



export default BgpSession;

