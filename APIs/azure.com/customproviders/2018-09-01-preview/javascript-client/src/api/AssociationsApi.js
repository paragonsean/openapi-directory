/**
 * customproviders
 * Allows extension of ARM control plane with custom resource providers.
 *
 * The version of the OpenAPI document: 2018-09-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Association from '../model/Association';
import AssociationsList from '../model/AssociationsList';
import ErrorResponse from '../model/ErrorResponse';

/**
* Associations service.
* @module api/AssociationsApi
* @version 2018-09-01-preview
*/
export default class AssociationsApi {

    /**
    * Constructs a new AssociationsApi. 
    * @alias module:api/AssociationsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the associationsCreateOrUpdate operation.
     * @callback module:api/AssociationsApi~associationsCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Association} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update an association.
     * @param {String} scope The scope of the association. The scope can be any valid REST resource instance. For example, use '/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}/providers/Microsoft.Compute/virtualMachines/{vm-name}' for a virtual machine resource.
     * @param {String} associationName The name of the association.
     * @param {String} apiVersion The API version to be used with the HTTP request.
     * @param {module:model/Association} association The parameters required to create or update an association.
     * @param {module:api/AssociationsApi~associationsCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Association}
     */
    associationsCreateOrUpdate(scope, associationName, apiVersion, association, callback) {
      let postBody = association;
      // verify the required parameter 'scope' is set
      if (scope === undefined || scope === null) {
        throw new Error("Missing the required parameter 'scope' when calling associationsCreateOrUpdate");
      }
      // verify the required parameter 'associationName' is set
      if (associationName === undefined || associationName === null) {
        throw new Error("Missing the required parameter 'associationName' when calling associationsCreateOrUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling associationsCreateOrUpdate");
      }
      // verify the required parameter 'association' is set
      if (association === undefined || association === null) {
        throw new Error("Missing the required parameter 'association' when calling associationsCreateOrUpdate");
      }

      let pathParams = {
        'scope': scope,
        'associationName': associationName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Association;
      return this.apiClient.callApi(
        '/{scope}/providers/Microsoft.CustomProviders/associations/{associationName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the associationsDelete operation.
     * @callback module:api/AssociationsApi~associationsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an association.
     * @param {String} scope The scope of the association.
     * @param {String} associationName The name of the association.
     * @param {String} apiVersion The API version to be used with the HTTP request.
     * @param {module:api/AssociationsApi~associationsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    associationsDelete(scope, associationName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'scope' is set
      if (scope === undefined || scope === null) {
        throw new Error("Missing the required parameter 'scope' when calling associationsDelete");
      }
      // verify the required parameter 'associationName' is set
      if (associationName === undefined || associationName === null) {
        throw new Error("Missing the required parameter 'associationName' when calling associationsDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling associationsDelete");
      }

      let pathParams = {
        'scope': scope,
        'associationName': associationName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/{scope}/providers/Microsoft.CustomProviders/associations/{associationName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the associationsGet operation.
     * @callback module:api/AssociationsApi~associationsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Association} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an association.
     * @param {String} scope The scope of the association.
     * @param {String} associationName The name of the association.
     * @param {String} apiVersion The API version to be used with the HTTP request.
     * @param {module:api/AssociationsApi~associationsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Association}
     */
    associationsGet(scope, associationName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'scope' is set
      if (scope === undefined || scope === null) {
        throw new Error("Missing the required parameter 'scope' when calling associationsGet");
      }
      // verify the required parameter 'associationName' is set
      if (associationName === undefined || associationName === null) {
        throw new Error("Missing the required parameter 'associationName' when calling associationsGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling associationsGet");
      }

      let pathParams = {
        'scope': scope,
        'associationName': associationName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Association;
      return this.apiClient.callApi(
        '/{scope}/providers/Microsoft.CustomProviders/associations/{associationName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the associationsListAll operation.
     * @callback module:api/AssociationsApi~associationsListAllCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssociationsList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all association for the given scope.
     * @param {String} scope The scope of the association.
     * @param {String} apiVersion The API version to be used with the HTTP request.
     * @param {module:api/AssociationsApi~associationsListAllCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssociationsList}
     */
    associationsListAll(scope, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'scope' is set
      if (scope === undefined || scope === null) {
        throw new Error("Missing the required parameter 'scope' when calling associationsListAll");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling associationsListAll");
      }

      let pathParams = {
        'scope': scope
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AssociationsList;
      return this.apiClient.callApi(
        '/{scope}/providers/Microsoft.CustomProviders/associations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
