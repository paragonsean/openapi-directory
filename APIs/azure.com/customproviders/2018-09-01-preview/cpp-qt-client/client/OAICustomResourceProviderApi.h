/**
 * customproviders
 * Allows extension of ARM control plane with custom resource providers.
 *
 * The version of the OpenAPI document: 2018-09-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAICustomResourceProviderApi_H
#define OAI_OAICustomResourceProviderApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICustomRPManifest.h"
#include "OAIErrorResponse.h"
#include "OAIListByCustomRPManifest.h"
#include "OAIResourceProvidersUpdate.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAICustomResourceProviderApi : public QObject {
    Q_OBJECT

public:
    OAICustomResourceProviderApi(const int timeOut = 0);
    ~OAICustomResourceProviderApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  resource_provider_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  resource_provider OAICustomRPManifest [required]
    */
    virtual void customResourceProviderCreateOrUpdate(const QString &subscription_id, const QString &resource_group_name, const QString &resource_provider_name, const QString &api_version, const OAICustomRPManifest &resource_provider);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  resource_provider_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void customResourceProviderDelete(const QString &subscription_id, const QString &resource_group_name, const QString &resource_provider_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  resource_provider_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void customResourceProviderGet(const QString &subscription_id, const QString &resource_group_name, const QString &resource_provider_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void customResourceProviderListByResourceGroup(const QString &subscription_id, const QString &resource_group_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void customResourceProviderListBySubscription(const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  resource_provider_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  patchable_resource OAIResourceProvidersUpdate [required]
    */
    virtual void customResourceProviderUpdate(const QString &subscription_id, const QString &resource_group_name, const QString &resource_provider_name, const QString &api_version, const OAIResourceProvidersUpdate &patchable_resource);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void customResourceProviderCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void customResourceProviderDeleteCallback(OAIHttpRequestWorker *worker);
    void customResourceProviderGetCallback(OAIHttpRequestWorker *worker);
    void customResourceProviderListByResourceGroupCallback(OAIHttpRequestWorker *worker);
    void customResourceProviderListBySubscriptionCallback(OAIHttpRequestWorker *worker);
    void customResourceProviderUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void customResourceProviderCreateOrUpdateSignal(OAICustomRPManifest summary);
    void customResourceProviderDeleteSignal();
    void customResourceProviderGetSignal(OAICustomRPManifest summary);
    void customResourceProviderListByResourceGroupSignal(OAIListByCustomRPManifest summary);
    void customResourceProviderListBySubscriptionSignal(OAIListByCustomRPManifest summary);
    void customResourceProviderUpdateSignal(OAICustomRPManifest summary);


    void customResourceProviderCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAICustomRPManifest summary);
    void customResourceProviderDeleteSignalFull(OAIHttpRequestWorker *worker);
    void customResourceProviderGetSignalFull(OAIHttpRequestWorker *worker, OAICustomRPManifest summary);
    void customResourceProviderListByResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAIListByCustomRPManifest summary);
    void customResourceProviderListBySubscriptionSignalFull(OAIHttpRequestWorker *worker, OAIListByCustomRPManifest summary);
    void customResourceProviderUpdateSignalFull(OAIHttpRequestWorker *worker, OAICustomRPManifest summary);

    Q_DECL_DEPRECATED_X("Use customResourceProviderCreateOrUpdateSignalError() instead")
    void customResourceProviderCreateOrUpdateSignalE(OAICustomRPManifest summary, QNetworkReply::NetworkError error_type, QString error_str);
    void customResourceProviderCreateOrUpdateSignalError(OAICustomRPManifest summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customResourceProviderDeleteSignalError() instead")
    void customResourceProviderDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void customResourceProviderDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customResourceProviderGetSignalError() instead")
    void customResourceProviderGetSignalE(OAICustomRPManifest summary, QNetworkReply::NetworkError error_type, QString error_str);
    void customResourceProviderGetSignalError(OAICustomRPManifest summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customResourceProviderListByResourceGroupSignalError() instead")
    void customResourceProviderListByResourceGroupSignalE(OAIListByCustomRPManifest summary, QNetworkReply::NetworkError error_type, QString error_str);
    void customResourceProviderListByResourceGroupSignalError(OAIListByCustomRPManifest summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customResourceProviderListBySubscriptionSignalError() instead")
    void customResourceProviderListBySubscriptionSignalE(OAIListByCustomRPManifest summary, QNetworkReply::NetworkError error_type, QString error_str);
    void customResourceProviderListBySubscriptionSignalError(OAIListByCustomRPManifest summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customResourceProviderUpdateSignalError() instead")
    void customResourceProviderUpdateSignalE(OAICustomRPManifest summary, QNetworkReply::NetworkError error_type, QString error_str);
    void customResourceProviderUpdateSignalError(OAICustomRPManifest summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use customResourceProviderCreateOrUpdateSignalErrorFull() instead")
    void customResourceProviderCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void customResourceProviderCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customResourceProviderDeleteSignalErrorFull() instead")
    void customResourceProviderDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void customResourceProviderDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customResourceProviderGetSignalErrorFull() instead")
    void customResourceProviderGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void customResourceProviderGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customResourceProviderListByResourceGroupSignalErrorFull() instead")
    void customResourceProviderListByResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void customResourceProviderListByResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customResourceProviderListBySubscriptionSignalErrorFull() instead")
    void customResourceProviderListBySubscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void customResourceProviderListBySubscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customResourceProviderUpdateSignalErrorFull() instead")
    void customResourceProviderUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void customResourceProviderUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
