/**
 * customproviders
 * Allows extension of ARM control plane with custom resource providers.
 *
 * The version of the OpenAPI document: 2018-09-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAssociationsApi_H
#define OAI_OAIAssociationsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAssociation.h"
#include "OAIAssociationsList.h"
#include "OAIErrorResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAssociationsApi : public QObject {
    Q_OBJECT

public:
    OAIAssociationsApi(const int timeOut = 0);
    ~OAIAssociationsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  scope QString [required]
    * @param[in]  association_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  association OAIAssociation [required]
    */
    virtual void associationsCreateOrUpdate(const QString &scope, const QString &association_name, const QString &api_version, const OAIAssociation &association);

    /**
    * @param[in]  scope QString [required]
    * @param[in]  association_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void associationsDelete(const QString &scope, const QString &association_name, const QString &api_version);

    /**
    * @param[in]  scope QString [required]
    * @param[in]  association_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void associationsGet(const QString &scope, const QString &association_name, const QString &api_version);

    /**
    * @param[in]  scope QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void associationsListAll(const QString &scope, const QString &api_version);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void associationsCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void associationsDeleteCallback(OAIHttpRequestWorker *worker);
    void associationsGetCallback(OAIHttpRequestWorker *worker);
    void associationsListAllCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void associationsCreateOrUpdateSignal(OAIAssociation summary);
    void associationsDeleteSignal();
    void associationsGetSignal(OAIAssociation summary);
    void associationsListAllSignal(OAIAssociationsList summary);


    void associationsCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIAssociation summary);
    void associationsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void associationsGetSignalFull(OAIHttpRequestWorker *worker, OAIAssociation summary);
    void associationsListAllSignalFull(OAIHttpRequestWorker *worker, OAIAssociationsList summary);

    Q_DECL_DEPRECATED_X("Use associationsCreateOrUpdateSignalError() instead")
    void associationsCreateOrUpdateSignalE(OAIAssociation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void associationsCreateOrUpdateSignalError(OAIAssociation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use associationsDeleteSignalError() instead")
    void associationsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void associationsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use associationsGetSignalError() instead")
    void associationsGetSignalE(OAIAssociation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void associationsGetSignalError(OAIAssociation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use associationsListAllSignalError() instead")
    void associationsListAllSignalE(OAIAssociationsList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void associationsListAllSignalError(OAIAssociationsList summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use associationsCreateOrUpdateSignalErrorFull() instead")
    void associationsCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void associationsCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use associationsDeleteSignalErrorFull() instead")
    void associationsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void associationsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use associationsGetSignalErrorFull() instead")
    void associationsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void associationsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use associationsListAllSignalErrorFull() instead")
    void associationsListAllSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void associationsListAllSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
