/*
 * customproviders
 * Allows extension of ARM control plane with custom resource providers.
 *
 * The version of the OpenAPI document: 2018-09-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CustomRPManifest;
import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.ListByCustomRPManifest;
import org.openapitools.client.model.ResourceProvidersUpdate;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CustomResourceProviderApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CustomResourceProviderApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CustomResourceProviderApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for customResourceProviderCreateOrUpdate
     * @param subscriptionId The Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000) (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param resourceProviderName The name of the resource provider. (required)
     * @param apiVersion The API version to be used with the HTTP request. (required)
     * @param resourceProvider The parameters required to create or update a custom resource provider definition. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response definition. Resource already exists and the changes have been accepted </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created response definition. Resource has been created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customResourceProviderCreateOrUpdateCall(String subscriptionId, String resourceGroupName, String resourceProviderName, String apiVersion, CustomRPManifest resourceProvider, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = resourceProvider;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomProviders/resourceProviders/{resourceProviderName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "resourceProviderName" + "}", localVarApiClient.escapeString(resourceProviderName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call customResourceProviderCreateOrUpdateValidateBeforeCall(String subscriptionId, String resourceGroupName, String resourceProviderName, String apiVersion, CustomRPManifest resourceProvider, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling customResourceProviderCreateOrUpdate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling customResourceProviderCreateOrUpdate(Async)");
        }

        // verify the required parameter 'resourceProviderName' is set
        if (resourceProviderName == null) {
            throw new ApiException("Missing the required parameter 'resourceProviderName' when calling customResourceProviderCreateOrUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling customResourceProviderCreateOrUpdate(Async)");
        }

        // verify the required parameter 'resourceProvider' is set
        if (resourceProvider == null) {
            throw new ApiException("Missing the required parameter 'resourceProvider' when calling customResourceProviderCreateOrUpdate(Async)");
        }

        return customResourceProviderCreateOrUpdateCall(subscriptionId, resourceGroupName, resourceProviderName, apiVersion, resourceProvider, _callback);

    }

    /**
     * 
     * Creates or updates the custom resource provider.
     * @param subscriptionId The Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000) (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param resourceProviderName The name of the resource provider. (required)
     * @param apiVersion The API version to be used with the HTTP request. (required)
     * @param resourceProvider The parameters required to create or update a custom resource provider definition. (required)
     * @return CustomRPManifest
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response definition. Resource already exists and the changes have been accepted </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created response definition. Resource has been created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public CustomRPManifest customResourceProviderCreateOrUpdate(String subscriptionId, String resourceGroupName, String resourceProviderName, String apiVersion, CustomRPManifest resourceProvider) throws ApiException {
        ApiResponse<CustomRPManifest> localVarResp = customResourceProviderCreateOrUpdateWithHttpInfo(subscriptionId, resourceGroupName, resourceProviderName, apiVersion, resourceProvider);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates or updates the custom resource provider.
     * @param subscriptionId The Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000) (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param resourceProviderName The name of the resource provider. (required)
     * @param apiVersion The API version to be used with the HTTP request. (required)
     * @param resourceProvider The parameters required to create or update a custom resource provider definition. (required)
     * @return ApiResponse&lt;CustomRPManifest&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response definition. Resource already exists and the changes have been accepted </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created response definition. Resource has been created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CustomRPManifest> customResourceProviderCreateOrUpdateWithHttpInfo(String subscriptionId, String resourceGroupName, String resourceProviderName, String apiVersion, CustomRPManifest resourceProvider) throws ApiException {
        okhttp3.Call localVarCall = customResourceProviderCreateOrUpdateValidateBeforeCall(subscriptionId, resourceGroupName, resourceProviderName, apiVersion, resourceProvider, null);
        Type localVarReturnType = new TypeToken<CustomRPManifest>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates or updates the custom resource provider.
     * @param subscriptionId The Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000) (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param resourceProviderName The name of the resource provider. (required)
     * @param apiVersion The API version to be used with the HTTP request. (required)
     * @param resourceProvider The parameters required to create or update a custom resource provider definition. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response definition. Resource already exists and the changes have been accepted </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created response definition. Resource has been created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customResourceProviderCreateOrUpdateAsync(String subscriptionId, String resourceGroupName, String resourceProviderName, String apiVersion, CustomRPManifest resourceProvider, final ApiCallback<CustomRPManifest> _callback) throws ApiException {

        okhttp3.Call localVarCall = customResourceProviderCreateOrUpdateValidateBeforeCall(subscriptionId, resourceGroupName, resourceProviderName, apiVersion, resourceProvider, _callback);
        Type localVarReturnType = new TypeToken<CustomRPManifest>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for customResourceProviderDelete
     * @param subscriptionId The Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000) (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param resourceProviderName The name of the resource provider. (required)
     * @param apiVersion The API version to be used with the HTTP request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK resource deleted </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> OK resource delete has been accepted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> OK resource was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customResourceProviderDeleteCall(String subscriptionId, String resourceGroupName, String resourceProviderName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomProviders/resourceProviders/{resourceProviderName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "resourceProviderName" + "}", localVarApiClient.escapeString(resourceProviderName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call customResourceProviderDeleteValidateBeforeCall(String subscriptionId, String resourceGroupName, String resourceProviderName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling customResourceProviderDelete(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling customResourceProviderDelete(Async)");
        }

        // verify the required parameter 'resourceProviderName' is set
        if (resourceProviderName == null) {
            throw new ApiException("Missing the required parameter 'resourceProviderName' when calling customResourceProviderDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling customResourceProviderDelete(Async)");
        }

        return customResourceProviderDeleteCall(subscriptionId, resourceGroupName, resourceProviderName, apiVersion, _callback);

    }

    /**
     * 
     * Deletes the custom resource provider.
     * @param subscriptionId The Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000) (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param resourceProviderName The name of the resource provider. (required)
     * @param apiVersion The API version to be used with the HTTP request. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK resource deleted </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> OK resource delete has been accepted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> OK resource was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public void customResourceProviderDelete(String subscriptionId, String resourceGroupName, String resourceProviderName, String apiVersion) throws ApiException {
        customResourceProviderDeleteWithHttpInfo(subscriptionId, resourceGroupName, resourceProviderName, apiVersion);
    }

    /**
     * 
     * Deletes the custom resource provider.
     * @param subscriptionId The Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000) (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param resourceProviderName The name of the resource provider. (required)
     * @param apiVersion The API version to be used with the HTTP request. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK resource deleted </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> OK resource delete has been accepted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> OK resource was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> customResourceProviderDeleteWithHttpInfo(String subscriptionId, String resourceGroupName, String resourceProviderName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = customResourceProviderDeleteValidateBeforeCall(subscriptionId, resourceGroupName, resourceProviderName, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes the custom resource provider.
     * @param subscriptionId The Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000) (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param resourceProviderName The name of the resource provider. (required)
     * @param apiVersion The API version to be used with the HTTP request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK resource deleted </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> OK resource delete has been accepted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> OK resource was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customResourceProviderDeleteAsync(String subscriptionId, String resourceGroupName, String resourceProviderName, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = customResourceProviderDeleteValidateBeforeCall(subscriptionId, resourceGroupName, resourceProviderName, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for customResourceProviderGet
     * @param subscriptionId The Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000) (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param resourceProviderName The name of the resource provider. (required)
     * @param apiVersion The API version to be used with the HTTP request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response definition with the existing resource. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customResourceProviderGetCall(String subscriptionId, String resourceGroupName, String resourceProviderName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomProviders/resourceProviders/{resourceProviderName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "resourceProviderName" + "}", localVarApiClient.escapeString(resourceProviderName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call customResourceProviderGetValidateBeforeCall(String subscriptionId, String resourceGroupName, String resourceProviderName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling customResourceProviderGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling customResourceProviderGet(Async)");
        }

        // verify the required parameter 'resourceProviderName' is set
        if (resourceProviderName == null) {
            throw new ApiException("Missing the required parameter 'resourceProviderName' when calling customResourceProviderGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling customResourceProviderGet(Async)");
        }

        return customResourceProviderGetCall(subscriptionId, resourceGroupName, resourceProviderName, apiVersion, _callback);

    }

    /**
     * 
     * Gets the custom resource provider manifest.
     * @param subscriptionId The Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000) (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param resourceProviderName The name of the resource provider. (required)
     * @param apiVersion The API version to be used with the HTTP request. (required)
     * @return CustomRPManifest
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response definition with the existing resource. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public CustomRPManifest customResourceProviderGet(String subscriptionId, String resourceGroupName, String resourceProviderName, String apiVersion) throws ApiException {
        ApiResponse<CustomRPManifest> localVarResp = customResourceProviderGetWithHttpInfo(subscriptionId, resourceGroupName, resourceProviderName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the custom resource provider manifest.
     * @param subscriptionId The Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000) (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param resourceProviderName The name of the resource provider. (required)
     * @param apiVersion The API version to be used with the HTTP request. (required)
     * @return ApiResponse&lt;CustomRPManifest&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response definition with the existing resource. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CustomRPManifest> customResourceProviderGetWithHttpInfo(String subscriptionId, String resourceGroupName, String resourceProviderName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = customResourceProviderGetValidateBeforeCall(subscriptionId, resourceGroupName, resourceProviderName, apiVersion, null);
        Type localVarReturnType = new TypeToken<CustomRPManifest>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the custom resource provider manifest.
     * @param subscriptionId The Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000) (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param resourceProviderName The name of the resource provider. (required)
     * @param apiVersion The API version to be used with the HTTP request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response definition with the existing resource. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customResourceProviderGetAsync(String subscriptionId, String resourceGroupName, String resourceProviderName, String apiVersion, final ApiCallback<CustomRPManifest> _callback) throws ApiException {

        okhttp3.Call localVarCall = customResourceProviderGetValidateBeforeCall(subscriptionId, resourceGroupName, resourceProviderName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<CustomRPManifest>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for customResourceProviderListByResourceGroup
     * @param subscriptionId The Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000) (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param apiVersion The API version to be used with the HTTP request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns an array of custom resource providers. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customResourceProviderListByResourceGroupCall(String subscriptionId, String resourceGroupName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomProviders/resourceProviders"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call customResourceProviderListByResourceGroupValidateBeforeCall(String subscriptionId, String resourceGroupName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling customResourceProviderListByResourceGroup(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling customResourceProviderListByResourceGroup(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling customResourceProviderListByResourceGroup(Async)");
        }

        return customResourceProviderListByResourceGroupCall(subscriptionId, resourceGroupName, apiVersion, _callback);

    }

    /**
     * 
     * Gets all the custom resource providers within a resource group.
     * @param subscriptionId The Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000) (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param apiVersion The API version to be used with the HTTP request. (required)
     * @return ListByCustomRPManifest
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns an array of custom resource providers. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ListByCustomRPManifest customResourceProviderListByResourceGroup(String subscriptionId, String resourceGroupName, String apiVersion) throws ApiException {
        ApiResponse<ListByCustomRPManifest> localVarResp = customResourceProviderListByResourceGroupWithHttpInfo(subscriptionId, resourceGroupName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets all the custom resource providers within a resource group.
     * @param subscriptionId The Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000) (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param apiVersion The API version to be used with the HTTP request. (required)
     * @return ApiResponse&lt;ListByCustomRPManifest&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns an array of custom resource providers. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListByCustomRPManifest> customResourceProviderListByResourceGroupWithHttpInfo(String subscriptionId, String resourceGroupName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = customResourceProviderListByResourceGroupValidateBeforeCall(subscriptionId, resourceGroupName, apiVersion, null);
        Type localVarReturnType = new TypeToken<ListByCustomRPManifest>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets all the custom resource providers within a resource group.
     * @param subscriptionId The Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000) (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param apiVersion The API version to be used with the HTTP request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns an array of custom resource providers. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customResourceProviderListByResourceGroupAsync(String subscriptionId, String resourceGroupName, String apiVersion, final ApiCallback<ListByCustomRPManifest> _callback) throws ApiException {

        okhttp3.Call localVarCall = customResourceProviderListByResourceGroupValidateBeforeCall(subscriptionId, resourceGroupName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ListByCustomRPManifest>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for customResourceProviderListBySubscription
     * @param subscriptionId The Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000) (required)
     * @param apiVersion The API version to be used with the HTTP request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns an array of custom resource providers. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customResourceProviderListBySubscriptionCall(String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.CustomProviders/resourceProviders"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call customResourceProviderListBySubscriptionValidateBeforeCall(String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling customResourceProviderListBySubscription(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling customResourceProviderListBySubscription(Async)");
        }

        return customResourceProviderListBySubscriptionCall(subscriptionId, apiVersion, _callback);

    }

    /**
     * 
     * Gets all the custom resource providers within a subscription.
     * @param subscriptionId The Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000) (required)
     * @param apiVersion The API version to be used with the HTTP request. (required)
     * @return ListByCustomRPManifest
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns an array of custom resource providers. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ListByCustomRPManifest customResourceProviderListBySubscription(String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<ListByCustomRPManifest> localVarResp = customResourceProviderListBySubscriptionWithHttpInfo(subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets all the custom resource providers within a subscription.
     * @param subscriptionId The Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000) (required)
     * @param apiVersion The API version to be used with the HTTP request. (required)
     * @return ApiResponse&lt;ListByCustomRPManifest&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns an array of custom resource providers. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListByCustomRPManifest> customResourceProviderListBySubscriptionWithHttpInfo(String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = customResourceProviderListBySubscriptionValidateBeforeCall(subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<ListByCustomRPManifest>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets all the custom resource providers within a subscription.
     * @param subscriptionId The Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000) (required)
     * @param apiVersion The API version to be used with the HTTP request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns an array of custom resource providers. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customResourceProviderListBySubscriptionAsync(String subscriptionId, String apiVersion, final ApiCallback<ListByCustomRPManifest> _callback) throws ApiException {

        okhttp3.Call localVarCall = customResourceProviderListBySubscriptionValidateBeforeCall(subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ListByCustomRPManifest>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for customResourceProviderUpdate
     * @param subscriptionId The Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000) (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param resourceProviderName The name of the resource provider. (required)
     * @param apiVersion The API version to be used with the HTTP request. (required)
     * @param patchableResource The updatable fields of a custom resource provider. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response. The resource has been updated. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customResourceProviderUpdateCall(String subscriptionId, String resourceGroupName, String resourceProviderName, String apiVersion, ResourceProvidersUpdate patchableResource, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchableResource;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomProviders/resourceProviders/{resourceProviderName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "resourceProviderName" + "}", localVarApiClient.escapeString(resourceProviderName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call customResourceProviderUpdateValidateBeforeCall(String subscriptionId, String resourceGroupName, String resourceProviderName, String apiVersion, ResourceProvidersUpdate patchableResource, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling customResourceProviderUpdate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling customResourceProviderUpdate(Async)");
        }

        // verify the required parameter 'resourceProviderName' is set
        if (resourceProviderName == null) {
            throw new ApiException("Missing the required parameter 'resourceProviderName' when calling customResourceProviderUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling customResourceProviderUpdate(Async)");
        }

        // verify the required parameter 'patchableResource' is set
        if (patchableResource == null) {
            throw new ApiException("Missing the required parameter 'patchableResource' when calling customResourceProviderUpdate(Async)");
        }

        return customResourceProviderUpdateCall(subscriptionId, resourceGroupName, resourceProviderName, apiVersion, patchableResource, _callback);

    }

    /**
     * 
     * Updates an existing custom resource provider. The only value that can be updated via PATCH currently is the tags.
     * @param subscriptionId The Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000) (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param resourceProviderName The name of the resource provider. (required)
     * @param apiVersion The API version to be used with the HTTP request. (required)
     * @param patchableResource The updatable fields of a custom resource provider. (required)
     * @return CustomRPManifest
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response. The resource has been updated. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public CustomRPManifest customResourceProviderUpdate(String subscriptionId, String resourceGroupName, String resourceProviderName, String apiVersion, ResourceProvidersUpdate patchableResource) throws ApiException {
        ApiResponse<CustomRPManifest> localVarResp = customResourceProviderUpdateWithHttpInfo(subscriptionId, resourceGroupName, resourceProviderName, apiVersion, patchableResource);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates an existing custom resource provider. The only value that can be updated via PATCH currently is the tags.
     * @param subscriptionId The Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000) (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param resourceProviderName The name of the resource provider. (required)
     * @param apiVersion The API version to be used with the HTTP request. (required)
     * @param patchableResource The updatable fields of a custom resource provider. (required)
     * @return ApiResponse&lt;CustomRPManifest&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response. The resource has been updated. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CustomRPManifest> customResourceProviderUpdateWithHttpInfo(String subscriptionId, String resourceGroupName, String resourceProviderName, String apiVersion, ResourceProvidersUpdate patchableResource) throws ApiException {
        okhttp3.Call localVarCall = customResourceProviderUpdateValidateBeforeCall(subscriptionId, resourceGroupName, resourceProviderName, apiVersion, patchableResource, null);
        Type localVarReturnType = new TypeToken<CustomRPManifest>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates an existing custom resource provider. The only value that can be updated via PATCH currently is the tags.
     * @param subscriptionId The Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000) (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param resourceProviderName The name of the resource provider. (required)
     * @param apiVersion The API version to be used with the HTTP request. (required)
     * @param patchableResource The updatable fields of a custom resource provider. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response. The resource has been updated. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customResourceProviderUpdateAsync(String subscriptionId, String resourceGroupName, String resourceProviderName, String apiVersion, ResourceProvidersUpdate patchableResource, final ApiCallback<CustomRPManifest> _callback) throws ApiException {

        okhttp3.Call localVarCall = customResourceProviderUpdateValidateBeforeCall(subscriptionId, resourceGroupName, resourceProviderName, apiVersion, patchableResource, _callback);
        Type localVarReturnType = new TypeToken<CustomRPManifest>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
