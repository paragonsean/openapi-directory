# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class CustomRPResourceTypeRouteDefinition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, routing_type: str=None, endpoint: str=None, name: str=None):
        """CustomRPResourceTypeRouteDefinition - a model defined in OpenAPI

        :param routing_type: The routing_type of this CustomRPResourceTypeRouteDefinition.
        :param endpoint: The endpoint of this CustomRPResourceTypeRouteDefinition.
        :param name: The name of this CustomRPResourceTypeRouteDefinition.
        """
        self.openapi_types = {
            'routing_type': str,
            'endpoint': str,
            'name': str
        }

        self.attribute_map = {
            'routing_type': 'routingType',
            'endpoint': 'endpoint',
            'name': 'name'
        }

        self._routing_type = routing_type
        self._endpoint = endpoint
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CustomRPResourceTypeRouteDefinition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CustomRPResourceTypeRouteDefinition of this CustomRPResourceTypeRouteDefinition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def routing_type(self):
        """Gets the routing_type of this CustomRPResourceTypeRouteDefinition.

        The routing types that are supported for resource requests.

        :return: The routing_type of this CustomRPResourceTypeRouteDefinition.
        :rtype: str
        """
        return self._routing_type

    @routing_type.setter
    def routing_type(self, routing_type):
        """Sets the routing_type of this CustomRPResourceTypeRouteDefinition.

        The routing types that are supported for resource requests.

        :param routing_type: The routing_type of this CustomRPResourceTypeRouteDefinition.
        :type routing_type: str
        """
        allowed_values = ["Proxy", "Proxy,Cache"]  # noqa: E501
        if routing_type not in allowed_values:
            raise ValueError(
                "Invalid value for `routing_type` ({0}), must be one of {1}"
                .format(routing_type, allowed_values)
            )

        self._routing_type = routing_type

    @property
    def endpoint(self):
        """Gets the endpoint of this CustomRPResourceTypeRouteDefinition.

        The route definition endpoint URI that the custom resource provider will proxy requests to. This can be in the form of a flat URI (e.g. 'https://testendpoint/') or can specify to route via a path (e.g. 'https://testendpoint/{requestPath}')

        :return: The endpoint of this CustomRPResourceTypeRouteDefinition.
        :rtype: str
        """
        return self._endpoint

    @endpoint.setter
    def endpoint(self, endpoint):
        """Sets the endpoint of this CustomRPResourceTypeRouteDefinition.

        The route definition endpoint URI that the custom resource provider will proxy requests to. This can be in the form of a flat URI (e.g. 'https://testendpoint/') or can specify to route via a path (e.g. 'https://testendpoint/{requestPath}')

        :param endpoint: The endpoint of this CustomRPResourceTypeRouteDefinition.
        :type endpoint: str
        """
        if endpoint is None:
            raise ValueError("Invalid value for `endpoint`, must not be `None`")
        if endpoint is not None and not re.search(r'^https:\/\/.+', endpoint):
            raise ValueError("Invalid value for `endpoint`, must be a follow pattern or equal to `/^https:\/\/.+/`")

        self._endpoint = endpoint

    @property
    def name(self):
        """Gets the name of this CustomRPResourceTypeRouteDefinition.

        The name of the route definition. This becomes the name for the ARM extension (e.g. '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomProviders/resourceProviders/{resourceProviderName}/{name}')

        :return: The name of this CustomRPResourceTypeRouteDefinition.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CustomRPResourceTypeRouteDefinition.

        The name of the route definition. This becomes the name for the ARM extension (e.g. '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomProviders/resourceProviders/{resourceProviderName}/{name}')

        :param name: The name of this CustomRPResourceTypeRouteDefinition.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name
