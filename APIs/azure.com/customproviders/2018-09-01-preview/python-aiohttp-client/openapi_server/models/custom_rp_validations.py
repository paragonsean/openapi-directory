# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class CustomRPValidations(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, specification: str=None, validation_type: str=None):
        """CustomRPValidations - a model defined in OpenAPI

        :param specification: The specification of this CustomRPValidations.
        :param validation_type: The validation_type of this CustomRPValidations.
        """
        self.openapi_types = {
            'specification': str,
            'validation_type': str
        }

        self.attribute_map = {
            'specification': 'specification',
            'validation_type': 'validationType'
        }

        self._specification = specification
        self._validation_type = validation_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CustomRPValidations':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CustomRPValidations of this CustomRPValidations.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def specification(self):
        """Gets the specification of this CustomRPValidations.

        A link to the validation specification. The specification must be hosted on raw.githubusercontent.com.

        :return: The specification of this CustomRPValidations.
        :rtype: str
        """
        return self._specification

    @specification.setter
    def specification(self, specification):
        """Sets the specification of this CustomRPValidations.

        A link to the validation specification. The specification must be hosted on raw.githubusercontent.com.

        :param specification: The specification of this CustomRPValidations.
        :type specification: str
        """
        if specification is None:
            raise ValueError("Invalid value for `specification`, must not be `None`")
        if specification is not None and not re.search(r'^https:\/\/raw.githubusercontent.com\/.+', specification):
            raise ValueError("Invalid value for `specification`, must be a follow pattern or equal to `/^https:\/\/raw.githubusercontent.com\/.+/`")

        self._specification = specification

    @property
    def validation_type(self):
        """Gets the validation_type of this CustomRPValidations.

        The type of validation to run against a matching request.

        :return: The validation_type of this CustomRPValidations.
        :rtype: str
        """
        return self._validation_type

    @validation_type.setter
    def validation_type(self, validation_type):
        """Sets the validation_type of this CustomRPValidations.

        The type of validation to run against a matching request.

        :param validation_type: The validation_type of this CustomRPValidations.
        :type validation_type: str
        """
        allowed_values = ["Swagger"]  # noqa: E501
        if validation_type not in allowed_values:
            raise ValueError(
                "Invalid value for `validation_type` ({0}), must be one of {1}"
                .format(validation_type, allowed_values)
            )

        self._validation_type = validation_type
