/**
 * FabricAdminClient
 * Edge gateway pool operation endpoints and objects.
 *
 * The version of the OpenAPI document: 2016-05-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIEdgeGatewayPoolModel.h
 *
 * An object that contains the properties of an edge gateway pool.
 */

#ifndef OAIEdgeGatewayPoolModel_H
#define OAIEdgeGatewayPoolModel_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIEdgeGatewayPoolModel : public OAIObject {
public:
    OAIEdgeGatewayPoolModel();
    OAIEdgeGatewayPoolModel(QString json);
    ~OAIEdgeGatewayPoolModel() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<QString> getEdgeGateways() const;
    void setEdgeGateways(const QList<QString> &edge_gateways);
    bool is_edge_gateways_Set() const;
    bool is_edge_gateways_Valid() const;

    qint32 getGatewayCapacityKiloBitsPerSecond() const;
    void setGatewayCapacityKiloBitsPerSecond(const qint32 &gateway_capacity_kilo_bits_per_second);
    bool is_gateway_capacity_kilo_bits_per_second_Set() const;
    bool is_gateway_capacity_kilo_bits_per_second_Valid() const;

    QString getGatewayType() const;
    void setGatewayType(const QString &gateway_type);
    bool is_gateway_type_Set() const;
    bool is_gateway_type_Valid() const;

    QString getGreVipSubnet() const;
    void setGreVipSubnet(const QString &gre_vip_subnet);
    bool is_gre_vip_subnet_Set() const;
    bool is_gre_vip_subnet_Valid() const;

    qint32 getNumberOfGateways() const;
    void setNumberOfGateways(const qint32 &number_of_gateways);
    bool is_number_of_gateways_Set() const;
    bool is_number_of_gateways_Valid() const;

    QString getPublicIpAddress() const;
    void setPublicIpAddress(const QString &public_ip_address);
    bool is_public_ip_address_Set() const;
    bool is_public_ip_address_Valid() const;

    qint64 getRedundantGatewayCount() const;
    void setRedundantGatewayCount(const qint64 &redundant_gateway_count);
    bool is_redundant_gateway_count_Set() const;
    bool is_redundant_gateway_count_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<QString> m_edge_gateways;
    bool m_edge_gateways_isSet;
    bool m_edge_gateways_isValid;

    qint32 m_gateway_capacity_kilo_bits_per_second;
    bool m_gateway_capacity_kilo_bits_per_second_isSet;
    bool m_gateway_capacity_kilo_bits_per_second_isValid;

    QString m_gateway_type;
    bool m_gateway_type_isSet;
    bool m_gateway_type_isValid;

    QString m_gre_vip_subnet;
    bool m_gre_vip_subnet_isSet;
    bool m_gre_vip_subnet_isValid;

    qint32 m_number_of_gateways;
    bool m_number_of_gateways_isSet;
    bool m_number_of_gateways_isValid;

    QString m_public_ip_address;
    bool m_public_ip_address_isSet;
    bool m_public_ip_address_isValid;

    qint64 m_redundant_gateway_count;
    bool m_redundant_gateway_count_isSet;
    bool m_redundant_gateway_count_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIEdgeGatewayPoolModel)

#endif // OAIEdgeGatewayPoolModel_H
