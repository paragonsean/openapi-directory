/**
 * FabricAdminClient
 * Edge gateway pool operation endpoints and objects.
 *
 * The version of the OpenAPI document: 2016-05-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEdgeGatewayPoolModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEdgeGatewayPoolModel::OAIEdgeGatewayPoolModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEdgeGatewayPoolModel::OAIEdgeGatewayPoolModel() {
    this->initializeModel();
}

OAIEdgeGatewayPoolModel::~OAIEdgeGatewayPoolModel() {}

void OAIEdgeGatewayPoolModel::initializeModel() {

    m_edge_gateways_isSet = false;
    m_edge_gateways_isValid = false;

    m_gateway_capacity_kilo_bits_per_second_isSet = false;
    m_gateway_capacity_kilo_bits_per_second_isValid = false;

    m_gateway_type_isSet = false;
    m_gateway_type_isValid = false;

    m_gre_vip_subnet_isSet = false;
    m_gre_vip_subnet_isValid = false;

    m_number_of_gateways_isSet = false;
    m_number_of_gateways_isValid = false;

    m_public_ip_address_isSet = false;
    m_public_ip_address_isValid = false;

    m_redundant_gateway_count_isSet = false;
    m_redundant_gateway_count_isValid = false;
}

void OAIEdgeGatewayPoolModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEdgeGatewayPoolModel::fromJsonObject(QJsonObject json) {

    m_edge_gateways_isValid = ::OpenAPI::fromJsonValue(m_edge_gateways, json[QString("edgeGateways")]);
    m_edge_gateways_isSet = !json[QString("edgeGateways")].isNull() && m_edge_gateways_isValid;

    m_gateway_capacity_kilo_bits_per_second_isValid = ::OpenAPI::fromJsonValue(m_gateway_capacity_kilo_bits_per_second, json[QString("gatewayCapacityKiloBitsPerSecond")]);
    m_gateway_capacity_kilo_bits_per_second_isSet = !json[QString("gatewayCapacityKiloBitsPerSecond")].isNull() && m_gateway_capacity_kilo_bits_per_second_isValid;

    m_gateway_type_isValid = ::OpenAPI::fromJsonValue(m_gateway_type, json[QString("gatewayType")]);
    m_gateway_type_isSet = !json[QString("gatewayType")].isNull() && m_gateway_type_isValid;

    m_gre_vip_subnet_isValid = ::OpenAPI::fromJsonValue(m_gre_vip_subnet, json[QString("greVipSubnet")]);
    m_gre_vip_subnet_isSet = !json[QString("greVipSubnet")].isNull() && m_gre_vip_subnet_isValid;

    m_number_of_gateways_isValid = ::OpenAPI::fromJsonValue(m_number_of_gateways, json[QString("numberOfGateways")]);
    m_number_of_gateways_isSet = !json[QString("numberOfGateways")].isNull() && m_number_of_gateways_isValid;

    m_public_ip_address_isValid = ::OpenAPI::fromJsonValue(m_public_ip_address, json[QString("publicIpAddress")]);
    m_public_ip_address_isSet = !json[QString("publicIpAddress")].isNull() && m_public_ip_address_isValid;

    m_redundant_gateway_count_isValid = ::OpenAPI::fromJsonValue(m_redundant_gateway_count, json[QString("redundantGatewayCount")]);
    m_redundant_gateway_count_isSet = !json[QString("redundantGatewayCount")].isNull() && m_redundant_gateway_count_isValid;
}

QString OAIEdgeGatewayPoolModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEdgeGatewayPoolModel::asJsonObject() const {
    QJsonObject obj;
    if (m_edge_gateways.size() > 0) {
        obj.insert(QString("edgeGateways"), ::OpenAPI::toJsonValue(m_edge_gateways));
    }
    if (m_gateway_capacity_kilo_bits_per_second_isSet) {
        obj.insert(QString("gatewayCapacityKiloBitsPerSecond"), ::OpenAPI::toJsonValue(m_gateway_capacity_kilo_bits_per_second));
    }
    if (m_gateway_type_isSet) {
        obj.insert(QString("gatewayType"), ::OpenAPI::toJsonValue(m_gateway_type));
    }
    if (m_gre_vip_subnet_isSet) {
        obj.insert(QString("greVipSubnet"), ::OpenAPI::toJsonValue(m_gre_vip_subnet));
    }
    if (m_number_of_gateways_isSet) {
        obj.insert(QString("numberOfGateways"), ::OpenAPI::toJsonValue(m_number_of_gateways));
    }
    if (m_public_ip_address_isSet) {
        obj.insert(QString("publicIpAddress"), ::OpenAPI::toJsonValue(m_public_ip_address));
    }
    if (m_redundant_gateway_count_isSet) {
        obj.insert(QString("redundantGatewayCount"), ::OpenAPI::toJsonValue(m_redundant_gateway_count));
    }
    return obj;
}

QList<QString> OAIEdgeGatewayPoolModel::getEdgeGateways() const {
    return m_edge_gateways;
}
void OAIEdgeGatewayPoolModel::setEdgeGateways(const QList<QString> &edge_gateways) {
    m_edge_gateways = edge_gateways;
    m_edge_gateways_isSet = true;
}

bool OAIEdgeGatewayPoolModel::is_edge_gateways_Set() const{
    return m_edge_gateways_isSet;
}

bool OAIEdgeGatewayPoolModel::is_edge_gateways_Valid() const{
    return m_edge_gateways_isValid;
}

qint32 OAIEdgeGatewayPoolModel::getGatewayCapacityKiloBitsPerSecond() const {
    return m_gateway_capacity_kilo_bits_per_second;
}
void OAIEdgeGatewayPoolModel::setGatewayCapacityKiloBitsPerSecond(const qint32 &gateway_capacity_kilo_bits_per_second) {
    m_gateway_capacity_kilo_bits_per_second = gateway_capacity_kilo_bits_per_second;
    m_gateway_capacity_kilo_bits_per_second_isSet = true;
}

bool OAIEdgeGatewayPoolModel::is_gateway_capacity_kilo_bits_per_second_Set() const{
    return m_gateway_capacity_kilo_bits_per_second_isSet;
}

bool OAIEdgeGatewayPoolModel::is_gateway_capacity_kilo_bits_per_second_Valid() const{
    return m_gateway_capacity_kilo_bits_per_second_isValid;
}

QString OAIEdgeGatewayPoolModel::getGatewayType() const {
    return m_gateway_type;
}
void OAIEdgeGatewayPoolModel::setGatewayType(const QString &gateway_type) {
    m_gateway_type = gateway_type;
    m_gateway_type_isSet = true;
}

bool OAIEdgeGatewayPoolModel::is_gateway_type_Set() const{
    return m_gateway_type_isSet;
}

bool OAIEdgeGatewayPoolModel::is_gateway_type_Valid() const{
    return m_gateway_type_isValid;
}

QString OAIEdgeGatewayPoolModel::getGreVipSubnet() const {
    return m_gre_vip_subnet;
}
void OAIEdgeGatewayPoolModel::setGreVipSubnet(const QString &gre_vip_subnet) {
    m_gre_vip_subnet = gre_vip_subnet;
    m_gre_vip_subnet_isSet = true;
}

bool OAIEdgeGatewayPoolModel::is_gre_vip_subnet_Set() const{
    return m_gre_vip_subnet_isSet;
}

bool OAIEdgeGatewayPoolModel::is_gre_vip_subnet_Valid() const{
    return m_gre_vip_subnet_isValid;
}

qint32 OAIEdgeGatewayPoolModel::getNumberOfGateways() const {
    return m_number_of_gateways;
}
void OAIEdgeGatewayPoolModel::setNumberOfGateways(const qint32 &number_of_gateways) {
    m_number_of_gateways = number_of_gateways;
    m_number_of_gateways_isSet = true;
}

bool OAIEdgeGatewayPoolModel::is_number_of_gateways_Set() const{
    return m_number_of_gateways_isSet;
}

bool OAIEdgeGatewayPoolModel::is_number_of_gateways_Valid() const{
    return m_number_of_gateways_isValid;
}

QString OAIEdgeGatewayPoolModel::getPublicIpAddress() const {
    return m_public_ip_address;
}
void OAIEdgeGatewayPoolModel::setPublicIpAddress(const QString &public_ip_address) {
    m_public_ip_address = public_ip_address;
    m_public_ip_address_isSet = true;
}

bool OAIEdgeGatewayPoolModel::is_public_ip_address_Set() const{
    return m_public_ip_address_isSet;
}

bool OAIEdgeGatewayPoolModel::is_public_ip_address_Valid() const{
    return m_public_ip_address_isValid;
}

qint64 OAIEdgeGatewayPoolModel::getRedundantGatewayCount() const {
    return m_redundant_gateway_count;
}
void OAIEdgeGatewayPoolModel::setRedundantGatewayCount(const qint64 &redundant_gateway_count) {
    m_redundant_gateway_count = redundant_gateway_count;
    m_redundant_gateway_count_isSet = true;
}

bool OAIEdgeGatewayPoolModel::is_redundant_gateway_count_Set() const{
    return m_redundant_gateway_count_isSet;
}

bool OAIEdgeGatewayPoolModel::is_redundant_gateway_count_Valid() const{
    return m_redundant_gateway_count_isValid;
}

bool OAIEdgeGatewayPoolModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_edge_gateways.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_gateway_capacity_kilo_bits_per_second_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gateway_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gre_vip_subnet_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_gateways_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_ip_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_redundant_gateway_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEdgeGatewayPoolModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
