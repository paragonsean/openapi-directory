/*
 * Customer Lockbox
 * Azure Customer Lockbox API Reference
 *
 * The version of the OpenAPI document: 2018-02-28-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.LockboxRequestStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The properties that are associated with a lockbox request.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:44:18.780867-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LockboxRequestResponseProperties {
  public static final String SERIALIZED_NAME_CREATED_DATE_TIME = "createdDateTime";
  @SerializedName(SERIALIZED_NAME_CREATED_DATE_TIME)
  private OffsetDateTime createdDateTime;

  public static final String SERIALIZED_NAME_DURATION = "duration";
  @SerializedName(SERIALIZED_NAME_DURATION)
  private Integer duration;

  public static final String SERIALIZED_NAME_EXPIRATION_DATE_TIME = "expirationDateTime";
  @SerializedName(SERIALIZED_NAME_EXPIRATION_DATE_TIME)
  private OffsetDateTime expirationDateTime;

  public static final String SERIALIZED_NAME_JUSTIFICATION = "justification";
  @SerializedName(SERIALIZED_NAME_JUSTIFICATION)
  private String justification;

  public static final String SERIALIZED_NAME_REQUEST_ID = "requestId";
  @SerializedName(SERIALIZED_NAME_REQUEST_ID)
  private String requestId;

  public static final String SERIALIZED_NAME_REQUESTED_RESOURCE_IDS = "requestedResourceIds";
  @SerializedName(SERIALIZED_NAME_REQUESTED_RESOURCE_IDS)
  private List<String> requestedResourceIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_RESOURCE_TYPE = "resourceType";
  @SerializedName(SERIALIZED_NAME_RESOURCE_TYPE)
  private String resourceType;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private LockboxRequestStatus status;

  public static final String SERIALIZED_NAME_SUBSCRIPTION_ID = "subscriptionId";
  @SerializedName(SERIALIZED_NAME_SUBSCRIPTION_ID)
  private String subscriptionId;

  public static final String SERIALIZED_NAME_SUPPORT_CASE_URL = "supportCaseUrl";
  @SerializedName(SERIALIZED_NAME_SUPPORT_CASE_URL)
  private String supportCaseUrl;

  public static final String SERIALIZED_NAME_SUPPORT_REQUEST = "supportRequest";
  @SerializedName(SERIALIZED_NAME_SUPPORT_REQUEST)
  private String supportRequest;

  public LockboxRequestResponseProperties() {
  }

  public LockboxRequestResponseProperties(
     OffsetDateTime createdDateTime, 
     Integer duration, 
     OffsetDateTime expirationDateTime, 
     String justification, 
     String requestId, 
     List<String> requestedResourceIds, 
     String resourceType, 
     String subscriptionId, 
     String supportCaseUrl, 
     String supportRequest
  ) {
    this();
    this.createdDateTime = createdDateTime;
    this.duration = duration;
    this.expirationDateTime = expirationDateTime;
    this.justification = justification;
    this.requestId = requestId;
    this.requestedResourceIds = requestedResourceIds;
    this.resourceType = resourceType;
    this.subscriptionId = subscriptionId;
    this.supportCaseUrl = supportCaseUrl;
    this.supportRequest = supportRequest;
  }

  /**
   * The creation time of the request.
   * @return createdDateTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedDateTime() {
    return createdDateTime;
  }



  /**
   * The duration of the request in hours.
   * @return duration
   */
  @javax.annotation.Nullable
  public Integer getDuration() {
    return duration;
  }



  /**
   * The expiration time of the request.
   * @return expirationDateTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getExpirationDateTime() {
    return expirationDateTime;
  }



  /**
   * The justification of the requestor.
   * @return justification
   */
  @javax.annotation.Nullable
  public String getJustification() {
    return justification;
  }



  /**
   * The Lockbox request ID.
   * @return requestId
   */
  @javax.annotation.Nullable
  public String getRequestId() {
    return requestId;
  }



  /**
   * A list of resource IDs associated with the Lockbox request separated by &#39;,&#39;.
   * @return requestedResourceIds
   */
  @javax.annotation.Nullable
  public List<String> getRequestedResourceIds() {
    return requestedResourceIds;
  }



  /**
   * The resource type of the requested resources.
   * @return resourceType
   */
  @javax.annotation.Nullable
  public String getResourceType() {
    return resourceType;
  }



  public LockboxRequestResponseProperties status(LockboxRequestStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public LockboxRequestStatus getStatus() {
    return status;
  }

  public void setStatus(LockboxRequestStatus status) {
    this.status = status;
  }


  /**
   * The subscription ID.
   * @return subscriptionId
   */
  @javax.annotation.Nullable
  public String getSubscriptionId() {
    return subscriptionId;
  }



  /**
   * The url of the support case.
   * @return supportCaseUrl
   */
  @javax.annotation.Nullable
  public String getSupportCaseUrl() {
    return supportCaseUrl;
  }



  /**
   * The id of the support request associated.
   * @return supportRequest
   */
  @javax.annotation.Nullable
  public String getSupportRequest() {
    return supportRequest;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LockboxRequestResponseProperties lockboxRequestResponseProperties = (LockboxRequestResponseProperties) o;
    return Objects.equals(this.createdDateTime, lockboxRequestResponseProperties.createdDateTime) &&
        Objects.equals(this.duration, lockboxRequestResponseProperties.duration) &&
        Objects.equals(this.expirationDateTime, lockboxRequestResponseProperties.expirationDateTime) &&
        Objects.equals(this.justification, lockboxRequestResponseProperties.justification) &&
        Objects.equals(this.requestId, lockboxRequestResponseProperties.requestId) &&
        Objects.equals(this.requestedResourceIds, lockboxRequestResponseProperties.requestedResourceIds) &&
        Objects.equals(this.resourceType, lockboxRequestResponseProperties.resourceType) &&
        Objects.equals(this.status, lockboxRequestResponseProperties.status) &&
        Objects.equals(this.subscriptionId, lockboxRequestResponseProperties.subscriptionId) &&
        Objects.equals(this.supportCaseUrl, lockboxRequestResponseProperties.supportCaseUrl) &&
        Objects.equals(this.supportRequest, lockboxRequestResponseProperties.supportRequest);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createdDateTime, duration, expirationDateTime, justification, requestId, requestedResourceIds, resourceType, status, subscriptionId, supportCaseUrl, supportRequest);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LockboxRequestResponseProperties {\n");
    sb.append("    createdDateTime: ").append(toIndentedString(createdDateTime)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    expirationDateTime: ").append(toIndentedString(expirationDateTime)).append("\n");
    sb.append("    justification: ").append(toIndentedString(justification)).append("\n");
    sb.append("    requestId: ").append(toIndentedString(requestId)).append("\n");
    sb.append("    requestedResourceIds: ").append(toIndentedString(requestedResourceIds)).append("\n");
    sb.append("    resourceType: ").append(toIndentedString(resourceType)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    subscriptionId: ").append(toIndentedString(subscriptionId)).append("\n");
    sb.append("    supportCaseUrl: ").append(toIndentedString(supportCaseUrl)).append("\n");
    sb.append("    supportRequest: ").append(toIndentedString(supportRequest)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("createdDateTime");
    openapiFields.add("duration");
    openapiFields.add("expirationDateTime");
    openapiFields.add("justification");
    openapiFields.add("requestId");
    openapiFields.add("requestedResourceIds");
    openapiFields.add("resourceType");
    openapiFields.add("status");
    openapiFields.add("subscriptionId");
    openapiFields.add("supportCaseUrl");
    openapiFields.add("supportRequest");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LockboxRequestResponseProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LockboxRequestResponseProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LockboxRequestResponseProperties is not found in the empty JSON string", LockboxRequestResponseProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LockboxRequestResponseProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LockboxRequestResponseProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("justification") != null && !jsonObj.get("justification").isJsonNull()) && !jsonObj.get("justification").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `justification` to be a primitive type in the JSON string but got `%s`", jsonObj.get("justification").toString()));
      }
      if ((jsonObj.get("requestId") != null && !jsonObj.get("requestId").isJsonNull()) && !jsonObj.get("requestId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requestId").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("requestedResourceIds") != null && !jsonObj.get("requestedResourceIds").isJsonNull() && !jsonObj.get("requestedResourceIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestedResourceIds` to be an array in the JSON string but got `%s`", jsonObj.get("requestedResourceIds").toString()));
      }
      if ((jsonObj.get("resourceType") != null && !jsonObj.get("resourceType").isJsonNull()) && !jsonObj.get("resourceType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourceType").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        LockboxRequestStatus.validateJsonElement(jsonObj.get("status"));
      }
      if ((jsonObj.get("subscriptionId") != null && !jsonObj.get("subscriptionId").isJsonNull()) && !jsonObj.get("subscriptionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subscriptionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subscriptionId").toString()));
      }
      if ((jsonObj.get("supportCaseUrl") != null && !jsonObj.get("supportCaseUrl").isJsonNull()) && !jsonObj.get("supportCaseUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `supportCaseUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("supportCaseUrl").toString()));
      }
      if ((jsonObj.get("supportRequest") != null && !jsonObj.get("supportRequest").isJsonNull()) && !jsonObj.get("supportRequest").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `supportRequest` to be a primitive type in the JSON string but got `%s`", jsonObj.get("supportRequest").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LockboxRequestResponseProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LockboxRequestResponseProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LockboxRequestResponseProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LockboxRequestResponseProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<LockboxRequestResponseProperties>() {
           @Override
           public void write(JsonWriter out, LockboxRequestResponseProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LockboxRequestResponseProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LockboxRequestResponseProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LockboxRequestResponseProperties
   * @throws IOException if the JSON string is invalid with respect to LockboxRequestResponseProperties
   */
  public static LockboxRequestResponseProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LockboxRequestResponseProperties.class);
  }

  /**
   * Convert an instance of LockboxRequestResponseProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

