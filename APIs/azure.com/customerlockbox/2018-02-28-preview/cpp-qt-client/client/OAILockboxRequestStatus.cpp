/**
 * Customer Lockbox
 * Azure Customer Lockbox API Reference
 *
 * The version of the OpenAPI document: 2018-02-28-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILockboxRequestStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILockboxRequestStatus::OAILockboxRequestStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILockboxRequestStatus::OAILockboxRequestStatus() {
    this->initializeModel();
}

OAILockboxRequestStatus::~OAILockboxRequestStatus() {}

void OAILockboxRequestStatus::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAILockboxRequestStatus::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAILockboxRequestStatus::fromJson(QString jsonString) {
    
    if ( jsonString.compare("Initializing", Qt::CaseInsensitive) == 0) {
        m_value = eOAILockboxRequestStatus::INITIALIZING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Pending", Qt::CaseInsensitive) == 0) {
        m_value = eOAILockboxRequestStatus::PENDING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Approving", Qt::CaseInsensitive) == 0) {
        m_value = eOAILockboxRequestStatus::APPROVING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Denying", Qt::CaseInsensitive) == 0) {
        m_value = eOAILockboxRequestStatus::DENYING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Approved", Qt::CaseInsensitive) == 0) {
        m_value = eOAILockboxRequestStatus::APPROVED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Denied", Qt::CaseInsensitive) == 0) {
        m_value = eOAILockboxRequestStatus::DENIED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Expired", Qt::CaseInsensitive) == 0) {
        m_value = eOAILockboxRequestStatus::EXPIRED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Revoking", Qt::CaseInsensitive) == 0) {
        m_value = eOAILockboxRequestStatus::REVOKING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Revoked", Qt::CaseInsensitive) == 0) {
        m_value = eOAILockboxRequestStatus::REVOKED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Error", Qt::CaseInsensitive) == 0) {
        m_value = eOAILockboxRequestStatus::ERROR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Unknown", Qt::CaseInsensitive) == 0) {
        m_value = eOAILockboxRequestStatus::UNKNOWN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Completed", Qt::CaseInsensitive) == 0) {
        m_value = eOAILockboxRequestStatus::COMPLETED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Completing", Qt::CaseInsensitive) == 0) {
        m_value = eOAILockboxRequestStatus::COMPLETING;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAILockboxRequestStatus::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAILockboxRequestStatus::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAILockboxRequestStatus::INITIALIZING:
            val = "Initializing";
            break;
        case eOAILockboxRequestStatus::PENDING:
            val = "Pending";
            break;
        case eOAILockboxRequestStatus::APPROVING:
            val = "Approving";
            break;
        case eOAILockboxRequestStatus::DENYING:
            val = "Denying";
            break;
        case eOAILockboxRequestStatus::APPROVED:
            val = "Approved";
            break;
        case eOAILockboxRequestStatus::DENIED:
            val = "Denied";
            break;
        case eOAILockboxRequestStatus::EXPIRED:
            val = "Expired";
            break;
        case eOAILockboxRequestStatus::REVOKING:
            val = "Revoking";
            break;
        case eOAILockboxRequestStatus::REVOKED:
            val = "Revoked";
            break;
        case eOAILockboxRequestStatus::ERROR:
            val = "Error";
            break;
        case eOAILockboxRequestStatus::UNKNOWN:
            val = "Unknown";
            break;
        case eOAILockboxRequestStatus::COMPLETED:
            val = "Completed";
            break;
        case eOAILockboxRequestStatus::COMPLETING:
            val = "Completing";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAILockboxRequestStatus::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAILockboxRequestStatus::eOAILockboxRequestStatus OAILockboxRequestStatus::getValue() const {
    return m_value;
}

void OAILockboxRequestStatus::setValue(const OAILockboxRequestStatus::eOAILockboxRequestStatus& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAILockboxRequestStatus::isSet() const {
    
    return m_value_isSet;
}

bool OAILockboxRequestStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
