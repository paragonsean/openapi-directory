/**
 * Customer Lockbox
 * Azure Customer Lockbox API Reference
 *
 * The version of the OpenAPI document: 2018-02-28-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Approval from '../model/Approval';
import ErrorResponse from '../model/ErrorResponse';
import LockboxRequestResponse from '../model/LockboxRequestResponse';
import RequestListResult from '../model/RequestListResult';

/**
* Requests service.
* @module api/RequestsApi
* @version 2018-02-28-preview
*/
export default class RequestsApi {

    /**
    * Constructs a new RequestsApi. 
    * @alias module:api/RequestsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the requestsGet operation.
     * @callback module:api/RequestsApi~requestsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LockboxRequestResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Customer Lockbox request
     * @param {String} requestId The Lockbox request ID.
     * @param {String} subscriptionId The Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000)
     * @param {String} apiVersion The API version to be used with the HTTP request.
     * @param {module:api/RequestsApi~requestsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LockboxRequestResponse}
     */
    requestsGet(requestId, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'requestId' is set
      if (requestId === undefined || requestId === null) {
        throw new Error("Missing the required parameter 'requestId' when calling requestsGet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling requestsGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling requestsGet");
      }

      let pathParams = {
        'requestId': requestId,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LockboxRequestResponse;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.CustomerLockbox/requests/{requestId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the requestsList operation.
     * @callback module:api/RequestsApi~requestsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RequestListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all of the Lockbox requests in the given subscription.
     * @param {String} subscriptionId The Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000)
     * @param {Object} opts Optional parameters
     * @param {String} [filter] The $filter OData query parameter. Only filter by request status is supported, e.g $filter=properties/status eq 'Pending'
     * @param {module:api/RequestsApi~requestsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RequestListResult}
     */
    requestsList(subscriptionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling requestsList");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        '$filter': opts['filter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RequestListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.CustomerLockbox/requests', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the requestsUpdateStatus operation.
     * @callback module:api/RequestsApi~requestsUpdateStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Approval} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Customer Lockbox request approval status API
     * @param {String} subscriptionId The Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000)
     * @param {String} requestId The Lockbox request ID.
     * @param {String} apiVersion The API version to be used with the HTTP request.
     * @param {module:model/Approval} approval The approval object to update request status.
     * @param {module:api/RequestsApi~requestsUpdateStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Approval}
     */
    requestsUpdateStatus(subscriptionId, requestId, apiVersion, approval, callback) {
      let postBody = approval;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling requestsUpdateStatus");
      }
      // verify the required parameter 'requestId' is set
      if (requestId === undefined || requestId === null) {
        throw new Error("Missing the required parameter 'requestId' when calling requestsUpdateStatus");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling requestsUpdateStatus");
      }
      // verify the required parameter 'approval' is set
      if (approval === undefined || approval === null) {
        throw new Error("Missing the required parameter 'approval' when calling requestsUpdateStatus");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'requestId': requestId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Approval;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.CustomerLockbox/requests/{requestId}/UpdateApproval', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
