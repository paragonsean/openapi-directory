/**
 * ContainerServiceClient
 * The Container Service Client.
 *
 * The version of the OpenAPI document: 2018-09-30-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOpenShiftManagedClusterProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOpenShiftManagedClusterProperties::OAIOpenShiftManagedClusterProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOpenShiftManagedClusterProperties::OAIOpenShiftManagedClusterProperties() {
    this->initializeModel();
}

OAIOpenShiftManagedClusterProperties::~OAIOpenShiftManagedClusterProperties() {}

void OAIOpenShiftManagedClusterProperties::initializeModel() {

    m_agent_pool_profiles_isSet = false;
    m_agent_pool_profiles_isValid = false;

    m_auth_profile_isSet = false;
    m_auth_profile_isValid = false;

    m_fqdn_isSet = false;
    m_fqdn_isValid = false;

    m_master_pool_profile_isSet = false;
    m_master_pool_profile_isValid = false;

    m_network_profile_isSet = false;
    m_network_profile_isValid = false;

    m_open_shift_version_isSet = false;
    m_open_shift_version_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_public_hostname_isSet = false;
    m_public_hostname_isValid = false;

    m_router_profiles_isSet = false;
    m_router_profiles_isValid = false;
}

void OAIOpenShiftManagedClusterProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOpenShiftManagedClusterProperties::fromJsonObject(QJsonObject json) {

    m_agent_pool_profiles_isValid = ::OpenAPI::fromJsonValue(m_agent_pool_profiles, json[QString("agentPoolProfiles")]);
    m_agent_pool_profiles_isSet = !json[QString("agentPoolProfiles")].isNull() && m_agent_pool_profiles_isValid;

    m_auth_profile_isValid = ::OpenAPI::fromJsonValue(m_auth_profile, json[QString("authProfile")]);
    m_auth_profile_isSet = !json[QString("authProfile")].isNull() && m_auth_profile_isValid;

    m_fqdn_isValid = ::OpenAPI::fromJsonValue(m_fqdn, json[QString("fqdn")]);
    m_fqdn_isSet = !json[QString("fqdn")].isNull() && m_fqdn_isValid;

    m_master_pool_profile_isValid = ::OpenAPI::fromJsonValue(m_master_pool_profile, json[QString("masterPoolProfile")]);
    m_master_pool_profile_isSet = !json[QString("masterPoolProfile")].isNull() && m_master_pool_profile_isValid;

    m_network_profile_isValid = ::OpenAPI::fromJsonValue(m_network_profile, json[QString("networkProfile")]);
    m_network_profile_isSet = !json[QString("networkProfile")].isNull() && m_network_profile_isValid;

    m_open_shift_version_isValid = ::OpenAPI::fromJsonValue(m_open_shift_version, json[QString("openShiftVersion")]);
    m_open_shift_version_isSet = !json[QString("openShiftVersion")].isNull() && m_open_shift_version_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_public_hostname_isValid = ::OpenAPI::fromJsonValue(m_public_hostname, json[QString("publicHostname")]);
    m_public_hostname_isSet = !json[QString("publicHostname")].isNull() && m_public_hostname_isValid;

    m_router_profiles_isValid = ::OpenAPI::fromJsonValue(m_router_profiles, json[QString("routerProfiles")]);
    m_router_profiles_isSet = !json[QString("routerProfiles")].isNull() && m_router_profiles_isValid;
}

QString OAIOpenShiftManagedClusterProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOpenShiftManagedClusterProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_agent_pool_profiles.size() > 0) {
        obj.insert(QString("agentPoolProfiles"), ::OpenAPI::toJsonValue(m_agent_pool_profiles));
    }
    if (m_auth_profile.isSet()) {
        obj.insert(QString("authProfile"), ::OpenAPI::toJsonValue(m_auth_profile));
    }
    if (m_fqdn_isSet) {
        obj.insert(QString("fqdn"), ::OpenAPI::toJsonValue(m_fqdn));
    }
    if (m_master_pool_profile.isSet()) {
        obj.insert(QString("masterPoolProfile"), ::OpenAPI::toJsonValue(m_master_pool_profile));
    }
    if (m_network_profile.isSet()) {
        obj.insert(QString("networkProfile"), ::OpenAPI::toJsonValue(m_network_profile));
    }
    if (m_open_shift_version_isSet) {
        obj.insert(QString("openShiftVersion"), ::OpenAPI::toJsonValue(m_open_shift_version));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_public_hostname_isSet) {
        obj.insert(QString("publicHostname"), ::OpenAPI::toJsonValue(m_public_hostname));
    }
    if (m_router_profiles.size() > 0) {
        obj.insert(QString("routerProfiles"), ::OpenAPI::toJsonValue(m_router_profiles));
    }
    return obj;
}

QList<OAIOpenShiftManagedClusterAgentPoolProfile> OAIOpenShiftManagedClusterProperties::getAgentPoolProfiles() const {
    return m_agent_pool_profiles;
}
void OAIOpenShiftManagedClusterProperties::setAgentPoolProfiles(const QList<OAIOpenShiftManagedClusterAgentPoolProfile> &agent_pool_profiles) {
    m_agent_pool_profiles = agent_pool_profiles;
    m_agent_pool_profiles_isSet = true;
}

bool OAIOpenShiftManagedClusterProperties::is_agent_pool_profiles_Set() const{
    return m_agent_pool_profiles_isSet;
}

bool OAIOpenShiftManagedClusterProperties::is_agent_pool_profiles_Valid() const{
    return m_agent_pool_profiles_isValid;
}

OAIOpenShiftManagedClusterAuthProfile OAIOpenShiftManagedClusterProperties::getAuthProfile() const {
    return m_auth_profile;
}
void OAIOpenShiftManagedClusterProperties::setAuthProfile(const OAIOpenShiftManagedClusterAuthProfile &auth_profile) {
    m_auth_profile = auth_profile;
    m_auth_profile_isSet = true;
}

bool OAIOpenShiftManagedClusterProperties::is_auth_profile_Set() const{
    return m_auth_profile_isSet;
}

bool OAIOpenShiftManagedClusterProperties::is_auth_profile_Valid() const{
    return m_auth_profile_isValid;
}

QString OAIOpenShiftManagedClusterProperties::getFqdn() const {
    return m_fqdn;
}
void OAIOpenShiftManagedClusterProperties::setFqdn(const QString &fqdn) {
    m_fqdn = fqdn;
    m_fqdn_isSet = true;
}

bool OAIOpenShiftManagedClusterProperties::is_fqdn_Set() const{
    return m_fqdn_isSet;
}

bool OAIOpenShiftManagedClusterProperties::is_fqdn_Valid() const{
    return m_fqdn_isValid;
}

OAIOpenShiftManagedClusterMasterPoolProfile OAIOpenShiftManagedClusterProperties::getMasterPoolProfile() const {
    return m_master_pool_profile;
}
void OAIOpenShiftManagedClusterProperties::setMasterPoolProfile(const OAIOpenShiftManagedClusterMasterPoolProfile &master_pool_profile) {
    m_master_pool_profile = master_pool_profile;
    m_master_pool_profile_isSet = true;
}

bool OAIOpenShiftManagedClusterProperties::is_master_pool_profile_Set() const{
    return m_master_pool_profile_isSet;
}

bool OAIOpenShiftManagedClusterProperties::is_master_pool_profile_Valid() const{
    return m_master_pool_profile_isValid;
}

OAINetworkProfile OAIOpenShiftManagedClusterProperties::getNetworkProfile() const {
    return m_network_profile;
}
void OAIOpenShiftManagedClusterProperties::setNetworkProfile(const OAINetworkProfile &network_profile) {
    m_network_profile = network_profile;
    m_network_profile_isSet = true;
}

bool OAIOpenShiftManagedClusterProperties::is_network_profile_Set() const{
    return m_network_profile_isSet;
}

bool OAIOpenShiftManagedClusterProperties::is_network_profile_Valid() const{
    return m_network_profile_isValid;
}

QString OAIOpenShiftManagedClusterProperties::getOpenShiftVersion() const {
    return m_open_shift_version;
}
void OAIOpenShiftManagedClusterProperties::setOpenShiftVersion(const QString &open_shift_version) {
    m_open_shift_version = open_shift_version;
    m_open_shift_version_isSet = true;
}

bool OAIOpenShiftManagedClusterProperties::is_open_shift_version_Set() const{
    return m_open_shift_version_isSet;
}

bool OAIOpenShiftManagedClusterProperties::is_open_shift_version_Valid() const{
    return m_open_shift_version_isValid;
}

QString OAIOpenShiftManagedClusterProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIOpenShiftManagedClusterProperties::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIOpenShiftManagedClusterProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIOpenShiftManagedClusterProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

QString OAIOpenShiftManagedClusterProperties::getPublicHostname() const {
    return m_public_hostname;
}
void OAIOpenShiftManagedClusterProperties::setPublicHostname(const QString &public_hostname) {
    m_public_hostname = public_hostname;
    m_public_hostname_isSet = true;
}

bool OAIOpenShiftManagedClusterProperties::is_public_hostname_Set() const{
    return m_public_hostname_isSet;
}

bool OAIOpenShiftManagedClusterProperties::is_public_hostname_Valid() const{
    return m_public_hostname_isValid;
}

QList<OAIOpenShiftRouterProfile> OAIOpenShiftManagedClusterProperties::getRouterProfiles() const {
    return m_router_profiles;
}
void OAIOpenShiftManagedClusterProperties::setRouterProfiles(const QList<OAIOpenShiftRouterProfile> &router_profiles) {
    m_router_profiles = router_profiles;
    m_router_profiles_isSet = true;
}

bool OAIOpenShiftManagedClusterProperties::is_router_profiles_Set() const{
    return m_router_profiles_isSet;
}

bool OAIOpenShiftManagedClusterProperties::is_router_profiles_Valid() const{
    return m_router_profiles_isValid;
}

bool OAIOpenShiftManagedClusterProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_agent_pool_profiles.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_auth_profile.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_fqdn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_master_pool_profile.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_profile.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_open_shift_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_hostname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_router_profiles.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOpenShiftManagedClusterProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_open_shift_version_isValid && true;
}

} // namespace OpenAPI
