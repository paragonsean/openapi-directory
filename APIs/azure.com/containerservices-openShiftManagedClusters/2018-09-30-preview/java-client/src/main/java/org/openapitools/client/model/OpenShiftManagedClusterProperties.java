/*
 * ContainerServiceClient
 * The Container Service Client.
 *
 * The version of the OpenAPI document: 2018-09-30-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.NetworkProfile;
import org.openapitools.client.model.OpenShiftManagedClusterAgentPoolProfile;
import org.openapitools.client.model.OpenShiftManagedClusterAuthProfile;
import org.openapitools.client.model.OpenShiftManagedClusterMasterPoolProfile;
import org.openapitools.client.model.OpenShiftRouterProfile;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties of the OpenShift managed cluster.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:03:29.696640-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OpenShiftManagedClusterProperties {
  public static final String SERIALIZED_NAME_AGENT_POOL_PROFILES = "agentPoolProfiles";
  @SerializedName(SERIALIZED_NAME_AGENT_POOL_PROFILES)
  private List<OpenShiftManagedClusterAgentPoolProfile> agentPoolProfiles = new ArrayList<>();

  public static final String SERIALIZED_NAME_AUTH_PROFILE = "authProfile";
  @SerializedName(SERIALIZED_NAME_AUTH_PROFILE)
  private OpenShiftManagedClusterAuthProfile authProfile;

  public static final String SERIALIZED_NAME_FQDN = "fqdn";
  @SerializedName(SERIALIZED_NAME_FQDN)
  private String fqdn;

  public static final String SERIALIZED_NAME_MASTER_POOL_PROFILE = "masterPoolProfile";
  @SerializedName(SERIALIZED_NAME_MASTER_POOL_PROFILE)
  private OpenShiftManagedClusterMasterPoolProfile masterPoolProfile;

  public static final String SERIALIZED_NAME_NETWORK_PROFILE = "networkProfile";
  @SerializedName(SERIALIZED_NAME_NETWORK_PROFILE)
  private NetworkProfile networkProfile;

  public static final String SERIALIZED_NAME_OPEN_SHIFT_VERSION = "openShiftVersion";
  @SerializedName(SERIALIZED_NAME_OPEN_SHIFT_VERSION)
  private String openShiftVersion;

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private String provisioningState;

  public static final String SERIALIZED_NAME_PUBLIC_HOSTNAME = "publicHostname";
  @SerializedName(SERIALIZED_NAME_PUBLIC_HOSTNAME)
  private String publicHostname;

  public static final String SERIALIZED_NAME_ROUTER_PROFILES = "routerProfiles";
  @SerializedName(SERIALIZED_NAME_ROUTER_PROFILES)
  private List<OpenShiftRouterProfile> routerProfiles = new ArrayList<>();

  public OpenShiftManagedClusterProperties() {
  }

  public OpenShiftManagedClusterProperties(
     String provisioningState
  ) {
    this();
    this.provisioningState = provisioningState;
  }

  public OpenShiftManagedClusterProperties agentPoolProfiles(List<OpenShiftManagedClusterAgentPoolProfile> agentPoolProfiles) {
    this.agentPoolProfiles = agentPoolProfiles;
    return this;
  }

  public OpenShiftManagedClusterProperties addAgentPoolProfilesItem(OpenShiftManagedClusterAgentPoolProfile agentPoolProfilesItem) {
    if (this.agentPoolProfiles == null) {
      this.agentPoolProfiles = new ArrayList<>();
    }
    this.agentPoolProfiles.add(agentPoolProfilesItem);
    return this;
  }

  /**
   * Configuration of OpenShift cluster VMs.
   * @return agentPoolProfiles
   */
  @javax.annotation.Nullable
  public List<OpenShiftManagedClusterAgentPoolProfile> getAgentPoolProfiles() {
    return agentPoolProfiles;
  }

  public void setAgentPoolProfiles(List<OpenShiftManagedClusterAgentPoolProfile> agentPoolProfiles) {
    this.agentPoolProfiles = agentPoolProfiles;
  }


  public OpenShiftManagedClusterProperties authProfile(OpenShiftManagedClusterAuthProfile authProfile) {
    this.authProfile = authProfile;
    return this;
  }

  /**
   * Get authProfile
   * @return authProfile
   */
  @javax.annotation.Nullable
  public OpenShiftManagedClusterAuthProfile getAuthProfile() {
    return authProfile;
  }

  public void setAuthProfile(OpenShiftManagedClusterAuthProfile authProfile) {
    this.authProfile = authProfile;
  }


  public OpenShiftManagedClusterProperties fqdn(String fqdn) {
    this.fqdn = fqdn;
    return this;
  }

  /**
   * User-specified FQDN for OpenShift API server loadbalancer internal hostname.
   * @return fqdn
   */
  @javax.annotation.Nullable
  public String getFqdn() {
    return fqdn;
  }

  public void setFqdn(String fqdn) {
    this.fqdn = fqdn;
  }


  public OpenShiftManagedClusterProperties masterPoolProfile(OpenShiftManagedClusterMasterPoolProfile masterPoolProfile) {
    this.masterPoolProfile = masterPoolProfile;
    return this;
  }

  /**
   * Get masterPoolProfile
   * @return masterPoolProfile
   */
  @javax.annotation.Nullable
  public OpenShiftManagedClusterMasterPoolProfile getMasterPoolProfile() {
    return masterPoolProfile;
  }

  public void setMasterPoolProfile(OpenShiftManagedClusterMasterPoolProfile masterPoolProfile) {
    this.masterPoolProfile = masterPoolProfile;
  }


  public OpenShiftManagedClusterProperties networkProfile(NetworkProfile networkProfile) {
    this.networkProfile = networkProfile;
    return this;
  }

  /**
   * Get networkProfile
   * @return networkProfile
   */
  @javax.annotation.Nullable
  public NetworkProfile getNetworkProfile() {
    return networkProfile;
  }

  public void setNetworkProfile(NetworkProfile networkProfile) {
    this.networkProfile = networkProfile;
  }


  public OpenShiftManagedClusterProperties openShiftVersion(String openShiftVersion) {
    this.openShiftVersion = openShiftVersion;
    return this;
  }

  /**
   * Version of OpenShift specified when creating the cluster.
   * @return openShiftVersion
   */
  @javax.annotation.Nonnull
  public String getOpenShiftVersion() {
    return openShiftVersion;
  }

  public void setOpenShiftVersion(String openShiftVersion) {
    this.openShiftVersion = openShiftVersion;
  }


  /**
   * The current deployment or provisioning state, which only appears in the response.
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public String getProvisioningState() {
    return provisioningState;
  }



  public OpenShiftManagedClusterProperties publicHostname(String publicHostname) {
    this.publicHostname = publicHostname;
    return this;
  }

  /**
   * Optional user-specified FQDN for OpenShift API server.
   * @return publicHostname
   */
  @javax.annotation.Nullable
  public String getPublicHostname() {
    return publicHostname;
  }

  public void setPublicHostname(String publicHostname) {
    this.publicHostname = publicHostname;
  }


  public OpenShiftManagedClusterProperties routerProfiles(List<OpenShiftRouterProfile> routerProfiles) {
    this.routerProfiles = routerProfiles;
    return this;
  }

  public OpenShiftManagedClusterProperties addRouterProfilesItem(OpenShiftRouterProfile routerProfilesItem) {
    if (this.routerProfiles == null) {
      this.routerProfiles = new ArrayList<>();
    }
    this.routerProfiles.add(routerProfilesItem);
    return this;
  }

  /**
   * Configuration for OpenShift router(s).
   * @return routerProfiles
   */
  @javax.annotation.Nullable
  public List<OpenShiftRouterProfile> getRouterProfiles() {
    return routerProfiles;
  }

  public void setRouterProfiles(List<OpenShiftRouterProfile> routerProfiles) {
    this.routerProfiles = routerProfiles;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OpenShiftManagedClusterProperties openShiftManagedClusterProperties = (OpenShiftManagedClusterProperties) o;
    return Objects.equals(this.agentPoolProfiles, openShiftManagedClusterProperties.agentPoolProfiles) &&
        Objects.equals(this.authProfile, openShiftManagedClusterProperties.authProfile) &&
        Objects.equals(this.fqdn, openShiftManagedClusterProperties.fqdn) &&
        Objects.equals(this.masterPoolProfile, openShiftManagedClusterProperties.masterPoolProfile) &&
        Objects.equals(this.networkProfile, openShiftManagedClusterProperties.networkProfile) &&
        Objects.equals(this.openShiftVersion, openShiftManagedClusterProperties.openShiftVersion) &&
        Objects.equals(this.provisioningState, openShiftManagedClusterProperties.provisioningState) &&
        Objects.equals(this.publicHostname, openShiftManagedClusterProperties.publicHostname) &&
        Objects.equals(this.routerProfiles, openShiftManagedClusterProperties.routerProfiles);
  }

  @Override
  public int hashCode() {
    return Objects.hash(agentPoolProfiles, authProfile, fqdn, masterPoolProfile, networkProfile, openShiftVersion, provisioningState, publicHostname, routerProfiles);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OpenShiftManagedClusterProperties {\n");
    sb.append("    agentPoolProfiles: ").append(toIndentedString(agentPoolProfiles)).append("\n");
    sb.append("    authProfile: ").append(toIndentedString(authProfile)).append("\n");
    sb.append("    fqdn: ").append(toIndentedString(fqdn)).append("\n");
    sb.append("    masterPoolProfile: ").append(toIndentedString(masterPoolProfile)).append("\n");
    sb.append("    networkProfile: ").append(toIndentedString(networkProfile)).append("\n");
    sb.append("    openShiftVersion: ").append(toIndentedString(openShiftVersion)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("    publicHostname: ").append(toIndentedString(publicHostname)).append("\n");
    sb.append("    routerProfiles: ").append(toIndentedString(routerProfiles)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("agentPoolProfiles");
    openapiFields.add("authProfile");
    openapiFields.add("fqdn");
    openapiFields.add("masterPoolProfile");
    openapiFields.add("networkProfile");
    openapiFields.add("openShiftVersion");
    openapiFields.add("provisioningState");
    openapiFields.add("publicHostname");
    openapiFields.add("routerProfiles");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("openShiftVersion");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OpenShiftManagedClusterProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OpenShiftManagedClusterProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OpenShiftManagedClusterProperties is not found in the empty JSON string", OpenShiftManagedClusterProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OpenShiftManagedClusterProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OpenShiftManagedClusterProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : OpenShiftManagedClusterProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("agentPoolProfiles") != null && !jsonObj.get("agentPoolProfiles").isJsonNull()) {
        JsonArray jsonArrayagentPoolProfiles = jsonObj.getAsJsonArray("agentPoolProfiles");
        if (jsonArrayagentPoolProfiles != null) {
          // ensure the json data is an array
          if (!jsonObj.get("agentPoolProfiles").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `agentPoolProfiles` to be an array in the JSON string but got `%s`", jsonObj.get("agentPoolProfiles").toString()));
          }

          // validate the optional field `agentPoolProfiles` (array)
          for (int i = 0; i < jsonArrayagentPoolProfiles.size(); i++) {
            OpenShiftManagedClusterAgentPoolProfile.validateJsonElement(jsonArrayagentPoolProfiles.get(i));
          };
        }
      }
      // validate the optional field `authProfile`
      if (jsonObj.get("authProfile") != null && !jsonObj.get("authProfile").isJsonNull()) {
        OpenShiftManagedClusterAuthProfile.validateJsonElement(jsonObj.get("authProfile"));
      }
      if ((jsonObj.get("fqdn") != null && !jsonObj.get("fqdn").isJsonNull()) && !jsonObj.get("fqdn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fqdn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fqdn").toString()));
      }
      // validate the optional field `masterPoolProfile`
      if (jsonObj.get("masterPoolProfile") != null && !jsonObj.get("masterPoolProfile").isJsonNull()) {
        OpenShiftManagedClusterMasterPoolProfile.validateJsonElement(jsonObj.get("masterPoolProfile"));
      }
      // validate the optional field `networkProfile`
      if (jsonObj.get("networkProfile") != null && !jsonObj.get("networkProfile").isJsonNull()) {
        NetworkProfile.validateJsonElement(jsonObj.get("networkProfile"));
      }
      if (!jsonObj.get("openShiftVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `openShiftVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("openShiftVersion").toString()));
      }
      if ((jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) && !jsonObj.get("provisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningState").toString()));
      }
      if ((jsonObj.get("publicHostname") != null && !jsonObj.get("publicHostname").isJsonNull()) && !jsonObj.get("publicHostname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `publicHostname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("publicHostname").toString()));
      }
      if (jsonObj.get("routerProfiles") != null && !jsonObj.get("routerProfiles").isJsonNull()) {
        JsonArray jsonArrayrouterProfiles = jsonObj.getAsJsonArray("routerProfiles");
        if (jsonArrayrouterProfiles != null) {
          // ensure the json data is an array
          if (!jsonObj.get("routerProfiles").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `routerProfiles` to be an array in the JSON string but got `%s`", jsonObj.get("routerProfiles").toString()));
          }

          // validate the optional field `routerProfiles` (array)
          for (int i = 0; i < jsonArrayrouterProfiles.size(); i++) {
            OpenShiftRouterProfile.validateJsonElement(jsonArrayrouterProfiles.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OpenShiftManagedClusterProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OpenShiftManagedClusterProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OpenShiftManagedClusterProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OpenShiftManagedClusterProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<OpenShiftManagedClusterProperties>() {
           @Override
           public void write(JsonWriter out, OpenShiftManagedClusterProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OpenShiftManagedClusterProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OpenShiftManagedClusterProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OpenShiftManagedClusterProperties
   * @throws IOException if the JSON string is invalid with respect to OpenShiftManagedClusterProperties
   */
  public static OpenShiftManagedClusterProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OpenShiftManagedClusterProperties.class);
  }

  /**
   * Convert an instance of OpenShiftManagedClusterProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

