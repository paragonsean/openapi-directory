/**
 * windowsesu
 * Manage Multi-Access Keys (MAK) that enable Windows Extended Security Updates (ESU).
 *
 * The version of the OpenAPI document: 2019-09-16-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorResponse from '../model/ErrorResponse';
import MultipleActivationKey from '../model/MultipleActivationKey';
import MultipleActivationKeyList from '../model/MultipleActivationKeyList';
import MultipleActivationKeyUpdate from '../model/MultipleActivationKeyUpdate';

/**
* MultipleActivationKeys service.
* @module api/MultipleActivationKeysApi
* @version 2019-09-16-preview
*/
export default class MultipleActivationKeysApi {

    /**
    * Constructs a new MultipleActivationKeysApi. 
    * @alias module:api/MultipleActivationKeysApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the multipleActivationKeysCreate operation.
     * @callback module:api/MultipleActivationKeysApi~multipleActivationKeysCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MultipleActivationKey} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a MAK key.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {String} resourceGroupName The name of the resource group. The name is case insensitive.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {String} multipleActivationKeyName The name of the MAK key.
     * @param {module:model/MultipleActivationKey} multipleActivationKey Details of the MAK key.
     * @param {module:api/MultipleActivationKeysApi~multipleActivationKeysCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MultipleActivationKey}
     */
    multipleActivationKeysCreate(subscriptionId, resourceGroupName, apiVersion, multipleActivationKeyName, multipleActivationKey, callback) {
      let postBody = multipleActivationKey;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling multipleActivationKeysCreate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling multipleActivationKeysCreate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling multipleActivationKeysCreate");
      }
      // verify the required parameter 'multipleActivationKeyName' is set
      if (multipleActivationKeyName === undefined || multipleActivationKeyName === null) {
        throw new Error("Missing the required parameter 'multipleActivationKeyName' when calling multipleActivationKeysCreate");
      }
      // verify the required parameter 'multipleActivationKey' is set
      if (multipleActivationKey === undefined || multipleActivationKey === null) {
        throw new Error("Missing the required parameter 'multipleActivationKey' when calling multipleActivationKeysCreate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'multipleActivationKeyName': multipleActivationKeyName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = MultipleActivationKey;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.WindowsESU/multipleActivationKeys/{multipleActivationKeyName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the multipleActivationKeysDelete operation.
     * @callback module:api/MultipleActivationKeysApi~multipleActivationKeysDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a MAK key.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {String} resourceGroupName The name of the resource group. The name is case insensitive.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {String} multipleActivationKeyName The name of the MAK key.
     * @param {module:api/MultipleActivationKeysApi~multipleActivationKeysDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    multipleActivationKeysDelete(subscriptionId, resourceGroupName, apiVersion, multipleActivationKeyName, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling multipleActivationKeysDelete");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling multipleActivationKeysDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling multipleActivationKeysDelete");
      }
      // verify the required parameter 'multipleActivationKeyName' is set
      if (multipleActivationKeyName === undefined || multipleActivationKeyName === null) {
        throw new Error("Missing the required parameter 'multipleActivationKeyName' when calling multipleActivationKeysDelete");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'multipleActivationKeyName': multipleActivationKeyName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.WindowsESU/multipleActivationKeys/{multipleActivationKeyName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the multipleActivationKeysGet operation.
     * @callback module:api/MultipleActivationKeysApi~multipleActivationKeysGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MultipleActivationKey} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a MAK key.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {String} resourceGroupName The name of the resource group. The name is case insensitive.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {String} multipleActivationKeyName The name of the MAK key.
     * @param {module:api/MultipleActivationKeysApi~multipleActivationKeysGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MultipleActivationKey}
     */
    multipleActivationKeysGet(subscriptionId, resourceGroupName, apiVersion, multipleActivationKeyName, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling multipleActivationKeysGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling multipleActivationKeysGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling multipleActivationKeysGet");
      }
      // verify the required parameter 'multipleActivationKeyName' is set
      if (multipleActivationKeyName === undefined || multipleActivationKeyName === null) {
        throw new Error("Missing the required parameter 'multipleActivationKeyName' when calling multipleActivationKeysGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'multipleActivationKeyName': multipleActivationKeyName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MultipleActivationKey;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.WindowsESU/multipleActivationKeys/{multipleActivationKeyName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the multipleActivationKeysList operation.
     * @callback module:api/MultipleActivationKeysApi~multipleActivationKeysListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MultipleActivationKeyList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all Multiple Activation Keys (MAK) created for a subscription.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {module:api/MultipleActivationKeysApi~multipleActivationKeysListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MultipleActivationKeyList}
     */
    multipleActivationKeysList(subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling multipleActivationKeysList");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling multipleActivationKeysList");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MultipleActivationKeyList;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.WindowsESU/multipleActivationKeys', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the multipleActivationKeysListByResourceGroup operation.
     * @callback module:api/MultipleActivationKeysApi~multipleActivationKeysListByResourceGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MultipleActivationKeyList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all Multiple Activation Keys (MAK) in a resource group.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {String} resourceGroupName The name of the resource group. The name is case insensitive.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {module:api/MultipleActivationKeysApi~multipleActivationKeysListByResourceGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MultipleActivationKeyList}
     */
    multipleActivationKeysListByResourceGroup(subscriptionId, resourceGroupName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling multipleActivationKeysListByResourceGroup");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling multipleActivationKeysListByResourceGroup");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling multipleActivationKeysListByResourceGroup");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MultipleActivationKeyList;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.WindowsESU/multipleActivationKeys', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the multipleActivationKeysUpdate operation.
     * @callback module:api/MultipleActivationKeysApi~multipleActivationKeysUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MultipleActivationKey} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a MAK key.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {String} resourceGroupName The name of the resource group. The name is case insensitive.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {String} multipleActivationKeyName The name of the MAK key.
     * @param {module:model/MultipleActivationKeyUpdate} multipleActivationKey Details of the MAK key.
     * @param {module:api/MultipleActivationKeysApi~multipleActivationKeysUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MultipleActivationKey}
     */
    multipleActivationKeysUpdate(subscriptionId, resourceGroupName, apiVersion, multipleActivationKeyName, multipleActivationKey, callback) {
      let postBody = multipleActivationKey;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling multipleActivationKeysUpdate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling multipleActivationKeysUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling multipleActivationKeysUpdate");
      }
      // verify the required parameter 'multipleActivationKeyName' is set
      if (multipleActivationKeyName === undefined || multipleActivationKeyName === null) {
        throw new Error("Missing the required parameter 'multipleActivationKeyName' when calling multipleActivationKeysUpdate");
      }
      // verify the required parameter 'multipleActivationKey' is set
      if (multipleActivationKey === undefined || multipleActivationKey === null) {
        throw new Error("Missing the required parameter 'multipleActivationKey' when calling multipleActivationKeysUpdate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'multipleActivationKeyName': multipleActivationKeyName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = MultipleActivationKey;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.WindowsESU/multipleActivationKeys/{multipleActivationKeyName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
