/**
 * windowsesu
 * Manage Multi-Access Keys (MAK) that enable Windows Extended Security Updates (ESU).
 *
 * The version of the OpenAPI document: 2019-09-16-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIMultipleActivationKeysApi_H
#define OAI_OAIMultipleActivationKeysApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIErrorResponse.h"
#include "OAIMultipleActivationKey.h"
#include "OAIMultipleActivationKeyList.h"
#include "OAIMultipleActivationKeyUpdate.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIMultipleActivationKeysApi : public QObject {
    Q_OBJECT

public:
    OAIMultipleActivationKeysApi(const int timeOut = 0);
    ~OAIMultipleActivationKeysApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  multiple_activation_key_name QString [required]
    * @param[in]  multiple_activation_key OAIMultipleActivationKey [required]
    */
    virtual void multipleActivationKeysCreate(const QString &subscription_id, const QString &resource_group_name, const QString &api_version, const QString &multiple_activation_key_name, const OAIMultipleActivationKey &multiple_activation_key);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  multiple_activation_key_name QString [required]
    */
    virtual void multipleActivationKeysDelete(const QString &subscription_id, const QString &resource_group_name, const QString &api_version, const QString &multiple_activation_key_name);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  multiple_activation_key_name QString [required]
    */
    virtual void multipleActivationKeysGet(const QString &subscription_id, const QString &resource_group_name, const QString &api_version, const QString &multiple_activation_key_name);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void multipleActivationKeysList(const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void multipleActivationKeysListByResourceGroup(const QString &subscription_id, const QString &resource_group_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  multiple_activation_key_name QString [required]
    * @param[in]  multiple_activation_key OAIMultipleActivationKeyUpdate [required]
    */
    virtual void multipleActivationKeysUpdate(const QString &subscription_id, const QString &resource_group_name, const QString &api_version, const QString &multiple_activation_key_name, const OAIMultipleActivationKeyUpdate &multiple_activation_key);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void multipleActivationKeysCreateCallback(OAIHttpRequestWorker *worker);
    void multipleActivationKeysDeleteCallback(OAIHttpRequestWorker *worker);
    void multipleActivationKeysGetCallback(OAIHttpRequestWorker *worker);
    void multipleActivationKeysListCallback(OAIHttpRequestWorker *worker);
    void multipleActivationKeysListByResourceGroupCallback(OAIHttpRequestWorker *worker);
    void multipleActivationKeysUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void multipleActivationKeysCreateSignal(OAIMultipleActivationKey summary);
    void multipleActivationKeysDeleteSignal();
    void multipleActivationKeysGetSignal(OAIMultipleActivationKey summary);
    void multipleActivationKeysListSignal(OAIMultipleActivationKeyList summary);
    void multipleActivationKeysListByResourceGroupSignal(OAIMultipleActivationKeyList summary);
    void multipleActivationKeysUpdateSignal(OAIMultipleActivationKey summary);


    void multipleActivationKeysCreateSignalFull(OAIHttpRequestWorker *worker, OAIMultipleActivationKey summary);
    void multipleActivationKeysDeleteSignalFull(OAIHttpRequestWorker *worker);
    void multipleActivationKeysGetSignalFull(OAIHttpRequestWorker *worker, OAIMultipleActivationKey summary);
    void multipleActivationKeysListSignalFull(OAIHttpRequestWorker *worker, OAIMultipleActivationKeyList summary);
    void multipleActivationKeysListByResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAIMultipleActivationKeyList summary);
    void multipleActivationKeysUpdateSignalFull(OAIHttpRequestWorker *worker, OAIMultipleActivationKey summary);

    Q_DECL_DEPRECATED_X("Use multipleActivationKeysCreateSignalError() instead")
    void multipleActivationKeysCreateSignalE(OAIMultipleActivationKey summary, QNetworkReply::NetworkError error_type, QString error_str);
    void multipleActivationKeysCreateSignalError(OAIMultipleActivationKey summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use multipleActivationKeysDeleteSignalError() instead")
    void multipleActivationKeysDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void multipleActivationKeysDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use multipleActivationKeysGetSignalError() instead")
    void multipleActivationKeysGetSignalE(OAIMultipleActivationKey summary, QNetworkReply::NetworkError error_type, QString error_str);
    void multipleActivationKeysGetSignalError(OAIMultipleActivationKey summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use multipleActivationKeysListSignalError() instead")
    void multipleActivationKeysListSignalE(OAIMultipleActivationKeyList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void multipleActivationKeysListSignalError(OAIMultipleActivationKeyList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use multipleActivationKeysListByResourceGroupSignalError() instead")
    void multipleActivationKeysListByResourceGroupSignalE(OAIMultipleActivationKeyList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void multipleActivationKeysListByResourceGroupSignalError(OAIMultipleActivationKeyList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use multipleActivationKeysUpdateSignalError() instead")
    void multipleActivationKeysUpdateSignalE(OAIMultipleActivationKey summary, QNetworkReply::NetworkError error_type, QString error_str);
    void multipleActivationKeysUpdateSignalError(OAIMultipleActivationKey summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use multipleActivationKeysCreateSignalErrorFull() instead")
    void multipleActivationKeysCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void multipleActivationKeysCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use multipleActivationKeysDeleteSignalErrorFull() instead")
    void multipleActivationKeysDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void multipleActivationKeysDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use multipleActivationKeysGetSignalErrorFull() instead")
    void multipleActivationKeysGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void multipleActivationKeysGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use multipleActivationKeysListSignalErrorFull() instead")
    void multipleActivationKeysListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void multipleActivationKeysListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use multipleActivationKeysListByResourceGroupSignalErrorFull() instead")
    void multipleActivationKeysListByResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void multipleActivationKeysListByResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use multipleActivationKeysUpdateSignalErrorFull() instead")
    void multipleActivationKeysUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void multipleActivationKeysUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
