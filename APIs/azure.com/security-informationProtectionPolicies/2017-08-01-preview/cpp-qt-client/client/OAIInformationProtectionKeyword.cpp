/**
 * Security Center
 * API spec for Microsoft.Security (Azure Security Center) resource provider
 *
 * The version of the OpenAPI document: 2017-08-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInformationProtectionKeyword.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInformationProtectionKeyword::OAIInformationProtectionKeyword(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInformationProtectionKeyword::OAIInformationProtectionKeyword() {
    this->initializeModel();
}

OAIInformationProtectionKeyword::~OAIInformationProtectionKeyword() {}

void OAIInformationProtectionKeyword::initializeModel() {

    m_can_be_numeric_isSet = false;
    m_can_be_numeric_isValid = false;

    m_custom_isSet = false;
    m_custom_isValid = false;

    m_excluded_isSet = false;
    m_excluded_isValid = false;

    m_pattern_isSet = false;
    m_pattern_isValid = false;
}

void OAIInformationProtectionKeyword::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInformationProtectionKeyword::fromJsonObject(QJsonObject json) {

    m_can_be_numeric_isValid = ::OpenAPI::fromJsonValue(m_can_be_numeric, json[QString("canBeNumeric")]);
    m_can_be_numeric_isSet = !json[QString("canBeNumeric")].isNull() && m_can_be_numeric_isValid;

    m_custom_isValid = ::OpenAPI::fromJsonValue(m_custom, json[QString("custom")]);
    m_custom_isSet = !json[QString("custom")].isNull() && m_custom_isValid;

    m_excluded_isValid = ::OpenAPI::fromJsonValue(m_excluded, json[QString("excluded")]);
    m_excluded_isSet = !json[QString("excluded")].isNull() && m_excluded_isValid;

    m_pattern_isValid = ::OpenAPI::fromJsonValue(m_pattern, json[QString("pattern")]);
    m_pattern_isSet = !json[QString("pattern")].isNull() && m_pattern_isValid;
}

QString OAIInformationProtectionKeyword::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInformationProtectionKeyword::asJsonObject() const {
    QJsonObject obj;
    if (m_can_be_numeric_isSet) {
        obj.insert(QString("canBeNumeric"), ::OpenAPI::toJsonValue(m_can_be_numeric));
    }
    if (m_custom_isSet) {
        obj.insert(QString("custom"), ::OpenAPI::toJsonValue(m_custom));
    }
    if (m_excluded_isSet) {
        obj.insert(QString("excluded"), ::OpenAPI::toJsonValue(m_excluded));
    }
    if (m_pattern_isSet) {
        obj.insert(QString("pattern"), ::OpenAPI::toJsonValue(m_pattern));
    }
    return obj;
}

bool OAIInformationProtectionKeyword::isCanBeNumeric() const {
    return m_can_be_numeric;
}
void OAIInformationProtectionKeyword::setCanBeNumeric(const bool &can_be_numeric) {
    m_can_be_numeric = can_be_numeric;
    m_can_be_numeric_isSet = true;
}

bool OAIInformationProtectionKeyword::is_can_be_numeric_Set() const{
    return m_can_be_numeric_isSet;
}

bool OAIInformationProtectionKeyword::is_can_be_numeric_Valid() const{
    return m_can_be_numeric_isValid;
}

bool OAIInformationProtectionKeyword::isCustom() const {
    return m_custom;
}
void OAIInformationProtectionKeyword::setCustom(const bool &custom) {
    m_custom = custom;
    m_custom_isSet = true;
}

bool OAIInformationProtectionKeyword::is_custom_Set() const{
    return m_custom_isSet;
}

bool OAIInformationProtectionKeyword::is_custom_Valid() const{
    return m_custom_isValid;
}

bool OAIInformationProtectionKeyword::isExcluded() const {
    return m_excluded;
}
void OAIInformationProtectionKeyword::setExcluded(const bool &excluded) {
    m_excluded = excluded;
    m_excluded_isSet = true;
}

bool OAIInformationProtectionKeyword::is_excluded_Set() const{
    return m_excluded_isSet;
}

bool OAIInformationProtectionKeyword::is_excluded_Valid() const{
    return m_excluded_isValid;
}

QString OAIInformationProtectionKeyword::getPattern() const {
    return m_pattern;
}
void OAIInformationProtectionKeyword::setPattern(const QString &pattern) {
    m_pattern = pattern;
    m_pattern_isSet = true;
}

bool OAIInformationProtectionKeyword::is_pattern_Set() const{
    return m_pattern_isSet;
}

bool OAIInformationProtectionKeyword::is_pattern_Valid() const{
    return m_pattern_isValid;
}

bool OAIInformationProtectionKeyword::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_can_be_numeric_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_excluded_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pattern_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInformationProtectionKeyword::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
