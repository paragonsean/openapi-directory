# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class InformationProtectionKeyword(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, can_be_numeric: bool=None, custom: bool=None, excluded: bool=None, pattern: str=None):
        """InformationProtectionKeyword - a model defined in OpenAPI

        :param can_be_numeric: The can_be_numeric of this InformationProtectionKeyword.
        :param custom: The custom of this InformationProtectionKeyword.
        :param excluded: The excluded of this InformationProtectionKeyword.
        :param pattern: The pattern of this InformationProtectionKeyword.
        """
        self.openapi_types = {
            'can_be_numeric': bool,
            'custom': bool,
            'excluded': bool,
            'pattern': str
        }

        self.attribute_map = {
            'can_be_numeric': 'canBeNumeric',
            'custom': 'custom',
            'excluded': 'excluded',
            'pattern': 'pattern'
        }

        self._can_be_numeric = can_be_numeric
        self._custom = custom
        self._excluded = excluded
        self._pattern = pattern

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InformationProtectionKeyword':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InformationProtectionKeyword of this InformationProtectionKeyword.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def can_be_numeric(self):
        """Gets the can_be_numeric of this InformationProtectionKeyword.

        Indicates whether the keyword can be applied on numeric types or not.

        :return: The can_be_numeric of this InformationProtectionKeyword.
        :rtype: bool
        """
        return self._can_be_numeric

    @can_be_numeric.setter
    def can_be_numeric(self, can_be_numeric):
        """Sets the can_be_numeric of this InformationProtectionKeyword.

        Indicates whether the keyword can be applied on numeric types or not.

        :param can_be_numeric: The can_be_numeric of this InformationProtectionKeyword.
        :type can_be_numeric: bool
        """

        self._can_be_numeric = can_be_numeric

    @property
    def custom(self):
        """Gets the custom of this InformationProtectionKeyword.

        Indicates whether the keyword is custom or not.

        :return: The custom of this InformationProtectionKeyword.
        :rtype: bool
        """
        return self._custom

    @custom.setter
    def custom(self, custom):
        """Sets the custom of this InformationProtectionKeyword.

        Indicates whether the keyword is custom or not.

        :param custom: The custom of this InformationProtectionKeyword.
        :type custom: bool
        """

        self._custom = custom

    @property
    def excluded(self):
        """Gets the excluded of this InformationProtectionKeyword.

        Indicates whether the keyword is excluded or not.

        :return: The excluded of this InformationProtectionKeyword.
        :rtype: bool
        """
        return self._excluded

    @excluded.setter
    def excluded(self, excluded):
        """Sets the excluded of this InformationProtectionKeyword.

        Indicates whether the keyword is excluded or not.

        :param excluded: The excluded of this InformationProtectionKeyword.
        :type excluded: bool
        """

        self._excluded = excluded

    @property
    def pattern(self):
        """Gets the pattern of this InformationProtectionKeyword.

        The keyword pattern.

        :return: The pattern of this InformationProtectionKeyword.
        :rtype: str
        """
        return self._pattern

    @pattern.setter
    def pattern(self, pattern):
        """Sets the pattern of this InformationProtectionKeyword.

        The keyword pattern.

        :param pattern: The pattern of this InformationProtectionKeyword.
        :type pattern: str
        """

        self._pattern = pattern
