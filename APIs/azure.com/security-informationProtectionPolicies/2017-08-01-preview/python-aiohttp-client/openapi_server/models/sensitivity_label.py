# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SensitivityLabel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, display_name: str=None, enabled: bool=None, order: float=None):
        """SensitivityLabel - a model defined in OpenAPI

        :param display_name: The display_name of this SensitivityLabel.
        :param enabled: The enabled of this SensitivityLabel.
        :param order: The order of this SensitivityLabel.
        """
        self.openapi_types = {
            'display_name': str,
            'enabled': bool,
            'order': float
        }

        self.attribute_map = {
            'display_name': 'displayName',
            'enabled': 'enabled',
            'order': 'order'
        }

        self._display_name = display_name
        self._enabled = enabled
        self._order = order

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SensitivityLabel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SensitivityLabel of this SensitivityLabel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def display_name(self):
        """Gets the display_name of this SensitivityLabel.

        The name of the sensitivity label.

        :return: The display_name of this SensitivityLabel.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this SensitivityLabel.

        The name of the sensitivity label.

        :param display_name: The display_name of this SensitivityLabel.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def enabled(self):
        """Gets the enabled of this SensitivityLabel.

        Indicates whether the label is enabled or not.

        :return: The enabled of this SensitivityLabel.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this SensitivityLabel.

        Indicates whether the label is enabled or not.

        :param enabled: The enabled of this SensitivityLabel.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def order(self):
        """Gets the order of this SensitivityLabel.

        The order of the sensitivity label.

        :return: The order of this SensitivityLabel.
        :rtype: float
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this SensitivityLabel.

        The order of the sensitivity label.

        :param order: The order of this SensitivityLabel.
        :type order: float
        """

        self._order = order
