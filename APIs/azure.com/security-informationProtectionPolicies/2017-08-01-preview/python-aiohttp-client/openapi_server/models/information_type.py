# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.information_protection_keyword import InformationProtectionKeyword
from openapi_server import util


class InformationType(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, custom: bool=None, display_name: str=None, enabled: bool=None, keywords: List[InformationProtectionKeyword]=None, order: float=None, recommended_label_id: str=None):
        """InformationType - a model defined in OpenAPI

        :param custom: The custom of this InformationType.
        :param display_name: The display_name of this InformationType.
        :param enabled: The enabled of this InformationType.
        :param keywords: The keywords of this InformationType.
        :param order: The order of this InformationType.
        :param recommended_label_id: The recommended_label_id of this InformationType.
        """
        self.openapi_types = {
            'custom': bool,
            'display_name': str,
            'enabled': bool,
            'keywords': List[InformationProtectionKeyword],
            'order': float,
            'recommended_label_id': str
        }

        self.attribute_map = {
            'custom': 'custom',
            'display_name': 'displayName',
            'enabled': 'enabled',
            'keywords': 'keywords',
            'order': 'order',
            'recommended_label_id': 'recommendedLabelId'
        }

        self._custom = custom
        self._display_name = display_name
        self._enabled = enabled
        self._keywords = keywords
        self._order = order
        self._recommended_label_id = recommended_label_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InformationType':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InformationType of this InformationType.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def custom(self):
        """Gets the custom of this InformationType.

        Indicates whether the information type is custom or not.

        :return: The custom of this InformationType.
        :rtype: bool
        """
        return self._custom

    @custom.setter
    def custom(self, custom):
        """Sets the custom of this InformationType.

        Indicates whether the information type is custom or not.

        :param custom: The custom of this InformationType.
        :type custom: bool
        """

        self._custom = custom

    @property
    def display_name(self):
        """Gets the display_name of this InformationType.

        The name of the information type.

        :return: The display_name of this InformationType.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this InformationType.

        The name of the information type.

        :param display_name: The display_name of this InformationType.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def enabled(self):
        """Gets the enabled of this InformationType.

        Indicates whether the information type is enabled or not.

        :return: The enabled of this InformationType.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this InformationType.

        Indicates whether the information type is enabled or not.

        :param enabled: The enabled of this InformationType.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def keywords(self):
        """Gets the keywords of this InformationType.

        The information type keywords.

        :return: The keywords of this InformationType.
        :rtype: List[InformationProtectionKeyword]
        """
        return self._keywords

    @keywords.setter
    def keywords(self, keywords):
        """Sets the keywords of this InformationType.

        The information type keywords.

        :param keywords: The keywords of this InformationType.
        :type keywords: List[InformationProtectionKeyword]
        """

        self._keywords = keywords

    @property
    def order(self):
        """Gets the order of this InformationType.

        The order of the information type.

        :return: The order of this InformationType.
        :rtype: float
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this InformationType.

        The order of the information type.

        :param order: The order of this InformationType.
        :type order: float
        """

        self._order = order

    @property
    def recommended_label_id(self):
        """Gets the recommended_label_id of this InformationType.

        The recommended label id to be associated with this information type.

        :return: The recommended_label_id of this InformationType.
        :rtype: str
        """
        return self._recommended_label_id

    @recommended_label_id.setter
    def recommended_label_id(self, recommended_label_id):
        """Sets the recommended_label_id of this InformationType.

        The recommended label id to be associated with this information type.

        :param recommended_label_id: The recommended_label_id of this InformationType.
        :type recommended_label_id: str
        """

        self._recommended_label_id = recommended_label_id
