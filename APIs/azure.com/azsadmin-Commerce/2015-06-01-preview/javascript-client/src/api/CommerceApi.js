/**
 * CommerceManagementClient
 * The Admin Commerce Management Client.
 *
 * The version of the OpenAPI document: 2015-06-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import OperationList from '../model/OperationList';
import UsageAggregatePage from '../model/UsageAggregatePage';

/**
* Commerce service.
* @module api/CommerceApi
* @version 2015-06-01-preview
*/
export default class CommerceApi {

    /**
    * Constructs a new CommerceApi. 
    * @alias module:api/CommerceApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the operationsList operation.
     * @callback module:api/CommerceApi~operationsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the list of supported REST operations.
     * @param {String} apiVersion Client API Version.
     * @param {module:api/CommerceApi~operationsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationList}
     */
    operationsList(apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling operationsList");
      }

      let pathParams = {
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OperationList;
      return this.apiClient.callApi(
        '/providers/Microsoft.Commerce.Admin/operations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the subscriberUsageAggregatesList operation.
     * @callback module:api/CommerceApi~subscriberUsageAggregatesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UsageAggregatePage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a collection of SubscriberUsageAggregates, which are UsageAggregates from users.
     * @param {String} subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription.The subscription ID forms part of the URI for every service call.
     * @param {String} apiVersion Client API Version.
     * @param {Date} reportedStartTime The reported start time (inclusive).
     * @param {Date} reportedEndTime The reported end time (exclusive).
     * @param {Object} opts Optional parameters
     * @param {String} [aggregationGranularity] The aggregation granularity.
     * @param {String} [subscriberId] The tenant subscription identifier.
     * @param {String} [continuationToken] The continuation token.
     * @param {module:api/CommerceApi~subscriberUsageAggregatesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UsageAggregatePage}
     */
    subscriberUsageAggregatesList(subscriptionId, apiVersion, reportedStartTime, reportedEndTime, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling subscriberUsageAggregatesList");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling subscriberUsageAggregatesList");
      }
      // verify the required parameter 'reportedStartTime' is set
      if (reportedStartTime === undefined || reportedStartTime === null) {
        throw new Error("Missing the required parameter 'reportedStartTime' when calling subscriberUsageAggregatesList");
      }
      // verify the required parameter 'reportedEndTime' is set
      if (reportedEndTime === undefined || reportedEndTime === null) {
        throw new Error("Missing the required parameter 'reportedEndTime' when calling subscriberUsageAggregatesList");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion,
        'reportedStartTime': reportedStartTime,
        'reportedEndTime': reportedEndTime,
        'aggregationGranularity': opts['aggregationGranularity'],
        'subscriberId': opts['subscriberId'],
        'continuationToken': opts['continuationToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UsageAggregatePage;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Commerce.Admin/subscriberUsageAggregates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateEncryption operation.
     * @callback module:api/CommerceApi~updateEncryptionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the encryption.
     * @param {String} subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription.The subscription ID forms part of the URI for every service call.
     * @param {String} apiVersion Client API Version.
     * @param {module:api/CommerceApi~updateEncryptionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateEncryption(subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling updateEncryption");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling updateEncryption");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Commerce.Admin/updateEncryption', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
