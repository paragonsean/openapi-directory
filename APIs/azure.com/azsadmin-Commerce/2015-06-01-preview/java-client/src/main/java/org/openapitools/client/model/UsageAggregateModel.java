/*
 * CommerceManagementClient
 * The Admin Commerce Management Client.
 *
 * The version of the OpenAPI document: 2015-06-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties for aggregate usage.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:55:54.794019-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UsageAggregateModel {
  public static final String SERIALIZED_NAME_INSTANCE_DATA = "instanceData";
  @SerializedName(SERIALIZED_NAME_INSTANCE_DATA)
  private String instanceData;

  public static final String SERIALIZED_NAME_METER_ID = "meterId";
  @SerializedName(SERIALIZED_NAME_METER_ID)
  private String meterId;

  public static final String SERIALIZED_NAME_QUANTITY = "quantity";
  @SerializedName(SERIALIZED_NAME_QUANTITY)
  private String quantity;

  public static final String SERIALIZED_NAME_SUBSCRIPTION_ID = "subscriptionId";
  @SerializedName(SERIALIZED_NAME_SUBSCRIPTION_ID)
  private String subscriptionId;

  public static final String SERIALIZED_NAME_USAGE_END_TIME = "usageEndTime";
  @SerializedName(SERIALIZED_NAME_USAGE_END_TIME)
  private OffsetDateTime usageEndTime;

  public static final String SERIALIZED_NAME_USAGE_START_TIME = "usageStartTime";
  @SerializedName(SERIALIZED_NAME_USAGE_START_TIME)
  private OffsetDateTime usageStartTime;

  public UsageAggregateModel() {
  }

  public UsageAggregateModel instanceData(String instanceData) {
    this.instanceData = instanceData;
    return this;
  }

  /**
   * Key-value pairs of instance details represented as a string.
   * @return instanceData
   */
  @javax.annotation.Nullable
  public String getInstanceData() {
    return instanceData;
  }

  public void setInstanceData(String instanceData) {
    this.instanceData = instanceData;
  }


  public UsageAggregateModel meterId(String meterId) {
    this.meterId = meterId;
    return this;
  }

  /**
   * Unique ID for the resource that was consumed, for example, the Resource ID.
   * @return meterId
   */
  @javax.annotation.Nullable
  public String getMeterId() {
    return meterId;
  }

  public void setMeterId(String meterId) {
    this.meterId = meterId;
  }


  public UsageAggregateModel quantity(String quantity) {
    this.quantity = quantity;
    return this;
  }

  /**
   * The amount of the resource consumption that occurred in this time frame.
   * @return quantity
   */
  @javax.annotation.Nullable
  public String getQuantity() {
    return quantity;
  }

  public void setQuantity(String quantity) {
    this.quantity = quantity;
  }


  public UsageAggregateModel subscriptionId(String subscriptionId) {
    this.subscriptionId = subscriptionId;
    return this;
  }

  /**
   * Subscription ID of tenant using plan.
   * @return subscriptionId
   */
  @javax.annotation.Nullable
  public String getSubscriptionId() {
    return subscriptionId;
  }

  public void setSubscriptionId(String subscriptionId) {
    this.subscriptionId = subscriptionId;
  }


  public UsageAggregateModel usageEndTime(OffsetDateTime usageEndTime) {
    this.usageEndTime = usageEndTime;
    return this;
  }

  /**
   * UTC end time for the usage category to which this usage aggregate belongs.
   * @return usageEndTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUsageEndTime() {
    return usageEndTime;
  }

  public void setUsageEndTime(OffsetDateTime usageEndTime) {
    this.usageEndTime = usageEndTime;
  }


  public UsageAggregateModel usageStartTime(OffsetDateTime usageStartTime) {
    this.usageStartTime = usageStartTime;
    return this;
  }

  /**
   * UTC start time for the usage category to which this usage aggregate belongs.
   * @return usageStartTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUsageStartTime() {
    return usageStartTime;
  }

  public void setUsageStartTime(OffsetDateTime usageStartTime) {
    this.usageStartTime = usageStartTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UsageAggregateModel usageAggregateModel = (UsageAggregateModel) o;
    return Objects.equals(this.instanceData, usageAggregateModel.instanceData) &&
        Objects.equals(this.meterId, usageAggregateModel.meterId) &&
        Objects.equals(this.quantity, usageAggregateModel.quantity) &&
        Objects.equals(this.subscriptionId, usageAggregateModel.subscriptionId) &&
        Objects.equals(this.usageEndTime, usageAggregateModel.usageEndTime) &&
        Objects.equals(this.usageStartTime, usageAggregateModel.usageStartTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(instanceData, meterId, quantity, subscriptionId, usageEndTime, usageStartTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UsageAggregateModel {\n");
    sb.append("    instanceData: ").append(toIndentedString(instanceData)).append("\n");
    sb.append("    meterId: ").append(toIndentedString(meterId)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    subscriptionId: ").append(toIndentedString(subscriptionId)).append("\n");
    sb.append("    usageEndTime: ").append(toIndentedString(usageEndTime)).append("\n");
    sb.append("    usageStartTime: ").append(toIndentedString(usageStartTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("instanceData");
    openapiFields.add("meterId");
    openapiFields.add("quantity");
    openapiFields.add("subscriptionId");
    openapiFields.add("usageEndTime");
    openapiFields.add("usageStartTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UsageAggregateModel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UsageAggregateModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UsageAggregateModel is not found in the empty JSON string", UsageAggregateModel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UsageAggregateModel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UsageAggregateModel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("instanceData") != null && !jsonObj.get("instanceData").isJsonNull()) && !jsonObj.get("instanceData").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `instanceData` to be a primitive type in the JSON string but got `%s`", jsonObj.get("instanceData").toString()));
      }
      if ((jsonObj.get("meterId") != null && !jsonObj.get("meterId").isJsonNull()) && !jsonObj.get("meterId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `meterId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("meterId").toString()));
      }
      if ((jsonObj.get("quantity") != null && !jsonObj.get("quantity").isJsonNull()) && !jsonObj.get("quantity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `quantity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("quantity").toString()));
      }
      if ((jsonObj.get("subscriptionId") != null && !jsonObj.get("subscriptionId").isJsonNull()) && !jsonObj.get("subscriptionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subscriptionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subscriptionId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UsageAggregateModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UsageAggregateModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UsageAggregateModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UsageAggregateModel.class));

       return (TypeAdapter<T>) new TypeAdapter<UsageAggregateModel>() {
           @Override
           public void write(JsonWriter out, UsageAggregateModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UsageAggregateModel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UsageAggregateModel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UsageAggregateModel
   * @throws IOException if the JSON string is invalid with respect to UsageAggregateModel
   */
  public static UsageAggregateModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UsageAggregateModel.class);
  }

  /**
   * Convert an instance of UsageAggregateModel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

