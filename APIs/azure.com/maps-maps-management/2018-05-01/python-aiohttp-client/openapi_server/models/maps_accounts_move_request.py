# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MapsAccountsMoveRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, resource_ids: List[str]=None, target_resource_group: str=None):
        """MapsAccountsMoveRequest - a model defined in OpenAPI

        :param resource_ids: The resource_ids of this MapsAccountsMoveRequest.
        :param target_resource_group: The target_resource_group of this MapsAccountsMoveRequest.
        """
        self.openapi_types = {
            'resource_ids': List[str],
            'target_resource_group': str
        }

        self.attribute_map = {
            'resource_ids': 'resourceIds',
            'target_resource_group': 'targetResourceGroup'
        }

        self._resource_ids = resource_ids
        self._target_resource_group = target_resource_group

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MapsAccountsMoveRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MapsAccountsMoveRequest of this MapsAccountsMoveRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def resource_ids(self):
        """Gets the resource_ids of this MapsAccountsMoveRequest.

        A list of resource names to move from the source resource group.

        :return: The resource_ids of this MapsAccountsMoveRequest.
        :rtype: List[str]
        """
        return self._resource_ids

    @resource_ids.setter
    def resource_ids(self, resource_ids):
        """Sets the resource_ids of this MapsAccountsMoveRequest.

        A list of resource names to move from the source resource group.

        :param resource_ids: The resource_ids of this MapsAccountsMoveRequest.
        :type resource_ids: List[str]
        """
        if resource_ids is None:
            raise ValueError("Invalid value for `resource_ids`, must not be `None`")

        self._resource_ids = resource_ids

    @property
    def target_resource_group(self):
        """Gets the target_resource_group of this MapsAccountsMoveRequest.

        The name of the destination resource group.

        :return: The target_resource_group of this MapsAccountsMoveRequest.
        :rtype: str
        """
        return self._target_resource_group

    @target_resource_group.setter
    def target_resource_group(self, target_resource_group):
        """Sets the target_resource_group of this MapsAccountsMoveRequest.

        The name of the destination resource group.

        :param target_resource_group: The target_resource_group of this MapsAccountsMoveRequest.
        :type target_resource_group: str
        """
        if target_resource_group is None:
            raise ValueError("Invalid value for `target_resource_group`, must not be `None`")

        self._target_resource_group = target_resource_group
