/*
 * Azure Maps Resource Provider
 * Resource Provider
 *
 * The version of the OpenAPI document: 2018-05-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.MapsAccount;
import org.openapitools.client.model.MapsAccountCreateParameters;
import org.openapitools.client.model.MapsAccountKeys;
import org.openapitools.client.model.MapsAccountUpdateParameters;
import org.openapitools.client.model.MapsAccounts;
import org.openapitools.client.model.MapsAccountsMoveRequest;
import org.openapitools.client.model.MapsKeySpecification;
import org.openapitools.client.model.MapsOperations;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Create or update a Maps Account. A Maps Account holds the keys which allow access to the Maps REST APIs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accountsCreateOrUpdateTest() throws ApiException {
        String apiVersion = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        MapsAccountCreateParameters mapsAccountCreateParameters = null;
        MapsAccount response = api.accountsCreateOrUpdate(apiVersion, subscriptionId, resourceGroupName, accountName, mapsAccountCreateParameters);
        // TODO: test validations
    }

    /**
     * Delete a Maps Account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accountsDeleteTest() throws ApiException {
        String apiVersion = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        api.accountsDelete(apiVersion, subscriptionId, resourceGroupName, accountName);
        // TODO: test validations
    }

    /**
     * Get a Maps Account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accountsGetTest() throws ApiException {
        String apiVersion = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        MapsAccount response = api.accountsGet(apiVersion, subscriptionId, resourceGroupName, accountName);
        // TODO: test validations
    }

    /**
     * Get all Maps Accounts in a Resource Group
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accountsListByResourceGroupTest() throws ApiException {
        String apiVersion = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        MapsAccounts response = api.accountsListByResourceGroup(apiVersion, subscriptionId, resourceGroupName);
        // TODO: test validations
    }

    /**
     * Get all Maps Accounts in a Subscription
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accountsListBySubscriptionTest() throws ApiException {
        String apiVersion = null;
        String subscriptionId = null;
        MapsAccounts response = api.accountsListBySubscription(apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Get the keys to use with the Maps APIs. A key is used to authenticate and authorize access to the Maps REST APIs. Only one key is needed at a time; two are given to provide seamless key regeneration.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accountsListKeysTest() throws ApiException {
        String apiVersion = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        MapsAccountKeys response = api.accountsListKeys(apiVersion, subscriptionId, resourceGroupName, accountName);
        // TODO: test validations
    }

    /**
     * List operations available for the Maps Resource Provider
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accountsListOperationsTest() throws ApiException {
        String apiVersion = null;
        MapsOperations response = api.accountsListOperations(apiVersion);
        // TODO: test validations
    }

    /**
     * Moves Maps Accounts from one ResourceGroup (or Subscription) to another
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accountsMoveTest() throws ApiException {
        String apiVersion = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        MapsAccountsMoveRequest moveRequest = null;
        api.accountsMove(apiVersion, subscriptionId, resourceGroupName, moveRequest);
        // TODO: test validations
    }

    /**
     * Regenerate either the primary or secondary key for use with the Maps APIs. The old key will stop working immediately.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accountsRegenerateKeysTest() throws ApiException {
        String apiVersion = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        MapsKeySpecification keySpecification = null;
        MapsAccountKeys response = api.accountsRegenerateKeys(apiVersion, subscriptionId, resourceGroupName, accountName, keySpecification);
        // TODO: test validations
    }

    /**
     * Updates a Maps Account. Only a subset of the parameters may be updated after creation, such as Sku and Tags.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accountsUpdateTest() throws ApiException {
        String apiVersion = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        MapsAccountUpdateParameters mapsAccountUpdateParameters = null;
        MapsAccount response = api.accountsUpdate(apiVersion, subscriptionId, resourceGroupName, accountName, mapsAccountUpdateParameters);
        // TODO: test validations
    }

}
