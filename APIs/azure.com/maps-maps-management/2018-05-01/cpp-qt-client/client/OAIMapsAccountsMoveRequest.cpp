/**
 * Azure Maps Resource Provider
 * Resource Provider
 *
 * The version of the OpenAPI document: 2018-05-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMapsAccountsMoveRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMapsAccountsMoveRequest::OAIMapsAccountsMoveRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMapsAccountsMoveRequest::OAIMapsAccountsMoveRequest() {
    this->initializeModel();
}

OAIMapsAccountsMoveRequest::~OAIMapsAccountsMoveRequest() {}

void OAIMapsAccountsMoveRequest::initializeModel() {

    m_resource_ids_isSet = false;
    m_resource_ids_isValid = false;

    m_target_resource_group_isSet = false;
    m_target_resource_group_isValid = false;
}

void OAIMapsAccountsMoveRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMapsAccountsMoveRequest::fromJsonObject(QJsonObject json) {

    m_resource_ids_isValid = ::OpenAPI::fromJsonValue(m_resource_ids, json[QString("resourceIds")]);
    m_resource_ids_isSet = !json[QString("resourceIds")].isNull() && m_resource_ids_isValid;

    m_target_resource_group_isValid = ::OpenAPI::fromJsonValue(m_target_resource_group, json[QString("targetResourceGroup")]);
    m_target_resource_group_isSet = !json[QString("targetResourceGroup")].isNull() && m_target_resource_group_isValid;
}

QString OAIMapsAccountsMoveRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMapsAccountsMoveRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_resource_ids.size() > 0) {
        obj.insert(QString("resourceIds"), ::OpenAPI::toJsonValue(m_resource_ids));
    }
    if (m_target_resource_group_isSet) {
        obj.insert(QString("targetResourceGroup"), ::OpenAPI::toJsonValue(m_target_resource_group));
    }
    return obj;
}

QList<QString> OAIMapsAccountsMoveRequest::getResourceIds() const {
    return m_resource_ids;
}
void OAIMapsAccountsMoveRequest::setResourceIds(const QList<QString> &resource_ids) {
    m_resource_ids = resource_ids;
    m_resource_ids_isSet = true;
}

bool OAIMapsAccountsMoveRequest::is_resource_ids_Set() const{
    return m_resource_ids_isSet;
}

bool OAIMapsAccountsMoveRequest::is_resource_ids_Valid() const{
    return m_resource_ids_isValid;
}

QString OAIMapsAccountsMoveRequest::getTargetResourceGroup() const {
    return m_target_resource_group;
}
void OAIMapsAccountsMoveRequest::setTargetResourceGroup(const QString &target_resource_group) {
    m_target_resource_group = target_resource_group;
    m_target_resource_group_isSet = true;
}

bool OAIMapsAccountsMoveRequest::is_target_resource_group_Set() const{
    return m_target_resource_group_isSet;
}

bool OAIMapsAccountsMoveRequest::is_target_resource_group_Valid() const{
    return m_target_resource_group_isValid;
}

bool OAIMapsAccountsMoveRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_resource_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_resource_group_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMapsAccountsMoveRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_resource_ids_isValid && m_target_resource_group_isValid && true;
}

} // namespace OpenAPI
