/**
 * Azure Maps Resource Provider
 * Resource Provider
 *
 * The version of the OpenAPI document: 2020-02-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import MapsListOperationsDefaultResponse from '../model/MapsListOperationsDefaultResponse';
import PrivateAtlas from '../model/PrivateAtlas';
import PrivateAtlasCreateParameters from '../model/PrivateAtlasCreateParameters';
import PrivateAtlasList from '../model/PrivateAtlasList';
import PrivateAtlasUpdateParameters from '../model/PrivateAtlasUpdateParameters';

/**
* PrivateAtlases service.
* @module api/PrivateAtlasesApi
* @version 2020-02-01-preview
*/
export default class PrivateAtlasesApi {

    /**
    * Constructs a new PrivateAtlasesApi. 
    * @alias module:api/PrivateAtlasesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the privateAtlasesCreateOrUpdate operation.
     * @callback module:api/PrivateAtlasesApi~privateAtlasesCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PrivateAtlas} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update a Private Atlas resource. Private Atlas resource will enable the usage of Azure resources to build a custom set of mapping data. It requires an account to exist before it can be created.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {String} resourceGroupName The name of the resource group. The name is case insensitive.
     * @param {String} accountName The name of the Maps Account.
     * @param {String} privateAtlasName The name of the Private Atlas instance.
     * @param {module:model/PrivateAtlasCreateParameters} privateAtlasCreateParameters The new or updated parameters for the Private Atlas resource.
     * @param {module:api/PrivateAtlasesApi~privateAtlasesCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PrivateAtlas}
     */
    privateAtlasesCreateOrUpdate(apiVersion, subscriptionId, resourceGroupName, accountName, privateAtlasName, privateAtlasCreateParameters, callback) {
      let postBody = privateAtlasCreateParameters;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling privateAtlasesCreateOrUpdate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling privateAtlasesCreateOrUpdate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling privateAtlasesCreateOrUpdate");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling privateAtlasesCreateOrUpdate");
      }
      // verify the required parameter 'privateAtlasName' is set
      if (privateAtlasName === undefined || privateAtlasName === null) {
        throw new Error("Missing the required parameter 'privateAtlasName' when calling privateAtlasesCreateOrUpdate");
      }
      // verify the required parameter 'privateAtlasCreateParameters' is set
      if (privateAtlasCreateParameters === undefined || privateAtlasCreateParameters === null) {
        throw new Error("Missing the required parameter 'privateAtlasCreateParameters' when calling privateAtlasesCreateOrUpdate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'privateAtlasName': privateAtlasName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PrivateAtlas;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Maps/accounts/{accountName}/privateAtlases/{privateAtlasName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the privateAtlasesDelete operation.
     * @callback module:api/PrivateAtlasesApi~privateAtlasesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Private Atlas resource.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {String} resourceGroupName The name of the resource group. The name is case insensitive.
     * @param {String} accountName The name of the Maps Account.
     * @param {String} privateAtlasName The name of the Private Atlas instance.
     * @param {module:api/PrivateAtlasesApi~privateAtlasesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    privateAtlasesDelete(apiVersion, subscriptionId, resourceGroupName, accountName, privateAtlasName, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling privateAtlasesDelete");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling privateAtlasesDelete");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling privateAtlasesDelete");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling privateAtlasesDelete");
      }
      // verify the required parameter 'privateAtlasName' is set
      if (privateAtlasName === undefined || privateAtlasName === null) {
        throw new Error("Missing the required parameter 'privateAtlasName' when calling privateAtlasesDelete");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'privateAtlasName': privateAtlasName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Maps/accounts/{accountName}/privateAtlases/{privateAtlasName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the privateAtlasesGet operation.
     * @callback module:api/PrivateAtlasesApi~privateAtlasesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PrivateAtlas} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Private Atlas resource.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {String} resourceGroupName The name of the resource group. The name is case insensitive.
     * @param {String} accountName The name of the Maps Account.
     * @param {String} privateAtlasName The name of the Private Atlas instance.
     * @param {module:api/PrivateAtlasesApi~privateAtlasesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PrivateAtlas}
     */
    privateAtlasesGet(apiVersion, subscriptionId, resourceGroupName, accountName, privateAtlasName, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling privateAtlasesGet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling privateAtlasesGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling privateAtlasesGet");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling privateAtlasesGet");
      }
      // verify the required parameter 'privateAtlasName' is set
      if (privateAtlasName === undefined || privateAtlasName === null) {
        throw new Error("Missing the required parameter 'privateAtlasName' when calling privateAtlasesGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'privateAtlasName': privateAtlasName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PrivateAtlas;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Maps/accounts/{accountName}/privateAtlases/{privateAtlasName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the privateAtlasesListByAccount operation.
     * @callback module:api/PrivateAtlasesApi~privateAtlasesListByAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PrivateAtlasList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all Private Atlas instances for an Azure Map Account
     * @param {String} apiVersion The API version to use for this operation.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {String} resourceGroupName The name of the resource group. The name is case insensitive.
     * @param {String} accountName The name of the Maps Account.
     * @param {module:api/PrivateAtlasesApi~privateAtlasesListByAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PrivateAtlasList}
     */
    privateAtlasesListByAccount(apiVersion, subscriptionId, resourceGroupName, accountName, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling privateAtlasesListByAccount");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling privateAtlasesListByAccount");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling privateAtlasesListByAccount");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling privateAtlasesListByAccount");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PrivateAtlasList;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Maps/accounts/{accountName}/privateAtlases', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the privateAtlasesUpdate operation.
     * @callback module:api/PrivateAtlasesApi~privateAtlasesUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PrivateAtlas} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the Private Atlas resource. Only a subset of the parameters may be updated after creation, such as Tags.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {String} resourceGroupName The name of the resource group. The name is case insensitive.
     * @param {String} accountName The name of the Maps Account.
     * @param {String} privateAtlasName The name of the Private Atlas instance.
     * @param {module:model/PrivateAtlasUpdateParameters} privateAtlasUpdateParameters The updated parameters for the Private Atlas.
     * @param {module:api/PrivateAtlasesApi~privateAtlasesUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PrivateAtlas}
     */
    privateAtlasesUpdate(apiVersion, subscriptionId, resourceGroupName, accountName, privateAtlasName, privateAtlasUpdateParameters, callback) {
      let postBody = privateAtlasUpdateParameters;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling privateAtlasesUpdate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling privateAtlasesUpdate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling privateAtlasesUpdate");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling privateAtlasesUpdate");
      }
      // verify the required parameter 'privateAtlasName' is set
      if (privateAtlasName === undefined || privateAtlasName === null) {
        throw new Error("Missing the required parameter 'privateAtlasName' when calling privateAtlasesUpdate");
      }
      // verify the required parameter 'privateAtlasUpdateParameters' is set
      if (privateAtlasUpdateParameters === undefined || privateAtlasUpdateParameters === null) {
        throw new Error("Missing the required parameter 'privateAtlasUpdateParameters' when calling privateAtlasesUpdate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'privateAtlasName': privateAtlasName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PrivateAtlas;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Maps/accounts/{accountName}/privateAtlases/{privateAtlasName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
