/**
 * Azure Maps Resource Provider
 * Resource Provider
 *
 * The version of the OpenAPI document: 2020-02-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMaps_ListOperations_default_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMaps_ListOperations_default_response::OAIMaps_ListOperations_default_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMaps_ListOperations_default_response::OAIMaps_ListOperations_default_response() {
    this->initializeModel();
}

OAIMaps_ListOperations_default_response::~OAIMaps_ListOperations_default_response() {}

void OAIMaps_ListOperations_default_response::initializeModel() {

    m_additional_info_isSet = false;
    m_additional_info_isValid = false;

    m_code_isSet = false;
    m_code_isValid = false;

    m_details_isSet = false;
    m_details_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_target_isSet = false;
    m_target_isValid = false;
}

void OAIMaps_ListOperations_default_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMaps_ListOperations_default_response::fromJsonObject(QJsonObject json) {

    m_additional_info_isValid = ::OpenAPI::fromJsonValue(m_additional_info, json[QString("additionalInfo")]);
    m_additional_info_isSet = !json[QString("additionalInfo")].isNull() && m_additional_info_isValid;

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_details_isValid = ::OpenAPI::fromJsonValue(m_details, json[QString("details")]);
    m_details_isSet = !json[QString("details")].isNull() && m_details_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_target_isValid = ::OpenAPI::fromJsonValue(m_target, json[QString("target")]);
    m_target_isSet = !json[QString("target")].isNull() && m_target_isValid;
}

QString OAIMaps_ListOperations_default_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMaps_ListOperations_default_response::asJsonObject() const {
    QJsonObject obj;
    if (m_additional_info.size() > 0) {
        obj.insert(QString("additionalInfo"), ::OpenAPI::toJsonValue(m_additional_info));
    }
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_details.size() > 0) {
        obj.insert(QString("details"), ::OpenAPI::toJsonValue(m_details));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_target_isSet) {
        obj.insert(QString("target"), ::OpenAPI::toJsonValue(m_target));
    }
    return obj;
}

QList<OAIMaps_ListOperations_default_response_additionalInfo_inner> OAIMaps_ListOperations_default_response::getAdditionalInfo() const {
    return m_additional_info;
}
void OAIMaps_ListOperations_default_response::setAdditionalInfo(const QList<OAIMaps_ListOperations_default_response_additionalInfo_inner> &additional_info) {
    m_additional_info = additional_info;
    m_additional_info_isSet = true;
}

bool OAIMaps_ListOperations_default_response::is_additional_info_Set() const{
    return m_additional_info_isSet;
}

bool OAIMaps_ListOperations_default_response::is_additional_info_Valid() const{
    return m_additional_info_isValid;
}

QString OAIMaps_ListOperations_default_response::getCode() const {
    return m_code;
}
void OAIMaps_ListOperations_default_response::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIMaps_ListOperations_default_response::is_code_Set() const{
    return m_code_isSet;
}

bool OAIMaps_ListOperations_default_response::is_code_Valid() const{
    return m_code_isValid;
}

QList<OAIObject> OAIMaps_ListOperations_default_response::getDetails() const {
    return m_details;
}
void OAIMaps_ListOperations_default_response::setDetails(const QList<OAIObject> &details) {
    m_details = details;
    m_details_isSet = true;
}

bool OAIMaps_ListOperations_default_response::is_details_Set() const{
    return m_details_isSet;
}

bool OAIMaps_ListOperations_default_response::is_details_Valid() const{
    return m_details_isValid;
}

QString OAIMaps_ListOperations_default_response::getMessage() const {
    return m_message;
}
void OAIMaps_ListOperations_default_response::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIMaps_ListOperations_default_response::is_message_Set() const{
    return m_message_isSet;
}

bool OAIMaps_ListOperations_default_response::is_message_Valid() const{
    return m_message_isValid;
}

QString OAIMaps_ListOperations_default_response::getTarget() const {
    return m_target;
}
void OAIMaps_ListOperations_default_response::setTarget(const QString &target) {
    m_target = target;
    m_target_isSet = true;
}

bool OAIMaps_ListOperations_default_response::is_target_Set() const{
    return m_target_isSet;
}

bool OAIMaps_ListOperations_default_response::is_target_Valid() const{
    return m_target_isValid;
}

bool OAIMaps_ListOperations_default_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additional_info.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_details.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMaps_ListOperations_default_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
