/**
 * Azure Maps Resource Provider
 * Resource Provider
 *
 * The version of the OpenAPI document: 2020-02-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPrivateAtlasesApi_H
#define OAI_OAIPrivateAtlasesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIMaps_ListOperations_default_response.h"
#include "OAIPrivateAtlas.h"
#include "OAIPrivateAtlasCreateParameters.h"
#include "OAIPrivateAtlasList.h"
#include "OAIPrivateAtlasUpdateParameters.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPrivateAtlasesApi : public QObject {
    Q_OBJECT

public:
    OAIPrivateAtlasesApi(const int timeOut = 0);
    ~OAIPrivateAtlasesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  private_atlas_name QString [required]
    * @param[in]  private_atlas_create_parameters OAIPrivateAtlasCreateParameters [required]
    */
    virtual void privateAtlasesCreateOrUpdate(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &private_atlas_name, const OAIPrivateAtlasCreateParameters &private_atlas_create_parameters);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  private_atlas_name QString [required]
    */
    virtual void privateAtlasesDelete(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &private_atlas_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  private_atlas_name QString [required]
    */
    virtual void privateAtlasesGet(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &private_atlas_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    */
    virtual void privateAtlasesListByAccount(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &account_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  private_atlas_name QString [required]
    * @param[in]  private_atlas_update_parameters OAIPrivateAtlasUpdateParameters [required]
    */
    virtual void privateAtlasesUpdate(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &private_atlas_name, const OAIPrivateAtlasUpdateParameters &private_atlas_update_parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void privateAtlasesCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void privateAtlasesDeleteCallback(OAIHttpRequestWorker *worker);
    void privateAtlasesGetCallback(OAIHttpRequestWorker *worker);
    void privateAtlasesListByAccountCallback(OAIHttpRequestWorker *worker);
    void privateAtlasesUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void privateAtlasesCreateOrUpdateSignal(OAIPrivateAtlas summary);
    void privateAtlasesDeleteSignal();
    void privateAtlasesGetSignal(OAIPrivateAtlas summary);
    void privateAtlasesListByAccountSignal(OAIPrivateAtlasList summary);
    void privateAtlasesUpdateSignal(OAIPrivateAtlas summary);


    void privateAtlasesCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIPrivateAtlas summary);
    void privateAtlasesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void privateAtlasesGetSignalFull(OAIHttpRequestWorker *worker, OAIPrivateAtlas summary);
    void privateAtlasesListByAccountSignalFull(OAIHttpRequestWorker *worker, OAIPrivateAtlasList summary);
    void privateAtlasesUpdateSignalFull(OAIHttpRequestWorker *worker, OAIPrivateAtlas summary);

    Q_DECL_DEPRECATED_X("Use privateAtlasesCreateOrUpdateSignalError() instead")
    void privateAtlasesCreateOrUpdateSignalE(OAIPrivateAtlas summary, QNetworkReply::NetworkError error_type, QString error_str);
    void privateAtlasesCreateOrUpdateSignalError(OAIPrivateAtlas summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateAtlasesDeleteSignalError() instead")
    void privateAtlasesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void privateAtlasesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateAtlasesGetSignalError() instead")
    void privateAtlasesGetSignalE(OAIPrivateAtlas summary, QNetworkReply::NetworkError error_type, QString error_str);
    void privateAtlasesGetSignalError(OAIPrivateAtlas summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateAtlasesListByAccountSignalError() instead")
    void privateAtlasesListByAccountSignalE(OAIPrivateAtlasList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void privateAtlasesListByAccountSignalError(OAIPrivateAtlasList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateAtlasesUpdateSignalError() instead")
    void privateAtlasesUpdateSignalE(OAIPrivateAtlas summary, QNetworkReply::NetworkError error_type, QString error_str);
    void privateAtlasesUpdateSignalError(OAIPrivateAtlas summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use privateAtlasesCreateOrUpdateSignalErrorFull() instead")
    void privateAtlasesCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void privateAtlasesCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateAtlasesDeleteSignalErrorFull() instead")
    void privateAtlasesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void privateAtlasesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateAtlasesGetSignalErrorFull() instead")
    void privateAtlasesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void privateAtlasesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateAtlasesListByAccountSignalErrorFull() instead")
    void privateAtlasesListByAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void privateAtlasesListByAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateAtlasesUpdateSignalErrorFull() instead")
    void privateAtlasesUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void privateAtlasesUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
