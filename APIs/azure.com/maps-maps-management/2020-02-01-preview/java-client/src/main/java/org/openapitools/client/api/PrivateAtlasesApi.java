/*
 * Azure Maps Resource Provider
 * Resource Provider
 *
 * The version of the OpenAPI document: 2020-02-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.MapsListOperationsDefaultResponse;
import org.openapitools.client.model.PrivateAtlas;
import org.openapitools.client.model.PrivateAtlasCreateParameters;
import org.openapitools.client.model.PrivateAtlasList;
import org.openapitools.client.model.PrivateAtlasUpdateParameters;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PrivateAtlasesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PrivateAtlasesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PrivateAtlasesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for privateAtlasesCreateOrUpdate
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param accountName The name of the Maps Account. (required)
     * @param privateAtlasName The name of the Private Atlas instance. (required)
     * @param privateAtlasCreateParameters The new or updated parameters for the Private Atlas resource. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Private Atlas was successfully updated. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> The Private Atlas was successfully created. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call privateAtlasesCreateOrUpdateCall(String apiVersion, String subscriptionId, String resourceGroupName, String accountName, String privateAtlasName, PrivateAtlasCreateParameters privateAtlasCreateParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = privateAtlasCreateParameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Maps/accounts/{accountName}/privateAtlases/{privateAtlasName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "privateAtlasName" + "}", localVarApiClient.escapeString(privateAtlasName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call privateAtlasesCreateOrUpdateValidateBeforeCall(String apiVersion, String subscriptionId, String resourceGroupName, String accountName, String privateAtlasName, PrivateAtlasCreateParameters privateAtlasCreateParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling privateAtlasesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling privateAtlasesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling privateAtlasesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling privateAtlasesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'privateAtlasName' is set
        if (privateAtlasName == null) {
            throw new ApiException("Missing the required parameter 'privateAtlasName' when calling privateAtlasesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'privateAtlasCreateParameters' is set
        if (privateAtlasCreateParameters == null) {
            throw new ApiException("Missing the required parameter 'privateAtlasCreateParameters' when calling privateAtlasesCreateOrUpdate(Async)");
        }

        return privateAtlasesCreateOrUpdateCall(apiVersion, subscriptionId, resourceGroupName, accountName, privateAtlasName, privateAtlasCreateParameters, _callback);

    }

    /**
     * 
     * Create or update a Private Atlas resource. Private Atlas resource will enable the usage of Azure resources to build a custom set of mapping data. It requires an account to exist before it can be created.
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param accountName The name of the Maps Account. (required)
     * @param privateAtlasName The name of the Private Atlas instance. (required)
     * @param privateAtlasCreateParameters The new or updated parameters for the Private Atlas resource. (required)
     * @return PrivateAtlas
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Private Atlas was successfully updated. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> The Private Atlas was successfully created. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public PrivateAtlas privateAtlasesCreateOrUpdate(String apiVersion, String subscriptionId, String resourceGroupName, String accountName, String privateAtlasName, PrivateAtlasCreateParameters privateAtlasCreateParameters) throws ApiException {
        ApiResponse<PrivateAtlas> localVarResp = privateAtlasesCreateOrUpdateWithHttpInfo(apiVersion, subscriptionId, resourceGroupName, accountName, privateAtlasName, privateAtlasCreateParameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Create or update a Private Atlas resource. Private Atlas resource will enable the usage of Azure resources to build a custom set of mapping data. It requires an account to exist before it can be created.
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param accountName The name of the Maps Account. (required)
     * @param privateAtlasName The name of the Private Atlas instance. (required)
     * @param privateAtlasCreateParameters The new or updated parameters for the Private Atlas resource. (required)
     * @return ApiResponse&lt;PrivateAtlas&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Private Atlas was successfully updated. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> The Private Atlas was successfully created. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PrivateAtlas> privateAtlasesCreateOrUpdateWithHttpInfo(String apiVersion, String subscriptionId, String resourceGroupName, String accountName, String privateAtlasName, PrivateAtlasCreateParameters privateAtlasCreateParameters) throws ApiException {
        okhttp3.Call localVarCall = privateAtlasesCreateOrUpdateValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, accountName, privateAtlasName, privateAtlasCreateParameters, null);
        Type localVarReturnType = new TypeToken<PrivateAtlas>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create or update a Private Atlas resource. Private Atlas resource will enable the usage of Azure resources to build a custom set of mapping data. It requires an account to exist before it can be created.
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param accountName The name of the Maps Account. (required)
     * @param privateAtlasName The name of the Private Atlas instance. (required)
     * @param privateAtlasCreateParameters The new or updated parameters for the Private Atlas resource. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Private Atlas was successfully updated. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> The Private Atlas was successfully created. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call privateAtlasesCreateOrUpdateAsync(String apiVersion, String subscriptionId, String resourceGroupName, String accountName, String privateAtlasName, PrivateAtlasCreateParameters privateAtlasCreateParameters, final ApiCallback<PrivateAtlas> _callback) throws ApiException {

        okhttp3.Call localVarCall = privateAtlasesCreateOrUpdateValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, accountName, privateAtlasName, privateAtlasCreateParameters, _callback);
        Type localVarReturnType = new TypeToken<PrivateAtlas>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for privateAtlasesDelete
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param accountName The name of the Maps Account. (required)
     * @param privateAtlasName The name of the Private Atlas instance. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Private Atlas was deleted successfully. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The specified Private Atlas was not found. Nothing was deleted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call privateAtlasesDeleteCall(String apiVersion, String subscriptionId, String resourceGroupName, String accountName, String privateAtlasName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Maps/accounts/{accountName}/privateAtlases/{privateAtlasName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "privateAtlasName" + "}", localVarApiClient.escapeString(privateAtlasName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call privateAtlasesDeleteValidateBeforeCall(String apiVersion, String subscriptionId, String resourceGroupName, String accountName, String privateAtlasName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling privateAtlasesDelete(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling privateAtlasesDelete(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling privateAtlasesDelete(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling privateAtlasesDelete(Async)");
        }

        // verify the required parameter 'privateAtlasName' is set
        if (privateAtlasName == null) {
            throw new ApiException("Missing the required parameter 'privateAtlasName' when calling privateAtlasesDelete(Async)");
        }

        return privateAtlasesDeleteCall(apiVersion, subscriptionId, resourceGroupName, accountName, privateAtlasName, _callback);

    }

    /**
     * 
     * Delete a Private Atlas resource.
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param accountName The name of the Maps Account. (required)
     * @param privateAtlasName The name of the Private Atlas instance. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Private Atlas was deleted successfully. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The specified Private Atlas was not found. Nothing was deleted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public void privateAtlasesDelete(String apiVersion, String subscriptionId, String resourceGroupName, String accountName, String privateAtlasName) throws ApiException {
        privateAtlasesDeleteWithHttpInfo(apiVersion, subscriptionId, resourceGroupName, accountName, privateAtlasName);
    }

    /**
     * 
     * Delete a Private Atlas resource.
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param accountName The name of the Maps Account. (required)
     * @param privateAtlasName The name of the Private Atlas instance. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Private Atlas was deleted successfully. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The specified Private Atlas was not found. Nothing was deleted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> privateAtlasesDeleteWithHttpInfo(String apiVersion, String subscriptionId, String resourceGroupName, String accountName, String privateAtlasName) throws ApiException {
        okhttp3.Call localVarCall = privateAtlasesDeleteValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, accountName, privateAtlasName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete a Private Atlas resource.
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param accountName The name of the Maps Account. (required)
     * @param privateAtlasName The name of the Private Atlas instance. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Private Atlas was deleted successfully. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The specified Private Atlas was not found. Nothing was deleted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call privateAtlasesDeleteAsync(String apiVersion, String subscriptionId, String resourceGroupName, String accountName, String privateAtlasName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = privateAtlasesDeleteValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, accountName, privateAtlasName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for privateAtlasesGet
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param accountName The name of the Maps Account. (required)
     * @param privateAtlasName The name of the Private Atlas instance. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call privateAtlasesGetCall(String apiVersion, String subscriptionId, String resourceGroupName, String accountName, String privateAtlasName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Maps/accounts/{accountName}/privateAtlases/{privateAtlasName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "privateAtlasName" + "}", localVarApiClient.escapeString(privateAtlasName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call privateAtlasesGetValidateBeforeCall(String apiVersion, String subscriptionId, String resourceGroupName, String accountName, String privateAtlasName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling privateAtlasesGet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling privateAtlasesGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling privateAtlasesGet(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling privateAtlasesGet(Async)");
        }

        // verify the required parameter 'privateAtlasName' is set
        if (privateAtlasName == null) {
            throw new ApiException("Missing the required parameter 'privateAtlasName' when calling privateAtlasesGet(Async)");
        }

        return privateAtlasesGetCall(apiVersion, subscriptionId, resourceGroupName, accountName, privateAtlasName, _callback);

    }

    /**
     * 
     * Get a Private Atlas resource.
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param accountName The name of the Maps Account. (required)
     * @param privateAtlasName The name of the Private Atlas instance. (required)
     * @return PrivateAtlas
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public PrivateAtlas privateAtlasesGet(String apiVersion, String subscriptionId, String resourceGroupName, String accountName, String privateAtlasName) throws ApiException {
        ApiResponse<PrivateAtlas> localVarResp = privateAtlasesGetWithHttpInfo(apiVersion, subscriptionId, resourceGroupName, accountName, privateAtlasName);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a Private Atlas resource.
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param accountName The name of the Maps Account. (required)
     * @param privateAtlasName The name of the Private Atlas instance. (required)
     * @return ApiResponse&lt;PrivateAtlas&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PrivateAtlas> privateAtlasesGetWithHttpInfo(String apiVersion, String subscriptionId, String resourceGroupName, String accountName, String privateAtlasName) throws ApiException {
        okhttp3.Call localVarCall = privateAtlasesGetValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, accountName, privateAtlasName, null);
        Type localVarReturnType = new TypeToken<PrivateAtlas>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a Private Atlas resource.
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param accountName The name of the Maps Account. (required)
     * @param privateAtlasName The name of the Private Atlas instance. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call privateAtlasesGetAsync(String apiVersion, String subscriptionId, String resourceGroupName, String accountName, String privateAtlasName, final ApiCallback<PrivateAtlas> _callback) throws ApiException {

        okhttp3.Call localVarCall = privateAtlasesGetValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, accountName, privateAtlasName, _callback);
        Type localVarReturnType = new TypeToken<PrivateAtlas>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for privateAtlasesListByAccount
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param accountName The name of the Maps Account. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call privateAtlasesListByAccountCall(String apiVersion, String subscriptionId, String resourceGroupName, String accountName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Maps/accounts/{accountName}/privateAtlases"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call privateAtlasesListByAccountValidateBeforeCall(String apiVersion, String subscriptionId, String resourceGroupName, String accountName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling privateAtlasesListByAccount(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling privateAtlasesListByAccount(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling privateAtlasesListByAccount(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling privateAtlasesListByAccount(Async)");
        }

        return privateAtlasesListByAccountCall(apiVersion, subscriptionId, resourceGroupName, accountName, _callback);

    }

    /**
     * 
     * Get all Private Atlas instances for an Azure Map Account
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param accountName The name of the Maps Account. (required)
     * @return PrivateAtlasList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public PrivateAtlasList privateAtlasesListByAccount(String apiVersion, String subscriptionId, String resourceGroupName, String accountName) throws ApiException {
        ApiResponse<PrivateAtlasList> localVarResp = privateAtlasesListByAccountWithHttpInfo(apiVersion, subscriptionId, resourceGroupName, accountName);
        return localVarResp.getData();
    }

    /**
     * 
     * Get all Private Atlas instances for an Azure Map Account
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param accountName The name of the Maps Account. (required)
     * @return ApiResponse&lt;PrivateAtlasList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PrivateAtlasList> privateAtlasesListByAccountWithHttpInfo(String apiVersion, String subscriptionId, String resourceGroupName, String accountName) throws ApiException {
        okhttp3.Call localVarCall = privateAtlasesListByAccountValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, accountName, null);
        Type localVarReturnType = new TypeToken<PrivateAtlasList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get all Private Atlas instances for an Azure Map Account
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param accountName The name of the Maps Account. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call privateAtlasesListByAccountAsync(String apiVersion, String subscriptionId, String resourceGroupName, String accountName, final ApiCallback<PrivateAtlasList> _callback) throws ApiException {

        okhttp3.Call localVarCall = privateAtlasesListByAccountValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, accountName, _callback);
        Type localVarReturnType = new TypeToken<PrivateAtlasList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for privateAtlasesUpdate
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param accountName The name of the Maps Account. (required)
     * @param privateAtlasName The name of the Private Atlas instance. (required)
     * @param privateAtlasUpdateParameters The updated parameters for the Private Atlas. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Private Atlas was successfully updated. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call privateAtlasesUpdateCall(String apiVersion, String subscriptionId, String resourceGroupName, String accountName, String privateAtlasName, PrivateAtlasUpdateParameters privateAtlasUpdateParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = privateAtlasUpdateParameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Maps/accounts/{accountName}/privateAtlases/{privateAtlasName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "privateAtlasName" + "}", localVarApiClient.escapeString(privateAtlasName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call privateAtlasesUpdateValidateBeforeCall(String apiVersion, String subscriptionId, String resourceGroupName, String accountName, String privateAtlasName, PrivateAtlasUpdateParameters privateAtlasUpdateParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling privateAtlasesUpdate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling privateAtlasesUpdate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling privateAtlasesUpdate(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling privateAtlasesUpdate(Async)");
        }

        // verify the required parameter 'privateAtlasName' is set
        if (privateAtlasName == null) {
            throw new ApiException("Missing the required parameter 'privateAtlasName' when calling privateAtlasesUpdate(Async)");
        }

        // verify the required parameter 'privateAtlasUpdateParameters' is set
        if (privateAtlasUpdateParameters == null) {
            throw new ApiException("Missing the required parameter 'privateAtlasUpdateParameters' when calling privateAtlasesUpdate(Async)");
        }

        return privateAtlasesUpdateCall(apiVersion, subscriptionId, resourceGroupName, accountName, privateAtlasName, privateAtlasUpdateParameters, _callback);

    }

    /**
     * 
     * Updates the Private Atlas resource. Only a subset of the parameters may be updated after creation, such as Tags.
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param accountName The name of the Maps Account. (required)
     * @param privateAtlasName The name of the Private Atlas instance. (required)
     * @param privateAtlasUpdateParameters The updated parameters for the Private Atlas. (required)
     * @return PrivateAtlas
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Private Atlas was successfully updated. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public PrivateAtlas privateAtlasesUpdate(String apiVersion, String subscriptionId, String resourceGroupName, String accountName, String privateAtlasName, PrivateAtlasUpdateParameters privateAtlasUpdateParameters) throws ApiException {
        ApiResponse<PrivateAtlas> localVarResp = privateAtlasesUpdateWithHttpInfo(apiVersion, subscriptionId, resourceGroupName, accountName, privateAtlasName, privateAtlasUpdateParameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates the Private Atlas resource. Only a subset of the parameters may be updated after creation, such as Tags.
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param accountName The name of the Maps Account. (required)
     * @param privateAtlasName The name of the Private Atlas instance. (required)
     * @param privateAtlasUpdateParameters The updated parameters for the Private Atlas. (required)
     * @return ApiResponse&lt;PrivateAtlas&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Private Atlas was successfully updated. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PrivateAtlas> privateAtlasesUpdateWithHttpInfo(String apiVersion, String subscriptionId, String resourceGroupName, String accountName, String privateAtlasName, PrivateAtlasUpdateParameters privateAtlasUpdateParameters) throws ApiException {
        okhttp3.Call localVarCall = privateAtlasesUpdateValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, accountName, privateAtlasName, privateAtlasUpdateParameters, null);
        Type localVarReturnType = new TypeToken<PrivateAtlas>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates the Private Atlas resource. Only a subset of the parameters may be updated after creation, such as Tags.
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param accountName The name of the Maps Account. (required)
     * @param privateAtlasName The name of the Private Atlas instance. (required)
     * @param privateAtlasUpdateParameters The updated parameters for the Private Atlas. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Private Atlas was successfully updated. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call privateAtlasesUpdateAsync(String apiVersion, String subscriptionId, String resourceGroupName, String accountName, String privateAtlasName, PrivateAtlasUpdateParameters privateAtlasUpdateParameters, final ApiCallback<PrivateAtlas> _callback) throws ApiException {

        okhttp3.Call localVarCall = privateAtlasesUpdateValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, accountName, privateAtlasName, privateAtlasUpdateParameters, _callback);
        Type localVarReturnType = new TypeToken<PrivateAtlas>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
