/**
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2017-03-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDatabaseBlobAuditingPolicyListResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDatabaseBlobAuditingPolicyListResult::OAIDatabaseBlobAuditingPolicyListResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDatabaseBlobAuditingPolicyListResult::OAIDatabaseBlobAuditingPolicyListResult() {
    this->initializeModel();
}

OAIDatabaseBlobAuditingPolicyListResult::~OAIDatabaseBlobAuditingPolicyListResult() {}

void OAIDatabaseBlobAuditingPolicyListResult::initializeModel() {

    m_next_link_isSet = false;
    m_next_link_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIDatabaseBlobAuditingPolicyListResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDatabaseBlobAuditingPolicyListResult::fromJsonObject(QJsonObject json) {

    m_next_link_isValid = ::OpenAPI::fromJsonValue(m_next_link, json[QString("nextLink")]);
    m_next_link_isSet = !json[QString("nextLink")].isNull() && m_next_link_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIDatabaseBlobAuditingPolicyListResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDatabaseBlobAuditingPolicyListResult::asJsonObject() const {
    QJsonObject obj;
    if (m_next_link_isSet) {
        obj.insert(QString("nextLink"), ::OpenAPI::toJsonValue(m_next_link));
    }
    if (m_value.size() > 0) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QString OAIDatabaseBlobAuditingPolicyListResult::getNextLink() const {
    return m_next_link;
}
void OAIDatabaseBlobAuditingPolicyListResult::setNextLink(const QString &next_link) {
    m_next_link = next_link;
    m_next_link_isSet = true;
}

bool OAIDatabaseBlobAuditingPolicyListResult::is_next_link_Set() const{
    return m_next_link_isSet;
}

bool OAIDatabaseBlobAuditingPolicyListResult::is_next_link_Valid() const{
    return m_next_link_isValid;
}

QList<OAIDatabaseBlobAuditingPolicy> OAIDatabaseBlobAuditingPolicyListResult::getValue() const {
    return m_value;
}
void OAIDatabaseBlobAuditingPolicyListResult::setValue(const QList<OAIDatabaseBlobAuditingPolicy> &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIDatabaseBlobAuditingPolicyListResult::is_value_Set() const{
    return m_value_isSet;
}

bool OAIDatabaseBlobAuditingPolicyListResult::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIDatabaseBlobAuditingPolicyListResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_next_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDatabaseBlobAuditingPolicyListResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
