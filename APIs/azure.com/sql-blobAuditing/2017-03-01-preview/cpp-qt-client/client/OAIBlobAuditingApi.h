/**
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2017-03-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIBlobAuditingApi_H
#define OAI_OAIBlobAuditingApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIDatabaseBlobAuditingPolicy.h"
#include "OAIDatabaseBlobAuditingPolicyListResult.h"
#include "OAIExtendedDatabaseBlobAuditingPolicy.h"
#include "OAIExtendedServerBlobAuditingPolicy.h"
#include "OAIServerBlobAuditingPolicy.h"
#include "OAIServerBlobAuditingPolicyListResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIBlobAuditingApi : public QObject {
    Q_OBJECT

public:
    OAIBlobAuditingApi(const int timeOut = 0);
    ~OAIBlobAuditingApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  blob_auditing_policy_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAIDatabaseBlobAuditingPolicy [required]
    */
    virtual void databaseBlobAuditingPoliciesCreateOrUpdate(const QString &resource_group_name, const QString &server_name, const QString &database_name, const QString &blob_auditing_policy_name, const QString &subscription_id, const QString &api_version, const OAIDatabaseBlobAuditingPolicy &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  blob_auditing_policy_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void databaseBlobAuditingPoliciesGet(const QString &resource_group_name, const QString &server_name, const QString &database_name, const QString &blob_auditing_policy_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void databaseBlobAuditingPoliciesListByDatabase(const QString &resource_group_name, const QString &server_name, const QString &database_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  blob_auditing_policy_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAIExtendedDatabaseBlobAuditingPolicy [required]
    */
    virtual void extendedDatabaseBlobAuditingPoliciesCreateOrUpdate(const QString &resource_group_name, const QString &server_name, const QString &database_name, const QString &blob_auditing_policy_name, const QString &subscription_id, const QString &api_version, const OAIExtendedDatabaseBlobAuditingPolicy &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  blob_auditing_policy_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void extendedDatabaseBlobAuditingPoliciesGet(const QString &resource_group_name, const QString &server_name, const QString &database_name, const QString &blob_auditing_policy_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  blob_auditing_policy_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAIExtendedServerBlobAuditingPolicy [required]
    */
    virtual void extendedServerBlobAuditingPoliciesCreateOrUpdate(const QString &resource_group_name, const QString &server_name, const QString &blob_auditing_policy_name, const QString &subscription_id, const QString &api_version, const OAIExtendedServerBlobAuditingPolicy &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  blob_auditing_policy_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void extendedServerBlobAuditingPoliciesGet(const QString &resource_group_name, const QString &server_name, const QString &blob_auditing_policy_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  blob_auditing_policy_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAIServerBlobAuditingPolicy [required]
    */
    virtual void serverBlobAuditingPoliciesCreateOrUpdate(const QString &resource_group_name, const QString &server_name, const QString &blob_auditing_policy_name, const QString &subscription_id, const QString &api_version, const OAIServerBlobAuditingPolicy &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  blob_auditing_policy_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void serverBlobAuditingPoliciesGet(const QString &resource_group_name, const QString &server_name, const QString &blob_auditing_policy_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void serverBlobAuditingPoliciesListByServer(const QString &resource_group_name, const QString &server_name, const QString &subscription_id, const QString &api_version);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void databaseBlobAuditingPoliciesCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void databaseBlobAuditingPoliciesGetCallback(OAIHttpRequestWorker *worker);
    void databaseBlobAuditingPoliciesListByDatabaseCallback(OAIHttpRequestWorker *worker);
    void extendedDatabaseBlobAuditingPoliciesCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void extendedDatabaseBlobAuditingPoliciesGetCallback(OAIHttpRequestWorker *worker);
    void extendedServerBlobAuditingPoliciesCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void extendedServerBlobAuditingPoliciesGetCallback(OAIHttpRequestWorker *worker);
    void serverBlobAuditingPoliciesCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void serverBlobAuditingPoliciesGetCallback(OAIHttpRequestWorker *worker);
    void serverBlobAuditingPoliciesListByServerCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void databaseBlobAuditingPoliciesCreateOrUpdateSignal(OAIDatabaseBlobAuditingPolicy summary);
    void databaseBlobAuditingPoliciesGetSignal(OAIDatabaseBlobAuditingPolicy summary);
    void databaseBlobAuditingPoliciesListByDatabaseSignal(OAIDatabaseBlobAuditingPolicyListResult summary);
    void extendedDatabaseBlobAuditingPoliciesCreateOrUpdateSignal(OAIExtendedDatabaseBlobAuditingPolicy summary);
    void extendedDatabaseBlobAuditingPoliciesGetSignal(OAIExtendedDatabaseBlobAuditingPolicy summary);
    void extendedServerBlobAuditingPoliciesCreateOrUpdateSignal(OAIExtendedServerBlobAuditingPolicy summary);
    void extendedServerBlobAuditingPoliciesGetSignal(OAIExtendedServerBlobAuditingPolicy summary);
    void serverBlobAuditingPoliciesCreateOrUpdateSignal(OAIServerBlobAuditingPolicy summary);
    void serverBlobAuditingPoliciesGetSignal(OAIServerBlobAuditingPolicy summary);
    void serverBlobAuditingPoliciesListByServerSignal(OAIServerBlobAuditingPolicyListResult summary);


    void databaseBlobAuditingPoliciesCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIDatabaseBlobAuditingPolicy summary);
    void databaseBlobAuditingPoliciesGetSignalFull(OAIHttpRequestWorker *worker, OAIDatabaseBlobAuditingPolicy summary);
    void databaseBlobAuditingPoliciesListByDatabaseSignalFull(OAIHttpRequestWorker *worker, OAIDatabaseBlobAuditingPolicyListResult summary);
    void extendedDatabaseBlobAuditingPoliciesCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIExtendedDatabaseBlobAuditingPolicy summary);
    void extendedDatabaseBlobAuditingPoliciesGetSignalFull(OAIHttpRequestWorker *worker, OAIExtendedDatabaseBlobAuditingPolicy summary);
    void extendedServerBlobAuditingPoliciesCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIExtendedServerBlobAuditingPolicy summary);
    void extendedServerBlobAuditingPoliciesGetSignalFull(OAIHttpRequestWorker *worker, OAIExtendedServerBlobAuditingPolicy summary);
    void serverBlobAuditingPoliciesCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIServerBlobAuditingPolicy summary);
    void serverBlobAuditingPoliciesGetSignalFull(OAIHttpRequestWorker *worker, OAIServerBlobAuditingPolicy summary);
    void serverBlobAuditingPoliciesListByServerSignalFull(OAIHttpRequestWorker *worker, OAIServerBlobAuditingPolicyListResult summary);

    Q_DECL_DEPRECATED_X("Use databaseBlobAuditingPoliciesCreateOrUpdateSignalError() instead")
    void databaseBlobAuditingPoliciesCreateOrUpdateSignalE(OAIDatabaseBlobAuditingPolicy summary, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseBlobAuditingPoliciesCreateOrUpdateSignalError(OAIDatabaseBlobAuditingPolicy summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseBlobAuditingPoliciesGetSignalError() instead")
    void databaseBlobAuditingPoliciesGetSignalE(OAIDatabaseBlobAuditingPolicy summary, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseBlobAuditingPoliciesGetSignalError(OAIDatabaseBlobAuditingPolicy summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseBlobAuditingPoliciesListByDatabaseSignalError() instead")
    void databaseBlobAuditingPoliciesListByDatabaseSignalE(OAIDatabaseBlobAuditingPolicyListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseBlobAuditingPoliciesListByDatabaseSignalError(OAIDatabaseBlobAuditingPolicyListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use extendedDatabaseBlobAuditingPoliciesCreateOrUpdateSignalError() instead")
    void extendedDatabaseBlobAuditingPoliciesCreateOrUpdateSignalE(OAIExtendedDatabaseBlobAuditingPolicy summary, QNetworkReply::NetworkError error_type, QString error_str);
    void extendedDatabaseBlobAuditingPoliciesCreateOrUpdateSignalError(OAIExtendedDatabaseBlobAuditingPolicy summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use extendedDatabaseBlobAuditingPoliciesGetSignalError() instead")
    void extendedDatabaseBlobAuditingPoliciesGetSignalE(OAIExtendedDatabaseBlobAuditingPolicy summary, QNetworkReply::NetworkError error_type, QString error_str);
    void extendedDatabaseBlobAuditingPoliciesGetSignalError(OAIExtendedDatabaseBlobAuditingPolicy summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use extendedServerBlobAuditingPoliciesCreateOrUpdateSignalError() instead")
    void extendedServerBlobAuditingPoliciesCreateOrUpdateSignalE(OAIExtendedServerBlobAuditingPolicy summary, QNetworkReply::NetworkError error_type, QString error_str);
    void extendedServerBlobAuditingPoliciesCreateOrUpdateSignalError(OAIExtendedServerBlobAuditingPolicy summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use extendedServerBlobAuditingPoliciesGetSignalError() instead")
    void extendedServerBlobAuditingPoliciesGetSignalE(OAIExtendedServerBlobAuditingPolicy summary, QNetworkReply::NetworkError error_type, QString error_str);
    void extendedServerBlobAuditingPoliciesGetSignalError(OAIExtendedServerBlobAuditingPolicy summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serverBlobAuditingPoliciesCreateOrUpdateSignalError() instead")
    void serverBlobAuditingPoliciesCreateOrUpdateSignalE(OAIServerBlobAuditingPolicy summary, QNetworkReply::NetworkError error_type, QString error_str);
    void serverBlobAuditingPoliciesCreateOrUpdateSignalError(OAIServerBlobAuditingPolicy summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serverBlobAuditingPoliciesGetSignalError() instead")
    void serverBlobAuditingPoliciesGetSignalE(OAIServerBlobAuditingPolicy summary, QNetworkReply::NetworkError error_type, QString error_str);
    void serverBlobAuditingPoliciesGetSignalError(OAIServerBlobAuditingPolicy summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serverBlobAuditingPoliciesListByServerSignalError() instead")
    void serverBlobAuditingPoliciesListByServerSignalE(OAIServerBlobAuditingPolicyListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void serverBlobAuditingPoliciesListByServerSignalError(OAIServerBlobAuditingPolicyListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use databaseBlobAuditingPoliciesCreateOrUpdateSignalErrorFull() instead")
    void databaseBlobAuditingPoliciesCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseBlobAuditingPoliciesCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseBlobAuditingPoliciesGetSignalErrorFull() instead")
    void databaseBlobAuditingPoliciesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseBlobAuditingPoliciesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseBlobAuditingPoliciesListByDatabaseSignalErrorFull() instead")
    void databaseBlobAuditingPoliciesListByDatabaseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseBlobAuditingPoliciesListByDatabaseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use extendedDatabaseBlobAuditingPoliciesCreateOrUpdateSignalErrorFull() instead")
    void extendedDatabaseBlobAuditingPoliciesCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void extendedDatabaseBlobAuditingPoliciesCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use extendedDatabaseBlobAuditingPoliciesGetSignalErrorFull() instead")
    void extendedDatabaseBlobAuditingPoliciesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void extendedDatabaseBlobAuditingPoliciesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use extendedServerBlobAuditingPoliciesCreateOrUpdateSignalErrorFull() instead")
    void extendedServerBlobAuditingPoliciesCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void extendedServerBlobAuditingPoliciesCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use extendedServerBlobAuditingPoliciesGetSignalErrorFull() instead")
    void extendedServerBlobAuditingPoliciesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void extendedServerBlobAuditingPoliciesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serverBlobAuditingPoliciesCreateOrUpdateSignalErrorFull() instead")
    void serverBlobAuditingPoliciesCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void serverBlobAuditingPoliciesCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serverBlobAuditingPoliciesGetSignalErrorFull() instead")
    void serverBlobAuditingPoliciesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void serverBlobAuditingPoliciesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serverBlobAuditingPoliciesListByServerSignalErrorFull() instead")
    void serverBlobAuditingPoliciesListByServerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void serverBlobAuditingPoliciesListByServerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
