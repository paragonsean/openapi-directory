/**
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2017-03-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExtendedServerBlobAuditingPolicyProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExtendedServerBlobAuditingPolicyProperties::OAIExtendedServerBlobAuditingPolicyProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExtendedServerBlobAuditingPolicyProperties::OAIExtendedServerBlobAuditingPolicyProperties() {
    this->initializeModel();
}

OAIExtendedServerBlobAuditingPolicyProperties::~OAIExtendedServerBlobAuditingPolicyProperties() {}

void OAIExtendedServerBlobAuditingPolicyProperties::initializeModel() {

    m_audit_actions_and_groups_isSet = false;
    m_audit_actions_and_groups_isValid = false;

    m_is_azure_monitor_target_enabled_isSet = false;
    m_is_azure_monitor_target_enabled_isValid = false;

    m_is_storage_secondary_key_in_use_isSet = false;
    m_is_storage_secondary_key_in_use_isValid = false;

    m_predicate_expression_isSet = false;
    m_predicate_expression_isValid = false;

    m_queue_delay_ms_isSet = false;
    m_queue_delay_ms_isValid = false;

    m_retention_days_isSet = false;
    m_retention_days_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_storage_account_access_key_isSet = false;
    m_storage_account_access_key_isValid = false;

    m_storage_account_subscription_id_isSet = false;
    m_storage_account_subscription_id_isValid = false;

    m_storage_endpoint_isSet = false;
    m_storage_endpoint_isValid = false;
}

void OAIExtendedServerBlobAuditingPolicyProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExtendedServerBlobAuditingPolicyProperties::fromJsonObject(QJsonObject json) {

    m_audit_actions_and_groups_isValid = ::OpenAPI::fromJsonValue(m_audit_actions_and_groups, json[QString("auditActionsAndGroups")]);
    m_audit_actions_and_groups_isSet = !json[QString("auditActionsAndGroups")].isNull() && m_audit_actions_and_groups_isValid;

    m_is_azure_monitor_target_enabled_isValid = ::OpenAPI::fromJsonValue(m_is_azure_monitor_target_enabled, json[QString("isAzureMonitorTargetEnabled")]);
    m_is_azure_monitor_target_enabled_isSet = !json[QString("isAzureMonitorTargetEnabled")].isNull() && m_is_azure_monitor_target_enabled_isValid;

    m_is_storage_secondary_key_in_use_isValid = ::OpenAPI::fromJsonValue(m_is_storage_secondary_key_in_use, json[QString("isStorageSecondaryKeyInUse")]);
    m_is_storage_secondary_key_in_use_isSet = !json[QString("isStorageSecondaryKeyInUse")].isNull() && m_is_storage_secondary_key_in_use_isValid;

    m_predicate_expression_isValid = ::OpenAPI::fromJsonValue(m_predicate_expression, json[QString("predicateExpression")]);
    m_predicate_expression_isSet = !json[QString("predicateExpression")].isNull() && m_predicate_expression_isValid;

    m_queue_delay_ms_isValid = ::OpenAPI::fromJsonValue(m_queue_delay_ms, json[QString("queueDelayMs")]);
    m_queue_delay_ms_isSet = !json[QString("queueDelayMs")].isNull() && m_queue_delay_ms_isValid;

    m_retention_days_isValid = ::OpenAPI::fromJsonValue(m_retention_days, json[QString("retentionDays")]);
    m_retention_days_isSet = !json[QString("retentionDays")].isNull() && m_retention_days_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_storage_account_access_key_isValid = ::OpenAPI::fromJsonValue(m_storage_account_access_key, json[QString("storageAccountAccessKey")]);
    m_storage_account_access_key_isSet = !json[QString("storageAccountAccessKey")].isNull() && m_storage_account_access_key_isValid;

    m_storage_account_subscription_id_isValid = ::OpenAPI::fromJsonValue(m_storage_account_subscription_id, json[QString("storageAccountSubscriptionId")]);
    m_storage_account_subscription_id_isSet = !json[QString("storageAccountSubscriptionId")].isNull() && m_storage_account_subscription_id_isValid;

    m_storage_endpoint_isValid = ::OpenAPI::fromJsonValue(m_storage_endpoint, json[QString("storageEndpoint")]);
    m_storage_endpoint_isSet = !json[QString("storageEndpoint")].isNull() && m_storage_endpoint_isValid;
}

QString OAIExtendedServerBlobAuditingPolicyProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExtendedServerBlobAuditingPolicyProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_audit_actions_and_groups.size() > 0) {
        obj.insert(QString("auditActionsAndGroups"), ::OpenAPI::toJsonValue(m_audit_actions_and_groups));
    }
    if (m_is_azure_monitor_target_enabled_isSet) {
        obj.insert(QString("isAzureMonitorTargetEnabled"), ::OpenAPI::toJsonValue(m_is_azure_monitor_target_enabled));
    }
    if (m_is_storage_secondary_key_in_use_isSet) {
        obj.insert(QString("isStorageSecondaryKeyInUse"), ::OpenAPI::toJsonValue(m_is_storage_secondary_key_in_use));
    }
    if (m_predicate_expression_isSet) {
        obj.insert(QString("predicateExpression"), ::OpenAPI::toJsonValue(m_predicate_expression));
    }
    if (m_queue_delay_ms_isSet) {
        obj.insert(QString("queueDelayMs"), ::OpenAPI::toJsonValue(m_queue_delay_ms));
    }
    if (m_retention_days_isSet) {
        obj.insert(QString("retentionDays"), ::OpenAPI::toJsonValue(m_retention_days));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_storage_account_access_key_isSet) {
        obj.insert(QString("storageAccountAccessKey"), ::OpenAPI::toJsonValue(m_storage_account_access_key));
    }
    if (m_storage_account_subscription_id_isSet) {
        obj.insert(QString("storageAccountSubscriptionId"), ::OpenAPI::toJsonValue(m_storage_account_subscription_id));
    }
    if (m_storage_endpoint_isSet) {
        obj.insert(QString("storageEndpoint"), ::OpenAPI::toJsonValue(m_storage_endpoint));
    }
    return obj;
}

QList<QString> OAIExtendedServerBlobAuditingPolicyProperties::getAuditActionsAndGroups() const {
    return m_audit_actions_and_groups;
}
void OAIExtendedServerBlobAuditingPolicyProperties::setAuditActionsAndGroups(const QList<QString> &audit_actions_and_groups) {
    m_audit_actions_and_groups = audit_actions_and_groups;
    m_audit_actions_and_groups_isSet = true;
}

bool OAIExtendedServerBlobAuditingPolicyProperties::is_audit_actions_and_groups_Set() const{
    return m_audit_actions_and_groups_isSet;
}

bool OAIExtendedServerBlobAuditingPolicyProperties::is_audit_actions_and_groups_Valid() const{
    return m_audit_actions_and_groups_isValid;
}

bool OAIExtendedServerBlobAuditingPolicyProperties::isIsAzureMonitorTargetEnabled() const {
    return m_is_azure_monitor_target_enabled;
}
void OAIExtendedServerBlobAuditingPolicyProperties::setIsAzureMonitorTargetEnabled(const bool &is_azure_monitor_target_enabled) {
    m_is_azure_monitor_target_enabled = is_azure_monitor_target_enabled;
    m_is_azure_monitor_target_enabled_isSet = true;
}

bool OAIExtendedServerBlobAuditingPolicyProperties::is_is_azure_monitor_target_enabled_Set() const{
    return m_is_azure_monitor_target_enabled_isSet;
}

bool OAIExtendedServerBlobAuditingPolicyProperties::is_is_azure_monitor_target_enabled_Valid() const{
    return m_is_azure_monitor_target_enabled_isValid;
}

bool OAIExtendedServerBlobAuditingPolicyProperties::isIsStorageSecondaryKeyInUse() const {
    return m_is_storage_secondary_key_in_use;
}
void OAIExtendedServerBlobAuditingPolicyProperties::setIsStorageSecondaryKeyInUse(const bool &is_storage_secondary_key_in_use) {
    m_is_storage_secondary_key_in_use = is_storage_secondary_key_in_use;
    m_is_storage_secondary_key_in_use_isSet = true;
}

bool OAIExtendedServerBlobAuditingPolicyProperties::is_is_storage_secondary_key_in_use_Set() const{
    return m_is_storage_secondary_key_in_use_isSet;
}

bool OAIExtendedServerBlobAuditingPolicyProperties::is_is_storage_secondary_key_in_use_Valid() const{
    return m_is_storage_secondary_key_in_use_isValid;
}

QString OAIExtendedServerBlobAuditingPolicyProperties::getPredicateExpression() const {
    return m_predicate_expression;
}
void OAIExtendedServerBlobAuditingPolicyProperties::setPredicateExpression(const QString &predicate_expression) {
    m_predicate_expression = predicate_expression;
    m_predicate_expression_isSet = true;
}

bool OAIExtendedServerBlobAuditingPolicyProperties::is_predicate_expression_Set() const{
    return m_predicate_expression_isSet;
}

bool OAIExtendedServerBlobAuditingPolicyProperties::is_predicate_expression_Valid() const{
    return m_predicate_expression_isValid;
}

qint32 OAIExtendedServerBlobAuditingPolicyProperties::getQueueDelayMs() const {
    return m_queue_delay_ms;
}
void OAIExtendedServerBlobAuditingPolicyProperties::setQueueDelayMs(const qint32 &queue_delay_ms) {
    m_queue_delay_ms = queue_delay_ms;
    m_queue_delay_ms_isSet = true;
}

bool OAIExtendedServerBlobAuditingPolicyProperties::is_queue_delay_ms_Set() const{
    return m_queue_delay_ms_isSet;
}

bool OAIExtendedServerBlobAuditingPolicyProperties::is_queue_delay_ms_Valid() const{
    return m_queue_delay_ms_isValid;
}

qint32 OAIExtendedServerBlobAuditingPolicyProperties::getRetentionDays() const {
    return m_retention_days;
}
void OAIExtendedServerBlobAuditingPolicyProperties::setRetentionDays(const qint32 &retention_days) {
    m_retention_days = retention_days;
    m_retention_days_isSet = true;
}

bool OAIExtendedServerBlobAuditingPolicyProperties::is_retention_days_Set() const{
    return m_retention_days_isSet;
}

bool OAIExtendedServerBlobAuditingPolicyProperties::is_retention_days_Valid() const{
    return m_retention_days_isValid;
}

QString OAIExtendedServerBlobAuditingPolicyProperties::getState() const {
    return m_state;
}
void OAIExtendedServerBlobAuditingPolicyProperties::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIExtendedServerBlobAuditingPolicyProperties::is_state_Set() const{
    return m_state_isSet;
}

bool OAIExtendedServerBlobAuditingPolicyProperties::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIExtendedServerBlobAuditingPolicyProperties::getStorageAccountAccessKey() const {
    return m_storage_account_access_key;
}
void OAIExtendedServerBlobAuditingPolicyProperties::setStorageAccountAccessKey(const QString &storage_account_access_key) {
    m_storage_account_access_key = storage_account_access_key;
    m_storage_account_access_key_isSet = true;
}

bool OAIExtendedServerBlobAuditingPolicyProperties::is_storage_account_access_key_Set() const{
    return m_storage_account_access_key_isSet;
}

bool OAIExtendedServerBlobAuditingPolicyProperties::is_storage_account_access_key_Valid() const{
    return m_storage_account_access_key_isValid;
}

QString OAIExtendedServerBlobAuditingPolicyProperties::getStorageAccountSubscriptionId() const {
    return m_storage_account_subscription_id;
}
void OAIExtendedServerBlobAuditingPolicyProperties::setStorageAccountSubscriptionId(const QString &storage_account_subscription_id) {
    m_storage_account_subscription_id = storage_account_subscription_id;
    m_storage_account_subscription_id_isSet = true;
}

bool OAIExtendedServerBlobAuditingPolicyProperties::is_storage_account_subscription_id_Set() const{
    return m_storage_account_subscription_id_isSet;
}

bool OAIExtendedServerBlobAuditingPolicyProperties::is_storage_account_subscription_id_Valid() const{
    return m_storage_account_subscription_id_isValid;
}

QString OAIExtendedServerBlobAuditingPolicyProperties::getStorageEndpoint() const {
    return m_storage_endpoint;
}
void OAIExtendedServerBlobAuditingPolicyProperties::setStorageEndpoint(const QString &storage_endpoint) {
    m_storage_endpoint = storage_endpoint;
    m_storage_endpoint_isSet = true;
}

bool OAIExtendedServerBlobAuditingPolicyProperties::is_storage_endpoint_Set() const{
    return m_storage_endpoint_isSet;
}

bool OAIExtendedServerBlobAuditingPolicyProperties::is_storage_endpoint_Valid() const{
    return m_storage_endpoint_isValid;
}

bool OAIExtendedServerBlobAuditingPolicyProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_audit_actions_and_groups.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_azure_monitor_target_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_storage_secondary_key_in_use_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_predicate_expression_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_queue_delay_ms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_retention_days_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_account_access_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_account_subscription_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_endpoint_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExtendedServerBlobAuditingPolicyProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_state_isValid && true;
}

} // namespace OpenAPI
