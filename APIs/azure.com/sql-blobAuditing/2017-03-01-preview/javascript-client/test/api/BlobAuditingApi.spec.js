/**
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2017-03-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SqlManagementClient);
  }
}(this, function(expect, SqlManagementClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SqlManagementClient.BlobAuditingApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('BlobAuditingApi', function() {
    describe('databaseBlobAuditingPoliciesCreateOrUpdate', function() {
      it('should call databaseBlobAuditingPoliciesCreateOrUpdate successfully', function(done) {
        //uncomment below and update the code to test databaseBlobAuditingPoliciesCreateOrUpdate
        //instance.databaseBlobAuditingPoliciesCreateOrUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('databaseBlobAuditingPoliciesGet', function() {
      it('should call databaseBlobAuditingPoliciesGet successfully', function(done) {
        //uncomment below and update the code to test databaseBlobAuditingPoliciesGet
        //instance.databaseBlobAuditingPoliciesGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('databaseBlobAuditingPoliciesListByDatabase', function() {
      it('should call databaseBlobAuditingPoliciesListByDatabase successfully', function(done) {
        //uncomment below and update the code to test databaseBlobAuditingPoliciesListByDatabase
        //instance.databaseBlobAuditingPoliciesListByDatabase(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('extendedDatabaseBlobAuditingPoliciesCreateOrUpdate', function() {
      it('should call extendedDatabaseBlobAuditingPoliciesCreateOrUpdate successfully', function(done) {
        //uncomment below and update the code to test extendedDatabaseBlobAuditingPoliciesCreateOrUpdate
        //instance.extendedDatabaseBlobAuditingPoliciesCreateOrUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('extendedDatabaseBlobAuditingPoliciesGet', function() {
      it('should call extendedDatabaseBlobAuditingPoliciesGet successfully', function(done) {
        //uncomment below and update the code to test extendedDatabaseBlobAuditingPoliciesGet
        //instance.extendedDatabaseBlobAuditingPoliciesGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('extendedServerBlobAuditingPoliciesCreateOrUpdate', function() {
      it('should call extendedServerBlobAuditingPoliciesCreateOrUpdate successfully', function(done) {
        //uncomment below and update the code to test extendedServerBlobAuditingPoliciesCreateOrUpdate
        //instance.extendedServerBlobAuditingPoliciesCreateOrUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('extendedServerBlobAuditingPoliciesGet', function() {
      it('should call extendedServerBlobAuditingPoliciesGet successfully', function(done) {
        //uncomment below and update the code to test extendedServerBlobAuditingPoliciesGet
        //instance.extendedServerBlobAuditingPoliciesGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('serverBlobAuditingPoliciesCreateOrUpdate', function() {
      it('should call serverBlobAuditingPoliciesCreateOrUpdate successfully', function(done) {
        //uncomment below and update the code to test serverBlobAuditingPoliciesCreateOrUpdate
        //instance.serverBlobAuditingPoliciesCreateOrUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('serverBlobAuditingPoliciesGet', function() {
      it('should call serverBlobAuditingPoliciesGet successfully', function(done) {
        //uncomment below and update the code to test serverBlobAuditingPoliciesGet
        //instance.serverBlobAuditingPoliciesGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('serverBlobAuditingPoliciesListByServer', function() {
      it('should call serverBlobAuditingPoliciesListByServer successfully', function(done) {
        //uncomment below and update the code to test serverBlobAuditingPoliciesListByServer
        //instance.serverBlobAuditingPoliciesListByServer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
