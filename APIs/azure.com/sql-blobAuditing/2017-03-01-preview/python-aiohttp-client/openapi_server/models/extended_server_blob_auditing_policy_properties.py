# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ExtendedServerBlobAuditingPolicyProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, audit_actions_and_groups: List[str]=None, is_azure_monitor_target_enabled: bool=None, is_storage_secondary_key_in_use: bool=None, predicate_expression: str=None, queue_delay_ms: int=None, retention_days: int=None, state: str=None, storage_account_access_key: str=None, storage_account_subscription_id: str=None, storage_endpoint: str=None):
        """ExtendedServerBlobAuditingPolicyProperties - a model defined in OpenAPI

        :param audit_actions_and_groups: The audit_actions_and_groups of this ExtendedServerBlobAuditingPolicyProperties.
        :param is_azure_monitor_target_enabled: The is_azure_monitor_target_enabled of this ExtendedServerBlobAuditingPolicyProperties.
        :param is_storage_secondary_key_in_use: The is_storage_secondary_key_in_use of this ExtendedServerBlobAuditingPolicyProperties.
        :param predicate_expression: The predicate_expression of this ExtendedServerBlobAuditingPolicyProperties.
        :param queue_delay_ms: The queue_delay_ms of this ExtendedServerBlobAuditingPolicyProperties.
        :param retention_days: The retention_days of this ExtendedServerBlobAuditingPolicyProperties.
        :param state: The state of this ExtendedServerBlobAuditingPolicyProperties.
        :param storage_account_access_key: The storage_account_access_key of this ExtendedServerBlobAuditingPolicyProperties.
        :param storage_account_subscription_id: The storage_account_subscription_id of this ExtendedServerBlobAuditingPolicyProperties.
        :param storage_endpoint: The storage_endpoint of this ExtendedServerBlobAuditingPolicyProperties.
        """
        self.openapi_types = {
            'audit_actions_and_groups': List[str],
            'is_azure_monitor_target_enabled': bool,
            'is_storage_secondary_key_in_use': bool,
            'predicate_expression': str,
            'queue_delay_ms': int,
            'retention_days': int,
            'state': str,
            'storage_account_access_key': str,
            'storage_account_subscription_id': str,
            'storage_endpoint': str
        }

        self.attribute_map = {
            'audit_actions_and_groups': 'auditActionsAndGroups',
            'is_azure_monitor_target_enabled': 'isAzureMonitorTargetEnabled',
            'is_storage_secondary_key_in_use': 'isStorageSecondaryKeyInUse',
            'predicate_expression': 'predicateExpression',
            'queue_delay_ms': 'queueDelayMs',
            'retention_days': 'retentionDays',
            'state': 'state',
            'storage_account_access_key': 'storageAccountAccessKey',
            'storage_account_subscription_id': 'storageAccountSubscriptionId',
            'storage_endpoint': 'storageEndpoint'
        }

        self._audit_actions_and_groups = audit_actions_and_groups
        self._is_azure_monitor_target_enabled = is_azure_monitor_target_enabled
        self._is_storage_secondary_key_in_use = is_storage_secondary_key_in_use
        self._predicate_expression = predicate_expression
        self._queue_delay_ms = queue_delay_ms
        self._retention_days = retention_days
        self._state = state
        self._storage_account_access_key = storage_account_access_key
        self._storage_account_subscription_id = storage_account_subscription_id
        self._storage_endpoint = storage_endpoint

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExtendedServerBlobAuditingPolicyProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ExtendedServerBlobAuditingPolicyProperties of this ExtendedServerBlobAuditingPolicyProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def audit_actions_and_groups(self):
        """Gets the audit_actions_and_groups of this ExtendedServerBlobAuditingPolicyProperties.

        Specifies the Actions-Groups and Actions to audit.    The recommended set of action groups to use is the following combination - this will audit all the queries and stored procedures executed against the database, as well as successful and failed logins:    BATCH_COMPLETED_GROUP,  SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP,  FAILED_DATABASE_AUTHENTICATION_GROUP.    This above combination is also the set that is configured by default when enabling auditing from the Azure portal.    The supported action groups to audit are (note: choose only specific groups that cover your auditing needs. Using unnecessary groups could lead to very large quantities of audit records):    APPLICATION_ROLE_CHANGE_PASSWORD_GROUP  BACKUP_RESTORE_GROUP  DATABASE_LOGOUT_GROUP  DATABASE_OBJECT_CHANGE_GROUP  DATABASE_OBJECT_OWNERSHIP_CHANGE_GROUP  DATABASE_OBJECT_PERMISSION_CHANGE_GROUP  DATABASE_OPERATION_GROUP  DATABASE_PERMISSION_CHANGE_GROUP  DATABASE_PRINCIPAL_CHANGE_GROUP  DATABASE_PRINCIPAL_IMPERSONATION_GROUP  DATABASE_ROLE_MEMBER_CHANGE_GROUP  FAILED_DATABASE_AUTHENTICATION_GROUP  SCHEMA_OBJECT_ACCESS_GROUP  SCHEMA_OBJECT_CHANGE_GROUP  SCHEMA_OBJECT_OWNERSHIP_CHANGE_GROUP  SCHEMA_OBJECT_PERMISSION_CHANGE_GROUP  SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP  USER_CHANGE_PASSWORD_GROUP  BATCH_STARTED_GROUP  BATCH_COMPLETED_GROUP    These are groups that cover all sql statements and stored procedures executed against the database, and should not be used in combination with other groups as this will result in duplicate audit logs.    For more information, see [Database-Level Audit Action Groups](https://docs.microsoft.com/en-us/sql/relational-databases/security/auditing/sql-server-audit-action-groups-and-actions#database-level-audit-action-groups).    For Database auditing policy, specific Actions can also be specified (note that Actions cannot be specified for Server auditing policy). The supported actions to audit are:  SELECT  UPDATE  INSERT  DELETE  EXECUTE  RECEIVE  REFERENCES    The general form for defining an action to be audited is:  {action} ON {object} BY {principal}    Note that <object> in the above format can refer to an object like a table, view, or stored procedure, or an entire database or schema. For the latter cases, the forms DATABASE::{db_name} and SCHEMA::{schema_name} are used, respectively.    For example:  SELECT on dbo.myTable by public  SELECT on DATABASE::myDatabase by public  SELECT on SCHEMA::mySchema by public    For more information, see [Database-Level Audit Actions](https://docs.microsoft.com/en-us/sql/relational-databases/security/auditing/sql-server-audit-action-groups-and-actions#database-level-audit-actions)

        :return: The audit_actions_and_groups of this ExtendedServerBlobAuditingPolicyProperties.
        :rtype: List[str]
        """
        return self._audit_actions_and_groups

    @audit_actions_and_groups.setter
    def audit_actions_and_groups(self, audit_actions_and_groups):
        """Sets the audit_actions_and_groups of this ExtendedServerBlobAuditingPolicyProperties.

        Specifies the Actions-Groups and Actions to audit.    The recommended set of action groups to use is the following combination - this will audit all the queries and stored procedures executed against the database, as well as successful and failed logins:    BATCH_COMPLETED_GROUP,  SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP,  FAILED_DATABASE_AUTHENTICATION_GROUP.    This above combination is also the set that is configured by default when enabling auditing from the Azure portal.    The supported action groups to audit are (note: choose only specific groups that cover your auditing needs. Using unnecessary groups could lead to very large quantities of audit records):    APPLICATION_ROLE_CHANGE_PASSWORD_GROUP  BACKUP_RESTORE_GROUP  DATABASE_LOGOUT_GROUP  DATABASE_OBJECT_CHANGE_GROUP  DATABASE_OBJECT_OWNERSHIP_CHANGE_GROUP  DATABASE_OBJECT_PERMISSION_CHANGE_GROUP  DATABASE_OPERATION_GROUP  DATABASE_PERMISSION_CHANGE_GROUP  DATABASE_PRINCIPAL_CHANGE_GROUP  DATABASE_PRINCIPAL_IMPERSONATION_GROUP  DATABASE_ROLE_MEMBER_CHANGE_GROUP  FAILED_DATABASE_AUTHENTICATION_GROUP  SCHEMA_OBJECT_ACCESS_GROUP  SCHEMA_OBJECT_CHANGE_GROUP  SCHEMA_OBJECT_OWNERSHIP_CHANGE_GROUP  SCHEMA_OBJECT_PERMISSION_CHANGE_GROUP  SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP  USER_CHANGE_PASSWORD_GROUP  BATCH_STARTED_GROUP  BATCH_COMPLETED_GROUP    These are groups that cover all sql statements and stored procedures executed against the database, and should not be used in combination with other groups as this will result in duplicate audit logs.    For more information, see [Database-Level Audit Action Groups](https://docs.microsoft.com/en-us/sql/relational-databases/security/auditing/sql-server-audit-action-groups-and-actions#database-level-audit-action-groups).    For Database auditing policy, specific Actions can also be specified (note that Actions cannot be specified for Server auditing policy). The supported actions to audit are:  SELECT  UPDATE  INSERT  DELETE  EXECUTE  RECEIVE  REFERENCES    The general form for defining an action to be audited is:  {action} ON {object} BY {principal}    Note that <object> in the above format can refer to an object like a table, view, or stored procedure, or an entire database or schema. For the latter cases, the forms DATABASE::{db_name} and SCHEMA::{schema_name} are used, respectively.    For example:  SELECT on dbo.myTable by public  SELECT on DATABASE::myDatabase by public  SELECT on SCHEMA::mySchema by public    For more information, see [Database-Level Audit Actions](https://docs.microsoft.com/en-us/sql/relational-databases/security/auditing/sql-server-audit-action-groups-and-actions#database-level-audit-actions)

        :param audit_actions_and_groups: The audit_actions_and_groups of this ExtendedServerBlobAuditingPolicyProperties.
        :type audit_actions_and_groups: List[str]
        """

        self._audit_actions_and_groups = audit_actions_and_groups

    @property
    def is_azure_monitor_target_enabled(self):
        """Gets the is_azure_monitor_target_enabled of this ExtendedServerBlobAuditingPolicyProperties.

        Specifies whether audit events are sent to Azure Monitor.   In order to send the events to Azure Monitor, specify 'state' as 'Enabled' and 'isAzureMonitorTargetEnabled' as true.    When using REST API to configure auditing, Diagnostic Settings with 'SQLSecurityAuditEvents' diagnostic logs category on the database should be also created.  Note that for server level audit you should use the 'master' database as {databaseName}.    Diagnostic Settings URI format:  PUT https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/providers/microsoft.insights/diagnosticSettings/{settingsName}?api-version=2017-05-01-preview    For more information, see [Diagnostic Settings REST API](https://go.microsoft.com/fwlink/?linkid=2033207)  or [Diagnostic Settings PowerShell](https://go.microsoft.com/fwlink/?linkid=2033043)  

        :return: The is_azure_monitor_target_enabled of this ExtendedServerBlobAuditingPolicyProperties.
        :rtype: bool
        """
        return self._is_azure_monitor_target_enabled

    @is_azure_monitor_target_enabled.setter
    def is_azure_monitor_target_enabled(self, is_azure_monitor_target_enabled):
        """Sets the is_azure_monitor_target_enabled of this ExtendedServerBlobAuditingPolicyProperties.

        Specifies whether audit events are sent to Azure Monitor.   In order to send the events to Azure Monitor, specify 'state' as 'Enabled' and 'isAzureMonitorTargetEnabled' as true.    When using REST API to configure auditing, Diagnostic Settings with 'SQLSecurityAuditEvents' diagnostic logs category on the database should be also created.  Note that for server level audit you should use the 'master' database as {databaseName}.    Diagnostic Settings URI format:  PUT https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/providers/microsoft.insights/diagnosticSettings/{settingsName}?api-version=2017-05-01-preview    For more information, see [Diagnostic Settings REST API](https://go.microsoft.com/fwlink/?linkid=2033207)  or [Diagnostic Settings PowerShell](https://go.microsoft.com/fwlink/?linkid=2033043)  

        :param is_azure_monitor_target_enabled: The is_azure_monitor_target_enabled of this ExtendedServerBlobAuditingPolicyProperties.
        :type is_azure_monitor_target_enabled: bool
        """

        self._is_azure_monitor_target_enabled = is_azure_monitor_target_enabled

    @property
    def is_storage_secondary_key_in_use(self):
        """Gets the is_storage_secondary_key_in_use of this ExtendedServerBlobAuditingPolicyProperties.

        Specifies whether storageAccountAccessKey value is the storage's secondary key.

        :return: The is_storage_secondary_key_in_use of this ExtendedServerBlobAuditingPolicyProperties.
        :rtype: bool
        """
        return self._is_storage_secondary_key_in_use

    @is_storage_secondary_key_in_use.setter
    def is_storage_secondary_key_in_use(self, is_storage_secondary_key_in_use):
        """Sets the is_storage_secondary_key_in_use of this ExtendedServerBlobAuditingPolicyProperties.

        Specifies whether storageAccountAccessKey value is the storage's secondary key.

        :param is_storage_secondary_key_in_use: The is_storage_secondary_key_in_use of this ExtendedServerBlobAuditingPolicyProperties.
        :type is_storage_secondary_key_in_use: bool
        """

        self._is_storage_secondary_key_in_use = is_storage_secondary_key_in_use

    @property
    def predicate_expression(self):
        """Gets the predicate_expression of this ExtendedServerBlobAuditingPolicyProperties.

        Specifies condition of where clause when creating an audit.

        :return: The predicate_expression of this ExtendedServerBlobAuditingPolicyProperties.
        :rtype: str
        """
        return self._predicate_expression

    @predicate_expression.setter
    def predicate_expression(self, predicate_expression):
        """Sets the predicate_expression of this ExtendedServerBlobAuditingPolicyProperties.

        Specifies condition of where clause when creating an audit.

        :param predicate_expression: The predicate_expression of this ExtendedServerBlobAuditingPolicyProperties.
        :type predicate_expression: str
        """

        self._predicate_expression = predicate_expression

    @property
    def queue_delay_ms(self):
        """Gets the queue_delay_ms of this ExtendedServerBlobAuditingPolicyProperties.

        Specifies the amount of time in milliseconds that can elapse before audit actions are forced to be processed.  The default minimum value is 1000 (1 second). The maximum is 2,147,483,647.

        :return: The queue_delay_ms of this ExtendedServerBlobAuditingPolicyProperties.
        :rtype: int
        """
        return self._queue_delay_ms

    @queue_delay_ms.setter
    def queue_delay_ms(self, queue_delay_ms):
        """Sets the queue_delay_ms of this ExtendedServerBlobAuditingPolicyProperties.

        Specifies the amount of time in milliseconds that can elapse before audit actions are forced to be processed.  The default minimum value is 1000 (1 second). The maximum is 2,147,483,647.

        :param queue_delay_ms: The queue_delay_ms of this ExtendedServerBlobAuditingPolicyProperties.
        :type queue_delay_ms: int
        """

        self._queue_delay_ms = queue_delay_ms

    @property
    def retention_days(self):
        """Gets the retention_days of this ExtendedServerBlobAuditingPolicyProperties.

        Specifies the number of days to keep in the audit logs in the storage account.

        :return: The retention_days of this ExtendedServerBlobAuditingPolicyProperties.
        :rtype: int
        """
        return self._retention_days

    @retention_days.setter
    def retention_days(self, retention_days):
        """Sets the retention_days of this ExtendedServerBlobAuditingPolicyProperties.

        Specifies the number of days to keep in the audit logs in the storage account.

        :param retention_days: The retention_days of this ExtendedServerBlobAuditingPolicyProperties.
        :type retention_days: int
        """

        self._retention_days = retention_days

    @property
    def state(self):
        """Gets the state of this ExtendedServerBlobAuditingPolicyProperties.

        Specifies the state of the policy. If state is Enabled, storageEndpoint or isAzureMonitorTargetEnabled are required.

        :return: The state of this ExtendedServerBlobAuditingPolicyProperties.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ExtendedServerBlobAuditingPolicyProperties.

        Specifies the state of the policy. If state is Enabled, storageEndpoint or isAzureMonitorTargetEnabled are required.

        :param state: The state of this ExtendedServerBlobAuditingPolicyProperties.
        :type state: str
        """
        allowed_values = ["Enabled", "Disabled"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def storage_account_access_key(self):
        """Gets the storage_account_access_key of this ExtendedServerBlobAuditingPolicyProperties.

        Specifies the identifier key of the auditing storage account. If state is Enabled and storageEndpoint is specified, storageAccountAccessKey is required.

        :return: The storage_account_access_key of this ExtendedServerBlobAuditingPolicyProperties.
        :rtype: str
        """
        return self._storage_account_access_key

    @storage_account_access_key.setter
    def storage_account_access_key(self, storage_account_access_key):
        """Sets the storage_account_access_key of this ExtendedServerBlobAuditingPolicyProperties.

        Specifies the identifier key of the auditing storage account. If state is Enabled and storageEndpoint is specified, storageAccountAccessKey is required.

        :param storage_account_access_key: The storage_account_access_key of this ExtendedServerBlobAuditingPolicyProperties.
        :type storage_account_access_key: str
        """

        self._storage_account_access_key = storage_account_access_key

    @property
    def storage_account_subscription_id(self):
        """Gets the storage_account_subscription_id of this ExtendedServerBlobAuditingPolicyProperties.

        Specifies the blob storage subscription Id.

        :return: The storage_account_subscription_id of this ExtendedServerBlobAuditingPolicyProperties.
        :rtype: str
        """
        return self._storage_account_subscription_id

    @storage_account_subscription_id.setter
    def storage_account_subscription_id(self, storage_account_subscription_id):
        """Sets the storage_account_subscription_id of this ExtendedServerBlobAuditingPolicyProperties.

        Specifies the blob storage subscription Id.

        :param storage_account_subscription_id: The storage_account_subscription_id of this ExtendedServerBlobAuditingPolicyProperties.
        :type storage_account_subscription_id: str
        """

        self._storage_account_subscription_id = storage_account_subscription_id

    @property
    def storage_endpoint(self):
        """Gets the storage_endpoint of this ExtendedServerBlobAuditingPolicyProperties.

        Specifies the blob storage endpoint (e.g. https://MyAccount.blob.core.windows.net). If state is Enabled, storageEndpoint or isAzureMonitorTargetEnabled is required.

        :return: The storage_endpoint of this ExtendedServerBlobAuditingPolicyProperties.
        :rtype: str
        """
        return self._storage_endpoint

    @storage_endpoint.setter
    def storage_endpoint(self, storage_endpoint):
        """Sets the storage_endpoint of this ExtendedServerBlobAuditingPolicyProperties.

        Specifies the blob storage endpoint (e.g. https://MyAccount.blob.core.windows.net). If state is Enabled, storageEndpoint or isAzureMonitorTargetEnabled is required.

        :param storage_endpoint: The storage_endpoint of this ExtendedServerBlobAuditingPolicyProperties.
        :type storage_endpoint: str
        """

        self._storage_endpoint = storage_endpoint
