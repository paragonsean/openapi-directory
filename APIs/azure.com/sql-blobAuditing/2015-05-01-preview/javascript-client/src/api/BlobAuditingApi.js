/**
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2015-05-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DatabaseBlobAuditingPolicy from '../model/DatabaseBlobAuditingPolicy';
import DatabaseBlobAuditingPolicyListResult from '../model/DatabaseBlobAuditingPolicyListResult';

/**
* BlobAuditing service.
* @module api/BlobAuditingApi
* @version 2015-05-01-preview
*/
export default class BlobAuditingApi {

    /**
    * Constructs a new BlobAuditingApi. 
    * @alias module:api/BlobAuditingApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the databaseBlobAuditingPoliciesCreateOrUpdate operation.
     * @callback module:api/BlobAuditingApi~databaseBlobAuditingPoliciesCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DatabaseBlobAuditingPolicy} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates or updates a database's blob auditing policy.
     * @param {String} resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param {String} serverName The name of the server.
     * @param {String} databaseName The name of the database.
     * @param {module:model/String} blobAuditingPolicyName The name of the blob auditing policy.
     * @param {String} subscriptionId The subscription ID that identifies an Azure subscription.
     * @param {String} apiVersion The API version to use for the request.
     * @param {module:model/DatabaseBlobAuditingPolicy} parameters The database blob auditing policy.
     * @param {module:api/BlobAuditingApi~databaseBlobAuditingPoliciesCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DatabaseBlobAuditingPolicy}
     */
    databaseBlobAuditingPoliciesCreateOrUpdate(resourceGroupName, serverName, databaseName, blobAuditingPolicyName, subscriptionId, apiVersion, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling databaseBlobAuditingPoliciesCreateOrUpdate");
      }
      // verify the required parameter 'serverName' is set
      if (serverName === undefined || serverName === null) {
        throw new Error("Missing the required parameter 'serverName' when calling databaseBlobAuditingPoliciesCreateOrUpdate");
      }
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling databaseBlobAuditingPoliciesCreateOrUpdate");
      }
      // verify the required parameter 'blobAuditingPolicyName' is set
      if (blobAuditingPolicyName === undefined || blobAuditingPolicyName === null) {
        throw new Error("Missing the required parameter 'blobAuditingPolicyName' when calling databaseBlobAuditingPoliciesCreateOrUpdate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling databaseBlobAuditingPoliciesCreateOrUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling databaseBlobAuditingPoliciesCreateOrUpdate");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling databaseBlobAuditingPoliciesCreateOrUpdate");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'serverName': serverName,
        'databaseName': databaseName,
        'blobAuditingPolicyName': blobAuditingPolicyName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DatabaseBlobAuditingPolicy;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/auditingSettings/{blobAuditingPolicyName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the databaseBlobAuditingPoliciesGet operation.
     * @callback module:api/BlobAuditingApi~databaseBlobAuditingPoliciesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DatabaseBlobAuditingPolicy} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a database's blob auditing policy.
     * @param {String} resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param {String} serverName The name of the server.
     * @param {String} databaseName The name of the database.
     * @param {module:model/String} blobAuditingPolicyName The name of the blob auditing policy.
     * @param {String} subscriptionId The subscription ID that identifies an Azure subscription.
     * @param {String} apiVersion The API version to use for the request.
     * @param {module:api/BlobAuditingApi~databaseBlobAuditingPoliciesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DatabaseBlobAuditingPolicy}
     */
    databaseBlobAuditingPoliciesGet(resourceGroupName, serverName, databaseName, blobAuditingPolicyName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling databaseBlobAuditingPoliciesGet");
      }
      // verify the required parameter 'serverName' is set
      if (serverName === undefined || serverName === null) {
        throw new Error("Missing the required parameter 'serverName' when calling databaseBlobAuditingPoliciesGet");
      }
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling databaseBlobAuditingPoliciesGet");
      }
      // verify the required parameter 'blobAuditingPolicyName' is set
      if (blobAuditingPolicyName === undefined || blobAuditingPolicyName === null) {
        throw new Error("Missing the required parameter 'blobAuditingPolicyName' when calling databaseBlobAuditingPoliciesGet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling databaseBlobAuditingPoliciesGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling databaseBlobAuditingPoliciesGet");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'serverName': serverName,
        'databaseName': databaseName,
        'blobAuditingPolicyName': blobAuditingPolicyName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DatabaseBlobAuditingPolicy;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/auditingSettings/{blobAuditingPolicyName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the databaseBlobAuditingPoliciesListByDatabase operation.
     * @callback module:api/BlobAuditingApi~databaseBlobAuditingPoliciesListByDatabaseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DatabaseBlobAuditingPolicyListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists auditing settings of a database.
     * @param {String} resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param {String} serverName The name of the server.
     * @param {String} databaseName The name of the database.
     * @param {String} subscriptionId The subscription ID that identifies an Azure subscription.
     * @param {String} apiVersion The API version to use for the request.
     * @param {module:api/BlobAuditingApi~databaseBlobAuditingPoliciesListByDatabaseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DatabaseBlobAuditingPolicyListResult}
     */
    databaseBlobAuditingPoliciesListByDatabase(resourceGroupName, serverName, databaseName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling databaseBlobAuditingPoliciesListByDatabase");
      }
      // verify the required parameter 'serverName' is set
      if (serverName === undefined || serverName === null) {
        throw new Error("Missing the required parameter 'serverName' when calling databaseBlobAuditingPoliciesListByDatabase");
      }
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling databaseBlobAuditingPoliciesListByDatabase");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling databaseBlobAuditingPoliciesListByDatabase");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling databaseBlobAuditingPoliciesListByDatabase");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'serverName': serverName,
        'databaseName': databaseName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DatabaseBlobAuditingPolicyListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/auditingSettings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
