/**
 * CertificateRegistrationProvider API Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2015-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CertificateRegistrationProviderApiClient);
  }
}(this, function(expect, CertificateRegistrationProviderApiClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new CertificateRegistrationProviderApiClient.CertificateRegistrationProviderListOperations200ResponseValueInnerPropertiesServiceSpecificationMetricSpecificationsInner();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('CertificateRegistrationProviderListOperations200ResponseValueInnerPropertiesServiceSpecificationMetricSpecificationsInner', function() {
    it('should create an instance of CertificateRegistrationProviderListOperations200ResponseValueInnerPropertiesServiceSpecificationMetricSpecificationsInner', function() {
      // uncomment below and update the code to test CertificateRegistrationProviderListOperations200ResponseValueInnerPropertiesServiceSpecificationMetricSpecificationsInner
      //var instance = new CertificateRegistrationProviderApiClient.CertificateRegistrationProviderListOperations200ResponseValueInnerPropertiesServiceSpecificationMetricSpecificationsInner();
      //expect(instance).to.be.a(CertificateRegistrationProviderApiClient.CertificateRegistrationProviderListOperations200ResponseValueInnerPropertiesServiceSpecificationMetricSpecificationsInner);
    });

    it('should have the property aggregationType (base name: "aggregationType")', function() {
      // uncomment below and update the code to test the property aggregationType
      //var instance = new CertificateRegistrationProviderApiClient.CertificateRegistrationProviderListOperations200ResponseValueInnerPropertiesServiceSpecificationMetricSpecificationsInner();
      //expect(instance).to.be();
    });

    it('should have the property availabilities (base name: "availabilities")', function() {
      // uncomment below and update the code to test the property availabilities
      //var instance = new CertificateRegistrationProviderApiClient.CertificateRegistrationProviderListOperations200ResponseValueInnerPropertiesServiceSpecificationMetricSpecificationsInner();
      //expect(instance).to.be();
    });

    it('should have the property category (base name: "category")', function() {
      // uncomment below and update the code to test the property category
      //var instance = new CertificateRegistrationProviderApiClient.CertificateRegistrationProviderListOperations200ResponseValueInnerPropertiesServiceSpecificationMetricSpecificationsInner();
      //expect(instance).to.be();
    });

    it('should have the property dimensions (base name: "dimensions")', function() {
      // uncomment below and update the code to test the property dimensions
      //var instance = new CertificateRegistrationProviderApiClient.CertificateRegistrationProviderListOperations200ResponseValueInnerPropertiesServiceSpecificationMetricSpecificationsInner();
      //expect(instance).to.be();
    });

    it('should have the property displayDescription (base name: "displayDescription")', function() {
      // uncomment below and update the code to test the property displayDescription
      //var instance = new CertificateRegistrationProviderApiClient.CertificateRegistrationProviderListOperations200ResponseValueInnerPropertiesServiceSpecificationMetricSpecificationsInner();
      //expect(instance).to.be();
    });

    it('should have the property displayName (base name: "displayName")', function() {
      // uncomment below and update the code to test the property displayName
      //var instance = new CertificateRegistrationProviderApiClient.CertificateRegistrationProviderListOperations200ResponseValueInnerPropertiesServiceSpecificationMetricSpecificationsInner();
      //expect(instance).to.be();
    });

    it('should have the property enableRegionalMdmAccount (base name: "enableRegionalMdmAccount")', function() {
      // uncomment below and update the code to test the property enableRegionalMdmAccount
      //var instance = new CertificateRegistrationProviderApiClient.CertificateRegistrationProviderListOperations200ResponseValueInnerPropertiesServiceSpecificationMetricSpecificationsInner();
      //expect(instance).to.be();
    });

    it('should have the property fillGapWithZero (base name: "fillGapWithZero")', function() {
      // uncomment below and update the code to test the property fillGapWithZero
      //var instance = new CertificateRegistrationProviderApiClient.CertificateRegistrationProviderListOperations200ResponseValueInnerPropertiesServiceSpecificationMetricSpecificationsInner();
      //expect(instance).to.be();
    });

    it('should have the property isInternal (base name: "isInternal")', function() {
      // uncomment below and update the code to test the property isInternal
      //var instance = new CertificateRegistrationProviderApiClient.CertificateRegistrationProviderListOperations200ResponseValueInnerPropertiesServiceSpecificationMetricSpecificationsInner();
      //expect(instance).to.be();
    });

    it('should have the property metricFilterPattern (base name: "metricFilterPattern")', function() {
      // uncomment below and update the code to test the property metricFilterPattern
      //var instance = new CertificateRegistrationProviderApiClient.CertificateRegistrationProviderListOperations200ResponseValueInnerPropertiesServiceSpecificationMetricSpecificationsInner();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new CertificateRegistrationProviderApiClient.CertificateRegistrationProviderListOperations200ResponseValueInnerPropertiesServiceSpecificationMetricSpecificationsInner();
      //expect(instance).to.be();
    });

    it('should have the property sourceMdmAccount (base name: "sourceMdmAccount")', function() {
      // uncomment below and update the code to test the property sourceMdmAccount
      //var instance = new CertificateRegistrationProviderApiClient.CertificateRegistrationProviderListOperations200ResponseValueInnerPropertiesServiceSpecificationMetricSpecificationsInner();
      //expect(instance).to.be();
    });

    it('should have the property sourceMdmNamespace (base name: "sourceMdmNamespace")', function() {
      // uncomment below and update the code to test the property sourceMdmNamespace
      //var instance = new CertificateRegistrationProviderApiClient.CertificateRegistrationProviderListOperations200ResponseValueInnerPropertiesServiceSpecificationMetricSpecificationsInner();
      //expect(instance).to.be();
    });

    it('should have the property supportsInstanceLevelAggregation (base name: "supportsInstanceLevelAggregation")', function() {
      // uncomment below and update the code to test the property supportsInstanceLevelAggregation
      //var instance = new CertificateRegistrationProviderApiClient.CertificateRegistrationProviderListOperations200ResponseValueInnerPropertiesServiceSpecificationMetricSpecificationsInner();
      //expect(instance).to.be();
    });

    it('should have the property unit (base name: "unit")', function() {
      // uncomment below and update the code to test the property unit
      //var instance = new CertificateRegistrationProviderApiClient.CertificateRegistrationProviderListOperations200ResponseValueInnerPropertiesServiceSpecificationMetricSpecificationsInner();
      //expect(instance).to.be();
    });

  });

}));
