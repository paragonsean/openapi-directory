/**
 * Diagnostics API Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-02-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataTableResponseObject.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataTableResponseObject::OAIDataTableResponseObject(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataTableResponseObject::OAIDataTableResponseObject() {
    this->initializeModel();
}

OAIDataTableResponseObject::~OAIDataTableResponseObject() {}

void OAIDataTableResponseObject::initializeModel() {

    m_columns_isSet = false;
    m_columns_isValid = false;

    m_rows_isSet = false;
    m_rows_isValid = false;

    m_table_name_isSet = false;
    m_table_name_isValid = false;
}

void OAIDataTableResponseObject::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDataTableResponseObject::fromJsonObject(QJsonObject json) {

    m_columns_isValid = ::OpenAPI::fromJsonValue(m_columns, json[QString("columns")]);
    m_columns_isSet = !json[QString("columns")].isNull() && m_columns_isValid;

    if(json["rows"].isArray()){
        auto arr = json["rows"].toArray();
        m_rows_isValid = true;
        if(arr.count() > 0) {
            for (const QJsonValue jval : arr) {
                QList<QString> item;
                m_rows_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_rows_isSet = !jval.isNull() && m_rows_isValid;
                m_rows.push_back(item);
            }
        }
    }

    m_table_name_isValid = ::OpenAPI::fromJsonValue(m_table_name, json[QString("tableName")]);
    m_table_name_isSet = !json[QString("tableName")].isNull() && m_table_name_isValid;
}

QString OAIDataTableResponseObject::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDataTableResponseObject::asJsonObject() const {
    QJsonObject obj;
    if (m_columns.size() > 0) {
        obj.insert(QString("columns"), ::OpenAPI::toJsonValue(m_columns));
    }
    if (m_rows.size() > 0) {
        
        obj.insert(QString("rows"), toJsonValue(m_rows));
    }
    if (m_table_name_isSet) {
        obj.insert(QString("tableName"), ::OpenAPI::toJsonValue(m_table_name));
    }
    return obj;
}

QList<OAIDataTableResponseColumn> OAIDataTableResponseObject::getColumns() const {
    return m_columns;
}
void OAIDataTableResponseObject::setColumns(const QList<OAIDataTableResponseColumn> &columns) {
    m_columns = columns;
    m_columns_isSet = true;
}

bool OAIDataTableResponseObject::is_columns_Set() const{
    return m_columns_isSet;
}

bool OAIDataTableResponseObject::is_columns_Valid() const{
    return m_columns_isValid;
}

QList<QList<QString>> OAIDataTableResponseObject::getRows() const {
    return m_rows;
}
void OAIDataTableResponseObject::setRows(const QList<QList<QString>> &rows) {
    m_rows = rows;
    m_rows_isSet = true;
}

bool OAIDataTableResponseObject::is_rows_Set() const{
    return m_rows_isSet;
}

bool OAIDataTableResponseObject::is_rows_Valid() const{
    return m_rows_isValid;
}

QString OAIDataTableResponseObject::getTableName() const {
    return m_table_name;
}
void OAIDataTableResponseObject::setTableName(const QString &table_name) {
    m_table_name = table_name;
    m_table_name_isSet = true;
}

bool OAIDataTableResponseObject::is_table_name_Set() const{
    return m_table_name_isSet;
}

bool OAIDataTableResponseObject::is_table_name_Valid() const{
    return m_table_name_isValid;
}

bool OAIDataTableResponseObject::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_columns.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_rows.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_table_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDataTableResponseObject::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
