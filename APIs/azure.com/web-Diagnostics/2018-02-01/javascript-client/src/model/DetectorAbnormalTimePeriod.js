/**
 * Diagnostics API Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-02-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AnalysisDataDataInnerInner from './AnalysisDataDataInnerInner';
import Solution from './Solution';

/**
 * The DetectorAbnormalTimePeriod model module.
 * @module model/DetectorAbnormalTimePeriod
 * @version 2018-02-01
 */
class DetectorAbnormalTimePeriod {
    /**
     * Constructs a new <code>DetectorAbnormalTimePeriod</code>.
     * Class representing Abnormal Time Period detected.
     * @alias module:model/DetectorAbnormalTimePeriod
     */
    constructor() { 
        
        DetectorAbnormalTimePeriod.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DetectorAbnormalTimePeriod</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DetectorAbnormalTimePeriod} obj Optional instance to populate.
     * @return {module:model/DetectorAbnormalTimePeriod} The populated <code>DetectorAbnormalTimePeriod</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DetectorAbnormalTimePeriod();

            if (data.hasOwnProperty('endTime')) {
                obj['endTime'] = ApiClient.convertToType(data['endTime'], 'Date');
            }
            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], 'String');
            }
            if (data.hasOwnProperty('metaData')) {
                obj['metaData'] = ApiClient.convertToType(data['metaData'], [[AnalysisDataDataInnerInner]]);
            }
            if (data.hasOwnProperty('priority')) {
                obj['priority'] = ApiClient.convertToType(data['priority'], 'Number');
            }
            if (data.hasOwnProperty('solutions')) {
                obj['solutions'] = ApiClient.convertToType(data['solutions'], [Solution]);
            }
            if (data.hasOwnProperty('source')) {
                obj['source'] = ApiClient.convertToType(data['source'], 'String');
            }
            if (data.hasOwnProperty('startTime')) {
                obj['startTime'] = ApiClient.convertToType(data['startTime'], 'Date');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DetectorAbnormalTimePeriod</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DetectorAbnormalTimePeriod</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['message'] && !(typeof data['message'] === 'string' || data['message'] instanceof String)) {
            throw new Error("Expected the field `message` to be a primitive type in the JSON string but got " + data['message']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['metaData'])) {
            throw new Error("Expected the field `metaData` to be an array in the JSON data but got " + data['metaData']);
        }
        if (data['solutions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['solutions'])) {
                throw new Error("Expected the field `solutions` to be an array in the JSON data but got " + data['solutions']);
            }
            // validate the optional field `solutions` (array)
            for (const item of data['solutions']) {
                Solution.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['source'] && !(typeof data['source'] === 'string' || data['source'] instanceof String)) {
            throw new Error("Expected the field `source` to be a primitive type in the JSON string but got " + data['source']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * End time of the correlated event
 * @member {Date} endTime
 */
DetectorAbnormalTimePeriod.prototype['endTime'] = undefined;

/**
 * Message describing the event
 * @member {String} message
 */
DetectorAbnormalTimePeriod.prototype['message'] = undefined;

/**
 * Downtime metadata
 * @member {Array.<Array.<module:model/AnalysisDataDataInnerInner>>} metaData
 */
DetectorAbnormalTimePeriod.prototype['metaData'] = undefined;

/**
 * Represents the rank of the Detector
 * @member {Number} priority
 */
DetectorAbnormalTimePeriod.prototype['priority'] = undefined;

/**
 * List of proposed solutions
 * @member {Array.<module:model/Solution>} solutions
 */
DetectorAbnormalTimePeriod.prototype['solutions'] = undefined;

/**
 * Represents the name of the Detector
 * @member {String} source
 */
DetectorAbnormalTimePeriod.prototype['source'] = undefined;

/**
 * Start time of the correlated event
 * @member {Date} startTime
 */
DetectorAbnormalTimePeriod.prototype['startTime'] = undefined;

/**
 * Represents the type of the Detector
 * @member {module:model/DetectorAbnormalTimePeriod.TypeEnum} type
 */
DetectorAbnormalTimePeriod.prototype['type'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
DetectorAbnormalTimePeriod['TypeEnum'] = {

    /**
     * value: "ServiceIncident"
     * @const
     */
    "ServiceIncident": "ServiceIncident",

    /**
     * value: "AppDeployment"
     * @const
     */
    "AppDeployment": "AppDeployment",

    /**
     * value: "AppCrash"
     * @const
     */
    "AppCrash": "AppCrash",

    /**
     * value: "RuntimeIssueDetected"
     * @const
     */
    "RuntimeIssueDetected": "RuntimeIssueDetected",

    /**
     * value: "AseDeployment"
     * @const
     */
    "AseDeployment": "AseDeployment",

    /**
     * value: "UserIssue"
     * @const
     */
    "UserIssue": "UserIssue",

    /**
     * value: "PlatformIssue"
     * @const
     */
    "PlatformIssue": "PlatformIssue",

    /**
     * value: "Other"
     * @const
     */
    "Other": "Other"
};



export default DetectorAbnormalTimePeriod;

