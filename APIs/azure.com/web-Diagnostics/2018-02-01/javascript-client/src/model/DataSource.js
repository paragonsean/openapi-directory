/**
 * Diagnostics API Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-02-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AnalysisDataDataInnerInner from './AnalysisDataDataInnerInner';

/**
 * The DataSource model module.
 * @module model/DataSource
 * @version 2018-02-01
 */
class DataSource {
    /**
     * Constructs a new <code>DataSource</code>.
     * Class representing data source used by the detectors
     * @alias module:model/DataSource
     */
    constructor() { 
        
        DataSource.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DataSource</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DataSource} obj Optional instance to populate.
     * @return {module:model/DataSource} The populated <code>DataSource</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DataSource();

            if (data.hasOwnProperty('dataSourceUri')) {
                obj['dataSourceUri'] = ApiClient.convertToType(data['dataSourceUri'], [AnalysisDataDataInnerInner]);
            }
            if (data.hasOwnProperty('instructions')) {
                obj['instructions'] = ApiClient.convertToType(data['instructions'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DataSource</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DataSource</code>.
     */
    static validateJSON(data) {
        if (data['dataSourceUri']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['dataSourceUri'])) {
                throw new Error("Expected the field `dataSourceUri` to be an array in the JSON data but got " + data['dataSourceUri']);
            }
            // validate the optional field `dataSourceUri` (array)
            for (const item of data['dataSourceUri']) {
                AnalysisDataDataInnerInner.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['instructions'])) {
            throw new Error("Expected the field `instructions` to be an array in the JSON data but got " + data['instructions']);
        }

        return true;
    }


}



/**
 * Datasource Uri Links
 * @member {Array.<module:model/AnalysisDataDataInnerInner>} dataSourceUri
 */
DataSource.prototype['dataSourceUri'] = undefined;

/**
 * Instructions if any for the data source
 * @member {Array.<String>} instructions
 */
DataSource.prototype['instructions'] = undefined;






export default DataSource;

