# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DiagnosticMetricSample(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, is_aggregated: bool=None, maximum: float=None, minimum: float=None, role_instance: str=None, timestamp: datetime=None, total: float=None):
        """DiagnosticMetricSample - a model defined in OpenAPI

        :param is_aggregated: The is_aggregated of this DiagnosticMetricSample.
        :param maximum: The maximum of this DiagnosticMetricSample.
        :param minimum: The minimum of this DiagnosticMetricSample.
        :param role_instance: The role_instance of this DiagnosticMetricSample.
        :param timestamp: The timestamp of this DiagnosticMetricSample.
        :param total: The total of this DiagnosticMetricSample.
        """
        self.openapi_types = {
            'is_aggregated': bool,
            'maximum': float,
            'minimum': float,
            'role_instance': str,
            'timestamp': datetime,
            'total': float
        }

        self.attribute_map = {
            'is_aggregated': 'isAggregated',
            'maximum': 'maximum',
            'minimum': 'minimum',
            'role_instance': 'roleInstance',
            'timestamp': 'timestamp',
            'total': 'total'
        }

        self._is_aggregated = is_aggregated
        self._maximum = maximum
        self._minimum = minimum
        self._role_instance = role_instance
        self._timestamp = timestamp
        self._total = total

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DiagnosticMetricSample':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DiagnosticMetricSample of this DiagnosticMetricSample.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def is_aggregated(self):
        """Gets the is_aggregated of this DiagnosticMetricSample.

        Whether the values are aggregates across all workers or not

        :return: The is_aggregated of this DiagnosticMetricSample.
        :rtype: bool
        """
        return self._is_aggregated

    @is_aggregated.setter
    def is_aggregated(self, is_aggregated):
        """Sets the is_aggregated of this DiagnosticMetricSample.

        Whether the values are aggregates across all workers or not

        :param is_aggregated: The is_aggregated of this DiagnosticMetricSample.
        :type is_aggregated: bool
        """

        self._is_aggregated = is_aggregated

    @property
    def maximum(self):
        """Gets the maximum of this DiagnosticMetricSample.

        Maximum of the metric sampled during the time period

        :return: The maximum of this DiagnosticMetricSample.
        :rtype: float
        """
        return self._maximum

    @maximum.setter
    def maximum(self, maximum):
        """Sets the maximum of this DiagnosticMetricSample.

        Maximum of the metric sampled during the time period

        :param maximum: The maximum of this DiagnosticMetricSample.
        :type maximum: float
        """

        self._maximum = maximum

    @property
    def minimum(self):
        """Gets the minimum of this DiagnosticMetricSample.

        Minimum of the metric sampled during the time period

        :return: The minimum of this DiagnosticMetricSample.
        :rtype: float
        """
        return self._minimum

    @minimum.setter
    def minimum(self, minimum):
        """Sets the minimum of this DiagnosticMetricSample.

        Minimum of the metric sampled during the time period

        :param minimum: The minimum of this DiagnosticMetricSample.
        :type minimum: float
        """

        self._minimum = minimum

    @property
    def role_instance(self):
        """Gets the role_instance of this DiagnosticMetricSample.

        Role Instance. Null if this counter is not per instance  This is returned and should be whichever instance name we desire to be returned i.e. CPU and Memory return RDWORKERNAME (LargeDed..._IN_0)  where RDWORKERNAME is Machine name below and RoleInstance name in parenthesis

        :return: The role_instance of this DiagnosticMetricSample.
        :rtype: str
        """
        return self._role_instance

    @role_instance.setter
    def role_instance(self, role_instance):
        """Sets the role_instance of this DiagnosticMetricSample.

        Role Instance. Null if this counter is not per instance  This is returned and should be whichever instance name we desire to be returned i.e. CPU and Memory return RDWORKERNAME (LargeDed..._IN_0)  where RDWORKERNAME is Machine name below and RoleInstance name in parenthesis

        :param role_instance: The role_instance of this DiagnosticMetricSample.
        :type role_instance: str
        """

        self._role_instance = role_instance

    @property
    def timestamp(self):
        """Gets the timestamp of this DiagnosticMetricSample.

        Time at which metric is measured

        :return: The timestamp of this DiagnosticMetricSample.
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this DiagnosticMetricSample.

        Time at which metric is measured

        :param timestamp: The timestamp of this DiagnosticMetricSample.
        :type timestamp: datetime
        """

        self._timestamp = timestamp

    @property
    def total(self):
        """Gets the total of this DiagnosticMetricSample.

        Total value of the metric. If multiple measurements are made this will have sum of all.

        :return: The total of this DiagnosticMetricSample.
        :rtype: float
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this DiagnosticMetricSample.

        Total value of the metric. If multiple measurements are made this will have sum of all.

        :param total: The total of this DiagnosticMetricSample.
        :type total: float
        """

        self._total = total
