/*
 * Diagnostics API Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-03-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DetectorResponse;
import org.openapitools.client.model.DetectorResponseCollection;
import org.openapitools.client.model.DiagnosticAnalysis;
import org.openapitools.client.model.DiagnosticAnalysisCollection;
import org.openapitools.client.model.DiagnosticCategory;
import org.openapitools.client.model.DiagnosticCategoryCollection;
import org.openapitools.client.model.DiagnosticDetectorCollection;
import org.openapitools.client.model.DiagnosticDetectorResponse;
import java.time.OffsetDateTime;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DiagnosticsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DiagnosticsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DiagnosticsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for diagnosticsExecuteSiteAnalysis
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param siteName Site Name (required)
     * @param diagnosticCategory Category Name (required)
     * @param analysisName Analysis Resource Name (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param startTime Start Time (optional)
     * @param endTime End Time (optional)
     * @param timeGrain Time Grain (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call diagnosticsExecuteSiteAnalysisCall(String resourceGroupName, String siteName, String diagnosticCategory, String analysisName, String subscriptionId, String apiVersion, OffsetDateTime startTime, OffsetDateTime endTime, String timeGrain, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/diagnostics/{diagnosticCategory}/analyses/{analysisName}/execute"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "siteName" + "}", localVarApiClient.escapeString(siteName.toString()))
            .replace("{" + "diagnosticCategory" + "}", localVarApiClient.escapeString(diagnosticCategory.toString()))
            .replace("{" + "analysisName" + "}", localVarApiClient.escapeString(analysisName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startTime", startTime));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endTime", endTime));
        }

        if (timeGrain != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeGrain", timeGrain));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call diagnosticsExecuteSiteAnalysisValidateBeforeCall(String resourceGroupName, String siteName, String diagnosticCategory, String analysisName, String subscriptionId, String apiVersion, OffsetDateTime startTime, OffsetDateTime endTime, String timeGrain, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling diagnosticsExecuteSiteAnalysis(Async)");
        }

        // verify the required parameter 'siteName' is set
        if (siteName == null) {
            throw new ApiException("Missing the required parameter 'siteName' when calling diagnosticsExecuteSiteAnalysis(Async)");
        }

        // verify the required parameter 'diagnosticCategory' is set
        if (diagnosticCategory == null) {
            throw new ApiException("Missing the required parameter 'diagnosticCategory' when calling diagnosticsExecuteSiteAnalysis(Async)");
        }

        // verify the required parameter 'analysisName' is set
        if (analysisName == null) {
            throw new ApiException("Missing the required parameter 'analysisName' when calling diagnosticsExecuteSiteAnalysis(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling diagnosticsExecuteSiteAnalysis(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling diagnosticsExecuteSiteAnalysis(Async)");
        }

        return diagnosticsExecuteSiteAnalysisCall(resourceGroupName, siteName, diagnosticCategory, analysisName, subscriptionId, apiVersion, startTime, endTime, timeGrain, _callback);

    }

    /**
     * Execute Analysis
     * Execute Analysis
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param siteName Site Name (required)
     * @param diagnosticCategory Category Name (required)
     * @param analysisName Analysis Resource Name (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param startTime Start Time (optional)
     * @param endTime End Time (optional)
     * @param timeGrain Time Grain (optional)
     * @return DiagnosticAnalysis
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public DiagnosticAnalysis diagnosticsExecuteSiteAnalysis(String resourceGroupName, String siteName, String diagnosticCategory, String analysisName, String subscriptionId, String apiVersion, OffsetDateTime startTime, OffsetDateTime endTime, String timeGrain) throws ApiException {
        ApiResponse<DiagnosticAnalysis> localVarResp = diagnosticsExecuteSiteAnalysisWithHttpInfo(resourceGroupName, siteName, diagnosticCategory, analysisName, subscriptionId, apiVersion, startTime, endTime, timeGrain);
        return localVarResp.getData();
    }

    /**
     * Execute Analysis
     * Execute Analysis
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param siteName Site Name (required)
     * @param diagnosticCategory Category Name (required)
     * @param analysisName Analysis Resource Name (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param startTime Start Time (optional)
     * @param endTime End Time (optional)
     * @param timeGrain Time Grain (optional)
     * @return ApiResponse&lt;DiagnosticAnalysis&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DiagnosticAnalysis> diagnosticsExecuteSiteAnalysisWithHttpInfo(String resourceGroupName, String siteName, String diagnosticCategory, String analysisName, String subscriptionId, String apiVersion, OffsetDateTime startTime, OffsetDateTime endTime, String timeGrain) throws ApiException {
        okhttp3.Call localVarCall = diagnosticsExecuteSiteAnalysisValidateBeforeCall(resourceGroupName, siteName, diagnosticCategory, analysisName, subscriptionId, apiVersion, startTime, endTime, timeGrain, null);
        Type localVarReturnType = new TypeToken<DiagnosticAnalysis>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Execute Analysis (asynchronously)
     * Execute Analysis
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param siteName Site Name (required)
     * @param diagnosticCategory Category Name (required)
     * @param analysisName Analysis Resource Name (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param startTime Start Time (optional)
     * @param endTime End Time (optional)
     * @param timeGrain Time Grain (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call diagnosticsExecuteSiteAnalysisAsync(String resourceGroupName, String siteName, String diagnosticCategory, String analysisName, String subscriptionId, String apiVersion, OffsetDateTime startTime, OffsetDateTime endTime, String timeGrain, final ApiCallback<DiagnosticAnalysis> _callback) throws ApiException {

        okhttp3.Call localVarCall = diagnosticsExecuteSiteAnalysisValidateBeforeCall(resourceGroupName, siteName, diagnosticCategory, analysisName, subscriptionId, apiVersion, startTime, endTime, timeGrain, _callback);
        Type localVarReturnType = new TypeToken<DiagnosticAnalysis>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for diagnosticsExecuteSiteAnalysisSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param siteName Site Name (required)
     * @param diagnosticCategory Category Name (required)
     * @param analysisName Analysis Resource Name (required)
     * @param slot Slot Name (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param startTime Start Time (optional)
     * @param endTime End Time (optional)
     * @param timeGrain Time Grain (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call diagnosticsExecuteSiteAnalysisSlotCall(String resourceGroupName, String siteName, String diagnosticCategory, String analysisName, String slot, String subscriptionId, String apiVersion, OffsetDateTime startTime, OffsetDateTime endTime, String timeGrain, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slot}/diagnostics/{diagnosticCategory}/analyses/{analysisName}/execute"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "siteName" + "}", localVarApiClient.escapeString(siteName.toString()))
            .replace("{" + "diagnosticCategory" + "}", localVarApiClient.escapeString(diagnosticCategory.toString()))
            .replace("{" + "analysisName" + "}", localVarApiClient.escapeString(analysisName.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startTime", startTime));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endTime", endTime));
        }

        if (timeGrain != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeGrain", timeGrain));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call diagnosticsExecuteSiteAnalysisSlotValidateBeforeCall(String resourceGroupName, String siteName, String diagnosticCategory, String analysisName, String slot, String subscriptionId, String apiVersion, OffsetDateTime startTime, OffsetDateTime endTime, String timeGrain, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling diagnosticsExecuteSiteAnalysisSlot(Async)");
        }

        // verify the required parameter 'siteName' is set
        if (siteName == null) {
            throw new ApiException("Missing the required parameter 'siteName' when calling diagnosticsExecuteSiteAnalysisSlot(Async)");
        }

        // verify the required parameter 'diagnosticCategory' is set
        if (diagnosticCategory == null) {
            throw new ApiException("Missing the required parameter 'diagnosticCategory' when calling diagnosticsExecuteSiteAnalysisSlot(Async)");
        }

        // verify the required parameter 'analysisName' is set
        if (analysisName == null) {
            throw new ApiException("Missing the required parameter 'analysisName' when calling diagnosticsExecuteSiteAnalysisSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling diagnosticsExecuteSiteAnalysisSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling diagnosticsExecuteSiteAnalysisSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling diagnosticsExecuteSiteAnalysisSlot(Async)");
        }

        return diagnosticsExecuteSiteAnalysisSlotCall(resourceGroupName, siteName, diagnosticCategory, analysisName, slot, subscriptionId, apiVersion, startTime, endTime, timeGrain, _callback);

    }

    /**
     * Execute Analysis
     * Execute Analysis
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param siteName Site Name (required)
     * @param diagnosticCategory Category Name (required)
     * @param analysisName Analysis Resource Name (required)
     * @param slot Slot Name (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param startTime Start Time (optional)
     * @param endTime End Time (optional)
     * @param timeGrain Time Grain (optional)
     * @return DiagnosticAnalysis
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public DiagnosticAnalysis diagnosticsExecuteSiteAnalysisSlot(String resourceGroupName, String siteName, String diagnosticCategory, String analysisName, String slot, String subscriptionId, String apiVersion, OffsetDateTime startTime, OffsetDateTime endTime, String timeGrain) throws ApiException {
        ApiResponse<DiagnosticAnalysis> localVarResp = diagnosticsExecuteSiteAnalysisSlotWithHttpInfo(resourceGroupName, siteName, diagnosticCategory, analysisName, slot, subscriptionId, apiVersion, startTime, endTime, timeGrain);
        return localVarResp.getData();
    }

    /**
     * Execute Analysis
     * Execute Analysis
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param siteName Site Name (required)
     * @param diagnosticCategory Category Name (required)
     * @param analysisName Analysis Resource Name (required)
     * @param slot Slot Name (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param startTime Start Time (optional)
     * @param endTime End Time (optional)
     * @param timeGrain Time Grain (optional)
     * @return ApiResponse&lt;DiagnosticAnalysis&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DiagnosticAnalysis> diagnosticsExecuteSiteAnalysisSlotWithHttpInfo(String resourceGroupName, String siteName, String diagnosticCategory, String analysisName, String slot, String subscriptionId, String apiVersion, OffsetDateTime startTime, OffsetDateTime endTime, String timeGrain) throws ApiException {
        okhttp3.Call localVarCall = diagnosticsExecuteSiteAnalysisSlotValidateBeforeCall(resourceGroupName, siteName, diagnosticCategory, analysisName, slot, subscriptionId, apiVersion, startTime, endTime, timeGrain, null);
        Type localVarReturnType = new TypeToken<DiagnosticAnalysis>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Execute Analysis (asynchronously)
     * Execute Analysis
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param siteName Site Name (required)
     * @param diagnosticCategory Category Name (required)
     * @param analysisName Analysis Resource Name (required)
     * @param slot Slot Name (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param startTime Start Time (optional)
     * @param endTime End Time (optional)
     * @param timeGrain Time Grain (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call diagnosticsExecuteSiteAnalysisSlotAsync(String resourceGroupName, String siteName, String diagnosticCategory, String analysisName, String slot, String subscriptionId, String apiVersion, OffsetDateTime startTime, OffsetDateTime endTime, String timeGrain, final ApiCallback<DiagnosticAnalysis> _callback) throws ApiException {

        okhttp3.Call localVarCall = diagnosticsExecuteSiteAnalysisSlotValidateBeforeCall(resourceGroupName, siteName, diagnosticCategory, analysisName, slot, subscriptionId, apiVersion, startTime, endTime, timeGrain, _callback);
        Type localVarReturnType = new TypeToken<DiagnosticAnalysis>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for diagnosticsExecuteSiteDetector
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param siteName Site Name (required)
     * @param detectorName Detector Resource Name (required)
     * @param diagnosticCategory Category Name (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param startTime Start Time (optional)
     * @param endTime End Time (optional)
     * @param timeGrain Time Grain (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call diagnosticsExecuteSiteDetectorCall(String resourceGroupName, String siteName, String detectorName, String diagnosticCategory, String subscriptionId, String apiVersion, OffsetDateTime startTime, OffsetDateTime endTime, String timeGrain, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/diagnostics/{diagnosticCategory}/detectors/{detectorName}/execute"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "siteName" + "}", localVarApiClient.escapeString(siteName.toString()))
            .replace("{" + "detectorName" + "}", localVarApiClient.escapeString(detectorName.toString()))
            .replace("{" + "diagnosticCategory" + "}", localVarApiClient.escapeString(diagnosticCategory.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startTime", startTime));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endTime", endTime));
        }

        if (timeGrain != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeGrain", timeGrain));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call diagnosticsExecuteSiteDetectorValidateBeforeCall(String resourceGroupName, String siteName, String detectorName, String diagnosticCategory, String subscriptionId, String apiVersion, OffsetDateTime startTime, OffsetDateTime endTime, String timeGrain, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling diagnosticsExecuteSiteDetector(Async)");
        }

        // verify the required parameter 'siteName' is set
        if (siteName == null) {
            throw new ApiException("Missing the required parameter 'siteName' when calling diagnosticsExecuteSiteDetector(Async)");
        }

        // verify the required parameter 'detectorName' is set
        if (detectorName == null) {
            throw new ApiException("Missing the required parameter 'detectorName' when calling diagnosticsExecuteSiteDetector(Async)");
        }

        // verify the required parameter 'diagnosticCategory' is set
        if (diagnosticCategory == null) {
            throw new ApiException("Missing the required parameter 'diagnosticCategory' when calling diagnosticsExecuteSiteDetector(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling diagnosticsExecuteSiteDetector(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling diagnosticsExecuteSiteDetector(Async)");
        }

        return diagnosticsExecuteSiteDetectorCall(resourceGroupName, siteName, detectorName, diagnosticCategory, subscriptionId, apiVersion, startTime, endTime, timeGrain, _callback);

    }

    /**
     * Execute Detector
     * Execute Detector
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param siteName Site Name (required)
     * @param detectorName Detector Resource Name (required)
     * @param diagnosticCategory Category Name (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param startTime Start Time (optional)
     * @param endTime End Time (optional)
     * @param timeGrain Time Grain (optional)
     * @return DiagnosticDetectorResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public DiagnosticDetectorResponse diagnosticsExecuteSiteDetector(String resourceGroupName, String siteName, String detectorName, String diagnosticCategory, String subscriptionId, String apiVersion, OffsetDateTime startTime, OffsetDateTime endTime, String timeGrain) throws ApiException {
        ApiResponse<DiagnosticDetectorResponse> localVarResp = diagnosticsExecuteSiteDetectorWithHttpInfo(resourceGroupName, siteName, detectorName, diagnosticCategory, subscriptionId, apiVersion, startTime, endTime, timeGrain);
        return localVarResp.getData();
    }

    /**
     * Execute Detector
     * Execute Detector
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param siteName Site Name (required)
     * @param detectorName Detector Resource Name (required)
     * @param diagnosticCategory Category Name (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param startTime Start Time (optional)
     * @param endTime End Time (optional)
     * @param timeGrain Time Grain (optional)
     * @return ApiResponse&lt;DiagnosticDetectorResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DiagnosticDetectorResponse> diagnosticsExecuteSiteDetectorWithHttpInfo(String resourceGroupName, String siteName, String detectorName, String diagnosticCategory, String subscriptionId, String apiVersion, OffsetDateTime startTime, OffsetDateTime endTime, String timeGrain) throws ApiException {
        okhttp3.Call localVarCall = diagnosticsExecuteSiteDetectorValidateBeforeCall(resourceGroupName, siteName, detectorName, diagnosticCategory, subscriptionId, apiVersion, startTime, endTime, timeGrain, null);
        Type localVarReturnType = new TypeToken<DiagnosticDetectorResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Execute Detector (asynchronously)
     * Execute Detector
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param siteName Site Name (required)
     * @param detectorName Detector Resource Name (required)
     * @param diagnosticCategory Category Name (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param startTime Start Time (optional)
     * @param endTime End Time (optional)
     * @param timeGrain Time Grain (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call diagnosticsExecuteSiteDetectorAsync(String resourceGroupName, String siteName, String detectorName, String diagnosticCategory, String subscriptionId, String apiVersion, OffsetDateTime startTime, OffsetDateTime endTime, String timeGrain, final ApiCallback<DiagnosticDetectorResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = diagnosticsExecuteSiteDetectorValidateBeforeCall(resourceGroupName, siteName, detectorName, diagnosticCategory, subscriptionId, apiVersion, startTime, endTime, timeGrain, _callback);
        Type localVarReturnType = new TypeToken<DiagnosticDetectorResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for diagnosticsExecuteSiteDetectorSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param siteName Site Name (required)
     * @param detectorName Detector Resource Name (required)
     * @param diagnosticCategory Category Name (required)
     * @param slot Slot Name (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param startTime Start Time (optional)
     * @param endTime End Time (optional)
     * @param timeGrain Time Grain (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call diagnosticsExecuteSiteDetectorSlotCall(String resourceGroupName, String siteName, String detectorName, String diagnosticCategory, String slot, String subscriptionId, String apiVersion, OffsetDateTime startTime, OffsetDateTime endTime, String timeGrain, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slot}/diagnostics/{diagnosticCategory}/detectors/{detectorName}/execute"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "siteName" + "}", localVarApiClient.escapeString(siteName.toString()))
            .replace("{" + "detectorName" + "}", localVarApiClient.escapeString(detectorName.toString()))
            .replace("{" + "diagnosticCategory" + "}", localVarApiClient.escapeString(diagnosticCategory.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startTime", startTime));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endTime", endTime));
        }

        if (timeGrain != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeGrain", timeGrain));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call diagnosticsExecuteSiteDetectorSlotValidateBeforeCall(String resourceGroupName, String siteName, String detectorName, String diagnosticCategory, String slot, String subscriptionId, String apiVersion, OffsetDateTime startTime, OffsetDateTime endTime, String timeGrain, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling diagnosticsExecuteSiteDetectorSlot(Async)");
        }

        // verify the required parameter 'siteName' is set
        if (siteName == null) {
            throw new ApiException("Missing the required parameter 'siteName' when calling diagnosticsExecuteSiteDetectorSlot(Async)");
        }

        // verify the required parameter 'detectorName' is set
        if (detectorName == null) {
            throw new ApiException("Missing the required parameter 'detectorName' when calling diagnosticsExecuteSiteDetectorSlot(Async)");
        }

        // verify the required parameter 'diagnosticCategory' is set
        if (diagnosticCategory == null) {
            throw new ApiException("Missing the required parameter 'diagnosticCategory' when calling diagnosticsExecuteSiteDetectorSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling diagnosticsExecuteSiteDetectorSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling diagnosticsExecuteSiteDetectorSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling diagnosticsExecuteSiteDetectorSlot(Async)");
        }

        return diagnosticsExecuteSiteDetectorSlotCall(resourceGroupName, siteName, detectorName, diagnosticCategory, slot, subscriptionId, apiVersion, startTime, endTime, timeGrain, _callback);

    }

    /**
     * Execute Detector
     * Execute Detector
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param siteName Site Name (required)
     * @param detectorName Detector Resource Name (required)
     * @param diagnosticCategory Category Name (required)
     * @param slot Slot Name (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param startTime Start Time (optional)
     * @param endTime End Time (optional)
     * @param timeGrain Time Grain (optional)
     * @return DiagnosticDetectorResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public DiagnosticDetectorResponse diagnosticsExecuteSiteDetectorSlot(String resourceGroupName, String siteName, String detectorName, String diagnosticCategory, String slot, String subscriptionId, String apiVersion, OffsetDateTime startTime, OffsetDateTime endTime, String timeGrain) throws ApiException {
        ApiResponse<DiagnosticDetectorResponse> localVarResp = diagnosticsExecuteSiteDetectorSlotWithHttpInfo(resourceGroupName, siteName, detectorName, diagnosticCategory, slot, subscriptionId, apiVersion, startTime, endTime, timeGrain);
        return localVarResp.getData();
    }

    /**
     * Execute Detector
     * Execute Detector
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param siteName Site Name (required)
     * @param detectorName Detector Resource Name (required)
     * @param diagnosticCategory Category Name (required)
     * @param slot Slot Name (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param startTime Start Time (optional)
     * @param endTime End Time (optional)
     * @param timeGrain Time Grain (optional)
     * @return ApiResponse&lt;DiagnosticDetectorResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DiagnosticDetectorResponse> diagnosticsExecuteSiteDetectorSlotWithHttpInfo(String resourceGroupName, String siteName, String detectorName, String diagnosticCategory, String slot, String subscriptionId, String apiVersion, OffsetDateTime startTime, OffsetDateTime endTime, String timeGrain) throws ApiException {
        okhttp3.Call localVarCall = diagnosticsExecuteSiteDetectorSlotValidateBeforeCall(resourceGroupName, siteName, detectorName, diagnosticCategory, slot, subscriptionId, apiVersion, startTime, endTime, timeGrain, null);
        Type localVarReturnType = new TypeToken<DiagnosticDetectorResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Execute Detector (asynchronously)
     * Execute Detector
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param siteName Site Name (required)
     * @param detectorName Detector Resource Name (required)
     * @param diagnosticCategory Category Name (required)
     * @param slot Slot Name (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param startTime Start Time (optional)
     * @param endTime End Time (optional)
     * @param timeGrain Time Grain (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call diagnosticsExecuteSiteDetectorSlotAsync(String resourceGroupName, String siteName, String detectorName, String diagnosticCategory, String slot, String subscriptionId, String apiVersion, OffsetDateTime startTime, OffsetDateTime endTime, String timeGrain, final ApiCallback<DiagnosticDetectorResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = diagnosticsExecuteSiteDetectorSlotValidateBeforeCall(resourceGroupName, siteName, detectorName, diagnosticCategory, slot, subscriptionId, apiVersion, startTime, endTime, timeGrain, _callback);
        Type localVarReturnType = new TypeToken<DiagnosticDetectorResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for diagnosticsGetHostingEnvironmentDetectorResponse
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name App Service Environment Name (required)
     * @param detectorName Detector Resource Name (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param startTime Start Time (optional)
     * @param endTime End Time (optional)
     * @param timeGrain Time Grain (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call diagnosticsGetHostingEnvironmentDetectorResponseCall(String resourceGroupName, String name, String detectorName, String subscriptionId, String apiVersion, OffsetDateTime startTime, OffsetDateTime endTime, String timeGrain, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/detectors/{detectorName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "detectorName" + "}", localVarApiClient.escapeString(detectorName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startTime", startTime));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endTime", endTime));
        }

        if (timeGrain != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeGrain", timeGrain));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call diagnosticsGetHostingEnvironmentDetectorResponseValidateBeforeCall(String resourceGroupName, String name, String detectorName, String subscriptionId, String apiVersion, OffsetDateTime startTime, OffsetDateTime endTime, String timeGrain, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling diagnosticsGetHostingEnvironmentDetectorResponse(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling diagnosticsGetHostingEnvironmentDetectorResponse(Async)");
        }

        // verify the required parameter 'detectorName' is set
        if (detectorName == null) {
            throw new ApiException("Missing the required parameter 'detectorName' when calling diagnosticsGetHostingEnvironmentDetectorResponse(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling diagnosticsGetHostingEnvironmentDetectorResponse(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling diagnosticsGetHostingEnvironmentDetectorResponse(Async)");
        }

        return diagnosticsGetHostingEnvironmentDetectorResponseCall(resourceGroupName, name, detectorName, subscriptionId, apiVersion, startTime, endTime, timeGrain, _callback);

    }

    /**
     * Get Hosting Environment Detector Response
     * Get Hosting Environment Detector Response
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name App Service Environment Name (required)
     * @param detectorName Detector Resource Name (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param startTime Start Time (optional)
     * @param endTime End Time (optional)
     * @param timeGrain Time Grain (optional)
     * @return DetectorResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public DetectorResponse diagnosticsGetHostingEnvironmentDetectorResponse(String resourceGroupName, String name, String detectorName, String subscriptionId, String apiVersion, OffsetDateTime startTime, OffsetDateTime endTime, String timeGrain) throws ApiException {
        ApiResponse<DetectorResponse> localVarResp = diagnosticsGetHostingEnvironmentDetectorResponseWithHttpInfo(resourceGroupName, name, detectorName, subscriptionId, apiVersion, startTime, endTime, timeGrain);
        return localVarResp.getData();
    }

    /**
     * Get Hosting Environment Detector Response
     * Get Hosting Environment Detector Response
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name App Service Environment Name (required)
     * @param detectorName Detector Resource Name (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param startTime Start Time (optional)
     * @param endTime End Time (optional)
     * @param timeGrain Time Grain (optional)
     * @return ApiResponse&lt;DetectorResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DetectorResponse> diagnosticsGetHostingEnvironmentDetectorResponseWithHttpInfo(String resourceGroupName, String name, String detectorName, String subscriptionId, String apiVersion, OffsetDateTime startTime, OffsetDateTime endTime, String timeGrain) throws ApiException {
        okhttp3.Call localVarCall = diagnosticsGetHostingEnvironmentDetectorResponseValidateBeforeCall(resourceGroupName, name, detectorName, subscriptionId, apiVersion, startTime, endTime, timeGrain, null);
        Type localVarReturnType = new TypeToken<DetectorResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Hosting Environment Detector Response (asynchronously)
     * Get Hosting Environment Detector Response
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name App Service Environment Name (required)
     * @param detectorName Detector Resource Name (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param startTime Start Time (optional)
     * @param endTime End Time (optional)
     * @param timeGrain Time Grain (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call diagnosticsGetHostingEnvironmentDetectorResponseAsync(String resourceGroupName, String name, String detectorName, String subscriptionId, String apiVersion, OffsetDateTime startTime, OffsetDateTime endTime, String timeGrain, final ApiCallback<DetectorResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = diagnosticsGetHostingEnvironmentDetectorResponseValidateBeforeCall(resourceGroupName, name, detectorName, subscriptionId, apiVersion, startTime, endTime, timeGrain, _callback);
        Type localVarReturnType = new TypeToken<DetectorResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for diagnosticsGetSiteAnalysis
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param siteName Site Name (required)
     * @param diagnosticCategory Diagnostic Category (required)
     * @param analysisName Analysis Name (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call diagnosticsGetSiteAnalysisCall(String resourceGroupName, String siteName, String diagnosticCategory, String analysisName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/diagnostics/{diagnosticCategory}/analyses/{analysisName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "siteName" + "}", localVarApiClient.escapeString(siteName.toString()))
            .replace("{" + "diagnosticCategory" + "}", localVarApiClient.escapeString(diagnosticCategory.toString()))
            .replace("{" + "analysisName" + "}", localVarApiClient.escapeString(analysisName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call diagnosticsGetSiteAnalysisValidateBeforeCall(String resourceGroupName, String siteName, String diagnosticCategory, String analysisName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling diagnosticsGetSiteAnalysis(Async)");
        }

        // verify the required parameter 'siteName' is set
        if (siteName == null) {
            throw new ApiException("Missing the required parameter 'siteName' when calling diagnosticsGetSiteAnalysis(Async)");
        }

        // verify the required parameter 'diagnosticCategory' is set
        if (diagnosticCategory == null) {
            throw new ApiException("Missing the required parameter 'diagnosticCategory' when calling diagnosticsGetSiteAnalysis(Async)");
        }

        // verify the required parameter 'analysisName' is set
        if (analysisName == null) {
            throw new ApiException("Missing the required parameter 'analysisName' when calling diagnosticsGetSiteAnalysis(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling diagnosticsGetSiteAnalysis(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling diagnosticsGetSiteAnalysis(Async)");
        }

        return diagnosticsGetSiteAnalysisCall(resourceGroupName, siteName, diagnosticCategory, analysisName, subscriptionId, apiVersion, _callback);

    }

    /**
     * Get Site Analysis
     * Get Site Analysis
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param siteName Site Name (required)
     * @param diagnosticCategory Diagnostic Category (required)
     * @param analysisName Analysis Name (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return DiagnosticAnalysis
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public DiagnosticAnalysis diagnosticsGetSiteAnalysis(String resourceGroupName, String siteName, String diagnosticCategory, String analysisName, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<DiagnosticAnalysis> localVarResp = diagnosticsGetSiteAnalysisWithHttpInfo(resourceGroupName, siteName, diagnosticCategory, analysisName, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get Site Analysis
     * Get Site Analysis
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param siteName Site Name (required)
     * @param diagnosticCategory Diagnostic Category (required)
     * @param analysisName Analysis Name (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;DiagnosticAnalysis&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DiagnosticAnalysis> diagnosticsGetSiteAnalysisWithHttpInfo(String resourceGroupName, String siteName, String diagnosticCategory, String analysisName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = diagnosticsGetSiteAnalysisValidateBeforeCall(resourceGroupName, siteName, diagnosticCategory, analysisName, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<DiagnosticAnalysis>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Site Analysis (asynchronously)
     * Get Site Analysis
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param siteName Site Name (required)
     * @param diagnosticCategory Diagnostic Category (required)
     * @param analysisName Analysis Name (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call diagnosticsGetSiteAnalysisAsync(String resourceGroupName, String siteName, String diagnosticCategory, String analysisName, String subscriptionId, String apiVersion, final ApiCallback<DiagnosticAnalysis> _callback) throws ApiException {

        okhttp3.Call localVarCall = diagnosticsGetSiteAnalysisValidateBeforeCall(resourceGroupName, siteName, diagnosticCategory, analysisName, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<DiagnosticAnalysis>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for diagnosticsGetSiteAnalysisSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param siteName Site Name (required)
     * @param diagnosticCategory Diagnostic Category (required)
     * @param analysisName Analysis Name (required)
     * @param slot Slot - optional (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call diagnosticsGetSiteAnalysisSlotCall(String resourceGroupName, String siteName, String diagnosticCategory, String analysisName, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slot}/diagnostics/{diagnosticCategory}/analyses/{analysisName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "siteName" + "}", localVarApiClient.escapeString(siteName.toString()))
            .replace("{" + "diagnosticCategory" + "}", localVarApiClient.escapeString(diagnosticCategory.toString()))
            .replace("{" + "analysisName" + "}", localVarApiClient.escapeString(analysisName.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call diagnosticsGetSiteAnalysisSlotValidateBeforeCall(String resourceGroupName, String siteName, String diagnosticCategory, String analysisName, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling diagnosticsGetSiteAnalysisSlot(Async)");
        }

        // verify the required parameter 'siteName' is set
        if (siteName == null) {
            throw new ApiException("Missing the required parameter 'siteName' when calling diagnosticsGetSiteAnalysisSlot(Async)");
        }

        // verify the required parameter 'diagnosticCategory' is set
        if (diagnosticCategory == null) {
            throw new ApiException("Missing the required parameter 'diagnosticCategory' when calling diagnosticsGetSiteAnalysisSlot(Async)");
        }

        // verify the required parameter 'analysisName' is set
        if (analysisName == null) {
            throw new ApiException("Missing the required parameter 'analysisName' when calling diagnosticsGetSiteAnalysisSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling diagnosticsGetSiteAnalysisSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling diagnosticsGetSiteAnalysisSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling diagnosticsGetSiteAnalysisSlot(Async)");
        }

        return diagnosticsGetSiteAnalysisSlotCall(resourceGroupName, siteName, diagnosticCategory, analysisName, slot, subscriptionId, apiVersion, _callback);

    }

    /**
     * Get Site Analysis
     * Get Site Analysis
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param siteName Site Name (required)
     * @param diagnosticCategory Diagnostic Category (required)
     * @param analysisName Analysis Name (required)
     * @param slot Slot - optional (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return DiagnosticAnalysis
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public DiagnosticAnalysis diagnosticsGetSiteAnalysisSlot(String resourceGroupName, String siteName, String diagnosticCategory, String analysisName, String slot, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<DiagnosticAnalysis> localVarResp = diagnosticsGetSiteAnalysisSlotWithHttpInfo(resourceGroupName, siteName, diagnosticCategory, analysisName, slot, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get Site Analysis
     * Get Site Analysis
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param siteName Site Name (required)
     * @param diagnosticCategory Diagnostic Category (required)
     * @param analysisName Analysis Name (required)
     * @param slot Slot - optional (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;DiagnosticAnalysis&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DiagnosticAnalysis> diagnosticsGetSiteAnalysisSlotWithHttpInfo(String resourceGroupName, String siteName, String diagnosticCategory, String analysisName, String slot, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = diagnosticsGetSiteAnalysisSlotValidateBeforeCall(resourceGroupName, siteName, diagnosticCategory, analysisName, slot, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<DiagnosticAnalysis>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Site Analysis (asynchronously)
     * Get Site Analysis
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param siteName Site Name (required)
     * @param diagnosticCategory Diagnostic Category (required)
     * @param analysisName Analysis Name (required)
     * @param slot Slot - optional (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call diagnosticsGetSiteAnalysisSlotAsync(String resourceGroupName, String siteName, String diagnosticCategory, String analysisName, String slot, String subscriptionId, String apiVersion, final ApiCallback<DiagnosticAnalysis> _callback) throws ApiException {

        okhttp3.Call localVarCall = diagnosticsGetSiteAnalysisSlotValidateBeforeCall(resourceGroupName, siteName, diagnosticCategory, analysisName, slot, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<DiagnosticAnalysis>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for diagnosticsGetSiteDetector
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param siteName Site Name (required)
     * @param diagnosticCategory Diagnostic Category (required)
     * @param detectorName Detector Name (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call diagnosticsGetSiteDetectorCall(String resourceGroupName, String siteName, String diagnosticCategory, String detectorName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/diagnostics/{diagnosticCategory}/detectors/{detectorName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "siteName" + "}", localVarApiClient.escapeString(siteName.toString()))
            .replace("{" + "diagnosticCategory" + "}", localVarApiClient.escapeString(diagnosticCategory.toString()))
            .replace("{" + "detectorName" + "}", localVarApiClient.escapeString(detectorName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call diagnosticsGetSiteDetectorValidateBeforeCall(String resourceGroupName, String siteName, String diagnosticCategory, String detectorName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling diagnosticsGetSiteDetector(Async)");
        }

        // verify the required parameter 'siteName' is set
        if (siteName == null) {
            throw new ApiException("Missing the required parameter 'siteName' when calling diagnosticsGetSiteDetector(Async)");
        }

        // verify the required parameter 'diagnosticCategory' is set
        if (diagnosticCategory == null) {
            throw new ApiException("Missing the required parameter 'diagnosticCategory' when calling diagnosticsGetSiteDetector(Async)");
        }

        // verify the required parameter 'detectorName' is set
        if (detectorName == null) {
            throw new ApiException("Missing the required parameter 'detectorName' when calling diagnosticsGetSiteDetector(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling diagnosticsGetSiteDetector(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling diagnosticsGetSiteDetector(Async)");
        }

        return diagnosticsGetSiteDetectorCall(resourceGroupName, siteName, diagnosticCategory, detectorName, subscriptionId, apiVersion, _callback);

    }

    /**
     * Get Detector
     * Get Detector
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param siteName Site Name (required)
     * @param diagnosticCategory Diagnostic Category (required)
     * @param detectorName Detector Name (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return DiagnosticDetectorCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public DiagnosticDetectorCollection diagnosticsGetSiteDetector(String resourceGroupName, String siteName, String diagnosticCategory, String detectorName, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<DiagnosticDetectorCollection> localVarResp = diagnosticsGetSiteDetectorWithHttpInfo(resourceGroupName, siteName, diagnosticCategory, detectorName, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get Detector
     * Get Detector
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param siteName Site Name (required)
     * @param diagnosticCategory Diagnostic Category (required)
     * @param detectorName Detector Name (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;DiagnosticDetectorCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DiagnosticDetectorCollection> diagnosticsGetSiteDetectorWithHttpInfo(String resourceGroupName, String siteName, String diagnosticCategory, String detectorName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = diagnosticsGetSiteDetectorValidateBeforeCall(resourceGroupName, siteName, diagnosticCategory, detectorName, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<DiagnosticDetectorCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Detector (asynchronously)
     * Get Detector
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param siteName Site Name (required)
     * @param diagnosticCategory Diagnostic Category (required)
     * @param detectorName Detector Name (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call diagnosticsGetSiteDetectorAsync(String resourceGroupName, String siteName, String diagnosticCategory, String detectorName, String subscriptionId, String apiVersion, final ApiCallback<DiagnosticDetectorCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = diagnosticsGetSiteDetectorValidateBeforeCall(resourceGroupName, siteName, diagnosticCategory, detectorName, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<DiagnosticDetectorCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for diagnosticsGetSiteDetectorResponse
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param siteName Site Name (required)
     * @param detectorName Detector Resource Name (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param startTime Start Time (optional)
     * @param endTime End Time (optional)
     * @param timeGrain Time Grain (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call diagnosticsGetSiteDetectorResponseCall(String resourceGroupName, String siteName, String detectorName, String subscriptionId, String apiVersion, OffsetDateTime startTime, OffsetDateTime endTime, String timeGrain, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/detectors/{detectorName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "siteName" + "}", localVarApiClient.escapeString(siteName.toString()))
            .replace("{" + "detectorName" + "}", localVarApiClient.escapeString(detectorName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startTime", startTime));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endTime", endTime));
        }

        if (timeGrain != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeGrain", timeGrain));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call diagnosticsGetSiteDetectorResponseValidateBeforeCall(String resourceGroupName, String siteName, String detectorName, String subscriptionId, String apiVersion, OffsetDateTime startTime, OffsetDateTime endTime, String timeGrain, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling diagnosticsGetSiteDetectorResponse(Async)");
        }

        // verify the required parameter 'siteName' is set
        if (siteName == null) {
            throw new ApiException("Missing the required parameter 'siteName' when calling diagnosticsGetSiteDetectorResponse(Async)");
        }

        // verify the required parameter 'detectorName' is set
        if (detectorName == null) {
            throw new ApiException("Missing the required parameter 'detectorName' when calling diagnosticsGetSiteDetectorResponse(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling diagnosticsGetSiteDetectorResponse(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling diagnosticsGetSiteDetectorResponse(Async)");
        }

        return diagnosticsGetSiteDetectorResponseCall(resourceGroupName, siteName, detectorName, subscriptionId, apiVersion, startTime, endTime, timeGrain, _callback);

    }

    /**
     * Get site detector response
     * Get site detector response
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param siteName Site Name (required)
     * @param detectorName Detector Resource Name (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param startTime Start Time (optional)
     * @param endTime End Time (optional)
     * @param timeGrain Time Grain (optional)
     * @return DetectorResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public DetectorResponse diagnosticsGetSiteDetectorResponse(String resourceGroupName, String siteName, String detectorName, String subscriptionId, String apiVersion, OffsetDateTime startTime, OffsetDateTime endTime, String timeGrain) throws ApiException {
        ApiResponse<DetectorResponse> localVarResp = diagnosticsGetSiteDetectorResponseWithHttpInfo(resourceGroupName, siteName, detectorName, subscriptionId, apiVersion, startTime, endTime, timeGrain);
        return localVarResp.getData();
    }

    /**
     * Get site detector response
     * Get site detector response
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param siteName Site Name (required)
     * @param detectorName Detector Resource Name (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param startTime Start Time (optional)
     * @param endTime End Time (optional)
     * @param timeGrain Time Grain (optional)
     * @return ApiResponse&lt;DetectorResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DetectorResponse> diagnosticsGetSiteDetectorResponseWithHttpInfo(String resourceGroupName, String siteName, String detectorName, String subscriptionId, String apiVersion, OffsetDateTime startTime, OffsetDateTime endTime, String timeGrain) throws ApiException {
        okhttp3.Call localVarCall = diagnosticsGetSiteDetectorResponseValidateBeforeCall(resourceGroupName, siteName, detectorName, subscriptionId, apiVersion, startTime, endTime, timeGrain, null);
        Type localVarReturnType = new TypeToken<DetectorResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get site detector response (asynchronously)
     * Get site detector response
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param siteName Site Name (required)
     * @param detectorName Detector Resource Name (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param startTime Start Time (optional)
     * @param endTime End Time (optional)
     * @param timeGrain Time Grain (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call diagnosticsGetSiteDetectorResponseAsync(String resourceGroupName, String siteName, String detectorName, String subscriptionId, String apiVersion, OffsetDateTime startTime, OffsetDateTime endTime, String timeGrain, final ApiCallback<DetectorResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = diagnosticsGetSiteDetectorResponseValidateBeforeCall(resourceGroupName, siteName, detectorName, subscriptionId, apiVersion, startTime, endTime, timeGrain, _callback);
        Type localVarReturnType = new TypeToken<DetectorResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for diagnosticsGetSiteDetectorResponseSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param siteName Site Name (required)
     * @param detectorName Detector Resource Name (required)
     * @param slot Slot Name (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param startTime Start Time (optional)
     * @param endTime End Time (optional)
     * @param timeGrain Time Grain (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call diagnosticsGetSiteDetectorResponseSlotCall(String resourceGroupName, String siteName, String detectorName, String slot, String subscriptionId, String apiVersion, OffsetDateTime startTime, OffsetDateTime endTime, String timeGrain, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slot}/detectors/{detectorName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "siteName" + "}", localVarApiClient.escapeString(siteName.toString()))
            .replace("{" + "detectorName" + "}", localVarApiClient.escapeString(detectorName.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startTime", startTime));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endTime", endTime));
        }

        if (timeGrain != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeGrain", timeGrain));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call diagnosticsGetSiteDetectorResponseSlotValidateBeforeCall(String resourceGroupName, String siteName, String detectorName, String slot, String subscriptionId, String apiVersion, OffsetDateTime startTime, OffsetDateTime endTime, String timeGrain, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling diagnosticsGetSiteDetectorResponseSlot(Async)");
        }

        // verify the required parameter 'siteName' is set
        if (siteName == null) {
            throw new ApiException("Missing the required parameter 'siteName' when calling diagnosticsGetSiteDetectorResponseSlot(Async)");
        }

        // verify the required parameter 'detectorName' is set
        if (detectorName == null) {
            throw new ApiException("Missing the required parameter 'detectorName' when calling diagnosticsGetSiteDetectorResponseSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling diagnosticsGetSiteDetectorResponseSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling diagnosticsGetSiteDetectorResponseSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling diagnosticsGetSiteDetectorResponseSlot(Async)");
        }

        return diagnosticsGetSiteDetectorResponseSlotCall(resourceGroupName, siteName, detectorName, slot, subscriptionId, apiVersion, startTime, endTime, timeGrain, _callback);

    }

    /**
     * Get site detector response
     * Get site detector response
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param siteName Site Name (required)
     * @param detectorName Detector Resource Name (required)
     * @param slot Slot Name (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param startTime Start Time (optional)
     * @param endTime End Time (optional)
     * @param timeGrain Time Grain (optional)
     * @return DetectorResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public DetectorResponse diagnosticsGetSiteDetectorResponseSlot(String resourceGroupName, String siteName, String detectorName, String slot, String subscriptionId, String apiVersion, OffsetDateTime startTime, OffsetDateTime endTime, String timeGrain) throws ApiException {
        ApiResponse<DetectorResponse> localVarResp = diagnosticsGetSiteDetectorResponseSlotWithHttpInfo(resourceGroupName, siteName, detectorName, slot, subscriptionId, apiVersion, startTime, endTime, timeGrain);
        return localVarResp.getData();
    }

    /**
     * Get site detector response
     * Get site detector response
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param siteName Site Name (required)
     * @param detectorName Detector Resource Name (required)
     * @param slot Slot Name (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param startTime Start Time (optional)
     * @param endTime End Time (optional)
     * @param timeGrain Time Grain (optional)
     * @return ApiResponse&lt;DetectorResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DetectorResponse> diagnosticsGetSiteDetectorResponseSlotWithHttpInfo(String resourceGroupName, String siteName, String detectorName, String slot, String subscriptionId, String apiVersion, OffsetDateTime startTime, OffsetDateTime endTime, String timeGrain) throws ApiException {
        okhttp3.Call localVarCall = diagnosticsGetSiteDetectorResponseSlotValidateBeforeCall(resourceGroupName, siteName, detectorName, slot, subscriptionId, apiVersion, startTime, endTime, timeGrain, null);
        Type localVarReturnType = new TypeToken<DetectorResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get site detector response (asynchronously)
     * Get site detector response
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param siteName Site Name (required)
     * @param detectorName Detector Resource Name (required)
     * @param slot Slot Name (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param startTime Start Time (optional)
     * @param endTime End Time (optional)
     * @param timeGrain Time Grain (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call diagnosticsGetSiteDetectorResponseSlotAsync(String resourceGroupName, String siteName, String detectorName, String slot, String subscriptionId, String apiVersion, OffsetDateTime startTime, OffsetDateTime endTime, String timeGrain, final ApiCallback<DetectorResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = diagnosticsGetSiteDetectorResponseSlotValidateBeforeCall(resourceGroupName, siteName, detectorName, slot, subscriptionId, apiVersion, startTime, endTime, timeGrain, _callback);
        Type localVarReturnType = new TypeToken<DetectorResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for diagnosticsGetSiteDetectorSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param siteName Site Name (required)
     * @param diagnosticCategory Diagnostic Category (required)
     * @param detectorName Detector Name (required)
     * @param slot Slot Name (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call diagnosticsGetSiteDetectorSlotCall(String resourceGroupName, String siteName, String diagnosticCategory, String detectorName, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slot}/diagnostics/{diagnosticCategory}/detectors/{detectorName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "siteName" + "}", localVarApiClient.escapeString(siteName.toString()))
            .replace("{" + "diagnosticCategory" + "}", localVarApiClient.escapeString(diagnosticCategory.toString()))
            .replace("{" + "detectorName" + "}", localVarApiClient.escapeString(detectorName.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call diagnosticsGetSiteDetectorSlotValidateBeforeCall(String resourceGroupName, String siteName, String diagnosticCategory, String detectorName, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling diagnosticsGetSiteDetectorSlot(Async)");
        }

        // verify the required parameter 'siteName' is set
        if (siteName == null) {
            throw new ApiException("Missing the required parameter 'siteName' when calling diagnosticsGetSiteDetectorSlot(Async)");
        }

        // verify the required parameter 'diagnosticCategory' is set
        if (diagnosticCategory == null) {
            throw new ApiException("Missing the required parameter 'diagnosticCategory' when calling diagnosticsGetSiteDetectorSlot(Async)");
        }

        // verify the required parameter 'detectorName' is set
        if (detectorName == null) {
            throw new ApiException("Missing the required parameter 'detectorName' when calling diagnosticsGetSiteDetectorSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling diagnosticsGetSiteDetectorSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling diagnosticsGetSiteDetectorSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling diagnosticsGetSiteDetectorSlot(Async)");
        }

        return diagnosticsGetSiteDetectorSlotCall(resourceGroupName, siteName, diagnosticCategory, detectorName, slot, subscriptionId, apiVersion, _callback);

    }

    /**
     * Get Detector
     * Get Detector
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param siteName Site Name (required)
     * @param diagnosticCategory Diagnostic Category (required)
     * @param detectorName Detector Name (required)
     * @param slot Slot Name (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return DiagnosticDetectorCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public DiagnosticDetectorCollection diagnosticsGetSiteDetectorSlot(String resourceGroupName, String siteName, String diagnosticCategory, String detectorName, String slot, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<DiagnosticDetectorCollection> localVarResp = diagnosticsGetSiteDetectorSlotWithHttpInfo(resourceGroupName, siteName, diagnosticCategory, detectorName, slot, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get Detector
     * Get Detector
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param siteName Site Name (required)
     * @param diagnosticCategory Diagnostic Category (required)
     * @param detectorName Detector Name (required)
     * @param slot Slot Name (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;DiagnosticDetectorCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DiagnosticDetectorCollection> diagnosticsGetSiteDetectorSlotWithHttpInfo(String resourceGroupName, String siteName, String diagnosticCategory, String detectorName, String slot, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = diagnosticsGetSiteDetectorSlotValidateBeforeCall(resourceGroupName, siteName, diagnosticCategory, detectorName, slot, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<DiagnosticDetectorCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Detector (asynchronously)
     * Get Detector
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param siteName Site Name (required)
     * @param diagnosticCategory Diagnostic Category (required)
     * @param detectorName Detector Name (required)
     * @param slot Slot Name (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call diagnosticsGetSiteDetectorSlotAsync(String resourceGroupName, String siteName, String diagnosticCategory, String detectorName, String slot, String subscriptionId, String apiVersion, final ApiCallback<DiagnosticDetectorCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = diagnosticsGetSiteDetectorSlotValidateBeforeCall(resourceGroupName, siteName, diagnosticCategory, detectorName, slot, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<DiagnosticDetectorCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for diagnosticsGetSiteDiagnosticCategory
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param siteName Site Name (required)
     * @param diagnosticCategory Diagnostic Category (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call diagnosticsGetSiteDiagnosticCategoryCall(String resourceGroupName, String siteName, String diagnosticCategory, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/diagnostics/{diagnosticCategory}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "siteName" + "}", localVarApiClient.escapeString(siteName.toString()))
            .replace("{" + "diagnosticCategory" + "}", localVarApiClient.escapeString(diagnosticCategory.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call diagnosticsGetSiteDiagnosticCategoryValidateBeforeCall(String resourceGroupName, String siteName, String diagnosticCategory, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling diagnosticsGetSiteDiagnosticCategory(Async)");
        }

        // verify the required parameter 'siteName' is set
        if (siteName == null) {
            throw new ApiException("Missing the required parameter 'siteName' when calling diagnosticsGetSiteDiagnosticCategory(Async)");
        }

        // verify the required parameter 'diagnosticCategory' is set
        if (diagnosticCategory == null) {
            throw new ApiException("Missing the required parameter 'diagnosticCategory' when calling diagnosticsGetSiteDiagnosticCategory(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling diagnosticsGetSiteDiagnosticCategory(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling diagnosticsGetSiteDiagnosticCategory(Async)");
        }

        return diagnosticsGetSiteDiagnosticCategoryCall(resourceGroupName, siteName, diagnosticCategory, subscriptionId, apiVersion, _callback);

    }

    /**
     * Get Diagnostics Category
     * Get Diagnostics Category
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param siteName Site Name (required)
     * @param diagnosticCategory Diagnostic Category (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return DiagnosticCategory
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public DiagnosticCategory diagnosticsGetSiteDiagnosticCategory(String resourceGroupName, String siteName, String diagnosticCategory, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<DiagnosticCategory> localVarResp = diagnosticsGetSiteDiagnosticCategoryWithHttpInfo(resourceGroupName, siteName, diagnosticCategory, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get Diagnostics Category
     * Get Diagnostics Category
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param siteName Site Name (required)
     * @param diagnosticCategory Diagnostic Category (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;DiagnosticCategory&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DiagnosticCategory> diagnosticsGetSiteDiagnosticCategoryWithHttpInfo(String resourceGroupName, String siteName, String diagnosticCategory, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = diagnosticsGetSiteDiagnosticCategoryValidateBeforeCall(resourceGroupName, siteName, diagnosticCategory, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<DiagnosticCategory>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Diagnostics Category (asynchronously)
     * Get Diagnostics Category
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param siteName Site Name (required)
     * @param diagnosticCategory Diagnostic Category (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call diagnosticsGetSiteDiagnosticCategoryAsync(String resourceGroupName, String siteName, String diagnosticCategory, String subscriptionId, String apiVersion, final ApiCallback<DiagnosticCategory> _callback) throws ApiException {

        okhttp3.Call localVarCall = diagnosticsGetSiteDiagnosticCategoryValidateBeforeCall(resourceGroupName, siteName, diagnosticCategory, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<DiagnosticCategory>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for diagnosticsGetSiteDiagnosticCategorySlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param siteName Site Name (required)
     * @param diagnosticCategory Diagnostic Category (required)
     * @param slot Slot Name (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call diagnosticsGetSiteDiagnosticCategorySlotCall(String resourceGroupName, String siteName, String diagnosticCategory, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slot}/diagnostics/{diagnosticCategory}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "siteName" + "}", localVarApiClient.escapeString(siteName.toString()))
            .replace("{" + "diagnosticCategory" + "}", localVarApiClient.escapeString(diagnosticCategory.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call diagnosticsGetSiteDiagnosticCategorySlotValidateBeforeCall(String resourceGroupName, String siteName, String diagnosticCategory, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling diagnosticsGetSiteDiagnosticCategorySlot(Async)");
        }

        // verify the required parameter 'siteName' is set
        if (siteName == null) {
            throw new ApiException("Missing the required parameter 'siteName' when calling diagnosticsGetSiteDiagnosticCategorySlot(Async)");
        }

        // verify the required parameter 'diagnosticCategory' is set
        if (diagnosticCategory == null) {
            throw new ApiException("Missing the required parameter 'diagnosticCategory' when calling diagnosticsGetSiteDiagnosticCategorySlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling diagnosticsGetSiteDiagnosticCategorySlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling diagnosticsGetSiteDiagnosticCategorySlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling diagnosticsGetSiteDiagnosticCategorySlot(Async)");
        }

        return diagnosticsGetSiteDiagnosticCategorySlotCall(resourceGroupName, siteName, diagnosticCategory, slot, subscriptionId, apiVersion, _callback);

    }

    /**
     * Get Diagnostics Category
     * Get Diagnostics Category
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param siteName Site Name (required)
     * @param diagnosticCategory Diagnostic Category (required)
     * @param slot Slot Name (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return DiagnosticCategory
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public DiagnosticCategory diagnosticsGetSiteDiagnosticCategorySlot(String resourceGroupName, String siteName, String diagnosticCategory, String slot, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<DiagnosticCategory> localVarResp = diagnosticsGetSiteDiagnosticCategorySlotWithHttpInfo(resourceGroupName, siteName, diagnosticCategory, slot, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get Diagnostics Category
     * Get Diagnostics Category
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param siteName Site Name (required)
     * @param diagnosticCategory Diagnostic Category (required)
     * @param slot Slot Name (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;DiagnosticCategory&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DiagnosticCategory> diagnosticsGetSiteDiagnosticCategorySlotWithHttpInfo(String resourceGroupName, String siteName, String diagnosticCategory, String slot, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = diagnosticsGetSiteDiagnosticCategorySlotValidateBeforeCall(resourceGroupName, siteName, diagnosticCategory, slot, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<DiagnosticCategory>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Diagnostics Category (asynchronously)
     * Get Diagnostics Category
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param siteName Site Name (required)
     * @param diagnosticCategory Diagnostic Category (required)
     * @param slot Slot Name (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call diagnosticsGetSiteDiagnosticCategorySlotAsync(String resourceGroupName, String siteName, String diagnosticCategory, String slot, String subscriptionId, String apiVersion, final ApiCallback<DiagnosticCategory> _callback) throws ApiException {

        okhttp3.Call localVarCall = diagnosticsGetSiteDiagnosticCategorySlotValidateBeforeCall(resourceGroupName, siteName, diagnosticCategory, slot, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<DiagnosticCategory>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for diagnosticsListHostingEnvironmentDetectorResponses
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site Name (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call diagnosticsListHostingEnvironmentDetectorResponsesCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/detectors"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call diagnosticsListHostingEnvironmentDetectorResponsesValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling diagnosticsListHostingEnvironmentDetectorResponses(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling diagnosticsListHostingEnvironmentDetectorResponses(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling diagnosticsListHostingEnvironmentDetectorResponses(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling diagnosticsListHostingEnvironmentDetectorResponses(Async)");
        }

        return diagnosticsListHostingEnvironmentDetectorResponsesCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * List Hosting Environment Detector Responses
     * List Hosting Environment Detector Responses
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site Name (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return DetectorResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public DetectorResponseCollection diagnosticsListHostingEnvironmentDetectorResponses(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<DetectorResponseCollection> localVarResp = diagnosticsListHostingEnvironmentDetectorResponsesWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * List Hosting Environment Detector Responses
     * List Hosting Environment Detector Responses
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site Name (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;DetectorResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DetectorResponseCollection> diagnosticsListHostingEnvironmentDetectorResponsesWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = diagnosticsListHostingEnvironmentDetectorResponsesValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<DetectorResponseCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Hosting Environment Detector Responses (asynchronously)
     * List Hosting Environment Detector Responses
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Site Name (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call diagnosticsListHostingEnvironmentDetectorResponsesAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback<DetectorResponseCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = diagnosticsListHostingEnvironmentDetectorResponsesValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<DetectorResponseCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for diagnosticsListSiteAnalyses
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param siteName Site Name (required)
     * @param diagnosticCategory Diagnostic Category (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call diagnosticsListSiteAnalysesCall(String resourceGroupName, String siteName, String diagnosticCategory, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/diagnostics/{diagnosticCategory}/analyses"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "siteName" + "}", localVarApiClient.escapeString(siteName.toString()))
            .replace("{" + "diagnosticCategory" + "}", localVarApiClient.escapeString(diagnosticCategory.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call diagnosticsListSiteAnalysesValidateBeforeCall(String resourceGroupName, String siteName, String diagnosticCategory, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling diagnosticsListSiteAnalyses(Async)");
        }

        // verify the required parameter 'siteName' is set
        if (siteName == null) {
            throw new ApiException("Missing the required parameter 'siteName' when calling diagnosticsListSiteAnalyses(Async)");
        }

        // verify the required parameter 'diagnosticCategory' is set
        if (diagnosticCategory == null) {
            throw new ApiException("Missing the required parameter 'diagnosticCategory' when calling diagnosticsListSiteAnalyses(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling diagnosticsListSiteAnalyses(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling diagnosticsListSiteAnalyses(Async)");
        }

        return diagnosticsListSiteAnalysesCall(resourceGroupName, siteName, diagnosticCategory, subscriptionId, apiVersion, _callback);

    }

    /**
     * Get Site Analyses
     * Get Site Analyses
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param siteName Site Name (required)
     * @param diagnosticCategory Diagnostic Category (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return DiagnosticAnalysisCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public DiagnosticAnalysisCollection diagnosticsListSiteAnalyses(String resourceGroupName, String siteName, String diagnosticCategory, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<DiagnosticAnalysisCollection> localVarResp = diagnosticsListSiteAnalysesWithHttpInfo(resourceGroupName, siteName, diagnosticCategory, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get Site Analyses
     * Get Site Analyses
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param siteName Site Name (required)
     * @param diagnosticCategory Diagnostic Category (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;DiagnosticAnalysisCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DiagnosticAnalysisCollection> diagnosticsListSiteAnalysesWithHttpInfo(String resourceGroupName, String siteName, String diagnosticCategory, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = diagnosticsListSiteAnalysesValidateBeforeCall(resourceGroupName, siteName, diagnosticCategory, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<DiagnosticAnalysisCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Site Analyses (asynchronously)
     * Get Site Analyses
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param siteName Site Name (required)
     * @param diagnosticCategory Diagnostic Category (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call diagnosticsListSiteAnalysesAsync(String resourceGroupName, String siteName, String diagnosticCategory, String subscriptionId, String apiVersion, final ApiCallback<DiagnosticAnalysisCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = diagnosticsListSiteAnalysesValidateBeforeCall(resourceGroupName, siteName, diagnosticCategory, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<DiagnosticAnalysisCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for diagnosticsListSiteAnalysesSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param siteName Site Name (required)
     * @param diagnosticCategory Diagnostic Category (required)
     * @param slot Slot Name (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call diagnosticsListSiteAnalysesSlotCall(String resourceGroupName, String siteName, String diagnosticCategory, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slot}/diagnostics/{diagnosticCategory}/analyses"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "siteName" + "}", localVarApiClient.escapeString(siteName.toString()))
            .replace("{" + "diagnosticCategory" + "}", localVarApiClient.escapeString(diagnosticCategory.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call diagnosticsListSiteAnalysesSlotValidateBeforeCall(String resourceGroupName, String siteName, String diagnosticCategory, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling diagnosticsListSiteAnalysesSlot(Async)");
        }

        // verify the required parameter 'siteName' is set
        if (siteName == null) {
            throw new ApiException("Missing the required parameter 'siteName' when calling diagnosticsListSiteAnalysesSlot(Async)");
        }

        // verify the required parameter 'diagnosticCategory' is set
        if (diagnosticCategory == null) {
            throw new ApiException("Missing the required parameter 'diagnosticCategory' when calling diagnosticsListSiteAnalysesSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling diagnosticsListSiteAnalysesSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling diagnosticsListSiteAnalysesSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling diagnosticsListSiteAnalysesSlot(Async)");
        }

        return diagnosticsListSiteAnalysesSlotCall(resourceGroupName, siteName, diagnosticCategory, slot, subscriptionId, apiVersion, _callback);

    }

    /**
     * Get Site Analyses
     * Get Site Analyses
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param siteName Site Name (required)
     * @param diagnosticCategory Diagnostic Category (required)
     * @param slot Slot Name (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return DiagnosticAnalysisCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public DiagnosticAnalysisCollection diagnosticsListSiteAnalysesSlot(String resourceGroupName, String siteName, String diagnosticCategory, String slot, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<DiagnosticAnalysisCollection> localVarResp = diagnosticsListSiteAnalysesSlotWithHttpInfo(resourceGroupName, siteName, diagnosticCategory, slot, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get Site Analyses
     * Get Site Analyses
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param siteName Site Name (required)
     * @param diagnosticCategory Diagnostic Category (required)
     * @param slot Slot Name (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;DiagnosticAnalysisCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DiagnosticAnalysisCollection> diagnosticsListSiteAnalysesSlotWithHttpInfo(String resourceGroupName, String siteName, String diagnosticCategory, String slot, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = diagnosticsListSiteAnalysesSlotValidateBeforeCall(resourceGroupName, siteName, diagnosticCategory, slot, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<DiagnosticAnalysisCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Site Analyses (asynchronously)
     * Get Site Analyses
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param siteName Site Name (required)
     * @param diagnosticCategory Diagnostic Category (required)
     * @param slot Slot Name (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call diagnosticsListSiteAnalysesSlotAsync(String resourceGroupName, String siteName, String diagnosticCategory, String slot, String subscriptionId, String apiVersion, final ApiCallback<DiagnosticAnalysisCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = diagnosticsListSiteAnalysesSlotValidateBeforeCall(resourceGroupName, siteName, diagnosticCategory, slot, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<DiagnosticAnalysisCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for diagnosticsListSiteDetectorResponses
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param siteName Site Name (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call diagnosticsListSiteDetectorResponsesCall(String resourceGroupName, String siteName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/detectors"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "siteName" + "}", localVarApiClient.escapeString(siteName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call diagnosticsListSiteDetectorResponsesValidateBeforeCall(String resourceGroupName, String siteName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling diagnosticsListSiteDetectorResponses(Async)");
        }

        // verify the required parameter 'siteName' is set
        if (siteName == null) {
            throw new ApiException("Missing the required parameter 'siteName' when calling diagnosticsListSiteDetectorResponses(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling diagnosticsListSiteDetectorResponses(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling diagnosticsListSiteDetectorResponses(Async)");
        }

        return diagnosticsListSiteDetectorResponsesCall(resourceGroupName, siteName, subscriptionId, apiVersion, _callback);

    }

    /**
     * List Site Detector Responses
     * List Site Detector Responses
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param siteName Site Name (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return DetectorResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public DetectorResponseCollection diagnosticsListSiteDetectorResponses(String resourceGroupName, String siteName, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<DetectorResponseCollection> localVarResp = diagnosticsListSiteDetectorResponsesWithHttpInfo(resourceGroupName, siteName, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * List Site Detector Responses
     * List Site Detector Responses
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param siteName Site Name (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;DetectorResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DetectorResponseCollection> diagnosticsListSiteDetectorResponsesWithHttpInfo(String resourceGroupName, String siteName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = diagnosticsListSiteDetectorResponsesValidateBeforeCall(resourceGroupName, siteName, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<DetectorResponseCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Site Detector Responses (asynchronously)
     * List Site Detector Responses
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param siteName Site Name (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call diagnosticsListSiteDetectorResponsesAsync(String resourceGroupName, String siteName, String subscriptionId, String apiVersion, final ApiCallback<DetectorResponseCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = diagnosticsListSiteDetectorResponsesValidateBeforeCall(resourceGroupName, siteName, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<DetectorResponseCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for diagnosticsListSiteDetectorResponsesSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param siteName Site Name (required)
     * @param slot Slot Name (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call diagnosticsListSiteDetectorResponsesSlotCall(String resourceGroupName, String siteName, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slot}/detectors"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "siteName" + "}", localVarApiClient.escapeString(siteName.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call diagnosticsListSiteDetectorResponsesSlotValidateBeforeCall(String resourceGroupName, String siteName, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling diagnosticsListSiteDetectorResponsesSlot(Async)");
        }

        // verify the required parameter 'siteName' is set
        if (siteName == null) {
            throw new ApiException("Missing the required parameter 'siteName' when calling diagnosticsListSiteDetectorResponsesSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling diagnosticsListSiteDetectorResponsesSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling diagnosticsListSiteDetectorResponsesSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling diagnosticsListSiteDetectorResponsesSlot(Async)");
        }

        return diagnosticsListSiteDetectorResponsesSlotCall(resourceGroupName, siteName, slot, subscriptionId, apiVersion, _callback);

    }

    /**
     * List Site Detector Responses
     * List Site Detector Responses
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param siteName Site Name (required)
     * @param slot Slot Name (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return DetectorResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public DetectorResponseCollection diagnosticsListSiteDetectorResponsesSlot(String resourceGroupName, String siteName, String slot, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<DetectorResponseCollection> localVarResp = diagnosticsListSiteDetectorResponsesSlotWithHttpInfo(resourceGroupName, siteName, slot, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * List Site Detector Responses
     * List Site Detector Responses
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param siteName Site Name (required)
     * @param slot Slot Name (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;DetectorResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DetectorResponseCollection> diagnosticsListSiteDetectorResponsesSlotWithHttpInfo(String resourceGroupName, String siteName, String slot, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = diagnosticsListSiteDetectorResponsesSlotValidateBeforeCall(resourceGroupName, siteName, slot, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<DetectorResponseCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Site Detector Responses (asynchronously)
     * List Site Detector Responses
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param siteName Site Name (required)
     * @param slot Slot Name (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call diagnosticsListSiteDetectorResponsesSlotAsync(String resourceGroupName, String siteName, String slot, String subscriptionId, String apiVersion, final ApiCallback<DetectorResponseCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = diagnosticsListSiteDetectorResponsesSlotValidateBeforeCall(resourceGroupName, siteName, slot, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<DetectorResponseCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for diagnosticsListSiteDetectors
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param siteName Site Name (required)
     * @param diagnosticCategory Diagnostic Category (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call diagnosticsListSiteDetectorsCall(String resourceGroupName, String siteName, String diagnosticCategory, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/diagnostics/{diagnosticCategory}/detectors"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "siteName" + "}", localVarApiClient.escapeString(siteName.toString()))
            .replace("{" + "diagnosticCategory" + "}", localVarApiClient.escapeString(diagnosticCategory.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call diagnosticsListSiteDetectorsValidateBeforeCall(String resourceGroupName, String siteName, String diagnosticCategory, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling diagnosticsListSiteDetectors(Async)");
        }

        // verify the required parameter 'siteName' is set
        if (siteName == null) {
            throw new ApiException("Missing the required parameter 'siteName' when calling diagnosticsListSiteDetectors(Async)");
        }

        // verify the required parameter 'diagnosticCategory' is set
        if (diagnosticCategory == null) {
            throw new ApiException("Missing the required parameter 'diagnosticCategory' when calling diagnosticsListSiteDetectors(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling diagnosticsListSiteDetectors(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling diagnosticsListSiteDetectors(Async)");
        }

        return diagnosticsListSiteDetectorsCall(resourceGroupName, siteName, diagnosticCategory, subscriptionId, apiVersion, _callback);

    }

    /**
     * Get Detectors
     * Get Detectors
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param siteName Site Name (required)
     * @param diagnosticCategory Diagnostic Category (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return DiagnosticDetectorCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public DiagnosticDetectorCollection diagnosticsListSiteDetectors(String resourceGroupName, String siteName, String diagnosticCategory, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<DiagnosticDetectorCollection> localVarResp = diagnosticsListSiteDetectorsWithHttpInfo(resourceGroupName, siteName, diagnosticCategory, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get Detectors
     * Get Detectors
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param siteName Site Name (required)
     * @param diagnosticCategory Diagnostic Category (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;DiagnosticDetectorCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DiagnosticDetectorCollection> diagnosticsListSiteDetectorsWithHttpInfo(String resourceGroupName, String siteName, String diagnosticCategory, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = diagnosticsListSiteDetectorsValidateBeforeCall(resourceGroupName, siteName, diagnosticCategory, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<DiagnosticDetectorCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Detectors (asynchronously)
     * Get Detectors
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param siteName Site Name (required)
     * @param diagnosticCategory Diagnostic Category (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call diagnosticsListSiteDetectorsAsync(String resourceGroupName, String siteName, String diagnosticCategory, String subscriptionId, String apiVersion, final ApiCallback<DiagnosticDetectorCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = diagnosticsListSiteDetectorsValidateBeforeCall(resourceGroupName, siteName, diagnosticCategory, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<DiagnosticDetectorCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for diagnosticsListSiteDetectorsSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param siteName Site Name (required)
     * @param diagnosticCategory Diagnostic Category (required)
     * @param slot Slot Name (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call diagnosticsListSiteDetectorsSlotCall(String resourceGroupName, String siteName, String diagnosticCategory, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slot}/diagnostics/{diagnosticCategory}/detectors"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "siteName" + "}", localVarApiClient.escapeString(siteName.toString()))
            .replace("{" + "diagnosticCategory" + "}", localVarApiClient.escapeString(diagnosticCategory.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call diagnosticsListSiteDetectorsSlotValidateBeforeCall(String resourceGroupName, String siteName, String diagnosticCategory, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling diagnosticsListSiteDetectorsSlot(Async)");
        }

        // verify the required parameter 'siteName' is set
        if (siteName == null) {
            throw new ApiException("Missing the required parameter 'siteName' when calling diagnosticsListSiteDetectorsSlot(Async)");
        }

        // verify the required parameter 'diagnosticCategory' is set
        if (diagnosticCategory == null) {
            throw new ApiException("Missing the required parameter 'diagnosticCategory' when calling diagnosticsListSiteDetectorsSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling diagnosticsListSiteDetectorsSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling diagnosticsListSiteDetectorsSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling diagnosticsListSiteDetectorsSlot(Async)");
        }

        return diagnosticsListSiteDetectorsSlotCall(resourceGroupName, siteName, diagnosticCategory, slot, subscriptionId, apiVersion, _callback);

    }

    /**
     * Get Detectors
     * Get Detectors
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param siteName Site Name (required)
     * @param diagnosticCategory Diagnostic Category (required)
     * @param slot Slot Name (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return DiagnosticDetectorCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public DiagnosticDetectorCollection diagnosticsListSiteDetectorsSlot(String resourceGroupName, String siteName, String diagnosticCategory, String slot, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<DiagnosticDetectorCollection> localVarResp = diagnosticsListSiteDetectorsSlotWithHttpInfo(resourceGroupName, siteName, diagnosticCategory, slot, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get Detectors
     * Get Detectors
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param siteName Site Name (required)
     * @param diagnosticCategory Diagnostic Category (required)
     * @param slot Slot Name (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;DiagnosticDetectorCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DiagnosticDetectorCollection> diagnosticsListSiteDetectorsSlotWithHttpInfo(String resourceGroupName, String siteName, String diagnosticCategory, String slot, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = diagnosticsListSiteDetectorsSlotValidateBeforeCall(resourceGroupName, siteName, diagnosticCategory, slot, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<DiagnosticDetectorCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Detectors (asynchronously)
     * Get Detectors
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param siteName Site Name (required)
     * @param diagnosticCategory Diagnostic Category (required)
     * @param slot Slot Name (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call diagnosticsListSiteDetectorsSlotAsync(String resourceGroupName, String siteName, String diagnosticCategory, String slot, String subscriptionId, String apiVersion, final ApiCallback<DiagnosticDetectorCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = diagnosticsListSiteDetectorsSlotValidateBeforeCall(resourceGroupName, siteName, diagnosticCategory, slot, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<DiagnosticDetectorCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for diagnosticsListSiteDiagnosticCategories
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param siteName Site Name (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call diagnosticsListSiteDiagnosticCategoriesCall(String resourceGroupName, String siteName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/diagnostics"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "siteName" + "}", localVarApiClient.escapeString(siteName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call diagnosticsListSiteDiagnosticCategoriesValidateBeforeCall(String resourceGroupName, String siteName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling diagnosticsListSiteDiagnosticCategories(Async)");
        }

        // verify the required parameter 'siteName' is set
        if (siteName == null) {
            throw new ApiException("Missing the required parameter 'siteName' when calling diagnosticsListSiteDiagnosticCategories(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling diagnosticsListSiteDiagnosticCategories(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling diagnosticsListSiteDiagnosticCategories(Async)");
        }

        return diagnosticsListSiteDiagnosticCategoriesCall(resourceGroupName, siteName, subscriptionId, apiVersion, _callback);

    }

    /**
     * Get Diagnostics Categories
     * Get Diagnostics Categories
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param siteName Site Name (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return DiagnosticCategoryCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public DiagnosticCategoryCollection diagnosticsListSiteDiagnosticCategories(String resourceGroupName, String siteName, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<DiagnosticCategoryCollection> localVarResp = diagnosticsListSiteDiagnosticCategoriesWithHttpInfo(resourceGroupName, siteName, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get Diagnostics Categories
     * Get Diagnostics Categories
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param siteName Site Name (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;DiagnosticCategoryCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DiagnosticCategoryCollection> diagnosticsListSiteDiagnosticCategoriesWithHttpInfo(String resourceGroupName, String siteName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = diagnosticsListSiteDiagnosticCategoriesValidateBeforeCall(resourceGroupName, siteName, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<DiagnosticCategoryCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Diagnostics Categories (asynchronously)
     * Get Diagnostics Categories
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param siteName Site Name (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call diagnosticsListSiteDiagnosticCategoriesAsync(String resourceGroupName, String siteName, String subscriptionId, String apiVersion, final ApiCallback<DiagnosticCategoryCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = diagnosticsListSiteDiagnosticCategoriesValidateBeforeCall(resourceGroupName, siteName, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<DiagnosticCategoryCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for diagnosticsListSiteDiagnosticCategoriesSlot
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param siteName Site Name (required)
     * @param slot Slot Name (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call diagnosticsListSiteDiagnosticCategoriesSlotCall(String resourceGroupName, String siteName, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slot}/diagnostics"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "siteName" + "}", localVarApiClient.escapeString(siteName.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call diagnosticsListSiteDiagnosticCategoriesSlotValidateBeforeCall(String resourceGroupName, String siteName, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling diagnosticsListSiteDiagnosticCategoriesSlot(Async)");
        }

        // verify the required parameter 'siteName' is set
        if (siteName == null) {
            throw new ApiException("Missing the required parameter 'siteName' when calling diagnosticsListSiteDiagnosticCategoriesSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling diagnosticsListSiteDiagnosticCategoriesSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling diagnosticsListSiteDiagnosticCategoriesSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling diagnosticsListSiteDiagnosticCategoriesSlot(Async)");
        }

        return diagnosticsListSiteDiagnosticCategoriesSlotCall(resourceGroupName, siteName, slot, subscriptionId, apiVersion, _callback);

    }

    /**
     * Get Diagnostics Categories
     * Get Diagnostics Categories
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param siteName Site Name (required)
     * @param slot Slot Name (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return DiagnosticCategoryCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public DiagnosticCategoryCollection diagnosticsListSiteDiagnosticCategoriesSlot(String resourceGroupName, String siteName, String slot, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<DiagnosticCategoryCollection> localVarResp = diagnosticsListSiteDiagnosticCategoriesSlotWithHttpInfo(resourceGroupName, siteName, slot, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get Diagnostics Categories
     * Get Diagnostics Categories
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param siteName Site Name (required)
     * @param slot Slot Name (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;DiagnosticCategoryCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DiagnosticCategoryCollection> diagnosticsListSiteDiagnosticCategoriesSlotWithHttpInfo(String resourceGroupName, String siteName, String slot, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = diagnosticsListSiteDiagnosticCategoriesSlotValidateBeforeCall(resourceGroupName, siteName, slot, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<DiagnosticCategoryCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Diagnostics Categories (asynchronously)
     * Get Diagnostics Categories
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param siteName Site Name (required)
     * @param slot Slot Name (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call diagnosticsListSiteDiagnosticCategoriesSlotAsync(String resourceGroupName, String siteName, String slot, String subscriptionId, String apiVersion, final ApiCallback<DiagnosticCategoryCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = diagnosticsListSiteDiagnosticCategoriesSlotValidateBeforeCall(resourceGroupName, siteName, slot, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<DiagnosticCategoryCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
