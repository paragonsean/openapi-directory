/*
 * Diagnostics API Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-03-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AnalysisDataDataInnerInner;
import org.openapitools.client.model.Solution;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Class representing Abnormal Time Period detected.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:31:06.040426-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DetectorAbnormalTimePeriod {
  public static final String SERIALIZED_NAME_END_TIME = "endTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private OffsetDateTime endTime;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public static final String SERIALIZED_NAME_META_DATA = "metaData";
  @SerializedName(SERIALIZED_NAME_META_DATA)
  private List<List<AnalysisDataDataInnerInner>> metaData = new ArrayList<>();

  public static final String SERIALIZED_NAME_PRIORITY = "priority";
  @SerializedName(SERIALIZED_NAME_PRIORITY)
  private Double priority;

  public static final String SERIALIZED_NAME_SOLUTIONS = "solutions";
  @SerializedName(SERIALIZED_NAME_SOLUTIONS)
  private List<Solution> solutions = new ArrayList<>();

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private String source;

  public static final String SERIALIZED_NAME_START_TIME = "startTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private OffsetDateTime startTime;

  /**
   * Represents the type of the Detector
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    SERVICE_INCIDENT("ServiceIncident"),
    
    APP_DEPLOYMENT("AppDeployment"),
    
    APP_CRASH("AppCrash"),
    
    RUNTIME_ISSUE_DETECTED("RuntimeIssueDetected"),
    
    ASE_DEPLOYMENT("AseDeployment"),
    
    USER_ISSUE("UserIssue"),
    
    PLATFORM_ISSUE("PlatformIssue"),
    
    OTHER("Other");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public DetectorAbnormalTimePeriod() {
  }

  public DetectorAbnormalTimePeriod endTime(OffsetDateTime endTime) {
    this.endTime = endTime;
    return this;
  }

  /**
   * End time of the correlated event
   * @return endTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEndTime() {
    return endTime;
  }

  public void setEndTime(OffsetDateTime endTime) {
    this.endTime = endTime;
  }


  public DetectorAbnormalTimePeriod message(String message) {
    this.message = message;
    return this;
  }

  /**
   * Message describing the event
   * @return message
   */
  @javax.annotation.Nullable
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }


  public DetectorAbnormalTimePeriod metaData(List<List<AnalysisDataDataInnerInner>> metaData) {
    this.metaData = metaData;
    return this;
  }

  public DetectorAbnormalTimePeriod addMetaDataItem(List<AnalysisDataDataInnerInner> metaDataItem) {
    if (this.metaData == null) {
      this.metaData = new ArrayList<>();
    }
    this.metaData.add(metaDataItem);
    return this;
  }

  /**
   * Downtime metadata
   * @return metaData
   */
  @javax.annotation.Nullable
  public List<List<AnalysisDataDataInnerInner>> getMetaData() {
    return metaData;
  }

  public void setMetaData(List<List<AnalysisDataDataInnerInner>> metaData) {
    this.metaData = metaData;
  }


  public DetectorAbnormalTimePeriod priority(Double priority) {
    this.priority = priority;
    return this;
  }

  /**
   * Represents the rank of the Detector
   * @return priority
   */
  @javax.annotation.Nullable
  public Double getPriority() {
    return priority;
  }

  public void setPriority(Double priority) {
    this.priority = priority;
  }


  public DetectorAbnormalTimePeriod solutions(List<Solution> solutions) {
    this.solutions = solutions;
    return this;
  }

  public DetectorAbnormalTimePeriod addSolutionsItem(Solution solutionsItem) {
    if (this.solutions == null) {
      this.solutions = new ArrayList<>();
    }
    this.solutions.add(solutionsItem);
    return this;
  }

  /**
   * List of proposed solutions
   * @return solutions
   */
  @javax.annotation.Nullable
  public List<Solution> getSolutions() {
    return solutions;
  }

  public void setSolutions(List<Solution> solutions) {
    this.solutions = solutions;
  }


  public DetectorAbnormalTimePeriod source(String source) {
    this.source = source;
    return this;
  }

  /**
   * Represents the name of the Detector
   * @return source
   */
  @javax.annotation.Nullable
  public String getSource() {
    return source;
  }

  public void setSource(String source) {
    this.source = source;
  }


  public DetectorAbnormalTimePeriod startTime(OffsetDateTime startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * Start time of the correlated event
   * @return startTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartTime() {
    return startTime;
  }

  public void setStartTime(OffsetDateTime startTime) {
    this.startTime = startTime;
  }


  public DetectorAbnormalTimePeriod type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Represents the type of the Detector
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DetectorAbnormalTimePeriod detectorAbnormalTimePeriod = (DetectorAbnormalTimePeriod) o;
    return Objects.equals(this.endTime, detectorAbnormalTimePeriod.endTime) &&
        Objects.equals(this.message, detectorAbnormalTimePeriod.message) &&
        Objects.equals(this.metaData, detectorAbnormalTimePeriod.metaData) &&
        Objects.equals(this.priority, detectorAbnormalTimePeriod.priority) &&
        Objects.equals(this.solutions, detectorAbnormalTimePeriod.solutions) &&
        Objects.equals(this.source, detectorAbnormalTimePeriod.source) &&
        Objects.equals(this.startTime, detectorAbnormalTimePeriod.startTime) &&
        Objects.equals(this.type, detectorAbnormalTimePeriod.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(endTime, message, metaData, priority, solutions, source, startTime, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DetectorAbnormalTimePeriod {\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    metaData: ").append(toIndentedString(metaData)).append("\n");
    sb.append("    priority: ").append(toIndentedString(priority)).append("\n");
    sb.append("    solutions: ").append(toIndentedString(solutions)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("endTime");
    openapiFields.add("message");
    openapiFields.add("metaData");
    openapiFields.add("priority");
    openapiFields.add("solutions");
    openapiFields.add("source");
    openapiFields.add("startTime");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DetectorAbnormalTimePeriod
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DetectorAbnormalTimePeriod.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DetectorAbnormalTimePeriod is not found in the empty JSON string", DetectorAbnormalTimePeriod.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DetectorAbnormalTimePeriod.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DetectorAbnormalTimePeriod` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("message") != null && !jsonObj.get("message").isJsonNull()) && !jsonObj.get("message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("metaData") != null && !jsonObj.get("metaData").isJsonNull() && !jsonObj.get("metaData").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `metaData` to be an array in the JSON string but got `%s`", jsonObj.get("metaData").toString()));
      }
      if (jsonObj.get("solutions") != null && !jsonObj.get("solutions").isJsonNull()) {
        JsonArray jsonArraysolutions = jsonObj.getAsJsonArray("solutions");
        if (jsonArraysolutions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("solutions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `solutions` to be an array in the JSON string but got `%s`", jsonObj.get("solutions").toString()));
          }

          // validate the optional field `solutions` (array)
          for (int i = 0; i < jsonArraysolutions.size(); i++) {
            Solution.validateJsonElement(jsonArraysolutions.get(i));
          };
        }
      }
      if ((jsonObj.get("source") != null && !jsonObj.get("source").isJsonNull()) && !jsonObj.get("source").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DetectorAbnormalTimePeriod.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DetectorAbnormalTimePeriod' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DetectorAbnormalTimePeriod> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DetectorAbnormalTimePeriod.class));

       return (TypeAdapter<T>) new TypeAdapter<DetectorAbnormalTimePeriod>() {
           @Override
           public void write(JsonWriter out, DetectorAbnormalTimePeriod value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DetectorAbnormalTimePeriod read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DetectorAbnormalTimePeriod given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DetectorAbnormalTimePeriod
   * @throws IOException if the JSON string is invalid with respect to DetectorAbnormalTimePeriod
   */
  public static DetectorAbnormalTimePeriod fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DetectorAbnormalTimePeriod.class);
  }

  /**
   * Convert an instance of DetectorAbnormalTimePeriod to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

