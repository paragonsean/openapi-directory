/*
 * Diagnostics API Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-03-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AnalysisDataDataInnerInner;
import org.openapitools.client.model.DetectorDefinition;
import org.openapitools.client.model.DiagnosticMetricSet;
import org.openapitools.client.model.ResponseMetaData;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Class Representing Detector Evidence used for analysis
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:31:06.040426-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AnalysisData {
  public static final String SERIALIZED_NAME_DATA = "data";
  @SerializedName(SERIALIZED_NAME_DATA)
  private List<List<AnalysisDataDataInnerInner>> data = new ArrayList<>();

  public static final String SERIALIZED_NAME_DETECTOR_DEFINITION = "detectorDefinition";
  @SerializedName(SERIALIZED_NAME_DETECTOR_DEFINITION)
  private DetectorDefinition detectorDefinition;

  public static final String SERIALIZED_NAME_DETECTOR_META_DATA = "detectorMetaData";
  @SerializedName(SERIALIZED_NAME_DETECTOR_META_DATA)
  private ResponseMetaData detectorMetaData;

  public static final String SERIALIZED_NAME_METRICS = "metrics";
  @SerializedName(SERIALIZED_NAME_METRICS)
  private List<DiagnosticMetricSet> metrics = new ArrayList<>();

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private String source;

  public AnalysisData() {
  }

  public AnalysisData data(List<List<AnalysisDataDataInnerInner>> data) {
    this.data = data;
    return this;
  }

  public AnalysisData addDataItem(List<AnalysisDataDataInnerInner> dataItem) {
    if (this.data == null) {
      this.data = new ArrayList<>();
    }
    this.data.add(dataItem);
    return this;
  }

  /**
   * Additional Source Data
   * @return data
   */
  @javax.annotation.Nullable
  public List<List<AnalysisDataDataInnerInner>> getData() {
    return data;
  }

  public void setData(List<List<AnalysisDataDataInnerInner>> data) {
    this.data = data;
  }


  public AnalysisData detectorDefinition(DetectorDefinition detectorDefinition) {
    this.detectorDefinition = detectorDefinition;
    return this;
  }

  /**
   * Get detectorDefinition
   * @return detectorDefinition
   */
  @javax.annotation.Nullable
  public DetectorDefinition getDetectorDefinition() {
    return detectorDefinition;
  }

  public void setDetectorDefinition(DetectorDefinition detectorDefinition) {
    this.detectorDefinition = detectorDefinition;
  }


  public AnalysisData detectorMetaData(ResponseMetaData detectorMetaData) {
    this.detectorMetaData = detectorMetaData;
    return this;
  }

  /**
   * Get detectorMetaData
   * @return detectorMetaData
   */
  @javax.annotation.Nullable
  public ResponseMetaData getDetectorMetaData() {
    return detectorMetaData;
  }

  public void setDetectorMetaData(ResponseMetaData detectorMetaData) {
    this.detectorMetaData = detectorMetaData;
  }


  public AnalysisData metrics(List<DiagnosticMetricSet> metrics) {
    this.metrics = metrics;
    return this;
  }

  public AnalysisData addMetricsItem(DiagnosticMetricSet metricsItem) {
    if (this.metrics == null) {
      this.metrics = new ArrayList<>();
    }
    this.metrics.add(metricsItem);
    return this;
  }

  /**
   * Source Metrics
   * @return metrics
   */
  @javax.annotation.Nullable
  public List<DiagnosticMetricSet> getMetrics() {
    return metrics;
  }

  public void setMetrics(List<DiagnosticMetricSet> metrics) {
    this.metrics = metrics;
  }


  public AnalysisData source(String source) {
    this.source = source;
    return this;
  }

  /**
   * Name of the Detector
   * @return source
   */
  @javax.annotation.Nullable
  public String getSource() {
    return source;
  }

  public void setSource(String source) {
    this.source = source;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AnalysisData analysisData = (AnalysisData) o;
    return Objects.equals(this.data, analysisData.data) &&
        Objects.equals(this.detectorDefinition, analysisData.detectorDefinition) &&
        Objects.equals(this.detectorMetaData, analysisData.detectorMetaData) &&
        Objects.equals(this.metrics, analysisData.metrics) &&
        Objects.equals(this.source, analysisData.source);
  }

  @Override
  public int hashCode() {
    return Objects.hash(data, detectorDefinition, detectorMetaData, metrics, source);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AnalysisData {\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("    detectorDefinition: ").append(toIndentedString(detectorDefinition)).append("\n");
    sb.append("    detectorMetaData: ").append(toIndentedString(detectorMetaData)).append("\n");
    sb.append("    metrics: ").append(toIndentedString(metrics)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("data");
    openapiFields.add("detectorDefinition");
    openapiFields.add("detectorMetaData");
    openapiFields.add("metrics");
    openapiFields.add("source");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AnalysisData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AnalysisData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AnalysisData is not found in the empty JSON string", AnalysisData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AnalysisData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AnalysisData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("data") != null && !jsonObj.get("data").isJsonNull() && !jsonObj.get("data").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `data` to be an array in the JSON string but got `%s`", jsonObj.get("data").toString()));
      }
      // validate the optional field `detectorDefinition`
      if (jsonObj.get("detectorDefinition") != null && !jsonObj.get("detectorDefinition").isJsonNull()) {
        DetectorDefinition.validateJsonElement(jsonObj.get("detectorDefinition"));
      }
      // validate the optional field `detectorMetaData`
      if (jsonObj.get("detectorMetaData") != null && !jsonObj.get("detectorMetaData").isJsonNull()) {
        ResponseMetaData.validateJsonElement(jsonObj.get("detectorMetaData"));
      }
      if (jsonObj.get("metrics") != null && !jsonObj.get("metrics").isJsonNull()) {
        JsonArray jsonArraymetrics = jsonObj.getAsJsonArray("metrics");
        if (jsonArraymetrics != null) {
          // ensure the json data is an array
          if (!jsonObj.get("metrics").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `metrics` to be an array in the JSON string but got `%s`", jsonObj.get("metrics").toString()));
          }

          // validate the optional field `metrics` (array)
          for (int i = 0; i < jsonArraymetrics.size(); i++) {
            DiagnosticMetricSet.validateJsonElement(jsonArraymetrics.get(i));
          };
        }
      }
      if ((jsonObj.get("source") != null && !jsonObj.get("source").isJsonNull()) && !jsonObj.get("source").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AnalysisData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AnalysisData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AnalysisData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AnalysisData.class));

       return (TypeAdapter<T>) new TypeAdapter<AnalysisData>() {
           @Override
           public void write(JsonWriter out, AnalysisData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AnalysisData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AnalysisData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AnalysisData
   * @throws IOException if the JSON string is invalid with respect to AnalysisData
   */
  public static AnalysisData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AnalysisData.class);
  }

  /**
   * Convert an instance of AnalysisData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

