# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.analysis_data_data_inner_inner import AnalysisDataDataInnerInner
from openapi_server import util


class Solution(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data: List[List[AnalysisDataDataInnerInner]]=None, description: str=None, display_name: str=None, id: float=None, metadata: List[List[AnalysisDataDataInnerInner]]=None, order: float=None, type: str=None):
        """Solution - a model defined in OpenAPI

        :param data: The data of this Solution.
        :param description: The description of this Solution.
        :param display_name: The display_name of this Solution.
        :param id: The id of this Solution.
        :param metadata: The metadata of this Solution.
        :param order: The order of this Solution.
        :param type: The type of this Solution.
        """
        self.openapi_types = {
            'data': List[List[AnalysisDataDataInnerInner]],
            'description': str,
            'display_name': str,
            'id': float,
            'metadata': List[List[AnalysisDataDataInnerInner]],
            'order': float,
            'type': str
        }

        self.attribute_map = {
            'data': 'data',
            'description': 'description',
            'display_name': 'displayName',
            'id': 'id',
            'metadata': 'metadata',
            'order': 'order',
            'type': 'type'
        }

        self._data = data
        self._description = description
        self._display_name = display_name
        self._id = id
        self._metadata = metadata
        self._order = order
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Solution':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Solution of this Solution.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data(self):
        """Gets the data of this Solution.

        Solution Data.

        :return: The data of this Solution.
        :rtype: List[List[AnalysisDataDataInnerInner]]
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this Solution.

        Solution Data.

        :param data: The data of this Solution.
        :type data: List[List[AnalysisDataDataInnerInner]]
        """

        self._data = data

    @property
    def description(self):
        """Gets the description of this Solution.

        Description of the solution

        :return: The description of this Solution.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Solution.

        Description of the solution

        :param description: The description of this Solution.
        :type description: str
        """

        self._description = description

    @property
    def display_name(self):
        """Gets the display_name of this Solution.

        Display Name of the solution

        :return: The display_name of this Solution.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this Solution.

        Display Name of the solution

        :param display_name: The display_name of this Solution.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def id(self):
        """Gets the id of this Solution.

        Solution Id.

        :return: The id of this Solution.
        :rtype: float
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Solution.

        Solution Id.

        :param id: The id of this Solution.
        :type id: float
        """

        self._id = id

    @property
    def metadata(self):
        """Gets the metadata of this Solution.

        Solution Metadata.

        :return: The metadata of this Solution.
        :rtype: List[List[AnalysisDataDataInnerInner]]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this Solution.

        Solution Metadata.

        :param metadata: The metadata of this Solution.
        :type metadata: List[List[AnalysisDataDataInnerInner]]
        """

        self._metadata = metadata

    @property
    def order(self):
        """Gets the order of this Solution.

        Order of the solution.

        :return: The order of this Solution.
        :rtype: float
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this Solution.

        Order of the solution.

        :param order: The order of this Solution.
        :type order: float
        """

        self._order = order

    @property
    def type(self):
        """Gets the type of this Solution.

        Type of Solution

        :return: The type of this Solution.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Solution.

        Type of Solution

        :param type: The type of this Solution.
        :type type: str
        """
        allowed_values = ["QuickSolution", "DeepInvestigation", "BestPractices"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
