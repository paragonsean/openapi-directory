# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.analysis_data_data_inner_inner import AnalysisDataDataInnerInner
from openapi_server.models.detector_definition import DetectorDefinition
from openapi_server.models.diagnostic_metric_set import DiagnosticMetricSet
from openapi_server.models.response_meta_data import ResponseMetaData
from openapi_server import util


class AnalysisData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data: List[List[AnalysisDataDataInnerInner]]=None, detector_definition: DetectorDefinition=None, detector_meta_data: ResponseMetaData=None, metrics: List[DiagnosticMetricSet]=None, source: str=None):
        """AnalysisData - a model defined in OpenAPI

        :param data: The data of this AnalysisData.
        :param detector_definition: The detector_definition of this AnalysisData.
        :param detector_meta_data: The detector_meta_data of this AnalysisData.
        :param metrics: The metrics of this AnalysisData.
        :param source: The source of this AnalysisData.
        """
        self.openapi_types = {
            'data': List[List[AnalysisDataDataInnerInner]],
            'detector_definition': DetectorDefinition,
            'detector_meta_data': ResponseMetaData,
            'metrics': List[DiagnosticMetricSet],
            'source': str
        }

        self.attribute_map = {
            'data': 'data',
            'detector_definition': 'detectorDefinition',
            'detector_meta_data': 'detectorMetaData',
            'metrics': 'metrics',
            'source': 'source'
        }

        self._data = data
        self._detector_definition = detector_definition
        self._detector_meta_data = detector_meta_data
        self._metrics = metrics
        self._source = source

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AnalysisData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AnalysisData of this AnalysisData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data(self):
        """Gets the data of this AnalysisData.

        Additional Source Data

        :return: The data of this AnalysisData.
        :rtype: List[List[AnalysisDataDataInnerInner]]
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this AnalysisData.

        Additional Source Data

        :param data: The data of this AnalysisData.
        :type data: List[List[AnalysisDataDataInnerInner]]
        """

        self._data = data

    @property
    def detector_definition(self):
        """Gets the detector_definition of this AnalysisData.


        :return: The detector_definition of this AnalysisData.
        :rtype: DetectorDefinition
        """
        return self._detector_definition

    @detector_definition.setter
    def detector_definition(self, detector_definition):
        """Sets the detector_definition of this AnalysisData.


        :param detector_definition: The detector_definition of this AnalysisData.
        :type detector_definition: DetectorDefinition
        """

        self._detector_definition = detector_definition

    @property
    def detector_meta_data(self):
        """Gets the detector_meta_data of this AnalysisData.


        :return: The detector_meta_data of this AnalysisData.
        :rtype: ResponseMetaData
        """
        return self._detector_meta_data

    @detector_meta_data.setter
    def detector_meta_data(self, detector_meta_data):
        """Sets the detector_meta_data of this AnalysisData.


        :param detector_meta_data: The detector_meta_data of this AnalysisData.
        :type detector_meta_data: ResponseMetaData
        """

        self._detector_meta_data = detector_meta_data

    @property
    def metrics(self):
        """Gets the metrics of this AnalysisData.

        Source Metrics

        :return: The metrics of this AnalysisData.
        :rtype: List[DiagnosticMetricSet]
        """
        return self._metrics

    @metrics.setter
    def metrics(self, metrics):
        """Sets the metrics of this AnalysisData.

        Source Metrics

        :param metrics: The metrics of this AnalysisData.
        :type metrics: List[DiagnosticMetricSet]
        """

        self._metrics = metrics

    @property
    def source(self):
        """Gets the source of this AnalysisData.

        Name of the Detector

        :return: The source of this AnalysisData.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this AnalysisData.

        Name of the Detector

        :param source: The source of this AnalysisData.
        :type source: str
        """

        self._source = source
