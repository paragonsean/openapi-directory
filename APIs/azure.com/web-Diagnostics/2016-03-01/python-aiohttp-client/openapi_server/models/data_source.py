# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.analysis_data_data_inner_inner import AnalysisDataDataInnerInner
from openapi_server import util


class DataSource(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data_source_uri: List[AnalysisDataDataInnerInner]=None, instructions: List[str]=None):
        """DataSource - a model defined in OpenAPI

        :param data_source_uri: The data_source_uri of this DataSource.
        :param instructions: The instructions of this DataSource.
        """
        self.openapi_types = {
            'data_source_uri': List[AnalysisDataDataInnerInner],
            'instructions': List[str]
        }

        self.attribute_map = {
            'data_source_uri': 'dataSourceUri',
            'instructions': 'instructions'
        }

        self._data_source_uri = data_source_uri
        self._instructions = instructions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DataSource':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DataSource of this DataSource.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_source_uri(self):
        """Gets the data_source_uri of this DataSource.

        Datasource Uri Links

        :return: The data_source_uri of this DataSource.
        :rtype: List[AnalysisDataDataInnerInner]
        """
        return self._data_source_uri

    @data_source_uri.setter
    def data_source_uri(self, data_source_uri):
        """Sets the data_source_uri of this DataSource.

        Datasource Uri Links

        :param data_source_uri: The data_source_uri of this DataSource.
        :type data_source_uri: List[AnalysisDataDataInnerInner]
        """

        self._data_source_uri = data_source_uri

    @property
    def instructions(self):
        """Gets the instructions of this DataSource.

        Instructions if any for the data source

        :return: The instructions of this DataSource.
        :rtype: List[str]
        """
        return self._instructions

    @instructions.setter
    def instructions(self, instructions):
        """Sets the instructions of this DataSource.

        Instructions if any for the data source

        :param instructions: The instructions of this DataSource.
        :type instructions: List[str]
        """

        self._instructions = instructions
