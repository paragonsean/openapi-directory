# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Rendering(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, rendering_type: str=None, title: str=None):
        """Rendering - a model defined in OpenAPI

        :param description: The description of this Rendering.
        :param rendering_type: The rendering_type of this Rendering.
        :param title: The title of this Rendering.
        """
        self.openapi_types = {
            'description': str,
            'rendering_type': str,
            'title': str
        }

        self.attribute_map = {
            'description': 'description',
            'rendering_type': 'renderingType',
            'title': 'title'
        }

        self._description = description
        self._rendering_type = rendering_type
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Rendering':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Rendering of this Rendering.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this Rendering.

        Description of the data that will help it be interpreted

        :return: The description of this Rendering.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Rendering.

        Description of the data that will help it be interpreted

        :param description: The description of this Rendering.
        :type description: str
        """

        self._description = description

    @property
    def rendering_type(self):
        """Gets the rendering_type of this Rendering.

        Rendering Type

        :return: The rendering_type of this Rendering.
        :rtype: str
        """
        return self._rendering_type

    @rendering_type.setter
    def rendering_type(self, rendering_type):
        """Sets the rendering_type of this Rendering.

        Rendering Type

        :param rendering_type: The rendering_type of this Rendering.
        :type rendering_type: str
        """
        allowed_values = ["NoGraph", "Table", "TimeSeries", "TimeSeriesPerInstance"]  # noqa: E501
        if rendering_type not in allowed_values:
            raise ValueError(
                "Invalid value for `rendering_type` ({0}), must be one of {1}"
                .format(rendering_type, allowed_values)
            )

        self._rendering_type = rendering_type

    @property
    def title(self):
        """Gets the title of this Rendering.

        Title of data

        :return: The title of this Rendering.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Rendering.

        Title of data

        :param title: The title of this Rendering.
        :type title: str
        """

        self._title = title
