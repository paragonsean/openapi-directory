/**
 * Diagnostics API Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-03-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDetectorInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDetectorInfo::OAIDetectorInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDetectorInfo::OAIDetectorInfo() {
    this->initializeModel();
}

OAIDetectorInfo::~OAIDetectorInfo() {}

void OAIDetectorInfo::initializeModel() {

    m_category_isSet = false;
    m_category_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_sub_category_isSet = false;
    m_sub_category_isValid = false;

    m_support_topic_id_isSet = false;
    m_support_topic_id_isValid = false;
}

void OAIDetectorInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDetectorInfo::fromJsonObject(QJsonObject json) {

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_sub_category_isValid = ::OpenAPI::fromJsonValue(m_sub_category, json[QString("subCategory")]);
    m_sub_category_isSet = !json[QString("subCategory")].isNull() && m_sub_category_isValid;

    m_support_topic_id_isValid = ::OpenAPI::fromJsonValue(m_support_topic_id, json[QString("supportTopicId")]);
    m_support_topic_id_isSet = !json[QString("supportTopicId")].isNull() && m_support_topic_id_isValid;
}

QString OAIDetectorInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDetectorInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_category_isSet) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_sub_category_isSet) {
        obj.insert(QString("subCategory"), ::OpenAPI::toJsonValue(m_sub_category));
    }
    if (m_support_topic_id_isSet) {
        obj.insert(QString("supportTopicId"), ::OpenAPI::toJsonValue(m_support_topic_id));
    }
    return obj;
}

QString OAIDetectorInfo::getCategory() const {
    return m_category;
}
void OAIDetectorInfo::setCategory(const QString &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAIDetectorInfo::is_category_Set() const{
    return m_category_isSet;
}

bool OAIDetectorInfo::is_category_Valid() const{
    return m_category_isValid;
}

QString OAIDetectorInfo::getDescription() const {
    return m_description;
}
void OAIDetectorInfo::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIDetectorInfo::is_description_Set() const{
    return m_description_isSet;
}

bool OAIDetectorInfo::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIDetectorInfo::getSubCategory() const {
    return m_sub_category;
}
void OAIDetectorInfo::setSubCategory(const QString &sub_category) {
    m_sub_category = sub_category;
    m_sub_category_isSet = true;
}

bool OAIDetectorInfo::is_sub_category_Set() const{
    return m_sub_category_isSet;
}

bool OAIDetectorInfo::is_sub_category_Valid() const{
    return m_sub_category_isValid;
}

QString OAIDetectorInfo::getSupportTopicId() const {
    return m_support_topic_id;
}
void OAIDetectorInfo::setSupportTopicId(const QString &support_topic_id) {
    m_support_topic_id = support_topic_id;
    m_support_topic_id_isSet = true;
}

bool OAIDetectorInfo::is_support_topic_id_Set() const{
    return m_support_topic_id_isSet;
}

bool OAIDetectorInfo::is_support_topic_id_Valid() const{
    return m_support_topic_id_isValid;
}

bool OAIDetectorInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_support_topic_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDetectorInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
