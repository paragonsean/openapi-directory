/**
 * Diagnostics API Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-03-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDiagnosticMetricSample.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDiagnosticMetricSample::OAIDiagnosticMetricSample(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDiagnosticMetricSample::OAIDiagnosticMetricSample() {
    this->initializeModel();
}

OAIDiagnosticMetricSample::~OAIDiagnosticMetricSample() {}

void OAIDiagnosticMetricSample::initializeModel() {

    m_is_aggregated_isSet = false;
    m_is_aggregated_isValid = false;

    m_maximum_isSet = false;
    m_maximum_isValid = false;

    m_minimum_isSet = false;
    m_minimum_isValid = false;

    m_role_instance_isSet = false;
    m_role_instance_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;

    m_total_isSet = false;
    m_total_isValid = false;
}

void OAIDiagnosticMetricSample::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDiagnosticMetricSample::fromJsonObject(QJsonObject json) {

    m_is_aggregated_isValid = ::OpenAPI::fromJsonValue(m_is_aggregated, json[QString("isAggregated")]);
    m_is_aggregated_isSet = !json[QString("isAggregated")].isNull() && m_is_aggregated_isValid;

    m_maximum_isValid = ::OpenAPI::fromJsonValue(m_maximum, json[QString("maximum")]);
    m_maximum_isSet = !json[QString("maximum")].isNull() && m_maximum_isValid;

    m_minimum_isValid = ::OpenAPI::fromJsonValue(m_minimum, json[QString("minimum")]);
    m_minimum_isSet = !json[QString("minimum")].isNull() && m_minimum_isValid;

    m_role_instance_isValid = ::OpenAPI::fromJsonValue(m_role_instance, json[QString("roleInstance")]);
    m_role_instance_isSet = !json[QString("roleInstance")].isNull() && m_role_instance_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;

    m_total_isValid = ::OpenAPI::fromJsonValue(m_total, json[QString("total")]);
    m_total_isSet = !json[QString("total")].isNull() && m_total_isValid;
}

QString OAIDiagnosticMetricSample::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDiagnosticMetricSample::asJsonObject() const {
    QJsonObject obj;
    if (m_is_aggregated_isSet) {
        obj.insert(QString("isAggregated"), ::OpenAPI::toJsonValue(m_is_aggregated));
    }
    if (m_maximum_isSet) {
        obj.insert(QString("maximum"), ::OpenAPI::toJsonValue(m_maximum));
    }
    if (m_minimum_isSet) {
        obj.insert(QString("minimum"), ::OpenAPI::toJsonValue(m_minimum));
    }
    if (m_role_instance_isSet) {
        obj.insert(QString("roleInstance"), ::OpenAPI::toJsonValue(m_role_instance));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    if (m_total_isSet) {
        obj.insert(QString("total"), ::OpenAPI::toJsonValue(m_total));
    }
    return obj;
}

bool OAIDiagnosticMetricSample::isIsAggregated() const {
    return m_is_aggregated;
}
void OAIDiagnosticMetricSample::setIsAggregated(const bool &is_aggregated) {
    m_is_aggregated = is_aggregated;
    m_is_aggregated_isSet = true;
}

bool OAIDiagnosticMetricSample::is_is_aggregated_Set() const{
    return m_is_aggregated_isSet;
}

bool OAIDiagnosticMetricSample::is_is_aggregated_Valid() const{
    return m_is_aggregated_isValid;
}

double OAIDiagnosticMetricSample::getMaximum() const {
    return m_maximum;
}
void OAIDiagnosticMetricSample::setMaximum(const double &maximum) {
    m_maximum = maximum;
    m_maximum_isSet = true;
}

bool OAIDiagnosticMetricSample::is_maximum_Set() const{
    return m_maximum_isSet;
}

bool OAIDiagnosticMetricSample::is_maximum_Valid() const{
    return m_maximum_isValid;
}

double OAIDiagnosticMetricSample::getMinimum() const {
    return m_minimum;
}
void OAIDiagnosticMetricSample::setMinimum(const double &minimum) {
    m_minimum = minimum;
    m_minimum_isSet = true;
}

bool OAIDiagnosticMetricSample::is_minimum_Set() const{
    return m_minimum_isSet;
}

bool OAIDiagnosticMetricSample::is_minimum_Valid() const{
    return m_minimum_isValid;
}

QString OAIDiagnosticMetricSample::getRoleInstance() const {
    return m_role_instance;
}
void OAIDiagnosticMetricSample::setRoleInstance(const QString &role_instance) {
    m_role_instance = role_instance;
    m_role_instance_isSet = true;
}

bool OAIDiagnosticMetricSample::is_role_instance_Set() const{
    return m_role_instance_isSet;
}

bool OAIDiagnosticMetricSample::is_role_instance_Valid() const{
    return m_role_instance_isValid;
}

QDateTime OAIDiagnosticMetricSample::getTimestamp() const {
    return m_timestamp;
}
void OAIDiagnosticMetricSample::setTimestamp(const QDateTime &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAIDiagnosticMetricSample::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAIDiagnosticMetricSample::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

double OAIDiagnosticMetricSample::getTotal() const {
    return m_total;
}
void OAIDiagnosticMetricSample::setTotal(const double &total) {
    m_total = total;
    m_total_isSet = true;
}

bool OAIDiagnosticMetricSample::is_total_Set() const{
    return m_total_isSet;
}

bool OAIDiagnosticMetricSample::is_total_Valid() const{
    return m_total_isValid;
}

bool OAIDiagnosticMetricSample::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_is_aggregated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_maximum_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_minimum_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_instance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDiagnosticMetricSample::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
