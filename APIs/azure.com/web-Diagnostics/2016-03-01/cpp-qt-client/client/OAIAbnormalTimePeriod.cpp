/**
 * Diagnostics API Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-03-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAbnormalTimePeriod.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAbnormalTimePeriod::OAIAbnormalTimePeriod(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAbnormalTimePeriod::OAIAbnormalTimePeriod() {
    this->initializeModel();
}

OAIAbnormalTimePeriod::~OAIAbnormalTimePeriod() {}

void OAIAbnormalTimePeriod::initializeModel() {

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_events_isSet = false;
    m_events_isValid = false;

    m_solutions_isSet = false;
    m_solutions_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;
}

void OAIAbnormalTimePeriod::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAbnormalTimePeriod::fromJsonObject(QJsonObject json) {

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("endTime")]);
    m_end_time_isSet = !json[QString("endTime")].isNull() && m_end_time_isValid;

    m_events_isValid = ::OpenAPI::fromJsonValue(m_events, json[QString("events")]);
    m_events_isSet = !json[QString("events")].isNull() && m_events_isValid;

    m_solutions_isValid = ::OpenAPI::fromJsonValue(m_solutions, json[QString("solutions")]);
    m_solutions_isSet = !json[QString("solutions")].isNull() && m_solutions_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;
}

QString OAIAbnormalTimePeriod::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAbnormalTimePeriod::asJsonObject() const {
    QJsonObject obj;
    if (m_end_time_isSet) {
        obj.insert(QString("endTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_events.size() > 0) {
        obj.insert(QString("events"), ::OpenAPI::toJsonValue(m_events));
    }
    if (m_solutions.size() > 0) {
        obj.insert(QString("solutions"), ::OpenAPI::toJsonValue(m_solutions));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    return obj;
}

QDateTime OAIAbnormalTimePeriod::getEndTime() const {
    return m_end_time;
}
void OAIAbnormalTimePeriod::setEndTime(const QDateTime &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIAbnormalTimePeriod::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIAbnormalTimePeriod::is_end_time_Valid() const{
    return m_end_time_isValid;
}

QList<OAIDetectorAbnormalTimePeriod> OAIAbnormalTimePeriod::getEvents() const {
    return m_events;
}
void OAIAbnormalTimePeriod::setEvents(const QList<OAIDetectorAbnormalTimePeriod> &events) {
    m_events = events;
    m_events_isSet = true;
}

bool OAIAbnormalTimePeriod::is_events_Set() const{
    return m_events_isSet;
}

bool OAIAbnormalTimePeriod::is_events_Valid() const{
    return m_events_isValid;
}

QList<OAISolution> OAIAbnormalTimePeriod::getSolutions() const {
    return m_solutions;
}
void OAIAbnormalTimePeriod::setSolutions(const QList<OAISolution> &solutions) {
    m_solutions = solutions;
    m_solutions_isSet = true;
}

bool OAIAbnormalTimePeriod::is_solutions_Set() const{
    return m_solutions_isSet;
}

bool OAIAbnormalTimePeriod::is_solutions_Valid() const{
    return m_solutions_isValid;
}

QDateTime OAIAbnormalTimePeriod::getStartTime() const {
    return m_start_time;
}
void OAIAbnormalTimePeriod::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIAbnormalTimePeriod::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIAbnormalTimePeriod::is_start_time_Valid() const{
    return m_start_time_isValid;
}

bool OAIAbnormalTimePeriod::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_events.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_solutions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAbnormalTimePeriod::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
