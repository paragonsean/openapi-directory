/**
 * Diagnostics API Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-03-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDiagnosticsApi_H
#define OAI_OAIDiagnosticsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIDetectorResponse.h"
#include "OAIDetectorResponseCollection.h"
#include "OAIDiagnosticAnalysis.h"
#include "OAIDiagnosticAnalysisCollection.h"
#include "OAIDiagnosticCategory.h"
#include "OAIDiagnosticCategoryCollection.h"
#include "OAIDiagnosticDetectorCollection.h"
#include "OAIDiagnosticDetectorResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDiagnosticsApi : public QObject {
    Q_OBJECT

public:
    OAIDiagnosticsApi(const int timeOut = 0);
    ~OAIDiagnosticsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  site_name QString [required]
    * @param[in]  diagnostic_category QString [required]
    * @param[in]  analysis_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  start_time QDateTime [optional]
    * @param[in]  end_time QDateTime [optional]
    * @param[in]  time_grain QString [optional]
    */
    virtual void diagnosticsExecuteSiteAnalysis(const QString &resource_group_name, const QString &site_name, const QString &diagnostic_category, const QString &analysis_name, const QString &subscription_id, const QString &api_version, const ::OpenAPI::OptionalParam<QDateTime> &start_time = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &end_time = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &time_grain = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  site_name QString [required]
    * @param[in]  diagnostic_category QString [required]
    * @param[in]  analysis_name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  start_time QDateTime [optional]
    * @param[in]  end_time QDateTime [optional]
    * @param[in]  time_grain QString [optional]
    */
    virtual void diagnosticsExecuteSiteAnalysisSlot(const QString &resource_group_name, const QString &site_name, const QString &diagnostic_category, const QString &analysis_name, const QString &slot, const QString &subscription_id, const QString &api_version, const ::OpenAPI::OptionalParam<QDateTime> &start_time = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &end_time = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &time_grain = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  site_name QString [required]
    * @param[in]  detector_name QString [required]
    * @param[in]  diagnostic_category QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  start_time QDateTime [optional]
    * @param[in]  end_time QDateTime [optional]
    * @param[in]  time_grain QString [optional]
    */
    virtual void diagnosticsExecuteSiteDetector(const QString &resource_group_name, const QString &site_name, const QString &detector_name, const QString &diagnostic_category, const QString &subscription_id, const QString &api_version, const ::OpenAPI::OptionalParam<QDateTime> &start_time = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &end_time = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &time_grain = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  site_name QString [required]
    * @param[in]  detector_name QString [required]
    * @param[in]  diagnostic_category QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  start_time QDateTime [optional]
    * @param[in]  end_time QDateTime [optional]
    * @param[in]  time_grain QString [optional]
    */
    virtual void diagnosticsExecuteSiteDetectorSlot(const QString &resource_group_name, const QString &site_name, const QString &detector_name, const QString &diagnostic_category, const QString &slot, const QString &subscription_id, const QString &api_version, const ::OpenAPI::OptionalParam<QDateTime> &start_time = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &end_time = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &time_grain = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  detector_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  start_time QDateTime [optional]
    * @param[in]  end_time QDateTime [optional]
    * @param[in]  time_grain QString [optional]
    */
    virtual void diagnosticsGetHostingEnvironmentDetectorResponse(const QString &resource_group_name, const QString &name, const QString &detector_name, const QString &subscription_id, const QString &api_version, const ::OpenAPI::OptionalParam<QDateTime> &start_time = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &end_time = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &time_grain = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  site_name QString [required]
    * @param[in]  diagnostic_category QString [required]
    * @param[in]  analysis_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void diagnosticsGetSiteAnalysis(const QString &resource_group_name, const QString &site_name, const QString &diagnostic_category, const QString &analysis_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  site_name QString [required]
    * @param[in]  diagnostic_category QString [required]
    * @param[in]  analysis_name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void diagnosticsGetSiteAnalysisSlot(const QString &resource_group_name, const QString &site_name, const QString &diagnostic_category, const QString &analysis_name, const QString &slot, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  site_name QString [required]
    * @param[in]  diagnostic_category QString [required]
    * @param[in]  detector_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void diagnosticsGetSiteDetector(const QString &resource_group_name, const QString &site_name, const QString &diagnostic_category, const QString &detector_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  site_name QString [required]
    * @param[in]  detector_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  start_time QDateTime [optional]
    * @param[in]  end_time QDateTime [optional]
    * @param[in]  time_grain QString [optional]
    */
    virtual void diagnosticsGetSiteDetectorResponse(const QString &resource_group_name, const QString &site_name, const QString &detector_name, const QString &subscription_id, const QString &api_version, const ::OpenAPI::OptionalParam<QDateTime> &start_time = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &end_time = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &time_grain = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  site_name QString [required]
    * @param[in]  detector_name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  start_time QDateTime [optional]
    * @param[in]  end_time QDateTime [optional]
    * @param[in]  time_grain QString [optional]
    */
    virtual void diagnosticsGetSiteDetectorResponseSlot(const QString &resource_group_name, const QString &site_name, const QString &detector_name, const QString &slot, const QString &subscription_id, const QString &api_version, const ::OpenAPI::OptionalParam<QDateTime> &start_time = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &end_time = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &time_grain = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  site_name QString [required]
    * @param[in]  diagnostic_category QString [required]
    * @param[in]  detector_name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void diagnosticsGetSiteDetectorSlot(const QString &resource_group_name, const QString &site_name, const QString &diagnostic_category, const QString &detector_name, const QString &slot, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  site_name QString [required]
    * @param[in]  diagnostic_category QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void diagnosticsGetSiteDiagnosticCategory(const QString &resource_group_name, const QString &site_name, const QString &diagnostic_category, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  site_name QString [required]
    * @param[in]  diagnostic_category QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void diagnosticsGetSiteDiagnosticCategorySlot(const QString &resource_group_name, const QString &site_name, const QString &diagnostic_category, const QString &slot, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void diagnosticsListHostingEnvironmentDetectorResponses(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  site_name QString [required]
    * @param[in]  diagnostic_category QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void diagnosticsListSiteAnalyses(const QString &resource_group_name, const QString &site_name, const QString &diagnostic_category, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  site_name QString [required]
    * @param[in]  diagnostic_category QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void diagnosticsListSiteAnalysesSlot(const QString &resource_group_name, const QString &site_name, const QString &diagnostic_category, const QString &slot, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  site_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void diagnosticsListSiteDetectorResponses(const QString &resource_group_name, const QString &site_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  site_name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void diagnosticsListSiteDetectorResponsesSlot(const QString &resource_group_name, const QString &site_name, const QString &slot, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  site_name QString [required]
    * @param[in]  diagnostic_category QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void diagnosticsListSiteDetectors(const QString &resource_group_name, const QString &site_name, const QString &diagnostic_category, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  site_name QString [required]
    * @param[in]  diagnostic_category QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void diagnosticsListSiteDetectorsSlot(const QString &resource_group_name, const QString &site_name, const QString &diagnostic_category, const QString &slot, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  site_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void diagnosticsListSiteDiagnosticCategories(const QString &resource_group_name, const QString &site_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  site_name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void diagnosticsListSiteDiagnosticCategoriesSlot(const QString &resource_group_name, const QString &site_name, const QString &slot, const QString &subscription_id, const QString &api_version);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void diagnosticsExecuteSiteAnalysisCallback(OAIHttpRequestWorker *worker);
    void diagnosticsExecuteSiteAnalysisSlotCallback(OAIHttpRequestWorker *worker);
    void diagnosticsExecuteSiteDetectorCallback(OAIHttpRequestWorker *worker);
    void diagnosticsExecuteSiteDetectorSlotCallback(OAIHttpRequestWorker *worker);
    void diagnosticsGetHostingEnvironmentDetectorResponseCallback(OAIHttpRequestWorker *worker);
    void diagnosticsGetSiteAnalysisCallback(OAIHttpRequestWorker *worker);
    void diagnosticsGetSiteAnalysisSlotCallback(OAIHttpRequestWorker *worker);
    void diagnosticsGetSiteDetectorCallback(OAIHttpRequestWorker *worker);
    void diagnosticsGetSiteDetectorResponseCallback(OAIHttpRequestWorker *worker);
    void diagnosticsGetSiteDetectorResponseSlotCallback(OAIHttpRequestWorker *worker);
    void diagnosticsGetSiteDetectorSlotCallback(OAIHttpRequestWorker *worker);
    void diagnosticsGetSiteDiagnosticCategoryCallback(OAIHttpRequestWorker *worker);
    void diagnosticsGetSiteDiagnosticCategorySlotCallback(OAIHttpRequestWorker *worker);
    void diagnosticsListHostingEnvironmentDetectorResponsesCallback(OAIHttpRequestWorker *worker);
    void diagnosticsListSiteAnalysesCallback(OAIHttpRequestWorker *worker);
    void diagnosticsListSiteAnalysesSlotCallback(OAIHttpRequestWorker *worker);
    void diagnosticsListSiteDetectorResponsesCallback(OAIHttpRequestWorker *worker);
    void diagnosticsListSiteDetectorResponsesSlotCallback(OAIHttpRequestWorker *worker);
    void diagnosticsListSiteDetectorsCallback(OAIHttpRequestWorker *worker);
    void diagnosticsListSiteDetectorsSlotCallback(OAIHttpRequestWorker *worker);
    void diagnosticsListSiteDiagnosticCategoriesCallback(OAIHttpRequestWorker *worker);
    void diagnosticsListSiteDiagnosticCategoriesSlotCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void diagnosticsExecuteSiteAnalysisSignal(OAIDiagnosticAnalysis summary);
    void diagnosticsExecuteSiteAnalysisSlotSignal(OAIDiagnosticAnalysis summary);
    void diagnosticsExecuteSiteDetectorSignal(OAIDiagnosticDetectorResponse summary);
    void diagnosticsExecuteSiteDetectorSlotSignal(OAIDiagnosticDetectorResponse summary);
    void diagnosticsGetHostingEnvironmentDetectorResponseSignal(OAIDetectorResponse summary);
    void diagnosticsGetSiteAnalysisSignal(OAIDiagnosticAnalysis summary);
    void diagnosticsGetSiteAnalysisSlotSignal(OAIDiagnosticAnalysis summary);
    void diagnosticsGetSiteDetectorSignal(OAIDiagnosticDetectorCollection summary);
    void diagnosticsGetSiteDetectorResponseSignal(OAIDetectorResponse summary);
    void diagnosticsGetSiteDetectorResponseSlotSignal(OAIDetectorResponse summary);
    void diagnosticsGetSiteDetectorSlotSignal(OAIDiagnosticDetectorCollection summary);
    void diagnosticsGetSiteDiagnosticCategorySignal(OAIDiagnosticCategory summary);
    void diagnosticsGetSiteDiagnosticCategorySlotSignal(OAIDiagnosticCategory summary);
    void diagnosticsListHostingEnvironmentDetectorResponsesSignal(OAIDetectorResponseCollection summary);
    void diagnosticsListSiteAnalysesSignal(OAIDiagnosticAnalysisCollection summary);
    void diagnosticsListSiteAnalysesSlotSignal(OAIDiagnosticAnalysisCollection summary);
    void diagnosticsListSiteDetectorResponsesSignal(OAIDetectorResponseCollection summary);
    void diagnosticsListSiteDetectorResponsesSlotSignal(OAIDetectorResponseCollection summary);
    void diagnosticsListSiteDetectorsSignal(OAIDiagnosticDetectorCollection summary);
    void diagnosticsListSiteDetectorsSlotSignal(OAIDiagnosticDetectorCollection summary);
    void diagnosticsListSiteDiagnosticCategoriesSignal(OAIDiagnosticCategoryCollection summary);
    void diagnosticsListSiteDiagnosticCategoriesSlotSignal(OAIDiagnosticCategoryCollection summary);


    void diagnosticsExecuteSiteAnalysisSignalFull(OAIHttpRequestWorker *worker, OAIDiagnosticAnalysis summary);
    void diagnosticsExecuteSiteAnalysisSlotSignalFull(OAIHttpRequestWorker *worker, OAIDiagnosticAnalysis summary);
    void diagnosticsExecuteSiteDetectorSignalFull(OAIHttpRequestWorker *worker, OAIDiagnosticDetectorResponse summary);
    void diagnosticsExecuteSiteDetectorSlotSignalFull(OAIHttpRequestWorker *worker, OAIDiagnosticDetectorResponse summary);
    void diagnosticsGetHostingEnvironmentDetectorResponseSignalFull(OAIHttpRequestWorker *worker, OAIDetectorResponse summary);
    void diagnosticsGetSiteAnalysisSignalFull(OAIHttpRequestWorker *worker, OAIDiagnosticAnalysis summary);
    void diagnosticsGetSiteAnalysisSlotSignalFull(OAIHttpRequestWorker *worker, OAIDiagnosticAnalysis summary);
    void diagnosticsGetSiteDetectorSignalFull(OAIHttpRequestWorker *worker, OAIDiagnosticDetectorCollection summary);
    void diagnosticsGetSiteDetectorResponseSignalFull(OAIHttpRequestWorker *worker, OAIDetectorResponse summary);
    void diagnosticsGetSiteDetectorResponseSlotSignalFull(OAIHttpRequestWorker *worker, OAIDetectorResponse summary);
    void diagnosticsGetSiteDetectorSlotSignalFull(OAIHttpRequestWorker *worker, OAIDiagnosticDetectorCollection summary);
    void diagnosticsGetSiteDiagnosticCategorySignalFull(OAIHttpRequestWorker *worker, OAIDiagnosticCategory summary);
    void diagnosticsGetSiteDiagnosticCategorySlotSignalFull(OAIHttpRequestWorker *worker, OAIDiagnosticCategory summary);
    void diagnosticsListHostingEnvironmentDetectorResponsesSignalFull(OAIHttpRequestWorker *worker, OAIDetectorResponseCollection summary);
    void diagnosticsListSiteAnalysesSignalFull(OAIHttpRequestWorker *worker, OAIDiagnosticAnalysisCollection summary);
    void diagnosticsListSiteAnalysesSlotSignalFull(OAIHttpRequestWorker *worker, OAIDiagnosticAnalysisCollection summary);
    void diagnosticsListSiteDetectorResponsesSignalFull(OAIHttpRequestWorker *worker, OAIDetectorResponseCollection summary);
    void diagnosticsListSiteDetectorResponsesSlotSignalFull(OAIHttpRequestWorker *worker, OAIDetectorResponseCollection summary);
    void diagnosticsListSiteDetectorsSignalFull(OAIHttpRequestWorker *worker, OAIDiagnosticDetectorCollection summary);
    void diagnosticsListSiteDetectorsSlotSignalFull(OAIHttpRequestWorker *worker, OAIDiagnosticDetectorCollection summary);
    void diagnosticsListSiteDiagnosticCategoriesSignalFull(OAIHttpRequestWorker *worker, OAIDiagnosticCategoryCollection summary);
    void diagnosticsListSiteDiagnosticCategoriesSlotSignalFull(OAIHttpRequestWorker *worker, OAIDiagnosticCategoryCollection summary);

    Q_DECL_DEPRECATED_X("Use diagnosticsExecuteSiteAnalysisSignalError() instead")
    void diagnosticsExecuteSiteAnalysisSignalE(OAIDiagnosticAnalysis summary, QNetworkReply::NetworkError error_type, QString error_str);
    void diagnosticsExecuteSiteAnalysisSignalError(OAIDiagnosticAnalysis summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use diagnosticsExecuteSiteAnalysisSlotSignalError() instead")
    void diagnosticsExecuteSiteAnalysisSlotSignalE(OAIDiagnosticAnalysis summary, QNetworkReply::NetworkError error_type, QString error_str);
    void diagnosticsExecuteSiteAnalysisSlotSignalError(OAIDiagnosticAnalysis summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use diagnosticsExecuteSiteDetectorSignalError() instead")
    void diagnosticsExecuteSiteDetectorSignalE(OAIDiagnosticDetectorResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void diagnosticsExecuteSiteDetectorSignalError(OAIDiagnosticDetectorResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use diagnosticsExecuteSiteDetectorSlotSignalError() instead")
    void diagnosticsExecuteSiteDetectorSlotSignalE(OAIDiagnosticDetectorResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void diagnosticsExecuteSiteDetectorSlotSignalError(OAIDiagnosticDetectorResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use diagnosticsGetHostingEnvironmentDetectorResponseSignalError() instead")
    void diagnosticsGetHostingEnvironmentDetectorResponseSignalE(OAIDetectorResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void diagnosticsGetHostingEnvironmentDetectorResponseSignalError(OAIDetectorResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use diagnosticsGetSiteAnalysisSignalError() instead")
    void diagnosticsGetSiteAnalysisSignalE(OAIDiagnosticAnalysis summary, QNetworkReply::NetworkError error_type, QString error_str);
    void diagnosticsGetSiteAnalysisSignalError(OAIDiagnosticAnalysis summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use diagnosticsGetSiteAnalysisSlotSignalError() instead")
    void diagnosticsGetSiteAnalysisSlotSignalE(OAIDiagnosticAnalysis summary, QNetworkReply::NetworkError error_type, QString error_str);
    void diagnosticsGetSiteAnalysisSlotSignalError(OAIDiagnosticAnalysis summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use diagnosticsGetSiteDetectorSignalError() instead")
    void diagnosticsGetSiteDetectorSignalE(OAIDiagnosticDetectorCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void diagnosticsGetSiteDetectorSignalError(OAIDiagnosticDetectorCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use diagnosticsGetSiteDetectorResponseSignalError() instead")
    void diagnosticsGetSiteDetectorResponseSignalE(OAIDetectorResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void diagnosticsGetSiteDetectorResponseSignalError(OAIDetectorResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use diagnosticsGetSiteDetectorResponseSlotSignalError() instead")
    void diagnosticsGetSiteDetectorResponseSlotSignalE(OAIDetectorResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void diagnosticsGetSiteDetectorResponseSlotSignalError(OAIDetectorResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use diagnosticsGetSiteDetectorSlotSignalError() instead")
    void diagnosticsGetSiteDetectorSlotSignalE(OAIDiagnosticDetectorCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void diagnosticsGetSiteDetectorSlotSignalError(OAIDiagnosticDetectorCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use diagnosticsGetSiteDiagnosticCategorySignalError() instead")
    void diagnosticsGetSiteDiagnosticCategorySignalE(OAIDiagnosticCategory summary, QNetworkReply::NetworkError error_type, QString error_str);
    void diagnosticsGetSiteDiagnosticCategorySignalError(OAIDiagnosticCategory summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use diagnosticsGetSiteDiagnosticCategorySlotSignalError() instead")
    void diagnosticsGetSiteDiagnosticCategorySlotSignalE(OAIDiagnosticCategory summary, QNetworkReply::NetworkError error_type, QString error_str);
    void diagnosticsGetSiteDiagnosticCategorySlotSignalError(OAIDiagnosticCategory summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use diagnosticsListHostingEnvironmentDetectorResponsesSignalError() instead")
    void diagnosticsListHostingEnvironmentDetectorResponsesSignalE(OAIDetectorResponseCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void diagnosticsListHostingEnvironmentDetectorResponsesSignalError(OAIDetectorResponseCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use diagnosticsListSiteAnalysesSignalError() instead")
    void diagnosticsListSiteAnalysesSignalE(OAIDiagnosticAnalysisCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void diagnosticsListSiteAnalysesSignalError(OAIDiagnosticAnalysisCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use diagnosticsListSiteAnalysesSlotSignalError() instead")
    void diagnosticsListSiteAnalysesSlotSignalE(OAIDiagnosticAnalysisCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void diagnosticsListSiteAnalysesSlotSignalError(OAIDiagnosticAnalysisCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use diagnosticsListSiteDetectorResponsesSignalError() instead")
    void diagnosticsListSiteDetectorResponsesSignalE(OAIDetectorResponseCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void diagnosticsListSiteDetectorResponsesSignalError(OAIDetectorResponseCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use diagnosticsListSiteDetectorResponsesSlotSignalError() instead")
    void diagnosticsListSiteDetectorResponsesSlotSignalE(OAIDetectorResponseCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void diagnosticsListSiteDetectorResponsesSlotSignalError(OAIDetectorResponseCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use diagnosticsListSiteDetectorsSignalError() instead")
    void diagnosticsListSiteDetectorsSignalE(OAIDiagnosticDetectorCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void diagnosticsListSiteDetectorsSignalError(OAIDiagnosticDetectorCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use diagnosticsListSiteDetectorsSlotSignalError() instead")
    void diagnosticsListSiteDetectorsSlotSignalE(OAIDiagnosticDetectorCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void diagnosticsListSiteDetectorsSlotSignalError(OAIDiagnosticDetectorCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use diagnosticsListSiteDiagnosticCategoriesSignalError() instead")
    void diagnosticsListSiteDiagnosticCategoriesSignalE(OAIDiagnosticCategoryCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void diagnosticsListSiteDiagnosticCategoriesSignalError(OAIDiagnosticCategoryCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use diagnosticsListSiteDiagnosticCategoriesSlotSignalError() instead")
    void diagnosticsListSiteDiagnosticCategoriesSlotSignalE(OAIDiagnosticCategoryCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void diagnosticsListSiteDiagnosticCategoriesSlotSignalError(OAIDiagnosticCategoryCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use diagnosticsExecuteSiteAnalysisSignalErrorFull() instead")
    void diagnosticsExecuteSiteAnalysisSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void diagnosticsExecuteSiteAnalysisSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use diagnosticsExecuteSiteAnalysisSlotSignalErrorFull() instead")
    void diagnosticsExecuteSiteAnalysisSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void diagnosticsExecuteSiteAnalysisSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use diagnosticsExecuteSiteDetectorSignalErrorFull() instead")
    void diagnosticsExecuteSiteDetectorSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void diagnosticsExecuteSiteDetectorSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use diagnosticsExecuteSiteDetectorSlotSignalErrorFull() instead")
    void diagnosticsExecuteSiteDetectorSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void diagnosticsExecuteSiteDetectorSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use diagnosticsGetHostingEnvironmentDetectorResponseSignalErrorFull() instead")
    void diagnosticsGetHostingEnvironmentDetectorResponseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void diagnosticsGetHostingEnvironmentDetectorResponseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use diagnosticsGetSiteAnalysisSignalErrorFull() instead")
    void diagnosticsGetSiteAnalysisSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void diagnosticsGetSiteAnalysisSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use diagnosticsGetSiteAnalysisSlotSignalErrorFull() instead")
    void diagnosticsGetSiteAnalysisSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void diagnosticsGetSiteAnalysisSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use diagnosticsGetSiteDetectorSignalErrorFull() instead")
    void diagnosticsGetSiteDetectorSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void diagnosticsGetSiteDetectorSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use diagnosticsGetSiteDetectorResponseSignalErrorFull() instead")
    void diagnosticsGetSiteDetectorResponseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void diagnosticsGetSiteDetectorResponseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use diagnosticsGetSiteDetectorResponseSlotSignalErrorFull() instead")
    void diagnosticsGetSiteDetectorResponseSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void diagnosticsGetSiteDetectorResponseSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use diagnosticsGetSiteDetectorSlotSignalErrorFull() instead")
    void diagnosticsGetSiteDetectorSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void diagnosticsGetSiteDetectorSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use diagnosticsGetSiteDiagnosticCategorySignalErrorFull() instead")
    void diagnosticsGetSiteDiagnosticCategorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void diagnosticsGetSiteDiagnosticCategorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use diagnosticsGetSiteDiagnosticCategorySlotSignalErrorFull() instead")
    void diagnosticsGetSiteDiagnosticCategorySlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void diagnosticsGetSiteDiagnosticCategorySlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use diagnosticsListHostingEnvironmentDetectorResponsesSignalErrorFull() instead")
    void diagnosticsListHostingEnvironmentDetectorResponsesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void diagnosticsListHostingEnvironmentDetectorResponsesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use diagnosticsListSiteAnalysesSignalErrorFull() instead")
    void diagnosticsListSiteAnalysesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void diagnosticsListSiteAnalysesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use diagnosticsListSiteAnalysesSlotSignalErrorFull() instead")
    void diagnosticsListSiteAnalysesSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void diagnosticsListSiteAnalysesSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use diagnosticsListSiteDetectorResponsesSignalErrorFull() instead")
    void diagnosticsListSiteDetectorResponsesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void diagnosticsListSiteDetectorResponsesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use diagnosticsListSiteDetectorResponsesSlotSignalErrorFull() instead")
    void diagnosticsListSiteDetectorResponsesSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void diagnosticsListSiteDetectorResponsesSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use diagnosticsListSiteDetectorsSignalErrorFull() instead")
    void diagnosticsListSiteDetectorsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void diagnosticsListSiteDetectorsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use diagnosticsListSiteDetectorsSlotSignalErrorFull() instead")
    void diagnosticsListSiteDetectorsSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void diagnosticsListSiteDetectorsSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use diagnosticsListSiteDiagnosticCategoriesSignalErrorFull() instead")
    void diagnosticsListSiteDiagnosticCategoriesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void diagnosticsListSiteDiagnosticCategoriesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use diagnosticsListSiteDiagnosticCategoriesSlotSignalErrorFull() instead")
    void diagnosticsListSiteDiagnosticCategoriesSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void diagnosticsListSiteDiagnosticCategoriesSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
