/**
 * Diagnostics API Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-03-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AnalysisDataDataInnerInner from './AnalysisDataDataInnerInner';
import DetectorDefinition from './DetectorDefinition';
import DiagnosticMetricSet from './DiagnosticMetricSet';
import ResponseMetaData from './ResponseMetaData';

/**
 * The AnalysisData model module.
 * @module model/AnalysisData
 * @version 2016-03-01
 */
class AnalysisData {
    /**
     * Constructs a new <code>AnalysisData</code>.
     * Class Representing Detector Evidence used for analysis
     * @alias module:model/AnalysisData
     */
    constructor() { 
        
        AnalysisData.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AnalysisData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AnalysisData} obj Optional instance to populate.
     * @return {module:model/AnalysisData} The populated <code>AnalysisData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AnalysisData();

            if (data.hasOwnProperty('data')) {
                obj['data'] = ApiClient.convertToType(data['data'], [[AnalysisDataDataInnerInner]]);
            }
            if (data.hasOwnProperty('detectorDefinition')) {
                obj['detectorDefinition'] = DetectorDefinition.constructFromObject(data['detectorDefinition']);
            }
            if (data.hasOwnProperty('detectorMetaData')) {
                obj['detectorMetaData'] = ResponseMetaData.constructFromObject(data['detectorMetaData']);
            }
            if (data.hasOwnProperty('metrics')) {
                obj['metrics'] = ApiClient.convertToType(data['metrics'], [DiagnosticMetricSet]);
            }
            if (data.hasOwnProperty('source')) {
                obj['source'] = ApiClient.convertToType(data['source'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AnalysisData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AnalysisData</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['data'])) {
            throw new Error("Expected the field `data` to be an array in the JSON data but got " + data['data']);
        }
        // validate the optional field `detectorDefinition`
        if (data['detectorDefinition']) { // data not null
          DetectorDefinition.validateJSON(data['detectorDefinition']);
        }
        // validate the optional field `detectorMetaData`
        if (data['detectorMetaData']) { // data not null
          ResponseMetaData.validateJSON(data['detectorMetaData']);
        }
        if (data['metrics']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['metrics'])) {
                throw new Error("Expected the field `metrics` to be an array in the JSON data but got " + data['metrics']);
            }
            // validate the optional field `metrics` (array)
            for (const item of data['metrics']) {
                DiagnosticMetricSet.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['source'] && !(typeof data['source'] === 'string' || data['source'] instanceof String)) {
            throw new Error("Expected the field `source` to be a primitive type in the JSON string but got " + data['source']);
        }

        return true;
    }


}



/**
 * Additional Source Data
 * @member {Array.<Array.<module:model/AnalysisDataDataInnerInner>>} data
 */
AnalysisData.prototype['data'] = undefined;

/**
 * @member {module:model/DetectorDefinition} detectorDefinition
 */
AnalysisData.prototype['detectorDefinition'] = undefined;

/**
 * @member {module:model/ResponseMetaData} detectorMetaData
 */
AnalysisData.prototype['detectorMetaData'] = undefined;

/**
 * Source Metrics
 * @member {Array.<module:model/DiagnosticMetricSet>} metrics
 */
AnalysisData.prototype['metrics'] = undefined;

/**
 * Name of the Detector
 * @member {String} source
 */
AnalysisData.prototype['source'] = undefined;






export default AnalysisData;

