# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.detector_abnormal_time_period import DetectorAbnormalTimePeriod
from openapi_server.models.solution import Solution
from openapi_server import util


class AbnormalTimePeriod(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, end_time: datetime=None, events: List[DetectorAbnormalTimePeriod]=None, solutions: List[Solution]=None, start_time: datetime=None):
        """AbnormalTimePeriod - a model defined in OpenAPI

        :param end_time: The end_time of this AbnormalTimePeriod.
        :param events: The events of this AbnormalTimePeriod.
        :param solutions: The solutions of this AbnormalTimePeriod.
        :param start_time: The start_time of this AbnormalTimePeriod.
        """
        self.openapi_types = {
            'end_time': datetime,
            'events': List[DetectorAbnormalTimePeriod],
            'solutions': List[Solution],
            'start_time': datetime
        }

        self.attribute_map = {
            'end_time': 'endTime',
            'events': 'events',
            'solutions': 'solutions',
            'start_time': 'startTime'
        }

        self._end_time = end_time
        self._events = events
        self._solutions = solutions
        self._start_time = start_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AbnormalTimePeriod':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AbnormalTimePeriod of this AbnormalTimePeriod.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def end_time(self):
        """Gets the end_time of this AbnormalTimePeriod.

        End time of the downtime

        :return: The end_time of this AbnormalTimePeriod.
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this AbnormalTimePeriod.

        End time of the downtime

        :param end_time: The end_time of this AbnormalTimePeriod.
        :type end_time: datetime
        """

        self._end_time = end_time

    @property
    def events(self):
        """Gets the events of this AbnormalTimePeriod.

        List of Possible Cause of downtime

        :return: The events of this AbnormalTimePeriod.
        :rtype: List[DetectorAbnormalTimePeriod]
        """
        return self._events

    @events.setter
    def events(self, events):
        """Sets the events of this AbnormalTimePeriod.

        List of Possible Cause of downtime

        :param events: The events of this AbnormalTimePeriod.
        :type events: List[DetectorAbnormalTimePeriod]
        """

        self._events = events

    @property
    def solutions(self):
        """Gets the solutions of this AbnormalTimePeriod.

        List of proposed solutions

        :return: The solutions of this AbnormalTimePeriod.
        :rtype: List[Solution]
        """
        return self._solutions

    @solutions.setter
    def solutions(self, solutions):
        """Sets the solutions of this AbnormalTimePeriod.

        List of proposed solutions

        :param solutions: The solutions of this AbnormalTimePeriod.
        :type solutions: List[Solution]
        """

        self._solutions = solutions

    @property
    def start_time(self):
        """Gets the start_time of this AbnormalTimePeriod.

        Start time of the downtime

        :return: The start_time of this AbnormalTimePeriod.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this AbnormalTimePeriod.

        Start time of the downtime

        :param start_time: The start_time of this AbnormalTimePeriod.
        :type start_time: datetime
        """

        self._start_time = start_time
