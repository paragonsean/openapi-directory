# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.diagnostic_metric_sample import DiagnosticMetricSample
from openapi_server import util


class DiagnosticMetricSet(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, end_time: datetime=None, name: str=None, start_time: datetime=None, time_grain: str=None, unit: str=None, values: List[DiagnosticMetricSample]=None):
        """DiagnosticMetricSet - a model defined in OpenAPI

        :param end_time: The end_time of this DiagnosticMetricSet.
        :param name: The name of this DiagnosticMetricSet.
        :param start_time: The start_time of this DiagnosticMetricSet.
        :param time_grain: The time_grain of this DiagnosticMetricSet.
        :param unit: The unit of this DiagnosticMetricSet.
        :param values: The values of this DiagnosticMetricSet.
        """
        self.openapi_types = {
            'end_time': datetime,
            'name': str,
            'start_time': datetime,
            'time_grain': str,
            'unit': str,
            'values': List[DiagnosticMetricSample]
        }

        self.attribute_map = {
            'end_time': 'endTime',
            'name': 'name',
            'start_time': 'startTime',
            'time_grain': 'timeGrain',
            'unit': 'unit',
            'values': 'values'
        }

        self._end_time = end_time
        self._name = name
        self._start_time = start_time
        self._time_grain = time_grain
        self._unit = unit
        self._values = values

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DiagnosticMetricSet':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DiagnosticMetricSet of this DiagnosticMetricSet.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def end_time(self):
        """Gets the end_time of this DiagnosticMetricSet.

        End time of the period

        :return: The end_time of this DiagnosticMetricSet.
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this DiagnosticMetricSet.

        End time of the period

        :param end_time: The end_time of this DiagnosticMetricSet.
        :type end_time: datetime
        """

        self._end_time = end_time

    @property
    def name(self):
        """Gets the name of this DiagnosticMetricSet.

        Name of the metric

        :return: The name of this DiagnosticMetricSet.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DiagnosticMetricSet.

        Name of the metric

        :param name: The name of this DiagnosticMetricSet.
        :type name: str
        """

        self._name = name

    @property
    def start_time(self):
        """Gets the start_time of this DiagnosticMetricSet.

        Start time of the period

        :return: The start_time of this DiagnosticMetricSet.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this DiagnosticMetricSet.

        Start time of the period

        :param start_time: The start_time of this DiagnosticMetricSet.
        :type start_time: datetime
        """

        self._start_time = start_time

    @property
    def time_grain(self):
        """Gets the time_grain of this DiagnosticMetricSet.

        Presented time grain. Supported grains at the moment are PT1M, PT1H, P1D

        :return: The time_grain of this DiagnosticMetricSet.
        :rtype: str
        """
        return self._time_grain

    @time_grain.setter
    def time_grain(self, time_grain):
        """Sets the time_grain of this DiagnosticMetricSet.

        Presented time grain. Supported grains at the moment are PT1M, PT1H, P1D

        :param time_grain: The time_grain of this DiagnosticMetricSet.
        :type time_grain: str
        """

        self._time_grain = time_grain

    @property
    def unit(self):
        """Gets the unit of this DiagnosticMetricSet.

        Metric's unit

        :return: The unit of this DiagnosticMetricSet.
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this DiagnosticMetricSet.

        Metric's unit

        :param unit: The unit of this DiagnosticMetricSet.
        :type unit: str
        """

        self._unit = unit

    @property
    def values(self):
        """Gets the values of this DiagnosticMetricSet.

        Collection of metric values for the selected period based on the {Microsoft.Web.Hosting.Administration.DiagnosticMetricSet.TimeGrain}

        :return: The values of this DiagnosticMetricSet.
        :rtype: List[DiagnosticMetricSample]
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this DiagnosticMetricSet.

        Collection of metric values for the selected period based on the {Microsoft.Web.Hosting.Administration.DiagnosticMetricSet.TimeGrain}

        :param values: The values of this DiagnosticMetricSet.
        :type values: List[DiagnosticMetricSample]
        """

        self._values = values
