# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DetectorInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category: str=None, description: str=None, sub_category: str=None, support_topic_id: str=None):
        """DetectorInfo - a model defined in OpenAPI

        :param category: The category of this DetectorInfo.
        :param description: The description of this DetectorInfo.
        :param sub_category: The sub_category of this DetectorInfo.
        :param support_topic_id: The support_topic_id of this DetectorInfo.
        """
        self.openapi_types = {
            'category': str,
            'description': str,
            'sub_category': str,
            'support_topic_id': str
        }

        self.attribute_map = {
            'category': 'category',
            'description': 'description',
            'sub_category': 'subCategory',
            'support_topic_id': 'supportTopicId'
        }

        self._category = category
        self._description = description
        self._sub_category = sub_category
        self._support_topic_id = support_topic_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DetectorInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DetectorInfo of this DetectorInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category(self):
        """Gets the category of this DetectorInfo.

        Support Category

        :return: The category of this DetectorInfo.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this DetectorInfo.

        Support Category

        :param category: The category of this DetectorInfo.
        :type category: str
        """

        self._category = category

    @property
    def description(self):
        """Gets the description of this DetectorInfo.

        Short description of the detector and its purpose

        :return: The description of this DetectorInfo.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DetectorInfo.

        Short description of the detector and its purpose

        :param description: The description of this DetectorInfo.
        :type description: str
        """

        self._description = description

    @property
    def sub_category(self):
        """Gets the sub_category of this DetectorInfo.

        Support Sub Category

        :return: The sub_category of this DetectorInfo.
        :rtype: str
        """
        return self._sub_category

    @sub_category.setter
    def sub_category(self, sub_category):
        """Sets the sub_category of this DetectorInfo.

        Support Sub Category

        :param sub_category: The sub_category of this DetectorInfo.
        :type sub_category: str
        """

        self._sub_category = sub_category

    @property
    def support_topic_id(self):
        """Gets the support_topic_id of this DetectorInfo.

        Support Topic Id

        :return: The support_topic_id of this DetectorInfo.
        :rtype: str
        """
        return self._support_topic_id

    @support_topic_id.setter
    def support_topic_id(self, support_topic_id):
        """Sets the support_topic_id of this DetectorInfo.

        Support Topic Id

        :param support_topic_id: The support_topic_id of this DetectorInfo.
        :type support_topic_id: str
        """

        self._support_topic_id = support_topic_id
