# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.analysis_data_data_inner_inner import AnalysisDataDataInnerInner
from openapi_server.models.solution import Solution
from openapi_server import util


class DetectorAbnormalTimePeriod(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, end_time: datetime=None, message: str=None, meta_data: List[List[AnalysisDataDataInnerInner]]=None, priority: float=None, solutions: List[Solution]=None, source: str=None, start_time: datetime=None, type: str=None):
        """DetectorAbnormalTimePeriod - a model defined in OpenAPI

        :param end_time: The end_time of this DetectorAbnormalTimePeriod.
        :param message: The message of this DetectorAbnormalTimePeriod.
        :param meta_data: The meta_data of this DetectorAbnormalTimePeriod.
        :param priority: The priority of this DetectorAbnormalTimePeriod.
        :param solutions: The solutions of this DetectorAbnormalTimePeriod.
        :param source: The source of this DetectorAbnormalTimePeriod.
        :param start_time: The start_time of this DetectorAbnormalTimePeriod.
        :param type: The type of this DetectorAbnormalTimePeriod.
        """
        self.openapi_types = {
            'end_time': datetime,
            'message': str,
            'meta_data': List[List[AnalysisDataDataInnerInner]],
            'priority': float,
            'solutions': List[Solution],
            'source': str,
            'start_time': datetime,
            'type': str
        }

        self.attribute_map = {
            'end_time': 'endTime',
            'message': 'message',
            'meta_data': 'metaData',
            'priority': 'priority',
            'solutions': 'solutions',
            'source': 'source',
            'start_time': 'startTime',
            'type': 'type'
        }

        self._end_time = end_time
        self._message = message
        self._meta_data = meta_data
        self._priority = priority
        self._solutions = solutions
        self._source = source
        self._start_time = start_time
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DetectorAbnormalTimePeriod':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DetectorAbnormalTimePeriod of this DetectorAbnormalTimePeriod.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def end_time(self):
        """Gets the end_time of this DetectorAbnormalTimePeriod.

        End time of the correlated event

        :return: The end_time of this DetectorAbnormalTimePeriod.
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this DetectorAbnormalTimePeriod.

        End time of the correlated event

        :param end_time: The end_time of this DetectorAbnormalTimePeriod.
        :type end_time: datetime
        """

        self._end_time = end_time

    @property
    def message(self):
        """Gets the message of this DetectorAbnormalTimePeriod.

        Message describing the event

        :return: The message of this DetectorAbnormalTimePeriod.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this DetectorAbnormalTimePeriod.

        Message describing the event

        :param message: The message of this DetectorAbnormalTimePeriod.
        :type message: str
        """

        self._message = message

    @property
    def meta_data(self):
        """Gets the meta_data of this DetectorAbnormalTimePeriod.

        Downtime metadata

        :return: The meta_data of this DetectorAbnormalTimePeriod.
        :rtype: List[List[AnalysisDataDataInnerInner]]
        """
        return self._meta_data

    @meta_data.setter
    def meta_data(self, meta_data):
        """Sets the meta_data of this DetectorAbnormalTimePeriod.

        Downtime metadata

        :param meta_data: The meta_data of this DetectorAbnormalTimePeriod.
        :type meta_data: List[List[AnalysisDataDataInnerInner]]
        """

        self._meta_data = meta_data

    @property
    def priority(self):
        """Gets the priority of this DetectorAbnormalTimePeriod.

        Represents the rank of the Detector

        :return: The priority of this DetectorAbnormalTimePeriod.
        :rtype: float
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this DetectorAbnormalTimePeriod.

        Represents the rank of the Detector

        :param priority: The priority of this DetectorAbnormalTimePeriod.
        :type priority: float
        """

        self._priority = priority

    @property
    def solutions(self):
        """Gets the solutions of this DetectorAbnormalTimePeriod.

        List of proposed solutions

        :return: The solutions of this DetectorAbnormalTimePeriod.
        :rtype: List[Solution]
        """
        return self._solutions

    @solutions.setter
    def solutions(self, solutions):
        """Sets the solutions of this DetectorAbnormalTimePeriod.

        List of proposed solutions

        :param solutions: The solutions of this DetectorAbnormalTimePeriod.
        :type solutions: List[Solution]
        """

        self._solutions = solutions

    @property
    def source(self):
        """Gets the source of this DetectorAbnormalTimePeriod.

        Represents the name of the Detector

        :return: The source of this DetectorAbnormalTimePeriod.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this DetectorAbnormalTimePeriod.

        Represents the name of the Detector

        :param source: The source of this DetectorAbnormalTimePeriod.
        :type source: str
        """

        self._source = source

    @property
    def start_time(self):
        """Gets the start_time of this DetectorAbnormalTimePeriod.

        Start time of the correlated event

        :return: The start_time of this DetectorAbnormalTimePeriod.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this DetectorAbnormalTimePeriod.

        Start time of the correlated event

        :param start_time: The start_time of this DetectorAbnormalTimePeriod.
        :type start_time: datetime
        """

        self._start_time = start_time

    @property
    def type(self):
        """Gets the type of this DetectorAbnormalTimePeriod.

        Represents the type of the Detector

        :return: The type of this DetectorAbnormalTimePeriod.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DetectorAbnormalTimePeriod.

        Represents the type of the Detector

        :param type: The type of this DetectorAbnormalTimePeriod.
        :type type: str
        """
        allowed_values = ["ServiceIncident", "AppDeployment", "AppCrash", "RuntimeIssueDetected", "AseDeployment", "UserIssue", "PlatformIssue", "Other"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
