/**
 * Diagnostics API Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-08-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAnalysisData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAnalysisData::OAIAnalysisData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAnalysisData::OAIAnalysisData() {
    this->initializeModel();
}

OAIAnalysisData::~OAIAnalysisData() {}

void OAIAnalysisData::initializeModel() {

    m_data_isSet = false;
    m_data_isValid = false;

    m_detector_definition_isSet = false;
    m_detector_definition_isValid = false;

    m_detector_meta_data_isSet = false;
    m_detector_meta_data_isValid = false;

    m_metrics_isSet = false;
    m_metrics_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;
}

void OAIAnalysisData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAnalysisData::fromJsonObject(QJsonObject json) {

    if(json["data"].isArray()){
        auto arr = json["data"].toArray();
        m_data_isValid = true;
        if(arr.count() > 0) {
            for (const QJsonValue jval : arr) {
                QList<OAIAnalysisData_data_inner_inner> item;
                m_data_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_data_isSet = !jval.isNull() && m_data_isValid;
                m_data.push_back(item);
            }
        }
    }

    m_detector_definition_isValid = ::OpenAPI::fromJsonValue(m_detector_definition, json[QString("detectorDefinition")]);
    m_detector_definition_isSet = !json[QString("detectorDefinition")].isNull() && m_detector_definition_isValid;

    m_detector_meta_data_isValid = ::OpenAPI::fromJsonValue(m_detector_meta_data, json[QString("detectorMetaData")]);
    m_detector_meta_data_isSet = !json[QString("detectorMetaData")].isNull() && m_detector_meta_data_isValid;

    m_metrics_isValid = ::OpenAPI::fromJsonValue(m_metrics, json[QString("metrics")]);
    m_metrics_isSet = !json[QString("metrics")].isNull() && m_metrics_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;
}

QString OAIAnalysisData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAnalysisData::asJsonObject() const {
    QJsonObject obj;
    if (m_data.size() > 0) {
        
        obj.insert(QString("data"), toJsonValue(m_data));
    }
    if (m_detector_definition.isSet()) {
        obj.insert(QString("detectorDefinition"), ::OpenAPI::toJsonValue(m_detector_definition));
    }
    if (m_detector_meta_data.isSet()) {
        obj.insert(QString("detectorMetaData"), ::OpenAPI::toJsonValue(m_detector_meta_data));
    }
    if (m_metrics.size() > 0) {
        obj.insert(QString("metrics"), ::OpenAPI::toJsonValue(m_metrics));
    }
    if (m_source_isSet) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    return obj;
}

QList<QList<OAIAnalysisData_data_inner_inner>> OAIAnalysisData::getData() const {
    return m_data;
}
void OAIAnalysisData::setData(const QList<QList<OAIAnalysisData_data_inner_inner>> &data) {
    m_data = data;
    m_data_isSet = true;
}

bool OAIAnalysisData::is_data_Set() const{
    return m_data_isSet;
}

bool OAIAnalysisData::is_data_Valid() const{
    return m_data_isValid;
}

OAIDetectorDefinition OAIAnalysisData::getDetectorDefinition() const {
    return m_detector_definition;
}
void OAIAnalysisData::setDetectorDefinition(const OAIDetectorDefinition &detector_definition) {
    m_detector_definition = detector_definition;
    m_detector_definition_isSet = true;
}

bool OAIAnalysisData::is_detector_definition_Set() const{
    return m_detector_definition_isSet;
}

bool OAIAnalysisData::is_detector_definition_Valid() const{
    return m_detector_definition_isValid;
}

OAIResponseMetaData OAIAnalysisData::getDetectorMetaData() const {
    return m_detector_meta_data;
}
void OAIAnalysisData::setDetectorMetaData(const OAIResponseMetaData &detector_meta_data) {
    m_detector_meta_data = detector_meta_data;
    m_detector_meta_data_isSet = true;
}

bool OAIAnalysisData::is_detector_meta_data_Set() const{
    return m_detector_meta_data_isSet;
}

bool OAIAnalysisData::is_detector_meta_data_Valid() const{
    return m_detector_meta_data_isValid;
}

QList<OAIDiagnosticMetricSet> OAIAnalysisData::getMetrics() const {
    return m_metrics;
}
void OAIAnalysisData::setMetrics(const QList<OAIDiagnosticMetricSet> &metrics) {
    m_metrics = metrics;
    m_metrics_isSet = true;
}

bool OAIAnalysisData::is_metrics_Set() const{
    return m_metrics_isSet;
}

bool OAIAnalysisData::is_metrics_Valid() const{
    return m_metrics_isValid;
}

QString OAIAnalysisData::getSource() const {
    return m_source;
}
void OAIAnalysisData::setSource(const QString &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIAnalysisData::is_source_Set() const{
    return m_source_isSet;
}

bool OAIAnalysisData::is_source_Valid() const{
    return m_source_isValid;
}

bool OAIAnalysisData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_detector_definition.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_detector_meta_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_metrics.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAnalysisData::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
