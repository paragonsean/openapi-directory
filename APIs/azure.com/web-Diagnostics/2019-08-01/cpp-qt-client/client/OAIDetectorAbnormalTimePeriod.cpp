/**
 * Diagnostics API Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-08-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDetectorAbnormalTimePeriod.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDetectorAbnormalTimePeriod::OAIDetectorAbnormalTimePeriod(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDetectorAbnormalTimePeriod::OAIDetectorAbnormalTimePeriod() {
    this->initializeModel();
}

OAIDetectorAbnormalTimePeriod::~OAIDetectorAbnormalTimePeriod() {}

void OAIDetectorAbnormalTimePeriod::initializeModel() {

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_meta_data_isSet = false;
    m_meta_data_isValid = false;

    m_priority_isSet = false;
    m_priority_isValid = false;

    m_solutions_isSet = false;
    m_solutions_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIDetectorAbnormalTimePeriod::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDetectorAbnormalTimePeriod::fromJsonObject(QJsonObject json) {

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("endTime")]);
    m_end_time_isSet = !json[QString("endTime")].isNull() && m_end_time_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    if(json["metaData"].isArray()){
        auto arr = json["metaData"].toArray();
        m_meta_data_isValid = true;
        if(arr.count() > 0) {
            for (const QJsonValue jval : arr) {
                QList<OAIAnalysisData_data_inner_inner> item;
                m_meta_data_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_meta_data_isSet = !jval.isNull() && m_meta_data_isValid;
                m_meta_data.push_back(item);
            }
        }
    }

    m_priority_isValid = ::OpenAPI::fromJsonValue(m_priority, json[QString("priority")]);
    m_priority_isSet = !json[QString("priority")].isNull() && m_priority_isValid;

    m_solutions_isValid = ::OpenAPI::fromJsonValue(m_solutions, json[QString("solutions")]);
    m_solutions_isSet = !json[QString("solutions")].isNull() && m_solutions_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIDetectorAbnormalTimePeriod::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDetectorAbnormalTimePeriod::asJsonObject() const {
    QJsonObject obj;
    if (m_end_time_isSet) {
        obj.insert(QString("endTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_meta_data.size() > 0) {
        
        obj.insert(QString("metaData"), toJsonValue(m_meta_data));
    }
    if (m_priority_isSet) {
        obj.insert(QString("priority"), ::OpenAPI::toJsonValue(m_priority));
    }
    if (m_solutions.size() > 0) {
        obj.insert(QString("solutions"), ::OpenAPI::toJsonValue(m_solutions));
    }
    if (m_source_isSet) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QDateTime OAIDetectorAbnormalTimePeriod::getEndTime() const {
    return m_end_time;
}
void OAIDetectorAbnormalTimePeriod::setEndTime(const QDateTime &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIDetectorAbnormalTimePeriod::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIDetectorAbnormalTimePeriod::is_end_time_Valid() const{
    return m_end_time_isValid;
}

QString OAIDetectorAbnormalTimePeriod::getMessage() const {
    return m_message;
}
void OAIDetectorAbnormalTimePeriod::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIDetectorAbnormalTimePeriod::is_message_Set() const{
    return m_message_isSet;
}

bool OAIDetectorAbnormalTimePeriod::is_message_Valid() const{
    return m_message_isValid;
}

QList<QList<OAIAnalysisData_data_inner_inner>> OAIDetectorAbnormalTimePeriod::getMetaData() const {
    return m_meta_data;
}
void OAIDetectorAbnormalTimePeriod::setMetaData(const QList<QList<OAIAnalysisData_data_inner_inner>> &meta_data) {
    m_meta_data = meta_data;
    m_meta_data_isSet = true;
}

bool OAIDetectorAbnormalTimePeriod::is_meta_data_Set() const{
    return m_meta_data_isSet;
}

bool OAIDetectorAbnormalTimePeriod::is_meta_data_Valid() const{
    return m_meta_data_isValid;
}

double OAIDetectorAbnormalTimePeriod::getPriority() const {
    return m_priority;
}
void OAIDetectorAbnormalTimePeriod::setPriority(const double &priority) {
    m_priority = priority;
    m_priority_isSet = true;
}

bool OAIDetectorAbnormalTimePeriod::is_priority_Set() const{
    return m_priority_isSet;
}

bool OAIDetectorAbnormalTimePeriod::is_priority_Valid() const{
    return m_priority_isValid;
}

QList<OAISolution> OAIDetectorAbnormalTimePeriod::getSolutions() const {
    return m_solutions;
}
void OAIDetectorAbnormalTimePeriod::setSolutions(const QList<OAISolution> &solutions) {
    m_solutions = solutions;
    m_solutions_isSet = true;
}

bool OAIDetectorAbnormalTimePeriod::is_solutions_Set() const{
    return m_solutions_isSet;
}

bool OAIDetectorAbnormalTimePeriod::is_solutions_Valid() const{
    return m_solutions_isValid;
}

QString OAIDetectorAbnormalTimePeriod::getSource() const {
    return m_source;
}
void OAIDetectorAbnormalTimePeriod::setSource(const QString &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIDetectorAbnormalTimePeriod::is_source_Set() const{
    return m_source_isSet;
}

bool OAIDetectorAbnormalTimePeriod::is_source_Valid() const{
    return m_source_isValid;
}

QDateTime OAIDetectorAbnormalTimePeriod::getStartTime() const {
    return m_start_time;
}
void OAIDetectorAbnormalTimePeriod::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIDetectorAbnormalTimePeriod::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIDetectorAbnormalTimePeriod::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QString OAIDetectorAbnormalTimePeriod::getType() const {
    return m_type;
}
void OAIDetectorAbnormalTimePeriod::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIDetectorAbnormalTimePeriod::is_type_Set() const{
    return m_type_isSet;
}

bool OAIDetectorAbnormalTimePeriod::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIDetectorAbnormalTimePeriod::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_meta_data.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_priority_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_solutions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDetectorAbnormalTimePeriod::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
