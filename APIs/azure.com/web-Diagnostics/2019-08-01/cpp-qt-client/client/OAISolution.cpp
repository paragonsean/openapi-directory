/**
 * Diagnostics API Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-08-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISolution.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISolution::OAISolution(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISolution::OAISolution() {
    this->initializeModel();
}

OAISolution::~OAISolution() {}

void OAISolution::initializeModel() {

    m_data_isSet = false;
    m_data_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_order_isSet = false;
    m_order_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAISolution::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISolution::fromJsonObject(QJsonObject json) {

    if(json["data"].isArray()){
        auto arr = json["data"].toArray();
        m_data_isValid = true;
        if(arr.count() > 0) {
            for (const QJsonValue jval : arr) {
                QList<OAIAnalysisData_data_inner_inner> item;
                m_data_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_data_isSet = !jval.isNull() && m_data_isValid;
                m_data.push_back(item);
            }
        }
    }

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    if(json["metadata"].isArray()){
        auto arr = json["metadata"].toArray();
        m_metadata_isValid = true;
        if(arr.count() > 0) {
            for (const QJsonValue jval : arr) {
                QList<OAIAnalysisData_data_inner_inner> item;
                m_metadata_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_metadata_isSet = !jval.isNull() && m_metadata_isValid;
                m_metadata.push_back(item);
            }
        }
    }

    m_order_isValid = ::OpenAPI::fromJsonValue(m_order, json[QString("order")]);
    m_order_isSet = !json[QString("order")].isNull() && m_order_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAISolution::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISolution::asJsonObject() const {
    QJsonObject obj;
    if (m_data.size() > 0) {
        
        obj.insert(QString("data"), toJsonValue(m_data));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_metadata.size() > 0) {
        
        obj.insert(QString("metadata"), toJsonValue(m_metadata));
    }
    if (m_order_isSet) {
        obj.insert(QString("order"), ::OpenAPI::toJsonValue(m_order));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QList<QList<OAIAnalysisData_data_inner_inner>> OAISolution::getData() const {
    return m_data;
}
void OAISolution::setData(const QList<QList<OAIAnalysisData_data_inner_inner>> &data) {
    m_data = data;
    m_data_isSet = true;
}

bool OAISolution::is_data_Set() const{
    return m_data_isSet;
}

bool OAISolution::is_data_Valid() const{
    return m_data_isValid;
}

QString OAISolution::getDescription() const {
    return m_description;
}
void OAISolution::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAISolution::is_description_Set() const{
    return m_description_isSet;
}

bool OAISolution::is_description_Valid() const{
    return m_description_isValid;
}

QString OAISolution::getDisplayName() const {
    return m_display_name;
}
void OAISolution::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAISolution::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAISolution::is_display_name_Valid() const{
    return m_display_name_isValid;
}

double OAISolution::getId() const {
    return m_id;
}
void OAISolution::setId(const double &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISolution::is_id_Set() const{
    return m_id_isSet;
}

bool OAISolution::is_id_Valid() const{
    return m_id_isValid;
}

QList<QList<OAIAnalysisData_data_inner_inner>> OAISolution::getMetadata() const {
    return m_metadata;
}
void OAISolution::setMetadata(const QList<QList<OAIAnalysisData_data_inner_inner>> &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAISolution::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAISolution::is_metadata_Valid() const{
    return m_metadata_isValid;
}

double OAISolution::getOrder() const {
    return m_order;
}
void OAISolution::setOrder(const double &order) {
    m_order = order;
    m_order_isSet = true;
}

bool OAISolution::is_order_Set() const{
    return m_order_isSet;
}

bool OAISolution::is_order_Valid() const{
    return m_order_isValid;
}

QString OAISolution::getType() const {
    return m_type;
}
void OAISolution::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAISolution::is_type_Set() const{
    return m_type_isSet;
}

bool OAISolution::is_type_Valid() const{
    return m_type_isValid;
}

bool OAISolution::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISolution::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
