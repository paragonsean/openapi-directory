/**
 * Diagnostics API Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-08-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataSource.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataSource::OAIDataSource(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataSource::OAIDataSource() {
    this->initializeModel();
}

OAIDataSource::~OAIDataSource() {}

void OAIDataSource::initializeModel() {

    m_data_source_uri_isSet = false;
    m_data_source_uri_isValid = false;

    m_instructions_isSet = false;
    m_instructions_isValid = false;
}

void OAIDataSource::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDataSource::fromJsonObject(QJsonObject json) {

    m_data_source_uri_isValid = ::OpenAPI::fromJsonValue(m_data_source_uri, json[QString("dataSourceUri")]);
    m_data_source_uri_isSet = !json[QString("dataSourceUri")].isNull() && m_data_source_uri_isValid;

    m_instructions_isValid = ::OpenAPI::fromJsonValue(m_instructions, json[QString("instructions")]);
    m_instructions_isSet = !json[QString("instructions")].isNull() && m_instructions_isValid;
}

QString OAIDataSource::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDataSource::asJsonObject() const {
    QJsonObject obj;
    if (m_data_source_uri.size() > 0) {
        obj.insert(QString("dataSourceUri"), ::OpenAPI::toJsonValue(m_data_source_uri));
    }
    if (m_instructions.size() > 0) {
        obj.insert(QString("instructions"), ::OpenAPI::toJsonValue(m_instructions));
    }
    return obj;
}

QList<OAIAnalysisData_data_inner_inner> OAIDataSource::getDataSourceUri() const {
    return m_data_source_uri;
}
void OAIDataSource::setDataSourceUri(const QList<OAIAnalysisData_data_inner_inner> &data_source_uri) {
    m_data_source_uri = data_source_uri;
    m_data_source_uri_isSet = true;
}

bool OAIDataSource::is_data_source_uri_Set() const{
    return m_data_source_uri_isSet;
}

bool OAIDataSource::is_data_source_uri_Valid() const{
    return m_data_source_uri_isValid;
}

QList<QString> OAIDataSource::getInstructions() const {
    return m_instructions;
}
void OAIDataSource::setInstructions(const QList<QString> &instructions) {
    m_instructions = instructions;
    m_instructions_isSet = true;
}

bool OAIDataSource::is_instructions_Set() const{
    return m_instructions_isSet;
}

bool OAIDataSource::is_instructions_Valid() const{
    return m_instructions_isValid;
}

bool OAIDataSource::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_source_uri.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_instructions.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDataSource::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
