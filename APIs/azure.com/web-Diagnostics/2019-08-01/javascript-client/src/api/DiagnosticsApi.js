/**
 * Diagnostics API Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AnalysisDefinition from '../model/AnalysisDefinition';
import DetectorDefinition from '../model/DetectorDefinition';
import DetectorResponse from '../model/DetectorResponse';
import DetectorResponseCollection from '../model/DetectorResponseCollection';
import DiagnosticAnalysis from '../model/DiagnosticAnalysis';
import DiagnosticAnalysisCollection from '../model/DiagnosticAnalysisCollection';
import DiagnosticCategory from '../model/DiagnosticCategory';
import DiagnosticCategoryCollection from '../model/DiagnosticCategoryCollection';
import DiagnosticDetectorCollection from '../model/DiagnosticDetectorCollection';
import DiagnosticDetectorResponse from '../model/DiagnosticDetectorResponse';
import DiagnosticsListHostingEnvironmentDetectorResponsesDefaultResponse from '../model/DiagnosticsListHostingEnvironmentDetectorResponsesDefaultResponse';

/**
* Diagnostics service.
* @module api/DiagnosticsApi
* @version 2019-08-01
*/
export default class DiagnosticsApi {

    /**
    * Constructs a new DiagnosticsApi. 
    * @alias module:api/DiagnosticsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the diagnosticsExecuteSiteAnalysis operation.
     * @callback module:api/DiagnosticsApi~diagnosticsExecuteSiteAnalysisCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DiagnosticAnalysis} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Execute Analysis
     * Description for Execute Analysis
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} siteName Site Name
     * @param {String} diagnosticCategory Category Name
     * @param {String} analysisName Analysis Resource Name
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {Object} opts Optional parameters
     * @param {Date} [startTime] Start Time
     * @param {Date} [endTime] End Time
     * @param {String} [timeGrain] Time Grain
     * @param {module:api/DiagnosticsApi~diagnosticsExecuteSiteAnalysisCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DiagnosticAnalysis}
     */
    diagnosticsExecuteSiteAnalysis(resourceGroupName, siteName, diagnosticCategory, analysisName, subscriptionId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling diagnosticsExecuteSiteAnalysis");
      }
      // verify the required parameter 'siteName' is set
      if (siteName === undefined || siteName === null) {
        throw new Error("Missing the required parameter 'siteName' when calling diagnosticsExecuteSiteAnalysis");
      }
      // verify the required parameter 'diagnosticCategory' is set
      if (diagnosticCategory === undefined || diagnosticCategory === null) {
        throw new Error("Missing the required parameter 'diagnosticCategory' when calling diagnosticsExecuteSiteAnalysis");
      }
      // verify the required parameter 'analysisName' is set
      if (analysisName === undefined || analysisName === null) {
        throw new Error("Missing the required parameter 'analysisName' when calling diagnosticsExecuteSiteAnalysis");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling diagnosticsExecuteSiteAnalysis");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling diagnosticsExecuteSiteAnalysis");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'siteName': siteName,
        'diagnosticCategory': diagnosticCategory,
        'analysisName': analysisName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'startTime': opts['startTime'],
        'endTime': opts['endTime'],
        'timeGrain': opts['timeGrain'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DiagnosticAnalysis;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/diagnostics/{diagnosticCategory}/analyses/{analysisName}/execute', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the diagnosticsExecuteSiteAnalysisSlot operation.
     * @callback module:api/DiagnosticsApi~diagnosticsExecuteSiteAnalysisSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DiagnosticAnalysis} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Execute Analysis
     * Description for Execute Analysis
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} siteName Site Name
     * @param {String} diagnosticCategory Category Name
     * @param {String} analysisName Analysis Resource Name
     * @param {String} slot Slot Name
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {Object} opts Optional parameters
     * @param {Date} [startTime] Start Time
     * @param {Date} [endTime] End Time
     * @param {String} [timeGrain] Time Grain
     * @param {module:api/DiagnosticsApi~diagnosticsExecuteSiteAnalysisSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DiagnosticAnalysis}
     */
    diagnosticsExecuteSiteAnalysisSlot(resourceGroupName, siteName, diagnosticCategory, analysisName, slot, subscriptionId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling diagnosticsExecuteSiteAnalysisSlot");
      }
      // verify the required parameter 'siteName' is set
      if (siteName === undefined || siteName === null) {
        throw new Error("Missing the required parameter 'siteName' when calling diagnosticsExecuteSiteAnalysisSlot");
      }
      // verify the required parameter 'diagnosticCategory' is set
      if (diagnosticCategory === undefined || diagnosticCategory === null) {
        throw new Error("Missing the required parameter 'diagnosticCategory' when calling diagnosticsExecuteSiteAnalysisSlot");
      }
      // verify the required parameter 'analysisName' is set
      if (analysisName === undefined || analysisName === null) {
        throw new Error("Missing the required parameter 'analysisName' when calling diagnosticsExecuteSiteAnalysisSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling diagnosticsExecuteSiteAnalysisSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling diagnosticsExecuteSiteAnalysisSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling diagnosticsExecuteSiteAnalysisSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'siteName': siteName,
        'diagnosticCategory': diagnosticCategory,
        'analysisName': analysisName,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'startTime': opts['startTime'],
        'endTime': opts['endTime'],
        'timeGrain': opts['timeGrain'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DiagnosticAnalysis;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slot}/diagnostics/{diagnosticCategory}/analyses/{analysisName}/execute', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the diagnosticsExecuteSiteDetector operation.
     * @callback module:api/DiagnosticsApi~diagnosticsExecuteSiteDetectorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DiagnosticDetectorResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Execute Detector
     * Description for Execute Detector
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} siteName Site Name
     * @param {String} detectorName Detector Resource Name
     * @param {String} diagnosticCategory Category Name
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {Object} opts Optional parameters
     * @param {Date} [startTime] Start Time
     * @param {Date} [endTime] End Time
     * @param {String} [timeGrain] Time Grain
     * @param {module:api/DiagnosticsApi~diagnosticsExecuteSiteDetectorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DiagnosticDetectorResponse}
     */
    diagnosticsExecuteSiteDetector(resourceGroupName, siteName, detectorName, diagnosticCategory, subscriptionId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling diagnosticsExecuteSiteDetector");
      }
      // verify the required parameter 'siteName' is set
      if (siteName === undefined || siteName === null) {
        throw new Error("Missing the required parameter 'siteName' when calling diagnosticsExecuteSiteDetector");
      }
      // verify the required parameter 'detectorName' is set
      if (detectorName === undefined || detectorName === null) {
        throw new Error("Missing the required parameter 'detectorName' when calling diagnosticsExecuteSiteDetector");
      }
      // verify the required parameter 'diagnosticCategory' is set
      if (diagnosticCategory === undefined || diagnosticCategory === null) {
        throw new Error("Missing the required parameter 'diagnosticCategory' when calling diagnosticsExecuteSiteDetector");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling diagnosticsExecuteSiteDetector");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling diagnosticsExecuteSiteDetector");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'siteName': siteName,
        'detectorName': detectorName,
        'diagnosticCategory': diagnosticCategory,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'startTime': opts['startTime'],
        'endTime': opts['endTime'],
        'timeGrain': opts['timeGrain'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DiagnosticDetectorResponse;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/diagnostics/{diagnosticCategory}/detectors/{detectorName}/execute', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the diagnosticsExecuteSiteDetectorSlot operation.
     * @callback module:api/DiagnosticsApi~diagnosticsExecuteSiteDetectorSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DiagnosticDetectorResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Execute Detector
     * Description for Execute Detector
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} siteName Site Name
     * @param {String} detectorName Detector Resource Name
     * @param {String} diagnosticCategory Category Name
     * @param {String} slot Slot Name
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {Object} opts Optional parameters
     * @param {Date} [startTime] Start Time
     * @param {Date} [endTime] End Time
     * @param {String} [timeGrain] Time Grain
     * @param {module:api/DiagnosticsApi~diagnosticsExecuteSiteDetectorSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DiagnosticDetectorResponse}
     */
    diagnosticsExecuteSiteDetectorSlot(resourceGroupName, siteName, detectorName, diagnosticCategory, slot, subscriptionId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling diagnosticsExecuteSiteDetectorSlot");
      }
      // verify the required parameter 'siteName' is set
      if (siteName === undefined || siteName === null) {
        throw new Error("Missing the required parameter 'siteName' when calling diagnosticsExecuteSiteDetectorSlot");
      }
      // verify the required parameter 'detectorName' is set
      if (detectorName === undefined || detectorName === null) {
        throw new Error("Missing the required parameter 'detectorName' when calling diagnosticsExecuteSiteDetectorSlot");
      }
      // verify the required parameter 'diagnosticCategory' is set
      if (diagnosticCategory === undefined || diagnosticCategory === null) {
        throw new Error("Missing the required parameter 'diagnosticCategory' when calling diagnosticsExecuteSiteDetectorSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling diagnosticsExecuteSiteDetectorSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling diagnosticsExecuteSiteDetectorSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling diagnosticsExecuteSiteDetectorSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'siteName': siteName,
        'detectorName': detectorName,
        'diagnosticCategory': diagnosticCategory,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'startTime': opts['startTime'],
        'endTime': opts['endTime'],
        'timeGrain': opts['timeGrain'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DiagnosticDetectorResponse;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slot}/diagnostics/{diagnosticCategory}/detectors/{detectorName}/execute', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the diagnosticsGetHostingEnvironmentDetectorResponse operation.
     * @callback module:api/DiagnosticsApi~diagnosticsGetHostingEnvironmentDetectorResponseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DetectorResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Hosting Environment Detector Response
     * Description for Get Hosting Environment Detector Response
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name App Service Environment Name
     * @param {String} detectorName Detector Resource Name
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {Object} opts Optional parameters
     * @param {Date} [startTime] Start Time
     * @param {Date} [endTime] End Time
     * @param {String} [timeGrain] Time Grain
     * @param {module:api/DiagnosticsApi~diagnosticsGetHostingEnvironmentDetectorResponseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DetectorResponse}
     */
    diagnosticsGetHostingEnvironmentDetectorResponse(resourceGroupName, name, detectorName, subscriptionId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling diagnosticsGetHostingEnvironmentDetectorResponse");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling diagnosticsGetHostingEnvironmentDetectorResponse");
      }
      // verify the required parameter 'detectorName' is set
      if (detectorName === undefined || detectorName === null) {
        throw new Error("Missing the required parameter 'detectorName' when calling diagnosticsGetHostingEnvironmentDetectorResponse");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling diagnosticsGetHostingEnvironmentDetectorResponse");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling diagnosticsGetHostingEnvironmentDetectorResponse");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'detectorName': detectorName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'startTime': opts['startTime'],
        'endTime': opts['endTime'],
        'timeGrain': opts['timeGrain'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DetectorResponse;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/detectors/{detectorName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the diagnosticsGetSiteAnalysis operation.
     * @callback module:api/DiagnosticsApi~diagnosticsGetSiteAnalysisCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AnalysisDefinition} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Site Analysis
     * Description for Get Site Analysis
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} siteName Site Name
     * @param {String} diagnosticCategory Diagnostic Category
     * @param {String} analysisName Analysis Name
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/DiagnosticsApi~diagnosticsGetSiteAnalysisCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AnalysisDefinition}
     */
    diagnosticsGetSiteAnalysis(resourceGroupName, siteName, diagnosticCategory, analysisName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling diagnosticsGetSiteAnalysis");
      }
      // verify the required parameter 'siteName' is set
      if (siteName === undefined || siteName === null) {
        throw new Error("Missing the required parameter 'siteName' when calling diagnosticsGetSiteAnalysis");
      }
      // verify the required parameter 'diagnosticCategory' is set
      if (diagnosticCategory === undefined || diagnosticCategory === null) {
        throw new Error("Missing the required parameter 'diagnosticCategory' when calling diagnosticsGetSiteAnalysis");
      }
      // verify the required parameter 'analysisName' is set
      if (analysisName === undefined || analysisName === null) {
        throw new Error("Missing the required parameter 'analysisName' when calling diagnosticsGetSiteAnalysis");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling diagnosticsGetSiteAnalysis");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling diagnosticsGetSiteAnalysis");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'siteName': siteName,
        'diagnosticCategory': diagnosticCategory,
        'analysisName': analysisName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AnalysisDefinition;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/diagnostics/{diagnosticCategory}/analyses/{analysisName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the diagnosticsGetSiteAnalysisSlot operation.
     * @callback module:api/DiagnosticsApi~diagnosticsGetSiteAnalysisSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AnalysisDefinition} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Site Analysis
     * Description for Get Site Analysis
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} siteName Site Name
     * @param {String} diagnosticCategory Diagnostic Category
     * @param {String} analysisName Analysis Name
     * @param {String} slot Slot - optional
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/DiagnosticsApi~diagnosticsGetSiteAnalysisSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AnalysisDefinition}
     */
    diagnosticsGetSiteAnalysisSlot(resourceGroupName, siteName, diagnosticCategory, analysisName, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling diagnosticsGetSiteAnalysisSlot");
      }
      // verify the required parameter 'siteName' is set
      if (siteName === undefined || siteName === null) {
        throw new Error("Missing the required parameter 'siteName' when calling diagnosticsGetSiteAnalysisSlot");
      }
      // verify the required parameter 'diagnosticCategory' is set
      if (diagnosticCategory === undefined || diagnosticCategory === null) {
        throw new Error("Missing the required parameter 'diagnosticCategory' when calling diagnosticsGetSiteAnalysisSlot");
      }
      // verify the required parameter 'analysisName' is set
      if (analysisName === undefined || analysisName === null) {
        throw new Error("Missing the required parameter 'analysisName' when calling diagnosticsGetSiteAnalysisSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling diagnosticsGetSiteAnalysisSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling diagnosticsGetSiteAnalysisSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling diagnosticsGetSiteAnalysisSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'siteName': siteName,
        'diagnosticCategory': diagnosticCategory,
        'analysisName': analysisName,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AnalysisDefinition;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slot}/diagnostics/{diagnosticCategory}/analyses/{analysisName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the diagnosticsGetSiteDetector operation.
     * @callback module:api/DiagnosticsApi~diagnosticsGetSiteDetectorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DetectorDefinition} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Detector
     * Description for Get Detector
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} siteName Site Name
     * @param {String} diagnosticCategory Diagnostic Category
     * @param {String} detectorName Detector Name
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/DiagnosticsApi~diagnosticsGetSiteDetectorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DetectorDefinition}
     */
    diagnosticsGetSiteDetector(resourceGroupName, siteName, diagnosticCategory, detectorName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling diagnosticsGetSiteDetector");
      }
      // verify the required parameter 'siteName' is set
      if (siteName === undefined || siteName === null) {
        throw new Error("Missing the required parameter 'siteName' when calling diagnosticsGetSiteDetector");
      }
      // verify the required parameter 'diagnosticCategory' is set
      if (diagnosticCategory === undefined || diagnosticCategory === null) {
        throw new Error("Missing the required parameter 'diagnosticCategory' when calling diagnosticsGetSiteDetector");
      }
      // verify the required parameter 'detectorName' is set
      if (detectorName === undefined || detectorName === null) {
        throw new Error("Missing the required parameter 'detectorName' when calling diagnosticsGetSiteDetector");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling diagnosticsGetSiteDetector");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling diagnosticsGetSiteDetector");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'siteName': siteName,
        'diagnosticCategory': diagnosticCategory,
        'detectorName': detectorName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DetectorDefinition;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/diagnostics/{diagnosticCategory}/detectors/{detectorName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the diagnosticsGetSiteDetectorResponse operation.
     * @callback module:api/DiagnosticsApi~diagnosticsGetSiteDetectorResponseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DetectorResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get site detector response
     * Description for Get site detector response
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} siteName Site Name
     * @param {String} detectorName Detector Resource Name
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {Object} opts Optional parameters
     * @param {Date} [startTime] Start Time
     * @param {Date} [endTime] End Time
     * @param {String} [timeGrain] Time Grain
     * @param {module:api/DiagnosticsApi~diagnosticsGetSiteDetectorResponseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DetectorResponse}
     */
    diagnosticsGetSiteDetectorResponse(resourceGroupName, siteName, detectorName, subscriptionId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling diagnosticsGetSiteDetectorResponse");
      }
      // verify the required parameter 'siteName' is set
      if (siteName === undefined || siteName === null) {
        throw new Error("Missing the required parameter 'siteName' when calling diagnosticsGetSiteDetectorResponse");
      }
      // verify the required parameter 'detectorName' is set
      if (detectorName === undefined || detectorName === null) {
        throw new Error("Missing the required parameter 'detectorName' when calling diagnosticsGetSiteDetectorResponse");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling diagnosticsGetSiteDetectorResponse");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling diagnosticsGetSiteDetectorResponse");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'siteName': siteName,
        'detectorName': detectorName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'startTime': opts['startTime'],
        'endTime': opts['endTime'],
        'timeGrain': opts['timeGrain'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DetectorResponse;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/detectors/{detectorName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the diagnosticsGetSiteDetectorResponseSlot operation.
     * @callback module:api/DiagnosticsApi~diagnosticsGetSiteDetectorResponseSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DetectorResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get site detector response
     * Description for Get site detector response
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} siteName Site Name
     * @param {String} detectorName Detector Resource Name
     * @param {String} slot Slot Name
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {Object} opts Optional parameters
     * @param {Date} [startTime] Start Time
     * @param {Date} [endTime] End Time
     * @param {String} [timeGrain] Time Grain
     * @param {module:api/DiagnosticsApi~diagnosticsGetSiteDetectorResponseSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DetectorResponse}
     */
    diagnosticsGetSiteDetectorResponseSlot(resourceGroupName, siteName, detectorName, slot, subscriptionId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling diagnosticsGetSiteDetectorResponseSlot");
      }
      // verify the required parameter 'siteName' is set
      if (siteName === undefined || siteName === null) {
        throw new Error("Missing the required parameter 'siteName' when calling diagnosticsGetSiteDetectorResponseSlot");
      }
      // verify the required parameter 'detectorName' is set
      if (detectorName === undefined || detectorName === null) {
        throw new Error("Missing the required parameter 'detectorName' when calling diagnosticsGetSiteDetectorResponseSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling diagnosticsGetSiteDetectorResponseSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling diagnosticsGetSiteDetectorResponseSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling diagnosticsGetSiteDetectorResponseSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'siteName': siteName,
        'detectorName': detectorName,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'startTime': opts['startTime'],
        'endTime': opts['endTime'],
        'timeGrain': opts['timeGrain'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DetectorResponse;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slot}/detectors/{detectorName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the diagnosticsGetSiteDetectorSlot operation.
     * @callback module:api/DiagnosticsApi~diagnosticsGetSiteDetectorSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DetectorDefinition} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Detector
     * Description for Get Detector
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} siteName Site Name
     * @param {String} diagnosticCategory Diagnostic Category
     * @param {String} detectorName Detector Name
     * @param {String} slot Slot Name
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/DiagnosticsApi~diagnosticsGetSiteDetectorSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DetectorDefinition}
     */
    diagnosticsGetSiteDetectorSlot(resourceGroupName, siteName, diagnosticCategory, detectorName, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling diagnosticsGetSiteDetectorSlot");
      }
      // verify the required parameter 'siteName' is set
      if (siteName === undefined || siteName === null) {
        throw new Error("Missing the required parameter 'siteName' when calling diagnosticsGetSiteDetectorSlot");
      }
      // verify the required parameter 'diagnosticCategory' is set
      if (diagnosticCategory === undefined || diagnosticCategory === null) {
        throw new Error("Missing the required parameter 'diagnosticCategory' when calling diagnosticsGetSiteDetectorSlot");
      }
      // verify the required parameter 'detectorName' is set
      if (detectorName === undefined || detectorName === null) {
        throw new Error("Missing the required parameter 'detectorName' when calling diagnosticsGetSiteDetectorSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling diagnosticsGetSiteDetectorSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling diagnosticsGetSiteDetectorSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling diagnosticsGetSiteDetectorSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'siteName': siteName,
        'diagnosticCategory': diagnosticCategory,
        'detectorName': detectorName,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DetectorDefinition;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slot}/diagnostics/{diagnosticCategory}/detectors/{detectorName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the diagnosticsGetSiteDiagnosticCategory operation.
     * @callback module:api/DiagnosticsApi~diagnosticsGetSiteDiagnosticCategoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DiagnosticCategory} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Diagnostics Category
     * Description for Get Diagnostics Category
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} siteName Site Name
     * @param {String} diagnosticCategory Diagnostic Category
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/DiagnosticsApi~diagnosticsGetSiteDiagnosticCategoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DiagnosticCategory}
     */
    diagnosticsGetSiteDiagnosticCategory(resourceGroupName, siteName, diagnosticCategory, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling diagnosticsGetSiteDiagnosticCategory");
      }
      // verify the required parameter 'siteName' is set
      if (siteName === undefined || siteName === null) {
        throw new Error("Missing the required parameter 'siteName' when calling diagnosticsGetSiteDiagnosticCategory");
      }
      // verify the required parameter 'diagnosticCategory' is set
      if (diagnosticCategory === undefined || diagnosticCategory === null) {
        throw new Error("Missing the required parameter 'diagnosticCategory' when calling diagnosticsGetSiteDiagnosticCategory");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling diagnosticsGetSiteDiagnosticCategory");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling diagnosticsGetSiteDiagnosticCategory");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'siteName': siteName,
        'diagnosticCategory': diagnosticCategory,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DiagnosticCategory;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/diagnostics/{diagnosticCategory}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the diagnosticsGetSiteDiagnosticCategorySlot operation.
     * @callback module:api/DiagnosticsApi~diagnosticsGetSiteDiagnosticCategorySlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DiagnosticCategory} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Diagnostics Category
     * Description for Get Diagnostics Category
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} siteName Site Name
     * @param {String} diagnosticCategory Diagnostic Category
     * @param {String} slot Slot Name
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/DiagnosticsApi~diagnosticsGetSiteDiagnosticCategorySlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DiagnosticCategory}
     */
    diagnosticsGetSiteDiagnosticCategorySlot(resourceGroupName, siteName, diagnosticCategory, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling diagnosticsGetSiteDiagnosticCategorySlot");
      }
      // verify the required parameter 'siteName' is set
      if (siteName === undefined || siteName === null) {
        throw new Error("Missing the required parameter 'siteName' when calling diagnosticsGetSiteDiagnosticCategorySlot");
      }
      // verify the required parameter 'diagnosticCategory' is set
      if (diagnosticCategory === undefined || diagnosticCategory === null) {
        throw new Error("Missing the required parameter 'diagnosticCategory' when calling diagnosticsGetSiteDiagnosticCategorySlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling diagnosticsGetSiteDiagnosticCategorySlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling diagnosticsGetSiteDiagnosticCategorySlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling diagnosticsGetSiteDiagnosticCategorySlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'siteName': siteName,
        'diagnosticCategory': diagnosticCategory,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DiagnosticCategory;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slot}/diagnostics/{diagnosticCategory}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the diagnosticsListHostingEnvironmentDetectorResponses operation.
     * @callback module:api/DiagnosticsApi~diagnosticsListHostingEnvironmentDetectorResponsesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DetectorResponseCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Hosting Environment Detector Responses
     * Description for List Hosting Environment Detector Responses
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Site Name
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/DiagnosticsApi~diagnosticsListHostingEnvironmentDetectorResponsesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DetectorResponseCollection}
     */
    diagnosticsListHostingEnvironmentDetectorResponses(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling diagnosticsListHostingEnvironmentDetectorResponses");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling diagnosticsListHostingEnvironmentDetectorResponses");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling diagnosticsListHostingEnvironmentDetectorResponses");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling diagnosticsListHostingEnvironmentDetectorResponses");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DetectorResponseCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/detectors', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the diagnosticsListSiteAnalyses operation.
     * @callback module:api/DiagnosticsApi~diagnosticsListSiteAnalysesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DiagnosticAnalysisCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Site Analyses
     * Description for Get Site Analyses
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} siteName Site Name
     * @param {String} diagnosticCategory Diagnostic Category
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/DiagnosticsApi~diagnosticsListSiteAnalysesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DiagnosticAnalysisCollection}
     */
    diagnosticsListSiteAnalyses(resourceGroupName, siteName, diagnosticCategory, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling diagnosticsListSiteAnalyses");
      }
      // verify the required parameter 'siteName' is set
      if (siteName === undefined || siteName === null) {
        throw new Error("Missing the required parameter 'siteName' when calling diagnosticsListSiteAnalyses");
      }
      // verify the required parameter 'diagnosticCategory' is set
      if (diagnosticCategory === undefined || diagnosticCategory === null) {
        throw new Error("Missing the required parameter 'diagnosticCategory' when calling diagnosticsListSiteAnalyses");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling diagnosticsListSiteAnalyses");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling diagnosticsListSiteAnalyses");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'siteName': siteName,
        'diagnosticCategory': diagnosticCategory,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DiagnosticAnalysisCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/diagnostics/{diagnosticCategory}/analyses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the diagnosticsListSiteAnalysesSlot operation.
     * @callback module:api/DiagnosticsApi~diagnosticsListSiteAnalysesSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DiagnosticAnalysisCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Site Analyses
     * Description for Get Site Analyses
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} siteName Site Name
     * @param {String} diagnosticCategory Diagnostic Category
     * @param {String} slot Slot Name
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/DiagnosticsApi~diagnosticsListSiteAnalysesSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DiagnosticAnalysisCollection}
     */
    diagnosticsListSiteAnalysesSlot(resourceGroupName, siteName, diagnosticCategory, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling diagnosticsListSiteAnalysesSlot");
      }
      // verify the required parameter 'siteName' is set
      if (siteName === undefined || siteName === null) {
        throw new Error("Missing the required parameter 'siteName' when calling diagnosticsListSiteAnalysesSlot");
      }
      // verify the required parameter 'diagnosticCategory' is set
      if (diagnosticCategory === undefined || diagnosticCategory === null) {
        throw new Error("Missing the required parameter 'diagnosticCategory' when calling diagnosticsListSiteAnalysesSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling diagnosticsListSiteAnalysesSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling diagnosticsListSiteAnalysesSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling diagnosticsListSiteAnalysesSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'siteName': siteName,
        'diagnosticCategory': diagnosticCategory,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DiagnosticAnalysisCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slot}/diagnostics/{diagnosticCategory}/analyses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the diagnosticsListSiteDetectorResponses operation.
     * @callback module:api/DiagnosticsApi~diagnosticsListSiteDetectorResponsesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DetectorResponseCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Site Detector Responses
     * Description for List Site Detector Responses
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} siteName Site Name
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/DiagnosticsApi~diagnosticsListSiteDetectorResponsesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DetectorResponseCollection}
     */
    diagnosticsListSiteDetectorResponses(resourceGroupName, siteName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling diagnosticsListSiteDetectorResponses");
      }
      // verify the required parameter 'siteName' is set
      if (siteName === undefined || siteName === null) {
        throw new Error("Missing the required parameter 'siteName' when calling diagnosticsListSiteDetectorResponses");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling diagnosticsListSiteDetectorResponses");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling diagnosticsListSiteDetectorResponses");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'siteName': siteName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DetectorResponseCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/detectors', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the diagnosticsListSiteDetectorResponsesSlot operation.
     * @callback module:api/DiagnosticsApi~diagnosticsListSiteDetectorResponsesSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DetectorResponseCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Site Detector Responses
     * Description for List Site Detector Responses
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} siteName Site Name
     * @param {String} slot Slot Name
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/DiagnosticsApi~diagnosticsListSiteDetectorResponsesSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DetectorResponseCollection}
     */
    diagnosticsListSiteDetectorResponsesSlot(resourceGroupName, siteName, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling diagnosticsListSiteDetectorResponsesSlot");
      }
      // verify the required parameter 'siteName' is set
      if (siteName === undefined || siteName === null) {
        throw new Error("Missing the required parameter 'siteName' when calling diagnosticsListSiteDetectorResponsesSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling diagnosticsListSiteDetectorResponsesSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling diagnosticsListSiteDetectorResponsesSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling diagnosticsListSiteDetectorResponsesSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'siteName': siteName,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DetectorResponseCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slot}/detectors', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the diagnosticsListSiteDetectors operation.
     * @callback module:api/DiagnosticsApi~diagnosticsListSiteDetectorsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DiagnosticDetectorCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Detectors
     * Description for Get Detectors
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} siteName Site Name
     * @param {String} diagnosticCategory Diagnostic Category
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/DiagnosticsApi~diagnosticsListSiteDetectorsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DiagnosticDetectorCollection}
     */
    diagnosticsListSiteDetectors(resourceGroupName, siteName, diagnosticCategory, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling diagnosticsListSiteDetectors");
      }
      // verify the required parameter 'siteName' is set
      if (siteName === undefined || siteName === null) {
        throw new Error("Missing the required parameter 'siteName' when calling diagnosticsListSiteDetectors");
      }
      // verify the required parameter 'diagnosticCategory' is set
      if (diagnosticCategory === undefined || diagnosticCategory === null) {
        throw new Error("Missing the required parameter 'diagnosticCategory' when calling diagnosticsListSiteDetectors");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling diagnosticsListSiteDetectors");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling diagnosticsListSiteDetectors");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'siteName': siteName,
        'diagnosticCategory': diagnosticCategory,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DiagnosticDetectorCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/diagnostics/{diagnosticCategory}/detectors', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the diagnosticsListSiteDetectorsSlot operation.
     * @callback module:api/DiagnosticsApi~diagnosticsListSiteDetectorsSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DiagnosticDetectorCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Detectors
     * Description for Get Detectors
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} siteName Site Name
     * @param {String} diagnosticCategory Diagnostic Category
     * @param {String} slot Slot Name
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/DiagnosticsApi~diagnosticsListSiteDetectorsSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DiagnosticDetectorCollection}
     */
    diagnosticsListSiteDetectorsSlot(resourceGroupName, siteName, diagnosticCategory, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling diagnosticsListSiteDetectorsSlot");
      }
      // verify the required parameter 'siteName' is set
      if (siteName === undefined || siteName === null) {
        throw new Error("Missing the required parameter 'siteName' when calling diagnosticsListSiteDetectorsSlot");
      }
      // verify the required parameter 'diagnosticCategory' is set
      if (diagnosticCategory === undefined || diagnosticCategory === null) {
        throw new Error("Missing the required parameter 'diagnosticCategory' when calling diagnosticsListSiteDetectorsSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling diagnosticsListSiteDetectorsSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling diagnosticsListSiteDetectorsSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling diagnosticsListSiteDetectorsSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'siteName': siteName,
        'diagnosticCategory': diagnosticCategory,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DiagnosticDetectorCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slot}/diagnostics/{diagnosticCategory}/detectors', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the diagnosticsListSiteDiagnosticCategories operation.
     * @callback module:api/DiagnosticsApi~diagnosticsListSiteDiagnosticCategoriesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DiagnosticCategoryCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Diagnostics Categories
     * Description for Get Diagnostics Categories
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} siteName Site Name
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/DiagnosticsApi~diagnosticsListSiteDiagnosticCategoriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DiagnosticCategoryCollection}
     */
    diagnosticsListSiteDiagnosticCategories(resourceGroupName, siteName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling diagnosticsListSiteDiagnosticCategories");
      }
      // verify the required parameter 'siteName' is set
      if (siteName === undefined || siteName === null) {
        throw new Error("Missing the required parameter 'siteName' when calling diagnosticsListSiteDiagnosticCategories");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling diagnosticsListSiteDiagnosticCategories");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling diagnosticsListSiteDiagnosticCategories");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'siteName': siteName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DiagnosticCategoryCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/diagnostics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the diagnosticsListSiteDiagnosticCategoriesSlot operation.
     * @callback module:api/DiagnosticsApi~diagnosticsListSiteDiagnosticCategoriesSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DiagnosticCategoryCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Diagnostics Categories
     * Description for Get Diagnostics Categories
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} siteName Site Name
     * @param {String} slot Slot Name
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/DiagnosticsApi~diagnosticsListSiteDiagnosticCategoriesSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DiagnosticCategoryCollection}
     */
    diagnosticsListSiteDiagnosticCategoriesSlot(resourceGroupName, siteName, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling diagnosticsListSiteDiagnosticCategoriesSlot");
      }
      // verify the required parameter 'siteName' is set
      if (siteName === undefined || siteName === null) {
        throw new Error("Missing the required parameter 'siteName' when calling diagnosticsListSiteDiagnosticCategoriesSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling diagnosticsListSiteDiagnosticCategoriesSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling diagnosticsListSiteDiagnosticCategoriesSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling diagnosticsListSiteDiagnosticCategoriesSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'siteName': siteName,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DiagnosticCategoryCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slot}/diagnostics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
