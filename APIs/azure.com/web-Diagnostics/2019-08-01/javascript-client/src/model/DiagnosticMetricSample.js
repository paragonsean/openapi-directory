/**
 * Diagnostics API Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DiagnosticMetricSample model module.
 * @module model/DiagnosticMetricSample
 * @version 2019-08-01
 */
class DiagnosticMetricSample {
    /**
     * Constructs a new <code>DiagnosticMetricSample</code>.
     * Class representing Diagnostic Metric
     * @alias module:model/DiagnosticMetricSample
     */
    constructor() { 
        
        DiagnosticMetricSample.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DiagnosticMetricSample</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DiagnosticMetricSample} obj Optional instance to populate.
     * @return {module:model/DiagnosticMetricSample} The populated <code>DiagnosticMetricSample</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DiagnosticMetricSample();

            if (data.hasOwnProperty('isAggregated')) {
                obj['isAggregated'] = ApiClient.convertToType(data['isAggregated'], 'Boolean');
            }
            if (data.hasOwnProperty('maximum')) {
                obj['maximum'] = ApiClient.convertToType(data['maximum'], 'Number');
            }
            if (data.hasOwnProperty('minimum')) {
                obj['minimum'] = ApiClient.convertToType(data['minimum'], 'Number');
            }
            if (data.hasOwnProperty('roleInstance')) {
                obj['roleInstance'] = ApiClient.convertToType(data['roleInstance'], 'String');
            }
            if (data.hasOwnProperty('timestamp')) {
                obj['timestamp'] = ApiClient.convertToType(data['timestamp'], 'Date');
            }
            if (data.hasOwnProperty('total')) {
                obj['total'] = ApiClient.convertToType(data['total'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DiagnosticMetricSample</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DiagnosticMetricSample</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['roleInstance'] && !(typeof data['roleInstance'] === 'string' || data['roleInstance'] instanceof String)) {
            throw new Error("Expected the field `roleInstance` to be a primitive type in the JSON string but got " + data['roleInstance']);
        }

        return true;
    }


}



/**
 * Whether the values are aggregates across all workers or not
 * @member {Boolean} isAggregated
 */
DiagnosticMetricSample.prototype['isAggregated'] = undefined;

/**
 * Maximum of the metric sampled during the time period
 * @member {Number} maximum
 */
DiagnosticMetricSample.prototype['maximum'] = undefined;

/**
 * Minimum of the metric sampled during the time period
 * @member {Number} minimum
 */
DiagnosticMetricSample.prototype['minimum'] = undefined;

/**
 * Role Instance. Null if this counter is not per instance  This is returned and should be whichever instance name we desire to be returned i.e. CPU and Memory return RDWORKERNAME (LargeDed..._IN_0)  where RDWORKERNAME is Machine name below and RoleInstance name in parenthesis
 * @member {String} roleInstance
 */
DiagnosticMetricSample.prototype['roleInstance'] = undefined;

/**
 * Time at which metric is measured
 * @member {Date} timestamp
 */
DiagnosticMetricSample.prototype['timestamp'] = undefined;

/**
 * Total value of the metric. If multiple measurements are made this will have sum of all.
 * @member {Number} total
 */
DiagnosticMetricSample.prototype['total'] = undefined;






export default DiagnosticMetricSample;

