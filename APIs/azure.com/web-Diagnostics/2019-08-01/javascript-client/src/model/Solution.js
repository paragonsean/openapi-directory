/**
 * Diagnostics API Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AnalysisDataDataInnerInner from './AnalysisDataDataInnerInner';

/**
 * The Solution model module.
 * @module model/Solution
 * @version 2019-08-01
 */
class Solution {
    /**
     * Constructs a new <code>Solution</code>.
     * Class Representing Solution for problems detected.
     * @alias module:model/Solution
     */
    constructor() { 
        
        Solution.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Solution</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Solution} obj Optional instance to populate.
     * @return {module:model/Solution} The populated <code>Solution</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Solution();

            if (data.hasOwnProperty('data')) {
                obj['data'] = ApiClient.convertToType(data['data'], [[AnalysisDataDataInnerInner]]);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], [[AnalysisDataDataInnerInner]]);
            }
            if (data.hasOwnProperty('order')) {
                obj['order'] = ApiClient.convertToType(data['order'], 'Number');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Solution</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Solution</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['data'])) {
            throw new Error("Expected the field `data` to be an array in the JSON data but got " + data['data']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['metadata'])) {
            throw new Error("Expected the field `metadata` to be an array in the JSON data but got " + data['metadata']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * Solution Data.
 * @member {Array.<Array.<module:model/AnalysisDataDataInnerInner>>} data
 */
Solution.prototype['data'] = undefined;

/**
 * Description of the solution
 * @member {String} description
 */
Solution.prototype['description'] = undefined;

/**
 * Display Name of the solution
 * @member {String} displayName
 */
Solution.prototype['displayName'] = undefined;

/**
 * Solution Id.
 * @member {Number} id
 */
Solution.prototype['id'] = undefined;

/**
 * Solution Metadata.
 * @member {Array.<Array.<module:model/AnalysisDataDataInnerInner>>} metadata
 */
Solution.prototype['metadata'] = undefined;

/**
 * Order of the solution.
 * @member {Number} order
 */
Solution.prototype['order'] = undefined;

/**
 * Type of Solution
 * @member {module:model/Solution.TypeEnum} type
 */
Solution.prototype['type'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
Solution['TypeEnum'] = {

    /**
     * value: "QuickSolution"
     * @const
     */
    "QuickSolution": "QuickSolution",

    /**
     * value: "DeepInvestigation"
     * @const
     */
    "DeepInvestigation": "DeepInvestigation",

    /**
     * value: "BestPractices"
     * @const
     */
    "BestPractices": "BestPractices"
};



export default Solution;

