/*
 * Diagnostics API Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AnalysisDefinition;
import org.openapitools.client.model.DetectorDefinition;
import org.openapitools.client.model.DetectorResponse;
import org.openapitools.client.model.DetectorResponseCollection;
import org.openapitools.client.model.DiagnosticAnalysis;
import org.openapitools.client.model.DiagnosticAnalysisCollection;
import org.openapitools.client.model.DiagnosticCategory;
import org.openapitools.client.model.DiagnosticCategoryCollection;
import org.openapitools.client.model.DiagnosticDetectorCollection;
import org.openapitools.client.model.DiagnosticDetectorResponse;
import org.openapitools.client.model.DiagnosticsListHostingEnvironmentDetectorResponsesDefaultResponse;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DiagnosticsApi
 */
@Disabled
public class DiagnosticsApiTest {

    private final DiagnosticsApi api = new DiagnosticsApi();

    /**
     * Execute Analysis
     *
     * Description for Execute Analysis
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void diagnosticsExecuteSiteAnalysisTest() throws ApiException {
        String resourceGroupName = null;
        String siteName = null;
        String diagnosticCategory = null;
        String analysisName = null;
        String subscriptionId = null;
        String apiVersion = null;
        OffsetDateTime startTime = null;
        OffsetDateTime endTime = null;
        String timeGrain = null;
        DiagnosticAnalysis response = api.diagnosticsExecuteSiteAnalysis(resourceGroupName, siteName, diagnosticCategory, analysisName, subscriptionId, apiVersion, startTime, endTime, timeGrain);
        // TODO: test validations
    }

    /**
     * Execute Analysis
     *
     * Description for Execute Analysis
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void diagnosticsExecuteSiteAnalysisSlotTest() throws ApiException {
        String resourceGroupName = null;
        String siteName = null;
        String diagnosticCategory = null;
        String analysisName = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        OffsetDateTime startTime = null;
        OffsetDateTime endTime = null;
        String timeGrain = null;
        DiagnosticAnalysis response = api.diagnosticsExecuteSiteAnalysisSlot(resourceGroupName, siteName, diagnosticCategory, analysisName, slot, subscriptionId, apiVersion, startTime, endTime, timeGrain);
        // TODO: test validations
    }

    /**
     * Execute Detector
     *
     * Description for Execute Detector
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void diagnosticsExecuteSiteDetectorTest() throws ApiException {
        String resourceGroupName = null;
        String siteName = null;
        String detectorName = null;
        String diagnosticCategory = null;
        String subscriptionId = null;
        String apiVersion = null;
        OffsetDateTime startTime = null;
        OffsetDateTime endTime = null;
        String timeGrain = null;
        DiagnosticDetectorResponse response = api.diagnosticsExecuteSiteDetector(resourceGroupName, siteName, detectorName, diagnosticCategory, subscriptionId, apiVersion, startTime, endTime, timeGrain);
        // TODO: test validations
    }

    /**
     * Execute Detector
     *
     * Description for Execute Detector
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void diagnosticsExecuteSiteDetectorSlotTest() throws ApiException {
        String resourceGroupName = null;
        String siteName = null;
        String detectorName = null;
        String diagnosticCategory = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        OffsetDateTime startTime = null;
        OffsetDateTime endTime = null;
        String timeGrain = null;
        DiagnosticDetectorResponse response = api.diagnosticsExecuteSiteDetectorSlot(resourceGroupName, siteName, detectorName, diagnosticCategory, slot, subscriptionId, apiVersion, startTime, endTime, timeGrain);
        // TODO: test validations
    }

    /**
     * Get Hosting Environment Detector Response
     *
     * Description for Get Hosting Environment Detector Response
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void diagnosticsGetHostingEnvironmentDetectorResponseTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String detectorName = null;
        String subscriptionId = null;
        String apiVersion = null;
        OffsetDateTime startTime = null;
        OffsetDateTime endTime = null;
        String timeGrain = null;
        DetectorResponse response = api.diagnosticsGetHostingEnvironmentDetectorResponse(resourceGroupName, name, detectorName, subscriptionId, apiVersion, startTime, endTime, timeGrain);
        // TODO: test validations
    }

    /**
     * Get Site Analysis
     *
     * Description for Get Site Analysis
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void diagnosticsGetSiteAnalysisTest() throws ApiException {
        String resourceGroupName = null;
        String siteName = null;
        String diagnosticCategory = null;
        String analysisName = null;
        String subscriptionId = null;
        String apiVersion = null;
        AnalysisDefinition response = api.diagnosticsGetSiteAnalysis(resourceGroupName, siteName, diagnosticCategory, analysisName, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get Site Analysis
     *
     * Description for Get Site Analysis
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void diagnosticsGetSiteAnalysisSlotTest() throws ApiException {
        String resourceGroupName = null;
        String siteName = null;
        String diagnosticCategory = null;
        String analysisName = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        AnalysisDefinition response = api.diagnosticsGetSiteAnalysisSlot(resourceGroupName, siteName, diagnosticCategory, analysisName, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get Detector
     *
     * Description for Get Detector
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void diagnosticsGetSiteDetectorTest() throws ApiException {
        String resourceGroupName = null;
        String siteName = null;
        String diagnosticCategory = null;
        String detectorName = null;
        String subscriptionId = null;
        String apiVersion = null;
        DetectorDefinition response = api.diagnosticsGetSiteDetector(resourceGroupName, siteName, diagnosticCategory, detectorName, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get site detector response
     *
     * Description for Get site detector response
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void diagnosticsGetSiteDetectorResponseTest() throws ApiException {
        String resourceGroupName = null;
        String siteName = null;
        String detectorName = null;
        String subscriptionId = null;
        String apiVersion = null;
        OffsetDateTime startTime = null;
        OffsetDateTime endTime = null;
        String timeGrain = null;
        DetectorResponse response = api.diagnosticsGetSiteDetectorResponse(resourceGroupName, siteName, detectorName, subscriptionId, apiVersion, startTime, endTime, timeGrain);
        // TODO: test validations
    }

    /**
     * Get site detector response
     *
     * Description for Get site detector response
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void diagnosticsGetSiteDetectorResponseSlotTest() throws ApiException {
        String resourceGroupName = null;
        String siteName = null;
        String detectorName = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        OffsetDateTime startTime = null;
        OffsetDateTime endTime = null;
        String timeGrain = null;
        DetectorResponse response = api.diagnosticsGetSiteDetectorResponseSlot(resourceGroupName, siteName, detectorName, slot, subscriptionId, apiVersion, startTime, endTime, timeGrain);
        // TODO: test validations
    }

    /**
     * Get Detector
     *
     * Description for Get Detector
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void diagnosticsGetSiteDetectorSlotTest() throws ApiException {
        String resourceGroupName = null;
        String siteName = null;
        String diagnosticCategory = null;
        String detectorName = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        DetectorDefinition response = api.diagnosticsGetSiteDetectorSlot(resourceGroupName, siteName, diagnosticCategory, detectorName, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get Diagnostics Category
     *
     * Description for Get Diagnostics Category
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void diagnosticsGetSiteDiagnosticCategoryTest() throws ApiException {
        String resourceGroupName = null;
        String siteName = null;
        String diagnosticCategory = null;
        String subscriptionId = null;
        String apiVersion = null;
        DiagnosticCategory response = api.diagnosticsGetSiteDiagnosticCategory(resourceGroupName, siteName, diagnosticCategory, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get Diagnostics Category
     *
     * Description for Get Diagnostics Category
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void diagnosticsGetSiteDiagnosticCategorySlotTest() throws ApiException {
        String resourceGroupName = null;
        String siteName = null;
        String diagnosticCategory = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        DiagnosticCategory response = api.diagnosticsGetSiteDiagnosticCategorySlot(resourceGroupName, siteName, diagnosticCategory, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * List Hosting Environment Detector Responses
     *
     * Description for List Hosting Environment Detector Responses
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void diagnosticsListHostingEnvironmentDetectorResponsesTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        DetectorResponseCollection response = api.diagnosticsListHostingEnvironmentDetectorResponses(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get Site Analyses
     *
     * Description for Get Site Analyses
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void diagnosticsListSiteAnalysesTest() throws ApiException {
        String resourceGroupName = null;
        String siteName = null;
        String diagnosticCategory = null;
        String subscriptionId = null;
        String apiVersion = null;
        DiagnosticAnalysisCollection response = api.diagnosticsListSiteAnalyses(resourceGroupName, siteName, diagnosticCategory, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get Site Analyses
     *
     * Description for Get Site Analyses
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void diagnosticsListSiteAnalysesSlotTest() throws ApiException {
        String resourceGroupName = null;
        String siteName = null;
        String diagnosticCategory = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        DiagnosticAnalysisCollection response = api.diagnosticsListSiteAnalysesSlot(resourceGroupName, siteName, diagnosticCategory, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * List Site Detector Responses
     *
     * Description for List Site Detector Responses
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void diagnosticsListSiteDetectorResponsesTest() throws ApiException {
        String resourceGroupName = null;
        String siteName = null;
        String subscriptionId = null;
        String apiVersion = null;
        DetectorResponseCollection response = api.diagnosticsListSiteDetectorResponses(resourceGroupName, siteName, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * List Site Detector Responses
     *
     * Description for List Site Detector Responses
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void diagnosticsListSiteDetectorResponsesSlotTest() throws ApiException {
        String resourceGroupName = null;
        String siteName = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        DetectorResponseCollection response = api.diagnosticsListSiteDetectorResponsesSlot(resourceGroupName, siteName, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get Detectors
     *
     * Description for Get Detectors
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void diagnosticsListSiteDetectorsTest() throws ApiException {
        String resourceGroupName = null;
        String siteName = null;
        String diagnosticCategory = null;
        String subscriptionId = null;
        String apiVersion = null;
        DiagnosticDetectorCollection response = api.diagnosticsListSiteDetectors(resourceGroupName, siteName, diagnosticCategory, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get Detectors
     *
     * Description for Get Detectors
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void diagnosticsListSiteDetectorsSlotTest() throws ApiException {
        String resourceGroupName = null;
        String siteName = null;
        String diagnosticCategory = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        DiagnosticDetectorCollection response = api.diagnosticsListSiteDetectorsSlot(resourceGroupName, siteName, diagnosticCategory, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get Diagnostics Categories
     *
     * Description for Get Diagnostics Categories
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void diagnosticsListSiteDiagnosticCategoriesTest() throws ApiException {
        String resourceGroupName = null;
        String siteName = null;
        String subscriptionId = null;
        String apiVersion = null;
        DiagnosticCategoryCollection response = api.diagnosticsListSiteDiagnosticCategories(resourceGroupName, siteName, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get Diagnostics Categories
     *
     * Description for Get Diagnostics Categories
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void diagnosticsListSiteDiagnosticCategoriesSlotTest() throws ApiException {
        String resourceGroupName = null;
        String siteName = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        DiagnosticCategoryCollection response = api.diagnosticsListSiteDiagnosticCategoriesSlot(resourceGroupName, siteName, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

}
