# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Annotation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, annotation_name: str=None, category: str=None, event_time: datetime=None, id: str=None, properties: str=None, related_annotation: str='null'):
        """Annotation - a model defined in OpenAPI

        :param annotation_name: The annotation_name of this Annotation.
        :param category: The category of this Annotation.
        :param event_time: The event_time of this Annotation.
        :param id: The id of this Annotation.
        :param properties: The properties of this Annotation.
        :param related_annotation: The related_annotation of this Annotation.
        """
        self.openapi_types = {
            'annotation_name': str,
            'category': str,
            'event_time': datetime,
            'id': str,
            'properties': str,
            'related_annotation': str
        }

        self.attribute_map = {
            'annotation_name': 'AnnotationName',
            'category': 'Category',
            'event_time': 'EventTime',
            'id': 'Id',
            'properties': 'Properties',
            'related_annotation': 'RelatedAnnotation'
        }

        self._annotation_name = annotation_name
        self._category = category
        self._event_time = event_time
        self._id = id
        self._properties = properties
        self._related_annotation = related_annotation

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Annotation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Annotation of this Annotation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def annotation_name(self):
        """Gets the annotation_name of this Annotation.

        Name of annotation

        :return: The annotation_name of this Annotation.
        :rtype: str
        """
        return self._annotation_name

    @annotation_name.setter
    def annotation_name(self, annotation_name):
        """Sets the annotation_name of this Annotation.

        Name of annotation

        :param annotation_name: The annotation_name of this Annotation.
        :type annotation_name: str
        """

        self._annotation_name = annotation_name

    @property
    def category(self):
        """Gets the category of this Annotation.

        Category of annotation, free form

        :return: The category of this Annotation.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this Annotation.

        Category of annotation, free form

        :param category: The category of this Annotation.
        :type category: str
        """

        self._category = category

    @property
    def event_time(self):
        """Gets the event_time of this Annotation.

        Time when event occurred

        :return: The event_time of this Annotation.
        :rtype: datetime
        """
        return self._event_time

    @event_time.setter
    def event_time(self, event_time):
        """Sets the event_time of this Annotation.

        Time when event occurred

        :param event_time: The event_time of this Annotation.
        :type event_time: datetime
        """

        self._event_time = event_time

    @property
    def id(self):
        """Gets the id of this Annotation.

        Unique Id for annotation

        :return: The id of this Annotation.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Annotation.

        Unique Id for annotation

        :param id: The id of this Annotation.
        :type id: str
        """

        self._id = id

    @property
    def properties(self):
        """Gets the properties of this Annotation.

        Serialized JSON object for detailed properties

        :return: The properties of this Annotation.
        :rtype: str
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this Annotation.

        Serialized JSON object for detailed properties

        :param properties: The properties of this Annotation.
        :type properties: str
        """

        self._properties = properties

    @property
    def related_annotation(self):
        """Gets the related_annotation of this Annotation.

        Related parent annotation if any

        :return: The related_annotation of this Annotation.
        :rtype: str
        """
        return self._related_annotation

    @related_annotation.setter
    def related_annotation(self, related_annotation):
        """Sets the related_annotation of this Annotation.

        Related parent annotation if any

        :param related_annotation: The related_annotation of this Annotation.
        :type related_annotation: str
        """

        self._related_annotation = related_annotation
