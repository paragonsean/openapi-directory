/**
 * ApplicationInsightsManagementClient
 * Azure Application Insights client for Annotations for a component.
 *
 * The version of the OpenAPI document: 2015-05-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAnnotation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAnnotation::OAIAnnotation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAnnotation::OAIAnnotation() {
    this->initializeModel();
}

OAIAnnotation::~OAIAnnotation() {}

void OAIAnnotation::initializeModel() {

    m_annotation_name_isSet = false;
    m_annotation_name_isValid = false;

    m_category_isSet = false;
    m_category_isValid = false;

    m_event_time_isSet = false;
    m_event_time_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_properties_isSet = false;
    m_properties_isValid = false;

    m_related_annotation_isSet = false;
    m_related_annotation_isValid = false;
}

void OAIAnnotation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAnnotation::fromJsonObject(QJsonObject json) {

    m_annotation_name_isValid = ::OpenAPI::fromJsonValue(m_annotation_name, json[QString("AnnotationName")]);
    m_annotation_name_isSet = !json[QString("AnnotationName")].isNull() && m_annotation_name_isValid;

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("Category")]);
    m_category_isSet = !json[QString("Category")].isNull() && m_category_isValid;

    m_event_time_isValid = ::OpenAPI::fromJsonValue(m_event_time, json[QString("EventTime")]);
    m_event_time_isSet = !json[QString("EventTime")].isNull() && m_event_time_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_properties_isValid = ::OpenAPI::fromJsonValue(m_properties, json[QString("Properties")]);
    m_properties_isSet = !json[QString("Properties")].isNull() && m_properties_isValid;

    m_related_annotation_isValid = ::OpenAPI::fromJsonValue(m_related_annotation, json[QString("RelatedAnnotation")]);
    m_related_annotation_isSet = !json[QString("RelatedAnnotation")].isNull() && m_related_annotation_isValid;
}

QString OAIAnnotation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAnnotation::asJsonObject() const {
    QJsonObject obj;
    if (m_annotation_name_isSet) {
        obj.insert(QString("AnnotationName"), ::OpenAPI::toJsonValue(m_annotation_name));
    }
    if (m_category_isSet) {
        obj.insert(QString("Category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_event_time_isSet) {
        obj.insert(QString("EventTime"), ::OpenAPI::toJsonValue(m_event_time));
    }
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_properties_isSet) {
        obj.insert(QString("Properties"), ::OpenAPI::toJsonValue(m_properties));
    }
    if (m_related_annotation_isSet) {
        obj.insert(QString("RelatedAnnotation"), ::OpenAPI::toJsonValue(m_related_annotation));
    }
    return obj;
}

QString OAIAnnotation::getAnnotationName() const {
    return m_annotation_name;
}
void OAIAnnotation::setAnnotationName(const QString &annotation_name) {
    m_annotation_name = annotation_name;
    m_annotation_name_isSet = true;
}

bool OAIAnnotation::is_annotation_name_Set() const{
    return m_annotation_name_isSet;
}

bool OAIAnnotation::is_annotation_name_Valid() const{
    return m_annotation_name_isValid;
}

QString OAIAnnotation::getCategory() const {
    return m_category;
}
void OAIAnnotation::setCategory(const QString &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAIAnnotation::is_category_Set() const{
    return m_category_isSet;
}

bool OAIAnnotation::is_category_Valid() const{
    return m_category_isValid;
}

QDateTime OAIAnnotation::getEventTime() const {
    return m_event_time;
}
void OAIAnnotation::setEventTime(const QDateTime &event_time) {
    m_event_time = event_time;
    m_event_time_isSet = true;
}

bool OAIAnnotation::is_event_time_Set() const{
    return m_event_time_isSet;
}

bool OAIAnnotation::is_event_time_Valid() const{
    return m_event_time_isValid;
}

QString OAIAnnotation::getId() const {
    return m_id;
}
void OAIAnnotation::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAnnotation::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAnnotation::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIAnnotation::getProperties() const {
    return m_properties;
}
void OAIAnnotation::setProperties(const QString &properties) {
    m_properties = properties;
    m_properties_isSet = true;
}

bool OAIAnnotation::is_properties_Set() const{
    return m_properties_isSet;
}

bool OAIAnnotation::is_properties_Valid() const{
    return m_properties_isValid;
}

QString OAIAnnotation::getRelatedAnnotation() const {
    return m_related_annotation;
}
void OAIAnnotation::setRelatedAnnotation(const QString &related_annotation) {
    m_related_annotation = related_annotation;
    m_related_annotation_isSet = true;
}

bool OAIAnnotation::is_related_annotation_Set() const{
    return m_related_annotation_isSet;
}

bool OAIAnnotation::is_related_annotation_Valid() const{
    return m_related_annotation_isValid;
}

bool OAIAnnotation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_annotation_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_properties_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_related_annotation_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAnnotation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
