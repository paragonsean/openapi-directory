/**
 * ApplicationInsightsManagementClient
 * Azure Application Insights client for Annotations for a component.
 *
 * The version of the OpenAPI document: 2015-05-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Annotation model module.
 * @module model/Annotation
 * @version 2015-05-01
 */
class Annotation {
    /**
     * Constructs a new <code>Annotation</code>.
     * Annotation associated with an application insights resource.
     * @alias module:model/Annotation
     */
    constructor() { 
        
        Annotation.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['RelatedAnnotation'] = 'null';
    }

    /**
     * Constructs a <code>Annotation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Annotation} obj Optional instance to populate.
     * @return {module:model/Annotation} The populated <code>Annotation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Annotation();

            if (data.hasOwnProperty('AnnotationName')) {
                obj['AnnotationName'] = ApiClient.convertToType(data['AnnotationName'], 'String');
            }
            if (data.hasOwnProperty('Category')) {
                obj['Category'] = ApiClient.convertToType(data['Category'], 'String');
            }
            if (data.hasOwnProperty('EventTime')) {
                obj['EventTime'] = ApiClient.convertToType(data['EventTime'], 'Date');
            }
            if (data.hasOwnProperty('Id')) {
                obj['Id'] = ApiClient.convertToType(data['Id'], 'String');
            }
            if (data.hasOwnProperty('Properties')) {
                obj['Properties'] = ApiClient.convertToType(data['Properties'], 'String');
            }
            if (data.hasOwnProperty('RelatedAnnotation')) {
                obj['RelatedAnnotation'] = ApiClient.convertToType(data['RelatedAnnotation'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Annotation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Annotation</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['AnnotationName'] && !(typeof data['AnnotationName'] === 'string' || data['AnnotationName'] instanceof String)) {
            throw new Error("Expected the field `AnnotationName` to be a primitive type in the JSON string but got " + data['AnnotationName']);
        }
        // ensure the json data is a string
        if (data['Category'] && !(typeof data['Category'] === 'string' || data['Category'] instanceof String)) {
            throw new Error("Expected the field `Category` to be a primitive type in the JSON string but got " + data['Category']);
        }
        // ensure the json data is a string
        if (data['Id'] && !(typeof data['Id'] === 'string' || data['Id'] instanceof String)) {
            throw new Error("Expected the field `Id` to be a primitive type in the JSON string but got " + data['Id']);
        }
        // ensure the json data is a string
        if (data['Properties'] && !(typeof data['Properties'] === 'string' || data['Properties'] instanceof String)) {
            throw new Error("Expected the field `Properties` to be a primitive type in the JSON string but got " + data['Properties']);
        }
        // ensure the json data is a string
        if (data['RelatedAnnotation'] && !(typeof data['RelatedAnnotation'] === 'string' || data['RelatedAnnotation'] instanceof String)) {
            throw new Error("Expected the field `RelatedAnnotation` to be a primitive type in the JSON string but got " + data['RelatedAnnotation']);
        }

        return true;
    }


}



/**
 * Name of annotation
 * @member {String} AnnotationName
 */
Annotation.prototype['AnnotationName'] = undefined;

/**
 * Category of annotation, free form
 * @member {String} Category
 */
Annotation.prototype['Category'] = undefined;

/**
 * Time when event occurred
 * @member {Date} EventTime
 */
Annotation.prototype['EventTime'] = undefined;

/**
 * Unique Id for annotation
 * @member {String} Id
 */
Annotation.prototype['Id'] = undefined;

/**
 * Serialized JSON object for detailed properties
 * @member {String} Properties
 */
Annotation.prototype['Properties'] = undefined;

/**
 * Related parent annotation if any
 * @member {String} RelatedAnnotation
 * @default 'null'
 */
Annotation.prototype['RelatedAnnotation'] = 'null';






export default Annotation;

