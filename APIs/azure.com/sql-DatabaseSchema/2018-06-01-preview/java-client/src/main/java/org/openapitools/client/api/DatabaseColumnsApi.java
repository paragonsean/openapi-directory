/*
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2018-06-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DatabaseColumn;
import org.openapitools.client.model.DatabaseColumnListResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DatabaseColumnsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DatabaseColumnsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DatabaseColumnsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for databaseColumnsGet
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param serverName The name of the server. (required)
     * @param databaseName The name of the database. (required)
     * @param schemaName The name of the schema. (required)
     * @param tableName The name of the table. (required)
     * @param columnName The name of the column. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved database column. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 404 SubscriptionDoesNotHaveServer - The requested server was not found   * 404 SourceDatabaseNotFound - The source database does not exist.   * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.   * 404 InvalidDatabaseSchema - Schema is missing in database.   * 404 InvalidDatabaseTable - Table is missing in database.   * 404 InvalidDatabaseColumn - Column is missing in table. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseColumnsGetCall(String resourceGroupName, String serverName, String databaseName, String schemaName, String tableName, String columnName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/schemas/{schemaName}/tables/{tableName}/columns/{columnName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "serverName" + "}", localVarApiClient.escapeString(serverName.toString()))
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()))
            .replace("{" + "schemaName" + "}", localVarApiClient.escapeString(schemaName.toString()))
            .replace("{" + "tableName" + "}", localVarApiClient.escapeString(tableName.toString()))
            .replace("{" + "columnName" + "}", localVarApiClient.escapeString(columnName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call databaseColumnsGetValidateBeforeCall(String resourceGroupName, String serverName, String databaseName, String schemaName, String tableName, String columnName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling databaseColumnsGet(Async)");
        }

        // verify the required parameter 'serverName' is set
        if (serverName == null) {
            throw new ApiException("Missing the required parameter 'serverName' when calling databaseColumnsGet(Async)");
        }

        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling databaseColumnsGet(Async)");
        }

        // verify the required parameter 'schemaName' is set
        if (schemaName == null) {
            throw new ApiException("Missing the required parameter 'schemaName' when calling databaseColumnsGet(Async)");
        }

        // verify the required parameter 'tableName' is set
        if (tableName == null) {
            throw new ApiException("Missing the required parameter 'tableName' when calling databaseColumnsGet(Async)");
        }

        // verify the required parameter 'columnName' is set
        if (columnName == null) {
            throw new ApiException("Missing the required parameter 'columnName' when calling databaseColumnsGet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling databaseColumnsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling databaseColumnsGet(Async)");
        }

        return databaseColumnsGetCall(resourceGroupName, serverName, databaseName, schemaName, tableName, columnName, subscriptionId, apiVersion, _callback);

    }

    /**
     * 
     * Get database column
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param serverName The name of the server. (required)
     * @param databaseName The name of the database. (required)
     * @param schemaName The name of the schema. (required)
     * @param tableName The name of the table. (required)
     * @param columnName The name of the column. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @return DatabaseColumn
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved database column. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 404 SubscriptionDoesNotHaveServer - The requested server was not found   * 404 SourceDatabaseNotFound - The source database does not exist.   * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.   * 404 InvalidDatabaseSchema - Schema is missing in database.   * 404 InvalidDatabaseTable - Table is missing in database.   * 404 InvalidDatabaseColumn - Column is missing in table. </td><td>  -  </td></tr>
     </table>
     */
    public DatabaseColumn databaseColumnsGet(String resourceGroupName, String serverName, String databaseName, String schemaName, String tableName, String columnName, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<DatabaseColumn> localVarResp = databaseColumnsGetWithHttpInfo(resourceGroupName, serverName, databaseName, schemaName, tableName, columnName, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Get database column
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param serverName The name of the server. (required)
     * @param databaseName The name of the database. (required)
     * @param schemaName The name of the schema. (required)
     * @param tableName The name of the table. (required)
     * @param columnName The name of the column. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @return ApiResponse&lt;DatabaseColumn&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved database column. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 404 SubscriptionDoesNotHaveServer - The requested server was not found   * 404 SourceDatabaseNotFound - The source database does not exist.   * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.   * 404 InvalidDatabaseSchema - Schema is missing in database.   * 404 InvalidDatabaseTable - Table is missing in database.   * 404 InvalidDatabaseColumn - Column is missing in table. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DatabaseColumn> databaseColumnsGetWithHttpInfo(String resourceGroupName, String serverName, String databaseName, String schemaName, String tableName, String columnName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = databaseColumnsGetValidateBeforeCall(resourceGroupName, serverName, databaseName, schemaName, tableName, columnName, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<DatabaseColumn>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get database column
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param serverName The name of the server. (required)
     * @param databaseName The name of the database. (required)
     * @param schemaName The name of the schema. (required)
     * @param tableName The name of the table. (required)
     * @param columnName The name of the column. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved database column. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 404 SubscriptionDoesNotHaveServer - The requested server was not found   * 404 SourceDatabaseNotFound - The source database does not exist.   * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.   * 404 InvalidDatabaseSchema - Schema is missing in database.   * 404 InvalidDatabaseTable - Table is missing in database.   * 404 InvalidDatabaseColumn - Column is missing in table. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseColumnsGetAsync(String resourceGroupName, String serverName, String databaseName, String schemaName, String tableName, String columnName, String subscriptionId, String apiVersion, final ApiCallback<DatabaseColumn> _callback) throws ApiException {

        okhttp3.Call localVarCall = databaseColumnsGetValidateBeforeCall(resourceGroupName, serverName, databaseName, schemaName, tableName, columnName, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<DatabaseColumn>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for databaseColumnsListByTable
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param serverName The name of the server. (required)
     * @param databaseName The name of the database. (required)
     * @param schemaName The name of the schema. (required)
     * @param tableName The name of the table. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param $filter An OData filter expression that filters elements in the collection. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved database columns. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 404 SubscriptionDoesNotHaveServer - The requested server was not found   * 404 SourceDatabaseNotFound - The source database does not exist.   * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.   * 404 InvalidDatabaseSchema - Schema is missing in database.   * 404 InvalidDatabaseTable - Table is missing in database.   * 404 InvalidDatabaseColumn - Column is missing in table. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseColumnsListByTableCall(String resourceGroupName, String serverName, String databaseName, String schemaName, String tableName, String subscriptionId, String apiVersion, String $filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/schemas/{schemaName}/tables/{tableName}/columns"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "serverName" + "}", localVarApiClient.escapeString(serverName.toString()))
            .replace("{" + "databaseName" + "}", localVarApiClient.escapeString(databaseName.toString()))
            .replace("{" + "schemaName" + "}", localVarApiClient.escapeString(schemaName.toString()))
            .replace("{" + "tableName" + "}", localVarApiClient.escapeString(tableName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call databaseColumnsListByTableValidateBeforeCall(String resourceGroupName, String serverName, String databaseName, String schemaName, String tableName, String subscriptionId, String apiVersion, String $filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling databaseColumnsListByTable(Async)");
        }

        // verify the required parameter 'serverName' is set
        if (serverName == null) {
            throw new ApiException("Missing the required parameter 'serverName' when calling databaseColumnsListByTable(Async)");
        }

        // verify the required parameter 'databaseName' is set
        if (databaseName == null) {
            throw new ApiException("Missing the required parameter 'databaseName' when calling databaseColumnsListByTable(Async)");
        }

        // verify the required parameter 'schemaName' is set
        if (schemaName == null) {
            throw new ApiException("Missing the required parameter 'schemaName' when calling databaseColumnsListByTable(Async)");
        }

        // verify the required parameter 'tableName' is set
        if (tableName == null) {
            throw new ApiException("Missing the required parameter 'tableName' when calling databaseColumnsListByTable(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling databaseColumnsListByTable(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling databaseColumnsListByTable(Async)");
        }

        return databaseColumnsListByTableCall(resourceGroupName, serverName, databaseName, schemaName, tableName, subscriptionId, apiVersion, $filter, _callback);

    }

    /**
     * 
     * List database columns
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param serverName The name of the server. (required)
     * @param databaseName The name of the database. (required)
     * @param schemaName The name of the schema. (required)
     * @param tableName The name of the table. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param $filter An OData filter expression that filters elements in the collection. (optional)
     * @return DatabaseColumnListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved database columns. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 404 SubscriptionDoesNotHaveServer - The requested server was not found   * 404 SourceDatabaseNotFound - The source database does not exist.   * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.   * 404 InvalidDatabaseSchema - Schema is missing in database.   * 404 InvalidDatabaseTable - Table is missing in database.   * 404 InvalidDatabaseColumn - Column is missing in table. </td><td>  -  </td></tr>
     </table>
     */
    public DatabaseColumnListResult databaseColumnsListByTable(String resourceGroupName, String serverName, String databaseName, String schemaName, String tableName, String subscriptionId, String apiVersion, String $filter) throws ApiException {
        ApiResponse<DatabaseColumnListResult> localVarResp = databaseColumnsListByTableWithHttpInfo(resourceGroupName, serverName, databaseName, schemaName, tableName, subscriptionId, apiVersion, $filter);
        return localVarResp.getData();
    }

    /**
     * 
     * List database columns
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param serverName The name of the server. (required)
     * @param databaseName The name of the database. (required)
     * @param schemaName The name of the schema. (required)
     * @param tableName The name of the table. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param $filter An OData filter expression that filters elements in the collection. (optional)
     * @return ApiResponse&lt;DatabaseColumnListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved database columns. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 404 SubscriptionDoesNotHaveServer - The requested server was not found   * 404 SourceDatabaseNotFound - The source database does not exist.   * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.   * 404 InvalidDatabaseSchema - Schema is missing in database.   * 404 InvalidDatabaseTable - Table is missing in database.   * 404 InvalidDatabaseColumn - Column is missing in table. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DatabaseColumnListResult> databaseColumnsListByTableWithHttpInfo(String resourceGroupName, String serverName, String databaseName, String schemaName, String tableName, String subscriptionId, String apiVersion, String $filter) throws ApiException {
        okhttp3.Call localVarCall = databaseColumnsListByTableValidateBeforeCall(resourceGroupName, serverName, databaseName, schemaName, tableName, subscriptionId, apiVersion, $filter, null);
        Type localVarReturnType = new TypeToken<DatabaseColumnListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List database columns
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param serverName The name of the server. (required)
     * @param databaseName The name of the database. (required)
     * @param schemaName The name of the schema. (required)
     * @param tableName The name of the table. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param $filter An OData filter expression that filters elements in the collection. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved database columns. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 404 SubscriptionDoesNotHaveServer - The requested server was not found   * 404 SourceDatabaseNotFound - The source database does not exist.   * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.   * 404 InvalidDatabaseSchema - Schema is missing in database.   * 404 InvalidDatabaseTable - Table is missing in database.   * 404 InvalidDatabaseColumn - Column is missing in table. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseColumnsListByTableAsync(String resourceGroupName, String serverName, String databaseName, String schemaName, String tableName, String subscriptionId, String apiVersion, String $filter, final ApiCallback<DatabaseColumnListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = databaseColumnsListByTableValidateBeforeCall(resourceGroupName, serverName, databaseName, schemaName, tableName, subscriptionId, apiVersion, $filter, _callback);
        Type localVarReturnType = new TypeToken<DatabaseColumnListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
