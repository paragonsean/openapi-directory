/*
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2018-06-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Database column properties.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:27:07.898066-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DatabaseColumnProperties {
  /**
   * The column data type.
   */
  @JsonAdapter(ColumnTypeEnum.Adapter.class)
  public enum ColumnTypeEnum {
    IMAGE("image"),
    
    TEXT("text"),
    
    UNIQUEIDENTIFIER("uniqueidentifier"),
    
    DATE("date"),
    
    TIME("time"),
    
    DATETIME2("datetime2"),
    
    DATETIMEOFFSET("datetimeoffset"),
    
    TINYINT("tinyint"),
    
    SMALLINT("smallint"),
    
    INT("int"),
    
    SMALLDATETIME("smalldatetime"),
    
    REAL("real"),
    
    MONEY("money"),
    
    DATETIME("datetime"),
    
    FLOAT("float"),
    
    SQL_VARIANT("sql_variant"),
    
    NTEXT("ntext"),
    
    BIT("bit"),
    
    DECIMAL("decimal"),
    
    NUMERIC("numeric"),
    
    SMALLMONEY("smallmoney"),
    
    BIGINT("bigint"),
    
    HIERARCHYID("hierarchyid"),
    
    GEOMETRY("geometry"),
    
    GEOGRAPHY("geography"),
    
    VARBINARY("varbinary"),
    
    VARCHAR("varchar"),
    
    BINARY("binary"),
    
    CHAR("char"),
    
    TIMESTAMP("timestamp"),
    
    NVARCHAR("nvarchar"),
    
    NCHAR("nchar"),
    
    XML("xml"),
    
    SYSNAME("sysname");

    private String value;

    ColumnTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ColumnTypeEnum fromValue(String value) {
      for (ColumnTypeEnum b : ColumnTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ColumnTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ColumnTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ColumnTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ColumnTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ColumnTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_COLUMN_TYPE = "columnType";
  @SerializedName(SERIALIZED_NAME_COLUMN_TYPE)
  private ColumnTypeEnum columnType;

  public DatabaseColumnProperties() {
  }

  public DatabaseColumnProperties columnType(ColumnTypeEnum columnType) {
    this.columnType = columnType;
    return this;
  }

  /**
   * The column data type.
   * @return columnType
   */
  @javax.annotation.Nullable
  public ColumnTypeEnum getColumnType() {
    return columnType;
  }

  public void setColumnType(ColumnTypeEnum columnType) {
    this.columnType = columnType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DatabaseColumnProperties databaseColumnProperties = (DatabaseColumnProperties) o;
    return Objects.equals(this.columnType, databaseColumnProperties.columnType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(columnType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DatabaseColumnProperties {\n");
    sb.append("    columnType: ").append(toIndentedString(columnType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("columnType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DatabaseColumnProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DatabaseColumnProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DatabaseColumnProperties is not found in the empty JSON string", DatabaseColumnProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DatabaseColumnProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DatabaseColumnProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("columnType") != null && !jsonObj.get("columnType").isJsonNull()) && !jsonObj.get("columnType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `columnType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("columnType").toString()));
      }
      // validate the optional field `columnType`
      if (jsonObj.get("columnType") != null && !jsonObj.get("columnType").isJsonNull()) {
        ColumnTypeEnum.validateJsonElement(jsonObj.get("columnType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DatabaseColumnProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DatabaseColumnProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DatabaseColumnProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DatabaseColumnProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<DatabaseColumnProperties>() {
           @Override
           public void write(JsonWriter out, DatabaseColumnProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DatabaseColumnProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DatabaseColumnProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DatabaseColumnProperties
   * @throws IOException if the JSON string is invalid with respect to DatabaseColumnProperties
   */
  public static DatabaseColumnProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DatabaseColumnProperties.class);
  }

  /**
   * Convert an instance of DatabaseColumnProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

