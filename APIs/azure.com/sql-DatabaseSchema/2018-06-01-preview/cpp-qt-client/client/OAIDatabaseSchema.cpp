/**
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2018-06-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDatabaseSchema.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDatabaseSchema::OAIDatabaseSchema(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDatabaseSchema::OAIDatabaseSchema() {
    this->initializeModel();
}

OAIDatabaseSchema::~OAIDatabaseSchema() {}

void OAIDatabaseSchema::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIDatabaseSchema::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDatabaseSchema::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIDatabaseSchema::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDatabaseSchema::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIDatabaseSchema::getId() const {
    return m_id;
}
void OAIDatabaseSchema::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIDatabaseSchema::is_id_Set() const{
    return m_id_isSet;
}

bool OAIDatabaseSchema::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIDatabaseSchema::getName() const {
    return m_name;
}
void OAIDatabaseSchema::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDatabaseSchema::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDatabaseSchema::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIDatabaseSchema::getType() const {
    return m_type;
}
void OAIDatabaseSchema::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIDatabaseSchema::is_type_Set() const{
    return m_type_isSet;
}

bool OAIDatabaseSchema::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIDatabaseSchema::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDatabaseSchema::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
