# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DatabaseColumnProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, column_type: str=None):
        """DatabaseColumnProperties - a model defined in OpenAPI

        :param column_type: The column_type of this DatabaseColumnProperties.
        """
        self.openapi_types = {
            'column_type': str
        }

        self.attribute_map = {
            'column_type': 'columnType'
        }

        self._column_type = column_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DatabaseColumnProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DatabaseColumnProperties of this DatabaseColumnProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def column_type(self):
        """Gets the column_type of this DatabaseColumnProperties.

        The column data type.

        :return: The column_type of this DatabaseColumnProperties.
        :rtype: str
        """
        return self._column_type

    @column_type.setter
    def column_type(self, column_type):
        """Sets the column_type of this DatabaseColumnProperties.

        The column data type.

        :param column_type: The column_type of this DatabaseColumnProperties.
        :type column_type: str
        """
        allowed_values = ["image", "text", "uniqueidentifier", "date", "time", "datetime2", "datetimeoffset", "tinyint", "smallint", "int", "smalldatetime", "real", "money", "datetime", "float", "sql_variant", "ntext", "bit", "decimal", "numeric", "smallmoney", "bigint", "hierarchyid", "geometry", "geography", "varbinary", "varchar", "binary", "char", "timestamp", "nvarchar", "nchar", "xml", "sysname"]  # noqa: E501
        if column_type not in allowed_values:
            raise ValueError(
                "Invalid value for `column_type` ({0}), must be one of {1}"
                .format(column_type, allowed_values)
            )

        self._column_type = column_type
