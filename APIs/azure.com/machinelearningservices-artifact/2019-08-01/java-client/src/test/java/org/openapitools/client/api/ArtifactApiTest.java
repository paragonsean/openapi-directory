/*
 * Artifact
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Artifact;
import org.openapitools.client.model.ArtifactContainerSas;
import org.openapitools.client.model.ArtifactContentInformation;
import org.openapitools.client.model.ArtifactIdList;
import org.openapitools.client.model.ArtifactPathList;
import org.openapitools.client.model.BatchArtifactContentInformationResult;
import org.openapitools.client.model.ErrorResponse;
import java.io.File;
import org.openapitools.client.model.PaginatedArtifactContentInformationList;
import org.openapitools.client.model.PaginatedArtifactList;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ArtifactApi
 */
@Disabled
public class ArtifactApiTest {

    private final ArtifactApi api = new ArtifactApi();

    /**
     * Create a batch of empty Artifacts.
     *
     * Create a Batch of empty Artifacts from the supplied paths.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void artifactsBatchCreateEmptyArtifactsTest() throws ApiException {
        UUID subscriptionId = null;
        String resourceGroupName = null;
        String workspaceName = null;
        String origin = null;
        String container = null;
        ArtifactPathList artifactPaths = null;
        BatchArtifactContentInformationResult response = api.artifactsBatchCreateEmptyArtifacts(subscriptionId, resourceGroupName, workspaceName, origin, container, artifactPaths);
        // TODO: test validations
    }

    /**
     * Get Batch Artifacts by Ids.
     *
     * Get Batch Artifacts by the specific Ids.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void artifactsBatchGetByIdTest() throws ApiException {
        UUID subscriptionId = null;
        String resourceGroupName = null;
        String workspaceName = null;
        ArtifactIdList artifactIds = null;
        BatchArtifactContentInformationResult response = api.artifactsBatchGetById(subscriptionId, resourceGroupName, workspaceName, artifactIds);
        // TODO: test validations
    }

    /**
     * Get Batch Artifacts storage by Ids.
     *
     * Get Batch Artifacts storage by specific Ids.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void artifactsBatchGetStorageByIdTest() throws ApiException {
        UUID subscriptionId = null;
        String resourceGroupName = null;
        String workspaceName = null;
        ArtifactIdList artifactIds = null;
        BatchArtifactContentInformationResult response = api.artifactsBatchGetStorageById(subscriptionId, resourceGroupName, workspaceName, artifactIds);
        // TODO: test validations
    }

    /**
     * Batch ingest using shared access signature.
     *
     * Ingest Batch Artifacts using shared access signature.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void artifactsBatchIngestFromSasTest() throws ApiException {
        UUID subscriptionId = null;
        String resourceGroupName = null;
        String workspaceName = null;
        String origin = null;
        String container = null;
        ArtifactContainerSas artifactContainerSas = null;
        PaginatedArtifactList response = api.artifactsBatchIngestFromSas(subscriptionId, resourceGroupName, workspaceName, origin, container, artifactContainerSas);
        // TODO: test validations
    }

    /**
     * Create Artifact.
     *
     * Create an Artifact.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void artifactsCreateTest() throws ApiException {
        UUID subscriptionId = null;
        String resourceGroupName = null;
        String workspaceName = null;
        Artifact artifact = null;
        Artifact response = api.artifactsCreate(subscriptionId, resourceGroupName, workspaceName, artifact);
        // TODO: test validations
    }

    /**
     * Delete Batch of Artifact Metadata.
     *
     * Delete a Batch of Artifact Metadata.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void artifactsDeleteBatchMetaDataTest() throws ApiException {
        UUID subscriptionId = null;
        String resourceGroupName = null;
        String workspaceName = null;
        String origin = null;
        String container = null;
        ArtifactPathList artifactPaths = null;
        Boolean hardDelete = null;
        api.artifactsDeleteBatchMetaData(subscriptionId, resourceGroupName, workspaceName, origin, container, artifactPaths, hardDelete);
        // TODO: test validations
    }

    /**
     * Delete Artifact Metadata.
     *
     * Delete an Artifact Metadata.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void artifactsDeleteMetaDataTest() throws ApiException {
        UUID subscriptionId = null;
        String resourceGroupName = null;
        String workspaceName = null;
        String origin = null;
        String container = null;
        String path = null;
        Boolean hardDelete = null;
        api.artifactsDeleteMetaData(subscriptionId, resourceGroupName, workspaceName, origin, container, path, hardDelete);
        // TODO: test validations
    }

    /**
     * Delete Artifact Metadata.
     *
     * Delete Artifact Metadata in a specific container.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void artifactsDeleteMetaDataInContainerTest() throws ApiException {
        UUID subscriptionId = null;
        String resourceGroupName = null;
        String workspaceName = null;
        String origin = null;
        String container = null;
        Boolean hardDelete = null;
        api.artifactsDeleteMetaDataInContainer(subscriptionId, resourceGroupName, workspaceName, origin, container, hardDelete);
        // TODO: test validations
    }

    /**
     * Get Artifact content by Id.
     *
     * Get Artifact content of a specific Id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void artifactsDownloadTest() throws ApiException {
        UUID subscriptionId = null;
        String resourceGroupName = null;
        String workspaceName = null;
        String origin = null;
        String container = null;
        String path = null;
        File response = api.artifactsDownload(subscriptionId, resourceGroupName, workspaceName, origin, container, path);
        // TODO: test validations
    }

    /**
     * Get Artifact metadata by Id.
     *
     * Get Artifact metadata for a specific Id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void artifactsGetTest() throws ApiException {
        UUID subscriptionId = null;
        String resourceGroupName = null;
        String workspaceName = null;
        String origin = null;
        String container = null;
        String path = null;
        Artifact response = api.artifactsGet(subscriptionId, resourceGroupName, workspaceName, origin, container, path);
        // TODO: test validations
    }

    /**
     * Get Artifact content information.
     *
     * Get content information of an Artifact.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void artifactsGetContentInformationTest() throws ApiException {
        UUID subscriptionId = null;
        String resourceGroupName = null;
        String workspaceName = null;
        String origin = null;
        String container = null;
        String path = null;
        ArtifactContentInformation response = api.artifactsGetContentInformation(subscriptionId, resourceGroupName, workspaceName, origin, container, path);
        // TODO: test validations
    }

    /**
     * Get writable shared access signature for Artifact.
     *
     * Get writable shared access signature for a specific Artifact.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void artifactsGetSasTest() throws ApiException {
        UUID subscriptionId = null;
        String resourceGroupName = null;
        String workspaceName = null;
        String origin = null;
        String container = null;
        String path = null;
        ArtifactContentInformation response = api.artifactsGetSas(subscriptionId, resourceGroupName, workspaceName, origin, container, path);
        // TODO: test validations
    }

    /**
     * Get Artifact storage content information.
     *
     * Get storage content information of an Artifact.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void artifactsGetStorageContentInformationTest() throws ApiException {
        UUID subscriptionId = null;
        String resourceGroupName = null;
        String workspaceName = null;
        String origin = null;
        String container = null;
        String path = null;
        ArtifactContentInformation response = api.artifactsGetStorageContentInformation(subscriptionId, resourceGroupName, workspaceName, origin, container, path);
        // TODO: test validations
    }

    /**
     * Get Artifacts metadata in a container or path.
     *
     * Get Artifacts metadata in a specific container or path.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void artifactsListInContainerTest() throws ApiException {
        UUID subscriptionId = null;
        String resourceGroupName = null;
        String workspaceName = null;
        String origin = null;
        String container = null;
        String path = null;
        String continuationToken = null;
        PaginatedArtifactList response = api.artifactsListInContainer(subscriptionId, resourceGroupName, workspaceName, origin, container, path, continuationToken);
        // TODO: test validations
    }

    /**
     * Get shared access signature for an Artifact
     *
     * Get shared access signature for an Artifact in specific path.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void artifactsListSasByPrefixTest() throws ApiException {
        UUID subscriptionId = null;
        String resourceGroupName = null;
        String workspaceName = null;
        String origin = null;
        String container = null;
        String path = null;
        String continuationToken = null;
        PaginatedArtifactContentInformationList response = api.artifactsListSasByPrefix(subscriptionId, resourceGroupName, workspaceName, origin, container, path, continuationToken);
        // TODO: test validations
    }

    /**
     * Get storage Uri for Artifacts in a path.
     *
     * Get storage Uri for Artifacts in a specific path.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void artifactsListStorageUriByPrefixTest() throws ApiException {
        UUID subscriptionId = null;
        String resourceGroupName = null;
        String workspaceName = null;
        String origin = null;
        String container = null;
        String path = null;
        String continuationToken = null;
        PaginatedArtifactContentInformationList response = api.artifactsListStorageUriByPrefix(subscriptionId, resourceGroupName, workspaceName, origin, container, path, continuationToken);
        // TODO: test validations
    }

    /**
     * Create an Artifact for an existing data location.
     *
     * Create an Artifact for an existing dataPath.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void artifactsRegisterTest() throws ApiException {
        UUID subscriptionId = null;
        String resourceGroupName = null;
        String workspaceName = null;
        Artifact artifact = null;
        Artifact response = api.artifactsRegister(subscriptionId, resourceGroupName, workspaceName, artifact);
        // TODO: test validations
    }

    /**
     * Upload Artifact content.
     *
     * Upload content to an Artifact.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void artifactsUploadTest() throws ApiException {
        UUID subscriptionId = null;
        String resourceGroupName = null;
        String workspaceName = null;
        String origin = null;
        String container = null;
        File content = null;
        String path = null;
        Integer index = null;
        Boolean append = null;
        Boolean allowOverwrite = null;
        Artifact response = api.artifactsUpload(subscriptionId, resourceGroupName, workspaceName, origin, container, content, path, index, append, allowOverwrite);
        // TODO: test validations
    }

}
