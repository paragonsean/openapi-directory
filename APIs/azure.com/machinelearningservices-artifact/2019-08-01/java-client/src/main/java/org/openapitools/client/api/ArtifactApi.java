/*
 * Artifact
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Artifact;
import org.openapitools.client.model.ArtifactContainerSas;
import org.openapitools.client.model.ArtifactContentInformation;
import org.openapitools.client.model.ArtifactIdList;
import org.openapitools.client.model.ArtifactPathList;
import org.openapitools.client.model.BatchArtifactContentInformationResult;
import org.openapitools.client.model.ErrorResponse;
import java.io.File;
import org.openapitools.client.model.PaginatedArtifactContentInformationList;
import org.openapitools.client.model.PaginatedArtifactList;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ArtifactApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ArtifactApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ArtifactApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for artifactsBatchCreateEmptyArtifacts
     * @param subscriptionId The Azure Subscription ID. (required)
     * @param resourceGroupName The Name of the resource group in which the workspace is located. (required)
     * @param workspaceName The name of the workspace. (required)
     * @param origin The origin of the Artifact. (required)
     * @param container The container name. (required)
     * @param artifactPaths The list of Artifact paths to create. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Batch of empty Artifacts created successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call artifactsBatchCreateEmptyArtifactsCall(UUID subscriptionId, String resourceGroupName, String workspaceName, String origin, String container, ArtifactPathList artifactPaths, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = artifactPaths;

        // create path and map variables
        String localVarPath = "/artifact/v2.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/artifacts/{origin}/{container}/batch/metadata"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "workspaceName" + "}", localVarApiClient.escapeString(workspaceName.toString()))
            .replace("{" + "origin" + "}", localVarApiClient.escapeString(origin.toString()))
            .replace("{" + "container" + "}", localVarApiClient.escapeString(container.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call artifactsBatchCreateEmptyArtifactsValidateBeforeCall(UUID subscriptionId, String resourceGroupName, String workspaceName, String origin, String container, ArtifactPathList artifactPaths, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling artifactsBatchCreateEmptyArtifacts(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling artifactsBatchCreateEmptyArtifacts(Async)");
        }

        // verify the required parameter 'workspaceName' is set
        if (workspaceName == null) {
            throw new ApiException("Missing the required parameter 'workspaceName' when calling artifactsBatchCreateEmptyArtifacts(Async)");
        }

        // verify the required parameter 'origin' is set
        if (origin == null) {
            throw new ApiException("Missing the required parameter 'origin' when calling artifactsBatchCreateEmptyArtifacts(Async)");
        }

        // verify the required parameter 'container' is set
        if (container == null) {
            throw new ApiException("Missing the required parameter 'container' when calling artifactsBatchCreateEmptyArtifacts(Async)");
        }

        // verify the required parameter 'artifactPaths' is set
        if (artifactPaths == null) {
            throw new ApiException("Missing the required parameter 'artifactPaths' when calling artifactsBatchCreateEmptyArtifacts(Async)");
        }

        return artifactsBatchCreateEmptyArtifactsCall(subscriptionId, resourceGroupName, workspaceName, origin, container, artifactPaths, _callback);

    }

    /**
     * Create a batch of empty Artifacts.
     * Create a Batch of empty Artifacts from the supplied paths.
     * @param subscriptionId The Azure Subscription ID. (required)
     * @param resourceGroupName The Name of the resource group in which the workspace is located. (required)
     * @param workspaceName The name of the workspace. (required)
     * @param origin The origin of the Artifact. (required)
     * @param container The container name. (required)
     * @param artifactPaths The list of Artifact paths to create. (required)
     * @return BatchArtifactContentInformationResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Batch of empty Artifacts created successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public BatchArtifactContentInformationResult artifactsBatchCreateEmptyArtifacts(UUID subscriptionId, String resourceGroupName, String workspaceName, String origin, String container, ArtifactPathList artifactPaths) throws ApiException {
        ApiResponse<BatchArtifactContentInformationResult> localVarResp = artifactsBatchCreateEmptyArtifactsWithHttpInfo(subscriptionId, resourceGroupName, workspaceName, origin, container, artifactPaths);
        return localVarResp.getData();
    }

    /**
     * Create a batch of empty Artifacts.
     * Create a Batch of empty Artifacts from the supplied paths.
     * @param subscriptionId The Azure Subscription ID. (required)
     * @param resourceGroupName The Name of the resource group in which the workspace is located. (required)
     * @param workspaceName The name of the workspace. (required)
     * @param origin The origin of the Artifact. (required)
     * @param container The container name. (required)
     * @param artifactPaths The list of Artifact paths to create. (required)
     * @return ApiResponse&lt;BatchArtifactContentInformationResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Batch of empty Artifacts created successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BatchArtifactContentInformationResult> artifactsBatchCreateEmptyArtifactsWithHttpInfo(UUID subscriptionId, String resourceGroupName, String workspaceName, String origin, String container, ArtifactPathList artifactPaths) throws ApiException {
        okhttp3.Call localVarCall = artifactsBatchCreateEmptyArtifactsValidateBeforeCall(subscriptionId, resourceGroupName, workspaceName, origin, container, artifactPaths, null);
        Type localVarReturnType = new TypeToken<BatchArtifactContentInformationResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a batch of empty Artifacts. (asynchronously)
     * Create a Batch of empty Artifacts from the supplied paths.
     * @param subscriptionId The Azure Subscription ID. (required)
     * @param resourceGroupName The Name of the resource group in which the workspace is located. (required)
     * @param workspaceName The name of the workspace. (required)
     * @param origin The origin of the Artifact. (required)
     * @param container The container name. (required)
     * @param artifactPaths The list of Artifact paths to create. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Batch of empty Artifacts created successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call artifactsBatchCreateEmptyArtifactsAsync(UUID subscriptionId, String resourceGroupName, String workspaceName, String origin, String container, ArtifactPathList artifactPaths, final ApiCallback<BatchArtifactContentInformationResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = artifactsBatchCreateEmptyArtifactsValidateBeforeCall(subscriptionId, resourceGroupName, workspaceName, origin, container, artifactPaths, _callback);
        Type localVarReturnType = new TypeToken<BatchArtifactContentInformationResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for artifactsBatchGetById
     * @param subscriptionId The Azure Subscription ID. (required)
     * @param resourceGroupName The Name of the resource group in which the workspace is located. (required)
     * @param workspaceName The name of the workspace. (required)
     * @param artifactIds The command for Batch Artifact get request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested Batch Artifacts are returned successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call artifactsBatchGetByIdCall(UUID subscriptionId, String resourceGroupName, String workspaceName, ArtifactIdList artifactIds, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = artifactIds;

        // create path and map variables
        String localVarPath = "/artifact/v2.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/artifacts/batch/metadata"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "workspaceName" + "}", localVarApiClient.escapeString(workspaceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call artifactsBatchGetByIdValidateBeforeCall(UUID subscriptionId, String resourceGroupName, String workspaceName, ArtifactIdList artifactIds, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling artifactsBatchGetById(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling artifactsBatchGetById(Async)");
        }

        // verify the required parameter 'workspaceName' is set
        if (workspaceName == null) {
            throw new ApiException("Missing the required parameter 'workspaceName' when calling artifactsBatchGetById(Async)");
        }

        // verify the required parameter 'artifactIds' is set
        if (artifactIds == null) {
            throw new ApiException("Missing the required parameter 'artifactIds' when calling artifactsBatchGetById(Async)");
        }

        return artifactsBatchGetByIdCall(subscriptionId, resourceGroupName, workspaceName, artifactIds, _callback);

    }

    /**
     * Get Batch Artifacts by Ids.
     * Get Batch Artifacts by the specific Ids.
     * @param subscriptionId The Azure Subscription ID. (required)
     * @param resourceGroupName The Name of the resource group in which the workspace is located. (required)
     * @param workspaceName The name of the workspace. (required)
     * @param artifactIds The command for Batch Artifact get request. (required)
     * @return BatchArtifactContentInformationResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested Batch Artifacts are returned successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public BatchArtifactContentInformationResult artifactsBatchGetById(UUID subscriptionId, String resourceGroupName, String workspaceName, ArtifactIdList artifactIds) throws ApiException {
        ApiResponse<BatchArtifactContentInformationResult> localVarResp = artifactsBatchGetByIdWithHttpInfo(subscriptionId, resourceGroupName, workspaceName, artifactIds);
        return localVarResp.getData();
    }

    /**
     * Get Batch Artifacts by Ids.
     * Get Batch Artifacts by the specific Ids.
     * @param subscriptionId The Azure Subscription ID. (required)
     * @param resourceGroupName The Name of the resource group in which the workspace is located. (required)
     * @param workspaceName The name of the workspace. (required)
     * @param artifactIds The command for Batch Artifact get request. (required)
     * @return ApiResponse&lt;BatchArtifactContentInformationResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested Batch Artifacts are returned successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BatchArtifactContentInformationResult> artifactsBatchGetByIdWithHttpInfo(UUID subscriptionId, String resourceGroupName, String workspaceName, ArtifactIdList artifactIds) throws ApiException {
        okhttp3.Call localVarCall = artifactsBatchGetByIdValidateBeforeCall(subscriptionId, resourceGroupName, workspaceName, artifactIds, null);
        Type localVarReturnType = new TypeToken<BatchArtifactContentInformationResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Batch Artifacts by Ids. (asynchronously)
     * Get Batch Artifacts by the specific Ids.
     * @param subscriptionId The Azure Subscription ID. (required)
     * @param resourceGroupName The Name of the resource group in which the workspace is located. (required)
     * @param workspaceName The name of the workspace. (required)
     * @param artifactIds The command for Batch Artifact get request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested Batch Artifacts are returned successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call artifactsBatchGetByIdAsync(UUID subscriptionId, String resourceGroupName, String workspaceName, ArtifactIdList artifactIds, final ApiCallback<BatchArtifactContentInformationResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = artifactsBatchGetByIdValidateBeforeCall(subscriptionId, resourceGroupName, workspaceName, artifactIds, _callback);
        Type localVarReturnType = new TypeToken<BatchArtifactContentInformationResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for artifactsBatchGetStorageById
     * @param subscriptionId The Azure Subscription ID. (required)
     * @param resourceGroupName The Name of the resource group in which the workspace is located. (required)
     * @param workspaceName The name of the workspace. (required)
     * @param artifactIds The list of artifactIds to get. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Batch Artifact&#39;s storage are returned successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call artifactsBatchGetStorageByIdCall(UUID subscriptionId, String resourceGroupName, String workspaceName, ArtifactIdList artifactIds, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = artifactIds;

        // create path and map variables
        String localVarPath = "/artifact/v2.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/artifacts/storageuri/batch/metadata"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "workspaceName" + "}", localVarApiClient.escapeString(workspaceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call artifactsBatchGetStorageByIdValidateBeforeCall(UUID subscriptionId, String resourceGroupName, String workspaceName, ArtifactIdList artifactIds, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling artifactsBatchGetStorageById(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling artifactsBatchGetStorageById(Async)");
        }

        // verify the required parameter 'workspaceName' is set
        if (workspaceName == null) {
            throw new ApiException("Missing the required parameter 'workspaceName' when calling artifactsBatchGetStorageById(Async)");
        }

        // verify the required parameter 'artifactIds' is set
        if (artifactIds == null) {
            throw new ApiException("Missing the required parameter 'artifactIds' when calling artifactsBatchGetStorageById(Async)");
        }

        return artifactsBatchGetStorageByIdCall(subscriptionId, resourceGroupName, workspaceName, artifactIds, _callback);

    }

    /**
     * Get Batch Artifacts storage by Ids.
     * Get Batch Artifacts storage by specific Ids.
     * @param subscriptionId The Azure Subscription ID. (required)
     * @param resourceGroupName The Name of the resource group in which the workspace is located. (required)
     * @param workspaceName The name of the workspace. (required)
     * @param artifactIds The list of artifactIds to get. (required)
     * @return BatchArtifactContentInformationResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Batch Artifact&#39;s storage are returned successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public BatchArtifactContentInformationResult artifactsBatchGetStorageById(UUID subscriptionId, String resourceGroupName, String workspaceName, ArtifactIdList artifactIds) throws ApiException {
        ApiResponse<BatchArtifactContentInformationResult> localVarResp = artifactsBatchGetStorageByIdWithHttpInfo(subscriptionId, resourceGroupName, workspaceName, artifactIds);
        return localVarResp.getData();
    }

    /**
     * Get Batch Artifacts storage by Ids.
     * Get Batch Artifacts storage by specific Ids.
     * @param subscriptionId The Azure Subscription ID. (required)
     * @param resourceGroupName The Name of the resource group in which the workspace is located. (required)
     * @param workspaceName The name of the workspace. (required)
     * @param artifactIds The list of artifactIds to get. (required)
     * @return ApiResponse&lt;BatchArtifactContentInformationResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Batch Artifact&#39;s storage are returned successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BatchArtifactContentInformationResult> artifactsBatchGetStorageByIdWithHttpInfo(UUID subscriptionId, String resourceGroupName, String workspaceName, ArtifactIdList artifactIds) throws ApiException {
        okhttp3.Call localVarCall = artifactsBatchGetStorageByIdValidateBeforeCall(subscriptionId, resourceGroupName, workspaceName, artifactIds, null);
        Type localVarReturnType = new TypeToken<BatchArtifactContentInformationResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Batch Artifacts storage by Ids. (asynchronously)
     * Get Batch Artifacts storage by specific Ids.
     * @param subscriptionId The Azure Subscription ID. (required)
     * @param resourceGroupName The Name of the resource group in which the workspace is located. (required)
     * @param workspaceName The name of the workspace. (required)
     * @param artifactIds The list of artifactIds to get. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Batch Artifact&#39;s storage are returned successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call artifactsBatchGetStorageByIdAsync(UUID subscriptionId, String resourceGroupName, String workspaceName, ArtifactIdList artifactIds, final ApiCallback<BatchArtifactContentInformationResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = artifactsBatchGetStorageByIdValidateBeforeCall(subscriptionId, resourceGroupName, workspaceName, artifactIds, _callback);
        Type localVarReturnType = new TypeToken<BatchArtifactContentInformationResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for artifactsBatchIngestFromSas
     * @param subscriptionId The Azure Subscription ID. (required)
     * @param resourceGroupName The Name of the resource group in which the workspace is located. (required)
     * @param workspaceName The name of the workspace. (required)
     * @param origin The origin of the Artifact. (required)
     * @param container The container name. (required)
     * @param artifactContainerSas The artifact container shared access signature to use for batch ingest. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Batch is ingested using shared access signature successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call artifactsBatchIngestFromSasCall(UUID subscriptionId, String resourceGroupName, String workspaceName, String origin, String container, ArtifactContainerSas artifactContainerSas, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = artifactContainerSas;

        // create path and map variables
        String localVarPath = "/artifact/v2.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/artifacts/{origin}/{container}/batch/ingest/containersas"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "workspaceName" + "}", localVarApiClient.escapeString(workspaceName.toString()))
            .replace("{" + "origin" + "}", localVarApiClient.escapeString(origin.toString()))
            .replace("{" + "container" + "}", localVarApiClient.escapeString(container.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call artifactsBatchIngestFromSasValidateBeforeCall(UUID subscriptionId, String resourceGroupName, String workspaceName, String origin, String container, ArtifactContainerSas artifactContainerSas, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling artifactsBatchIngestFromSas(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling artifactsBatchIngestFromSas(Async)");
        }

        // verify the required parameter 'workspaceName' is set
        if (workspaceName == null) {
            throw new ApiException("Missing the required parameter 'workspaceName' when calling artifactsBatchIngestFromSas(Async)");
        }

        // verify the required parameter 'origin' is set
        if (origin == null) {
            throw new ApiException("Missing the required parameter 'origin' when calling artifactsBatchIngestFromSas(Async)");
        }

        // verify the required parameter 'container' is set
        if (container == null) {
            throw new ApiException("Missing the required parameter 'container' when calling artifactsBatchIngestFromSas(Async)");
        }

        // verify the required parameter 'artifactContainerSas' is set
        if (artifactContainerSas == null) {
            throw new ApiException("Missing the required parameter 'artifactContainerSas' when calling artifactsBatchIngestFromSas(Async)");
        }

        return artifactsBatchIngestFromSasCall(subscriptionId, resourceGroupName, workspaceName, origin, container, artifactContainerSas, _callback);

    }

    /**
     * Batch ingest using shared access signature.
     * Ingest Batch Artifacts using shared access signature.
     * @param subscriptionId The Azure Subscription ID. (required)
     * @param resourceGroupName The Name of the resource group in which the workspace is located. (required)
     * @param workspaceName The name of the workspace. (required)
     * @param origin The origin of the Artifact. (required)
     * @param container The container name. (required)
     * @param artifactContainerSas The artifact container shared access signature to use for batch ingest. (required)
     * @return PaginatedArtifactList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Batch is ingested using shared access signature successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedArtifactList artifactsBatchIngestFromSas(UUID subscriptionId, String resourceGroupName, String workspaceName, String origin, String container, ArtifactContainerSas artifactContainerSas) throws ApiException {
        ApiResponse<PaginatedArtifactList> localVarResp = artifactsBatchIngestFromSasWithHttpInfo(subscriptionId, resourceGroupName, workspaceName, origin, container, artifactContainerSas);
        return localVarResp.getData();
    }

    /**
     * Batch ingest using shared access signature.
     * Ingest Batch Artifacts using shared access signature.
     * @param subscriptionId The Azure Subscription ID. (required)
     * @param resourceGroupName The Name of the resource group in which the workspace is located. (required)
     * @param workspaceName The name of the workspace. (required)
     * @param origin The origin of the Artifact. (required)
     * @param container The container name. (required)
     * @param artifactContainerSas The artifact container shared access signature to use for batch ingest. (required)
     * @return ApiResponse&lt;PaginatedArtifactList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Batch is ingested using shared access signature successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedArtifactList> artifactsBatchIngestFromSasWithHttpInfo(UUID subscriptionId, String resourceGroupName, String workspaceName, String origin, String container, ArtifactContainerSas artifactContainerSas) throws ApiException {
        okhttp3.Call localVarCall = artifactsBatchIngestFromSasValidateBeforeCall(subscriptionId, resourceGroupName, workspaceName, origin, container, artifactContainerSas, null);
        Type localVarReturnType = new TypeToken<PaginatedArtifactList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Batch ingest using shared access signature. (asynchronously)
     * Ingest Batch Artifacts using shared access signature.
     * @param subscriptionId The Azure Subscription ID. (required)
     * @param resourceGroupName The Name of the resource group in which the workspace is located. (required)
     * @param workspaceName The name of the workspace. (required)
     * @param origin The origin of the Artifact. (required)
     * @param container The container name. (required)
     * @param artifactContainerSas The artifact container shared access signature to use for batch ingest. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Batch is ingested using shared access signature successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call artifactsBatchIngestFromSasAsync(UUID subscriptionId, String resourceGroupName, String workspaceName, String origin, String container, ArtifactContainerSas artifactContainerSas, final ApiCallback<PaginatedArtifactList> _callback) throws ApiException {

        okhttp3.Call localVarCall = artifactsBatchIngestFromSasValidateBeforeCall(subscriptionId, resourceGroupName, workspaceName, origin, container, artifactContainerSas, _callback);
        Type localVarReturnType = new TypeToken<PaginatedArtifactList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for artifactsCreate
     * @param subscriptionId The Azure Subscription ID. (required)
     * @param resourceGroupName The Name of the resource group in which the workspace is located. (required)
     * @param workspaceName The name of the workspace. (required)
     * @param artifact The Artifact details. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Artifact is created successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call artifactsCreateCall(UUID subscriptionId, String resourceGroupName, String workspaceName, Artifact artifact, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = artifact;

        // create path and map variables
        String localVarPath = "/artifact/v2.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/artifacts/metadata"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "workspaceName" + "}", localVarApiClient.escapeString(workspaceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call artifactsCreateValidateBeforeCall(UUID subscriptionId, String resourceGroupName, String workspaceName, Artifact artifact, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling artifactsCreate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling artifactsCreate(Async)");
        }

        // verify the required parameter 'workspaceName' is set
        if (workspaceName == null) {
            throw new ApiException("Missing the required parameter 'workspaceName' when calling artifactsCreate(Async)");
        }

        // verify the required parameter 'artifact' is set
        if (artifact == null) {
            throw new ApiException("Missing the required parameter 'artifact' when calling artifactsCreate(Async)");
        }

        return artifactsCreateCall(subscriptionId, resourceGroupName, workspaceName, artifact, _callback);

    }

    /**
     * Create Artifact.
     * Create an Artifact.
     * @param subscriptionId The Azure Subscription ID. (required)
     * @param resourceGroupName The Name of the resource group in which the workspace is located. (required)
     * @param workspaceName The name of the workspace. (required)
     * @param artifact The Artifact details. (required)
     * @return Artifact
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Artifact is created successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public Artifact artifactsCreate(UUID subscriptionId, String resourceGroupName, String workspaceName, Artifact artifact) throws ApiException {
        ApiResponse<Artifact> localVarResp = artifactsCreateWithHttpInfo(subscriptionId, resourceGroupName, workspaceName, artifact);
        return localVarResp.getData();
    }

    /**
     * Create Artifact.
     * Create an Artifact.
     * @param subscriptionId The Azure Subscription ID. (required)
     * @param resourceGroupName The Name of the resource group in which the workspace is located. (required)
     * @param workspaceName The name of the workspace. (required)
     * @param artifact The Artifact details. (required)
     * @return ApiResponse&lt;Artifact&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Artifact is created successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Artifact> artifactsCreateWithHttpInfo(UUID subscriptionId, String resourceGroupName, String workspaceName, Artifact artifact) throws ApiException {
        okhttp3.Call localVarCall = artifactsCreateValidateBeforeCall(subscriptionId, resourceGroupName, workspaceName, artifact, null);
        Type localVarReturnType = new TypeToken<Artifact>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Artifact. (asynchronously)
     * Create an Artifact.
     * @param subscriptionId The Azure Subscription ID. (required)
     * @param resourceGroupName The Name of the resource group in which the workspace is located. (required)
     * @param workspaceName The name of the workspace. (required)
     * @param artifact The Artifact details. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Artifact is created successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call artifactsCreateAsync(UUID subscriptionId, String resourceGroupName, String workspaceName, Artifact artifact, final ApiCallback<Artifact> _callback) throws ApiException {

        okhttp3.Call localVarCall = artifactsCreateValidateBeforeCall(subscriptionId, resourceGroupName, workspaceName, artifact, _callback);
        Type localVarReturnType = new TypeToken<Artifact>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for artifactsDeleteBatchMetaData
     * @param subscriptionId The Azure Subscription ID. (required)
     * @param resourceGroupName The Name of the resource group in which the workspace is located. (required)
     * @param workspaceName The name of the workspace. (required)
     * @param origin The origin of the Artifact. (required)
     * @param container The container name. (required)
     * @param artifactPaths The list of Artifact paths to delete. (required)
     * @param hardDelete If set to true, the delete cannot be reverted at a later time. (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The batch delete of Artifact metadata completed successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call artifactsDeleteBatchMetaDataCall(UUID subscriptionId, String resourceGroupName, String workspaceName, String origin, String container, ArtifactPathList artifactPaths, Boolean hardDelete, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = artifactPaths;

        // create path and map variables
        String localVarPath = "/artifact/v2.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/artifacts/{origin}/{container}/batch/metadata:delete"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "workspaceName" + "}", localVarApiClient.escapeString(workspaceName.toString()))
            .replace("{" + "origin" + "}", localVarApiClient.escapeString(origin.toString()))
            .replace("{" + "container" + "}", localVarApiClient.escapeString(container.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (hardDelete != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hardDelete", hardDelete));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call artifactsDeleteBatchMetaDataValidateBeforeCall(UUID subscriptionId, String resourceGroupName, String workspaceName, String origin, String container, ArtifactPathList artifactPaths, Boolean hardDelete, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling artifactsDeleteBatchMetaData(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling artifactsDeleteBatchMetaData(Async)");
        }

        // verify the required parameter 'workspaceName' is set
        if (workspaceName == null) {
            throw new ApiException("Missing the required parameter 'workspaceName' when calling artifactsDeleteBatchMetaData(Async)");
        }

        // verify the required parameter 'origin' is set
        if (origin == null) {
            throw new ApiException("Missing the required parameter 'origin' when calling artifactsDeleteBatchMetaData(Async)");
        }

        // verify the required parameter 'container' is set
        if (container == null) {
            throw new ApiException("Missing the required parameter 'container' when calling artifactsDeleteBatchMetaData(Async)");
        }

        // verify the required parameter 'artifactPaths' is set
        if (artifactPaths == null) {
            throw new ApiException("Missing the required parameter 'artifactPaths' when calling artifactsDeleteBatchMetaData(Async)");
        }

        return artifactsDeleteBatchMetaDataCall(subscriptionId, resourceGroupName, workspaceName, origin, container, artifactPaths, hardDelete, _callback);

    }

    /**
     * Delete Batch of Artifact Metadata.
     * Delete a Batch of Artifact Metadata.
     * @param subscriptionId The Azure Subscription ID. (required)
     * @param resourceGroupName The Name of the resource group in which the workspace is located. (required)
     * @param workspaceName The name of the workspace. (required)
     * @param origin The origin of the Artifact. (required)
     * @param container The container name. (required)
     * @param artifactPaths The list of Artifact paths to delete. (required)
     * @param hardDelete If set to true, the delete cannot be reverted at a later time. (optional, default to false)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The batch delete of Artifact metadata completed successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public void artifactsDeleteBatchMetaData(UUID subscriptionId, String resourceGroupName, String workspaceName, String origin, String container, ArtifactPathList artifactPaths, Boolean hardDelete) throws ApiException {
        artifactsDeleteBatchMetaDataWithHttpInfo(subscriptionId, resourceGroupName, workspaceName, origin, container, artifactPaths, hardDelete);
    }

    /**
     * Delete Batch of Artifact Metadata.
     * Delete a Batch of Artifact Metadata.
     * @param subscriptionId The Azure Subscription ID. (required)
     * @param resourceGroupName The Name of the resource group in which the workspace is located. (required)
     * @param workspaceName The name of the workspace. (required)
     * @param origin The origin of the Artifact. (required)
     * @param container The container name. (required)
     * @param artifactPaths The list of Artifact paths to delete. (required)
     * @param hardDelete If set to true, the delete cannot be reverted at a later time. (optional, default to false)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The batch delete of Artifact metadata completed successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> artifactsDeleteBatchMetaDataWithHttpInfo(UUID subscriptionId, String resourceGroupName, String workspaceName, String origin, String container, ArtifactPathList artifactPaths, Boolean hardDelete) throws ApiException {
        okhttp3.Call localVarCall = artifactsDeleteBatchMetaDataValidateBeforeCall(subscriptionId, resourceGroupName, workspaceName, origin, container, artifactPaths, hardDelete, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Batch of Artifact Metadata. (asynchronously)
     * Delete a Batch of Artifact Metadata.
     * @param subscriptionId The Azure Subscription ID. (required)
     * @param resourceGroupName The Name of the resource group in which the workspace is located. (required)
     * @param workspaceName The name of the workspace. (required)
     * @param origin The origin of the Artifact. (required)
     * @param container The container name. (required)
     * @param artifactPaths The list of Artifact paths to delete. (required)
     * @param hardDelete If set to true, the delete cannot be reverted at a later time. (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The batch delete of Artifact metadata completed successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call artifactsDeleteBatchMetaDataAsync(UUID subscriptionId, String resourceGroupName, String workspaceName, String origin, String container, ArtifactPathList artifactPaths, Boolean hardDelete, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = artifactsDeleteBatchMetaDataValidateBeforeCall(subscriptionId, resourceGroupName, workspaceName, origin, container, artifactPaths, hardDelete, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for artifactsDeleteMetaData
     * @param subscriptionId The Azure Subscription ID. (required)
     * @param resourceGroupName The Name of the resource group in which the workspace is located. (required)
     * @param workspaceName The name of the workspace. (required)
     * @param origin The origin of the Artifact. (required)
     * @param container The container name. (required)
     * @param path The Artifact Path. (optional)
     * @param hardDelete If set to true. The delete cannot be revert at later time. (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Artifact metadata deleted successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call artifactsDeleteMetaDataCall(UUID subscriptionId, String resourceGroupName, String workspaceName, String origin, String container, String path, Boolean hardDelete, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/artifact/v2.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/artifacts/{origin}/{container}/metadata"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "workspaceName" + "}", localVarApiClient.escapeString(workspaceName.toString()))
            .replace("{" + "origin" + "}", localVarApiClient.escapeString(origin.toString()))
            .replace("{" + "container" + "}", localVarApiClient.escapeString(container.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (path != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("path", path));
        }

        if (hardDelete != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hardDelete", hardDelete));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call artifactsDeleteMetaDataValidateBeforeCall(UUID subscriptionId, String resourceGroupName, String workspaceName, String origin, String container, String path, Boolean hardDelete, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling artifactsDeleteMetaData(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling artifactsDeleteMetaData(Async)");
        }

        // verify the required parameter 'workspaceName' is set
        if (workspaceName == null) {
            throw new ApiException("Missing the required parameter 'workspaceName' when calling artifactsDeleteMetaData(Async)");
        }

        // verify the required parameter 'origin' is set
        if (origin == null) {
            throw new ApiException("Missing the required parameter 'origin' when calling artifactsDeleteMetaData(Async)");
        }

        // verify the required parameter 'container' is set
        if (container == null) {
            throw new ApiException("Missing the required parameter 'container' when calling artifactsDeleteMetaData(Async)");
        }

        return artifactsDeleteMetaDataCall(subscriptionId, resourceGroupName, workspaceName, origin, container, path, hardDelete, _callback);

    }

    /**
     * Delete Artifact Metadata.
     * Delete an Artifact Metadata.
     * @param subscriptionId The Azure Subscription ID. (required)
     * @param resourceGroupName The Name of the resource group in which the workspace is located. (required)
     * @param workspaceName The name of the workspace. (required)
     * @param origin The origin of the Artifact. (required)
     * @param container The container name. (required)
     * @param path The Artifact Path. (optional)
     * @param hardDelete If set to true. The delete cannot be revert at later time. (optional, default to false)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Artifact metadata deleted successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public void artifactsDeleteMetaData(UUID subscriptionId, String resourceGroupName, String workspaceName, String origin, String container, String path, Boolean hardDelete) throws ApiException {
        artifactsDeleteMetaDataWithHttpInfo(subscriptionId, resourceGroupName, workspaceName, origin, container, path, hardDelete);
    }

    /**
     * Delete Artifact Metadata.
     * Delete an Artifact Metadata.
     * @param subscriptionId The Azure Subscription ID. (required)
     * @param resourceGroupName The Name of the resource group in which the workspace is located. (required)
     * @param workspaceName The name of the workspace. (required)
     * @param origin The origin of the Artifact. (required)
     * @param container The container name. (required)
     * @param path The Artifact Path. (optional)
     * @param hardDelete If set to true. The delete cannot be revert at later time. (optional, default to false)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Artifact metadata deleted successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> artifactsDeleteMetaDataWithHttpInfo(UUID subscriptionId, String resourceGroupName, String workspaceName, String origin, String container, String path, Boolean hardDelete) throws ApiException {
        okhttp3.Call localVarCall = artifactsDeleteMetaDataValidateBeforeCall(subscriptionId, resourceGroupName, workspaceName, origin, container, path, hardDelete, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Artifact Metadata. (asynchronously)
     * Delete an Artifact Metadata.
     * @param subscriptionId The Azure Subscription ID. (required)
     * @param resourceGroupName The Name of the resource group in which the workspace is located. (required)
     * @param workspaceName The name of the workspace. (required)
     * @param origin The origin of the Artifact. (required)
     * @param container The container name. (required)
     * @param path The Artifact Path. (optional)
     * @param hardDelete If set to true. The delete cannot be revert at later time. (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Artifact metadata deleted successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call artifactsDeleteMetaDataAsync(UUID subscriptionId, String resourceGroupName, String workspaceName, String origin, String container, String path, Boolean hardDelete, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = artifactsDeleteMetaDataValidateBeforeCall(subscriptionId, resourceGroupName, workspaceName, origin, container, path, hardDelete, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for artifactsDeleteMetaDataInContainer
     * @param subscriptionId The Azure Subscription ID. (required)
     * @param resourceGroupName The Name of the resource group in which the workspace is located. (required)
     * @param workspaceName The name of the workspace. (required)
     * @param origin The origin of the Artifact. (required)
     * @param container The container name. (required)
     * @param hardDelete If set to true. The delete cannot be revert at later time. (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Artifact metadata deleted successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call artifactsDeleteMetaDataInContainerCall(UUID subscriptionId, String resourceGroupName, String workspaceName, String origin, String container, Boolean hardDelete, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/artifact/v2.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/artifacts/{origin}/{container}/batch"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "workspaceName" + "}", localVarApiClient.escapeString(workspaceName.toString()))
            .replace("{" + "origin" + "}", localVarApiClient.escapeString(origin.toString()))
            .replace("{" + "container" + "}", localVarApiClient.escapeString(container.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (hardDelete != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hardDelete", hardDelete));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call artifactsDeleteMetaDataInContainerValidateBeforeCall(UUID subscriptionId, String resourceGroupName, String workspaceName, String origin, String container, Boolean hardDelete, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling artifactsDeleteMetaDataInContainer(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling artifactsDeleteMetaDataInContainer(Async)");
        }

        // verify the required parameter 'workspaceName' is set
        if (workspaceName == null) {
            throw new ApiException("Missing the required parameter 'workspaceName' when calling artifactsDeleteMetaDataInContainer(Async)");
        }

        // verify the required parameter 'origin' is set
        if (origin == null) {
            throw new ApiException("Missing the required parameter 'origin' when calling artifactsDeleteMetaDataInContainer(Async)");
        }

        // verify the required parameter 'container' is set
        if (container == null) {
            throw new ApiException("Missing the required parameter 'container' when calling artifactsDeleteMetaDataInContainer(Async)");
        }

        return artifactsDeleteMetaDataInContainerCall(subscriptionId, resourceGroupName, workspaceName, origin, container, hardDelete, _callback);

    }

    /**
     * Delete Artifact Metadata.
     * Delete Artifact Metadata in a specific container.
     * @param subscriptionId The Azure Subscription ID. (required)
     * @param resourceGroupName The Name of the resource group in which the workspace is located. (required)
     * @param workspaceName The name of the workspace. (required)
     * @param origin The origin of the Artifact. (required)
     * @param container The container name. (required)
     * @param hardDelete If set to true. The delete cannot be revert at later time. (optional, default to false)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Artifact metadata deleted successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public void artifactsDeleteMetaDataInContainer(UUID subscriptionId, String resourceGroupName, String workspaceName, String origin, String container, Boolean hardDelete) throws ApiException {
        artifactsDeleteMetaDataInContainerWithHttpInfo(subscriptionId, resourceGroupName, workspaceName, origin, container, hardDelete);
    }

    /**
     * Delete Artifact Metadata.
     * Delete Artifact Metadata in a specific container.
     * @param subscriptionId The Azure Subscription ID. (required)
     * @param resourceGroupName The Name of the resource group in which the workspace is located. (required)
     * @param workspaceName The name of the workspace. (required)
     * @param origin The origin of the Artifact. (required)
     * @param container The container name. (required)
     * @param hardDelete If set to true. The delete cannot be revert at later time. (optional, default to false)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Artifact metadata deleted successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> artifactsDeleteMetaDataInContainerWithHttpInfo(UUID subscriptionId, String resourceGroupName, String workspaceName, String origin, String container, Boolean hardDelete) throws ApiException {
        okhttp3.Call localVarCall = artifactsDeleteMetaDataInContainerValidateBeforeCall(subscriptionId, resourceGroupName, workspaceName, origin, container, hardDelete, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Artifact Metadata. (asynchronously)
     * Delete Artifact Metadata in a specific container.
     * @param subscriptionId The Azure Subscription ID. (required)
     * @param resourceGroupName The Name of the resource group in which the workspace is located. (required)
     * @param workspaceName The name of the workspace. (required)
     * @param origin The origin of the Artifact. (required)
     * @param container The container name. (required)
     * @param hardDelete If set to true. The delete cannot be revert at later time. (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Artifact metadata deleted successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call artifactsDeleteMetaDataInContainerAsync(UUID subscriptionId, String resourceGroupName, String workspaceName, String origin, String container, Boolean hardDelete, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = artifactsDeleteMetaDataInContainerValidateBeforeCall(subscriptionId, resourceGroupName, workspaceName, origin, container, hardDelete, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for artifactsDownload
     * @param subscriptionId The Azure Subscription ID. (required)
     * @param resourceGroupName The Name of the resource group in which the workspace is located. (required)
     * @param workspaceName The name of the workspace. (required)
     * @param origin The origin of the Artifact. (required)
     * @param container The container name. (required)
     * @param path The Artifact Path. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> File Response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call artifactsDownloadCall(UUID subscriptionId, String resourceGroupName, String workspaceName, String origin, String container, String path, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/artifact/v2.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/artifacts/{origin}/{container}/content"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "workspaceName" + "}", localVarApiClient.escapeString(workspaceName.toString()))
            .replace("{" + "origin" + "}", localVarApiClient.escapeString(origin.toString()))
            .replace("{" + "container" + "}", localVarApiClient.escapeString(container.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (path != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("path", path));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call artifactsDownloadValidateBeforeCall(UUID subscriptionId, String resourceGroupName, String workspaceName, String origin, String container, String path, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling artifactsDownload(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling artifactsDownload(Async)");
        }

        // verify the required parameter 'workspaceName' is set
        if (workspaceName == null) {
            throw new ApiException("Missing the required parameter 'workspaceName' when calling artifactsDownload(Async)");
        }

        // verify the required parameter 'origin' is set
        if (origin == null) {
            throw new ApiException("Missing the required parameter 'origin' when calling artifactsDownload(Async)");
        }

        // verify the required parameter 'container' is set
        if (container == null) {
            throw new ApiException("Missing the required parameter 'container' when calling artifactsDownload(Async)");
        }

        return artifactsDownloadCall(subscriptionId, resourceGroupName, workspaceName, origin, container, path, _callback);

    }

    /**
     * Get Artifact content by Id.
     * Get Artifact content of a specific Id.
     * @param subscriptionId The Azure Subscription ID. (required)
     * @param resourceGroupName The Name of the resource group in which the workspace is located. (required)
     * @param workspaceName The name of the workspace. (required)
     * @param origin The origin of the Artifact. (required)
     * @param container The container name. (required)
     * @param path The Artifact Path. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> File Response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public File artifactsDownload(UUID subscriptionId, String resourceGroupName, String workspaceName, String origin, String container, String path) throws ApiException {
        ApiResponse<File> localVarResp = artifactsDownloadWithHttpInfo(subscriptionId, resourceGroupName, workspaceName, origin, container, path);
        return localVarResp.getData();
    }

    /**
     * Get Artifact content by Id.
     * Get Artifact content of a specific Id.
     * @param subscriptionId The Azure Subscription ID. (required)
     * @param resourceGroupName The Name of the resource group in which the workspace is located. (required)
     * @param workspaceName The name of the workspace. (required)
     * @param origin The origin of the Artifact. (required)
     * @param container The container name. (required)
     * @param path The Artifact Path. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> File Response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> artifactsDownloadWithHttpInfo(UUID subscriptionId, String resourceGroupName, String workspaceName, String origin, String container, String path) throws ApiException {
        okhttp3.Call localVarCall = artifactsDownloadValidateBeforeCall(subscriptionId, resourceGroupName, workspaceName, origin, container, path, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Artifact content by Id. (asynchronously)
     * Get Artifact content of a specific Id.
     * @param subscriptionId The Azure Subscription ID. (required)
     * @param resourceGroupName The Name of the resource group in which the workspace is located. (required)
     * @param workspaceName The name of the workspace. (required)
     * @param origin The origin of the Artifact. (required)
     * @param container The container name. (required)
     * @param path The Artifact Path. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> File Response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call artifactsDownloadAsync(UUID subscriptionId, String resourceGroupName, String workspaceName, String origin, String container, String path, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = artifactsDownloadValidateBeforeCall(subscriptionId, resourceGroupName, workspaceName, origin, container, path, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for artifactsGet
     * @param subscriptionId The Azure Subscription ID. (required)
     * @param resourceGroupName The Name of the resource group in which the workspace is located. (required)
     * @param workspaceName The name of the workspace. (required)
     * @param origin The origin of the Artifact. (required)
     * @param container The container name. (required)
     * @param path The Artifact Path. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The details of the Artifact are returned successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call artifactsGetCall(UUID subscriptionId, String resourceGroupName, String workspaceName, String origin, String container, String path, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/artifact/v2.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/artifacts/{origin}/{container}/metadata"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "workspaceName" + "}", localVarApiClient.escapeString(workspaceName.toString()))
            .replace("{" + "origin" + "}", localVarApiClient.escapeString(origin.toString()))
            .replace("{" + "container" + "}", localVarApiClient.escapeString(container.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (path != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("path", path));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call artifactsGetValidateBeforeCall(UUID subscriptionId, String resourceGroupName, String workspaceName, String origin, String container, String path, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling artifactsGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling artifactsGet(Async)");
        }

        // verify the required parameter 'workspaceName' is set
        if (workspaceName == null) {
            throw new ApiException("Missing the required parameter 'workspaceName' when calling artifactsGet(Async)");
        }

        // verify the required parameter 'origin' is set
        if (origin == null) {
            throw new ApiException("Missing the required parameter 'origin' when calling artifactsGet(Async)");
        }

        // verify the required parameter 'container' is set
        if (container == null) {
            throw new ApiException("Missing the required parameter 'container' when calling artifactsGet(Async)");
        }

        // verify the required parameter 'path' is set
        if (path == null) {
            throw new ApiException("Missing the required parameter 'path' when calling artifactsGet(Async)");
        }

        return artifactsGetCall(subscriptionId, resourceGroupName, workspaceName, origin, container, path, _callback);

    }

    /**
     * Get Artifact metadata by Id.
     * Get Artifact metadata for a specific Id.
     * @param subscriptionId The Azure Subscription ID. (required)
     * @param resourceGroupName The Name of the resource group in which the workspace is located. (required)
     * @param workspaceName The name of the workspace. (required)
     * @param origin The origin of the Artifact. (required)
     * @param container The container name. (required)
     * @param path The Artifact Path. (required)
     * @return Artifact
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The details of the Artifact are returned successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public Artifact artifactsGet(UUID subscriptionId, String resourceGroupName, String workspaceName, String origin, String container, String path) throws ApiException {
        ApiResponse<Artifact> localVarResp = artifactsGetWithHttpInfo(subscriptionId, resourceGroupName, workspaceName, origin, container, path);
        return localVarResp.getData();
    }

    /**
     * Get Artifact metadata by Id.
     * Get Artifact metadata for a specific Id.
     * @param subscriptionId The Azure Subscription ID. (required)
     * @param resourceGroupName The Name of the resource group in which the workspace is located. (required)
     * @param workspaceName The name of the workspace. (required)
     * @param origin The origin of the Artifact. (required)
     * @param container The container name. (required)
     * @param path The Artifact Path. (required)
     * @return ApiResponse&lt;Artifact&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The details of the Artifact are returned successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Artifact> artifactsGetWithHttpInfo(UUID subscriptionId, String resourceGroupName, String workspaceName, String origin, String container, String path) throws ApiException {
        okhttp3.Call localVarCall = artifactsGetValidateBeforeCall(subscriptionId, resourceGroupName, workspaceName, origin, container, path, null);
        Type localVarReturnType = new TypeToken<Artifact>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Artifact metadata by Id. (asynchronously)
     * Get Artifact metadata for a specific Id.
     * @param subscriptionId The Azure Subscription ID. (required)
     * @param resourceGroupName The Name of the resource group in which the workspace is located. (required)
     * @param workspaceName The name of the workspace. (required)
     * @param origin The origin of the Artifact. (required)
     * @param container The container name. (required)
     * @param path The Artifact Path. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The details of the Artifact are returned successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call artifactsGetAsync(UUID subscriptionId, String resourceGroupName, String workspaceName, String origin, String container, String path, final ApiCallback<Artifact> _callback) throws ApiException {

        okhttp3.Call localVarCall = artifactsGetValidateBeforeCall(subscriptionId, resourceGroupName, workspaceName, origin, container, path, _callback);
        Type localVarReturnType = new TypeToken<Artifact>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for artifactsGetContentInformation
     * @param subscriptionId The Azure Subscription ID. (required)
     * @param resourceGroupName The Name of the resource group in which the workspace is located. (required)
     * @param workspaceName The name of the workspace. (required)
     * @param origin The origin of the Artifact. (required)
     * @param container The container name. (required)
     * @param path The Artifact Path. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Artifact content information is returned successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call artifactsGetContentInformationCall(UUID subscriptionId, String resourceGroupName, String workspaceName, String origin, String container, String path, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/artifact/v2.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/artifacts/{origin}/{container}/contentinfo"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "workspaceName" + "}", localVarApiClient.escapeString(workspaceName.toString()))
            .replace("{" + "origin" + "}", localVarApiClient.escapeString(origin.toString()))
            .replace("{" + "container" + "}", localVarApiClient.escapeString(container.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (path != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("path", path));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call artifactsGetContentInformationValidateBeforeCall(UUID subscriptionId, String resourceGroupName, String workspaceName, String origin, String container, String path, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling artifactsGetContentInformation(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling artifactsGetContentInformation(Async)");
        }

        // verify the required parameter 'workspaceName' is set
        if (workspaceName == null) {
            throw new ApiException("Missing the required parameter 'workspaceName' when calling artifactsGetContentInformation(Async)");
        }

        // verify the required parameter 'origin' is set
        if (origin == null) {
            throw new ApiException("Missing the required parameter 'origin' when calling artifactsGetContentInformation(Async)");
        }

        // verify the required parameter 'container' is set
        if (container == null) {
            throw new ApiException("Missing the required parameter 'container' when calling artifactsGetContentInformation(Async)");
        }

        return artifactsGetContentInformationCall(subscriptionId, resourceGroupName, workspaceName, origin, container, path, _callback);

    }

    /**
     * Get Artifact content information.
     * Get content information of an Artifact.
     * @param subscriptionId The Azure Subscription ID. (required)
     * @param resourceGroupName The Name of the resource group in which the workspace is located. (required)
     * @param workspaceName The name of the workspace. (required)
     * @param origin The origin of the Artifact. (required)
     * @param container The container name. (required)
     * @param path The Artifact Path. (optional)
     * @return ArtifactContentInformation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Artifact content information is returned successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ArtifactContentInformation artifactsGetContentInformation(UUID subscriptionId, String resourceGroupName, String workspaceName, String origin, String container, String path) throws ApiException {
        ApiResponse<ArtifactContentInformation> localVarResp = artifactsGetContentInformationWithHttpInfo(subscriptionId, resourceGroupName, workspaceName, origin, container, path);
        return localVarResp.getData();
    }

    /**
     * Get Artifact content information.
     * Get content information of an Artifact.
     * @param subscriptionId The Azure Subscription ID. (required)
     * @param resourceGroupName The Name of the resource group in which the workspace is located. (required)
     * @param workspaceName The name of the workspace. (required)
     * @param origin The origin of the Artifact. (required)
     * @param container The container name. (required)
     * @param path The Artifact Path. (optional)
     * @return ApiResponse&lt;ArtifactContentInformation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Artifact content information is returned successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ArtifactContentInformation> artifactsGetContentInformationWithHttpInfo(UUID subscriptionId, String resourceGroupName, String workspaceName, String origin, String container, String path) throws ApiException {
        okhttp3.Call localVarCall = artifactsGetContentInformationValidateBeforeCall(subscriptionId, resourceGroupName, workspaceName, origin, container, path, null);
        Type localVarReturnType = new TypeToken<ArtifactContentInformation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Artifact content information. (asynchronously)
     * Get content information of an Artifact.
     * @param subscriptionId The Azure Subscription ID. (required)
     * @param resourceGroupName The Name of the resource group in which the workspace is located. (required)
     * @param workspaceName The name of the workspace. (required)
     * @param origin The origin of the Artifact. (required)
     * @param container The container name. (required)
     * @param path The Artifact Path. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Artifact content information is returned successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call artifactsGetContentInformationAsync(UUID subscriptionId, String resourceGroupName, String workspaceName, String origin, String container, String path, final ApiCallback<ArtifactContentInformation> _callback) throws ApiException {

        okhttp3.Call localVarCall = artifactsGetContentInformationValidateBeforeCall(subscriptionId, resourceGroupName, workspaceName, origin, container, path, _callback);
        Type localVarReturnType = new TypeToken<ArtifactContentInformation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for artifactsGetSas
     * @param subscriptionId The Azure Subscription ID. (required)
     * @param resourceGroupName The Name of the resource group in which the workspace is located. (required)
     * @param workspaceName The name of the workspace. (required)
     * @param origin The origin of the Artifact. (required)
     * @param container The container name. (required)
     * @param path The Artifact Path. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Artifact writable shared access signature is returned successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call artifactsGetSasCall(UUID subscriptionId, String resourceGroupName, String workspaceName, String origin, String container, String path, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/artifact/v2.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/artifacts/{origin}/{container}/write"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "workspaceName" + "}", localVarApiClient.escapeString(workspaceName.toString()))
            .replace("{" + "origin" + "}", localVarApiClient.escapeString(origin.toString()))
            .replace("{" + "container" + "}", localVarApiClient.escapeString(container.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (path != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("path", path));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call artifactsGetSasValidateBeforeCall(UUID subscriptionId, String resourceGroupName, String workspaceName, String origin, String container, String path, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling artifactsGetSas(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling artifactsGetSas(Async)");
        }

        // verify the required parameter 'workspaceName' is set
        if (workspaceName == null) {
            throw new ApiException("Missing the required parameter 'workspaceName' when calling artifactsGetSas(Async)");
        }

        // verify the required parameter 'origin' is set
        if (origin == null) {
            throw new ApiException("Missing the required parameter 'origin' when calling artifactsGetSas(Async)");
        }

        // verify the required parameter 'container' is set
        if (container == null) {
            throw new ApiException("Missing the required parameter 'container' when calling artifactsGetSas(Async)");
        }

        return artifactsGetSasCall(subscriptionId, resourceGroupName, workspaceName, origin, container, path, _callback);

    }

    /**
     * Get writable shared access signature for Artifact.
     * Get writable shared access signature for a specific Artifact.
     * @param subscriptionId The Azure Subscription ID. (required)
     * @param resourceGroupName The Name of the resource group in which the workspace is located. (required)
     * @param workspaceName The name of the workspace. (required)
     * @param origin The origin of the Artifact. (required)
     * @param container The container name. (required)
     * @param path The Artifact Path. (optional)
     * @return ArtifactContentInformation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Artifact writable shared access signature is returned successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ArtifactContentInformation artifactsGetSas(UUID subscriptionId, String resourceGroupName, String workspaceName, String origin, String container, String path) throws ApiException {
        ApiResponse<ArtifactContentInformation> localVarResp = artifactsGetSasWithHttpInfo(subscriptionId, resourceGroupName, workspaceName, origin, container, path);
        return localVarResp.getData();
    }

    /**
     * Get writable shared access signature for Artifact.
     * Get writable shared access signature for a specific Artifact.
     * @param subscriptionId The Azure Subscription ID. (required)
     * @param resourceGroupName The Name of the resource group in which the workspace is located. (required)
     * @param workspaceName The name of the workspace. (required)
     * @param origin The origin of the Artifact. (required)
     * @param container The container name. (required)
     * @param path The Artifact Path. (optional)
     * @return ApiResponse&lt;ArtifactContentInformation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Artifact writable shared access signature is returned successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ArtifactContentInformation> artifactsGetSasWithHttpInfo(UUID subscriptionId, String resourceGroupName, String workspaceName, String origin, String container, String path) throws ApiException {
        okhttp3.Call localVarCall = artifactsGetSasValidateBeforeCall(subscriptionId, resourceGroupName, workspaceName, origin, container, path, null);
        Type localVarReturnType = new TypeToken<ArtifactContentInformation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get writable shared access signature for Artifact. (asynchronously)
     * Get writable shared access signature for a specific Artifact.
     * @param subscriptionId The Azure Subscription ID. (required)
     * @param resourceGroupName The Name of the resource group in which the workspace is located. (required)
     * @param workspaceName The name of the workspace. (required)
     * @param origin The origin of the Artifact. (required)
     * @param container The container name. (required)
     * @param path The Artifact Path. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Artifact writable shared access signature is returned successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call artifactsGetSasAsync(UUID subscriptionId, String resourceGroupName, String workspaceName, String origin, String container, String path, final ApiCallback<ArtifactContentInformation> _callback) throws ApiException {

        okhttp3.Call localVarCall = artifactsGetSasValidateBeforeCall(subscriptionId, resourceGroupName, workspaceName, origin, container, path, _callback);
        Type localVarReturnType = new TypeToken<ArtifactContentInformation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for artifactsGetStorageContentInformation
     * @param subscriptionId The Azure Subscription ID. (required)
     * @param resourceGroupName The Name of the resource group in which the workspace is located. (required)
     * @param workspaceName The name of the workspace. (required)
     * @param origin The origin of the Artifact. (required)
     * @param container The container name. (required)
     * @param path The Artifact Path. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Artifact storage content information is returned successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call artifactsGetStorageContentInformationCall(UUID subscriptionId, String resourceGroupName, String workspaceName, String origin, String container, String path, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/artifact/v2.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/artifacts/{origin}/{container}/contentinfo/storageuri"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "workspaceName" + "}", localVarApiClient.escapeString(workspaceName.toString()))
            .replace("{" + "origin" + "}", localVarApiClient.escapeString(origin.toString()))
            .replace("{" + "container" + "}", localVarApiClient.escapeString(container.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (path != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("path", path));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call artifactsGetStorageContentInformationValidateBeforeCall(UUID subscriptionId, String resourceGroupName, String workspaceName, String origin, String container, String path, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling artifactsGetStorageContentInformation(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling artifactsGetStorageContentInformation(Async)");
        }

        // verify the required parameter 'workspaceName' is set
        if (workspaceName == null) {
            throw new ApiException("Missing the required parameter 'workspaceName' when calling artifactsGetStorageContentInformation(Async)");
        }

        // verify the required parameter 'origin' is set
        if (origin == null) {
            throw new ApiException("Missing the required parameter 'origin' when calling artifactsGetStorageContentInformation(Async)");
        }

        // verify the required parameter 'container' is set
        if (container == null) {
            throw new ApiException("Missing the required parameter 'container' when calling artifactsGetStorageContentInformation(Async)");
        }

        return artifactsGetStorageContentInformationCall(subscriptionId, resourceGroupName, workspaceName, origin, container, path, _callback);

    }

    /**
     * Get Artifact storage content information.
     * Get storage content information of an Artifact.
     * @param subscriptionId The Azure Subscription ID. (required)
     * @param resourceGroupName The Name of the resource group in which the workspace is located. (required)
     * @param workspaceName The name of the workspace. (required)
     * @param origin The origin of the Artifact. (required)
     * @param container The container name. (required)
     * @param path The Artifact Path. (optional)
     * @return ArtifactContentInformation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Artifact storage content information is returned successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ArtifactContentInformation artifactsGetStorageContentInformation(UUID subscriptionId, String resourceGroupName, String workspaceName, String origin, String container, String path) throws ApiException {
        ApiResponse<ArtifactContentInformation> localVarResp = artifactsGetStorageContentInformationWithHttpInfo(subscriptionId, resourceGroupName, workspaceName, origin, container, path);
        return localVarResp.getData();
    }

    /**
     * Get Artifact storage content information.
     * Get storage content information of an Artifact.
     * @param subscriptionId The Azure Subscription ID. (required)
     * @param resourceGroupName The Name of the resource group in which the workspace is located. (required)
     * @param workspaceName The name of the workspace. (required)
     * @param origin The origin of the Artifact. (required)
     * @param container The container name. (required)
     * @param path The Artifact Path. (optional)
     * @return ApiResponse&lt;ArtifactContentInformation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Artifact storage content information is returned successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ArtifactContentInformation> artifactsGetStorageContentInformationWithHttpInfo(UUID subscriptionId, String resourceGroupName, String workspaceName, String origin, String container, String path) throws ApiException {
        okhttp3.Call localVarCall = artifactsGetStorageContentInformationValidateBeforeCall(subscriptionId, resourceGroupName, workspaceName, origin, container, path, null);
        Type localVarReturnType = new TypeToken<ArtifactContentInformation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Artifact storage content information. (asynchronously)
     * Get storage content information of an Artifact.
     * @param subscriptionId The Azure Subscription ID. (required)
     * @param resourceGroupName The Name of the resource group in which the workspace is located. (required)
     * @param workspaceName The name of the workspace. (required)
     * @param origin The origin of the Artifact. (required)
     * @param container The container name. (required)
     * @param path The Artifact Path. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Artifact storage content information is returned successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call artifactsGetStorageContentInformationAsync(UUID subscriptionId, String resourceGroupName, String workspaceName, String origin, String container, String path, final ApiCallback<ArtifactContentInformation> _callback) throws ApiException {

        okhttp3.Call localVarCall = artifactsGetStorageContentInformationValidateBeforeCall(subscriptionId, resourceGroupName, workspaceName, origin, container, path, _callback);
        Type localVarReturnType = new TypeToken<ArtifactContentInformation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for artifactsListInContainer
     * @param subscriptionId The Azure Subscription ID. (required)
     * @param resourceGroupName The Name of the resource group in which the workspace is located. (required)
     * @param workspaceName The name of the workspace. (required)
     * @param origin The origin of the Artifact. (required)
     * @param container The container name. (required)
     * @param path The Artifact Path. (optional)
     * @param continuationToken The continuation token. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The details of the Artifacts are returned successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call artifactsListInContainerCall(UUID subscriptionId, String resourceGroupName, String workspaceName, String origin, String container, String path, String continuationToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/artifact/v2.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/artifacts/{origin}/{container}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "workspaceName" + "}", localVarApiClient.escapeString(workspaceName.toString()))
            .replace("{" + "origin" + "}", localVarApiClient.escapeString(origin.toString()))
            .replace("{" + "container" + "}", localVarApiClient.escapeString(container.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (path != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("path", path));
        }

        if (continuationToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("continuationToken", continuationToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call artifactsListInContainerValidateBeforeCall(UUID subscriptionId, String resourceGroupName, String workspaceName, String origin, String container, String path, String continuationToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling artifactsListInContainer(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling artifactsListInContainer(Async)");
        }

        // verify the required parameter 'workspaceName' is set
        if (workspaceName == null) {
            throw new ApiException("Missing the required parameter 'workspaceName' when calling artifactsListInContainer(Async)");
        }

        // verify the required parameter 'origin' is set
        if (origin == null) {
            throw new ApiException("Missing the required parameter 'origin' when calling artifactsListInContainer(Async)");
        }

        // verify the required parameter 'container' is set
        if (container == null) {
            throw new ApiException("Missing the required parameter 'container' when calling artifactsListInContainer(Async)");
        }

        return artifactsListInContainerCall(subscriptionId, resourceGroupName, workspaceName, origin, container, path, continuationToken, _callback);

    }

    /**
     * Get Artifacts metadata in a container or path.
     * Get Artifacts metadata in a specific container or path.
     * @param subscriptionId The Azure Subscription ID. (required)
     * @param resourceGroupName The Name of the resource group in which the workspace is located. (required)
     * @param workspaceName The name of the workspace. (required)
     * @param origin The origin of the Artifact. (required)
     * @param container The container name. (required)
     * @param path The Artifact Path. (optional)
     * @param continuationToken The continuation token. (optional)
     * @return PaginatedArtifactList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The details of the Artifacts are returned successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedArtifactList artifactsListInContainer(UUID subscriptionId, String resourceGroupName, String workspaceName, String origin, String container, String path, String continuationToken) throws ApiException {
        ApiResponse<PaginatedArtifactList> localVarResp = artifactsListInContainerWithHttpInfo(subscriptionId, resourceGroupName, workspaceName, origin, container, path, continuationToken);
        return localVarResp.getData();
    }

    /**
     * Get Artifacts metadata in a container or path.
     * Get Artifacts metadata in a specific container or path.
     * @param subscriptionId The Azure Subscription ID. (required)
     * @param resourceGroupName The Name of the resource group in which the workspace is located. (required)
     * @param workspaceName The name of the workspace. (required)
     * @param origin The origin of the Artifact. (required)
     * @param container The container name. (required)
     * @param path The Artifact Path. (optional)
     * @param continuationToken The continuation token. (optional)
     * @return ApiResponse&lt;PaginatedArtifactList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The details of the Artifacts are returned successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedArtifactList> artifactsListInContainerWithHttpInfo(UUID subscriptionId, String resourceGroupName, String workspaceName, String origin, String container, String path, String continuationToken) throws ApiException {
        okhttp3.Call localVarCall = artifactsListInContainerValidateBeforeCall(subscriptionId, resourceGroupName, workspaceName, origin, container, path, continuationToken, null);
        Type localVarReturnType = new TypeToken<PaginatedArtifactList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Artifacts metadata in a container or path. (asynchronously)
     * Get Artifacts metadata in a specific container or path.
     * @param subscriptionId The Azure Subscription ID. (required)
     * @param resourceGroupName The Name of the resource group in which the workspace is located. (required)
     * @param workspaceName The name of the workspace. (required)
     * @param origin The origin of the Artifact. (required)
     * @param container The container name. (required)
     * @param path The Artifact Path. (optional)
     * @param continuationToken The continuation token. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The details of the Artifacts are returned successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call artifactsListInContainerAsync(UUID subscriptionId, String resourceGroupName, String workspaceName, String origin, String container, String path, String continuationToken, final ApiCallback<PaginatedArtifactList> _callback) throws ApiException {

        okhttp3.Call localVarCall = artifactsListInContainerValidateBeforeCall(subscriptionId, resourceGroupName, workspaceName, origin, container, path, continuationToken, _callback);
        Type localVarReturnType = new TypeToken<PaginatedArtifactList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for artifactsListSasByPrefix
     * @param subscriptionId The Azure Subscription ID. (required)
     * @param resourceGroupName The Name of the resource group in which the workspace is located. (required)
     * @param workspaceName The name of the workspace. (required)
     * @param origin The origin of the Artifact. (required)
     * @param container The container name. (required)
     * @param path The Artifact Path. (optional)
     * @param continuationToken The continuation token. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Artifact writable shared access signature is returned successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call artifactsListSasByPrefixCall(UUID subscriptionId, String resourceGroupName, String workspaceName, String origin, String container, String path, String continuationToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/artifact/v2.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/artifacts/{origin}/{container}/prefix/contentinfo"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "workspaceName" + "}", localVarApiClient.escapeString(workspaceName.toString()))
            .replace("{" + "origin" + "}", localVarApiClient.escapeString(origin.toString()))
            .replace("{" + "container" + "}", localVarApiClient.escapeString(container.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (path != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("path", path));
        }

        if (continuationToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("continuationToken", continuationToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call artifactsListSasByPrefixValidateBeforeCall(UUID subscriptionId, String resourceGroupName, String workspaceName, String origin, String container, String path, String continuationToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling artifactsListSasByPrefix(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling artifactsListSasByPrefix(Async)");
        }

        // verify the required parameter 'workspaceName' is set
        if (workspaceName == null) {
            throw new ApiException("Missing the required parameter 'workspaceName' when calling artifactsListSasByPrefix(Async)");
        }

        // verify the required parameter 'origin' is set
        if (origin == null) {
            throw new ApiException("Missing the required parameter 'origin' when calling artifactsListSasByPrefix(Async)");
        }

        // verify the required parameter 'container' is set
        if (container == null) {
            throw new ApiException("Missing the required parameter 'container' when calling artifactsListSasByPrefix(Async)");
        }

        return artifactsListSasByPrefixCall(subscriptionId, resourceGroupName, workspaceName, origin, container, path, continuationToken, _callback);

    }

    /**
     * Get shared access signature for an Artifact
     * Get shared access signature for an Artifact in specific path.
     * @param subscriptionId The Azure Subscription ID. (required)
     * @param resourceGroupName The Name of the resource group in which the workspace is located. (required)
     * @param workspaceName The name of the workspace. (required)
     * @param origin The origin of the Artifact. (required)
     * @param container The container name. (required)
     * @param path The Artifact Path. (optional)
     * @param continuationToken The continuation token. (optional)
     * @return PaginatedArtifactContentInformationList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Artifact writable shared access signature is returned successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedArtifactContentInformationList artifactsListSasByPrefix(UUID subscriptionId, String resourceGroupName, String workspaceName, String origin, String container, String path, String continuationToken) throws ApiException {
        ApiResponse<PaginatedArtifactContentInformationList> localVarResp = artifactsListSasByPrefixWithHttpInfo(subscriptionId, resourceGroupName, workspaceName, origin, container, path, continuationToken);
        return localVarResp.getData();
    }

    /**
     * Get shared access signature for an Artifact
     * Get shared access signature for an Artifact in specific path.
     * @param subscriptionId The Azure Subscription ID. (required)
     * @param resourceGroupName The Name of the resource group in which the workspace is located. (required)
     * @param workspaceName The name of the workspace. (required)
     * @param origin The origin of the Artifact. (required)
     * @param container The container name. (required)
     * @param path The Artifact Path. (optional)
     * @param continuationToken The continuation token. (optional)
     * @return ApiResponse&lt;PaginatedArtifactContentInformationList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Artifact writable shared access signature is returned successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedArtifactContentInformationList> artifactsListSasByPrefixWithHttpInfo(UUID subscriptionId, String resourceGroupName, String workspaceName, String origin, String container, String path, String continuationToken) throws ApiException {
        okhttp3.Call localVarCall = artifactsListSasByPrefixValidateBeforeCall(subscriptionId, resourceGroupName, workspaceName, origin, container, path, continuationToken, null);
        Type localVarReturnType = new TypeToken<PaginatedArtifactContentInformationList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get shared access signature for an Artifact (asynchronously)
     * Get shared access signature for an Artifact in specific path.
     * @param subscriptionId The Azure Subscription ID. (required)
     * @param resourceGroupName The Name of the resource group in which the workspace is located. (required)
     * @param workspaceName The name of the workspace. (required)
     * @param origin The origin of the Artifact. (required)
     * @param container The container name. (required)
     * @param path The Artifact Path. (optional)
     * @param continuationToken The continuation token. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Artifact writable shared access signature is returned successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call artifactsListSasByPrefixAsync(UUID subscriptionId, String resourceGroupName, String workspaceName, String origin, String container, String path, String continuationToken, final ApiCallback<PaginatedArtifactContentInformationList> _callback) throws ApiException {

        okhttp3.Call localVarCall = artifactsListSasByPrefixValidateBeforeCall(subscriptionId, resourceGroupName, workspaceName, origin, container, path, continuationToken, _callback);
        Type localVarReturnType = new TypeToken<PaginatedArtifactContentInformationList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for artifactsListStorageUriByPrefix
     * @param subscriptionId The Azure Subscription ID. (required)
     * @param resourceGroupName The Name of the resource group in which the workspace is located. (required)
     * @param workspaceName The name of the workspace. (required)
     * @param origin The origin of the Artifact. (required)
     * @param container The container name. (required)
     * @param path The Artifact Path. (optional)
     * @param continuationToken The continuation token. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Artifact storage uri is returned successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call artifactsListStorageUriByPrefixCall(UUID subscriptionId, String resourceGroupName, String workspaceName, String origin, String container, String path, String continuationToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/artifact/v2.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/artifacts/{origin}/{container}/prefix/contentinfo/storageuri"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "workspaceName" + "}", localVarApiClient.escapeString(workspaceName.toString()))
            .replace("{" + "origin" + "}", localVarApiClient.escapeString(origin.toString()))
            .replace("{" + "container" + "}", localVarApiClient.escapeString(container.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (path != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("path", path));
        }

        if (continuationToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("continuationToken", continuationToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call artifactsListStorageUriByPrefixValidateBeforeCall(UUID subscriptionId, String resourceGroupName, String workspaceName, String origin, String container, String path, String continuationToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling artifactsListStorageUriByPrefix(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling artifactsListStorageUriByPrefix(Async)");
        }

        // verify the required parameter 'workspaceName' is set
        if (workspaceName == null) {
            throw new ApiException("Missing the required parameter 'workspaceName' when calling artifactsListStorageUriByPrefix(Async)");
        }

        // verify the required parameter 'origin' is set
        if (origin == null) {
            throw new ApiException("Missing the required parameter 'origin' when calling artifactsListStorageUriByPrefix(Async)");
        }

        // verify the required parameter 'container' is set
        if (container == null) {
            throw new ApiException("Missing the required parameter 'container' when calling artifactsListStorageUriByPrefix(Async)");
        }

        return artifactsListStorageUriByPrefixCall(subscriptionId, resourceGroupName, workspaceName, origin, container, path, continuationToken, _callback);

    }

    /**
     * Get storage Uri for Artifacts in a path.
     * Get storage Uri for Artifacts in a specific path.
     * @param subscriptionId The Azure Subscription ID. (required)
     * @param resourceGroupName The Name of the resource group in which the workspace is located. (required)
     * @param workspaceName The name of the workspace. (required)
     * @param origin The origin of the Artifact. (required)
     * @param container The container name. (required)
     * @param path The Artifact Path. (optional)
     * @param continuationToken The continuation token. (optional)
     * @return PaginatedArtifactContentInformationList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Artifact storage uri is returned successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedArtifactContentInformationList artifactsListStorageUriByPrefix(UUID subscriptionId, String resourceGroupName, String workspaceName, String origin, String container, String path, String continuationToken) throws ApiException {
        ApiResponse<PaginatedArtifactContentInformationList> localVarResp = artifactsListStorageUriByPrefixWithHttpInfo(subscriptionId, resourceGroupName, workspaceName, origin, container, path, continuationToken);
        return localVarResp.getData();
    }

    /**
     * Get storage Uri for Artifacts in a path.
     * Get storage Uri for Artifacts in a specific path.
     * @param subscriptionId The Azure Subscription ID. (required)
     * @param resourceGroupName The Name of the resource group in which the workspace is located. (required)
     * @param workspaceName The name of the workspace. (required)
     * @param origin The origin of the Artifact. (required)
     * @param container The container name. (required)
     * @param path The Artifact Path. (optional)
     * @param continuationToken The continuation token. (optional)
     * @return ApiResponse&lt;PaginatedArtifactContentInformationList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Artifact storage uri is returned successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedArtifactContentInformationList> artifactsListStorageUriByPrefixWithHttpInfo(UUID subscriptionId, String resourceGroupName, String workspaceName, String origin, String container, String path, String continuationToken) throws ApiException {
        okhttp3.Call localVarCall = artifactsListStorageUriByPrefixValidateBeforeCall(subscriptionId, resourceGroupName, workspaceName, origin, container, path, continuationToken, null);
        Type localVarReturnType = new TypeToken<PaginatedArtifactContentInformationList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get storage Uri for Artifacts in a path. (asynchronously)
     * Get storage Uri for Artifacts in a specific path.
     * @param subscriptionId The Azure Subscription ID. (required)
     * @param resourceGroupName The Name of the resource group in which the workspace is located. (required)
     * @param workspaceName The name of the workspace. (required)
     * @param origin The origin of the Artifact. (required)
     * @param container The container name. (required)
     * @param path The Artifact Path. (optional)
     * @param continuationToken The continuation token. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Artifact storage uri is returned successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call artifactsListStorageUriByPrefixAsync(UUID subscriptionId, String resourceGroupName, String workspaceName, String origin, String container, String path, String continuationToken, final ApiCallback<PaginatedArtifactContentInformationList> _callback) throws ApiException {

        okhttp3.Call localVarCall = artifactsListStorageUriByPrefixValidateBeforeCall(subscriptionId, resourceGroupName, workspaceName, origin, container, path, continuationToken, _callback);
        Type localVarReturnType = new TypeToken<PaginatedArtifactContentInformationList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for artifactsRegister
     * @param subscriptionId The Azure Subscription ID. (required)
     * @param resourceGroupName The Name of the resource group in which the workspace is located. (required)
     * @param workspaceName The name of the workspace. (required)
     * @param artifact The Artifact creation details. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Artifact is created successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call artifactsRegisterCall(UUID subscriptionId, String resourceGroupName, String workspaceName, Artifact artifact, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = artifact;

        // create path and map variables
        String localVarPath = "/artifact/v2.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/artifacts/register"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "workspaceName" + "}", localVarApiClient.escapeString(workspaceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call artifactsRegisterValidateBeforeCall(UUID subscriptionId, String resourceGroupName, String workspaceName, Artifact artifact, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling artifactsRegister(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling artifactsRegister(Async)");
        }

        // verify the required parameter 'workspaceName' is set
        if (workspaceName == null) {
            throw new ApiException("Missing the required parameter 'workspaceName' when calling artifactsRegister(Async)");
        }

        // verify the required parameter 'artifact' is set
        if (artifact == null) {
            throw new ApiException("Missing the required parameter 'artifact' when calling artifactsRegister(Async)");
        }

        return artifactsRegisterCall(subscriptionId, resourceGroupName, workspaceName, artifact, _callback);

    }

    /**
     * Create an Artifact for an existing data location.
     * Create an Artifact for an existing dataPath.
     * @param subscriptionId The Azure Subscription ID. (required)
     * @param resourceGroupName The Name of the resource group in which the workspace is located. (required)
     * @param workspaceName The name of the workspace. (required)
     * @param artifact The Artifact creation details. (required)
     * @return Artifact
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Artifact is created successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public Artifact artifactsRegister(UUID subscriptionId, String resourceGroupName, String workspaceName, Artifact artifact) throws ApiException {
        ApiResponse<Artifact> localVarResp = artifactsRegisterWithHttpInfo(subscriptionId, resourceGroupName, workspaceName, artifact);
        return localVarResp.getData();
    }

    /**
     * Create an Artifact for an existing data location.
     * Create an Artifact for an existing dataPath.
     * @param subscriptionId The Azure Subscription ID. (required)
     * @param resourceGroupName The Name of the resource group in which the workspace is located. (required)
     * @param workspaceName The name of the workspace. (required)
     * @param artifact The Artifact creation details. (required)
     * @return ApiResponse&lt;Artifact&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Artifact is created successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Artifact> artifactsRegisterWithHttpInfo(UUID subscriptionId, String resourceGroupName, String workspaceName, Artifact artifact) throws ApiException {
        okhttp3.Call localVarCall = artifactsRegisterValidateBeforeCall(subscriptionId, resourceGroupName, workspaceName, artifact, null);
        Type localVarReturnType = new TypeToken<Artifact>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create an Artifact for an existing data location. (asynchronously)
     * Create an Artifact for an existing dataPath.
     * @param subscriptionId The Azure Subscription ID. (required)
     * @param resourceGroupName The Name of the resource group in which the workspace is located. (required)
     * @param workspaceName The name of the workspace. (required)
     * @param artifact The Artifact creation details. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Artifact is created successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call artifactsRegisterAsync(UUID subscriptionId, String resourceGroupName, String workspaceName, Artifact artifact, final ApiCallback<Artifact> _callback) throws ApiException {

        okhttp3.Call localVarCall = artifactsRegisterValidateBeforeCall(subscriptionId, resourceGroupName, workspaceName, artifact, _callback);
        Type localVarReturnType = new TypeToken<Artifact>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for artifactsUpload
     * @param subscriptionId The Azure Subscription ID. (required)
     * @param resourceGroupName The Name of the resource group in which the workspace is located. (required)
     * @param workspaceName The name of the workspace. (required)
     * @param origin The origin of the Artifact. (required)
     * @param container The container name. (required)
     * @param content The file upload. (required)
     * @param path The Artifact Path. (optional)
     * @param index The index. (optional)
     * @param append Whether or not to append the content or replace it. (optional, default to false)
     * @param allowOverwrite whether to allow overwrite if Artifact Content exist already. when set to true, Overwrite happens if Artifact Content already exists (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Artifact content is uploaded successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call artifactsUploadCall(UUID subscriptionId, String resourceGroupName, String workspaceName, String origin, String container, File content, String path, Integer index, Boolean append, Boolean allowOverwrite, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = content;

        // create path and map variables
        String localVarPath = "/artifact/v2.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/artifacts/{origin}/{container}/content"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "workspaceName" + "}", localVarApiClient.escapeString(workspaceName.toString()))
            .replace("{" + "origin" + "}", localVarApiClient.escapeString(origin.toString()))
            .replace("{" + "container" + "}", localVarApiClient.escapeString(container.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (path != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("path", path));
        }

        if (index != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("index", index));
        }

        if (append != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("append", append));
        }

        if (allowOverwrite != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("allowOverwrite", allowOverwrite));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/octet-stream"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call artifactsUploadValidateBeforeCall(UUID subscriptionId, String resourceGroupName, String workspaceName, String origin, String container, File content, String path, Integer index, Boolean append, Boolean allowOverwrite, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling artifactsUpload(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling artifactsUpload(Async)");
        }

        // verify the required parameter 'workspaceName' is set
        if (workspaceName == null) {
            throw new ApiException("Missing the required parameter 'workspaceName' when calling artifactsUpload(Async)");
        }

        // verify the required parameter 'origin' is set
        if (origin == null) {
            throw new ApiException("Missing the required parameter 'origin' when calling artifactsUpload(Async)");
        }

        // verify the required parameter 'container' is set
        if (container == null) {
            throw new ApiException("Missing the required parameter 'container' when calling artifactsUpload(Async)");
        }

        // verify the required parameter 'content' is set
        if (content == null) {
            throw new ApiException("Missing the required parameter 'content' when calling artifactsUpload(Async)");
        }

        return artifactsUploadCall(subscriptionId, resourceGroupName, workspaceName, origin, container, content, path, index, append, allowOverwrite, _callback);

    }

    /**
     * Upload Artifact content.
     * Upload content to an Artifact.
     * @param subscriptionId The Azure Subscription ID. (required)
     * @param resourceGroupName The Name of the resource group in which the workspace is located. (required)
     * @param workspaceName The name of the workspace. (required)
     * @param origin The origin of the Artifact. (required)
     * @param container The container name. (required)
     * @param content The file upload. (required)
     * @param path The Artifact Path. (optional)
     * @param index The index. (optional)
     * @param append Whether or not to append the content or replace it. (optional, default to false)
     * @param allowOverwrite whether to allow overwrite if Artifact Content exist already. when set to true, Overwrite happens if Artifact Content already exists (optional, default to false)
     * @return Artifact
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Artifact content is uploaded successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public Artifact artifactsUpload(UUID subscriptionId, String resourceGroupName, String workspaceName, String origin, String container, File content, String path, Integer index, Boolean append, Boolean allowOverwrite) throws ApiException {
        ApiResponse<Artifact> localVarResp = artifactsUploadWithHttpInfo(subscriptionId, resourceGroupName, workspaceName, origin, container, content, path, index, append, allowOverwrite);
        return localVarResp.getData();
    }

    /**
     * Upload Artifact content.
     * Upload content to an Artifact.
     * @param subscriptionId The Azure Subscription ID. (required)
     * @param resourceGroupName The Name of the resource group in which the workspace is located. (required)
     * @param workspaceName The name of the workspace. (required)
     * @param origin The origin of the Artifact. (required)
     * @param container The container name. (required)
     * @param content The file upload. (required)
     * @param path The Artifact Path. (optional)
     * @param index The index. (optional)
     * @param append Whether or not to append the content or replace it. (optional, default to false)
     * @param allowOverwrite whether to allow overwrite if Artifact Content exist already. when set to true, Overwrite happens if Artifact Content already exists (optional, default to false)
     * @return ApiResponse&lt;Artifact&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Artifact content is uploaded successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Artifact> artifactsUploadWithHttpInfo(UUID subscriptionId, String resourceGroupName, String workspaceName, String origin, String container, File content, String path, Integer index, Boolean append, Boolean allowOverwrite) throws ApiException {
        okhttp3.Call localVarCall = artifactsUploadValidateBeforeCall(subscriptionId, resourceGroupName, workspaceName, origin, container, content, path, index, append, allowOverwrite, null);
        Type localVarReturnType = new TypeToken<Artifact>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Upload Artifact content. (asynchronously)
     * Upload content to an Artifact.
     * @param subscriptionId The Azure Subscription ID. (required)
     * @param resourceGroupName The Name of the resource group in which the workspace is located. (required)
     * @param workspaceName The name of the workspace. (required)
     * @param origin The origin of the Artifact. (required)
     * @param container The container name. (required)
     * @param content The file upload. (required)
     * @param path The Artifact Path. (optional)
     * @param index The index. (optional)
     * @param append Whether or not to append the content or replace it. (optional, default to false)
     * @param allowOverwrite whether to allow overwrite if Artifact Content exist already. when set to true, Overwrite happens if Artifact Content already exists (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Artifact content is uploaded successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call artifactsUploadAsync(UUID subscriptionId, String resourceGroupName, String workspaceName, String origin, String container, File content, String path, Integer index, Boolean append, Boolean allowOverwrite, final ApiCallback<Artifact> _callback) throws ApiException {

        okhttp3.Call localVarCall = artifactsUploadValidateBeforeCall(subscriptionId, resourceGroupName, workspaceName, origin, container, content, path, index, append, allowOverwrite, _callback);
        Type localVarReturnType = new TypeToken<Artifact>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
