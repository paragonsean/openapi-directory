/**
 * Artifact
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DataPath from './DataPath';

/**
 * The Artifact model module.
 * @module model/Artifact
 * @version 2019-08-01
 */
class Artifact {
    /**
     * Constructs a new <code>Artifact</code>.
     * Details of an Artifact.
     * @alias module:model/Artifact
     * @param container {String} The name of container. Artifacts can be grouped by container.
     * @param origin {String} The origin of the Artifact creation request. Available origins are 'ExperimentRun', 'LocalUpload', 'WebUpload', 'Dataset' and 'Unknown'.
     * @param path {String} The path to the Artifact in a container.
     */
    constructor(container, origin, path) { 
        
        Artifact.initialize(this, container, origin, path);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, container, origin, path) { 
        obj['container'] = container;
        obj['origin'] = origin;
        obj['path'] = path;
    }

    /**
     * Constructs a <code>Artifact</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Artifact} obj Optional instance to populate.
     * @return {module:model/Artifact} The populated <code>Artifact</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Artifact();

            if (data.hasOwnProperty('artifactId')) {
                obj['artifactId'] = ApiClient.convertToType(data['artifactId'], 'String');
            }
            if (data.hasOwnProperty('container')) {
                obj['container'] = ApiClient.convertToType(data['container'], 'String');
            }
            if (data.hasOwnProperty('createdTime')) {
                obj['createdTime'] = ApiClient.convertToType(data['createdTime'], 'Date');
            }
            if (data.hasOwnProperty('dataPath')) {
                obj['dataPath'] = DataPath.constructFromObject(data['dataPath']);
            }
            if (data.hasOwnProperty('etag')) {
                obj['etag'] = ApiClient.convertToType(data['etag'], 'String');
            }
            if (data.hasOwnProperty('origin')) {
                obj['origin'] = ApiClient.convertToType(data['origin'], 'String');
            }
            if (data.hasOwnProperty('path')) {
                obj['path'] = ApiClient.convertToType(data['path'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Artifact</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Artifact</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Artifact.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['artifactId'] && !(typeof data['artifactId'] === 'string' || data['artifactId'] instanceof String)) {
            throw new Error("Expected the field `artifactId` to be a primitive type in the JSON string but got " + data['artifactId']);
        }
        // ensure the json data is a string
        if (data['container'] && !(typeof data['container'] === 'string' || data['container'] instanceof String)) {
            throw new Error("Expected the field `container` to be a primitive type in the JSON string but got " + data['container']);
        }
        // validate the optional field `dataPath`
        if (data['dataPath']) { // data not null
          DataPath.validateJSON(data['dataPath']);
        }
        // ensure the json data is a string
        if (data['etag'] && !(typeof data['etag'] === 'string' || data['etag'] instanceof String)) {
            throw new Error("Expected the field `etag` to be a primitive type in the JSON string but got " + data['etag']);
        }
        // ensure the json data is a string
        if (data['origin'] && !(typeof data['origin'] === 'string' || data['origin'] instanceof String)) {
            throw new Error("Expected the field `origin` to be a primitive type in the JSON string but got " + data['origin']);
        }
        // ensure the json data is a string
        if (data['path'] && !(typeof data['path'] === 'string' || data['path'] instanceof String)) {
            throw new Error("Expected the field `path` to be a primitive type in the JSON string but got " + data['path']);
        }

        return true;
    }


}

Artifact.RequiredProperties = ["container", "origin", "path"];

/**
 * The identifier of an Artifact. Format of ArtifactId - {Origin}/{Container}/{Path}.
 * @member {String} artifactId
 */
Artifact.prototype['artifactId'] = undefined;

/**
 * The name of container. Artifacts can be grouped by container.
 * @member {String} container
 */
Artifact.prototype['container'] = undefined;

/**
 * The Date and Time at which the Artifact is created. The DateTime is in UTC.
 * @member {Date} createdTime
 */
Artifact.prototype['createdTime'] = undefined;

/**
 * @member {module:model/DataPath} dataPath
 */
Artifact.prototype['dataPath'] = undefined;

/**
 * The Etag of the Artifact.
 * @member {String} etag
 */
Artifact.prototype['etag'] = undefined;

/**
 * The origin of the Artifact creation request. Available origins are 'ExperimentRun', 'LocalUpload', 'WebUpload', 'Dataset' and 'Unknown'.
 * @member {String} origin
 */
Artifact.prototype['origin'] = undefined;

/**
 * The path to the Artifact in a container.
 * @member {String} path
 */
Artifact.prototype['path'] = undefined;






export default Artifact;

