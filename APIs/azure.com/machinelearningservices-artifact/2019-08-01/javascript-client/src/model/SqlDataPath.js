/**
 * Artifact
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import StoredProcedureParameter from './StoredProcedureParameter';

/**
 * The SqlDataPath model module.
 * @module model/SqlDataPath
 * @version 2019-08-01
 */
class SqlDataPath {
    /**
     * Constructs a new <code>SqlDataPath</code>.
     * @alias module:model/SqlDataPath
     */
    constructor() { 
        
        SqlDataPath.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SqlDataPath</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SqlDataPath} obj Optional instance to populate.
     * @return {module:model/SqlDataPath} The populated <code>SqlDataPath</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SqlDataPath();

            if (data.hasOwnProperty('sqlQuery')) {
                obj['sqlQuery'] = ApiClient.convertToType(data['sqlQuery'], 'String');
            }
            if (data.hasOwnProperty('sqlStoredProcedureName')) {
                obj['sqlStoredProcedureName'] = ApiClient.convertToType(data['sqlStoredProcedureName'], 'String');
            }
            if (data.hasOwnProperty('sqlStoredProcedureParams')) {
                obj['sqlStoredProcedureParams'] = ApiClient.convertToType(data['sqlStoredProcedureParams'], [StoredProcedureParameter]);
            }
            if (data.hasOwnProperty('sqlTableName')) {
                obj['sqlTableName'] = ApiClient.convertToType(data['sqlTableName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SqlDataPath</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SqlDataPath</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['sqlQuery'] && !(typeof data['sqlQuery'] === 'string' || data['sqlQuery'] instanceof String)) {
            throw new Error("Expected the field `sqlQuery` to be a primitive type in the JSON string but got " + data['sqlQuery']);
        }
        // ensure the json data is a string
        if (data['sqlStoredProcedureName'] && !(typeof data['sqlStoredProcedureName'] === 'string' || data['sqlStoredProcedureName'] instanceof String)) {
            throw new Error("Expected the field `sqlStoredProcedureName` to be a primitive type in the JSON string but got " + data['sqlStoredProcedureName']);
        }
        if (data['sqlStoredProcedureParams']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['sqlStoredProcedureParams'])) {
                throw new Error("Expected the field `sqlStoredProcedureParams` to be an array in the JSON data but got " + data['sqlStoredProcedureParams']);
            }
            // validate the optional field `sqlStoredProcedureParams` (array)
            for (const item of data['sqlStoredProcedureParams']) {
                StoredProcedureParameter.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['sqlTableName'] && !(typeof data['sqlTableName'] === 'string' || data['sqlTableName'] instanceof String)) {
            throw new Error("Expected the field `sqlTableName` to be a primitive type in the JSON string but got " + data['sqlTableName']);
        }

        return true;
    }


}



/**
 * @member {String} sqlQuery
 */
SqlDataPath.prototype['sqlQuery'] = undefined;

/**
 * @member {String} sqlStoredProcedureName
 */
SqlDataPath.prototype['sqlStoredProcedureName'] = undefined;

/**
 * @member {Array.<module:model/StoredProcedureParameter>} sqlStoredProcedureParams
 */
SqlDataPath.prototype['sqlStoredProcedureParams'] = undefined;

/**
 * @member {String} sqlTableName
 */
SqlDataPath.prototype['sqlTableName'] = undefined;






export default SqlDataPath;

