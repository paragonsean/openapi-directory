/**
 * Artifact
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Artifact);
  }
}(this, function(expect, Artifact) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Artifact.ArtifactApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ArtifactApi', function() {
    describe('artifactsBatchCreateEmptyArtifacts', function() {
      it('should call artifactsBatchCreateEmptyArtifacts successfully', function(done) {
        //uncomment below and update the code to test artifactsBatchCreateEmptyArtifacts
        //instance.artifactsBatchCreateEmptyArtifacts(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('artifactsBatchGetById', function() {
      it('should call artifactsBatchGetById successfully', function(done) {
        //uncomment below and update the code to test artifactsBatchGetById
        //instance.artifactsBatchGetById(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('artifactsBatchGetStorageById', function() {
      it('should call artifactsBatchGetStorageById successfully', function(done) {
        //uncomment below and update the code to test artifactsBatchGetStorageById
        //instance.artifactsBatchGetStorageById(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('artifactsBatchIngestFromSas', function() {
      it('should call artifactsBatchIngestFromSas successfully', function(done) {
        //uncomment below and update the code to test artifactsBatchIngestFromSas
        //instance.artifactsBatchIngestFromSas(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('artifactsCreate', function() {
      it('should call artifactsCreate successfully', function(done) {
        //uncomment below and update the code to test artifactsCreate
        //instance.artifactsCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('artifactsDeleteBatchMetaData', function() {
      it('should call artifactsDeleteBatchMetaData successfully', function(done) {
        //uncomment below and update the code to test artifactsDeleteBatchMetaData
        //instance.artifactsDeleteBatchMetaData(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('artifactsDeleteMetaData', function() {
      it('should call artifactsDeleteMetaData successfully', function(done) {
        //uncomment below and update the code to test artifactsDeleteMetaData
        //instance.artifactsDeleteMetaData(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('artifactsDeleteMetaDataInContainer', function() {
      it('should call artifactsDeleteMetaDataInContainer successfully', function(done) {
        //uncomment below and update the code to test artifactsDeleteMetaDataInContainer
        //instance.artifactsDeleteMetaDataInContainer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('artifactsDownload', function() {
      it('should call artifactsDownload successfully', function(done) {
        //uncomment below and update the code to test artifactsDownload
        //instance.artifactsDownload(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('artifactsGet', function() {
      it('should call artifactsGet successfully', function(done) {
        //uncomment below and update the code to test artifactsGet
        //instance.artifactsGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('artifactsGetContentInformation', function() {
      it('should call artifactsGetContentInformation successfully', function(done) {
        //uncomment below and update the code to test artifactsGetContentInformation
        //instance.artifactsGetContentInformation(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('artifactsGetSas', function() {
      it('should call artifactsGetSas successfully', function(done) {
        //uncomment below and update the code to test artifactsGetSas
        //instance.artifactsGetSas(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('artifactsGetStorageContentInformation', function() {
      it('should call artifactsGetStorageContentInformation successfully', function(done) {
        //uncomment below and update the code to test artifactsGetStorageContentInformation
        //instance.artifactsGetStorageContentInformation(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('artifactsListInContainer', function() {
      it('should call artifactsListInContainer successfully', function(done) {
        //uncomment below and update the code to test artifactsListInContainer
        //instance.artifactsListInContainer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('artifactsListSasByPrefix', function() {
      it('should call artifactsListSasByPrefix successfully', function(done) {
        //uncomment below and update the code to test artifactsListSasByPrefix
        //instance.artifactsListSasByPrefix(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('artifactsListStorageUriByPrefix', function() {
      it('should call artifactsListStorageUriByPrefix successfully', function(done) {
        //uncomment below and update the code to test artifactsListStorageUriByPrefix
        //instance.artifactsListStorageUriByPrefix(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('artifactsRegister', function() {
      it('should call artifactsRegister successfully', function(done) {
        //uncomment below and update the code to test artifactsRegister
        //instance.artifactsRegister(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('artifactsUpload', function() {
      it('should call artifactsUpload successfully', function(done) {
        //uncomment below and update the code to test artifactsUpload
        //instance.artifactsUpload(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
