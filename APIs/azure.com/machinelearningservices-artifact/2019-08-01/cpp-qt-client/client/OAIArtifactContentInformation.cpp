/**
 * Artifact
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-08-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIArtifactContentInformation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIArtifactContentInformation::OAIArtifactContentInformation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIArtifactContentInformation::OAIArtifactContentInformation() {
    this->initializeModel();
}

OAIArtifactContentInformation::~OAIArtifactContentInformation() {}

void OAIArtifactContentInformation::initializeModel() {

    m_container_isSet = false;
    m_container_isValid = false;

    m_content_uri_isSet = false;
    m_content_uri_isValid = false;

    m_origin_isSet = false;
    m_origin_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;
}

void OAIArtifactContentInformation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIArtifactContentInformation::fromJsonObject(QJsonObject json) {

    m_container_isValid = ::OpenAPI::fromJsonValue(m_container, json[QString("container")]);
    m_container_isSet = !json[QString("container")].isNull() && m_container_isValid;

    m_content_uri_isValid = ::OpenAPI::fromJsonValue(m_content_uri, json[QString("contentUri")]);
    m_content_uri_isSet = !json[QString("contentUri")].isNull() && m_content_uri_isValid;

    m_origin_isValid = ::OpenAPI::fromJsonValue(m_origin, json[QString("origin")]);
    m_origin_isSet = !json[QString("origin")].isNull() && m_origin_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;
}

QString OAIArtifactContentInformation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIArtifactContentInformation::asJsonObject() const {
    QJsonObject obj;
    if (m_container_isSet) {
        obj.insert(QString("container"), ::OpenAPI::toJsonValue(m_container));
    }
    if (m_content_uri_isSet) {
        obj.insert(QString("contentUri"), ::OpenAPI::toJsonValue(m_content_uri));
    }
    if (m_origin_isSet) {
        obj.insert(QString("origin"), ::OpenAPI::toJsonValue(m_origin));
    }
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    return obj;
}

QString OAIArtifactContentInformation::getContainer() const {
    return m_container;
}
void OAIArtifactContentInformation::setContainer(const QString &container) {
    m_container = container;
    m_container_isSet = true;
}

bool OAIArtifactContentInformation::is_container_Set() const{
    return m_container_isSet;
}

bool OAIArtifactContentInformation::is_container_Valid() const{
    return m_container_isValid;
}

QString OAIArtifactContentInformation::getContentUri() const {
    return m_content_uri;
}
void OAIArtifactContentInformation::setContentUri(const QString &content_uri) {
    m_content_uri = content_uri;
    m_content_uri_isSet = true;
}

bool OAIArtifactContentInformation::is_content_uri_Set() const{
    return m_content_uri_isSet;
}

bool OAIArtifactContentInformation::is_content_uri_Valid() const{
    return m_content_uri_isValid;
}

QString OAIArtifactContentInformation::getOrigin() const {
    return m_origin;
}
void OAIArtifactContentInformation::setOrigin(const QString &origin) {
    m_origin = origin;
    m_origin_isSet = true;
}

bool OAIArtifactContentInformation::is_origin_Set() const{
    return m_origin_isSet;
}

bool OAIArtifactContentInformation::is_origin_Valid() const{
    return m_origin_isValid;
}

QString OAIArtifactContentInformation::getPath() const {
    return m_path;
}
void OAIArtifactContentInformation::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIArtifactContentInformation::is_path_Set() const{
    return m_path_isSet;
}

bool OAIArtifactContentInformation::is_path_Valid() const{
    return m_path_isValid;
}

bool OAIArtifactContentInformation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_container_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_origin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIArtifactContentInformation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
