/**
 * Artifact
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-08-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIArtifactContainerSas.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIArtifactContainerSas::OAIArtifactContainerSas(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIArtifactContainerSas::OAIArtifactContainerSas() {
    this->initializeModel();
}

OAIArtifactContainerSas::~OAIArtifactContainerSas() {}

void OAIArtifactContainerSas::initializeModel() {

    m_artifact_prefix_isSet = false;
    m_artifact_prefix_isValid = false;

    m_container_sas_isSet = false;
    m_container_sas_isValid = false;

    m_container_uri_isSet = false;
    m_container_uri_isValid = false;

    m_prefix_isSet = false;
    m_prefix_isValid = false;
}

void OAIArtifactContainerSas::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIArtifactContainerSas::fromJsonObject(QJsonObject json) {

    m_artifact_prefix_isValid = ::OpenAPI::fromJsonValue(m_artifact_prefix, json[QString("artifactPrefix")]);
    m_artifact_prefix_isSet = !json[QString("artifactPrefix")].isNull() && m_artifact_prefix_isValid;

    m_container_sas_isValid = ::OpenAPI::fromJsonValue(m_container_sas, json[QString("containerSas")]);
    m_container_sas_isSet = !json[QString("containerSas")].isNull() && m_container_sas_isValid;

    m_container_uri_isValid = ::OpenAPI::fromJsonValue(m_container_uri, json[QString("containerUri")]);
    m_container_uri_isSet = !json[QString("containerUri")].isNull() && m_container_uri_isValid;

    m_prefix_isValid = ::OpenAPI::fromJsonValue(m_prefix, json[QString("prefix")]);
    m_prefix_isSet = !json[QString("prefix")].isNull() && m_prefix_isValid;
}

QString OAIArtifactContainerSas::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIArtifactContainerSas::asJsonObject() const {
    QJsonObject obj;
    if (m_artifact_prefix_isSet) {
        obj.insert(QString("artifactPrefix"), ::OpenAPI::toJsonValue(m_artifact_prefix));
    }
    if (m_container_sas_isSet) {
        obj.insert(QString("containerSas"), ::OpenAPI::toJsonValue(m_container_sas));
    }
    if (m_container_uri_isSet) {
        obj.insert(QString("containerUri"), ::OpenAPI::toJsonValue(m_container_uri));
    }
    if (m_prefix_isSet) {
        obj.insert(QString("prefix"), ::OpenAPI::toJsonValue(m_prefix));
    }
    return obj;
}

QString OAIArtifactContainerSas::getArtifactPrefix() const {
    return m_artifact_prefix;
}
void OAIArtifactContainerSas::setArtifactPrefix(const QString &artifact_prefix) {
    m_artifact_prefix = artifact_prefix;
    m_artifact_prefix_isSet = true;
}

bool OAIArtifactContainerSas::is_artifact_prefix_Set() const{
    return m_artifact_prefix_isSet;
}

bool OAIArtifactContainerSas::is_artifact_prefix_Valid() const{
    return m_artifact_prefix_isValid;
}

QString OAIArtifactContainerSas::getContainerSas() const {
    return m_container_sas;
}
void OAIArtifactContainerSas::setContainerSas(const QString &container_sas) {
    m_container_sas = container_sas;
    m_container_sas_isSet = true;
}

bool OAIArtifactContainerSas::is_container_sas_Set() const{
    return m_container_sas_isSet;
}

bool OAIArtifactContainerSas::is_container_sas_Valid() const{
    return m_container_sas_isValid;
}

QString OAIArtifactContainerSas::getContainerUri() const {
    return m_container_uri;
}
void OAIArtifactContainerSas::setContainerUri(const QString &container_uri) {
    m_container_uri = container_uri;
    m_container_uri_isSet = true;
}

bool OAIArtifactContainerSas::is_container_uri_Set() const{
    return m_container_uri_isSet;
}

bool OAIArtifactContainerSas::is_container_uri_Valid() const{
    return m_container_uri_isValid;
}

QString OAIArtifactContainerSas::getPrefix() const {
    return m_prefix;
}
void OAIArtifactContainerSas::setPrefix(const QString &prefix) {
    m_prefix = prefix;
    m_prefix_isSet = true;
}

bool OAIArtifactContainerSas::is_prefix_Set() const{
    return m_prefix_isSet;
}

bool OAIArtifactContainerSas::is_prefix_Valid() const{
    return m_prefix_isValid;
}

bool OAIArtifactContainerSas::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_artifact_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_container_sas_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_container_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIArtifactContainerSas::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_container_sas_isValid && m_container_uri_isValid && true;
}

} // namespace OpenAPI
