/**
 * Artifact
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-08-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataPath.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataPath::OAIDataPath(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataPath::OAIDataPath() {
    this->initializeModel();
}

OAIDataPath::~OAIDataPath() {}

void OAIDataPath::initializeModel() {

    m_data_store_name_isSet = false;
    m_data_store_name_isValid = false;

    m_relative_path_isSet = false;
    m_relative_path_isValid = false;

    m_sql_data_path_isSet = false;
    m_sql_data_path_isValid = false;
}

void OAIDataPath::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDataPath::fromJsonObject(QJsonObject json) {

    m_data_store_name_isValid = ::OpenAPI::fromJsonValue(m_data_store_name, json[QString("dataStoreName")]);
    m_data_store_name_isSet = !json[QString("dataStoreName")].isNull() && m_data_store_name_isValid;

    m_relative_path_isValid = ::OpenAPI::fromJsonValue(m_relative_path, json[QString("relativePath")]);
    m_relative_path_isSet = !json[QString("relativePath")].isNull() && m_relative_path_isValid;

    m_sql_data_path_isValid = ::OpenAPI::fromJsonValue(m_sql_data_path, json[QString("sqlDataPath")]);
    m_sql_data_path_isSet = !json[QString("sqlDataPath")].isNull() && m_sql_data_path_isValid;
}

QString OAIDataPath::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDataPath::asJsonObject() const {
    QJsonObject obj;
    if (m_data_store_name_isSet) {
        obj.insert(QString("dataStoreName"), ::OpenAPI::toJsonValue(m_data_store_name));
    }
    if (m_relative_path_isSet) {
        obj.insert(QString("relativePath"), ::OpenAPI::toJsonValue(m_relative_path));
    }
    if (m_sql_data_path.isSet()) {
        obj.insert(QString("sqlDataPath"), ::OpenAPI::toJsonValue(m_sql_data_path));
    }
    return obj;
}

QString OAIDataPath::getDataStoreName() const {
    return m_data_store_name;
}
void OAIDataPath::setDataStoreName(const QString &data_store_name) {
    m_data_store_name = data_store_name;
    m_data_store_name_isSet = true;
}

bool OAIDataPath::is_data_store_name_Set() const{
    return m_data_store_name_isSet;
}

bool OAIDataPath::is_data_store_name_Valid() const{
    return m_data_store_name_isValid;
}

QString OAIDataPath::getRelativePath() const {
    return m_relative_path;
}
void OAIDataPath::setRelativePath(const QString &relative_path) {
    m_relative_path = relative_path;
    m_relative_path_isSet = true;
}

bool OAIDataPath::is_relative_path_Set() const{
    return m_relative_path_isSet;
}

bool OAIDataPath::is_relative_path_Valid() const{
    return m_relative_path_isValid;
}

OAISqlDataPath OAIDataPath::getSqlDataPath() const {
    return m_sql_data_path;
}
void OAIDataPath::setSqlDataPath(const OAISqlDataPath &sql_data_path) {
    m_sql_data_path = sql_data_path;
    m_sql_data_path_isSet = true;
}

bool OAIDataPath::is_sql_data_path_Set() const{
    return m_sql_data_path_isSet;
}

bool OAIDataPath::is_sql_data_path_Valid() const{
    return m_sql_data_path_isValid;
}

bool OAIDataPath::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_store_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_relative_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sql_data_path.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDataPath::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
