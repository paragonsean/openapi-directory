# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.data_path import DataPath
from openapi_server import util


class Artifact(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, artifact_id: str=None, container: str=None, created_time: datetime=None, data_path: DataPath=None, etag: str=None, origin: str=None, path: str=None):
        """Artifact - a model defined in OpenAPI

        :param artifact_id: The artifact_id of this Artifact.
        :param container: The container of this Artifact.
        :param created_time: The created_time of this Artifact.
        :param data_path: The data_path of this Artifact.
        :param etag: The etag of this Artifact.
        :param origin: The origin of this Artifact.
        :param path: The path of this Artifact.
        """
        self.openapi_types = {
            'artifact_id': str,
            'container': str,
            'created_time': datetime,
            'data_path': DataPath,
            'etag': str,
            'origin': str,
            'path': str
        }

        self.attribute_map = {
            'artifact_id': 'artifactId',
            'container': 'container',
            'created_time': 'createdTime',
            'data_path': 'dataPath',
            'etag': 'etag',
            'origin': 'origin',
            'path': 'path'
        }

        self._artifact_id = artifact_id
        self._container = container
        self._created_time = created_time
        self._data_path = data_path
        self._etag = etag
        self._origin = origin
        self._path = path

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Artifact':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Artifact of this Artifact.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def artifact_id(self):
        """Gets the artifact_id of this Artifact.

        The identifier of an Artifact. Format of ArtifactId - {Origin}/{Container}/{Path}.

        :return: The artifact_id of this Artifact.
        :rtype: str
        """
        return self._artifact_id

    @artifact_id.setter
    def artifact_id(self, artifact_id):
        """Sets the artifact_id of this Artifact.

        The identifier of an Artifact. Format of ArtifactId - {Origin}/{Container}/{Path}.

        :param artifact_id: The artifact_id of this Artifact.
        :type artifact_id: str
        """

        self._artifact_id = artifact_id

    @property
    def container(self):
        """Gets the container of this Artifact.

        The name of container. Artifacts can be grouped by container.

        :return: The container of this Artifact.
        :rtype: str
        """
        return self._container

    @container.setter
    def container(self, container):
        """Sets the container of this Artifact.

        The name of container. Artifacts can be grouped by container.

        :param container: The container of this Artifact.
        :type container: str
        """
        if container is None:
            raise ValueError("Invalid value for `container`, must not be `None`")

        self._container = container

    @property
    def created_time(self):
        """Gets the created_time of this Artifact.

        The Date and Time at which the Artifact is created. The DateTime is in UTC.

        :return: The created_time of this Artifact.
        :rtype: datetime
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """Sets the created_time of this Artifact.

        The Date and Time at which the Artifact is created. The DateTime is in UTC.

        :param created_time: The created_time of this Artifact.
        :type created_time: datetime
        """

        self._created_time = created_time

    @property
    def data_path(self):
        """Gets the data_path of this Artifact.


        :return: The data_path of this Artifact.
        :rtype: DataPath
        """
        return self._data_path

    @data_path.setter
    def data_path(self, data_path):
        """Sets the data_path of this Artifact.


        :param data_path: The data_path of this Artifact.
        :type data_path: DataPath
        """

        self._data_path = data_path

    @property
    def etag(self):
        """Gets the etag of this Artifact.

        The Etag of the Artifact.

        :return: The etag of this Artifact.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this Artifact.

        The Etag of the Artifact.

        :param etag: The etag of this Artifact.
        :type etag: str
        """

        self._etag = etag

    @property
    def origin(self):
        """Gets the origin of this Artifact.

        The origin of the Artifact creation request. Available origins are 'ExperimentRun', 'LocalUpload', 'WebUpload', 'Dataset' and 'Unknown'.

        :return: The origin of this Artifact.
        :rtype: str
        """
        return self._origin

    @origin.setter
    def origin(self, origin):
        """Sets the origin of this Artifact.

        The origin of the Artifact creation request. Available origins are 'ExperimentRun', 'LocalUpload', 'WebUpload', 'Dataset' and 'Unknown'.

        :param origin: The origin of this Artifact.
        :type origin: str
        """
        if origin is None:
            raise ValueError("Invalid value for `origin`, must not be `None`")

        self._origin = origin

    @property
    def path(self):
        """Gets the path of this Artifact.

        The path to the Artifact in a container.

        :return: The path of this Artifact.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this Artifact.

        The path to the Artifact in a container.

        :param path: The path of this Artifact.
        :type path: str
        """
        if path is None:
            raise ValueError("Invalid value for `path`, must not be `None`")

        self._path = path
