# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.sql_data_path import SqlDataPath
from openapi_server import util


class DataPath(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data_store_name: str=None, relative_path: str=None, sql_data_path: SqlDataPath=None):
        """DataPath - a model defined in OpenAPI

        :param data_store_name: The data_store_name of this DataPath.
        :param relative_path: The relative_path of this DataPath.
        :param sql_data_path: The sql_data_path of this DataPath.
        """
        self.openapi_types = {
            'data_store_name': str,
            'relative_path': str,
            'sql_data_path': SqlDataPath
        }

        self.attribute_map = {
            'data_store_name': 'dataStoreName',
            'relative_path': 'relativePath',
            'sql_data_path': 'sqlDataPath'
        }

        self._data_store_name = data_store_name
        self._relative_path = relative_path
        self._sql_data_path = sql_data_path

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DataPath':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DataPath of this DataPath.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_store_name(self):
        """Gets the data_store_name of this DataPath.


        :return: The data_store_name of this DataPath.
        :rtype: str
        """
        return self._data_store_name

    @data_store_name.setter
    def data_store_name(self, data_store_name):
        """Sets the data_store_name of this DataPath.


        :param data_store_name: The data_store_name of this DataPath.
        :type data_store_name: str
        """

        self._data_store_name = data_store_name

    @property
    def relative_path(self):
        """Gets the relative_path of this DataPath.


        :return: The relative_path of this DataPath.
        :rtype: str
        """
        return self._relative_path

    @relative_path.setter
    def relative_path(self, relative_path):
        """Sets the relative_path of this DataPath.


        :param relative_path: The relative_path of this DataPath.
        :type relative_path: str
        """

        self._relative_path = relative_path

    @property
    def sql_data_path(self):
        """Gets the sql_data_path of this DataPath.


        :return: The sql_data_path of this DataPath.
        :rtype: SqlDataPath
        """
        return self._sql_data_path

    @sql_data_path.setter
    def sql_data_path(self, sql_data_path):
        """Sets the sql_data_path of this DataPath.


        :param sql_data_path: The sql_data_path of this DataPath.
        :type sql_data_path: SqlDataPath
        """

        self._sql_data_path = sql_data_path
