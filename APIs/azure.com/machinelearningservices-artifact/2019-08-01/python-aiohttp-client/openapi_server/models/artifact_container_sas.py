# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ArtifactContainerSas(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, artifact_prefix: str=None, container_sas: str=None, container_uri: str=None, prefix: str=None):
        """ArtifactContainerSas - a model defined in OpenAPI

        :param artifact_prefix: The artifact_prefix of this ArtifactContainerSas.
        :param container_sas: The container_sas of this ArtifactContainerSas.
        :param container_uri: The container_uri of this ArtifactContainerSas.
        :param prefix: The prefix of this ArtifactContainerSas.
        """
        self.openapi_types = {
            'artifact_prefix': str,
            'container_sas': str,
            'container_uri': str,
            'prefix': str
        }

        self.attribute_map = {
            'artifact_prefix': 'artifactPrefix',
            'container_sas': 'containerSas',
            'container_uri': 'containerUri',
            'prefix': 'prefix'
        }

        self._artifact_prefix = artifact_prefix
        self._container_sas = container_sas
        self._container_uri = container_uri
        self._prefix = prefix

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ArtifactContainerSas':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ArtifactContainerSas of this ArtifactContainerSas.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def artifact_prefix(self):
        """Gets the artifact_prefix of this ArtifactContainerSas.

        The Prefix to the Artifact in the Blob.

        :return: The artifact_prefix of this ArtifactContainerSas.
        :rtype: str
        """
        return self._artifact_prefix

    @artifact_prefix.setter
    def artifact_prefix(self, artifact_prefix):
        """Sets the artifact_prefix of this ArtifactContainerSas.

        The Prefix to the Artifact in the Blob.

        :param artifact_prefix: The artifact_prefix of this ArtifactContainerSas.
        :type artifact_prefix: str
        """

        self._artifact_prefix = artifact_prefix

    @property
    def container_sas(self):
        """Gets the container_sas of this ArtifactContainerSas.

        The shared access signature of the Container.

        :return: The container_sas of this ArtifactContainerSas.
        :rtype: str
        """
        return self._container_sas

    @container_sas.setter
    def container_sas(self, container_sas):
        """Sets the container_sas of this ArtifactContainerSas.

        The shared access signature of the Container.

        :param container_sas: The container_sas of this ArtifactContainerSas.
        :type container_sas: str
        """
        if container_sas is None:
            raise ValueError("Invalid value for `container_sas`, must not be `None`")

        self._container_sas = container_sas

    @property
    def container_uri(self):
        """Gets the container_uri of this ArtifactContainerSas.

        The URI of the Container.

        :return: The container_uri of this ArtifactContainerSas.
        :rtype: str
        """
        return self._container_uri

    @container_uri.setter
    def container_uri(self, container_uri):
        """Sets the container_uri of this ArtifactContainerSas.

        The URI of the Container.

        :param container_uri: The container_uri of this ArtifactContainerSas.
        :type container_uri: str
        """
        if container_uri is None:
            raise ValueError("Invalid value for `container_uri`, must not be `None`")

        self._container_uri = container_uri

    @property
    def prefix(self):
        """Gets the prefix of this ArtifactContainerSas.

        The Prefix to the Blobs in the Container.

        :return: The prefix of this ArtifactContainerSas.
        :rtype: str
        """
        return self._prefix

    @prefix.setter
    def prefix(self, prefix):
        """Sets the prefix of this ArtifactContainerSas.

        The Prefix to the Blobs in the Container.

        :param prefix: The prefix of this ArtifactContainerSas.
        :type prefix: str
        """

        self._prefix = prefix
