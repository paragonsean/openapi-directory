# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ArtifactContentInformation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, container: str=None, content_uri: str=None, origin: str=None, path: str=None):
        """ArtifactContentInformation - a model defined in OpenAPI

        :param container: The container of this ArtifactContentInformation.
        :param content_uri: The content_uri of this ArtifactContentInformation.
        :param origin: The origin of this ArtifactContentInformation.
        :param path: The path of this ArtifactContentInformation.
        """
        self.openapi_types = {
            'container': str,
            'content_uri': str,
            'origin': str,
            'path': str
        }

        self.attribute_map = {
            'container': 'container',
            'content_uri': 'contentUri',
            'origin': 'origin',
            'path': 'path'
        }

        self._container = container
        self._content_uri = content_uri
        self._origin = origin
        self._path = path

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ArtifactContentInformation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ArtifactContentInformation of this ArtifactContentInformation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def container(self):
        """Gets the container of this ArtifactContentInformation.

        The name of container. Artifacts can be grouped by container.

        :return: The container of this ArtifactContentInformation.
        :rtype: str
        """
        return self._container

    @container.setter
    def container(self, container):
        """Sets the container of this ArtifactContentInformation.

        The name of container. Artifacts can be grouped by container.

        :param container: The container of this ArtifactContentInformation.
        :type container: str
        """

        self._container = container

    @property
    def content_uri(self):
        """Gets the content_uri of this ArtifactContentInformation.

        The URI of the content.

        :return: The content_uri of this ArtifactContentInformation.
        :rtype: str
        """
        return self._content_uri

    @content_uri.setter
    def content_uri(self, content_uri):
        """Sets the content_uri of this ArtifactContentInformation.

        The URI of the content.

        :param content_uri: The content_uri of this ArtifactContentInformation.
        :type content_uri: str
        """

        self._content_uri = content_uri

    @property
    def origin(self):
        """Gets the origin of this ArtifactContentInformation.

        The origin of the Artifact creation request. Available origins are 'ExperimentRun', 'LocalUpload', 'WebUpload', 'Dataset', 'ComputeRecord', 'Metric', and 'Unknown'.

        :return: The origin of this ArtifactContentInformation.
        :rtype: str
        """
        return self._origin

    @origin.setter
    def origin(self, origin):
        """Sets the origin of this ArtifactContentInformation.

        The origin of the Artifact creation request. Available origins are 'ExperimentRun', 'LocalUpload', 'WebUpload', 'Dataset', 'ComputeRecord', 'Metric', and 'Unknown'.

        :param origin: The origin of this ArtifactContentInformation.
        :type origin: str
        """

        self._origin = origin

    @property
    def path(self):
        """Gets the path of this ArtifactContentInformation.

        The path to the Artifact in a container.

        :return: The path of this ArtifactContentInformation.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this ArtifactContentInformation.

        The path to the Artifact in a container.

        :param path: The path of this ArtifactContentInformation.
        :type path: str
        """

        self._path = path
