# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ArtifactIdList(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, artifact_ids: List[str]=None):
        """ArtifactIdList - a model defined in OpenAPI

        :param artifact_ids: The artifact_ids of this ArtifactIdList.
        """
        self.openapi_types = {
            'artifact_ids': List[str]
        }

        self.attribute_map = {
            'artifact_ids': 'artifactIds'
        }

        self._artifact_ids = artifact_ids

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ArtifactIdList':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ArtifactIdList of this ArtifactIdList.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def artifact_ids(self):
        """Gets the artifact_ids of this ArtifactIdList.

        List of Artifacts Ids.

        :return: The artifact_ids of this ArtifactIdList.
        :rtype: List[str]
        """
        return self._artifact_ids

    @artifact_ids.setter
    def artifact_ids(self, artifact_ids):
        """Sets the artifact_ids of this ArtifactIdList.

        List of Artifacts Ids.

        :param artifact_ids: The artifact_ids of this ArtifactIdList.
        :type artifact_ids: List[str]
        """
        if artifact_ids is None:
            raise ValueError("Invalid value for `artifact_ids`, must not be `None`")

        self._artifact_ids = artifact_ids
