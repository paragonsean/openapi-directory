/**
 * Artifact
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-09-30
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Artifact from '../model/Artifact';
import ArtifactContainerSas from '../model/ArtifactContainerSas';
import ArtifactContentInformation from '../model/ArtifactContentInformation';
import ArtifactIdList from '../model/ArtifactIdList';
import ArtifactPathList from '../model/ArtifactPathList';
import BatchArtifactContentInformationResult from '../model/BatchArtifactContentInformationResult';
import ErrorResponse from '../model/ErrorResponse';
import PaginatedArtifactContentInformationList from '../model/PaginatedArtifactContentInformationList';
import PaginatedArtifactList from '../model/PaginatedArtifactList';

/**
* Artifact service.
* @module api/ArtifactApi
* @version 2019-09-30
*/
export default class ArtifactApi {

    /**
    * Constructs a new ArtifactApi. 
    * @alias module:api/ArtifactApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the artifactsBatchCreateEmptyArtifacts operation.
     * @callback module:api/ArtifactApi~artifactsBatchCreateEmptyArtifactsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchArtifactContentInformationResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a batch of empty Artifacts.
     * Create a Batch of empty Artifacts from the supplied paths.
     * @param {String} subscriptionId The Azure Subscription ID.
     * @param {String} resourceGroupName The Name of the resource group in which the workspace is located.
     * @param {String} workspaceName The name of the workspace.
     * @param {String} origin The origin of the Artifact.
     * @param {String} container The container name.
     * @param {module:model/ArtifactPathList} artifactPaths The list of Artifact paths to create.
     * @param {module:api/ArtifactApi~artifactsBatchCreateEmptyArtifactsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchArtifactContentInformationResult}
     */
    artifactsBatchCreateEmptyArtifacts(subscriptionId, resourceGroupName, workspaceName, origin, container, artifactPaths, callback) {
      let postBody = artifactPaths;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling artifactsBatchCreateEmptyArtifacts");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling artifactsBatchCreateEmptyArtifacts");
      }
      // verify the required parameter 'workspaceName' is set
      if (workspaceName === undefined || workspaceName === null) {
        throw new Error("Missing the required parameter 'workspaceName' when calling artifactsBatchCreateEmptyArtifacts");
      }
      // verify the required parameter 'origin' is set
      if (origin === undefined || origin === null) {
        throw new Error("Missing the required parameter 'origin' when calling artifactsBatchCreateEmptyArtifacts");
      }
      // verify the required parameter 'container' is set
      if (container === undefined || container === null) {
        throw new Error("Missing the required parameter 'container' when calling artifactsBatchCreateEmptyArtifacts");
      }
      // verify the required parameter 'artifactPaths' is set
      if (artifactPaths === undefined || artifactPaths === null) {
        throw new Error("Missing the required parameter 'artifactPaths' when calling artifactsBatchCreateEmptyArtifacts");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'workspaceName': workspaceName,
        'origin': origin,
        'container': container
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BatchArtifactContentInformationResult;
      return this.apiClient.callApi(
        '/artifact/v2.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/artifacts/{origin}/{container}/batch/metadata', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the artifactsBatchGetById operation.
     * @callback module:api/ArtifactApi~artifactsBatchGetByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchArtifactContentInformationResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Batch Artifacts by Ids.
     * Get Batch Artifacts by the specific Ids.
     * @param {String} subscriptionId The Azure Subscription ID.
     * @param {String} resourceGroupName The Name of the resource group in which the workspace is located.
     * @param {String} workspaceName The name of the workspace.
     * @param {module:model/ArtifactIdList} artifactIds The command for Batch Artifact get request.
     * @param {module:api/ArtifactApi~artifactsBatchGetByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchArtifactContentInformationResult}
     */
    artifactsBatchGetById(subscriptionId, resourceGroupName, workspaceName, artifactIds, callback) {
      let postBody = artifactIds;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling artifactsBatchGetById");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling artifactsBatchGetById");
      }
      // verify the required parameter 'workspaceName' is set
      if (workspaceName === undefined || workspaceName === null) {
        throw new Error("Missing the required parameter 'workspaceName' when calling artifactsBatchGetById");
      }
      // verify the required parameter 'artifactIds' is set
      if (artifactIds === undefined || artifactIds === null) {
        throw new Error("Missing the required parameter 'artifactIds' when calling artifactsBatchGetById");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'workspaceName': workspaceName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BatchArtifactContentInformationResult;
      return this.apiClient.callApi(
        '/artifact/v2.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/artifacts/batch/metadata', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the artifactsBatchGetStorageById operation.
     * @callback module:api/ArtifactApi~artifactsBatchGetStorageByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchArtifactContentInformationResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Batch Artifacts storage by Ids.
     * Get Batch Artifacts storage by specific Ids.
     * @param {String} subscriptionId The Azure Subscription ID.
     * @param {String} resourceGroupName The Name of the resource group in which the workspace is located.
     * @param {String} workspaceName The name of the workspace.
     * @param {module:model/ArtifactIdList} artifactIds The list of artifactIds to get.
     * @param {module:api/ArtifactApi~artifactsBatchGetStorageByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchArtifactContentInformationResult}
     */
    artifactsBatchGetStorageById(subscriptionId, resourceGroupName, workspaceName, artifactIds, callback) {
      let postBody = artifactIds;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling artifactsBatchGetStorageById");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling artifactsBatchGetStorageById");
      }
      // verify the required parameter 'workspaceName' is set
      if (workspaceName === undefined || workspaceName === null) {
        throw new Error("Missing the required parameter 'workspaceName' when calling artifactsBatchGetStorageById");
      }
      // verify the required parameter 'artifactIds' is set
      if (artifactIds === undefined || artifactIds === null) {
        throw new Error("Missing the required parameter 'artifactIds' when calling artifactsBatchGetStorageById");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'workspaceName': workspaceName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BatchArtifactContentInformationResult;
      return this.apiClient.callApi(
        '/artifact/v2.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/artifacts/storageuri/batch/metadata', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the artifactsBatchIngestFromSas operation.
     * @callback module:api/ArtifactApi~artifactsBatchIngestFromSasCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedArtifactList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Batch ingest using shared access signature.
     * Ingest Batch Artifacts using shared access signature.
     * @param {String} subscriptionId The Azure Subscription ID.
     * @param {String} resourceGroupName The Name of the resource group in which the workspace is located.
     * @param {String} workspaceName The name of the workspace.
     * @param {String} origin The origin of the Artifact.
     * @param {String} container The container name.
     * @param {module:model/ArtifactContainerSas} artifactContainerSas The artifact container shared access signature to use for batch ingest.
     * @param {module:api/ArtifactApi~artifactsBatchIngestFromSasCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedArtifactList}
     */
    artifactsBatchIngestFromSas(subscriptionId, resourceGroupName, workspaceName, origin, container, artifactContainerSas, callback) {
      let postBody = artifactContainerSas;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling artifactsBatchIngestFromSas");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling artifactsBatchIngestFromSas");
      }
      // verify the required parameter 'workspaceName' is set
      if (workspaceName === undefined || workspaceName === null) {
        throw new Error("Missing the required parameter 'workspaceName' when calling artifactsBatchIngestFromSas");
      }
      // verify the required parameter 'origin' is set
      if (origin === undefined || origin === null) {
        throw new Error("Missing the required parameter 'origin' when calling artifactsBatchIngestFromSas");
      }
      // verify the required parameter 'container' is set
      if (container === undefined || container === null) {
        throw new Error("Missing the required parameter 'container' when calling artifactsBatchIngestFromSas");
      }
      // verify the required parameter 'artifactContainerSas' is set
      if (artifactContainerSas === undefined || artifactContainerSas === null) {
        throw new Error("Missing the required parameter 'artifactContainerSas' when calling artifactsBatchIngestFromSas");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'workspaceName': workspaceName,
        'origin': origin,
        'container': container
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PaginatedArtifactList;
      return this.apiClient.callApi(
        '/artifact/v2.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/artifacts/{origin}/{container}/batch/ingest/containersas', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the artifactsCreate operation.
     * @callback module:api/ArtifactApi~artifactsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Artifact} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Artifact.
     * Create an Artifact.
     * @param {String} subscriptionId The Azure Subscription ID.
     * @param {String} resourceGroupName The Name of the resource group in which the workspace is located.
     * @param {String} workspaceName The name of the workspace.
     * @param {module:model/Artifact} artifact The Artifact details.
     * @param {module:api/ArtifactApi~artifactsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Artifact}
     */
    artifactsCreate(subscriptionId, resourceGroupName, workspaceName, artifact, callback) {
      let postBody = artifact;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling artifactsCreate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling artifactsCreate");
      }
      // verify the required parameter 'workspaceName' is set
      if (workspaceName === undefined || workspaceName === null) {
        throw new Error("Missing the required parameter 'workspaceName' when calling artifactsCreate");
      }
      // verify the required parameter 'artifact' is set
      if (artifact === undefined || artifact === null) {
        throw new Error("Missing the required parameter 'artifact' when calling artifactsCreate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'workspaceName': workspaceName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Artifact;
      return this.apiClient.callApi(
        '/artifact/v2.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/artifacts/metadata', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the artifactsDeleteBatchMetaData operation.
     * @callback module:api/ArtifactApi~artifactsDeleteBatchMetaDataCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Batch of Artifact Metadata.
     * Delete a Batch of Artifact Metadata.
     * @param {String} subscriptionId The Azure Subscription ID.
     * @param {String} resourceGroupName The Name of the resource group in which the workspace is located.
     * @param {String} workspaceName The name of the workspace.
     * @param {String} origin The origin of the Artifact.
     * @param {String} container The container name.
     * @param {module:model/ArtifactPathList} artifactPaths The list of Artifact paths to delete.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [hardDelete = false)] If set to true, the delete cannot be reverted at a later time.
     * @param {module:api/ArtifactApi~artifactsDeleteBatchMetaDataCallback} callback The callback function, accepting three arguments: error, data, response
     */
    artifactsDeleteBatchMetaData(subscriptionId, resourceGroupName, workspaceName, origin, container, artifactPaths, opts, callback) {
      opts = opts || {};
      let postBody = artifactPaths;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling artifactsDeleteBatchMetaData");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling artifactsDeleteBatchMetaData");
      }
      // verify the required parameter 'workspaceName' is set
      if (workspaceName === undefined || workspaceName === null) {
        throw new Error("Missing the required parameter 'workspaceName' when calling artifactsDeleteBatchMetaData");
      }
      // verify the required parameter 'origin' is set
      if (origin === undefined || origin === null) {
        throw new Error("Missing the required parameter 'origin' when calling artifactsDeleteBatchMetaData");
      }
      // verify the required parameter 'container' is set
      if (container === undefined || container === null) {
        throw new Error("Missing the required parameter 'container' when calling artifactsDeleteBatchMetaData");
      }
      // verify the required parameter 'artifactPaths' is set
      if (artifactPaths === undefined || artifactPaths === null) {
        throw new Error("Missing the required parameter 'artifactPaths' when calling artifactsDeleteBatchMetaData");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'workspaceName': workspaceName,
        'origin': origin,
        'container': container
      };
      let queryParams = {
        'hardDelete': opts['hardDelete']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/artifact/v2.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/artifacts/{origin}/{container}/batch/metadata:delete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the artifactsDeleteMetaData operation.
     * @callback module:api/ArtifactApi~artifactsDeleteMetaDataCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Artifact Metadata.
     * Delete an Artifact Metadata.
     * @param {String} subscriptionId The Azure Subscription ID.
     * @param {String} resourceGroupName The Name of the resource group in which the workspace is located.
     * @param {String} workspaceName The name of the workspace.
     * @param {String} origin The origin of the Artifact.
     * @param {String} container The container name.
     * @param {Object} opts Optional parameters
     * @param {String} [path] The Artifact Path.
     * @param {Boolean} [hardDelete = false)] If set to true. The delete cannot be revert at later time.
     * @param {module:api/ArtifactApi~artifactsDeleteMetaDataCallback} callback The callback function, accepting three arguments: error, data, response
     */
    artifactsDeleteMetaData(subscriptionId, resourceGroupName, workspaceName, origin, container, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling artifactsDeleteMetaData");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling artifactsDeleteMetaData");
      }
      // verify the required parameter 'workspaceName' is set
      if (workspaceName === undefined || workspaceName === null) {
        throw new Error("Missing the required parameter 'workspaceName' when calling artifactsDeleteMetaData");
      }
      // verify the required parameter 'origin' is set
      if (origin === undefined || origin === null) {
        throw new Error("Missing the required parameter 'origin' when calling artifactsDeleteMetaData");
      }
      // verify the required parameter 'container' is set
      if (container === undefined || container === null) {
        throw new Error("Missing the required parameter 'container' when calling artifactsDeleteMetaData");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'workspaceName': workspaceName,
        'origin': origin,
        'container': container
      };
      let queryParams = {
        'path': opts['path'],
        'hardDelete': opts['hardDelete']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/artifact/v2.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/artifacts/{origin}/{container}/metadata', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the artifactsDeleteMetaDataInContainer operation.
     * @callback module:api/ArtifactApi~artifactsDeleteMetaDataInContainerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Artifact Metadata.
     * Delete Artifact Metadata in a specific container.
     * @param {String} subscriptionId The Azure Subscription ID.
     * @param {String} resourceGroupName The Name of the resource group in which the workspace is located.
     * @param {String} workspaceName The name of the workspace.
     * @param {String} origin The origin of the Artifact.
     * @param {String} container The container name.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [hardDelete = false)] If set to true. The delete cannot be revert at later time.
     * @param {module:api/ArtifactApi~artifactsDeleteMetaDataInContainerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    artifactsDeleteMetaDataInContainer(subscriptionId, resourceGroupName, workspaceName, origin, container, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling artifactsDeleteMetaDataInContainer");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling artifactsDeleteMetaDataInContainer");
      }
      // verify the required parameter 'workspaceName' is set
      if (workspaceName === undefined || workspaceName === null) {
        throw new Error("Missing the required parameter 'workspaceName' when calling artifactsDeleteMetaDataInContainer");
      }
      // verify the required parameter 'origin' is set
      if (origin === undefined || origin === null) {
        throw new Error("Missing the required parameter 'origin' when calling artifactsDeleteMetaDataInContainer");
      }
      // verify the required parameter 'container' is set
      if (container === undefined || container === null) {
        throw new Error("Missing the required parameter 'container' when calling artifactsDeleteMetaDataInContainer");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'workspaceName': workspaceName,
        'origin': origin,
        'container': container
      };
      let queryParams = {
        'hardDelete': opts['hardDelete']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/artifact/v2.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/artifacts/{origin}/{container}/batch', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the artifactsDownload operation.
     * @callback module:api/ArtifactApi~artifactsDownloadCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Artifact content by Id.
     * Get Artifact content of a specific Id.
     * @param {String} subscriptionId The Azure Subscription ID.
     * @param {String} resourceGroupName The Name of the resource group in which the workspace is located.
     * @param {String} workspaceName The name of the workspace.
     * @param {String} origin The origin of the Artifact.
     * @param {String} container The container name.
     * @param {Object} opts Optional parameters
     * @param {String} [path] The Artifact Path.
     * @param {module:api/ArtifactApi~artifactsDownloadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    artifactsDownload(subscriptionId, resourceGroupName, workspaceName, origin, container, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling artifactsDownload");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling artifactsDownload");
      }
      // verify the required parameter 'workspaceName' is set
      if (workspaceName === undefined || workspaceName === null) {
        throw new Error("Missing the required parameter 'workspaceName' when calling artifactsDownload");
      }
      // verify the required parameter 'origin' is set
      if (origin === undefined || origin === null) {
        throw new Error("Missing the required parameter 'origin' when calling artifactsDownload");
      }
      // verify the required parameter 'container' is set
      if (container === undefined || container === null) {
        throw new Error("Missing the required parameter 'container' when calling artifactsDownload");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'workspaceName': workspaceName,
        'origin': origin,
        'container': container
      };
      let queryParams = {
        'path': opts['path']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/octet-stream'];
      let returnType = File;
      return this.apiClient.callApi(
        '/artifact/v2.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/artifacts/{origin}/{container}/content', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the artifactsGet operation.
     * @callback module:api/ArtifactApi~artifactsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Artifact} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Artifact metadata by Id.
     * Get Artifact metadata for a specific Id.
     * @param {String} subscriptionId The Azure Subscription ID.
     * @param {String} resourceGroupName The Name of the resource group in which the workspace is located.
     * @param {String} workspaceName The name of the workspace.
     * @param {String} origin The origin of the Artifact.
     * @param {String} container The container name.
     * @param {String} path The Artifact Path.
     * @param {module:api/ArtifactApi~artifactsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Artifact}
     */
    artifactsGet(subscriptionId, resourceGroupName, workspaceName, origin, container, path, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling artifactsGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling artifactsGet");
      }
      // verify the required parameter 'workspaceName' is set
      if (workspaceName === undefined || workspaceName === null) {
        throw new Error("Missing the required parameter 'workspaceName' when calling artifactsGet");
      }
      // verify the required parameter 'origin' is set
      if (origin === undefined || origin === null) {
        throw new Error("Missing the required parameter 'origin' when calling artifactsGet");
      }
      // verify the required parameter 'container' is set
      if (container === undefined || container === null) {
        throw new Error("Missing the required parameter 'container' when calling artifactsGet");
      }
      // verify the required parameter 'path' is set
      if (path === undefined || path === null) {
        throw new Error("Missing the required parameter 'path' when calling artifactsGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'workspaceName': workspaceName,
        'origin': origin,
        'container': container
      };
      let queryParams = {
        'path': path
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Artifact;
      return this.apiClient.callApi(
        '/artifact/v2.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/artifacts/{origin}/{container}/metadata', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the artifactsGetContentInformation operation.
     * @callback module:api/ArtifactApi~artifactsGetContentInformationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ArtifactContentInformation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Artifact content information.
     * Get content information of an Artifact.
     * @param {String} subscriptionId The Azure Subscription ID.
     * @param {String} resourceGroupName The Name of the resource group in which the workspace is located.
     * @param {String} workspaceName The name of the workspace.
     * @param {String} origin The origin of the Artifact.
     * @param {String} container The container name.
     * @param {Object} opts Optional parameters
     * @param {String} [path] The Artifact Path.
     * @param {module:api/ArtifactApi~artifactsGetContentInformationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ArtifactContentInformation}
     */
    artifactsGetContentInformation(subscriptionId, resourceGroupName, workspaceName, origin, container, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling artifactsGetContentInformation");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling artifactsGetContentInformation");
      }
      // verify the required parameter 'workspaceName' is set
      if (workspaceName === undefined || workspaceName === null) {
        throw new Error("Missing the required parameter 'workspaceName' when calling artifactsGetContentInformation");
      }
      // verify the required parameter 'origin' is set
      if (origin === undefined || origin === null) {
        throw new Error("Missing the required parameter 'origin' when calling artifactsGetContentInformation");
      }
      // verify the required parameter 'container' is set
      if (container === undefined || container === null) {
        throw new Error("Missing the required parameter 'container' when calling artifactsGetContentInformation");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'workspaceName': workspaceName,
        'origin': origin,
        'container': container
      };
      let queryParams = {
        'path': opts['path']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ArtifactContentInformation;
      return this.apiClient.callApi(
        '/artifact/v2.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/artifacts/{origin}/{container}/contentinfo', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the artifactsGetSas operation.
     * @callback module:api/ArtifactApi~artifactsGetSasCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ArtifactContentInformation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get writable shared access signature for Artifact.
     * Get writable shared access signature for a specific Artifact.
     * @param {String} subscriptionId The Azure Subscription ID.
     * @param {String} resourceGroupName The Name of the resource group in which the workspace is located.
     * @param {String} workspaceName The name of the workspace.
     * @param {String} origin The origin of the Artifact.
     * @param {String} container The container name.
     * @param {Object} opts Optional parameters
     * @param {String} [path] The Artifact Path.
     * @param {module:api/ArtifactApi~artifactsGetSasCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ArtifactContentInformation}
     */
    artifactsGetSas(subscriptionId, resourceGroupName, workspaceName, origin, container, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling artifactsGetSas");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling artifactsGetSas");
      }
      // verify the required parameter 'workspaceName' is set
      if (workspaceName === undefined || workspaceName === null) {
        throw new Error("Missing the required parameter 'workspaceName' when calling artifactsGetSas");
      }
      // verify the required parameter 'origin' is set
      if (origin === undefined || origin === null) {
        throw new Error("Missing the required parameter 'origin' when calling artifactsGetSas");
      }
      // verify the required parameter 'container' is set
      if (container === undefined || container === null) {
        throw new Error("Missing the required parameter 'container' when calling artifactsGetSas");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'workspaceName': workspaceName,
        'origin': origin,
        'container': container
      };
      let queryParams = {
        'path': opts['path']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ArtifactContentInformation;
      return this.apiClient.callApi(
        '/artifact/v2.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/artifacts/{origin}/{container}/write', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the artifactsGetStorageContentInformation operation.
     * @callback module:api/ArtifactApi~artifactsGetStorageContentInformationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ArtifactContentInformation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Artifact storage content information.
     * Get storage content information of an Artifact.
     * @param {String} subscriptionId The Azure Subscription ID.
     * @param {String} resourceGroupName The Name of the resource group in which the workspace is located.
     * @param {String} workspaceName The name of the workspace.
     * @param {String} origin The origin of the Artifact.
     * @param {String} container The container name.
     * @param {Object} opts Optional parameters
     * @param {String} [path] The Artifact Path.
     * @param {module:api/ArtifactApi~artifactsGetStorageContentInformationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ArtifactContentInformation}
     */
    artifactsGetStorageContentInformation(subscriptionId, resourceGroupName, workspaceName, origin, container, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling artifactsGetStorageContentInformation");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling artifactsGetStorageContentInformation");
      }
      // verify the required parameter 'workspaceName' is set
      if (workspaceName === undefined || workspaceName === null) {
        throw new Error("Missing the required parameter 'workspaceName' when calling artifactsGetStorageContentInformation");
      }
      // verify the required parameter 'origin' is set
      if (origin === undefined || origin === null) {
        throw new Error("Missing the required parameter 'origin' when calling artifactsGetStorageContentInformation");
      }
      // verify the required parameter 'container' is set
      if (container === undefined || container === null) {
        throw new Error("Missing the required parameter 'container' when calling artifactsGetStorageContentInformation");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'workspaceName': workspaceName,
        'origin': origin,
        'container': container
      };
      let queryParams = {
        'path': opts['path']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ArtifactContentInformation;
      return this.apiClient.callApi(
        '/artifact/v2.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/artifacts/{origin}/{container}/contentinfo/storageuri', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the artifactsListInContainer operation.
     * @callback module:api/ArtifactApi~artifactsListInContainerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedArtifactList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Artifacts metadata in a container or path.
     * Get Artifacts metadata in a specific container or path.
     * @param {String} subscriptionId The Azure Subscription ID.
     * @param {String} resourceGroupName The Name of the resource group in which the workspace is located.
     * @param {String} workspaceName The name of the workspace.
     * @param {String} origin The origin of the Artifact.
     * @param {String} container The container name.
     * @param {Object} opts Optional parameters
     * @param {String} [path] The Artifact Path.
     * @param {String} [continuationToken] The continuation token.
     * @param {module:api/ArtifactApi~artifactsListInContainerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedArtifactList}
     */
    artifactsListInContainer(subscriptionId, resourceGroupName, workspaceName, origin, container, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling artifactsListInContainer");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling artifactsListInContainer");
      }
      // verify the required parameter 'workspaceName' is set
      if (workspaceName === undefined || workspaceName === null) {
        throw new Error("Missing the required parameter 'workspaceName' when calling artifactsListInContainer");
      }
      // verify the required parameter 'origin' is set
      if (origin === undefined || origin === null) {
        throw new Error("Missing the required parameter 'origin' when calling artifactsListInContainer");
      }
      // verify the required parameter 'container' is set
      if (container === undefined || container === null) {
        throw new Error("Missing the required parameter 'container' when calling artifactsListInContainer");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'workspaceName': workspaceName,
        'origin': origin,
        'container': container
      };
      let queryParams = {
        'path': opts['path'],
        'continuationToken': opts['continuationToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedArtifactList;
      return this.apiClient.callApi(
        '/artifact/v2.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/artifacts/{origin}/{container}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the artifactsListSasByPrefix operation.
     * @callback module:api/ArtifactApi~artifactsListSasByPrefixCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedArtifactContentInformationList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get shared access signature for an Artifact
     * Get shared access signature for an Artifact in specific path.
     * @param {String} subscriptionId The Azure Subscription ID.
     * @param {String} resourceGroupName The Name of the resource group in which the workspace is located.
     * @param {String} workspaceName The name of the workspace.
     * @param {String} origin The origin of the Artifact.
     * @param {String} container The container name.
     * @param {Object} opts Optional parameters
     * @param {String} [path] The Artifact Path.
     * @param {String} [continuationToken] The continuation token.
     * @param {module:api/ArtifactApi~artifactsListSasByPrefixCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedArtifactContentInformationList}
     */
    artifactsListSasByPrefix(subscriptionId, resourceGroupName, workspaceName, origin, container, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling artifactsListSasByPrefix");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling artifactsListSasByPrefix");
      }
      // verify the required parameter 'workspaceName' is set
      if (workspaceName === undefined || workspaceName === null) {
        throw new Error("Missing the required parameter 'workspaceName' when calling artifactsListSasByPrefix");
      }
      // verify the required parameter 'origin' is set
      if (origin === undefined || origin === null) {
        throw new Error("Missing the required parameter 'origin' when calling artifactsListSasByPrefix");
      }
      // verify the required parameter 'container' is set
      if (container === undefined || container === null) {
        throw new Error("Missing the required parameter 'container' when calling artifactsListSasByPrefix");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'workspaceName': workspaceName,
        'origin': origin,
        'container': container
      };
      let queryParams = {
        'path': opts['path'],
        'continuationToken': opts['continuationToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedArtifactContentInformationList;
      return this.apiClient.callApi(
        '/artifact/v2.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/artifacts/{origin}/{container}/prefix/contentinfo', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the artifactsListStorageUriByPrefix operation.
     * @callback module:api/ArtifactApi~artifactsListStorageUriByPrefixCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedArtifactContentInformationList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get storage Uri for Artifacts in a path.
     * Get storage Uri for Artifacts in a specific path.
     * @param {String} subscriptionId The Azure Subscription ID.
     * @param {String} resourceGroupName The Name of the resource group in which the workspace is located.
     * @param {String} workspaceName The name of the workspace.
     * @param {String} origin The origin of the Artifact.
     * @param {String} container The container name.
     * @param {Object} opts Optional parameters
     * @param {String} [path] The Artifact Path.
     * @param {String} [continuationToken] The continuation token.
     * @param {module:api/ArtifactApi~artifactsListStorageUriByPrefixCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedArtifactContentInformationList}
     */
    artifactsListStorageUriByPrefix(subscriptionId, resourceGroupName, workspaceName, origin, container, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling artifactsListStorageUriByPrefix");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling artifactsListStorageUriByPrefix");
      }
      // verify the required parameter 'workspaceName' is set
      if (workspaceName === undefined || workspaceName === null) {
        throw new Error("Missing the required parameter 'workspaceName' when calling artifactsListStorageUriByPrefix");
      }
      // verify the required parameter 'origin' is set
      if (origin === undefined || origin === null) {
        throw new Error("Missing the required parameter 'origin' when calling artifactsListStorageUriByPrefix");
      }
      // verify the required parameter 'container' is set
      if (container === undefined || container === null) {
        throw new Error("Missing the required parameter 'container' when calling artifactsListStorageUriByPrefix");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'workspaceName': workspaceName,
        'origin': origin,
        'container': container
      };
      let queryParams = {
        'path': opts['path'],
        'continuationToken': opts['continuationToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedArtifactContentInformationList;
      return this.apiClient.callApi(
        '/artifact/v2.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/artifacts/{origin}/{container}/prefix/contentinfo/storageuri', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the artifactsRegister operation.
     * @callback module:api/ArtifactApi~artifactsRegisterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Artifact} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an Artifact for an existing data location.
     * Create an Artifact for an existing dataPath.
     * @param {String} subscriptionId The Azure Subscription ID.
     * @param {String} resourceGroupName The Name of the resource group in which the workspace is located.
     * @param {String} workspaceName The name of the workspace.
     * @param {module:model/Artifact} artifact The Artifact creation details.
     * @param {module:api/ArtifactApi~artifactsRegisterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Artifact}
     */
    artifactsRegister(subscriptionId, resourceGroupName, workspaceName, artifact, callback) {
      let postBody = artifact;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling artifactsRegister");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling artifactsRegister");
      }
      // verify the required parameter 'workspaceName' is set
      if (workspaceName === undefined || workspaceName === null) {
        throw new Error("Missing the required parameter 'workspaceName' when calling artifactsRegister");
      }
      // verify the required parameter 'artifact' is set
      if (artifact === undefined || artifact === null) {
        throw new Error("Missing the required parameter 'artifact' when calling artifactsRegister");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'workspaceName': workspaceName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Artifact;
      return this.apiClient.callApi(
        '/artifact/v2.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/artifacts/register', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the artifactsUpload operation.
     * @callback module:api/ArtifactApi~artifactsUploadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Artifact} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload Artifact content.
     * Upload content to an Artifact.
     * @param {String} subscriptionId The Azure Subscription ID.
     * @param {String} resourceGroupName The Name of the resource group in which the workspace is located.
     * @param {String} workspaceName The name of the workspace.
     * @param {String} origin The origin of the Artifact.
     * @param {String} container The container name.
     * @param {File} content The file upload.
     * @param {Object} opts Optional parameters
     * @param {String} [path] The Artifact Path.
     * @param {Number} [index] The index.
     * @param {Boolean} [append = false)] Whether or not to append the content or replace it.
     * @param {Boolean} [allowOverwrite = false)] whether to allow overwrite if Artifact Content exist already. when set to true, Overwrite happens if Artifact Content already exists
     * @param {module:api/ArtifactApi~artifactsUploadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Artifact}
     */
    artifactsUpload(subscriptionId, resourceGroupName, workspaceName, origin, container, content, opts, callback) {
      opts = opts || {};
      let postBody = content;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling artifactsUpload");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling artifactsUpload");
      }
      // verify the required parameter 'workspaceName' is set
      if (workspaceName === undefined || workspaceName === null) {
        throw new Error("Missing the required parameter 'workspaceName' when calling artifactsUpload");
      }
      // verify the required parameter 'origin' is set
      if (origin === undefined || origin === null) {
        throw new Error("Missing the required parameter 'origin' when calling artifactsUpload");
      }
      // verify the required parameter 'container' is set
      if (container === undefined || container === null) {
        throw new Error("Missing the required parameter 'container' when calling artifactsUpload");
      }
      // verify the required parameter 'content' is set
      if (content === undefined || content === null) {
        throw new Error("Missing the required parameter 'content' when calling artifactsUpload");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'workspaceName': workspaceName,
        'origin': origin,
        'container': container
      };
      let queryParams = {
        'path': opts['path'],
        'index': opts['index'],
        'append': opts['append'],
        'allowOverwrite': opts['allowOverwrite']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/octet-stream'];
      let accepts = ['application/json'];
      let returnType = Artifact;
      return this.apiClient.callApi(
        '/artifact/v2.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/artifacts/{origin}/{container}/content', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
