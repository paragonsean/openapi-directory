/*
 * Artifact
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-09-30
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.StoredProcedureParameter;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SqlDataPath
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:18:40.300282-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SqlDataPath {
  public static final String SERIALIZED_NAME_SQL_QUERY = "sqlQuery";
  @SerializedName(SERIALIZED_NAME_SQL_QUERY)
  private String sqlQuery;

  public static final String SERIALIZED_NAME_SQL_STORED_PROCEDURE_NAME = "sqlStoredProcedureName";
  @SerializedName(SERIALIZED_NAME_SQL_STORED_PROCEDURE_NAME)
  private String sqlStoredProcedureName;

  public static final String SERIALIZED_NAME_SQL_STORED_PROCEDURE_PARAMS = "sqlStoredProcedureParams";
  @SerializedName(SERIALIZED_NAME_SQL_STORED_PROCEDURE_PARAMS)
  private List<StoredProcedureParameter> sqlStoredProcedureParams = new ArrayList<>();

  public static final String SERIALIZED_NAME_SQL_TABLE_NAME = "sqlTableName";
  @SerializedName(SERIALIZED_NAME_SQL_TABLE_NAME)
  private String sqlTableName;

  public SqlDataPath() {
  }

  public SqlDataPath sqlQuery(String sqlQuery) {
    this.sqlQuery = sqlQuery;
    return this;
  }

  /**
   * Get sqlQuery
   * @return sqlQuery
   */
  @javax.annotation.Nullable
  public String getSqlQuery() {
    return sqlQuery;
  }

  public void setSqlQuery(String sqlQuery) {
    this.sqlQuery = sqlQuery;
  }


  public SqlDataPath sqlStoredProcedureName(String sqlStoredProcedureName) {
    this.sqlStoredProcedureName = sqlStoredProcedureName;
    return this;
  }

  /**
   * Get sqlStoredProcedureName
   * @return sqlStoredProcedureName
   */
  @javax.annotation.Nullable
  public String getSqlStoredProcedureName() {
    return sqlStoredProcedureName;
  }

  public void setSqlStoredProcedureName(String sqlStoredProcedureName) {
    this.sqlStoredProcedureName = sqlStoredProcedureName;
  }


  public SqlDataPath sqlStoredProcedureParams(List<StoredProcedureParameter> sqlStoredProcedureParams) {
    this.sqlStoredProcedureParams = sqlStoredProcedureParams;
    return this;
  }

  public SqlDataPath addSqlStoredProcedureParamsItem(StoredProcedureParameter sqlStoredProcedureParamsItem) {
    if (this.sqlStoredProcedureParams == null) {
      this.sqlStoredProcedureParams = new ArrayList<>();
    }
    this.sqlStoredProcedureParams.add(sqlStoredProcedureParamsItem);
    return this;
  }

  /**
   * Get sqlStoredProcedureParams
   * @return sqlStoredProcedureParams
   */
  @javax.annotation.Nullable
  public List<StoredProcedureParameter> getSqlStoredProcedureParams() {
    return sqlStoredProcedureParams;
  }

  public void setSqlStoredProcedureParams(List<StoredProcedureParameter> sqlStoredProcedureParams) {
    this.sqlStoredProcedureParams = sqlStoredProcedureParams;
  }


  public SqlDataPath sqlTableName(String sqlTableName) {
    this.sqlTableName = sqlTableName;
    return this;
  }

  /**
   * Get sqlTableName
   * @return sqlTableName
   */
  @javax.annotation.Nullable
  public String getSqlTableName() {
    return sqlTableName;
  }

  public void setSqlTableName(String sqlTableName) {
    this.sqlTableName = sqlTableName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SqlDataPath sqlDataPath = (SqlDataPath) o;
    return Objects.equals(this.sqlQuery, sqlDataPath.sqlQuery) &&
        Objects.equals(this.sqlStoredProcedureName, sqlDataPath.sqlStoredProcedureName) &&
        Objects.equals(this.sqlStoredProcedureParams, sqlDataPath.sqlStoredProcedureParams) &&
        Objects.equals(this.sqlTableName, sqlDataPath.sqlTableName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sqlQuery, sqlStoredProcedureName, sqlStoredProcedureParams, sqlTableName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SqlDataPath {\n");
    sb.append("    sqlQuery: ").append(toIndentedString(sqlQuery)).append("\n");
    sb.append("    sqlStoredProcedureName: ").append(toIndentedString(sqlStoredProcedureName)).append("\n");
    sb.append("    sqlStoredProcedureParams: ").append(toIndentedString(sqlStoredProcedureParams)).append("\n");
    sb.append("    sqlTableName: ").append(toIndentedString(sqlTableName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("sqlQuery");
    openapiFields.add("sqlStoredProcedureName");
    openapiFields.add("sqlStoredProcedureParams");
    openapiFields.add("sqlTableName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SqlDataPath
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SqlDataPath.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SqlDataPath is not found in the empty JSON string", SqlDataPath.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SqlDataPath.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SqlDataPath` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("sqlQuery") != null && !jsonObj.get("sqlQuery").isJsonNull()) && !jsonObj.get("sqlQuery").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sqlQuery` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sqlQuery").toString()));
      }
      if ((jsonObj.get("sqlStoredProcedureName") != null && !jsonObj.get("sqlStoredProcedureName").isJsonNull()) && !jsonObj.get("sqlStoredProcedureName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sqlStoredProcedureName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sqlStoredProcedureName").toString()));
      }
      if (jsonObj.get("sqlStoredProcedureParams") != null && !jsonObj.get("sqlStoredProcedureParams").isJsonNull()) {
        JsonArray jsonArraysqlStoredProcedureParams = jsonObj.getAsJsonArray("sqlStoredProcedureParams");
        if (jsonArraysqlStoredProcedureParams != null) {
          // ensure the json data is an array
          if (!jsonObj.get("sqlStoredProcedureParams").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `sqlStoredProcedureParams` to be an array in the JSON string but got `%s`", jsonObj.get("sqlStoredProcedureParams").toString()));
          }

          // validate the optional field `sqlStoredProcedureParams` (array)
          for (int i = 0; i < jsonArraysqlStoredProcedureParams.size(); i++) {
            StoredProcedureParameter.validateJsonElement(jsonArraysqlStoredProcedureParams.get(i));
          };
        }
      }
      if ((jsonObj.get("sqlTableName") != null && !jsonObj.get("sqlTableName").isJsonNull()) && !jsonObj.get("sqlTableName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sqlTableName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sqlTableName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SqlDataPath.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SqlDataPath' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SqlDataPath> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SqlDataPath.class));

       return (TypeAdapter<T>) new TypeAdapter<SqlDataPath>() {
           @Override
           public void write(JsonWriter out, SqlDataPath value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SqlDataPath read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SqlDataPath given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SqlDataPath
   * @throws IOException if the JSON string is invalid with respect to SqlDataPath
   */
  public static SqlDataPath fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SqlDataPath.class);
  }

  /**
   * Convert an instance of SqlDataPath to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

