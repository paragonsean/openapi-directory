/*
 * Artifact
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-09-30
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.Artifact;
import org.openapitools.client.model.ArtifactContentInformation;
import org.openapitools.client.model.ErrorResponse;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Results of the Batch Artifact Content Information request.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:18:40.300282-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BatchArtifactContentInformationResult {
  public static final String SERIALIZED_NAME_ARTIFACT_CONTENT_INFORMATION = "artifactContentInformation";
  @SerializedName(SERIALIZED_NAME_ARTIFACT_CONTENT_INFORMATION)
  private Map<String, ArtifactContentInformation> artifactContentInformation = new HashMap<>();

  public static final String SERIALIZED_NAME_ARTIFACTS = "artifacts";
  @SerializedName(SERIALIZED_NAME_ARTIFACTS)
  private Map<String, Artifact> artifacts = new HashMap<>();

  public static final String SERIALIZED_NAME_ERRORS = "errors";
  @SerializedName(SERIALIZED_NAME_ERRORS)
  private Map<String, ErrorResponse> errors = new HashMap<>();

  public BatchArtifactContentInformationResult() {
  }

  public BatchArtifactContentInformationResult artifactContentInformation(Map<String, ArtifactContentInformation> artifactContentInformation) {
    this.artifactContentInformation = artifactContentInformation;
    return this;
  }

  public BatchArtifactContentInformationResult putArtifactContentInformationItem(String key, ArtifactContentInformation artifactContentInformationItem) {
    if (this.artifactContentInformation == null) {
      this.artifactContentInformation = new HashMap<>();
    }
    this.artifactContentInformation.put(key, artifactContentInformationItem);
    return this;
  }

  /**
   * Artifact Content Information details of the Artifact Ids requested.
   * @return artifactContentInformation
   */
  @javax.annotation.Nullable
  public Map<String, ArtifactContentInformation> getArtifactContentInformation() {
    return artifactContentInformation;
  }

  public void setArtifactContentInformation(Map<String, ArtifactContentInformation> artifactContentInformation) {
    this.artifactContentInformation = artifactContentInformation;
  }


  public BatchArtifactContentInformationResult artifacts(Map<String, Artifact> artifacts) {
    this.artifacts = artifacts;
    return this;
  }

  public BatchArtifactContentInformationResult putArtifactsItem(String key, Artifact artifactsItem) {
    if (this.artifacts == null) {
      this.artifacts = new HashMap<>();
    }
    this.artifacts.put(key, artifactsItem);
    return this;
  }

  /**
   * Artifact details of the Artifact Ids requested.
   * @return artifacts
   */
  @javax.annotation.Nullable
  public Map<String, Artifact> getArtifacts() {
    return artifacts;
  }

  public void setArtifacts(Map<String, Artifact> artifacts) {
    this.artifacts = artifacts;
  }


  public BatchArtifactContentInformationResult errors(Map<String, ErrorResponse> errors) {
    this.errors = errors;
    return this;
  }

  public BatchArtifactContentInformationResult putErrorsItem(String key, ErrorResponse errorsItem) {
    if (this.errors == null) {
      this.errors = new HashMap<>();
    }
    this.errors.put(key, errorsItem);
    return this;
  }

  /**
   * Errors occurred while fetching the requested Artifact Ids.
   * @return errors
   */
  @javax.annotation.Nullable
  public Map<String, ErrorResponse> getErrors() {
    return errors;
  }

  public void setErrors(Map<String, ErrorResponse> errors) {
    this.errors = errors;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BatchArtifactContentInformationResult batchArtifactContentInformationResult = (BatchArtifactContentInformationResult) o;
    return Objects.equals(this.artifactContentInformation, batchArtifactContentInformationResult.artifactContentInformation) &&
        Objects.equals(this.artifacts, batchArtifactContentInformationResult.artifacts) &&
        Objects.equals(this.errors, batchArtifactContentInformationResult.errors);
  }

  @Override
  public int hashCode() {
    return Objects.hash(artifactContentInformation, artifacts, errors);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BatchArtifactContentInformationResult {\n");
    sb.append("    artifactContentInformation: ").append(toIndentedString(artifactContentInformation)).append("\n");
    sb.append("    artifacts: ").append(toIndentedString(artifacts)).append("\n");
    sb.append("    errors: ").append(toIndentedString(errors)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("artifactContentInformation");
    openapiFields.add("artifacts");
    openapiFields.add("errors");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BatchArtifactContentInformationResult
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BatchArtifactContentInformationResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BatchArtifactContentInformationResult is not found in the empty JSON string", BatchArtifactContentInformationResult.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BatchArtifactContentInformationResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BatchArtifactContentInformationResult` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BatchArtifactContentInformationResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BatchArtifactContentInformationResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BatchArtifactContentInformationResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BatchArtifactContentInformationResult.class));

       return (TypeAdapter<T>) new TypeAdapter<BatchArtifactContentInformationResult>() {
           @Override
           public void write(JsonWriter out, BatchArtifactContentInformationResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BatchArtifactContentInformationResult read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BatchArtifactContentInformationResult given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BatchArtifactContentInformationResult
   * @throws IOException if the JSON string is invalid with respect to BatchArtifactContentInformationResult
   */
  public static BatchArtifactContentInformationResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BatchArtifactContentInformationResult.class);
  }

  /**
   * Convert an instance of BatchArtifactContentInformationResult to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

