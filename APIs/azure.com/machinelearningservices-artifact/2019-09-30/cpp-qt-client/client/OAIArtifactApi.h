/**
 * Artifact
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-09-30
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIArtifactApi_H
#define OAI_OAIArtifactApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIArtifact.h"
#include "OAIArtifactContainerSas.h"
#include "OAIArtifactContentInformation.h"
#include "OAIArtifactIdList.h"
#include "OAIArtifactPathList.h"
#include "OAIBatchArtifactContentInformationResult.h"
#include "OAIErrorResponse.h"
#include "OAIHttpFileElement.h"
#include "OAIPaginatedArtifactContentInformationList.h"
#include "OAIPaginatedArtifactList.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIArtifactApi : public QObject {
    Q_OBJECT

public:
    OAIArtifactApi(const int timeOut = 0);
    ~OAIArtifactApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  workspace_name QString [required]
    * @param[in]  origin QString [required]
    * @param[in]  container QString [required]
    * @param[in]  artifact_paths OAIArtifactPathList [required]
    */
    virtual void artifactsBatchCreateEmptyArtifacts(const QString &subscription_id, const QString &resource_group_name, const QString &workspace_name, const QString &origin, const QString &container, const OAIArtifactPathList &artifact_paths);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  workspace_name QString [required]
    * @param[in]  artifact_ids OAIArtifactIdList [required]
    */
    virtual void artifactsBatchGetById(const QString &subscription_id, const QString &resource_group_name, const QString &workspace_name, const OAIArtifactIdList &artifact_ids);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  workspace_name QString [required]
    * @param[in]  artifact_ids OAIArtifactIdList [required]
    */
    virtual void artifactsBatchGetStorageById(const QString &subscription_id, const QString &resource_group_name, const QString &workspace_name, const OAIArtifactIdList &artifact_ids);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  workspace_name QString [required]
    * @param[in]  origin QString [required]
    * @param[in]  container QString [required]
    * @param[in]  artifact_container_sas OAIArtifactContainerSas [required]
    */
    virtual void artifactsBatchIngestFromSas(const QString &subscription_id, const QString &resource_group_name, const QString &workspace_name, const QString &origin, const QString &container, const OAIArtifactContainerSas &artifact_container_sas);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  workspace_name QString [required]
    * @param[in]  artifact OAIArtifact [required]
    */
    virtual void artifactsCreate(const QString &subscription_id, const QString &resource_group_name, const QString &workspace_name, const OAIArtifact &artifact);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  workspace_name QString [required]
    * @param[in]  origin QString [required]
    * @param[in]  container QString [required]
    * @param[in]  artifact_paths OAIArtifactPathList [required]
    * @param[in]  hard_delete bool [optional]
    */
    virtual void artifactsDeleteBatchMetaData(const QString &subscription_id, const QString &resource_group_name, const QString &workspace_name, const QString &origin, const QString &container, const OAIArtifactPathList &artifact_paths, const ::OpenAPI::OptionalParam<bool> &hard_delete = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  workspace_name QString [required]
    * @param[in]  origin QString [required]
    * @param[in]  container QString [required]
    * @param[in]  path QString [optional]
    * @param[in]  hard_delete bool [optional]
    */
    virtual void artifactsDeleteMetaData(const QString &subscription_id, const QString &resource_group_name, const QString &workspace_name, const QString &origin, const QString &container, const ::OpenAPI::OptionalParam<QString> &path = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &hard_delete = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  workspace_name QString [required]
    * @param[in]  origin QString [required]
    * @param[in]  container QString [required]
    * @param[in]  hard_delete bool [optional]
    */
    virtual void artifactsDeleteMetaDataInContainer(const QString &subscription_id, const QString &resource_group_name, const QString &workspace_name, const QString &origin, const QString &container, const ::OpenAPI::OptionalParam<bool> &hard_delete = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  workspace_name QString [required]
    * @param[in]  origin QString [required]
    * @param[in]  container QString [required]
    * @param[in]  path QString [optional]
    */
    virtual void artifactsDownload(const QString &subscription_id, const QString &resource_group_name, const QString &workspace_name, const QString &origin, const QString &container, const ::OpenAPI::OptionalParam<QString> &path = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  workspace_name QString [required]
    * @param[in]  origin QString [required]
    * @param[in]  container QString [required]
    * @param[in]  path QString [required]
    */
    virtual void artifactsGet(const QString &subscription_id, const QString &resource_group_name, const QString &workspace_name, const QString &origin, const QString &container, const QString &path);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  workspace_name QString [required]
    * @param[in]  origin QString [required]
    * @param[in]  container QString [required]
    * @param[in]  path QString [optional]
    */
    virtual void artifactsGetContentInformation(const QString &subscription_id, const QString &resource_group_name, const QString &workspace_name, const QString &origin, const QString &container, const ::OpenAPI::OptionalParam<QString> &path = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  workspace_name QString [required]
    * @param[in]  origin QString [required]
    * @param[in]  container QString [required]
    * @param[in]  path QString [optional]
    */
    virtual void artifactsGetSas(const QString &subscription_id, const QString &resource_group_name, const QString &workspace_name, const QString &origin, const QString &container, const ::OpenAPI::OptionalParam<QString> &path = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  workspace_name QString [required]
    * @param[in]  origin QString [required]
    * @param[in]  container QString [required]
    * @param[in]  path QString [optional]
    */
    virtual void artifactsGetStorageContentInformation(const QString &subscription_id, const QString &resource_group_name, const QString &workspace_name, const QString &origin, const QString &container, const ::OpenAPI::OptionalParam<QString> &path = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  workspace_name QString [required]
    * @param[in]  origin QString [required]
    * @param[in]  container QString [required]
    * @param[in]  path QString [optional]
    * @param[in]  continuation_token QString [optional]
    */
    virtual void artifactsListInContainer(const QString &subscription_id, const QString &resource_group_name, const QString &workspace_name, const QString &origin, const QString &container, const ::OpenAPI::OptionalParam<QString> &path = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &continuation_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  workspace_name QString [required]
    * @param[in]  origin QString [required]
    * @param[in]  container QString [required]
    * @param[in]  path QString [optional]
    * @param[in]  continuation_token QString [optional]
    */
    virtual void artifactsListSasByPrefix(const QString &subscription_id, const QString &resource_group_name, const QString &workspace_name, const QString &origin, const QString &container, const ::OpenAPI::OptionalParam<QString> &path = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &continuation_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  workspace_name QString [required]
    * @param[in]  origin QString [required]
    * @param[in]  container QString [required]
    * @param[in]  path QString [optional]
    * @param[in]  continuation_token QString [optional]
    */
    virtual void artifactsListStorageUriByPrefix(const QString &subscription_id, const QString &resource_group_name, const QString &workspace_name, const QString &origin, const QString &container, const ::OpenAPI::OptionalParam<QString> &path = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &continuation_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  workspace_name QString [required]
    * @param[in]  artifact OAIArtifact [required]
    */
    virtual void artifactsRegister(const QString &subscription_id, const QString &resource_group_name, const QString &workspace_name, const OAIArtifact &artifact);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  workspace_name QString [required]
    * @param[in]  origin QString [required]
    * @param[in]  container QString [required]
    * @param[in]  content OAIHttpFileElement [required]
    * @param[in]  path QString [optional]
    * @param[in]  index qint32 [optional]
    * @param[in]  append bool [optional]
    * @param[in]  allow_overwrite bool [optional]
    */
    virtual void artifactsUpload(const QString &subscription_id, const QString &resource_group_name, const QString &workspace_name, const QString &origin, const QString &container, const OAIHttpFileElement &content, const ::OpenAPI::OptionalParam<QString> &path = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &index = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &append = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &allow_overwrite = ::OpenAPI::OptionalParam<bool>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void artifactsBatchCreateEmptyArtifactsCallback(OAIHttpRequestWorker *worker);
    void artifactsBatchGetByIdCallback(OAIHttpRequestWorker *worker);
    void artifactsBatchGetStorageByIdCallback(OAIHttpRequestWorker *worker);
    void artifactsBatchIngestFromSasCallback(OAIHttpRequestWorker *worker);
    void artifactsCreateCallback(OAIHttpRequestWorker *worker);
    void artifactsDeleteBatchMetaDataCallback(OAIHttpRequestWorker *worker);
    void artifactsDeleteMetaDataCallback(OAIHttpRequestWorker *worker);
    void artifactsDeleteMetaDataInContainerCallback(OAIHttpRequestWorker *worker);
    void artifactsDownloadCallback(OAIHttpRequestWorker *worker);
    void artifactsGetCallback(OAIHttpRequestWorker *worker);
    void artifactsGetContentInformationCallback(OAIHttpRequestWorker *worker);
    void artifactsGetSasCallback(OAIHttpRequestWorker *worker);
    void artifactsGetStorageContentInformationCallback(OAIHttpRequestWorker *worker);
    void artifactsListInContainerCallback(OAIHttpRequestWorker *worker);
    void artifactsListSasByPrefixCallback(OAIHttpRequestWorker *worker);
    void artifactsListStorageUriByPrefixCallback(OAIHttpRequestWorker *worker);
    void artifactsRegisterCallback(OAIHttpRequestWorker *worker);
    void artifactsUploadCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void artifactsBatchCreateEmptyArtifactsSignal(OAIBatchArtifactContentInformationResult summary);
    void artifactsBatchGetByIdSignal(OAIBatchArtifactContentInformationResult summary);
    void artifactsBatchGetStorageByIdSignal(OAIBatchArtifactContentInformationResult summary);
    void artifactsBatchIngestFromSasSignal(OAIPaginatedArtifactList summary);
    void artifactsCreateSignal(OAIArtifact summary);
    void artifactsDeleteBatchMetaDataSignal();
    void artifactsDeleteMetaDataSignal();
    void artifactsDeleteMetaDataInContainerSignal();
    void artifactsDownloadSignal(OAIHttpFileElement summary);
    void artifactsGetSignal(OAIArtifact summary);
    void artifactsGetContentInformationSignal(OAIArtifactContentInformation summary);
    void artifactsGetSasSignal(OAIArtifactContentInformation summary);
    void artifactsGetStorageContentInformationSignal(OAIArtifactContentInformation summary);
    void artifactsListInContainerSignal(OAIPaginatedArtifactList summary);
    void artifactsListSasByPrefixSignal(OAIPaginatedArtifactContentInformationList summary);
    void artifactsListStorageUriByPrefixSignal(OAIPaginatedArtifactContentInformationList summary);
    void artifactsRegisterSignal(OAIArtifact summary);
    void artifactsUploadSignal(OAIArtifact summary);


    void artifactsBatchCreateEmptyArtifactsSignalFull(OAIHttpRequestWorker *worker, OAIBatchArtifactContentInformationResult summary);
    void artifactsBatchGetByIdSignalFull(OAIHttpRequestWorker *worker, OAIBatchArtifactContentInformationResult summary);
    void artifactsBatchGetStorageByIdSignalFull(OAIHttpRequestWorker *worker, OAIBatchArtifactContentInformationResult summary);
    void artifactsBatchIngestFromSasSignalFull(OAIHttpRequestWorker *worker, OAIPaginatedArtifactList summary);
    void artifactsCreateSignalFull(OAIHttpRequestWorker *worker, OAIArtifact summary);
    void artifactsDeleteBatchMetaDataSignalFull(OAIHttpRequestWorker *worker);
    void artifactsDeleteMetaDataSignalFull(OAIHttpRequestWorker *worker);
    void artifactsDeleteMetaDataInContainerSignalFull(OAIHttpRequestWorker *worker);
    void artifactsDownloadSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void artifactsGetSignalFull(OAIHttpRequestWorker *worker, OAIArtifact summary);
    void artifactsGetContentInformationSignalFull(OAIHttpRequestWorker *worker, OAIArtifactContentInformation summary);
    void artifactsGetSasSignalFull(OAIHttpRequestWorker *worker, OAIArtifactContentInformation summary);
    void artifactsGetStorageContentInformationSignalFull(OAIHttpRequestWorker *worker, OAIArtifactContentInformation summary);
    void artifactsListInContainerSignalFull(OAIHttpRequestWorker *worker, OAIPaginatedArtifactList summary);
    void artifactsListSasByPrefixSignalFull(OAIHttpRequestWorker *worker, OAIPaginatedArtifactContentInformationList summary);
    void artifactsListStorageUriByPrefixSignalFull(OAIHttpRequestWorker *worker, OAIPaginatedArtifactContentInformationList summary);
    void artifactsRegisterSignalFull(OAIHttpRequestWorker *worker, OAIArtifact summary);
    void artifactsUploadSignalFull(OAIHttpRequestWorker *worker, OAIArtifact summary);

    Q_DECL_DEPRECATED_X("Use artifactsBatchCreateEmptyArtifactsSignalError() instead")
    void artifactsBatchCreateEmptyArtifactsSignalE(OAIBatchArtifactContentInformationResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void artifactsBatchCreateEmptyArtifactsSignalError(OAIBatchArtifactContentInformationResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use artifactsBatchGetByIdSignalError() instead")
    void artifactsBatchGetByIdSignalE(OAIBatchArtifactContentInformationResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void artifactsBatchGetByIdSignalError(OAIBatchArtifactContentInformationResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use artifactsBatchGetStorageByIdSignalError() instead")
    void artifactsBatchGetStorageByIdSignalE(OAIBatchArtifactContentInformationResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void artifactsBatchGetStorageByIdSignalError(OAIBatchArtifactContentInformationResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use artifactsBatchIngestFromSasSignalError() instead")
    void artifactsBatchIngestFromSasSignalE(OAIPaginatedArtifactList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void artifactsBatchIngestFromSasSignalError(OAIPaginatedArtifactList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use artifactsCreateSignalError() instead")
    void artifactsCreateSignalE(OAIArtifact summary, QNetworkReply::NetworkError error_type, QString error_str);
    void artifactsCreateSignalError(OAIArtifact summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use artifactsDeleteBatchMetaDataSignalError() instead")
    void artifactsDeleteBatchMetaDataSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void artifactsDeleteBatchMetaDataSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use artifactsDeleteMetaDataSignalError() instead")
    void artifactsDeleteMetaDataSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void artifactsDeleteMetaDataSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use artifactsDeleteMetaDataInContainerSignalError() instead")
    void artifactsDeleteMetaDataInContainerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void artifactsDeleteMetaDataInContainerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use artifactsDownloadSignalError() instead")
    void artifactsDownloadSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void artifactsDownloadSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use artifactsGetSignalError() instead")
    void artifactsGetSignalE(OAIArtifact summary, QNetworkReply::NetworkError error_type, QString error_str);
    void artifactsGetSignalError(OAIArtifact summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use artifactsGetContentInformationSignalError() instead")
    void artifactsGetContentInformationSignalE(OAIArtifactContentInformation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void artifactsGetContentInformationSignalError(OAIArtifactContentInformation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use artifactsGetSasSignalError() instead")
    void artifactsGetSasSignalE(OAIArtifactContentInformation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void artifactsGetSasSignalError(OAIArtifactContentInformation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use artifactsGetStorageContentInformationSignalError() instead")
    void artifactsGetStorageContentInformationSignalE(OAIArtifactContentInformation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void artifactsGetStorageContentInformationSignalError(OAIArtifactContentInformation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use artifactsListInContainerSignalError() instead")
    void artifactsListInContainerSignalE(OAIPaginatedArtifactList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void artifactsListInContainerSignalError(OAIPaginatedArtifactList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use artifactsListSasByPrefixSignalError() instead")
    void artifactsListSasByPrefixSignalE(OAIPaginatedArtifactContentInformationList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void artifactsListSasByPrefixSignalError(OAIPaginatedArtifactContentInformationList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use artifactsListStorageUriByPrefixSignalError() instead")
    void artifactsListStorageUriByPrefixSignalE(OAIPaginatedArtifactContentInformationList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void artifactsListStorageUriByPrefixSignalError(OAIPaginatedArtifactContentInformationList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use artifactsRegisterSignalError() instead")
    void artifactsRegisterSignalE(OAIArtifact summary, QNetworkReply::NetworkError error_type, QString error_str);
    void artifactsRegisterSignalError(OAIArtifact summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use artifactsUploadSignalError() instead")
    void artifactsUploadSignalE(OAIArtifact summary, QNetworkReply::NetworkError error_type, QString error_str);
    void artifactsUploadSignalError(OAIArtifact summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use artifactsBatchCreateEmptyArtifactsSignalErrorFull() instead")
    void artifactsBatchCreateEmptyArtifactsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void artifactsBatchCreateEmptyArtifactsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use artifactsBatchGetByIdSignalErrorFull() instead")
    void artifactsBatchGetByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void artifactsBatchGetByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use artifactsBatchGetStorageByIdSignalErrorFull() instead")
    void artifactsBatchGetStorageByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void artifactsBatchGetStorageByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use artifactsBatchIngestFromSasSignalErrorFull() instead")
    void artifactsBatchIngestFromSasSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void artifactsBatchIngestFromSasSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use artifactsCreateSignalErrorFull() instead")
    void artifactsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void artifactsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use artifactsDeleteBatchMetaDataSignalErrorFull() instead")
    void artifactsDeleteBatchMetaDataSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void artifactsDeleteBatchMetaDataSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use artifactsDeleteMetaDataSignalErrorFull() instead")
    void artifactsDeleteMetaDataSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void artifactsDeleteMetaDataSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use artifactsDeleteMetaDataInContainerSignalErrorFull() instead")
    void artifactsDeleteMetaDataInContainerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void artifactsDeleteMetaDataInContainerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use artifactsDownloadSignalErrorFull() instead")
    void artifactsDownloadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void artifactsDownloadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use artifactsGetSignalErrorFull() instead")
    void artifactsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void artifactsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use artifactsGetContentInformationSignalErrorFull() instead")
    void artifactsGetContentInformationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void artifactsGetContentInformationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use artifactsGetSasSignalErrorFull() instead")
    void artifactsGetSasSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void artifactsGetSasSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use artifactsGetStorageContentInformationSignalErrorFull() instead")
    void artifactsGetStorageContentInformationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void artifactsGetStorageContentInformationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use artifactsListInContainerSignalErrorFull() instead")
    void artifactsListInContainerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void artifactsListInContainerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use artifactsListSasByPrefixSignalErrorFull() instead")
    void artifactsListSasByPrefixSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void artifactsListSasByPrefixSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use artifactsListStorageUriByPrefixSignalErrorFull() instead")
    void artifactsListStorageUriByPrefixSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void artifactsListStorageUriByPrefixSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use artifactsRegisterSignalErrorFull() instead")
    void artifactsRegisterSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void artifactsRegisterSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use artifactsUploadSignalErrorFull() instead")
    void artifactsUploadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void artifactsUploadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
