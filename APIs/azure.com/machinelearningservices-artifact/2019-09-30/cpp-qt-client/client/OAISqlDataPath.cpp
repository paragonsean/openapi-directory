/**
 * Artifact
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-09-30
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISqlDataPath.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISqlDataPath::OAISqlDataPath(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISqlDataPath::OAISqlDataPath() {
    this->initializeModel();
}

OAISqlDataPath::~OAISqlDataPath() {}

void OAISqlDataPath::initializeModel() {

    m_sql_query_isSet = false;
    m_sql_query_isValid = false;

    m_sql_stored_procedure_name_isSet = false;
    m_sql_stored_procedure_name_isValid = false;

    m_sql_stored_procedure_params_isSet = false;
    m_sql_stored_procedure_params_isValid = false;

    m_sql_table_name_isSet = false;
    m_sql_table_name_isValid = false;
}

void OAISqlDataPath::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISqlDataPath::fromJsonObject(QJsonObject json) {

    m_sql_query_isValid = ::OpenAPI::fromJsonValue(m_sql_query, json[QString("sqlQuery")]);
    m_sql_query_isSet = !json[QString("sqlQuery")].isNull() && m_sql_query_isValid;

    m_sql_stored_procedure_name_isValid = ::OpenAPI::fromJsonValue(m_sql_stored_procedure_name, json[QString("sqlStoredProcedureName")]);
    m_sql_stored_procedure_name_isSet = !json[QString("sqlStoredProcedureName")].isNull() && m_sql_stored_procedure_name_isValid;

    m_sql_stored_procedure_params_isValid = ::OpenAPI::fromJsonValue(m_sql_stored_procedure_params, json[QString("sqlStoredProcedureParams")]);
    m_sql_stored_procedure_params_isSet = !json[QString("sqlStoredProcedureParams")].isNull() && m_sql_stored_procedure_params_isValid;

    m_sql_table_name_isValid = ::OpenAPI::fromJsonValue(m_sql_table_name, json[QString("sqlTableName")]);
    m_sql_table_name_isSet = !json[QString("sqlTableName")].isNull() && m_sql_table_name_isValid;
}

QString OAISqlDataPath::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISqlDataPath::asJsonObject() const {
    QJsonObject obj;
    if (m_sql_query_isSet) {
        obj.insert(QString("sqlQuery"), ::OpenAPI::toJsonValue(m_sql_query));
    }
    if (m_sql_stored_procedure_name_isSet) {
        obj.insert(QString("sqlStoredProcedureName"), ::OpenAPI::toJsonValue(m_sql_stored_procedure_name));
    }
    if (m_sql_stored_procedure_params.size() > 0) {
        obj.insert(QString("sqlStoredProcedureParams"), ::OpenAPI::toJsonValue(m_sql_stored_procedure_params));
    }
    if (m_sql_table_name_isSet) {
        obj.insert(QString("sqlTableName"), ::OpenAPI::toJsonValue(m_sql_table_name));
    }
    return obj;
}

QString OAISqlDataPath::getSqlQuery() const {
    return m_sql_query;
}
void OAISqlDataPath::setSqlQuery(const QString &sql_query) {
    m_sql_query = sql_query;
    m_sql_query_isSet = true;
}

bool OAISqlDataPath::is_sql_query_Set() const{
    return m_sql_query_isSet;
}

bool OAISqlDataPath::is_sql_query_Valid() const{
    return m_sql_query_isValid;
}

QString OAISqlDataPath::getSqlStoredProcedureName() const {
    return m_sql_stored_procedure_name;
}
void OAISqlDataPath::setSqlStoredProcedureName(const QString &sql_stored_procedure_name) {
    m_sql_stored_procedure_name = sql_stored_procedure_name;
    m_sql_stored_procedure_name_isSet = true;
}

bool OAISqlDataPath::is_sql_stored_procedure_name_Set() const{
    return m_sql_stored_procedure_name_isSet;
}

bool OAISqlDataPath::is_sql_stored_procedure_name_Valid() const{
    return m_sql_stored_procedure_name_isValid;
}

QList<OAIStoredProcedureParameter> OAISqlDataPath::getSqlStoredProcedureParams() const {
    return m_sql_stored_procedure_params;
}
void OAISqlDataPath::setSqlStoredProcedureParams(const QList<OAIStoredProcedureParameter> &sql_stored_procedure_params) {
    m_sql_stored_procedure_params = sql_stored_procedure_params;
    m_sql_stored_procedure_params_isSet = true;
}

bool OAISqlDataPath::is_sql_stored_procedure_params_Set() const{
    return m_sql_stored_procedure_params_isSet;
}

bool OAISqlDataPath::is_sql_stored_procedure_params_Valid() const{
    return m_sql_stored_procedure_params_isValid;
}

QString OAISqlDataPath::getSqlTableName() const {
    return m_sql_table_name;
}
void OAISqlDataPath::setSqlTableName(const QString &sql_table_name) {
    m_sql_table_name = sql_table_name;
    m_sql_table_name_isSet = true;
}

bool OAISqlDataPath::is_sql_table_name_Set() const{
    return m_sql_table_name_isSet;
}

bool OAISqlDataPath::is_sql_table_name_Valid() const{
    return m_sql_table_name_isValid;
}

bool OAISqlDataPath::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_sql_query_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sql_stored_procedure_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sql_stored_procedure_params.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_sql_table_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISqlDataPath::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
