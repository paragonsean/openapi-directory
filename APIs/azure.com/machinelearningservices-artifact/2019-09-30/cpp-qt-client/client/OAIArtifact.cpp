/**
 * Artifact
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-09-30
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIArtifact.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIArtifact::OAIArtifact(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIArtifact::OAIArtifact() {
    this->initializeModel();
}

OAIArtifact::~OAIArtifact() {}

void OAIArtifact::initializeModel() {

    m_artifact_id_isSet = false;
    m_artifact_id_isValid = false;

    m_container_isSet = false;
    m_container_isValid = false;

    m_created_time_isSet = false;
    m_created_time_isValid = false;

    m_data_path_isSet = false;
    m_data_path_isValid = false;

    m_etag_isSet = false;
    m_etag_isValid = false;

    m_origin_isSet = false;
    m_origin_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;
}

void OAIArtifact::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIArtifact::fromJsonObject(QJsonObject json) {

    m_artifact_id_isValid = ::OpenAPI::fromJsonValue(m_artifact_id, json[QString("artifactId")]);
    m_artifact_id_isSet = !json[QString("artifactId")].isNull() && m_artifact_id_isValid;

    m_container_isValid = ::OpenAPI::fromJsonValue(m_container, json[QString("container")]);
    m_container_isSet = !json[QString("container")].isNull() && m_container_isValid;

    m_created_time_isValid = ::OpenAPI::fromJsonValue(m_created_time, json[QString("createdTime")]);
    m_created_time_isSet = !json[QString("createdTime")].isNull() && m_created_time_isValid;

    m_data_path_isValid = ::OpenAPI::fromJsonValue(m_data_path, json[QString("dataPath")]);
    m_data_path_isSet = !json[QString("dataPath")].isNull() && m_data_path_isValid;

    m_etag_isValid = ::OpenAPI::fromJsonValue(m_etag, json[QString("etag")]);
    m_etag_isSet = !json[QString("etag")].isNull() && m_etag_isValid;

    m_origin_isValid = ::OpenAPI::fromJsonValue(m_origin, json[QString("origin")]);
    m_origin_isSet = !json[QString("origin")].isNull() && m_origin_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;
}

QString OAIArtifact::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIArtifact::asJsonObject() const {
    QJsonObject obj;
    if (m_artifact_id_isSet) {
        obj.insert(QString("artifactId"), ::OpenAPI::toJsonValue(m_artifact_id));
    }
    if (m_container_isSet) {
        obj.insert(QString("container"), ::OpenAPI::toJsonValue(m_container));
    }
    if (m_created_time_isSet) {
        obj.insert(QString("createdTime"), ::OpenAPI::toJsonValue(m_created_time));
    }
    if (m_data_path.isSet()) {
        obj.insert(QString("dataPath"), ::OpenAPI::toJsonValue(m_data_path));
    }
    if (m_etag_isSet) {
        obj.insert(QString("etag"), ::OpenAPI::toJsonValue(m_etag));
    }
    if (m_origin_isSet) {
        obj.insert(QString("origin"), ::OpenAPI::toJsonValue(m_origin));
    }
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    return obj;
}

QString OAIArtifact::getArtifactId() const {
    return m_artifact_id;
}
void OAIArtifact::setArtifactId(const QString &artifact_id) {
    m_artifact_id = artifact_id;
    m_artifact_id_isSet = true;
}

bool OAIArtifact::is_artifact_id_Set() const{
    return m_artifact_id_isSet;
}

bool OAIArtifact::is_artifact_id_Valid() const{
    return m_artifact_id_isValid;
}

QString OAIArtifact::getContainer() const {
    return m_container;
}
void OAIArtifact::setContainer(const QString &container) {
    m_container = container;
    m_container_isSet = true;
}

bool OAIArtifact::is_container_Set() const{
    return m_container_isSet;
}

bool OAIArtifact::is_container_Valid() const{
    return m_container_isValid;
}

QDateTime OAIArtifact::getCreatedTime() const {
    return m_created_time;
}
void OAIArtifact::setCreatedTime(const QDateTime &created_time) {
    m_created_time = created_time;
    m_created_time_isSet = true;
}

bool OAIArtifact::is_created_time_Set() const{
    return m_created_time_isSet;
}

bool OAIArtifact::is_created_time_Valid() const{
    return m_created_time_isValid;
}

OAIDataPath OAIArtifact::getDataPath() const {
    return m_data_path;
}
void OAIArtifact::setDataPath(const OAIDataPath &data_path) {
    m_data_path = data_path;
    m_data_path_isSet = true;
}

bool OAIArtifact::is_data_path_Set() const{
    return m_data_path_isSet;
}

bool OAIArtifact::is_data_path_Valid() const{
    return m_data_path_isValid;
}

QString OAIArtifact::getEtag() const {
    return m_etag;
}
void OAIArtifact::setEtag(const QString &etag) {
    m_etag = etag;
    m_etag_isSet = true;
}

bool OAIArtifact::is_etag_Set() const{
    return m_etag_isSet;
}

bool OAIArtifact::is_etag_Valid() const{
    return m_etag_isValid;
}

QString OAIArtifact::getOrigin() const {
    return m_origin;
}
void OAIArtifact::setOrigin(const QString &origin) {
    m_origin = origin;
    m_origin_isSet = true;
}

bool OAIArtifact::is_origin_Set() const{
    return m_origin_isSet;
}

bool OAIArtifact::is_origin_Valid() const{
    return m_origin_isValid;
}

QString OAIArtifact::getPath() const {
    return m_path;
}
void OAIArtifact::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIArtifact::is_path_Set() const{
    return m_path_isSet;
}

bool OAIArtifact::is_path_Valid() const{
    return m_path_isValid;
}

bool OAIArtifact::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_artifact_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_container_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_path.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_etag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_origin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIArtifact::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_container_isValid && m_origin_isValid && m_path_isValid && true;
}

} // namespace OpenAPI
