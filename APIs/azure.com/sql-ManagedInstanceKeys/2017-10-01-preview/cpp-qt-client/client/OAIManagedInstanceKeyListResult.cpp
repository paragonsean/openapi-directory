/**
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2017-10-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIManagedInstanceKeyListResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIManagedInstanceKeyListResult::OAIManagedInstanceKeyListResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIManagedInstanceKeyListResult::OAIManagedInstanceKeyListResult() {
    this->initializeModel();
}

OAIManagedInstanceKeyListResult::~OAIManagedInstanceKeyListResult() {}

void OAIManagedInstanceKeyListResult::initializeModel() {

    m_next_link_isSet = false;
    m_next_link_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIManagedInstanceKeyListResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIManagedInstanceKeyListResult::fromJsonObject(QJsonObject json) {

    m_next_link_isValid = ::OpenAPI::fromJsonValue(m_next_link, json[QString("nextLink")]);
    m_next_link_isSet = !json[QString("nextLink")].isNull() && m_next_link_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIManagedInstanceKeyListResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIManagedInstanceKeyListResult::asJsonObject() const {
    QJsonObject obj;
    if (m_next_link_isSet) {
        obj.insert(QString("nextLink"), ::OpenAPI::toJsonValue(m_next_link));
    }
    if (m_value.size() > 0) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QString OAIManagedInstanceKeyListResult::getNextLink() const {
    return m_next_link;
}
void OAIManagedInstanceKeyListResult::setNextLink(const QString &next_link) {
    m_next_link = next_link;
    m_next_link_isSet = true;
}

bool OAIManagedInstanceKeyListResult::is_next_link_Set() const{
    return m_next_link_isSet;
}

bool OAIManagedInstanceKeyListResult::is_next_link_Valid() const{
    return m_next_link_isValid;
}

QList<OAIManagedInstanceKey> OAIManagedInstanceKeyListResult::getValue() const {
    return m_value;
}
void OAIManagedInstanceKeyListResult::setValue(const QList<OAIManagedInstanceKey> &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIManagedInstanceKeyListResult::is_value_Set() const{
    return m_value_isSet;
}

bool OAIManagedInstanceKeyListResult::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIManagedInstanceKeyListResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_next_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIManagedInstanceKeyListResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
