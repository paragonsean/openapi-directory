/**
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2017-10-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIManagedInstanceKeysApi_H
#define OAI_OAIManagedInstanceKeysApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIManagedInstanceKey.h"
#include "OAIManagedInstanceKeyListResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIManagedInstanceKeysApi : public QObject {
    Q_OBJECT

public:
    OAIManagedInstanceKeysApi(const int timeOut = 0);
    ~OAIManagedInstanceKeysApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  managed_instance_name QString [required]
    * @param[in]  key_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAIManagedInstanceKey [required]
    */
    virtual void managedInstanceKeysCreateOrUpdate(const QString &resource_group_name, const QString &managed_instance_name, const QString &key_name, const QString &subscription_id, const QString &api_version, const OAIManagedInstanceKey &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  managed_instance_name QString [required]
    * @param[in]  key_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void managedInstanceKeysDelete(const QString &resource_group_name, const QString &managed_instance_name, const QString &key_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  managed_instance_name QString [required]
    * @param[in]  key_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void managedInstanceKeysGet(const QString &resource_group_name, const QString &managed_instance_name, const QString &key_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  managed_instance_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [optional]
    */
    virtual void managedInstanceKeysListByInstance(const QString &resource_group_name, const QString &managed_instance_name, const QString &subscription_id, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void managedInstanceKeysCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void managedInstanceKeysDeleteCallback(OAIHttpRequestWorker *worker);
    void managedInstanceKeysGetCallback(OAIHttpRequestWorker *worker);
    void managedInstanceKeysListByInstanceCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void managedInstanceKeysCreateOrUpdateSignal(OAIManagedInstanceKey summary);
    void managedInstanceKeysDeleteSignal();
    void managedInstanceKeysGetSignal(OAIManagedInstanceKey summary);
    void managedInstanceKeysListByInstanceSignal(OAIManagedInstanceKeyListResult summary);


    void managedInstanceKeysCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIManagedInstanceKey summary);
    void managedInstanceKeysDeleteSignalFull(OAIHttpRequestWorker *worker);
    void managedInstanceKeysGetSignalFull(OAIHttpRequestWorker *worker, OAIManagedInstanceKey summary);
    void managedInstanceKeysListByInstanceSignalFull(OAIHttpRequestWorker *worker, OAIManagedInstanceKeyListResult summary);

    Q_DECL_DEPRECATED_X("Use managedInstanceKeysCreateOrUpdateSignalError() instead")
    void managedInstanceKeysCreateOrUpdateSignalE(OAIManagedInstanceKey summary, QNetworkReply::NetworkError error_type, QString error_str);
    void managedInstanceKeysCreateOrUpdateSignalError(OAIManagedInstanceKey summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use managedInstanceKeysDeleteSignalError() instead")
    void managedInstanceKeysDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void managedInstanceKeysDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use managedInstanceKeysGetSignalError() instead")
    void managedInstanceKeysGetSignalE(OAIManagedInstanceKey summary, QNetworkReply::NetworkError error_type, QString error_str);
    void managedInstanceKeysGetSignalError(OAIManagedInstanceKey summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use managedInstanceKeysListByInstanceSignalError() instead")
    void managedInstanceKeysListByInstanceSignalE(OAIManagedInstanceKeyListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void managedInstanceKeysListByInstanceSignalError(OAIManagedInstanceKeyListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use managedInstanceKeysCreateOrUpdateSignalErrorFull() instead")
    void managedInstanceKeysCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void managedInstanceKeysCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use managedInstanceKeysDeleteSignalErrorFull() instead")
    void managedInstanceKeysDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void managedInstanceKeysDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use managedInstanceKeysGetSignalErrorFull() instead")
    void managedInstanceKeysGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void managedInstanceKeysGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use managedInstanceKeysListByInstanceSignalErrorFull() instead")
    void managedInstanceKeysListByInstanceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void managedInstanceKeysListByInstanceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
