/**
 * MicrosoftSerialConsoleClient
 * The Azure Serial Console allows you to access the serial console of a Virtual Machine or VM scale set instance
 *
 * The version of the OpenAPI document: 2018-05-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISerialConsoleApi_H
#define OAI_OAISerialConsoleApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIDisableSerialConsoleResult.h"
#include "OAIEnableSerialConsoleResult.h"
#include "OAIGetSerialConsoleSubscriptionNotFound.h"
#include "OAISerialConsoleOperations.h"
#include "OAISerialConsoleStatus.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISerialConsoleApi : public QObject {
    Q_OBJECT

public:
    OAISerialConsoleApi(const int timeOut = 0);
    ~OAISerialConsoleApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  r_default QString [required]
    */
    virtual void disableConsole(const QString &api_version, const QString &subscription_id, const QString &r_default);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  r_default QString [required]
    */
    virtual void enableConsole(const QString &api_version, const QString &subscription_id, const QString &r_default);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  r_default QString [required]
    */
    virtual void getConsoleStatus(const QString &api_version, const QString &subscription_id, const QString &r_default);

    /**
    * @param[in]  api_version QString [required]
    */
    virtual void listOperations(const QString &api_version);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void disableConsoleCallback(OAIHttpRequestWorker *worker);
    void enableConsoleCallback(OAIHttpRequestWorker *worker);
    void getConsoleStatusCallback(OAIHttpRequestWorker *worker);
    void listOperationsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void disableConsoleSignal(OAIDisableSerialConsoleResult summary);
    void enableConsoleSignal(OAIEnableSerialConsoleResult summary);
    void getConsoleStatusSignal(OAISerialConsoleStatus summary);
    void listOperationsSignal(OAISerialConsoleOperations summary);


    void disableConsoleSignalFull(OAIHttpRequestWorker *worker, OAIDisableSerialConsoleResult summary);
    void enableConsoleSignalFull(OAIHttpRequestWorker *worker, OAIEnableSerialConsoleResult summary);
    void getConsoleStatusSignalFull(OAIHttpRequestWorker *worker, OAISerialConsoleStatus summary);
    void listOperationsSignalFull(OAIHttpRequestWorker *worker, OAISerialConsoleOperations summary);

    Q_DECL_DEPRECATED_X("Use disableConsoleSignalError() instead")
    void disableConsoleSignalE(OAIDisableSerialConsoleResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void disableConsoleSignalError(OAIDisableSerialConsoleResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enableConsoleSignalError() instead")
    void enableConsoleSignalE(OAIEnableSerialConsoleResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void enableConsoleSignalError(OAIEnableSerialConsoleResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getConsoleStatusSignalError() instead")
    void getConsoleStatusSignalE(OAISerialConsoleStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getConsoleStatusSignalError(OAISerialConsoleStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listOperationsSignalError() instead")
    void listOperationsSignalE(OAISerialConsoleOperations summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listOperationsSignalError(OAISerialConsoleOperations summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use disableConsoleSignalErrorFull() instead")
    void disableConsoleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void disableConsoleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enableConsoleSignalErrorFull() instead")
    void enableConsoleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enableConsoleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getConsoleStatusSignalErrorFull() instead")
    void getConsoleStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getConsoleStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listOperationsSignalErrorFull() instead")
    void listOperationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listOperationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
