/*
 * MicrosoftSerialConsoleClient
 * The Azure Serial Console allows you to access the serial console of a Virtual Machine or VM scale set instance
 *
 * The version of the OpenAPI document: 2018-05-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DisableSerialConsoleResult;
import org.openapitools.client.model.EnableSerialConsoleResult;
import org.openapitools.client.model.GetSerialConsoleSubscriptionNotFound;
import org.openapitools.client.model.SerialConsoleOperations;
import org.openapitools.client.model.SerialConsoleStatus;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SerialConsoleApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SerialConsoleApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SerialConsoleApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for disableConsole
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId Subscription ID which uniquely identifies the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call requiring it. (required)
     * @param _default Default parameter. Leave the value as \&quot;default\&quot;. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns a JSON object </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Subscription not found - returns a JSON object with error details </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call disableConsoleCall(String apiVersion, String subscriptionId, String _default, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.SerialConsole/consoleServices/{default}/disableConsole"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "default" + "}", localVarApiClient.escapeString(_default.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call disableConsoleValidateBeforeCall(String apiVersion, String subscriptionId, String _default, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling disableConsole(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling disableConsole(Async)");
        }

        // verify the required parameter '_default' is set
        if (_default == null) {
            throw new ApiException("Missing the required parameter '_default' when calling disableConsole(Async)");
        }

        return disableConsoleCall(apiVersion, subscriptionId, _default, _callback);

    }

    /**
     * Disable Serial Console for a subscription
     * Disables the Serial Console service for all VMs and VM scale sets in the provided subscription
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId Subscription ID which uniquely identifies the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call requiring it. (required)
     * @param _default Default parameter. Leave the value as \&quot;default\&quot;. (required)
     * @return DisableSerialConsoleResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns a JSON object </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Subscription not found - returns a JSON object with error details </td><td>  -  </td></tr>
     </table>
     */
    public DisableSerialConsoleResult disableConsole(String apiVersion, String subscriptionId, String _default) throws ApiException {
        ApiResponse<DisableSerialConsoleResult> localVarResp = disableConsoleWithHttpInfo(apiVersion, subscriptionId, _default);
        return localVarResp.getData();
    }

    /**
     * Disable Serial Console for a subscription
     * Disables the Serial Console service for all VMs and VM scale sets in the provided subscription
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId Subscription ID which uniquely identifies the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call requiring it. (required)
     * @param _default Default parameter. Leave the value as \&quot;default\&quot;. (required)
     * @return ApiResponse&lt;DisableSerialConsoleResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns a JSON object </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Subscription not found - returns a JSON object with error details </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DisableSerialConsoleResult> disableConsoleWithHttpInfo(String apiVersion, String subscriptionId, String _default) throws ApiException {
        okhttp3.Call localVarCall = disableConsoleValidateBeforeCall(apiVersion, subscriptionId, _default, null);
        Type localVarReturnType = new TypeToken<DisableSerialConsoleResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Disable Serial Console for a subscription (asynchronously)
     * Disables the Serial Console service for all VMs and VM scale sets in the provided subscription
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId Subscription ID which uniquely identifies the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call requiring it. (required)
     * @param _default Default parameter. Leave the value as \&quot;default\&quot;. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns a JSON object </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Subscription not found - returns a JSON object with error details </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call disableConsoleAsync(String apiVersion, String subscriptionId, String _default, final ApiCallback<DisableSerialConsoleResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = disableConsoleValidateBeforeCall(apiVersion, subscriptionId, _default, _callback);
        Type localVarReturnType = new TypeToken<DisableSerialConsoleResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enableConsole
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId Subscription ID which uniquely identifies the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call requiring it. (required)
     * @param _default Default parameter. Leave the value as \&quot;default\&quot;. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Serial Console disabled </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Subscription not found - returns a JSON object with error details </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enableConsoleCall(String apiVersion, String subscriptionId, String _default, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.SerialConsole/consoleServices/{default}/enableConsole"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "default" + "}", localVarApiClient.escapeString(_default.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enableConsoleValidateBeforeCall(String apiVersion, String subscriptionId, String _default, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling enableConsole(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling enableConsole(Async)");
        }

        // verify the required parameter '_default' is set
        if (_default == null) {
            throw new ApiException("Missing the required parameter '_default' when calling enableConsole(Async)");
        }

        return enableConsoleCall(apiVersion, subscriptionId, _default, _callback);

    }

    /**
     * Enable Serial Console for a subscription
     * Enables the Serial Console service for all VMs and VM scale sets in the provided subscription
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId Subscription ID which uniquely identifies the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call requiring it. (required)
     * @param _default Default parameter. Leave the value as \&quot;default\&quot;. (required)
     * @return EnableSerialConsoleResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Serial Console disabled </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Subscription not found - returns a JSON object with error details </td><td>  -  </td></tr>
     </table>
     */
    public EnableSerialConsoleResult enableConsole(String apiVersion, String subscriptionId, String _default) throws ApiException {
        ApiResponse<EnableSerialConsoleResult> localVarResp = enableConsoleWithHttpInfo(apiVersion, subscriptionId, _default);
        return localVarResp.getData();
    }

    /**
     * Enable Serial Console for a subscription
     * Enables the Serial Console service for all VMs and VM scale sets in the provided subscription
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId Subscription ID which uniquely identifies the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call requiring it. (required)
     * @param _default Default parameter. Leave the value as \&quot;default\&quot;. (required)
     * @return ApiResponse&lt;EnableSerialConsoleResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Serial Console disabled </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Subscription not found - returns a JSON object with error details </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EnableSerialConsoleResult> enableConsoleWithHttpInfo(String apiVersion, String subscriptionId, String _default) throws ApiException {
        okhttp3.Call localVarCall = enableConsoleValidateBeforeCall(apiVersion, subscriptionId, _default, null);
        Type localVarReturnType = new TypeToken<EnableSerialConsoleResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Enable Serial Console for a subscription (asynchronously)
     * Enables the Serial Console service for all VMs and VM scale sets in the provided subscription
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId Subscription ID which uniquely identifies the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call requiring it. (required)
     * @param _default Default parameter. Leave the value as \&quot;default\&quot;. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Serial Console disabled </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Subscription not found - returns a JSON object with error details </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enableConsoleAsync(String apiVersion, String subscriptionId, String _default, final ApiCallback<EnableSerialConsoleResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = enableConsoleValidateBeforeCall(apiVersion, subscriptionId, _default, _callback);
        Type localVarReturnType = new TypeToken<EnableSerialConsoleResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getConsoleStatus
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId Subscription ID which uniquely identifies the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call requiring it. (required)
     * @param _default Default parameter. Leave the value as \&quot;default\&quot;. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns a JSON object </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Subscription not found - returns a JSON object with error details </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getConsoleStatusCall(String apiVersion, String subscriptionId, String _default, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.SerialConsole/consoleServices/{default}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "default" + "}", localVarApiClient.escapeString(_default.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getConsoleStatusValidateBeforeCall(String apiVersion, String subscriptionId, String _default, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling getConsoleStatus(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling getConsoleStatus(Async)");
        }

        // verify the required parameter '_default' is set
        if (_default == null) {
            throw new ApiException("Missing the required parameter '_default' when calling getConsoleStatus(Async)");
        }

        return getConsoleStatusCall(apiVersion, subscriptionId, _default, _callback);

    }

    /**
     * Get the disabled status for a subscription
     * Gets whether or not Serial Console is disabled for a given subscription
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId Subscription ID which uniquely identifies the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call requiring it. (required)
     * @param _default Default parameter. Leave the value as \&quot;default\&quot;. (required)
     * @return SerialConsoleStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns a JSON object </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Subscription not found - returns a JSON object with error details </td><td>  -  </td></tr>
     </table>
     */
    public SerialConsoleStatus getConsoleStatus(String apiVersion, String subscriptionId, String _default) throws ApiException {
        ApiResponse<SerialConsoleStatus> localVarResp = getConsoleStatusWithHttpInfo(apiVersion, subscriptionId, _default);
        return localVarResp.getData();
    }

    /**
     * Get the disabled status for a subscription
     * Gets whether or not Serial Console is disabled for a given subscription
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId Subscription ID which uniquely identifies the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call requiring it. (required)
     * @param _default Default parameter. Leave the value as \&quot;default\&quot;. (required)
     * @return ApiResponse&lt;SerialConsoleStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns a JSON object </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Subscription not found - returns a JSON object with error details </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SerialConsoleStatus> getConsoleStatusWithHttpInfo(String apiVersion, String subscriptionId, String _default) throws ApiException {
        okhttp3.Call localVarCall = getConsoleStatusValidateBeforeCall(apiVersion, subscriptionId, _default, null);
        Type localVarReturnType = new TypeToken<SerialConsoleStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the disabled status for a subscription (asynchronously)
     * Gets whether or not Serial Console is disabled for a given subscription
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId Subscription ID which uniquely identifies the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call requiring it. (required)
     * @param _default Default parameter. Leave the value as \&quot;default\&quot;. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns a JSON object </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Subscription not found - returns a JSON object with error details </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getConsoleStatusAsync(String apiVersion, String subscriptionId, String _default, final ApiCallback<SerialConsoleStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = getConsoleStatusValidateBeforeCall(apiVersion, subscriptionId, _default, _callback);
        Type localVarReturnType = new TypeToken<SerialConsoleStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listOperations
     * @param apiVersion The API version to use for this operation. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - returns a JSON object </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listOperationsCall(String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.SerialConsole/operations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listOperationsValidateBeforeCall(String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling listOperations(Async)");
        }

        return listOperationsCall(apiVersion, _callback);

    }

    /**
     * 
     * Gets a list of Serial Console API operations.
     * @param apiVersion The API version to use for this operation. (required)
     * @return SerialConsoleOperations
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - returns a JSON object </td><td>  -  </td></tr>
     </table>
     */
    public SerialConsoleOperations listOperations(String apiVersion) throws ApiException {
        ApiResponse<SerialConsoleOperations> localVarResp = listOperationsWithHttpInfo(apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets a list of Serial Console API operations.
     * @param apiVersion The API version to use for this operation. (required)
     * @return ApiResponse&lt;SerialConsoleOperations&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - returns a JSON object </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SerialConsoleOperations> listOperationsWithHttpInfo(String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = listOperationsValidateBeforeCall(apiVersion, null);
        Type localVarReturnType = new TypeToken<SerialConsoleOperations>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets a list of Serial Console API operations.
     * @param apiVersion The API version to use for this operation. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - returns a JSON object </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listOperationsAsync(String apiVersion, final ApiCallback<SerialConsoleOperations> _callback) throws ApiException {

        okhttp3.Call localVarCall = listOperationsValidateBeforeCall(apiVersion, _callback);
        Type localVarReturnType = new TypeToken<SerialConsoleOperations>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
