/*
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2017-10-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.DatabaseVulnerabilityAssessmentRuleBaseline;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ManagedDatabaseVulnerabilityAssesmentRuleBaselinesApi
 */
@Disabled
public class ManagedDatabaseVulnerabilityAssesmentRuleBaselinesApiTest {

    private final ManagedDatabaseVulnerabilityAssesmentRuleBaselinesApi api = new ManagedDatabaseVulnerabilityAssesmentRuleBaselinesApi();

    /**
     * Creates or updates a database&#39;s vulnerability assessment rule baseline.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void managedDatabaseVulnerabilityAssessmentRuleBaselinesCreateOrUpdateTest() throws ApiException {
        String resourceGroupName = null;
        String managedInstanceName = null;
        String databaseName = null;
        String vulnerabilityAssessmentName = null;
        String ruleId = null;
        String baselineName = null;
        String subscriptionId = null;
        String apiVersion = null;
        DatabaseVulnerabilityAssessmentRuleBaseline parameters = null;
        DatabaseVulnerabilityAssessmentRuleBaseline response = api.managedDatabaseVulnerabilityAssessmentRuleBaselinesCreateOrUpdate(resourceGroupName, managedInstanceName, databaseName, vulnerabilityAssessmentName, ruleId, baselineName, subscriptionId, apiVersion, parameters);
        // TODO: test validations
    }

    /**
     * Removes the database&#39;s vulnerability assessment rule baseline.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void managedDatabaseVulnerabilityAssessmentRuleBaselinesDeleteTest() throws ApiException {
        String resourceGroupName = null;
        String managedInstanceName = null;
        String databaseName = null;
        String vulnerabilityAssessmentName = null;
        String ruleId = null;
        String baselineName = null;
        String subscriptionId = null;
        String apiVersion = null;
        api.managedDatabaseVulnerabilityAssessmentRuleBaselinesDelete(resourceGroupName, managedInstanceName, databaseName, vulnerabilityAssessmentName, ruleId, baselineName, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets a database&#39;s vulnerability assessment rule baseline.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void managedDatabaseVulnerabilityAssessmentRuleBaselinesGetTest() throws ApiException {
        String resourceGroupName = null;
        String managedInstanceName = null;
        String databaseName = null;
        String vulnerabilityAssessmentName = null;
        String ruleId = null;
        String baselineName = null;
        String subscriptionId = null;
        String apiVersion = null;
        DatabaseVulnerabilityAssessmentRuleBaseline response = api.managedDatabaseVulnerabilityAssessmentRuleBaselinesGet(resourceGroupName, managedInstanceName, databaseName, vulnerabilityAssessmentName, ruleId, baselineName, subscriptionId, apiVersion);
        // TODO: test validations
    }

}
