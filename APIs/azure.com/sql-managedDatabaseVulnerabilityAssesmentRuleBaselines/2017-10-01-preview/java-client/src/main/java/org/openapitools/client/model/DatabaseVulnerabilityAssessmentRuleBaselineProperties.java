/*
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2017-10-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DatabaseVulnerabilityAssessmentRuleBaselineItem;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties of a database Vulnerability Assessment rule baseline.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:31:19.285354-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DatabaseVulnerabilityAssessmentRuleBaselineProperties {
  public static final String SERIALIZED_NAME_BASELINE_RESULTS = "baselineResults";
  @SerializedName(SERIALIZED_NAME_BASELINE_RESULTS)
  private List<DatabaseVulnerabilityAssessmentRuleBaselineItem> baselineResults = new ArrayList<>();

  public DatabaseVulnerabilityAssessmentRuleBaselineProperties() {
  }

  public DatabaseVulnerabilityAssessmentRuleBaselineProperties baselineResults(List<DatabaseVulnerabilityAssessmentRuleBaselineItem> baselineResults) {
    this.baselineResults = baselineResults;
    return this;
  }

  public DatabaseVulnerabilityAssessmentRuleBaselineProperties addBaselineResultsItem(DatabaseVulnerabilityAssessmentRuleBaselineItem baselineResultsItem) {
    if (this.baselineResults == null) {
      this.baselineResults = new ArrayList<>();
    }
    this.baselineResults.add(baselineResultsItem);
    return this;
  }

  /**
   * The rule baseline result
   * @return baselineResults
   */
  @javax.annotation.Nonnull
  public List<DatabaseVulnerabilityAssessmentRuleBaselineItem> getBaselineResults() {
    return baselineResults;
  }

  public void setBaselineResults(List<DatabaseVulnerabilityAssessmentRuleBaselineItem> baselineResults) {
    this.baselineResults = baselineResults;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DatabaseVulnerabilityAssessmentRuleBaselineProperties databaseVulnerabilityAssessmentRuleBaselineProperties = (DatabaseVulnerabilityAssessmentRuleBaselineProperties) o;
    return Objects.equals(this.baselineResults, databaseVulnerabilityAssessmentRuleBaselineProperties.baselineResults);
  }

  @Override
  public int hashCode() {
    return Objects.hash(baselineResults);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DatabaseVulnerabilityAssessmentRuleBaselineProperties {\n");
    sb.append("    baselineResults: ").append(toIndentedString(baselineResults)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("baselineResults");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("baselineResults");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DatabaseVulnerabilityAssessmentRuleBaselineProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DatabaseVulnerabilityAssessmentRuleBaselineProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DatabaseVulnerabilityAssessmentRuleBaselineProperties is not found in the empty JSON string", DatabaseVulnerabilityAssessmentRuleBaselineProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DatabaseVulnerabilityAssessmentRuleBaselineProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DatabaseVulnerabilityAssessmentRuleBaselineProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DatabaseVulnerabilityAssessmentRuleBaselineProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("baselineResults").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `baselineResults` to be an array in the JSON string but got `%s`", jsonObj.get("baselineResults").toString()));
      }

      JsonArray jsonArraybaselineResults = jsonObj.getAsJsonArray("baselineResults");
      // validate the required field `baselineResults` (array)
      for (int i = 0; i < jsonArraybaselineResults.size(); i++) {
        DatabaseVulnerabilityAssessmentRuleBaselineItem.validateJsonElement(jsonArraybaselineResults.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DatabaseVulnerabilityAssessmentRuleBaselineProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DatabaseVulnerabilityAssessmentRuleBaselineProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DatabaseVulnerabilityAssessmentRuleBaselineProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DatabaseVulnerabilityAssessmentRuleBaselineProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<DatabaseVulnerabilityAssessmentRuleBaselineProperties>() {
           @Override
           public void write(JsonWriter out, DatabaseVulnerabilityAssessmentRuleBaselineProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DatabaseVulnerabilityAssessmentRuleBaselineProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DatabaseVulnerabilityAssessmentRuleBaselineProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DatabaseVulnerabilityAssessmentRuleBaselineProperties
   * @throws IOException if the JSON string is invalid with respect to DatabaseVulnerabilityAssessmentRuleBaselineProperties
   */
  public static DatabaseVulnerabilityAssessmentRuleBaselineProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DatabaseVulnerabilityAssessmentRuleBaselineProperties.class);
  }

  /**
   * Convert an instance of DatabaseVulnerabilityAssessmentRuleBaselineProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

