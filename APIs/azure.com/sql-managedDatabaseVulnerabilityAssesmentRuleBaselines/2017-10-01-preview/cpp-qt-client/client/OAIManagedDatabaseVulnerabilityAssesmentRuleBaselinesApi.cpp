/**
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2017-10-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIManagedDatabaseVulnerabilityAssesmentRuleBaselinesApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIManagedDatabaseVulnerabilityAssesmentRuleBaselinesApi::OAIManagedDatabaseVulnerabilityAssesmentRuleBaselinesApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIManagedDatabaseVulnerabilityAssesmentRuleBaselinesApi::~OAIManagedDatabaseVulnerabilityAssesmentRuleBaselinesApi() {
}

void OAIManagedDatabaseVulnerabilityAssesmentRuleBaselinesApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://management.azure.com/"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("managedDatabaseVulnerabilityAssessmentRuleBaselinesCreateOrUpdate", defaultConf);
    _serverIndices.insert("managedDatabaseVulnerabilityAssessmentRuleBaselinesCreateOrUpdate", 0);
    _serverConfigs.insert("managedDatabaseVulnerabilityAssessmentRuleBaselinesDelete", defaultConf);
    _serverIndices.insert("managedDatabaseVulnerabilityAssessmentRuleBaselinesDelete", 0);
    _serverConfigs.insert("managedDatabaseVulnerabilityAssessmentRuleBaselinesGet", defaultConf);
    _serverIndices.insert("managedDatabaseVulnerabilityAssessmentRuleBaselinesGet", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIManagedDatabaseVulnerabilityAssesmentRuleBaselinesApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIManagedDatabaseVulnerabilityAssesmentRuleBaselinesApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIManagedDatabaseVulnerabilityAssesmentRuleBaselinesApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIManagedDatabaseVulnerabilityAssesmentRuleBaselinesApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIManagedDatabaseVulnerabilityAssesmentRuleBaselinesApi::setUsername(const QString &username) {
    _username = username;
}

void OAIManagedDatabaseVulnerabilityAssesmentRuleBaselinesApi::setPassword(const QString &password) {
    _password = password;
}


void OAIManagedDatabaseVulnerabilityAssesmentRuleBaselinesApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIManagedDatabaseVulnerabilityAssesmentRuleBaselinesApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIManagedDatabaseVulnerabilityAssesmentRuleBaselinesApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIManagedDatabaseVulnerabilityAssesmentRuleBaselinesApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIManagedDatabaseVulnerabilityAssesmentRuleBaselinesApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIManagedDatabaseVulnerabilityAssesmentRuleBaselinesApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIManagedDatabaseVulnerabilityAssesmentRuleBaselinesApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIManagedDatabaseVulnerabilityAssesmentRuleBaselinesApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIManagedDatabaseVulnerabilityAssesmentRuleBaselinesApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIManagedDatabaseVulnerabilityAssesmentRuleBaselinesApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIManagedDatabaseVulnerabilityAssesmentRuleBaselinesApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIManagedDatabaseVulnerabilityAssesmentRuleBaselinesApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIManagedDatabaseVulnerabilityAssesmentRuleBaselinesApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIManagedDatabaseVulnerabilityAssesmentRuleBaselinesApi::managedDatabaseVulnerabilityAssessmentRuleBaselinesCreateOrUpdate(const QString &resource_group_name, const QString &managed_instance_name, const QString &database_name, const QString &vulnerability_assessment_name, const QString &rule_id, const QString &baseline_name, const QString &subscription_id, const QString &api_version, const OAIDatabaseVulnerabilityAssessmentRuleBaseline &parameters) {
    QString fullPath = QString(_serverConfigs["managedDatabaseVulnerabilityAssessmentRuleBaselinesCreateOrUpdate"][_serverIndices.value("managedDatabaseVulnerabilityAssessmentRuleBaselinesCreateOrUpdate")].URL()+"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases/{databaseName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}/rules/{ruleId}/baselines/{baselineName}");
    
    
    {
        QString resource_group_namePathParam("{");
        resource_group_namePathParam.append("resourceGroupName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "resourceGroupName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"resourceGroupName"+pathSuffix : pathPrefix;
        fullPath.replace(resource_group_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(resource_group_name)));
    }
    
    {
        QString managed_instance_namePathParam("{");
        managed_instance_namePathParam.append("managedInstanceName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "managedInstanceName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"managedInstanceName"+pathSuffix : pathPrefix;
        fullPath.replace(managed_instance_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(managed_instance_name)));
    }
    
    {
        QString database_namePathParam("{");
        database_namePathParam.append("databaseName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "databaseName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"databaseName"+pathSuffix : pathPrefix;
        fullPath.replace(database_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(database_name)));
    }
    
    {
        QString vulnerability_assessment_namePathParam("{");
        vulnerability_assessment_namePathParam.append("vulnerabilityAssessmentName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "vulnerabilityAssessmentName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"vulnerabilityAssessmentName"+pathSuffix : pathPrefix;
        fullPath.replace(vulnerability_assessment_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(vulnerability_assessment_name)));
    }
    
    {
        QString rule_idPathParam("{");
        rule_idPathParam.append("ruleId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "ruleId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"ruleId"+pathSuffix : pathPrefix;
        fullPath.replace(rule_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(rule_id)));
    }
    
    {
        QString baseline_namePathParam("{");
        baseline_namePathParam.append("baselineName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "baselineName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"baselineName"+pathSuffix : pathPrefix;
        fullPath.replace(baseline_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(baseline_name)));
    }
    
    {
        QString subscription_idPathParam("{");
        subscription_idPathParam.append("subscriptionId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "subscriptionId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"subscriptionId"+pathSuffix : pathPrefix;
        fullPath.replace(subscription_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(subscription_id)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "api-version", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("api-version")).append(querySuffix).append(QUrl::toPercentEncoding(api_version));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");

    {

        
        QByteArray output = parameters.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIManagedDatabaseVulnerabilityAssesmentRuleBaselinesApi::managedDatabaseVulnerabilityAssessmentRuleBaselinesCreateOrUpdateCallback);
    connect(this, &OAIManagedDatabaseVulnerabilityAssesmentRuleBaselinesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIManagedDatabaseVulnerabilityAssesmentRuleBaselinesApi::managedDatabaseVulnerabilityAssessmentRuleBaselinesCreateOrUpdateCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIDatabaseVulnerabilityAssessmentRuleBaseline output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT managedDatabaseVulnerabilityAssessmentRuleBaselinesCreateOrUpdateSignal(output);
        Q_EMIT managedDatabaseVulnerabilityAssessmentRuleBaselinesCreateOrUpdateSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT managedDatabaseVulnerabilityAssessmentRuleBaselinesCreateOrUpdateSignalE(output, error_type, error_str);
        Q_EMIT managedDatabaseVulnerabilityAssessmentRuleBaselinesCreateOrUpdateSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT managedDatabaseVulnerabilityAssessmentRuleBaselinesCreateOrUpdateSignalError(output, error_type, error_str);
        Q_EMIT managedDatabaseVulnerabilityAssessmentRuleBaselinesCreateOrUpdateSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIManagedDatabaseVulnerabilityAssesmentRuleBaselinesApi::managedDatabaseVulnerabilityAssessmentRuleBaselinesDelete(const QString &resource_group_name, const QString &managed_instance_name, const QString &database_name, const QString &vulnerability_assessment_name, const QString &rule_id, const QString &baseline_name, const QString &subscription_id, const QString &api_version) {
    QString fullPath = QString(_serverConfigs["managedDatabaseVulnerabilityAssessmentRuleBaselinesDelete"][_serverIndices.value("managedDatabaseVulnerabilityAssessmentRuleBaselinesDelete")].URL()+"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases/{databaseName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}/rules/{ruleId}/baselines/{baselineName}");
    
    
    {
        QString resource_group_namePathParam("{");
        resource_group_namePathParam.append("resourceGroupName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "resourceGroupName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"resourceGroupName"+pathSuffix : pathPrefix;
        fullPath.replace(resource_group_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(resource_group_name)));
    }
    
    {
        QString managed_instance_namePathParam("{");
        managed_instance_namePathParam.append("managedInstanceName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "managedInstanceName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"managedInstanceName"+pathSuffix : pathPrefix;
        fullPath.replace(managed_instance_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(managed_instance_name)));
    }
    
    {
        QString database_namePathParam("{");
        database_namePathParam.append("databaseName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "databaseName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"databaseName"+pathSuffix : pathPrefix;
        fullPath.replace(database_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(database_name)));
    }
    
    {
        QString vulnerability_assessment_namePathParam("{");
        vulnerability_assessment_namePathParam.append("vulnerabilityAssessmentName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "vulnerabilityAssessmentName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"vulnerabilityAssessmentName"+pathSuffix : pathPrefix;
        fullPath.replace(vulnerability_assessment_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(vulnerability_assessment_name)));
    }
    
    {
        QString rule_idPathParam("{");
        rule_idPathParam.append("ruleId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "ruleId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"ruleId"+pathSuffix : pathPrefix;
        fullPath.replace(rule_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(rule_id)));
    }
    
    {
        QString baseline_namePathParam("{");
        baseline_namePathParam.append("baselineName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "baselineName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"baselineName"+pathSuffix : pathPrefix;
        fullPath.replace(baseline_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(baseline_name)));
    }
    
    {
        QString subscription_idPathParam("{");
        subscription_idPathParam.append("subscriptionId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "subscriptionId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"subscriptionId"+pathSuffix : pathPrefix;
        fullPath.replace(subscription_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(subscription_id)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "api-version", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("api-version")).append(querySuffix).append(QUrl::toPercentEncoding(api_version));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIManagedDatabaseVulnerabilityAssesmentRuleBaselinesApi::managedDatabaseVulnerabilityAssessmentRuleBaselinesDeleteCallback);
    connect(this, &OAIManagedDatabaseVulnerabilityAssesmentRuleBaselinesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIManagedDatabaseVulnerabilityAssesmentRuleBaselinesApi::managedDatabaseVulnerabilityAssessmentRuleBaselinesDeleteCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT managedDatabaseVulnerabilityAssessmentRuleBaselinesDeleteSignal();
        Q_EMIT managedDatabaseVulnerabilityAssessmentRuleBaselinesDeleteSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT managedDatabaseVulnerabilityAssessmentRuleBaselinesDeleteSignalE(error_type, error_str);
        Q_EMIT managedDatabaseVulnerabilityAssessmentRuleBaselinesDeleteSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT managedDatabaseVulnerabilityAssessmentRuleBaselinesDeleteSignalError(error_type, error_str);
        Q_EMIT managedDatabaseVulnerabilityAssessmentRuleBaselinesDeleteSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIManagedDatabaseVulnerabilityAssesmentRuleBaselinesApi::managedDatabaseVulnerabilityAssessmentRuleBaselinesGet(const QString &resource_group_name, const QString &managed_instance_name, const QString &database_name, const QString &vulnerability_assessment_name, const QString &rule_id, const QString &baseline_name, const QString &subscription_id, const QString &api_version) {
    QString fullPath = QString(_serverConfigs["managedDatabaseVulnerabilityAssessmentRuleBaselinesGet"][_serverIndices.value("managedDatabaseVulnerabilityAssessmentRuleBaselinesGet")].URL()+"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases/{databaseName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}/rules/{ruleId}/baselines/{baselineName}");
    
    
    {
        QString resource_group_namePathParam("{");
        resource_group_namePathParam.append("resourceGroupName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "resourceGroupName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"resourceGroupName"+pathSuffix : pathPrefix;
        fullPath.replace(resource_group_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(resource_group_name)));
    }
    
    {
        QString managed_instance_namePathParam("{");
        managed_instance_namePathParam.append("managedInstanceName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "managedInstanceName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"managedInstanceName"+pathSuffix : pathPrefix;
        fullPath.replace(managed_instance_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(managed_instance_name)));
    }
    
    {
        QString database_namePathParam("{");
        database_namePathParam.append("databaseName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "databaseName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"databaseName"+pathSuffix : pathPrefix;
        fullPath.replace(database_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(database_name)));
    }
    
    {
        QString vulnerability_assessment_namePathParam("{");
        vulnerability_assessment_namePathParam.append("vulnerabilityAssessmentName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "vulnerabilityAssessmentName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"vulnerabilityAssessmentName"+pathSuffix : pathPrefix;
        fullPath.replace(vulnerability_assessment_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(vulnerability_assessment_name)));
    }
    
    {
        QString rule_idPathParam("{");
        rule_idPathParam.append("ruleId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "ruleId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"ruleId"+pathSuffix : pathPrefix;
        fullPath.replace(rule_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(rule_id)));
    }
    
    {
        QString baseline_namePathParam("{");
        baseline_namePathParam.append("baselineName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "baselineName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"baselineName"+pathSuffix : pathPrefix;
        fullPath.replace(baseline_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(baseline_name)));
    }
    
    {
        QString subscription_idPathParam("{");
        subscription_idPathParam.append("subscriptionId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "subscriptionId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"subscriptionId"+pathSuffix : pathPrefix;
        fullPath.replace(subscription_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(subscription_id)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "api-version", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("api-version")).append(querySuffix).append(QUrl::toPercentEncoding(api_version));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIManagedDatabaseVulnerabilityAssesmentRuleBaselinesApi::managedDatabaseVulnerabilityAssessmentRuleBaselinesGetCallback);
    connect(this, &OAIManagedDatabaseVulnerabilityAssesmentRuleBaselinesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIManagedDatabaseVulnerabilityAssesmentRuleBaselinesApi::managedDatabaseVulnerabilityAssessmentRuleBaselinesGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIDatabaseVulnerabilityAssessmentRuleBaseline output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT managedDatabaseVulnerabilityAssessmentRuleBaselinesGetSignal(output);
        Q_EMIT managedDatabaseVulnerabilityAssessmentRuleBaselinesGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT managedDatabaseVulnerabilityAssessmentRuleBaselinesGetSignalE(output, error_type, error_str);
        Q_EMIT managedDatabaseVulnerabilityAssessmentRuleBaselinesGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT managedDatabaseVulnerabilityAssessmentRuleBaselinesGetSignalError(output, error_type, error_str);
        Q_EMIT managedDatabaseVulnerabilityAssessmentRuleBaselinesGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIManagedDatabaseVulnerabilityAssesmentRuleBaselinesApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
