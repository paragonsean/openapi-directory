/*
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2016-12-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * NetworkInterfaceAssociationSecurityRulesInnerProperties
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:32:49.514059-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NetworkInterfaceAssociationSecurityRulesInnerProperties {
  /**
   * The network traffic is allowed or denied. Possible values are: &#39;Allow&#39; and &#39;Deny&#39;.
   */
  @JsonAdapter(AccessEnum.Adapter.class)
  public enum AccessEnum {
    ALLOW("Allow"),
    
    DENY("Deny");

    private String value;

    AccessEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AccessEnum fromValue(String value) {
      for (AccessEnum b : AccessEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AccessEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AccessEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AccessEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AccessEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AccessEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ACCESS = "access";
  @SerializedName(SERIALIZED_NAME_ACCESS)
  private AccessEnum access;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DESTINATION_ADDRESS_PREFIX = "destinationAddressPrefix";
  @SerializedName(SERIALIZED_NAME_DESTINATION_ADDRESS_PREFIX)
  private String destinationAddressPrefix;

  public static final String SERIALIZED_NAME_DESTINATION_PORT_RANGE = "destinationPortRange";
  @SerializedName(SERIALIZED_NAME_DESTINATION_PORT_RANGE)
  private String destinationPortRange;

  /**
   * The direction of the rule. The direction specifies if rule will be evaluated on incoming or outgoing traffic. Possible values are: &#39;Inbound&#39; and &#39;Outbound&#39;.
   */
  @JsonAdapter(DirectionEnum.Adapter.class)
  public enum DirectionEnum {
    INBOUND("Inbound"),
    
    OUTBOUND("Outbound");

    private String value;

    DirectionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DirectionEnum fromValue(String value) {
      for (DirectionEnum b : DirectionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DirectionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DirectionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DirectionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DirectionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DirectionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DIRECTION = "direction";
  @SerializedName(SERIALIZED_NAME_DIRECTION)
  private DirectionEnum direction;

  public static final String SERIALIZED_NAME_PRIORITY = "priority";
  @SerializedName(SERIALIZED_NAME_PRIORITY)
  private Integer priority;

  /**
   * Network protocol this rule applies to. Possible values are &#39;Tcp&#39;, &#39;Udp&#39;, and &#39;*&#39;.
   */
  @JsonAdapter(ProtocolEnum.Adapter.class)
  public enum ProtocolEnum {
    TCP("Tcp"),
    
    UDP("Udp"),
    
    STAR("*");

    private String value;

    ProtocolEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProtocolEnum fromValue(String value) {
      for (ProtocolEnum b : ProtocolEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProtocolEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProtocolEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProtocolEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProtocolEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProtocolEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROTOCOL = "protocol";
  @SerializedName(SERIALIZED_NAME_PROTOCOL)
  private ProtocolEnum protocol;

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private String provisioningState;

  public static final String SERIALIZED_NAME_SOURCE_ADDRESS_PREFIX = "sourceAddressPrefix";
  @SerializedName(SERIALIZED_NAME_SOURCE_ADDRESS_PREFIX)
  private String sourceAddressPrefix;

  public static final String SERIALIZED_NAME_SOURCE_PORT_RANGE = "sourcePortRange";
  @SerializedName(SERIALIZED_NAME_SOURCE_PORT_RANGE)
  private String sourcePortRange;

  public NetworkInterfaceAssociationSecurityRulesInnerProperties() {
  }

  public NetworkInterfaceAssociationSecurityRulesInnerProperties access(AccessEnum access) {
    this.access = access;
    return this;
  }

  /**
   * The network traffic is allowed or denied. Possible values are: &#39;Allow&#39; and &#39;Deny&#39;.
   * @return access
   */
  @javax.annotation.Nonnull
  public AccessEnum getAccess() {
    return access;
  }

  public void setAccess(AccessEnum access) {
    this.access = access;
  }


  public NetworkInterfaceAssociationSecurityRulesInnerProperties description(String description) {
    this.description = description;
    return this;
  }

  /**
   * A description for this rule. Restricted to 140 chars.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public NetworkInterfaceAssociationSecurityRulesInnerProperties destinationAddressPrefix(String destinationAddressPrefix) {
    this.destinationAddressPrefix = destinationAddressPrefix;
    return this;
  }

  /**
   * The destination address prefix. CIDR or source IP range. Asterisk &#39;*&#39; can also be used to match all source IPs. Default tags such as &#39;VirtualNetwork&#39;, &#39;AzureLoadBalancer&#39; and &#39;Internet&#39; can also be used.
   * @return destinationAddressPrefix
   */
  @javax.annotation.Nonnull
  public String getDestinationAddressPrefix() {
    return destinationAddressPrefix;
  }

  public void setDestinationAddressPrefix(String destinationAddressPrefix) {
    this.destinationAddressPrefix = destinationAddressPrefix;
  }


  public NetworkInterfaceAssociationSecurityRulesInnerProperties destinationPortRange(String destinationPortRange) {
    this.destinationPortRange = destinationPortRange;
    return this;
  }

  /**
   * The destination port or range. Integer or range between 0 and 65535. Asterisk &#39;*&#39; can also be used to match all ports.
   * @return destinationPortRange
   */
  @javax.annotation.Nullable
  public String getDestinationPortRange() {
    return destinationPortRange;
  }

  public void setDestinationPortRange(String destinationPortRange) {
    this.destinationPortRange = destinationPortRange;
  }


  public NetworkInterfaceAssociationSecurityRulesInnerProperties direction(DirectionEnum direction) {
    this.direction = direction;
    return this;
  }

  /**
   * The direction of the rule. The direction specifies if rule will be evaluated on incoming or outgoing traffic. Possible values are: &#39;Inbound&#39; and &#39;Outbound&#39;.
   * @return direction
   */
  @javax.annotation.Nonnull
  public DirectionEnum getDirection() {
    return direction;
  }

  public void setDirection(DirectionEnum direction) {
    this.direction = direction;
  }


  public NetworkInterfaceAssociationSecurityRulesInnerProperties priority(Integer priority) {
    this.priority = priority;
    return this;
  }

  /**
   * The priority of the rule. The value can be between 100 and 4096. The priority number must be unique for each rule in the collection. The lower the priority number, the higher the priority of the rule.
   * @return priority
   */
  @javax.annotation.Nullable
  public Integer getPriority() {
    return priority;
  }

  public void setPriority(Integer priority) {
    this.priority = priority;
  }


  public NetworkInterfaceAssociationSecurityRulesInnerProperties protocol(ProtocolEnum protocol) {
    this.protocol = protocol;
    return this;
  }

  /**
   * Network protocol this rule applies to. Possible values are &#39;Tcp&#39;, &#39;Udp&#39;, and &#39;*&#39;.
   * @return protocol
   */
  @javax.annotation.Nonnull
  public ProtocolEnum getProtocol() {
    return protocol;
  }

  public void setProtocol(ProtocolEnum protocol) {
    this.protocol = protocol;
  }


  public NetworkInterfaceAssociationSecurityRulesInnerProperties provisioningState(String provisioningState) {
    this.provisioningState = provisioningState;
    return this;
  }

  /**
   * The provisioning state of the public IP resource. Possible values are: &#39;Updating&#39;, &#39;Deleting&#39;, and &#39;Failed&#39;.
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public String getProvisioningState() {
    return provisioningState;
  }

  public void setProvisioningState(String provisioningState) {
    this.provisioningState = provisioningState;
  }


  public NetworkInterfaceAssociationSecurityRulesInnerProperties sourceAddressPrefix(String sourceAddressPrefix) {
    this.sourceAddressPrefix = sourceAddressPrefix;
    return this;
  }

  /**
   * The CIDR or source IP range. Asterisk &#39;*&#39; can also be used to match all source IPs. Default tags such as &#39;VirtualNetwork&#39;, &#39;AzureLoadBalancer&#39; and &#39;Internet&#39; can also be used. If this is an ingress rule, specifies where network traffic originates from. 
   * @return sourceAddressPrefix
   */
  @javax.annotation.Nonnull
  public String getSourceAddressPrefix() {
    return sourceAddressPrefix;
  }

  public void setSourceAddressPrefix(String sourceAddressPrefix) {
    this.sourceAddressPrefix = sourceAddressPrefix;
  }


  public NetworkInterfaceAssociationSecurityRulesInnerProperties sourcePortRange(String sourcePortRange) {
    this.sourcePortRange = sourcePortRange;
    return this;
  }

  /**
   * The source port or range. Integer or range between 0 and 65535. Asterisk &#39;*&#39; can also be used to match all ports.
   * @return sourcePortRange
   */
  @javax.annotation.Nullable
  public String getSourcePortRange() {
    return sourcePortRange;
  }

  public void setSourcePortRange(String sourcePortRange) {
    this.sourcePortRange = sourcePortRange;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NetworkInterfaceAssociationSecurityRulesInnerProperties networkInterfaceAssociationSecurityRulesInnerProperties = (NetworkInterfaceAssociationSecurityRulesInnerProperties) o;
    return Objects.equals(this.access, networkInterfaceAssociationSecurityRulesInnerProperties.access) &&
        Objects.equals(this.description, networkInterfaceAssociationSecurityRulesInnerProperties.description) &&
        Objects.equals(this.destinationAddressPrefix, networkInterfaceAssociationSecurityRulesInnerProperties.destinationAddressPrefix) &&
        Objects.equals(this.destinationPortRange, networkInterfaceAssociationSecurityRulesInnerProperties.destinationPortRange) &&
        Objects.equals(this.direction, networkInterfaceAssociationSecurityRulesInnerProperties.direction) &&
        Objects.equals(this.priority, networkInterfaceAssociationSecurityRulesInnerProperties.priority) &&
        Objects.equals(this.protocol, networkInterfaceAssociationSecurityRulesInnerProperties.protocol) &&
        Objects.equals(this.provisioningState, networkInterfaceAssociationSecurityRulesInnerProperties.provisioningState) &&
        Objects.equals(this.sourceAddressPrefix, networkInterfaceAssociationSecurityRulesInnerProperties.sourceAddressPrefix) &&
        Objects.equals(this.sourcePortRange, networkInterfaceAssociationSecurityRulesInnerProperties.sourcePortRange);
  }

  @Override
  public int hashCode() {
    return Objects.hash(access, description, destinationAddressPrefix, destinationPortRange, direction, priority, protocol, provisioningState, sourceAddressPrefix, sourcePortRange);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NetworkInterfaceAssociationSecurityRulesInnerProperties {\n");
    sb.append("    access: ").append(toIndentedString(access)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    destinationAddressPrefix: ").append(toIndentedString(destinationAddressPrefix)).append("\n");
    sb.append("    destinationPortRange: ").append(toIndentedString(destinationPortRange)).append("\n");
    sb.append("    direction: ").append(toIndentedString(direction)).append("\n");
    sb.append("    priority: ").append(toIndentedString(priority)).append("\n");
    sb.append("    protocol: ").append(toIndentedString(protocol)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("    sourceAddressPrefix: ").append(toIndentedString(sourceAddressPrefix)).append("\n");
    sb.append("    sourcePortRange: ").append(toIndentedString(sourcePortRange)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("access");
    openapiFields.add("description");
    openapiFields.add("destinationAddressPrefix");
    openapiFields.add("destinationPortRange");
    openapiFields.add("direction");
    openapiFields.add("priority");
    openapiFields.add("protocol");
    openapiFields.add("provisioningState");
    openapiFields.add("sourceAddressPrefix");
    openapiFields.add("sourcePortRange");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("access");
    openapiRequiredFields.add("destinationAddressPrefix");
    openapiRequiredFields.add("direction");
    openapiRequiredFields.add("protocol");
    openapiRequiredFields.add("sourceAddressPrefix");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NetworkInterfaceAssociationSecurityRulesInnerProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NetworkInterfaceAssociationSecurityRulesInnerProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NetworkInterfaceAssociationSecurityRulesInnerProperties is not found in the empty JSON string", NetworkInterfaceAssociationSecurityRulesInnerProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NetworkInterfaceAssociationSecurityRulesInnerProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NetworkInterfaceAssociationSecurityRulesInnerProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : NetworkInterfaceAssociationSecurityRulesInnerProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("access").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `access` to be a primitive type in the JSON string but got `%s`", jsonObj.get("access").toString()));
      }
      // validate the required field `access`
      AccessEnum.validateJsonElement(jsonObj.get("access"));
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("destinationAddressPrefix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `destinationAddressPrefix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("destinationAddressPrefix").toString()));
      }
      if ((jsonObj.get("destinationPortRange") != null && !jsonObj.get("destinationPortRange").isJsonNull()) && !jsonObj.get("destinationPortRange").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `destinationPortRange` to be a primitive type in the JSON string but got `%s`", jsonObj.get("destinationPortRange").toString()));
      }
      if (!jsonObj.get("direction").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `direction` to be a primitive type in the JSON string but got `%s`", jsonObj.get("direction").toString()));
      }
      // validate the required field `direction`
      DirectionEnum.validateJsonElement(jsonObj.get("direction"));
      if (!jsonObj.get("protocol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `protocol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("protocol").toString()));
      }
      // validate the required field `protocol`
      ProtocolEnum.validateJsonElement(jsonObj.get("protocol"));
      if ((jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) && !jsonObj.get("provisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningState").toString()));
      }
      if (!jsonObj.get("sourceAddressPrefix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceAddressPrefix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceAddressPrefix").toString()));
      }
      if ((jsonObj.get("sourcePortRange") != null && !jsonObj.get("sourcePortRange").isJsonNull()) && !jsonObj.get("sourcePortRange").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourcePortRange` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourcePortRange").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NetworkInterfaceAssociationSecurityRulesInnerProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NetworkInterfaceAssociationSecurityRulesInnerProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NetworkInterfaceAssociationSecurityRulesInnerProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NetworkInterfaceAssociationSecurityRulesInnerProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<NetworkInterfaceAssociationSecurityRulesInnerProperties>() {
           @Override
           public void write(JsonWriter out, NetworkInterfaceAssociationSecurityRulesInnerProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NetworkInterfaceAssociationSecurityRulesInnerProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NetworkInterfaceAssociationSecurityRulesInnerProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NetworkInterfaceAssociationSecurityRulesInnerProperties
   * @throws IOException if the JSON string is invalid with respect to NetworkInterfaceAssociationSecurityRulesInnerProperties
   */
  public static NetworkInterfaceAssociationSecurityRulesInnerProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NetworkInterfaceAssociationSecurityRulesInnerProperties.class);
  }

  /**
   * Convert an instance of NetworkInterfaceAssociationSecurityRulesInnerProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

