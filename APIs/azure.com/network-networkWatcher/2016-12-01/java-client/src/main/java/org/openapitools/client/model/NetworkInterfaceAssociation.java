/*
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2016-12-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.NetworkInterfaceAssociationSecurityRulesInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Network interface and its custom security rules.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:32:49.514059-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NetworkInterfaceAssociation {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_SECURITY_RULES = "securityRules";
  @SerializedName(SERIALIZED_NAME_SECURITY_RULES)
  private List<NetworkInterfaceAssociationSecurityRulesInner> securityRules = new ArrayList<>();

  public NetworkInterfaceAssociation() {
  }

  public NetworkInterfaceAssociation(
     String id
  ) {
    this();
    this.id = id;
  }

  /**
   * Network interface ID.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }



  public NetworkInterfaceAssociation securityRules(List<NetworkInterfaceAssociationSecurityRulesInner> securityRules) {
    this.securityRules = securityRules;
    return this;
  }

  public NetworkInterfaceAssociation addSecurityRulesItem(NetworkInterfaceAssociationSecurityRulesInner securityRulesItem) {
    if (this.securityRules == null) {
      this.securityRules = new ArrayList<>();
    }
    this.securityRules.add(securityRulesItem);
    return this;
  }

  /**
   * Collection of custom security rules.
   * @return securityRules
   */
  @javax.annotation.Nullable
  public List<NetworkInterfaceAssociationSecurityRulesInner> getSecurityRules() {
    return securityRules;
  }

  public void setSecurityRules(List<NetworkInterfaceAssociationSecurityRulesInner> securityRules) {
    this.securityRules = securityRules;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NetworkInterfaceAssociation networkInterfaceAssociation = (NetworkInterfaceAssociation) o;
    return Objects.equals(this.id, networkInterfaceAssociation.id) &&
        Objects.equals(this.securityRules, networkInterfaceAssociation.securityRules);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, securityRules);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NetworkInterfaceAssociation {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    securityRules: ").append(toIndentedString(securityRules)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("securityRules");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NetworkInterfaceAssociation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NetworkInterfaceAssociation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NetworkInterfaceAssociation is not found in the empty JSON string", NetworkInterfaceAssociation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NetworkInterfaceAssociation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NetworkInterfaceAssociation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (jsonObj.get("securityRules") != null && !jsonObj.get("securityRules").isJsonNull()) {
        JsonArray jsonArraysecurityRules = jsonObj.getAsJsonArray("securityRules");
        if (jsonArraysecurityRules != null) {
          // ensure the json data is an array
          if (!jsonObj.get("securityRules").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `securityRules` to be an array in the JSON string but got `%s`", jsonObj.get("securityRules").toString()));
          }

          // validate the optional field `securityRules` (array)
          for (int i = 0; i < jsonArraysecurityRules.size(); i++) {
            NetworkInterfaceAssociationSecurityRulesInner.validateJsonElement(jsonArraysecurityRules.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NetworkInterfaceAssociation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NetworkInterfaceAssociation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NetworkInterfaceAssociation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NetworkInterfaceAssociation.class));

       return (TypeAdapter<T>) new TypeAdapter<NetworkInterfaceAssociation>() {
           @Override
           public void write(JsonWriter out, NetworkInterfaceAssociation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NetworkInterfaceAssociation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NetworkInterfaceAssociation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NetworkInterfaceAssociation
   * @throws IOException if the JSON string is invalid with respect to NetworkInterfaceAssociation
   */
  public static NetworkInterfaceAssociation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NetworkInterfaceAssociation.class);
  }

  /**
   * Convert an instance of NetworkInterfaceAssociation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

