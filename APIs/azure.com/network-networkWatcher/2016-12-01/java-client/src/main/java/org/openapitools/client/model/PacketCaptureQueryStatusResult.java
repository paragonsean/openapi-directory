/*
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2016-12-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Status of packet capture session.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:32:49.514059-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PacketCaptureQueryStatusResult {
  public static final String SERIALIZED_NAME_CAPTURE_START_TIME = "captureStartTime";
  @SerializedName(SERIALIZED_NAME_CAPTURE_START_TIME)
  private OffsetDateTime captureStartTime;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  /**
   * Gets or Sets packetCaptureError
   */
  @JsonAdapter(PacketCaptureErrorEnum.Adapter.class)
  public enum PacketCaptureErrorEnum {
    INTERNAL_ERROR("InternalError"),
    
    AGENT_STOPPED("AgentStopped"),
    
    CAPTURE_FAILED("CaptureFailed"),
    
    LOCAL_FILE_FAILED("LocalFileFailed"),
    
    STORAGE_FAILED("StorageFailed");

    private String value;

    PacketCaptureErrorEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PacketCaptureErrorEnum fromValue(String value) {
      for (PacketCaptureErrorEnum b : PacketCaptureErrorEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PacketCaptureErrorEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PacketCaptureErrorEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PacketCaptureErrorEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PacketCaptureErrorEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PacketCaptureErrorEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PACKET_CAPTURE_ERROR = "packetCaptureError";
  @SerializedName(SERIALIZED_NAME_PACKET_CAPTURE_ERROR)
  private List<PacketCaptureErrorEnum> packetCaptureError = new ArrayList<>();

  /**
   * The status of the packet capture session.
   */
  @JsonAdapter(PacketCaptureStatusEnum.Adapter.class)
  public enum PacketCaptureStatusEnum {
    NOT_STARTED("NotStarted"),
    
    RUNNING("Running"),
    
    STOPPED("Stopped"),
    
    ERROR("Error"),
    
    UNKNOWN("Unknown");

    private String value;

    PacketCaptureStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PacketCaptureStatusEnum fromValue(String value) {
      for (PacketCaptureStatusEnum b : PacketCaptureStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PacketCaptureStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PacketCaptureStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PacketCaptureStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PacketCaptureStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PacketCaptureStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PACKET_CAPTURE_STATUS = "packetCaptureStatus";
  @SerializedName(SERIALIZED_NAME_PACKET_CAPTURE_STATUS)
  private PacketCaptureStatusEnum packetCaptureStatus;

  public static final String SERIALIZED_NAME_STOP_REASON = "stopReason";
  @SerializedName(SERIALIZED_NAME_STOP_REASON)
  private String stopReason;

  public PacketCaptureQueryStatusResult() {
  }

  public PacketCaptureQueryStatusResult captureStartTime(OffsetDateTime captureStartTime) {
    this.captureStartTime = captureStartTime;
    return this;
  }

  /**
   * The start time of the packet capture session.
   * @return captureStartTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCaptureStartTime() {
    return captureStartTime;
  }

  public void setCaptureStartTime(OffsetDateTime captureStartTime) {
    this.captureStartTime = captureStartTime;
  }


  public PacketCaptureQueryStatusResult id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The ID of the packet capture resource.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public PacketCaptureQueryStatusResult name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the packet capture resource.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public PacketCaptureQueryStatusResult packetCaptureError(List<PacketCaptureErrorEnum> packetCaptureError) {
    this.packetCaptureError = packetCaptureError;
    return this;
  }

  public PacketCaptureQueryStatusResult addPacketCaptureErrorItem(PacketCaptureErrorEnum packetCaptureErrorItem) {
    if (this.packetCaptureError == null) {
      this.packetCaptureError = new ArrayList<>();
    }
    this.packetCaptureError.add(packetCaptureErrorItem);
    return this;
  }

  /**
   * List of errors of packet capture session.
   * @return packetCaptureError
   */
  @javax.annotation.Nullable
  public List<PacketCaptureErrorEnum> getPacketCaptureError() {
    return packetCaptureError;
  }

  public void setPacketCaptureError(List<PacketCaptureErrorEnum> packetCaptureError) {
    this.packetCaptureError = packetCaptureError;
  }


  public PacketCaptureQueryStatusResult packetCaptureStatus(PacketCaptureStatusEnum packetCaptureStatus) {
    this.packetCaptureStatus = packetCaptureStatus;
    return this;
  }

  /**
   * The status of the packet capture session.
   * @return packetCaptureStatus
   */
  @javax.annotation.Nullable
  public PacketCaptureStatusEnum getPacketCaptureStatus() {
    return packetCaptureStatus;
  }

  public void setPacketCaptureStatus(PacketCaptureStatusEnum packetCaptureStatus) {
    this.packetCaptureStatus = packetCaptureStatus;
  }


  public PacketCaptureQueryStatusResult stopReason(String stopReason) {
    this.stopReason = stopReason;
    return this;
  }

  /**
   * The reason the current packet capture session was stopped.
   * @return stopReason
   */
  @javax.annotation.Nullable
  public String getStopReason() {
    return stopReason;
  }

  public void setStopReason(String stopReason) {
    this.stopReason = stopReason;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PacketCaptureQueryStatusResult packetCaptureQueryStatusResult = (PacketCaptureQueryStatusResult) o;
    return Objects.equals(this.captureStartTime, packetCaptureQueryStatusResult.captureStartTime) &&
        Objects.equals(this.id, packetCaptureQueryStatusResult.id) &&
        Objects.equals(this.name, packetCaptureQueryStatusResult.name) &&
        Objects.equals(this.packetCaptureError, packetCaptureQueryStatusResult.packetCaptureError) &&
        Objects.equals(this.packetCaptureStatus, packetCaptureQueryStatusResult.packetCaptureStatus) &&
        Objects.equals(this.stopReason, packetCaptureQueryStatusResult.stopReason);
  }

  @Override
  public int hashCode() {
    return Objects.hash(captureStartTime, id, name, packetCaptureError, packetCaptureStatus, stopReason);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PacketCaptureQueryStatusResult {\n");
    sb.append("    captureStartTime: ").append(toIndentedString(captureStartTime)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    packetCaptureError: ").append(toIndentedString(packetCaptureError)).append("\n");
    sb.append("    packetCaptureStatus: ").append(toIndentedString(packetCaptureStatus)).append("\n");
    sb.append("    stopReason: ").append(toIndentedString(stopReason)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("captureStartTime");
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("packetCaptureError");
    openapiFields.add("packetCaptureStatus");
    openapiFields.add("stopReason");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PacketCaptureQueryStatusResult
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PacketCaptureQueryStatusResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PacketCaptureQueryStatusResult is not found in the empty JSON string", PacketCaptureQueryStatusResult.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PacketCaptureQueryStatusResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PacketCaptureQueryStatusResult` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("packetCaptureError") != null && !jsonObj.get("packetCaptureError").isJsonNull() && !jsonObj.get("packetCaptureError").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `packetCaptureError` to be an array in the JSON string but got `%s`", jsonObj.get("packetCaptureError").toString()));
      }
      if ((jsonObj.get("packetCaptureStatus") != null && !jsonObj.get("packetCaptureStatus").isJsonNull()) && !jsonObj.get("packetCaptureStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `packetCaptureStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("packetCaptureStatus").toString()));
      }
      // validate the optional field `packetCaptureStatus`
      if (jsonObj.get("packetCaptureStatus") != null && !jsonObj.get("packetCaptureStatus").isJsonNull()) {
        PacketCaptureStatusEnum.validateJsonElement(jsonObj.get("packetCaptureStatus"));
      }
      if ((jsonObj.get("stopReason") != null && !jsonObj.get("stopReason").isJsonNull()) && !jsonObj.get("stopReason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stopReason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stopReason").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PacketCaptureQueryStatusResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PacketCaptureQueryStatusResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PacketCaptureQueryStatusResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PacketCaptureQueryStatusResult.class));

       return (TypeAdapter<T>) new TypeAdapter<PacketCaptureQueryStatusResult>() {
           @Override
           public void write(JsonWriter out, PacketCaptureQueryStatusResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PacketCaptureQueryStatusResult read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PacketCaptureQueryStatusResult given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PacketCaptureQueryStatusResult
   * @throws IOException if the JSON string is invalid with respect to PacketCaptureQueryStatusResult
   */
  public static PacketCaptureQueryStatusResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PacketCaptureQueryStatusResult.class);
  }

  /**
   * Convert an instance of PacketCaptureQueryStatusResult to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

