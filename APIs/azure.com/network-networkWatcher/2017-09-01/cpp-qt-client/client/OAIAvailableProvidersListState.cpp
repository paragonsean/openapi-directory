/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2017-09-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAvailableProvidersListState.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAvailableProvidersListState::OAIAvailableProvidersListState(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAvailableProvidersListState::OAIAvailableProvidersListState() {
    this->initializeModel();
}

OAIAvailableProvidersListState::~OAIAvailableProvidersListState() {}

void OAIAvailableProvidersListState::initializeModel() {

    m_cities_isSet = false;
    m_cities_isValid = false;

    m_providers_isSet = false;
    m_providers_isValid = false;

    m_state_name_isSet = false;
    m_state_name_isValid = false;
}

void OAIAvailableProvidersListState::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAvailableProvidersListState::fromJsonObject(QJsonObject json) {

    m_cities_isValid = ::OpenAPI::fromJsonValue(m_cities, json[QString("cities")]);
    m_cities_isSet = !json[QString("cities")].isNull() && m_cities_isValid;

    m_providers_isValid = ::OpenAPI::fromJsonValue(m_providers, json[QString("providers")]);
    m_providers_isSet = !json[QString("providers")].isNull() && m_providers_isValid;

    m_state_name_isValid = ::OpenAPI::fromJsonValue(m_state_name, json[QString("stateName")]);
    m_state_name_isSet = !json[QString("stateName")].isNull() && m_state_name_isValid;
}

QString OAIAvailableProvidersListState::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAvailableProvidersListState::asJsonObject() const {
    QJsonObject obj;
    if (m_cities.size() > 0) {
        obj.insert(QString("cities"), ::OpenAPI::toJsonValue(m_cities));
    }
    if (m_providers.size() > 0) {
        obj.insert(QString("providers"), ::OpenAPI::toJsonValue(m_providers));
    }
    if (m_state_name_isSet) {
        obj.insert(QString("stateName"), ::OpenAPI::toJsonValue(m_state_name));
    }
    return obj;
}

QList<OAIAvailableProvidersListCity> OAIAvailableProvidersListState::getCities() const {
    return m_cities;
}
void OAIAvailableProvidersListState::setCities(const QList<OAIAvailableProvidersListCity> &cities) {
    m_cities = cities;
    m_cities_isSet = true;
}

bool OAIAvailableProvidersListState::is_cities_Set() const{
    return m_cities_isSet;
}

bool OAIAvailableProvidersListState::is_cities_Valid() const{
    return m_cities_isValid;
}

QList<QString> OAIAvailableProvidersListState::getProviders() const {
    return m_providers;
}
void OAIAvailableProvidersListState::setProviders(const QList<QString> &providers) {
    m_providers = providers;
    m_providers_isSet = true;
}

bool OAIAvailableProvidersListState::is_providers_Set() const{
    return m_providers_isSet;
}

bool OAIAvailableProvidersListState::is_providers_Valid() const{
    return m_providers_isValid;
}

QString OAIAvailableProvidersListState::getStateName() const {
    return m_state_name;
}
void OAIAvailableProvidersListState::setStateName(const QString &state_name) {
    m_state_name = state_name;
    m_state_name_isSet = true;
}

bool OAIAvailableProvidersListState::is_state_name_Set() const{
    return m_state_name_isSet;
}

bool OAIAvailableProvidersListState::is_state_name_Valid() const{
    return m_state_name_isValid;
}

bool OAIAvailableProvidersListState::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cities.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_providers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAvailableProvidersListState::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
