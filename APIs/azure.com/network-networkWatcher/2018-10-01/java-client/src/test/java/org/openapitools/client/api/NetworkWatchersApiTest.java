/*
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2018-10-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AvailableProvidersList;
import org.openapitools.client.model.AvailableProvidersListParameters;
import org.openapitools.client.model.AzureReachabilityReport;
import org.openapitools.client.model.AzureReachabilityReportParameters;
import org.openapitools.client.model.ConnectivityInformation;
import org.openapitools.client.model.ConnectivityParameters;
import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.FlowLogInformation;
import org.openapitools.client.model.FlowLogStatusParameters;
import org.openapitools.client.model.NetworkConfigurationDiagnosticParameters;
import org.openapitools.client.model.NetworkConfigurationDiagnosticResponse;
import org.openapitools.client.model.NetworkWatcher;
import org.openapitools.client.model.NetworkWatcherListResult;
import org.openapitools.client.model.NetworkWatchersUpdateTagsRequest;
import org.openapitools.client.model.NextHopParameters;
import org.openapitools.client.model.NextHopResult;
import org.openapitools.client.model.QueryTroubleshootingParameters;
import org.openapitools.client.model.SecurityGroupViewParameters;
import org.openapitools.client.model.SecurityGroupViewResult;
import org.openapitools.client.model.Topology;
import org.openapitools.client.model.TopologyParameters;
import org.openapitools.client.model.TroubleshootingParameters;
import org.openapitools.client.model.TroubleshootingResult;
import org.openapitools.client.model.VerificationIPFlowParameters;
import org.openapitools.client.model.VerificationIPFlowResult;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for NetworkWatchersApi
 */
@Disabled
public class NetworkWatchersApiTest {

    private final NetworkWatchersApi api = new NetworkWatchersApi();

    /**
     * Verifies the possibility of establishing a direct TCP connection from a virtual machine to a given endpoint including another VM or an arbitrary remote server.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void networkWatchersCheckConnectivityTest() throws ApiException {
        String resourceGroupName = null;
        String networkWatcherName = null;
        String apiVersion = null;
        String subscriptionId = null;
        ConnectivityParameters parameters = null;
        ConnectivityInformation response = api.networkWatchersCheckConnectivity(resourceGroupName, networkWatcherName, apiVersion, subscriptionId, parameters);
        // TODO: test validations
    }

    /**
     * Creates or updates a network watcher in the specified resource group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void networkWatchersCreateOrUpdateTest() throws ApiException {
        String resourceGroupName = null;
        String networkWatcherName = null;
        String apiVersion = null;
        String subscriptionId = null;
        NetworkWatcher parameters = null;
        NetworkWatcher response = api.networkWatchersCreateOrUpdate(resourceGroupName, networkWatcherName, apiVersion, subscriptionId, parameters);
        // TODO: test validations
    }

    /**
     * Deletes the specified network watcher resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void networkWatchersDeleteTest() throws ApiException {
        String resourceGroupName = null;
        String networkWatcherName = null;
        String apiVersion = null;
        String subscriptionId = null;
        api.networkWatchersDelete(resourceGroupName, networkWatcherName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Gets the specified network watcher by resource group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void networkWatchersGetTest() throws ApiException {
        String resourceGroupName = null;
        String networkWatcherName = null;
        String apiVersion = null;
        String subscriptionId = null;
        NetworkWatcher response = api.networkWatchersGet(resourceGroupName, networkWatcherName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Gets the relative latency score for internet service providers from a specified location to Azure regions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void networkWatchersGetAzureReachabilityReportTest() throws ApiException {
        String resourceGroupName = null;
        String networkWatcherName = null;
        String apiVersion = null;
        String subscriptionId = null;
        AzureReachabilityReportParameters parameters = null;
        AzureReachabilityReport response = api.networkWatchersGetAzureReachabilityReport(resourceGroupName, networkWatcherName, apiVersion, subscriptionId, parameters);
        // TODO: test validations
    }

    /**
     * Queries status of flow log and traffic analytics (optional) on a specified resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void networkWatchersGetFlowLogStatusTest() throws ApiException {
        String resourceGroupName = null;
        String networkWatcherName = null;
        String apiVersion = null;
        String subscriptionId = null;
        FlowLogStatusParameters parameters = null;
        FlowLogInformation response = api.networkWatchersGetFlowLogStatus(resourceGroupName, networkWatcherName, apiVersion, subscriptionId, parameters);
        // TODO: test validations
    }

    /**
     * Get network configuration diagnostic.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void networkWatchersGetNetworkConfigurationDiagnosticTest() throws ApiException {
        String resourceGroupName = null;
        String networkWatcherName = null;
        String apiVersion = null;
        String subscriptionId = null;
        NetworkConfigurationDiagnosticParameters parameters = null;
        NetworkConfigurationDiagnosticResponse response = api.networkWatchersGetNetworkConfigurationDiagnostic(resourceGroupName, networkWatcherName, apiVersion, subscriptionId, parameters);
        // TODO: test validations
    }

    /**
     * Gets the next hop from the specified VM.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void networkWatchersGetNextHopTest() throws ApiException {
        String resourceGroupName = null;
        String networkWatcherName = null;
        String apiVersion = null;
        String subscriptionId = null;
        NextHopParameters parameters = null;
        NextHopResult response = api.networkWatchersGetNextHop(resourceGroupName, networkWatcherName, apiVersion, subscriptionId, parameters);
        // TODO: test validations
    }

    /**
     * Gets the current network topology by resource group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void networkWatchersGetTopologyTest() throws ApiException {
        String resourceGroupName = null;
        String networkWatcherName = null;
        String apiVersion = null;
        String subscriptionId = null;
        TopologyParameters parameters = null;
        Topology response = api.networkWatchersGetTopology(resourceGroupName, networkWatcherName, apiVersion, subscriptionId, parameters);
        // TODO: test validations
    }

    /**
     * Initiate troubleshooting on a specified resource
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void networkWatchersGetTroubleshootingTest() throws ApiException {
        String resourceGroupName = null;
        String networkWatcherName = null;
        String apiVersion = null;
        String subscriptionId = null;
        TroubleshootingParameters parameters = null;
        TroubleshootingResult response = api.networkWatchersGetTroubleshooting(resourceGroupName, networkWatcherName, apiVersion, subscriptionId, parameters);
        // TODO: test validations
    }

    /**
     * Get the last completed troubleshooting result on a specified resource
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void networkWatchersGetTroubleshootingResultTest() throws ApiException {
        String resourceGroupName = null;
        String networkWatcherName = null;
        String apiVersion = null;
        String subscriptionId = null;
        QueryTroubleshootingParameters parameters = null;
        TroubleshootingResult response = api.networkWatchersGetTroubleshootingResult(resourceGroupName, networkWatcherName, apiVersion, subscriptionId, parameters);
        // TODO: test validations
    }

    /**
     * Gets the configured and effective security group rules on the specified VM.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void networkWatchersGetVMSecurityRulesTest() throws ApiException {
        String resourceGroupName = null;
        String networkWatcherName = null;
        String apiVersion = null;
        String subscriptionId = null;
        SecurityGroupViewParameters parameters = null;
        SecurityGroupViewResult response = api.networkWatchersGetVMSecurityRules(resourceGroupName, networkWatcherName, apiVersion, subscriptionId, parameters);
        // TODO: test validations
    }

    /**
     * Gets all network watchers by resource group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void networkWatchersListTest() throws ApiException {
        String resourceGroupName = null;
        String apiVersion = null;
        String subscriptionId = null;
        NetworkWatcherListResult response = api.networkWatchersList(resourceGroupName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Gets all network watchers by subscription.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void networkWatchersListAllTest() throws ApiException {
        String apiVersion = null;
        String subscriptionId = null;
        NetworkWatcherListResult response = api.networkWatchersListAll(apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Lists all available internet service providers for a specified Azure region.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void networkWatchersListAvailableProvidersTest() throws ApiException {
        String resourceGroupName = null;
        String networkWatcherName = null;
        String apiVersion = null;
        String subscriptionId = null;
        AvailableProvidersListParameters parameters = null;
        AvailableProvidersList response = api.networkWatchersListAvailableProviders(resourceGroupName, networkWatcherName, apiVersion, subscriptionId, parameters);
        // TODO: test validations
    }

    /**
     * Configures flow log  and traffic analytics (optional) on a specified resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void networkWatchersSetFlowLogConfigurationTest() throws ApiException {
        String resourceGroupName = null;
        String networkWatcherName = null;
        String apiVersion = null;
        String subscriptionId = null;
        FlowLogInformation parameters = null;
        FlowLogInformation response = api.networkWatchersSetFlowLogConfiguration(resourceGroupName, networkWatcherName, apiVersion, subscriptionId, parameters);
        // TODO: test validations
    }

    /**
     * Updates a network watcher tags.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void networkWatchersUpdateTagsTest() throws ApiException {
        String resourceGroupName = null;
        String networkWatcherName = null;
        String apiVersion = null;
        String subscriptionId = null;
        NetworkWatchersUpdateTagsRequest parameters = null;
        NetworkWatcher response = api.networkWatchersUpdateTags(resourceGroupName, networkWatcherName, apiVersion, subscriptionId, parameters);
        // TODO: test validations
    }

    /**
     * Verify IP flow from the specified VM to a location given the currently configured NSG rules.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void networkWatchersVerifyIPFlowTest() throws ApiException {
        String resourceGroupName = null;
        String networkWatcherName = null;
        String apiVersion = null;
        String subscriptionId = null;
        VerificationIPFlowParameters parameters = null;
        VerificationIPFlowResult response = api.networkWatchersVerifyIPFlow(resourceGroupName, networkWatcherName, apiVersion, subscriptionId, parameters);
        // TODO: test validations
    }

}
