/*
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2018-10-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.PacketCapture;
import org.openapitools.client.model.PacketCaptureListResult;
import org.openapitools.client.model.PacketCaptureQueryStatusResult;
import org.openapitools.client.model.PacketCaptureResult;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PacketCapturesApi
 */
@Disabled
public class PacketCapturesApiTest {

    private final PacketCapturesApi api = new PacketCapturesApi();

    /**
     * Create and start a packet capture on the specified VM.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void packetCapturesCreateTest() throws ApiException {
        String resourceGroupName = null;
        String networkWatcherName = null;
        String packetCaptureName = null;
        String apiVersion = null;
        String subscriptionId = null;
        PacketCapture parameters = null;
        PacketCaptureResult response = api.packetCapturesCreate(resourceGroupName, networkWatcherName, packetCaptureName, apiVersion, subscriptionId, parameters);
        // TODO: test validations
    }

    /**
     * Deletes the specified packet capture session.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void packetCapturesDeleteTest() throws ApiException {
        String resourceGroupName = null;
        String networkWatcherName = null;
        String packetCaptureName = null;
        String apiVersion = null;
        String subscriptionId = null;
        api.packetCapturesDelete(resourceGroupName, networkWatcherName, packetCaptureName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Gets a packet capture session by name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void packetCapturesGetTest() throws ApiException {
        String resourceGroupName = null;
        String networkWatcherName = null;
        String packetCaptureName = null;
        String apiVersion = null;
        String subscriptionId = null;
        PacketCaptureResult response = api.packetCapturesGet(resourceGroupName, networkWatcherName, packetCaptureName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Query the status of a running packet capture session.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void packetCapturesGetStatusTest() throws ApiException {
        String resourceGroupName = null;
        String networkWatcherName = null;
        String packetCaptureName = null;
        String apiVersion = null;
        String subscriptionId = null;
        PacketCaptureQueryStatusResult response = api.packetCapturesGetStatus(resourceGroupName, networkWatcherName, packetCaptureName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Lists all packet capture sessions within the specified resource group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void packetCapturesListTest() throws ApiException {
        String resourceGroupName = null;
        String networkWatcherName = null;
        String apiVersion = null;
        String subscriptionId = null;
        PacketCaptureListResult response = api.packetCapturesList(resourceGroupName, networkWatcherName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Stops a specified packet capture session.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void packetCapturesStopTest() throws ApiException {
        String resourceGroupName = null;
        String networkWatcherName = null;
        String packetCaptureName = null;
        String apiVersion = null;
        String subscriptionId = null;
        api.packetCapturesStop(resourceGroupName, networkWatcherName, packetCaptureName, apiVersion, subscriptionId);
        // TODO: test validations
    }

}
