/*
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2018-10-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ConnectionMonitor;
import org.openapitools.client.model.ConnectionMonitorListResult;
import org.openapitools.client.model.ConnectionMonitorQueryResult;
import org.openapitools.client.model.ConnectionMonitorResult;
import org.openapitools.client.model.ErrorResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ConnectionMonitorsApi
 */
@Disabled
public class ConnectionMonitorsApiTest {

    private final ConnectionMonitorsApi api = new ConnectionMonitorsApi();

    /**
     * Create or update a connection monitor.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void connectionMonitorsCreateOrUpdateTest() throws ApiException {
        String resourceGroupName = null;
        String networkWatcherName = null;
        String connectionMonitorName = null;
        String apiVersion = null;
        String subscriptionId = null;
        ConnectionMonitor parameters = null;
        ConnectionMonitorResult response = api.connectionMonitorsCreateOrUpdate(resourceGroupName, networkWatcherName, connectionMonitorName, apiVersion, subscriptionId, parameters);
        // TODO: test validations
    }

    /**
     * Deletes the specified connection monitor.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void connectionMonitorsDeleteTest() throws ApiException {
        String resourceGroupName = null;
        String networkWatcherName = null;
        String connectionMonitorName = null;
        String apiVersion = null;
        String subscriptionId = null;
        api.connectionMonitorsDelete(resourceGroupName, networkWatcherName, connectionMonitorName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Gets a connection monitor by name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void connectionMonitorsGetTest() throws ApiException {
        String resourceGroupName = null;
        String networkWatcherName = null;
        String connectionMonitorName = null;
        String apiVersion = null;
        String subscriptionId = null;
        ConnectionMonitorResult response = api.connectionMonitorsGet(resourceGroupName, networkWatcherName, connectionMonitorName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Lists all connection monitors for the specified Network Watcher.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void connectionMonitorsListTest() throws ApiException {
        String resourceGroupName = null;
        String networkWatcherName = null;
        String apiVersion = null;
        String subscriptionId = null;
        ConnectionMonitorListResult response = api.connectionMonitorsList(resourceGroupName, networkWatcherName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Query a snapshot of the most recent connection states.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void connectionMonitorsQueryTest() throws ApiException {
        String resourceGroupName = null;
        String networkWatcherName = null;
        String connectionMonitorName = null;
        String apiVersion = null;
        String subscriptionId = null;
        ConnectionMonitorQueryResult response = api.connectionMonitorsQuery(resourceGroupName, networkWatcherName, connectionMonitorName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Starts the specified connection monitor.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void connectionMonitorsStartTest() throws ApiException {
        String resourceGroupName = null;
        String networkWatcherName = null;
        String connectionMonitorName = null;
        String apiVersion = null;
        String subscriptionId = null;
        api.connectionMonitorsStart(resourceGroupName, networkWatcherName, connectionMonitorName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Stops the specified connection monitor.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void connectionMonitorsStopTest() throws ApiException {
        String resourceGroupName = null;
        String networkWatcherName = null;
        String connectionMonitorName = null;
        String apiVersion = null;
        String subscriptionId = null;
        api.connectionMonitorsStop(resourceGroupName, networkWatcherName, connectionMonitorName, apiVersion, subscriptionId);
        // TODO: test validations
    }

}
