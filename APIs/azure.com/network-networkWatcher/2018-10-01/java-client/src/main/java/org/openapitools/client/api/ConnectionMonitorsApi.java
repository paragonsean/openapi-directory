/*
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2018-10-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ConnectionMonitor;
import org.openapitools.client.model.ConnectionMonitorListResult;
import org.openapitools.client.model.ConnectionMonitorQueryResult;
import org.openapitools.client.model.ConnectionMonitorResult;
import org.openapitools.client.model.ErrorResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ConnectionMonitorsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ConnectionMonitorsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ConnectionMonitorsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for connectionMonitorsCreateOrUpdate
     * @param resourceGroupName The name of the resource group containing Network Watcher. (required)
     * @param networkWatcherName The name of the Network Watcher resource. (required)
     * @param connectionMonitorName The name of the connection monitor. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters that define the operation to create a connection monitor. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update successful. The operation returns the resulting network watcher resource. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Create successful. The operation returns the resulting network watcher resource. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call connectionMonitorsCreateOrUpdateCall(String resourceGroupName, String networkWatcherName, String connectionMonitorName, String apiVersion, String subscriptionId, ConnectionMonitor parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/connectionMonitors/{connectionMonitorName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "networkWatcherName" + "}", localVarApiClient.escapeString(networkWatcherName.toString()))
            .replace("{" + "connectionMonitorName" + "}", localVarApiClient.escapeString(connectionMonitorName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call connectionMonitorsCreateOrUpdateValidateBeforeCall(String resourceGroupName, String networkWatcherName, String connectionMonitorName, String apiVersion, String subscriptionId, ConnectionMonitor parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling connectionMonitorsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'networkWatcherName' is set
        if (networkWatcherName == null) {
            throw new ApiException("Missing the required parameter 'networkWatcherName' when calling connectionMonitorsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'connectionMonitorName' is set
        if (connectionMonitorName == null) {
            throw new ApiException("Missing the required parameter 'connectionMonitorName' when calling connectionMonitorsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling connectionMonitorsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling connectionMonitorsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling connectionMonitorsCreateOrUpdate(Async)");
        }

        return connectionMonitorsCreateOrUpdateCall(resourceGroupName, networkWatcherName, connectionMonitorName, apiVersion, subscriptionId, parameters, _callback);

    }

    /**
     * 
     * Create or update a connection monitor.
     * @param resourceGroupName The name of the resource group containing Network Watcher. (required)
     * @param networkWatcherName The name of the Network Watcher resource. (required)
     * @param connectionMonitorName The name of the connection monitor. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters that define the operation to create a connection monitor. (required)
     * @return ConnectionMonitorResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update successful. The operation returns the resulting network watcher resource. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Create successful. The operation returns the resulting network watcher resource. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ConnectionMonitorResult connectionMonitorsCreateOrUpdate(String resourceGroupName, String networkWatcherName, String connectionMonitorName, String apiVersion, String subscriptionId, ConnectionMonitor parameters) throws ApiException {
        ApiResponse<ConnectionMonitorResult> localVarResp = connectionMonitorsCreateOrUpdateWithHttpInfo(resourceGroupName, networkWatcherName, connectionMonitorName, apiVersion, subscriptionId, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Create or update a connection monitor.
     * @param resourceGroupName The name of the resource group containing Network Watcher. (required)
     * @param networkWatcherName The name of the Network Watcher resource. (required)
     * @param connectionMonitorName The name of the connection monitor. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters that define the operation to create a connection monitor. (required)
     * @return ApiResponse&lt;ConnectionMonitorResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update successful. The operation returns the resulting network watcher resource. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Create successful. The operation returns the resulting network watcher resource. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConnectionMonitorResult> connectionMonitorsCreateOrUpdateWithHttpInfo(String resourceGroupName, String networkWatcherName, String connectionMonitorName, String apiVersion, String subscriptionId, ConnectionMonitor parameters) throws ApiException {
        okhttp3.Call localVarCall = connectionMonitorsCreateOrUpdateValidateBeforeCall(resourceGroupName, networkWatcherName, connectionMonitorName, apiVersion, subscriptionId, parameters, null);
        Type localVarReturnType = new TypeToken<ConnectionMonitorResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create or update a connection monitor.
     * @param resourceGroupName The name of the resource group containing Network Watcher. (required)
     * @param networkWatcherName The name of the Network Watcher resource. (required)
     * @param connectionMonitorName The name of the connection monitor. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters that define the operation to create a connection monitor. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update successful. The operation returns the resulting network watcher resource. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Create successful. The operation returns the resulting network watcher resource. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call connectionMonitorsCreateOrUpdateAsync(String resourceGroupName, String networkWatcherName, String connectionMonitorName, String apiVersion, String subscriptionId, ConnectionMonitor parameters, final ApiCallback<ConnectionMonitorResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = connectionMonitorsCreateOrUpdateValidateBeforeCall(resourceGroupName, networkWatcherName, connectionMonitorName, apiVersion, subscriptionId, parameters, _callback);
        Type localVarReturnType = new TypeToken<ConnectionMonitorResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for connectionMonitorsDelete
     * @param resourceGroupName The name of the resource group containing Network Watcher. (required)
     * @param networkWatcherName The name of the Network Watcher resource. (required)
     * @param connectionMonitorName The name of the connection monitor. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted. The operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Delete successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call connectionMonitorsDeleteCall(String resourceGroupName, String networkWatcherName, String connectionMonitorName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/connectionMonitors/{connectionMonitorName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "networkWatcherName" + "}", localVarApiClient.escapeString(networkWatcherName.toString()))
            .replace("{" + "connectionMonitorName" + "}", localVarApiClient.escapeString(connectionMonitorName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call connectionMonitorsDeleteValidateBeforeCall(String resourceGroupName, String networkWatcherName, String connectionMonitorName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling connectionMonitorsDelete(Async)");
        }

        // verify the required parameter 'networkWatcherName' is set
        if (networkWatcherName == null) {
            throw new ApiException("Missing the required parameter 'networkWatcherName' when calling connectionMonitorsDelete(Async)");
        }

        // verify the required parameter 'connectionMonitorName' is set
        if (connectionMonitorName == null) {
            throw new ApiException("Missing the required parameter 'connectionMonitorName' when calling connectionMonitorsDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling connectionMonitorsDelete(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling connectionMonitorsDelete(Async)");
        }

        return connectionMonitorsDeleteCall(resourceGroupName, networkWatcherName, connectionMonitorName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Deletes the specified connection monitor.
     * @param resourceGroupName The name of the resource group containing Network Watcher. (required)
     * @param networkWatcherName The name of the Network Watcher resource. (required)
     * @param connectionMonitorName The name of the connection monitor. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted. The operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Delete successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public void connectionMonitorsDelete(String resourceGroupName, String networkWatcherName, String connectionMonitorName, String apiVersion, String subscriptionId) throws ApiException {
        connectionMonitorsDeleteWithHttpInfo(resourceGroupName, networkWatcherName, connectionMonitorName, apiVersion, subscriptionId);
    }

    /**
     * 
     * Deletes the specified connection monitor.
     * @param resourceGroupName The name of the resource group containing Network Watcher. (required)
     * @param networkWatcherName The name of the Network Watcher resource. (required)
     * @param connectionMonitorName The name of the connection monitor. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted. The operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Delete successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> connectionMonitorsDeleteWithHttpInfo(String resourceGroupName, String networkWatcherName, String connectionMonitorName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = connectionMonitorsDeleteValidateBeforeCall(resourceGroupName, networkWatcherName, connectionMonitorName, apiVersion, subscriptionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes the specified connection monitor.
     * @param resourceGroupName The name of the resource group containing Network Watcher. (required)
     * @param networkWatcherName The name of the Network Watcher resource. (required)
     * @param connectionMonitorName The name of the connection monitor. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted. The operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Delete successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call connectionMonitorsDeleteAsync(String resourceGroupName, String networkWatcherName, String connectionMonitorName, String apiVersion, String subscriptionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = connectionMonitorsDeleteValidateBeforeCall(resourceGroupName, networkWatcherName, connectionMonitorName, apiVersion, subscriptionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for connectionMonitorsGet
     * @param resourceGroupName The name of the resource group containing Network Watcher. (required)
     * @param networkWatcherName The name of the Network Watcher resource. (required)
     * @param connectionMonitorName The name of the connection monitor. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns a connection monitor. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call connectionMonitorsGetCall(String resourceGroupName, String networkWatcherName, String connectionMonitorName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/connectionMonitors/{connectionMonitorName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "networkWatcherName" + "}", localVarApiClient.escapeString(networkWatcherName.toString()))
            .replace("{" + "connectionMonitorName" + "}", localVarApiClient.escapeString(connectionMonitorName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call connectionMonitorsGetValidateBeforeCall(String resourceGroupName, String networkWatcherName, String connectionMonitorName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling connectionMonitorsGet(Async)");
        }

        // verify the required parameter 'networkWatcherName' is set
        if (networkWatcherName == null) {
            throw new ApiException("Missing the required parameter 'networkWatcherName' when calling connectionMonitorsGet(Async)");
        }

        // verify the required parameter 'connectionMonitorName' is set
        if (connectionMonitorName == null) {
            throw new ApiException("Missing the required parameter 'connectionMonitorName' when calling connectionMonitorsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling connectionMonitorsGet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling connectionMonitorsGet(Async)");
        }

        return connectionMonitorsGetCall(resourceGroupName, networkWatcherName, connectionMonitorName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Gets a connection monitor by name.
     * @param resourceGroupName The name of the resource group containing Network Watcher. (required)
     * @param networkWatcherName The name of the Network Watcher resource. (required)
     * @param connectionMonitorName The name of the connection monitor. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ConnectionMonitorResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns a connection monitor. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ConnectionMonitorResult connectionMonitorsGet(String resourceGroupName, String networkWatcherName, String connectionMonitorName, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<ConnectionMonitorResult> localVarResp = connectionMonitorsGetWithHttpInfo(resourceGroupName, networkWatcherName, connectionMonitorName, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets a connection monitor by name.
     * @param resourceGroupName The name of the resource group containing Network Watcher. (required)
     * @param networkWatcherName The name of the Network Watcher resource. (required)
     * @param connectionMonitorName The name of the connection monitor. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;ConnectionMonitorResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns a connection monitor. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConnectionMonitorResult> connectionMonitorsGetWithHttpInfo(String resourceGroupName, String networkWatcherName, String connectionMonitorName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = connectionMonitorsGetValidateBeforeCall(resourceGroupName, networkWatcherName, connectionMonitorName, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<ConnectionMonitorResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets a connection monitor by name.
     * @param resourceGroupName The name of the resource group containing Network Watcher. (required)
     * @param networkWatcherName The name of the Network Watcher resource. (required)
     * @param connectionMonitorName The name of the connection monitor. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns a connection monitor. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call connectionMonitorsGetAsync(String resourceGroupName, String networkWatcherName, String connectionMonitorName, String apiVersion, String subscriptionId, final ApiCallback<ConnectionMonitorResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = connectionMonitorsGetValidateBeforeCall(resourceGroupName, networkWatcherName, connectionMonitorName, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<ConnectionMonitorResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for connectionMonitorsList
     * @param resourceGroupName The name of the resource group containing Network Watcher. (required)
     * @param networkWatcherName The name of the Network Watcher resource. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful connection monitor enumeration request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call connectionMonitorsListCall(String resourceGroupName, String networkWatcherName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/connectionMonitors"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "networkWatcherName" + "}", localVarApiClient.escapeString(networkWatcherName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call connectionMonitorsListValidateBeforeCall(String resourceGroupName, String networkWatcherName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling connectionMonitorsList(Async)");
        }

        // verify the required parameter 'networkWatcherName' is set
        if (networkWatcherName == null) {
            throw new ApiException("Missing the required parameter 'networkWatcherName' when calling connectionMonitorsList(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling connectionMonitorsList(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling connectionMonitorsList(Async)");
        }

        return connectionMonitorsListCall(resourceGroupName, networkWatcherName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Lists all connection monitors for the specified Network Watcher.
     * @param resourceGroupName The name of the resource group containing Network Watcher. (required)
     * @param networkWatcherName The name of the Network Watcher resource. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ConnectionMonitorListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful connection monitor enumeration request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ConnectionMonitorListResult connectionMonitorsList(String resourceGroupName, String networkWatcherName, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<ConnectionMonitorListResult> localVarResp = connectionMonitorsListWithHttpInfo(resourceGroupName, networkWatcherName, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists all connection monitors for the specified Network Watcher.
     * @param resourceGroupName The name of the resource group containing Network Watcher. (required)
     * @param networkWatcherName The name of the Network Watcher resource. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;ConnectionMonitorListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful connection monitor enumeration request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConnectionMonitorListResult> connectionMonitorsListWithHttpInfo(String resourceGroupName, String networkWatcherName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = connectionMonitorsListValidateBeforeCall(resourceGroupName, networkWatcherName, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<ConnectionMonitorListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists all connection monitors for the specified Network Watcher.
     * @param resourceGroupName The name of the resource group containing Network Watcher. (required)
     * @param networkWatcherName The name of the Network Watcher resource. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful connection monitor enumeration request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call connectionMonitorsListAsync(String resourceGroupName, String networkWatcherName, String apiVersion, String subscriptionId, final ApiCallback<ConnectionMonitorListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = connectionMonitorsListValidateBeforeCall(resourceGroupName, networkWatcherName, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<ConnectionMonitorListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for connectionMonitorsQuery
     * @param resourceGroupName The name of the resource group containing Network Watcher. (required)
     * @param networkWatcherName The name of the Network Watcher resource. (required)
     * @param connectionMonitorName The name given to the connection monitor. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful query of connection states. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted query of connection states. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call connectionMonitorsQueryCall(String resourceGroupName, String networkWatcherName, String connectionMonitorName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/connectionMonitors/{connectionMonitorName}/query"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "networkWatcherName" + "}", localVarApiClient.escapeString(networkWatcherName.toString()))
            .replace("{" + "connectionMonitorName" + "}", localVarApiClient.escapeString(connectionMonitorName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call connectionMonitorsQueryValidateBeforeCall(String resourceGroupName, String networkWatcherName, String connectionMonitorName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling connectionMonitorsQuery(Async)");
        }

        // verify the required parameter 'networkWatcherName' is set
        if (networkWatcherName == null) {
            throw new ApiException("Missing the required parameter 'networkWatcherName' when calling connectionMonitorsQuery(Async)");
        }

        // verify the required parameter 'connectionMonitorName' is set
        if (connectionMonitorName == null) {
            throw new ApiException("Missing the required parameter 'connectionMonitorName' when calling connectionMonitorsQuery(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling connectionMonitorsQuery(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling connectionMonitorsQuery(Async)");
        }

        return connectionMonitorsQueryCall(resourceGroupName, networkWatcherName, connectionMonitorName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Query a snapshot of the most recent connection states.
     * @param resourceGroupName The name of the resource group containing Network Watcher. (required)
     * @param networkWatcherName The name of the Network Watcher resource. (required)
     * @param connectionMonitorName The name given to the connection monitor. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ConnectionMonitorQueryResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful query of connection states. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted query of connection states. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ConnectionMonitorQueryResult connectionMonitorsQuery(String resourceGroupName, String networkWatcherName, String connectionMonitorName, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<ConnectionMonitorQueryResult> localVarResp = connectionMonitorsQueryWithHttpInfo(resourceGroupName, networkWatcherName, connectionMonitorName, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Query a snapshot of the most recent connection states.
     * @param resourceGroupName The name of the resource group containing Network Watcher. (required)
     * @param networkWatcherName The name of the Network Watcher resource. (required)
     * @param connectionMonitorName The name given to the connection monitor. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;ConnectionMonitorQueryResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful query of connection states. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted query of connection states. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConnectionMonitorQueryResult> connectionMonitorsQueryWithHttpInfo(String resourceGroupName, String networkWatcherName, String connectionMonitorName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = connectionMonitorsQueryValidateBeforeCall(resourceGroupName, networkWatcherName, connectionMonitorName, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<ConnectionMonitorQueryResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Query a snapshot of the most recent connection states.
     * @param resourceGroupName The name of the resource group containing Network Watcher. (required)
     * @param networkWatcherName The name of the Network Watcher resource. (required)
     * @param connectionMonitorName The name given to the connection monitor. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful query of connection states. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted query of connection states. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call connectionMonitorsQueryAsync(String resourceGroupName, String networkWatcherName, String connectionMonitorName, String apiVersion, String subscriptionId, final ApiCallback<ConnectionMonitorQueryResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = connectionMonitorsQueryValidateBeforeCall(resourceGroupName, networkWatcherName, connectionMonitorName, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<ConnectionMonitorQueryResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for connectionMonitorsStart
     * @param resourceGroupName The name of the resource group containing Network Watcher. (required)
     * @param networkWatcherName The name of the Network Watcher resource. (required)
     * @param connectionMonitorName The name of the connection monitor. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation starts the connection monitor. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call connectionMonitorsStartCall(String resourceGroupName, String networkWatcherName, String connectionMonitorName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/connectionMonitors/{connectionMonitorName}/start"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "networkWatcherName" + "}", localVarApiClient.escapeString(networkWatcherName.toString()))
            .replace("{" + "connectionMonitorName" + "}", localVarApiClient.escapeString(connectionMonitorName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call connectionMonitorsStartValidateBeforeCall(String resourceGroupName, String networkWatcherName, String connectionMonitorName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling connectionMonitorsStart(Async)");
        }

        // verify the required parameter 'networkWatcherName' is set
        if (networkWatcherName == null) {
            throw new ApiException("Missing the required parameter 'networkWatcherName' when calling connectionMonitorsStart(Async)");
        }

        // verify the required parameter 'connectionMonitorName' is set
        if (connectionMonitorName == null) {
            throw new ApiException("Missing the required parameter 'connectionMonitorName' when calling connectionMonitorsStart(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling connectionMonitorsStart(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling connectionMonitorsStart(Async)");
        }

        return connectionMonitorsStartCall(resourceGroupName, networkWatcherName, connectionMonitorName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Starts the specified connection monitor.
     * @param resourceGroupName The name of the resource group containing Network Watcher. (required)
     * @param networkWatcherName The name of the Network Watcher resource. (required)
     * @param connectionMonitorName The name of the connection monitor. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation starts the connection monitor. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public void connectionMonitorsStart(String resourceGroupName, String networkWatcherName, String connectionMonitorName, String apiVersion, String subscriptionId) throws ApiException {
        connectionMonitorsStartWithHttpInfo(resourceGroupName, networkWatcherName, connectionMonitorName, apiVersion, subscriptionId);
    }

    /**
     * 
     * Starts the specified connection monitor.
     * @param resourceGroupName The name of the resource group containing Network Watcher. (required)
     * @param networkWatcherName The name of the Network Watcher resource. (required)
     * @param connectionMonitorName The name of the connection monitor. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation starts the connection monitor. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> connectionMonitorsStartWithHttpInfo(String resourceGroupName, String networkWatcherName, String connectionMonitorName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = connectionMonitorsStartValidateBeforeCall(resourceGroupName, networkWatcherName, connectionMonitorName, apiVersion, subscriptionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Starts the specified connection monitor.
     * @param resourceGroupName The name of the resource group containing Network Watcher. (required)
     * @param networkWatcherName The name of the Network Watcher resource. (required)
     * @param connectionMonitorName The name of the connection monitor. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation starts the connection monitor. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call connectionMonitorsStartAsync(String resourceGroupName, String networkWatcherName, String connectionMonitorName, String apiVersion, String subscriptionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = connectionMonitorsStartValidateBeforeCall(resourceGroupName, networkWatcherName, connectionMonitorName, apiVersion, subscriptionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for connectionMonitorsStop
     * @param resourceGroupName The name of the resource group containing Network Watcher. (required)
     * @param networkWatcherName The name of the Network Watcher resource. (required)
     * @param connectionMonitorName The name of the connection monitor. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation stops the connection monitor. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call connectionMonitorsStopCall(String resourceGroupName, String networkWatcherName, String connectionMonitorName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/connectionMonitors/{connectionMonitorName}/stop"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "networkWatcherName" + "}", localVarApiClient.escapeString(networkWatcherName.toString()))
            .replace("{" + "connectionMonitorName" + "}", localVarApiClient.escapeString(connectionMonitorName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call connectionMonitorsStopValidateBeforeCall(String resourceGroupName, String networkWatcherName, String connectionMonitorName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling connectionMonitorsStop(Async)");
        }

        // verify the required parameter 'networkWatcherName' is set
        if (networkWatcherName == null) {
            throw new ApiException("Missing the required parameter 'networkWatcherName' when calling connectionMonitorsStop(Async)");
        }

        // verify the required parameter 'connectionMonitorName' is set
        if (connectionMonitorName == null) {
            throw new ApiException("Missing the required parameter 'connectionMonitorName' when calling connectionMonitorsStop(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling connectionMonitorsStop(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling connectionMonitorsStop(Async)");
        }

        return connectionMonitorsStopCall(resourceGroupName, networkWatcherName, connectionMonitorName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Stops the specified connection monitor.
     * @param resourceGroupName The name of the resource group containing Network Watcher. (required)
     * @param networkWatcherName The name of the Network Watcher resource. (required)
     * @param connectionMonitorName The name of the connection monitor. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation stops the connection monitor. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public void connectionMonitorsStop(String resourceGroupName, String networkWatcherName, String connectionMonitorName, String apiVersion, String subscriptionId) throws ApiException {
        connectionMonitorsStopWithHttpInfo(resourceGroupName, networkWatcherName, connectionMonitorName, apiVersion, subscriptionId);
    }

    /**
     * 
     * Stops the specified connection monitor.
     * @param resourceGroupName The name of the resource group containing Network Watcher. (required)
     * @param networkWatcherName The name of the Network Watcher resource. (required)
     * @param connectionMonitorName The name of the connection monitor. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation stops the connection monitor. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> connectionMonitorsStopWithHttpInfo(String resourceGroupName, String networkWatcherName, String connectionMonitorName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = connectionMonitorsStopValidateBeforeCall(resourceGroupName, networkWatcherName, connectionMonitorName, apiVersion, subscriptionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Stops the specified connection monitor.
     * @param resourceGroupName The name of the resource group containing Network Watcher. (required)
     * @param networkWatcherName The name of the Network Watcher resource. (required)
     * @param connectionMonitorName The name of the connection monitor. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation stops the connection monitor. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call connectionMonitorsStopAsync(String resourceGroupName, String networkWatcherName, String connectionMonitorName, String apiVersion, String subscriptionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = connectionMonitorsStopValidateBeforeCall(resourceGroupName, networkWatcherName, connectionMonitorName, apiVersion, subscriptionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
