/*
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2018-10-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.TroubleshootingRecommendedActions;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information gained from troubleshooting of specified resource.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:33:42.998071-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TroubleshootingDetails {
  public static final String SERIALIZED_NAME_DETAIL = "detail";
  @SerializedName(SERIALIZED_NAME_DETAIL)
  private String detail;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_REASON_TYPE = "reasonType";
  @SerializedName(SERIALIZED_NAME_REASON_TYPE)
  private String reasonType;

  public static final String SERIALIZED_NAME_RECOMMENDED_ACTIONS = "recommendedActions";
  @SerializedName(SERIALIZED_NAME_RECOMMENDED_ACTIONS)
  private List<TroubleshootingRecommendedActions> recommendedActions = new ArrayList<>();

  public static final String SERIALIZED_NAME_SUMMARY = "summary";
  @SerializedName(SERIALIZED_NAME_SUMMARY)
  private String summary;

  public TroubleshootingDetails() {
  }

  public TroubleshootingDetails detail(String detail) {
    this.detail = detail;
    return this;
  }

  /**
   * Details on troubleshooting results.
   * @return detail
   */
  @javax.annotation.Nullable
  public String getDetail() {
    return detail;
  }

  public void setDetail(String detail) {
    this.detail = detail;
  }


  public TroubleshootingDetails id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The id of the get troubleshoot operation.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public TroubleshootingDetails reasonType(String reasonType) {
    this.reasonType = reasonType;
    return this;
  }

  /**
   * Reason type of failure.
   * @return reasonType
   */
  @javax.annotation.Nullable
  public String getReasonType() {
    return reasonType;
  }

  public void setReasonType(String reasonType) {
    this.reasonType = reasonType;
  }


  public TroubleshootingDetails recommendedActions(List<TroubleshootingRecommendedActions> recommendedActions) {
    this.recommendedActions = recommendedActions;
    return this;
  }

  public TroubleshootingDetails addRecommendedActionsItem(TroubleshootingRecommendedActions recommendedActionsItem) {
    if (this.recommendedActions == null) {
      this.recommendedActions = new ArrayList<>();
    }
    this.recommendedActions.add(recommendedActionsItem);
    return this;
  }

  /**
   * List of recommended actions.
   * @return recommendedActions
   */
  @javax.annotation.Nullable
  public List<TroubleshootingRecommendedActions> getRecommendedActions() {
    return recommendedActions;
  }

  public void setRecommendedActions(List<TroubleshootingRecommendedActions> recommendedActions) {
    this.recommendedActions = recommendedActions;
  }


  public TroubleshootingDetails summary(String summary) {
    this.summary = summary;
    return this;
  }

  /**
   * A summary of troubleshooting.
   * @return summary
   */
  @javax.annotation.Nullable
  public String getSummary() {
    return summary;
  }

  public void setSummary(String summary) {
    this.summary = summary;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TroubleshootingDetails troubleshootingDetails = (TroubleshootingDetails) o;
    return Objects.equals(this.detail, troubleshootingDetails.detail) &&
        Objects.equals(this.id, troubleshootingDetails.id) &&
        Objects.equals(this.reasonType, troubleshootingDetails.reasonType) &&
        Objects.equals(this.recommendedActions, troubleshootingDetails.recommendedActions) &&
        Objects.equals(this.summary, troubleshootingDetails.summary);
  }

  @Override
  public int hashCode() {
    return Objects.hash(detail, id, reasonType, recommendedActions, summary);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TroubleshootingDetails {\n");
    sb.append("    detail: ").append(toIndentedString(detail)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    reasonType: ").append(toIndentedString(reasonType)).append("\n");
    sb.append("    recommendedActions: ").append(toIndentedString(recommendedActions)).append("\n");
    sb.append("    summary: ").append(toIndentedString(summary)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("detail");
    openapiFields.add("id");
    openapiFields.add("reasonType");
    openapiFields.add("recommendedActions");
    openapiFields.add("summary");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TroubleshootingDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TroubleshootingDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TroubleshootingDetails is not found in the empty JSON string", TroubleshootingDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TroubleshootingDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TroubleshootingDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("detail") != null && !jsonObj.get("detail").isJsonNull()) && !jsonObj.get("detail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `detail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("detail").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("reasonType") != null && !jsonObj.get("reasonType").isJsonNull()) && !jsonObj.get("reasonType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reasonType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reasonType").toString()));
      }
      if (jsonObj.get("recommendedActions") != null && !jsonObj.get("recommendedActions").isJsonNull()) {
        JsonArray jsonArrayrecommendedActions = jsonObj.getAsJsonArray("recommendedActions");
        if (jsonArrayrecommendedActions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("recommendedActions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `recommendedActions` to be an array in the JSON string but got `%s`", jsonObj.get("recommendedActions").toString()));
          }

          // validate the optional field `recommendedActions` (array)
          for (int i = 0; i < jsonArrayrecommendedActions.size(); i++) {
            TroubleshootingRecommendedActions.validateJsonElement(jsonArrayrecommendedActions.get(i));
          };
        }
      }
      if ((jsonObj.get("summary") != null && !jsonObj.get("summary").isJsonNull()) && !jsonObj.get("summary").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `summary` to be a primitive type in the JSON string but got `%s`", jsonObj.get("summary").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TroubleshootingDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TroubleshootingDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TroubleshootingDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TroubleshootingDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<TroubleshootingDetails>() {
           @Override
           public void write(JsonWriter out, TroubleshootingDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TroubleshootingDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TroubleshootingDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TroubleshootingDetails
   * @throws IOException if the JSON string is invalid with respect to TroubleshootingDetails
   */
  public static TroubleshootingDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TroubleshootingDetails.class);
  }

  /**
   * Convert an instance of TroubleshootingDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

