/*
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2018-10-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.NetworkConfigurationDiagnosticProfile;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Parameters to get network configuration diagnostic.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:33:42.998071-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NetworkConfigurationDiagnosticParameters {
  public static final String SERIALIZED_NAME_PROFILES = "profiles";
  @SerializedName(SERIALIZED_NAME_PROFILES)
  private List<NetworkConfigurationDiagnosticProfile> profiles = new ArrayList<>();

  public static final String SERIALIZED_NAME_TARGET_RESOURCE_ID = "targetResourceId";
  @SerializedName(SERIALIZED_NAME_TARGET_RESOURCE_ID)
  private String targetResourceId;

  /**
   * Verbosity level. Accepted values are &#39;Normal&#39;, &#39;Minimum&#39;, &#39;Full&#39;.
   */
  @JsonAdapter(VerbosityLevelEnum.Adapter.class)
  public enum VerbosityLevelEnum {
    NORMAL("Normal"),
    
    MINIMUM("Minimum"),
    
    FULL("Full");

    private String value;

    VerbosityLevelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static VerbosityLevelEnum fromValue(String value) {
      for (VerbosityLevelEnum b : VerbosityLevelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<VerbosityLevelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final VerbosityLevelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public VerbosityLevelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return VerbosityLevelEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      VerbosityLevelEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_VERBOSITY_LEVEL = "verbosityLevel";
  @SerializedName(SERIALIZED_NAME_VERBOSITY_LEVEL)
  private VerbosityLevelEnum verbosityLevel;

  public NetworkConfigurationDiagnosticParameters() {
  }

  public NetworkConfigurationDiagnosticParameters profiles(List<NetworkConfigurationDiagnosticProfile> profiles) {
    this.profiles = profiles;
    return this;
  }

  public NetworkConfigurationDiagnosticParameters addProfilesItem(NetworkConfigurationDiagnosticProfile profilesItem) {
    if (this.profiles == null) {
      this.profiles = new ArrayList<>();
    }
    this.profiles.add(profilesItem);
    return this;
  }

  /**
   * List of network configuration diagnostic profiles.
   * @return profiles
   */
  @javax.annotation.Nonnull
  public List<NetworkConfigurationDiagnosticProfile> getProfiles() {
    return profiles;
  }

  public void setProfiles(List<NetworkConfigurationDiagnosticProfile> profiles) {
    this.profiles = profiles;
  }


  public NetworkConfigurationDiagnosticParameters targetResourceId(String targetResourceId) {
    this.targetResourceId = targetResourceId;
    return this;
  }

  /**
   * The ID of the target resource to perform network configuration diagnostic. Valid options are VM, NetworkInterface, VMSS/NetworkInterface and Application Gateway.
   * @return targetResourceId
   */
  @javax.annotation.Nonnull
  public String getTargetResourceId() {
    return targetResourceId;
  }

  public void setTargetResourceId(String targetResourceId) {
    this.targetResourceId = targetResourceId;
  }


  public NetworkConfigurationDiagnosticParameters verbosityLevel(VerbosityLevelEnum verbosityLevel) {
    this.verbosityLevel = verbosityLevel;
    return this;
  }

  /**
   * Verbosity level. Accepted values are &#39;Normal&#39;, &#39;Minimum&#39;, &#39;Full&#39;.
   * @return verbosityLevel
   */
  @javax.annotation.Nullable
  public VerbosityLevelEnum getVerbosityLevel() {
    return verbosityLevel;
  }

  public void setVerbosityLevel(VerbosityLevelEnum verbosityLevel) {
    this.verbosityLevel = verbosityLevel;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NetworkConfigurationDiagnosticParameters networkConfigurationDiagnosticParameters = (NetworkConfigurationDiagnosticParameters) o;
    return Objects.equals(this.profiles, networkConfigurationDiagnosticParameters.profiles) &&
        Objects.equals(this.targetResourceId, networkConfigurationDiagnosticParameters.targetResourceId) &&
        Objects.equals(this.verbosityLevel, networkConfigurationDiagnosticParameters.verbosityLevel);
  }

  @Override
  public int hashCode() {
    return Objects.hash(profiles, targetResourceId, verbosityLevel);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NetworkConfigurationDiagnosticParameters {\n");
    sb.append("    profiles: ").append(toIndentedString(profiles)).append("\n");
    sb.append("    targetResourceId: ").append(toIndentedString(targetResourceId)).append("\n");
    sb.append("    verbosityLevel: ").append(toIndentedString(verbosityLevel)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("profiles");
    openapiFields.add("targetResourceId");
    openapiFields.add("verbosityLevel");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("profiles");
    openapiRequiredFields.add("targetResourceId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NetworkConfigurationDiagnosticParameters
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NetworkConfigurationDiagnosticParameters.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NetworkConfigurationDiagnosticParameters is not found in the empty JSON string", NetworkConfigurationDiagnosticParameters.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NetworkConfigurationDiagnosticParameters.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NetworkConfigurationDiagnosticParameters` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : NetworkConfigurationDiagnosticParameters.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("profiles").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `profiles` to be an array in the JSON string but got `%s`", jsonObj.get("profiles").toString()));
      }

      JsonArray jsonArrayprofiles = jsonObj.getAsJsonArray("profiles");
      // validate the required field `profiles` (array)
      for (int i = 0; i < jsonArrayprofiles.size(); i++) {
        NetworkConfigurationDiagnosticProfile.validateJsonElement(jsonArrayprofiles.get(i));
      };
      if (!jsonObj.get("targetResourceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetResourceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("targetResourceId").toString()));
      }
      if ((jsonObj.get("verbosityLevel") != null && !jsonObj.get("verbosityLevel").isJsonNull()) && !jsonObj.get("verbosityLevel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `verbosityLevel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("verbosityLevel").toString()));
      }
      // validate the optional field `verbosityLevel`
      if (jsonObj.get("verbosityLevel") != null && !jsonObj.get("verbosityLevel").isJsonNull()) {
        VerbosityLevelEnum.validateJsonElement(jsonObj.get("verbosityLevel"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NetworkConfigurationDiagnosticParameters.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NetworkConfigurationDiagnosticParameters' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NetworkConfigurationDiagnosticParameters> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NetworkConfigurationDiagnosticParameters.class));

       return (TypeAdapter<T>) new TypeAdapter<NetworkConfigurationDiagnosticParameters>() {
           @Override
           public void write(JsonWriter out, NetworkConfigurationDiagnosticParameters value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NetworkConfigurationDiagnosticParameters read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NetworkConfigurationDiagnosticParameters given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NetworkConfigurationDiagnosticParameters
   * @throws IOException if the JSON string is invalid with respect to NetworkConfigurationDiagnosticParameters
   */
  public static NetworkConfigurationDiagnosticParameters fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NetworkConfigurationDiagnosticParameters.class);
  }

  /**
   * Convert an instance of NetworkConfigurationDiagnosticParameters to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

