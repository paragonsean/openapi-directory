/*
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2018-10-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AzureReachabilityReportLocation;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Geographic and time constraints for Azure reachability report.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:33:42.998071-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AzureReachabilityReportParameters {
  public static final String SERIALIZED_NAME_AZURE_LOCATIONS = "azureLocations";
  @SerializedName(SERIALIZED_NAME_AZURE_LOCATIONS)
  private List<String> azureLocations = new ArrayList<>();

  public static final String SERIALIZED_NAME_END_TIME = "endTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private OffsetDateTime endTime;

  public static final String SERIALIZED_NAME_PROVIDER_LOCATION = "providerLocation";
  @SerializedName(SERIALIZED_NAME_PROVIDER_LOCATION)
  private AzureReachabilityReportLocation providerLocation;

  public static final String SERIALIZED_NAME_PROVIDERS = "providers";
  @SerializedName(SERIALIZED_NAME_PROVIDERS)
  private List<String> providers = new ArrayList<>();

  public static final String SERIALIZED_NAME_START_TIME = "startTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private OffsetDateTime startTime;

  public AzureReachabilityReportParameters() {
  }

  public AzureReachabilityReportParameters azureLocations(List<String> azureLocations) {
    this.azureLocations = azureLocations;
    return this;
  }

  public AzureReachabilityReportParameters addAzureLocationsItem(String azureLocationsItem) {
    if (this.azureLocations == null) {
      this.azureLocations = new ArrayList<>();
    }
    this.azureLocations.add(azureLocationsItem);
    return this;
  }

  /**
   * Optional Azure regions to scope the query to.
   * @return azureLocations
   */
  @javax.annotation.Nullable
  public List<String> getAzureLocations() {
    return azureLocations;
  }

  public void setAzureLocations(List<String> azureLocations) {
    this.azureLocations = azureLocations;
  }


  public AzureReachabilityReportParameters endTime(OffsetDateTime endTime) {
    this.endTime = endTime;
    return this;
  }

  /**
   * The end time for the Azure reachability report.
   * @return endTime
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getEndTime() {
    return endTime;
  }

  public void setEndTime(OffsetDateTime endTime) {
    this.endTime = endTime;
  }


  public AzureReachabilityReportParameters providerLocation(AzureReachabilityReportLocation providerLocation) {
    this.providerLocation = providerLocation;
    return this;
  }

  /**
   * Get providerLocation
   * @return providerLocation
   */
  @javax.annotation.Nonnull
  public AzureReachabilityReportLocation getProviderLocation() {
    return providerLocation;
  }

  public void setProviderLocation(AzureReachabilityReportLocation providerLocation) {
    this.providerLocation = providerLocation;
  }


  public AzureReachabilityReportParameters providers(List<String> providers) {
    this.providers = providers;
    return this;
  }

  public AzureReachabilityReportParameters addProvidersItem(String providersItem) {
    if (this.providers == null) {
      this.providers = new ArrayList<>();
    }
    this.providers.add(providersItem);
    return this;
  }

  /**
   * List of Internet service providers.
   * @return providers
   */
  @javax.annotation.Nullable
  public List<String> getProviders() {
    return providers;
  }

  public void setProviders(List<String> providers) {
    this.providers = providers;
  }


  public AzureReachabilityReportParameters startTime(OffsetDateTime startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * The start time for the Azure reachability report.
   * @return startTime
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getStartTime() {
    return startTime;
  }

  public void setStartTime(OffsetDateTime startTime) {
    this.startTime = startTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AzureReachabilityReportParameters azureReachabilityReportParameters = (AzureReachabilityReportParameters) o;
    return Objects.equals(this.azureLocations, azureReachabilityReportParameters.azureLocations) &&
        Objects.equals(this.endTime, azureReachabilityReportParameters.endTime) &&
        Objects.equals(this.providerLocation, azureReachabilityReportParameters.providerLocation) &&
        Objects.equals(this.providers, azureReachabilityReportParameters.providers) &&
        Objects.equals(this.startTime, azureReachabilityReportParameters.startTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(azureLocations, endTime, providerLocation, providers, startTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AzureReachabilityReportParameters {\n");
    sb.append("    azureLocations: ").append(toIndentedString(azureLocations)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    providerLocation: ").append(toIndentedString(providerLocation)).append("\n");
    sb.append("    providers: ").append(toIndentedString(providers)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("azureLocations");
    openapiFields.add("endTime");
    openapiFields.add("providerLocation");
    openapiFields.add("providers");
    openapiFields.add("startTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("endTime");
    openapiRequiredFields.add("providerLocation");
    openapiRequiredFields.add("startTime");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AzureReachabilityReportParameters
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AzureReachabilityReportParameters.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AzureReachabilityReportParameters is not found in the empty JSON string", AzureReachabilityReportParameters.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AzureReachabilityReportParameters.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AzureReachabilityReportParameters` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AzureReachabilityReportParameters.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("azureLocations") != null && !jsonObj.get("azureLocations").isJsonNull() && !jsonObj.get("azureLocations").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `azureLocations` to be an array in the JSON string but got `%s`", jsonObj.get("azureLocations").toString()));
      }
      // validate the required field `providerLocation`
      AzureReachabilityReportLocation.validateJsonElement(jsonObj.get("providerLocation"));
      // ensure the optional json data is an array if present
      if (jsonObj.get("providers") != null && !jsonObj.get("providers").isJsonNull() && !jsonObj.get("providers").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `providers` to be an array in the JSON string but got `%s`", jsonObj.get("providers").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AzureReachabilityReportParameters.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AzureReachabilityReportParameters' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AzureReachabilityReportParameters> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AzureReachabilityReportParameters.class));

       return (TypeAdapter<T>) new TypeAdapter<AzureReachabilityReportParameters>() {
           @Override
           public void write(JsonWriter out, AzureReachabilityReportParameters value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AzureReachabilityReportParameters read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AzureReachabilityReportParameters given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AzureReachabilityReportParameters
   * @throws IOException if the JSON string is invalid with respect to AzureReachabilityReportParameters
   */
  public static AzureReachabilityReportParameters fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AzureReachabilityReportParameters.class);
  }

  /**
   * Convert an instance of AzureReachabilityReportParameters to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

