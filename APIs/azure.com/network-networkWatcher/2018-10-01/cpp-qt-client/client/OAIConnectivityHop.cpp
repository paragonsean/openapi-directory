/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2018-10-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConnectivityHop.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConnectivityHop::OAIConnectivityHop(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConnectivityHop::OAIConnectivityHop() {
    this->initializeModel();
}

OAIConnectivityHop::~OAIConnectivityHop() {}

void OAIConnectivityHop::initializeModel() {

    m_address_isSet = false;
    m_address_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_issues_isSet = false;
    m_issues_isValid = false;

    m_next_hop_ids_isSet = false;
    m_next_hop_ids_isValid = false;

    m_resource_id_isSet = false;
    m_resource_id_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIConnectivityHop::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConnectivityHop::fromJsonObject(QJsonObject json) {

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_issues_isValid = ::OpenAPI::fromJsonValue(m_issues, json[QString("issues")]);
    m_issues_isSet = !json[QString("issues")].isNull() && m_issues_isValid;

    m_next_hop_ids_isValid = ::OpenAPI::fromJsonValue(m_next_hop_ids, json[QString("nextHopIds")]);
    m_next_hop_ids_isSet = !json[QString("nextHopIds")].isNull() && m_next_hop_ids_isValid;

    m_resource_id_isValid = ::OpenAPI::fromJsonValue(m_resource_id, json[QString("resourceId")]);
    m_resource_id_isSet = !json[QString("resourceId")].isNull() && m_resource_id_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIConnectivityHop::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConnectivityHop::asJsonObject() const {
    QJsonObject obj;
    if (m_address_isSet) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_issues.size() > 0) {
        obj.insert(QString("issues"), ::OpenAPI::toJsonValue(m_issues));
    }
    if (m_next_hop_ids.size() > 0) {
        obj.insert(QString("nextHopIds"), ::OpenAPI::toJsonValue(m_next_hop_ids));
    }
    if (m_resource_id_isSet) {
        obj.insert(QString("resourceId"), ::OpenAPI::toJsonValue(m_resource_id));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIConnectivityHop::getAddress() const {
    return m_address;
}
void OAIConnectivityHop::setAddress(const QString &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAIConnectivityHop::is_address_Set() const{
    return m_address_isSet;
}

bool OAIConnectivityHop::is_address_Valid() const{
    return m_address_isValid;
}

QString OAIConnectivityHop::getId() const {
    return m_id;
}
void OAIConnectivityHop::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIConnectivityHop::is_id_Set() const{
    return m_id_isSet;
}

bool OAIConnectivityHop::is_id_Valid() const{
    return m_id_isValid;
}

QList<OAIConnectivityIssue> OAIConnectivityHop::getIssues() const {
    return m_issues;
}
void OAIConnectivityHop::setIssues(const QList<OAIConnectivityIssue> &issues) {
    m_issues = issues;
    m_issues_isSet = true;
}

bool OAIConnectivityHop::is_issues_Set() const{
    return m_issues_isSet;
}

bool OAIConnectivityHop::is_issues_Valid() const{
    return m_issues_isValid;
}

QList<QString> OAIConnectivityHop::getNextHopIds() const {
    return m_next_hop_ids;
}
void OAIConnectivityHop::setNextHopIds(const QList<QString> &next_hop_ids) {
    m_next_hop_ids = next_hop_ids;
    m_next_hop_ids_isSet = true;
}

bool OAIConnectivityHop::is_next_hop_ids_Set() const{
    return m_next_hop_ids_isSet;
}

bool OAIConnectivityHop::is_next_hop_ids_Valid() const{
    return m_next_hop_ids_isValid;
}

QString OAIConnectivityHop::getResourceId() const {
    return m_resource_id;
}
void OAIConnectivityHop::setResourceId(const QString &resource_id) {
    m_resource_id = resource_id;
    m_resource_id_isSet = true;
}

bool OAIConnectivityHop::is_resource_id_Set() const{
    return m_resource_id_isSet;
}

bool OAIConnectivityHop::is_resource_id_Valid() const{
    return m_resource_id_isValid;
}

QString OAIConnectivityHop::getType() const {
    return m_type;
}
void OAIConnectivityHop::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIConnectivityHop::is_type_Set() const{
    return m_type_isSet;
}

bool OAIConnectivityHop::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIConnectivityHop::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issues.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_hop_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConnectivityHop::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
