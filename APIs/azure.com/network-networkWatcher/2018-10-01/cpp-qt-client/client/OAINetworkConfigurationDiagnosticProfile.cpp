/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2018-10-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINetworkConfigurationDiagnosticProfile.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINetworkConfigurationDiagnosticProfile::OAINetworkConfigurationDiagnosticProfile(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINetworkConfigurationDiagnosticProfile::OAINetworkConfigurationDiagnosticProfile() {
    this->initializeModel();
}

OAINetworkConfigurationDiagnosticProfile::~OAINetworkConfigurationDiagnosticProfile() {}

void OAINetworkConfigurationDiagnosticProfile::initializeModel() {

    m_destination_isSet = false;
    m_destination_isValid = false;

    m_destination_port_isSet = false;
    m_destination_port_isValid = false;

    m_direction_isSet = false;
    m_direction_isValid = false;

    m_protocol_isSet = false;
    m_protocol_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;
}

void OAINetworkConfigurationDiagnosticProfile::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINetworkConfigurationDiagnosticProfile::fromJsonObject(QJsonObject json) {

    m_destination_isValid = ::OpenAPI::fromJsonValue(m_destination, json[QString("destination")]);
    m_destination_isSet = !json[QString("destination")].isNull() && m_destination_isValid;

    m_destination_port_isValid = ::OpenAPI::fromJsonValue(m_destination_port, json[QString("destinationPort")]);
    m_destination_port_isSet = !json[QString("destinationPort")].isNull() && m_destination_port_isValid;

    m_direction_isValid = ::OpenAPI::fromJsonValue(m_direction, json[QString("direction")]);
    m_direction_isSet = !json[QString("direction")].isNull() && m_direction_isValid;

    m_protocol_isValid = ::OpenAPI::fromJsonValue(m_protocol, json[QString("protocol")]);
    m_protocol_isSet = !json[QString("protocol")].isNull() && m_protocol_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;
}

QString OAINetworkConfigurationDiagnosticProfile::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINetworkConfigurationDiagnosticProfile::asJsonObject() const {
    QJsonObject obj;
    if (m_destination_isSet) {
        obj.insert(QString("destination"), ::OpenAPI::toJsonValue(m_destination));
    }
    if (m_destination_port_isSet) {
        obj.insert(QString("destinationPort"), ::OpenAPI::toJsonValue(m_destination_port));
    }
    if (m_direction_isSet) {
        obj.insert(QString("direction"), ::OpenAPI::toJsonValue(m_direction));
    }
    if (m_protocol_isSet) {
        obj.insert(QString("protocol"), ::OpenAPI::toJsonValue(m_protocol));
    }
    if (m_source_isSet) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    return obj;
}

QString OAINetworkConfigurationDiagnosticProfile::getDestination() const {
    return m_destination;
}
void OAINetworkConfigurationDiagnosticProfile::setDestination(const QString &destination) {
    m_destination = destination;
    m_destination_isSet = true;
}

bool OAINetworkConfigurationDiagnosticProfile::is_destination_Set() const{
    return m_destination_isSet;
}

bool OAINetworkConfigurationDiagnosticProfile::is_destination_Valid() const{
    return m_destination_isValid;
}

QString OAINetworkConfigurationDiagnosticProfile::getDestinationPort() const {
    return m_destination_port;
}
void OAINetworkConfigurationDiagnosticProfile::setDestinationPort(const QString &destination_port) {
    m_destination_port = destination_port;
    m_destination_port_isSet = true;
}

bool OAINetworkConfigurationDiagnosticProfile::is_destination_port_Set() const{
    return m_destination_port_isSet;
}

bool OAINetworkConfigurationDiagnosticProfile::is_destination_port_Valid() const{
    return m_destination_port_isValid;
}

QString OAINetworkConfigurationDiagnosticProfile::getDirection() const {
    return m_direction;
}
void OAINetworkConfigurationDiagnosticProfile::setDirection(const QString &direction) {
    m_direction = direction;
    m_direction_isSet = true;
}

bool OAINetworkConfigurationDiagnosticProfile::is_direction_Set() const{
    return m_direction_isSet;
}

bool OAINetworkConfigurationDiagnosticProfile::is_direction_Valid() const{
    return m_direction_isValid;
}

QString OAINetworkConfigurationDiagnosticProfile::getProtocol() const {
    return m_protocol;
}
void OAINetworkConfigurationDiagnosticProfile::setProtocol(const QString &protocol) {
    m_protocol = protocol;
    m_protocol_isSet = true;
}

bool OAINetworkConfigurationDiagnosticProfile::is_protocol_Set() const{
    return m_protocol_isSet;
}

bool OAINetworkConfigurationDiagnosticProfile::is_protocol_Valid() const{
    return m_protocol_isValid;
}

QString OAINetworkConfigurationDiagnosticProfile::getSource() const {
    return m_source;
}
void OAINetworkConfigurationDiagnosticProfile::setSource(const QString &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAINetworkConfigurationDiagnosticProfile::is_source_Set() const{
    return m_source_isSet;
}

bool OAINetworkConfigurationDiagnosticProfile::is_source_Valid() const{
    return m_source_isValid;
}

bool OAINetworkConfigurationDiagnosticProfile::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_destination_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_direction_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protocol_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINetworkConfigurationDiagnosticProfile::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_destination_isValid && m_destination_port_isValid && m_direction_isValid && m_protocol_isValid && m_source_isValid && true;
}

} // namespace OpenAPI
