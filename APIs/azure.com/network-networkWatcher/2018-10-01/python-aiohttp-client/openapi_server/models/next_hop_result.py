# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NextHopResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, next_hop_ip_address: str=None, next_hop_type: str=None, route_table_id: str=None):
        """NextHopResult - a model defined in OpenAPI

        :param next_hop_ip_address: The next_hop_ip_address of this NextHopResult.
        :param next_hop_type: The next_hop_type of this NextHopResult.
        :param route_table_id: The route_table_id of this NextHopResult.
        """
        self.openapi_types = {
            'next_hop_ip_address': str,
            'next_hop_type': str,
            'route_table_id': str
        }

        self.attribute_map = {
            'next_hop_ip_address': 'nextHopIpAddress',
            'next_hop_type': 'nextHopType',
            'route_table_id': 'routeTableId'
        }

        self._next_hop_ip_address = next_hop_ip_address
        self._next_hop_type = next_hop_type
        self._route_table_id = route_table_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NextHopResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NextHopResult of this NextHopResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def next_hop_ip_address(self):
        """Gets the next_hop_ip_address of this NextHopResult.

        Next hop IP Address

        :return: The next_hop_ip_address of this NextHopResult.
        :rtype: str
        """
        return self._next_hop_ip_address

    @next_hop_ip_address.setter
    def next_hop_ip_address(self, next_hop_ip_address):
        """Sets the next_hop_ip_address of this NextHopResult.

        Next hop IP Address

        :param next_hop_ip_address: The next_hop_ip_address of this NextHopResult.
        :type next_hop_ip_address: str
        """

        self._next_hop_ip_address = next_hop_ip_address

    @property
    def next_hop_type(self):
        """Gets the next_hop_type of this NextHopResult.

        Next hop type.

        :return: The next_hop_type of this NextHopResult.
        :rtype: str
        """
        return self._next_hop_type

    @next_hop_type.setter
    def next_hop_type(self, next_hop_type):
        """Sets the next_hop_type of this NextHopResult.

        Next hop type.

        :param next_hop_type: The next_hop_type of this NextHopResult.
        :type next_hop_type: str
        """
        allowed_values = ["Internet", "VirtualAppliance", "VirtualNetworkGateway", "VnetLocal", "HyperNetGateway", "None"]  # noqa: E501
        if next_hop_type not in allowed_values:
            raise ValueError(
                "Invalid value for `next_hop_type` ({0}), must be one of {1}"
                .format(next_hop_type, allowed_values)
            )

        self._next_hop_type = next_hop_type

    @property
    def route_table_id(self):
        """Gets the route_table_id of this NextHopResult.

        The resource identifier for the route table associated with the route being returned. If the route being returned does not correspond to any user created routes then this field will be the string 'System Route'.

        :return: The route_table_id of this NextHopResult.
        :rtype: str
        """
        return self._route_table_id

    @route_table_id.setter
    def route_table_id(self, route_table_id):
        """Sets the route_table_id of this NextHopResult.

        The resource identifier for the route table associated with the route being returned. If the route being returned does not correspond to any user created routes then this field will be the string 'System Route'.

        :param route_table_id: The route_table_id of this NextHopResult.
        :type route_table_id: str
        """

        self._route_table_id = route_table_id
