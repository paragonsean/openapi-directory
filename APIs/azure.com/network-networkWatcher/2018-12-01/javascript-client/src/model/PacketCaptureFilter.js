/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2018-12-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PacketCaptureFilter model module.
 * @module model/PacketCaptureFilter
 * @version 2018-12-01
 */
class PacketCaptureFilter {
    /**
     * Constructs a new <code>PacketCaptureFilter</code>.
     * Filter that is applied to packet capture request. Multiple filters can be applied.
     * @alias module:model/PacketCaptureFilter
     */
    constructor() { 
        
        PacketCaptureFilter.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['protocol'] = 'Any';
    }

    /**
     * Constructs a <code>PacketCaptureFilter</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PacketCaptureFilter} obj Optional instance to populate.
     * @return {module:model/PacketCaptureFilter} The populated <code>PacketCaptureFilter</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PacketCaptureFilter();

            if (data.hasOwnProperty('localIPAddress')) {
                obj['localIPAddress'] = ApiClient.convertToType(data['localIPAddress'], 'String');
            }
            if (data.hasOwnProperty('localPort')) {
                obj['localPort'] = ApiClient.convertToType(data['localPort'], 'String');
            }
            if (data.hasOwnProperty('protocol')) {
                obj['protocol'] = ApiClient.convertToType(data['protocol'], 'String');
            }
            if (data.hasOwnProperty('remoteIPAddress')) {
                obj['remoteIPAddress'] = ApiClient.convertToType(data['remoteIPAddress'], 'String');
            }
            if (data.hasOwnProperty('remotePort')) {
                obj['remotePort'] = ApiClient.convertToType(data['remotePort'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PacketCaptureFilter</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PacketCaptureFilter</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['localIPAddress'] && !(typeof data['localIPAddress'] === 'string' || data['localIPAddress'] instanceof String)) {
            throw new Error("Expected the field `localIPAddress` to be a primitive type in the JSON string but got " + data['localIPAddress']);
        }
        // ensure the json data is a string
        if (data['localPort'] && !(typeof data['localPort'] === 'string' || data['localPort'] instanceof String)) {
            throw new Error("Expected the field `localPort` to be a primitive type in the JSON string but got " + data['localPort']);
        }
        // ensure the json data is a string
        if (data['protocol'] && !(typeof data['protocol'] === 'string' || data['protocol'] instanceof String)) {
            throw new Error("Expected the field `protocol` to be a primitive type in the JSON string but got " + data['protocol']);
        }
        // ensure the json data is a string
        if (data['remoteIPAddress'] && !(typeof data['remoteIPAddress'] === 'string' || data['remoteIPAddress'] instanceof String)) {
            throw new Error("Expected the field `remoteIPAddress` to be a primitive type in the JSON string but got " + data['remoteIPAddress']);
        }
        // ensure the json data is a string
        if (data['remotePort'] && !(typeof data['remotePort'] === 'string' || data['remotePort'] instanceof String)) {
            throw new Error("Expected the field `remotePort` to be a primitive type in the JSON string but got " + data['remotePort']);
        }

        return true;
    }


}



/**
 * Local IP Address to be filtered on. Notation: \"127.0.0.1\" for single address entry. \"127.0.0.1-127.0.0.255\" for range. \"127.0.0.1;127.0.0.5\"? for multiple entries. Multiple ranges not currently supported. Mixing ranges with multiple entries not currently supported. Default = null.
 * @member {String} localIPAddress
 */
PacketCaptureFilter.prototype['localIPAddress'] = undefined;

/**
 * Local port to be filtered on. Notation: \"80\" for single port entry.\"80-85\" for range. \"80;443;\" for multiple entries. Multiple ranges not currently supported. Mixing ranges with multiple entries not currently supported. Default = null.
 * @member {String} localPort
 */
PacketCaptureFilter.prototype['localPort'] = undefined;

/**
 * Protocol to be filtered on.
 * @member {module:model/PacketCaptureFilter.ProtocolEnum} protocol
 * @default 'Any'
 */
PacketCaptureFilter.prototype['protocol'] = 'Any';

/**
 * Local IP Address to be filtered on. Notation: \"127.0.0.1\" for single address entry. \"127.0.0.1-127.0.0.255\" for range. \"127.0.0.1;127.0.0.5;\" for multiple entries. Multiple ranges not currently supported. Mixing ranges with multiple entries not currently supported. Default = null.
 * @member {String} remoteIPAddress
 */
PacketCaptureFilter.prototype['remoteIPAddress'] = undefined;

/**
 * Remote port to be filtered on. Notation: \"80\" for single port entry.\"80-85\" for range. \"80;443;\" for multiple entries. Multiple ranges not currently supported. Mixing ranges with multiple entries not currently supported. Default = null.
 * @member {String} remotePort
 */
PacketCaptureFilter.prototype['remotePort'] = undefined;





/**
 * Allowed values for the <code>protocol</code> property.
 * @enum {String}
 * @readonly
 */
PacketCaptureFilter['ProtocolEnum'] = {

    /**
     * value: "TCP"
     * @const
     */
    "TCP": "TCP",

    /**
     * value: "UDP"
     * @const
     */
    "UDP": "UDP",

    /**
     * value: "Any"
     * @const
     */
    "Any": "Any"
};



export default PacketCaptureFilter;

