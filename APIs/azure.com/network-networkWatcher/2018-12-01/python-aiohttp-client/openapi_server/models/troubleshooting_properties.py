# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TroubleshootingProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, storage_id: str=None, storage_path: str=None):
        """TroubleshootingProperties - a model defined in OpenAPI

        :param storage_id: The storage_id of this TroubleshootingProperties.
        :param storage_path: The storage_path of this TroubleshootingProperties.
        """
        self.openapi_types = {
            'storage_id': str,
            'storage_path': str
        }

        self.attribute_map = {
            'storage_id': 'storageId',
            'storage_path': 'storagePath'
        }

        self._storage_id = storage_id
        self._storage_path = storage_path

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TroubleshootingProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TroubleshootingProperties of this TroubleshootingProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def storage_id(self):
        """Gets the storage_id of this TroubleshootingProperties.

        The ID for the storage account to save the troubleshoot result.

        :return: The storage_id of this TroubleshootingProperties.
        :rtype: str
        """
        return self._storage_id

    @storage_id.setter
    def storage_id(self, storage_id):
        """Sets the storage_id of this TroubleshootingProperties.

        The ID for the storage account to save the troubleshoot result.

        :param storage_id: The storage_id of this TroubleshootingProperties.
        :type storage_id: str
        """
        if storage_id is None:
            raise ValueError("Invalid value for `storage_id`, must not be `None`")

        self._storage_id = storage_id

    @property
    def storage_path(self):
        """Gets the storage_path of this TroubleshootingProperties.

        The path to the blob to save the troubleshoot result in.

        :return: The storage_path of this TroubleshootingProperties.
        :rtype: str
        """
        return self._storage_path

    @storage_path.setter
    def storage_path(self, storage_path):
        """Sets the storage_path of this TroubleshootingProperties.

        The path to the blob to save the troubleshoot result in.

        :param storage_path: The storage_path of this TroubleshootingProperties.
        :type storage_path: str
        """
        if storage_path is None:
            raise ValueError("Invalid value for `storage_path`, must not be `None`")

        self._storage_path = storage_path
