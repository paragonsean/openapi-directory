/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2018-12-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITroubleshootingParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITroubleshootingParameters::OAITroubleshootingParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITroubleshootingParameters::OAITroubleshootingParameters() {
    this->initializeModel();
}

OAITroubleshootingParameters::~OAITroubleshootingParameters() {}

void OAITroubleshootingParameters::initializeModel() {

    m_properties_isSet = false;
    m_properties_isValid = false;

    m_target_resource_id_isSet = false;
    m_target_resource_id_isValid = false;
}

void OAITroubleshootingParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITroubleshootingParameters::fromJsonObject(QJsonObject json) {

    m_properties_isValid = ::OpenAPI::fromJsonValue(m_properties, json[QString("properties")]);
    m_properties_isSet = !json[QString("properties")].isNull() && m_properties_isValid;

    m_target_resource_id_isValid = ::OpenAPI::fromJsonValue(m_target_resource_id, json[QString("targetResourceId")]);
    m_target_resource_id_isSet = !json[QString("targetResourceId")].isNull() && m_target_resource_id_isValid;
}

QString OAITroubleshootingParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITroubleshootingParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_properties.isSet()) {
        obj.insert(QString("properties"), ::OpenAPI::toJsonValue(m_properties));
    }
    if (m_target_resource_id_isSet) {
        obj.insert(QString("targetResourceId"), ::OpenAPI::toJsonValue(m_target_resource_id));
    }
    return obj;
}

OAITroubleshootingProperties OAITroubleshootingParameters::getProperties() const {
    return m_properties;
}
void OAITroubleshootingParameters::setProperties(const OAITroubleshootingProperties &properties) {
    m_properties = properties;
    m_properties_isSet = true;
}

bool OAITroubleshootingParameters::is_properties_Set() const{
    return m_properties_isSet;
}

bool OAITroubleshootingParameters::is_properties_Valid() const{
    return m_properties_isValid;
}

QString OAITroubleshootingParameters::getTargetResourceId() const {
    return m_target_resource_id;
}
void OAITroubleshootingParameters::setTargetResourceId(const QString &target_resource_id) {
    m_target_resource_id = target_resource_id;
    m_target_resource_id_isSet = true;
}

bool OAITroubleshootingParameters::is_target_resource_id_Set() const{
    return m_target_resource_id_isSet;
}

bool OAITroubleshootingParameters::is_target_resource_id_Valid() const{
    return m_target_resource_id_isValid;
}

bool OAITroubleshootingParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITroubleshootingParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_properties_isValid && m_target_resource_id_isValid && true;
}

} // namespace OpenAPI
