/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ConnectionMonitorDestination from './ConnectionMonitorDestination';
import ConnectionMonitorParameters from './ConnectionMonitorParameters';
import ConnectionMonitorSource from './ConnectionMonitorSource';

/**
 * The ConnectionMonitorResultProperties model module.
 * @module model/ConnectionMonitorResultProperties
 * @version 2019-04-01
 */
class ConnectionMonitorResultProperties {
    /**
     * Constructs a new <code>ConnectionMonitorResultProperties</code>.
     * Describes the properties of a connection monitor.
     * @alias module:model/ConnectionMonitorResultProperties
     * @implements module:model/ConnectionMonitorParameters
     * @param destination {module:model/ConnectionMonitorDestination} 
     * @param source {module:model/ConnectionMonitorSource} 
     */
    constructor(destination, source) { 
        ConnectionMonitorParameters.initialize(this, destination, source);
        ConnectionMonitorResultProperties.initialize(this, destination, source);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, destination, source) { 
        obj['autoStart'] = true;
        obj['destination'] = destination;
        obj['source'] = source;
    }

    /**
     * Constructs a <code>ConnectionMonitorResultProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ConnectionMonitorResultProperties} obj Optional instance to populate.
     * @return {module:model/ConnectionMonitorResultProperties} The populated <code>ConnectionMonitorResultProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ConnectionMonitorResultProperties();
            ConnectionMonitorParameters.constructFromObject(data, obj);

            if (data.hasOwnProperty('monitoringStatus')) {
                obj['monitoringStatus'] = ApiClient.convertToType(data['monitoringStatus'], 'String');
            }
            if (data.hasOwnProperty('provisioningState')) {
                obj['provisioningState'] = ApiClient.convertToType(data['provisioningState'], 'String');
            }
            if (data.hasOwnProperty('startTime')) {
                obj['startTime'] = ApiClient.convertToType(data['startTime'], 'Date');
            }
            if (data.hasOwnProperty('autoStart')) {
                obj['autoStart'] = ApiClient.convertToType(data['autoStart'], 'Boolean');
            }
            if (data.hasOwnProperty('destination')) {
                obj['destination'] = ConnectionMonitorDestination.constructFromObject(data['destination']);
            }
            if (data.hasOwnProperty('monitoringIntervalInSeconds')) {
                obj['monitoringIntervalInSeconds'] = ApiClient.convertToType(data['monitoringIntervalInSeconds'], 'Number');
            }
            if (data.hasOwnProperty('source')) {
                obj['source'] = ConnectionMonitorSource.constructFromObject(data['source']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ConnectionMonitorResultProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ConnectionMonitorResultProperties</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ConnectionMonitorResultProperties.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['monitoringStatus'] && !(typeof data['monitoringStatus'] === 'string' || data['monitoringStatus'] instanceof String)) {
            throw new Error("Expected the field `monitoringStatus` to be a primitive type in the JSON string but got " + data['monitoringStatus']);
        }
        // ensure the json data is a string
        if (data['provisioningState'] && !(typeof data['provisioningState'] === 'string' || data['provisioningState'] instanceof String)) {
            throw new Error("Expected the field `provisioningState` to be a primitive type in the JSON string but got " + data['provisioningState']);
        }
        // validate the optional field `destination`
        if (data['destination']) { // data not null
          ConnectionMonitorDestination.validateJSON(data['destination']);
        }
        // validate the optional field `source`
        if (data['source']) { // data not null
          ConnectionMonitorSource.validateJSON(data['source']);
        }

        return true;
    }


}

ConnectionMonitorResultProperties.RequiredProperties = ["destination", "source"];

/**
 * The monitoring status of the connection monitor.
 * @member {String} monitoringStatus
 */
ConnectionMonitorResultProperties.prototype['monitoringStatus'] = undefined;

/**
 * The current provisioning state.
 * @member {module:model/ConnectionMonitorResultProperties.ProvisioningStateEnum} provisioningState
 */
ConnectionMonitorResultProperties.prototype['provisioningState'] = undefined;

/**
 * The date and time when the connection monitor was started.
 * @member {Date} startTime
 */
ConnectionMonitorResultProperties.prototype['startTime'] = undefined;

/**
 * Determines if the connection monitor will start automatically once created.
 * @member {Boolean} autoStart
 * @default true
 */
ConnectionMonitorResultProperties.prototype['autoStart'] = true;

/**
 * @member {module:model/ConnectionMonitorDestination} destination
 */
ConnectionMonitorResultProperties.prototype['destination'] = undefined;

/**
 * Monitoring interval in seconds.
 * @member {Number} monitoringIntervalInSeconds
 */
ConnectionMonitorResultProperties.prototype['monitoringIntervalInSeconds'] = undefined;

/**
 * @member {module:model/ConnectionMonitorSource} source
 */
ConnectionMonitorResultProperties.prototype['source'] = undefined;


// Implement ConnectionMonitorParameters interface:
/**
 * Determines if the connection monitor will start automatically once created.
 * @member {Boolean} autoStart
 * @default true
 */
ConnectionMonitorParameters.prototype['autoStart'] = true;
/**
 * @member {module:model/ConnectionMonitorDestination} destination
 */
ConnectionMonitorParameters.prototype['destination'] = undefined;
/**
 * Monitoring interval in seconds.
 * @member {Number} monitoringIntervalInSeconds
 */
ConnectionMonitorParameters.prototype['monitoringIntervalInSeconds'] = undefined;
/**
 * @member {module:model/ConnectionMonitorSource} source
 */
ConnectionMonitorParameters.prototype['source'] = undefined;



/**
 * Allowed values for the <code>provisioningState</code> property.
 * @enum {String}
 * @readonly
 */
ConnectionMonitorResultProperties['ProvisioningStateEnum'] = {

    /**
     * value: "Succeeded"
     * @const
     */
    "Succeeded": "Succeeded",

    /**
     * value: "Updating"
     * @const
     */
    "Updating": "Updating",

    /**
     * value: "Deleting"
     * @const
     */
    "Deleting": "Deleting",

    /**
     * value: "Failed"
     * @const
     */
    "Failed": "Failed"
};



export default ConnectionMonitorResultProperties;

