/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ConnectionMonitor from '../model/ConnectionMonitor';
import ConnectionMonitorListResult from '../model/ConnectionMonitorListResult';
import ConnectionMonitorQueryResult from '../model/ConnectionMonitorQueryResult';
import ConnectionMonitorResult from '../model/ConnectionMonitorResult';
import ErrorResponse from '../model/ErrorResponse';

/**
* ConnectionMonitors service.
* @module api/ConnectionMonitorsApi
* @version 2019-04-01
*/
export default class ConnectionMonitorsApi {

    /**
    * Constructs a new ConnectionMonitorsApi. 
    * @alias module:api/ConnectionMonitorsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the connectionMonitorsCreateOrUpdate operation.
     * @callback module:api/ConnectionMonitorsApi~connectionMonitorsCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConnectionMonitorResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update a connection monitor.
     * @param {String} resourceGroupName The name of the resource group containing Network Watcher.
     * @param {String} networkWatcherName The name of the Network Watcher resource.
     * @param {String} connectionMonitorName The name of the connection monitor.
     * @param {String} apiVersion Client API version.
     * @param {String} subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:model/ConnectionMonitor} parameters Parameters that define the operation to create a connection monitor.
     * @param {module:api/ConnectionMonitorsApi~connectionMonitorsCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConnectionMonitorResult}
     */
    connectionMonitorsCreateOrUpdate(resourceGroupName, networkWatcherName, connectionMonitorName, apiVersion, subscriptionId, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling connectionMonitorsCreateOrUpdate");
      }
      // verify the required parameter 'networkWatcherName' is set
      if (networkWatcherName === undefined || networkWatcherName === null) {
        throw new Error("Missing the required parameter 'networkWatcherName' when calling connectionMonitorsCreateOrUpdate");
      }
      // verify the required parameter 'connectionMonitorName' is set
      if (connectionMonitorName === undefined || connectionMonitorName === null) {
        throw new Error("Missing the required parameter 'connectionMonitorName' when calling connectionMonitorsCreateOrUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling connectionMonitorsCreateOrUpdate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling connectionMonitorsCreateOrUpdate");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling connectionMonitorsCreateOrUpdate");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'networkWatcherName': networkWatcherName,
        'connectionMonitorName': connectionMonitorName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ConnectionMonitorResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/connectionMonitors/{connectionMonitorName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the connectionMonitorsDelete operation.
     * @callback module:api/ConnectionMonitorsApi~connectionMonitorsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the specified connection monitor.
     * @param {String} resourceGroupName The name of the resource group containing Network Watcher.
     * @param {String} networkWatcherName The name of the Network Watcher resource.
     * @param {String} connectionMonitorName The name of the connection monitor.
     * @param {String} apiVersion Client API version.
     * @param {String} subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:api/ConnectionMonitorsApi~connectionMonitorsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    connectionMonitorsDelete(resourceGroupName, networkWatcherName, connectionMonitorName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling connectionMonitorsDelete");
      }
      // verify the required parameter 'networkWatcherName' is set
      if (networkWatcherName === undefined || networkWatcherName === null) {
        throw new Error("Missing the required parameter 'networkWatcherName' when calling connectionMonitorsDelete");
      }
      // verify the required parameter 'connectionMonitorName' is set
      if (connectionMonitorName === undefined || connectionMonitorName === null) {
        throw new Error("Missing the required parameter 'connectionMonitorName' when calling connectionMonitorsDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling connectionMonitorsDelete");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling connectionMonitorsDelete");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'networkWatcherName': networkWatcherName,
        'connectionMonitorName': connectionMonitorName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/connectionMonitors/{connectionMonitorName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the connectionMonitorsGet operation.
     * @callback module:api/ConnectionMonitorsApi~connectionMonitorsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConnectionMonitorResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a connection monitor by name.
     * @param {String} resourceGroupName The name of the resource group containing Network Watcher.
     * @param {String} networkWatcherName The name of the Network Watcher resource.
     * @param {String} connectionMonitorName The name of the connection monitor.
     * @param {String} apiVersion Client API version.
     * @param {String} subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:api/ConnectionMonitorsApi~connectionMonitorsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConnectionMonitorResult}
     */
    connectionMonitorsGet(resourceGroupName, networkWatcherName, connectionMonitorName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling connectionMonitorsGet");
      }
      // verify the required parameter 'networkWatcherName' is set
      if (networkWatcherName === undefined || networkWatcherName === null) {
        throw new Error("Missing the required parameter 'networkWatcherName' when calling connectionMonitorsGet");
      }
      // verify the required parameter 'connectionMonitorName' is set
      if (connectionMonitorName === undefined || connectionMonitorName === null) {
        throw new Error("Missing the required parameter 'connectionMonitorName' when calling connectionMonitorsGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling connectionMonitorsGet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling connectionMonitorsGet");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'networkWatcherName': networkWatcherName,
        'connectionMonitorName': connectionMonitorName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ConnectionMonitorResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/connectionMonitors/{connectionMonitorName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the connectionMonitorsList operation.
     * @callback module:api/ConnectionMonitorsApi~connectionMonitorsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConnectionMonitorListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all connection monitors for the specified Network Watcher.
     * @param {String} resourceGroupName The name of the resource group containing Network Watcher.
     * @param {String} networkWatcherName The name of the Network Watcher resource.
     * @param {String} apiVersion Client API version.
     * @param {String} subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:api/ConnectionMonitorsApi~connectionMonitorsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConnectionMonitorListResult}
     */
    connectionMonitorsList(resourceGroupName, networkWatcherName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling connectionMonitorsList");
      }
      // verify the required parameter 'networkWatcherName' is set
      if (networkWatcherName === undefined || networkWatcherName === null) {
        throw new Error("Missing the required parameter 'networkWatcherName' when calling connectionMonitorsList");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling connectionMonitorsList");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling connectionMonitorsList");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'networkWatcherName': networkWatcherName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ConnectionMonitorListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/connectionMonitors', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the connectionMonitorsQuery operation.
     * @callback module:api/ConnectionMonitorsApi~connectionMonitorsQueryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConnectionMonitorQueryResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Query a snapshot of the most recent connection states.
     * @param {String} resourceGroupName The name of the resource group containing Network Watcher.
     * @param {String} networkWatcherName The name of the Network Watcher resource.
     * @param {String} connectionMonitorName The name given to the connection monitor.
     * @param {String} apiVersion Client API version.
     * @param {String} subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:api/ConnectionMonitorsApi~connectionMonitorsQueryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConnectionMonitorQueryResult}
     */
    connectionMonitorsQuery(resourceGroupName, networkWatcherName, connectionMonitorName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling connectionMonitorsQuery");
      }
      // verify the required parameter 'networkWatcherName' is set
      if (networkWatcherName === undefined || networkWatcherName === null) {
        throw new Error("Missing the required parameter 'networkWatcherName' when calling connectionMonitorsQuery");
      }
      // verify the required parameter 'connectionMonitorName' is set
      if (connectionMonitorName === undefined || connectionMonitorName === null) {
        throw new Error("Missing the required parameter 'connectionMonitorName' when calling connectionMonitorsQuery");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling connectionMonitorsQuery");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling connectionMonitorsQuery");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'networkWatcherName': networkWatcherName,
        'connectionMonitorName': connectionMonitorName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ConnectionMonitorQueryResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/connectionMonitors/{connectionMonitorName}/query', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the connectionMonitorsStart operation.
     * @callback module:api/ConnectionMonitorsApi~connectionMonitorsStartCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Starts the specified connection monitor.
     * @param {String} resourceGroupName The name of the resource group containing Network Watcher.
     * @param {String} networkWatcherName The name of the Network Watcher resource.
     * @param {String} connectionMonitorName The name of the connection monitor.
     * @param {String} apiVersion Client API version.
     * @param {String} subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:api/ConnectionMonitorsApi~connectionMonitorsStartCallback} callback The callback function, accepting three arguments: error, data, response
     */
    connectionMonitorsStart(resourceGroupName, networkWatcherName, connectionMonitorName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling connectionMonitorsStart");
      }
      // verify the required parameter 'networkWatcherName' is set
      if (networkWatcherName === undefined || networkWatcherName === null) {
        throw new Error("Missing the required parameter 'networkWatcherName' when calling connectionMonitorsStart");
      }
      // verify the required parameter 'connectionMonitorName' is set
      if (connectionMonitorName === undefined || connectionMonitorName === null) {
        throw new Error("Missing the required parameter 'connectionMonitorName' when calling connectionMonitorsStart");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling connectionMonitorsStart");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling connectionMonitorsStart");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'networkWatcherName': networkWatcherName,
        'connectionMonitorName': connectionMonitorName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/connectionMonitors/{connectionMonitorName}/start', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the connectionMonitorsStop operation.
     * @callback module:api/ConnectionMonitorsApi~connectionMonitorsStopCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stops the specified connection monitor.
     * @param {String} resourceGroupName The name of the resource group containing Network Watcher.
     * @param {String} networkWatcherName The name of the Network Watcher resource.
     * @param {String} connectionMonitorName The name of the connection monitor.
     * @param {String} apiVersion Client API version.
     * @param {String} subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:api/ConnectionMonitorsApi~connectionMonitorsStopCallback} callback The callback function, accepting three arguments: error, data, response
     */
    connectionMonitorsStop(resourceGroupName, networkWatcherName, connectionMonitorName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling connectionMonitorsStop");
      }
      // verify the required parameter 'networkWatcherName' is set
      if (networkWatcherName === undefined || networkWatcherName === null) {
        throw new Error("Missing the required parameter 'networkWatcherName' when calling connectionMonitorsStop");
      }
      // verify the required parameter 'connectionMonitorName' is set
      if (connectionMonitorName === undefined || connectionMonitorName === null) {
        throw new Error("Missing the required parameter 'connectionMonitorName' when calling connectionMonitorsStop");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling connectionMonitorsStop");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling connectionMonitorsStop");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'networkWatcherName': networkWatcherName,
        'connectionMonitorName': connectionMonitorName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/connectionMonitors/{connectionMonitorName}/stop', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
