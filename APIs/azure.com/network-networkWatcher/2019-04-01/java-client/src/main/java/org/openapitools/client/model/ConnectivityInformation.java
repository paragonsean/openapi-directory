/*
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ConnectivityHop;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information on the connectivity status.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:33:34.379817-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ConnectivityInformation {
  public static final String SERIALIZED_NAME_AVG_LATENCY_IN_MS = "avgLatencyInMs";
  @SerializedName(SERIALIZED_NAME_AVG_LATENCY_IN_MS)
  private Integer avgLatencyInMs;

  /**
   * The connection status.
   */
  @JsonAdapter(ConnectionStatusEnum.Adapter.class)
  public enum ConnectionStatusEnum {
    UNKNOWN("Unknown"),
    
    CONNECTED("Connected"),
    
    DISCONNECTED("Disconnected"),
    
    DEGRADED("Degraded");

    private String value;

    ConnectionStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ConnectionStatusEnum fromValue(String value) {
      for (ConnectionStatusEnum b : ConnectionStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ConnectionStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ConnectionStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ConnectionStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ConnectionStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ConnectionStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CONNECTION_STATUS = "connectionStatus";
  @SerializedName(SERIALIZED_NAME_CONNECTION_STATUS)
  private ConnectionStatusEnum connectionStatus;

  public static final String SERIALIZED_NAME_HOPS = "hops";
  @SerializedName(SERIALIZED_NAME_HOPS)
  private List<ConnectivityHop> hops = new ArrayList<>();

  public static final String SERIALIZED_NAME_MAX_LATENCY_IN_MS = "maxLatencyInMs";
  @SerializedName(SERIALIZED_NAME_MAX_LATENCY_IN_MS)
  private Integer maxLatencyInMs;

  public static final String SERIALIZED_NAME_MIN_LATENCY_IN_MS = "minLatencyInMs";
  @SerializedName(SERIALIZED_NAME_MIN_LATENCY_IN_MS)
  private Integer minLatencyInMs;

  public static final String SERIALIZED_NAME_PROBES_FAILED = "probesFailed";
  @SerializedName(SERIALIZED_NAME_PROBES_FAILED)
  private Integer probesFailed;

  public static final String SERIALIZED_NAME_PROBES_SENT = "probesSent";
  @SerializedName(SERIALIZED_NAME_PROBES_SENT)
  private Integer probesSent;

  public ConnectivityInformation() {
  }

  public ConnectivityInformation(
     Integer avgLatencyInMs, 
     ConnectionStatusEnum connectionStatus, 
     List<ConnectivityHop> hops, 
     Integer maxLatencyInMs, 
     Integer minLatencyInMs, 
     Integer probesFailed, 
     Integer probesSent
  ) {
    this();
    this.avgLatencyInMs = avgLatencyInMs;
    this.connectionStatus = connectionStatus;
    this.hops = hops;
    this.maxLatencyInMs = maxLatencyInMs;
    this.minLatencyInMs = minLatencyInMs;
    this.probesFailed = probesFailed;
    this.probesSent = probesSent;
  }

  /**
   * Average latency in milliseconds.
   * @return avgLatencyInMs
   */
  @javax.annotation.Nullable
  public Integer getAvgLatencyInMs() {
    return avgLatencyInMs;
  }



  /**
   * The connection status.
   * @return connectionStatus
   */
  @javax.annotation.Nullable
  public ConnectionStatusEnum getConnectionStatus() {
    return connectionStatus;
  }



  /**
   * List of hops between the source and the destination.
   * @return hops
   */
  @javax.annotation.Nullable
  public List<ConnectivityHop> getHops() {
    return hops;
  }



  /**
   * Maximum latency in milliseconds.
   * @return maxLatencyInMs
   */
  @javax.annotation.Nullable
  public Integer getMaxLatencyInMs() {
    return maxLatencyInMs;
  }



  /**
   * Minimum latency in milliseconds.
   * @return minLatencyInMs
   */
  @javax.annotation.Nullable
  public Integer getMinLatencyInMs() {
    return minLatencyInMs;
  }



  /**
   * Number of failed probes.
   * @return probesFailed
   */
  @javax.annotation.Nullable
  public Integer getProbesFailed() {
    return probesFailed;
  }



  /**
   * Total number of probes sent.
   * @return probesSent
   */
  @javax.annotation.Nullable
  public Integer getProbesSent() {
    return probesSent;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConnectivityInformation connectivityInformation = (ConnectivityInformation) o;
    return Objects.equals(this.avgLatencyInMs, connectivityInformation.avgLatencyInMs) &&
        Objects.equals(this.connectionStatus, connectivityInformation.connectionStatus) &&
        Objects.equals(this.hops, connectivityInformation.hops) &&
        Objects.equals(this.maxLatencyInMs, connectivityInformation.maxLatencyInMs) &&
        Objects.equals(this.minLatencyInMs, connectivityInformation.minLatencyInMs) &&
        Objects.equals(this.probesFailed, connectivityInformation.probesFailed) &&
        Objects.equals(this.probesSent, connectivityInformation.probesSent);
  }

  @Override
  public int hashCode() {
    return Objects.hash(avgLatencyInMs, connectionStatus, hops, maxLatencyInMs, minLatencyInMs, probesFailed, probesSent);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConnectivityInformation {\n");
    sb.append("    avgLatencyInMs: ").append(toIndentedString(avgLatencyInMs)).append("\n");
    sb.append("    connectionStatus: ").append(toIndentedString(connectionStatus)).append("\n");
    sb.append("    hops: ").append(toIndentedString(hops)).append("\n");
    sb.append("    maxLatencyInMs: ").append(toIndentedString(maxLatencyInMs)).append("\n");
    sb.append("    minLatencyInMs: ").append(toIndentedString(minLatencyInMs)).append("\n");
    sb.append("    probesFailed: ").append(toIndentedString(probesFailed)).append("\n");
    sb.append("    probesSent: ").append(toIndentedString(probesSent)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("avgLatencyInMs");
    openapiFields.add("connectionStatus");
    openapiFields.add("hops");
    openapiFields.add("maxLatencyInMs");
    openapiFields.add("minLatencyInMs");
    openapiFields.add("probesFailed");
    openapiFields.add("probesSent");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ConnectivityInformation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConnectivityInformation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConnectivityInformation is not found in the empty JSON string", ConnectivityInformation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConnectivityInformation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConnectivityInformation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("connectionStatus") != null && !jsonObj.get("connectionStatus").isJsonNull()) && !jsonObj.get("connectionStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `connectionStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("connectionStatus").toString()));
      }
      // validate the optional field `connectionStatus`
      if (jsonObj.get("connectionStatus") != null && !jsonObj.get("connectionStatus").isJsonNull()) {
        ConnectionStatusEnum.validateJsonElement(jsonObj.get("connectionStatus"));
      }
      if (jsonObj.get("hops") != null && !jsonObj.get("hops").isJsonNull()) {
        JsonArray jsonArrayhops = jsonObj.getAsJsonArray("hops");
        if (jsonArrayhops != null) {
          // ensure the json data is an array
          if (!jsonObj.get("hops").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `hops` to be an array in the JSON string but got `%s`", jsonObj.get("hops").toString()));
          }

          // validate the optional field `hops` (array)
          for (int i = 0; i < jsonArrayhops.size(); i++) {
            ConnectivityHop.validateJsonElement(jsonArrayhops.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConnectivityInformation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConnectivityInformation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConnectivityInformation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConnectivityInformation.class));

       return (TypeAdapter<T>) new TypeAdapter<ConnectivityInformation>() {
           @Override
           public void write(JsonWriter out, ConnectivityInformation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConnectivityInformation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ConnectivityInformation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ConnectivityInformation
   * @throws IOException if the JSON string is invalid with respect to ConnectivityInformation
   */
  public static ConnectivityInformation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConnectivityInformation.class);
  }

  /**
   * Convert an instance of ConnectivityInformation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

