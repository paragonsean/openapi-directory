/*
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.FlowLogProperties;
import org.openapitools.client.model.TrafficAnalyticsProperties;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information on the configuration of flow log and traffic analytics (optional) .
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:33:34.379817-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FlowLogInformation {
  public static final String SERIALIZED_NAME_FLOW_ANALYTICS_CONFIGURATION = "flowAnalyticsConfiguration";
  @SerializedName(SERIALIZED_NAME_FLOW_ANALYTICS_CONFIGURATION)
  private TrafficAnalyticsProperties flowAnalyticsConfiguration;

  public static final String SERIALIZED_NAME_PROPERTIES = "properties";
  @SerializedName(SERIALIZED_NAME_PROPERTIES)
  private FlowLogProperties properties;

  public static final String SERIALIZED_NAME_TARGET_RESOURCE_ID = "targetResourceId";
  @SerializedName(SERIALIZED_NAME_TARGET_RESOURCE_ID)
  private String targetResourceId;

  public FlowLogInformation() {
  }

  public FlowLogInformation flowAnalyticsConfiguration(TrafficAnalyticsProperties flowAnalyticsConfiguration) {
    this.flowAnalyticsConfiguration = flowAnalyticsConfiguration;
    return this;
  }

  /**
   * Get flowAnalyticsConfiguration
   * @return flowAnalyticsConfiguration
   */
  @javax.annotation.Nullable
  public TrafficAnalyticsProperties getFlowAnalyticsConfiguration() {
    return flowAnalyticsConfiguration;
  }

  public void setFlowAnalyticsConfiguration(TrafficAnalyticsProperties flowAnalyticsConfiguration) {
    this.flowAnalyticsConfiguration = flowAnalyticsConfiguration;
  }


  public FlowLogInformation properties(FlowLogProperties properties) {
    this.properties = properties;
    return this;
  }

  /**
   * Get properties
   * @return properties
   */
  @javax.annotation.Nonnull
  public FlowLogProperties getProperties() {
    return properties;
  }

  public void setProperties(FlowLogProperties properties) {
    this.properties = properties;
  }


  public FlowLogInformation targetResourceId(String targetResourceId) {
    this.targetResourceId = targetResourceId;
    return this;
  }

  /**
   * The ID of the resource to configure for flow log and traffic analytics (optional) .
   * @return targetResourceId
   */
  @javax.annotation.Nonnull
  public String getTargetResourceId() {
    return targetResourceId;
  }

  public void setTargetResourceId(String targetResourceId) {
    this.targetResourceId = targetResourceId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FlowLogInformation flowLogInformation = (FlowLogInformation) o;
    return Objects.equals(this.flowAnalyticsConfiguration, flowLogInformation.flowAnalyticsConfiguration) &&
        Objects.equals(this.properties, flowLogInformation.properties) &&
        Objects.equals(this.targetResourceId, flowLogInformation.targetResourceId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(flowAnalyticsConfiguration, properties, targetResourceId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FlowLogInformation {\n");
    sb.append("    flowAnalyticsConfiguration: ").append(toIndentedString(flowAnalyticsConfiguration)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("    targetResourceId: ").append(toIndentedString(targetResourceId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("flowAnalyticsConfiguration");
    openapiFields.add("properties");
    openapiFields.add("targetResourceId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("properties");
    openapiRequiredFields.add("targetResourceId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FlowLogInformation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FlowLogInformation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FlowLogInformation is not found in the empty JSON string", FlowLogInformation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FlowLogInformation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FlowLogInformation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : FlowLogInformation.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `flowAnalyticsConfiguration`
      if (jsonObj.get("flowAnalyticsConfiguration") != null && !jsonObj.get("flowAnalyticsConfiguration").isJsonNull()) {
        TrafficAnalyticsProperties.validateJsonElement(jsonObj.get("flowAnalyticsConfiguration"));
      }
      // validate the required field `properties`
      FlowLogProperties.validateJsonElement(jsonObj.get("properties"));
      if (!jsonObj.get("targetResourceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetResourceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("targetResourceId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FlowLogInformation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FlowLogInformation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FlowLogInformation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FlowLogInformation.class));

       return (TypeAdapter<T>) new TypeAdapter<FlowLogInformation>() {
           @Override
           public void write(JsonWriter out, FlowLogInformation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FlowLogInformation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FlowLogInformation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FlowLogInformation
   * @throws IOException if the JSON string is invalid with respect to FlowLogInformation
   */
  public static FlowLogInformation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FlowLogInformation.class);
  }

  /**
   * Convert an instance of FlowLogInformation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

