/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-04-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITopologyResource.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITopologyResource::OAITopologyResource(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITopologyResource::OAITopologyResource() {
    this->initializeModel();
}

OAITopologyResource::~OAITopologyResource() {}

void OAITopologyResource::initializeModel() {

    m_associations_isSet = false;
    m_associations_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAITopologyResource::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITopologyResource::fromJsonObject(QJsonObject json) {

    m_associations_isValid = ::OpenAPI::fromJsonValue(m_associations, json[QString("associations")]);
    m_associations_isSet = !json[QString("associations")].isNull() && m_associations_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAITopologyResource::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITopologyResource::asJsonObject() const {
    QJsonObject obj;
    if (m_associations.size() > 0) {
        obj.insert(QString("associations"), ::OpenAPI::toJsonValue(m_associations));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

QList<OAITopologyAssociation> OAITopologyResource::getAssociations() const {
    return m_associations;
}
void OAITopologyResource::setAssociations(const QList<OAITopologyAssociation> &associations) {
    m_associations = associations;
    m_associations_isSet = true;
}

bool OAITopologyResource::is_associations_Set() const{
    return m_associations_isSet;
}

bool OAITopologyResource::is_associations_Valid() const{
    return m_associations_isValid;
}

QString OAITopologyResource::getId() const {
    return m_id;
}
void OAITopologyResource::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITopologyResource::is_id_Set() const{
    return m_id_isSet;
}

bool OAITopologyResource::is_id_Valid() const{
    return m_id_isValid;
}

QString OAITopologyResource::getLocation() const {
    return m_location;
}
void OAITopologyResource::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAITopologyResource::is_location_Set() const{
    return m_location_isSet;
}

bool OAITopologyResource::is_location_Valid() const{
    return m_location_isValid;
}

QString OAITopologyResource::getName() const {
    return m_name;
}
void OAITopologyResource::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITopologyResource::is_name_Set() const{
    return m_name_isSet;
}

bool OAITopologyResource::is_name_Valid() const{
    return m_name_isValid;
}

bool OAITopologyResource::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_associations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITopologyResource::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
