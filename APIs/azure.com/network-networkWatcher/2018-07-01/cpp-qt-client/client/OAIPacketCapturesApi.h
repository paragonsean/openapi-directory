/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2018-07-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPacketCapturesApi_H
#define OAI_OAIPacketCapturesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIErrorResponse.h"
#include "OAIPacketCapture.h"
#include "OAIPacketCaptureListResult.h"
#include "OAIPacketCaptureQueryStatusResult.h"
#include "OAIPacketCaptureResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPacketCapturesApi : public QObject {
    Q_OBJECT

public:
    OAIPacketCapturesApi(const int timeOut = 0);
    ~OAIPacketCapturesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  network_watcher_name QString [required]
    * @param[in]  packet_capture_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIPacketCapture [required]
    */
    virtual void packetCapturesCreate(const QString &resource_group_name, const QString &network_watcher_name, const QString &packet_capture_name, const QString &api_version, const QString &subscription_id, const OAIPacketCapture &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  network_watcher_name QString [required]
    * @param[in]  packet_capture_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void packetCapturesDelete(const QString &resource_group_name, const QString &network_watcher_name, const QString &packet_capture_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  network_watcher_name QString [required]
    * @param[in]  packet_capture_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void packetCapturesGet(const QString &resource_group_name, const QString &network_watcher_name, const QString &packet_capture_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  network_watcher_name QString [required]
    * @param[in]  packet_capture_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void packetCapturesGetStatus(const QString &resource_group_name, const QString &network_watcher_name, const QString &packet_capture_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  network_watcher_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void packetCapturesList(const QString &resource_group_name, const QString &network_watcher_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  network_watcher_name QString [required]
    * @param[in]  packet_capture_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void packetCapturesStop(const QString &resource_group_name, const QString &network_watcher_name, const QString &packet_capture_name, const QString &api_version, const QString &subscription_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void packetCapturesCreateCallback(OAIHttpRequestWorker *worker);
    void packetCapturesDeleteCallback(OAIHttpRequestWorker *worker);
    void packetCapturesGetCallback(OAIHttpRequestWorker *worker);
    void packetCapturesGetStatusCallback(OAIHttpRequestWorker *worker);
    void packetCapturesListCallback(OAIHttpRequestWorker *worker);
    void packetCapturesStopCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void packetCapturesCreateSignal(OAIPacketCaptureResult summary);
    void packetCapturesDeleteSignal();
    void packetCapturesGetSignal(OAIPacketCaptureResult summary);
    void packetCapturesGetStatusSignal(OAIPacketCaptureQueryStatusResult summary);
    void packetCapturesListSignal(OAIPacketCaptureListResult summary);
    void packetCapturesStopSignal();


    void packetCapturesCreateSignalFull(OAIHttpRequestWorker *worker, OAIPacketCaptureResult summary);
    void packetCapturesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void packetCapturesGetSignalFull(OAIHttpRequestWorker *worker, OAIPacketCaptureResult summary);
    void packetCapturesGetStatusSignalFull(OAIHttpRequestWorker *worker, OAIPacketCaptureQueryStatusResult summary);
    void packetCapturesListSignalFull(OAIHttpRequestWorker *worker, OAIPacketCaptureListResult summary);
    void packetCapturesStopSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use packetCapturesCreateSignalError() instead")
    void packetCapturesCreateSignalE(OAIPacketCaptureResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void packetCapturesCreateSignalError(OAIPacketCaptureResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use packetCapturesDeleteSignalError() instead")
    void packetCapturesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void packetCapturesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use packetCapturesGetSignalError() instead")
    void packetCapturesGetSignalE(OAIPacketCaptureResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void packetCapturesGetSignalError(OAIPacketCaptureResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use packetCapturesGetStatusSignalError() instead")
    void packetCapturesGetStatusSignalE(OAIPacketCaptureQueryStatusResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void packetCapturesGetStatusSignalError(OAIPacketCaptureQueryStatusResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use packetCapturesListSignalError() instead")
    void packetCapturesListSignalE(OAIPacketCaptureListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void packetCapturesListSignalError(OAIPacketCaptureListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use packetCapturesStopSignalError() instead")
    void packetCapturesStopSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void packetCapturesStopSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use packetCapturesCreateSignalErrorFull() instead")
    void packetCapturesCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void packetCapturesCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use packetCapturesDeleteSignalErrorFull() instead")
    void packetCapturesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void packetCapturesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use packetCapturesGetSignalErrorFull() instead")
    void packetCapturesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void packetCapturesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use packetCapturesGetStatusSignalErrorFull() instead")
    void packetCapturesGetStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void packetCapturesGetStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use packetCapturesListSignalErrorFull() instead")
    void packetCapturesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void packetCapturesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use packetCapturesStopSignalErrorFull() instead")
    void packetCapturesStopSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void packetCapturesStopSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
