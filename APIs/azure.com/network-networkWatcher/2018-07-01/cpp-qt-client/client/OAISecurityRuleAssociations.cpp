/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2018-07-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISecurityRuleAssociations.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISecurityRuleAssociations::OAISecurityRuleAssociations(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISecurityRuleAssociations::OAISecurityRuleAssociations() {
    this->initializeModel();
}

OAISecurityRuleAssociations::~OAISecurityRuleAssociations() {}

void OAISecurityRuleAssociations::initializeModel() {

    m_default_security_rules_isSet = false;
    m_default_security_rules_isValid = false;

    m_effective_security_rules_isSet = false;
    m_effective_security_rules_isValid = false;

    m_network_interface_association_isSet = false;
    m_network_interface_association_isValid = false;

    m_subnet_association_isSet = false;
    m_subnet_association_isValid = false;
}

void OAISecurityRuleAssociations::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISecurityRuleAssociations::fromJsonObject(QJsonObject json) {

    m_default_security_rules_isValid = ::OpenAPI::fromJsonValue(m_default_security_rules, json[QString("defaultSecurityRules")]);
    m_default_security_rules_isSet = !json[QString("defaultSecurityRules")].isNull() && m_default_security_rules_isValid;

    m_effective_security_rules_isValid = ::OpenAPI::fromJsonValue(m_effective_security_rules, json[QString("effectiveSecurityRules")]);
    m_effective_security_rules_isSet = !json[QString("effectiveSecurityRules")].isNull() && m_effective_security_rules_isValid;

    m_network_interface_association_isValid = ::OpenAPI::fromJsonValue(m_network_interface_association, json[QString("networkInterfaceAssociation")]);
    m_network_interface_association_isSet = !json[QString("networkInterfaceAssociation")].isNull() && m_network_interface_association_isValid;

    m_subnet_association_isValid = ::OpenAPI::fromJsonValue(m_subnet_association, json[QString("subnetAssociation")]);
    m_subnet_association_isSet = !json[QString("subnetAssociation")].isNull() && m_subnet_association_isValid;
}

QString OAISecurityRuleAssociations::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISecurityRuleAssociations::asJsonObject() const {
    QJsonObject obj;
    if (m_default_security_rules.size() > 0) {
        obj.insert(QString("defaultSecurityRules"), ::OpenAPI::toJsonValue(m_default_security_rules));
    }
    if (m_effective_security_rules.size() > 0) {
        obj.insert(QString("effectiveSecurityRules"), ::OpenAPI::toJsonValue(m_effective_security_rules));
    }
    if (m_network_interface_association.isSet()) {
        obj.insert(QString("networkInterfaceAssociation"), ::OpenAPI::toJsonValue(m_network_interface_association));
    }
    if (m_subnet_association.isSet()) {
        obj.insert(QString("subnetAssociation"), ::OpenAPI::toJsonValue(m_subnet_association));
    }
    return obj;
}

QList<OAINetworkInterfaceAssociation_securityRules_inner> OAISecurityRuleAssociations::getDefaultSecurityRules() const {
    return m_default_security_rules;
}
void OAISecurityRuleAssociations::setDefaultSecurityRules(const QList<OAINetworkInterfaceAssociation_securityRules_inner> &default_security_rules) {
    m_default_security_rules = default_security_rules;
    m_default_security_rules_isSet = true;
}

bool OAISecurityRuleAssociations::is_default_security_rules_Set() const{
    return m_default_security_rules_isSet;
}

bool OAISecurityRuleAssociations::is_default_security_rules_Valid() const{
    return m_default_security_rules_isValid;
}

QList<OAISecurityRuleAssociations_effectiveSecurityRules_inner> OAISecurityRuleAssociations::getEffectiveSecurityRules() const {
    return m_effective_security_rules;
}
void OAISecurityRuleAssociations::setEffectiveSecurityRules(const QList<OAISecurityRuleAssociations_effectiveSecurityRules_inner> &effective_security_rules) {
    m_effective_security_rules = effective_security_rules;
    m_effective_security_rules_isSet = true;
}

bool OAISecurityRuleAssociations::is_effective_security_rules_Set() const{
    return m_effective_security_rules_isSet;
}

bool OAISecurityRuleAssociations::is_effective_security_rules_Valid() const{
    return m_effective_security_rules_isValid;
}

OAINetworkInterfaceAssociation OAISecurityRuleAssociations::getNetworkInterfaceAssociation() const {
    return m_network_interface_association;
}
void OAISecurityRuleAssociations::setNetworkInterfaceAssociation(const OAINetworkInterfaceAssociation &network_interface_association) {
    m_network_interface_association = network_interface_association;
    m_network_interface_association_isSet = true;
}

bool OAISecurityRuleAssociations::is_network_interface_association_Set() const{
    return m_network_interface_association_isSet;
}

bool OAISecurityRuleAssociations::is_network_interface_association_Valid() const{
    return m_network_interface_association_isValid;
}

OAISubnetAssociation OAISecurityRuleAssociations::getSubnetAssociation() const {
    return m_subnet_association;
}
void OAISecurityRuleAssociations::setSubnetAssociation(const OAISubnetAssociation &subnet_association) {
    m_subnet_association = subnet_association;
    m_subnet_association_isSet = true;
}

bool OAISecurityRuleAssociations::is_subnet_association_Set() const{
    return m_subnet_association_isSet;
}

bool OAISecurityRuleAssociations::is_subnet_association_Valid() const{
    return m_subnet_association_isValid;
}

bool OAISecurityRuleAssociations::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_default_security_rules.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_effective_security_rules.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_interface_association.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_subnet_association.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISecurityRuleAssociations::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
