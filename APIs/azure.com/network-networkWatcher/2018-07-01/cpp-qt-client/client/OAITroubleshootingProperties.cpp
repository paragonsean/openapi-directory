/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2018-07-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITroubleshootingProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITroubleshootingProperties::OAITroubleshootingProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITroubleshootingProperties::OAITroubleshootingProperties() {
    this->initializeModel();
}

OAITroubleshootingProperties::~OAITroubleshootingProperties() {}

void OAITroubleshootingProperties::initializeModel() {

    m_storage_id_isSet = false;
    m_storage_id_isValid = false;

    m_storage_path_isSet = false;
    m_storage_path_isValid = false;
}

void OAITroubleshootingProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITroubleshootingProperties::fromJsonObject(QJsonObject json) {

    m_storage_id_isValid = ::OpenAPI::fromJsonValue(m_storage_id, json[QString("storageId")]);
    m_storage_id_isSet = !json[QString("storageId")].isNull() && m_storage_id_isValid;

    m_storage_path_isValid = ::OpenAPI::fromJsonValue(m_storage_path, json[QString("storagePath")]);
    m_storage_path_isSet = !json[QString("storagePath")].isNull() && m_storage_path_isValid;
}

QString OAITroubleshootingProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITroubleshootingProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_storage_id_isSet) {
        obj.insert(QString("storageId"), ::OpenAPI::toJsonValue(m_storage_id));
    }
    if (m_storage_path_isSet) {
        obj.insert(QString("storagePath"), ::OpenAPI::toJsonValue(m_storage_path));
    }
    return obj;
}

QString OAITroubleshootingProperties::getStorageId() const {
    return m_storage_id;
}
void OAITroubleshootingProperties::setStorageId(const QString &storage_id) {
    m_storage_id = storage_id;
    m_storage_id_isSet = true;
}

bool OAITroubleshootingProperties::is_storage_id_Set() const{
    return m_storage_id_isSet;
}

bool OAITroubleshootingProperties::is_storage_id_Valid() const{
    return m_storage_id_isValid;
}

QString OAITroubleshootingProperties::getStoragePath() const {
    return m_storage_path;
}
void OAITroubleshootingProperties::setStoragePath(const QString &storage_path) {
    m_storage_path = storage_path;
    m_storage_path_isSet = true;
}

bool OAITroubleshootingProperties::is_storage_path_Set() const{
    return m_storage_path_isSet;
}

bool OAITroubleshootingProperties::is_storage_path_Valid() const{
    return m_storage_path_isValid;
}

bool OAITroubleshootingProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_storage_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_path_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITroubleshootingProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_storage_id_isValid && m_storage_path_isValid && true;
}

} // namespace OpenAPI
