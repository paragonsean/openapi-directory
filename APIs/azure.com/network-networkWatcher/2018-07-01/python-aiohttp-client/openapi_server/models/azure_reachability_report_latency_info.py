# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AzureReachabilityReportLatencyInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, score: int=None, time_stamp: datetime=None):
        """AzureReachabilityReportLatencyInfo - a model defined in OpenAPI

        :param score: The score of this AzureReachabilityReportLatencyInfo.
        :param time_stamp: The time_stamp of this AzureReachabilityReportLatencyInfo.
        """
        self.openapi_types = {
            'score': int,
            'time_stamp': datetime
        }

        self.attribute_map = {
            'score': 'score',
            'time_stamp': 'timeStamp'
        }

        self._score = score
        self._time_stamp = time_stamp

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AzureReachabilityReportLatencyInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AzureReachabilityReportLatencyInfo of this AzureReachabilityReportLatencyInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def score(self):
        """Gets the score of this AzureReachabilityReportLatencyInfo.

        The relative latency score between 1 and 100, higher values indicating a faster connection.

        :return: The score of this AzureReachabilityReportLatencyInfo.
        :rtype: int
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this AzureReachabilityReportLatencyInfo.

        The relative latency score between 1 and 100, higher values indicating a faster connection.

        :param score: The score of this AzureReachabilityReportLatencyInfo.
        :type score: int
        """
        if score is not None and score > 100:
            raise ValueError("Invalid value for `score`, must be a value less than or equal to `100`")
        if score is not None and score < 1:
            raise ValueError("Invalid value for `score`, must be a value greater than or equal to `1`")

        self._score = score

    @property
    def time_stamp(self):
        """Gets the time_stamp of this AzureReachabilityReportLatencyInfo.

        The time stamp.

        :return: The time_stamp of this AzureReachabilityReportLatencyInfo.
        :rtype: datetime
        """
        return self._time_stamp

    @time_stamp.setter
    def time_stamp(self, time_stamp):
        """Sets the time_stamp of this AzureReachabilityReportLatencyInfo.

        The time stamp.

        :param time_stamp: The time_stamp of this AzureReachabilityReportLatencyInfo.
        :type time_stamp: datetime
        """

        self._time_stamp = time_stamp
