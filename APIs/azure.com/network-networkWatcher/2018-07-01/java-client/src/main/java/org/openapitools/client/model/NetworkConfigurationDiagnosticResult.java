/*
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2018-07-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.NetworkSecurityGroupResult;
import org.openapitools.client.model.TrafficQuery;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Network configuration diagnostic result corresponded to provided traffic query.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:33:38.175047-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NetworkConfigurationDiagnosticResult {
  public static final String SERIALIZED_NAME_NETWORK_SECURITY_GROUP_RESULT = "networkSecurityGroupResult";
  @SerializedName(SERIALIZED_NAME_NETWORK_SECURITY_GROUP_RESULT)
  private NetworkSecurityGroupResult networkSecurityGroupResult;

  public static final String SERIALIZED_NAME_TRAFFIC_QUERY = "trafficQuery";
  @SerializedName(SERIALIZED_NAME_TRAFFIC_QUERY)
  private TrafficQuery trafficQuery;

  public NetworkConfigurationDiagnosticResult() {
  }

  public NetworkConfigurationDiagnosticResult networkSecurityGroupResult(NetworkSecurityGroupResult networkSecurityGroupResult) {
    this.networkSecurityGroupResult = networkSecurityGroupResult;
    return this;
  }

  /**
   * Get networkSecurityGroupResult
   * @return networkSecurityGroupResult
   */
  @javax.annotation.Nullable
  public NetworkSecurityGroupResult getNetworkSecurityGroupResult() {
    return networkSecurityGroupResult;
  }

  public void setNetworkSecurityGroupResult(NetworkSecurityGroupResult networkSecurityGroupResult) {
    this.networkSecurityGroupResult = networkSecurityGroupResult;
  }


  public NetworkConfigurationDiagnosticResult trafficQuery(TrafficQuery trafficQuery) {
    this.trafficQuery = trafficQuery;
    return this;
  }

  /**
   * Get trafficQuery
   * @return trafficQuery
   */
  @javax.annotation.Nullable
  public TrafficQuery getTrafficQuery() {
    return trafficQuery;
  }

  public void setTrafficQuery(TrafficQuery trafficQuery) {
    this.trafficQuery = trafficQuery;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NetworkConfigurationDiagnosticResult networkConfigurationDiagnosticResult = (NetworkConfigurationDiagnosticResult) o;
    return Objects.equals(this.networkSecurityGroupResult, networkConfigurationDiagnosticResult.networkSecurityGroupResult) &&
        Objects.equals(this.trafficQuery, networkConfigurationDiagnosticResult.trafficQuery);
  }

  @Override
  public int hashCode() {
    return Objects.hash(networkSecurityGroupResult, trafficQuery);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NetworkConfigurationDiagnosticResult {\n");
    sb.append("    networkSecurityGroupResult: ").append(toIndentedString(networkSecurityGroupResult)).append("\n");
    sb.append("    trafficQuery: ").append(toIndentedString(trafficQuery)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("networkSecurityGroupResult");
    openapiFields.add("trafficQuery");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NetworkConfigurationDiagnosticResult
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NetworkConfigurationDiagnosticResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NetworkConfigurationDiagnosticResult is not found in the empty JSON string", NetworkConfigurationDiagnosticResult.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NetworkConfigurationDiagnosticResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NetworkConfigurationDiagnosticResult` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `networkSecurityGroupResult`
      if (jsonObj.get("networkSecurityGroupResult") != null && !jsonObj.get("networkSecurityGroupResult").isJsonNull()) {
        NetworkSecurityGroupResult.validateJsonElement(jsonObj.get("networkSecurityGroupResult"));
      }
      // validate the optional field `trafficQuery`
      if (jsonObj.get("trafficQuery") != null && !jsonObj.get("trafficQuery").isJsonNull()) {
        TrafficQuery.validateJsonElement(jsonObj.get("trafficQuery"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NetworkConfigurationDiagnosticResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NetworkConfigurationDiagnosticResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NetworkConfigurationDiagnosticResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NetworkConfigurationDiagnosticResult.class));

       return (TypeAdapter<T>) new TypeAdapter<NetworkConfigurationDiagnosticResult>() {
           @Override
           public void write(JsonWriter out, NetworkConfigurationDiagnosticResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NetworkConfigurationDiagnosticResult read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NetworkConfigurationDiagnosticResult given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NetworkConfigurationDiagnosticResult
   * @throws IOException if the JSON string is invalid with respect to NetworkConfigurationDiagnosticResult
   */
  public static NetworkConfigurationDiagnosticResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NetworkConfigurationDiagnosticResult.class);
  }

  /**
   * Convert an instance of NetworkConfigurationDiagnosticResult to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

