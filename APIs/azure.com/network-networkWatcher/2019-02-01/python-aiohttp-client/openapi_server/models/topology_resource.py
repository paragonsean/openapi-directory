# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.topology_association import TopologyAssociation
from openapi_server import util


class TopologyResource(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, associations: List[TopologyAssociation]=None, id: str=None, location: str=None, name: str=None):
        """TopologyResource - a model defined in OpenAPI

        :param associations: The associations of this TopologyResource.
        :param id: The id of this TopologyResource.
        :param location: The location of this TopologyResource.
        :param name: The name of this TopologyResource.
        """
        self.openapi_types = {
            'associations': List[TopologyAssociation],
            'id': str,
            'location': str,
            'name': str
        }

        self.attribute_map = {
            'associations': 'associations',
            'id': 'id',
            'location': 'location',
            'name': 'name'
        }

        self._associations = associations
        self._id = id
        self._location = location
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TopologyResource':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TopologyResource of this TopologyResource.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def associations(self):
        """Gets the associations of this TopologyResource.

        Holds the associations the resource has with other resources in the resource group.

        :return: The associations of this TopologyResource.
        :rtype: List[TopologyAssociation]
        """
        return self._associations

    @associations.setter
    def associations(self, associations):
        """Sets the associations of this TopologyResource.

        Holds the associations the resource has with other resources in the resource group.

        :param associations: The associations of this TopologyResource.
        :type associations: List[TopologyAssociation]
        """

        self._associations = associations

    @property
    def id(self):
        """Gets the id of this TopologyResource.

        ID of the resource.

        :return: The id of this TopologyResource.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TopologyResource.

        ID of the resource.

        :param id: The id of this TopologyResource.
        :type id: str
        """

        self._id = id

    @property
    def location(self):
        """Gets the location of this TopologyResource.

        Resource location.

        :return: The location of this TopologyResource.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this TopologyResource.

        Resource location.

        :param location: The location of this TopologyResource.
        :type location: str
        """

        self._location = location

    @property
    def name(self):
        """Gets the name of this TopologyResource.

        Name of the resource.

        :return: The name of this TopologyResource.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TopologyResource.

        Name of the resource.

        :param name: The name of this TopologyResource.
        :type name: str
        """

        self._name = name
