/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-02-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITopology.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITopology::OAITopology(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITopology::OAITopology() {
    this->initializeModel();
}

OAITopology::~OAITopology() {}

void OAITopology::initializeModel() {

    m_created_date_time_isSet = false;
    m_created_date_time_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_last_modified_isSet = false;
    m_last_modified_isValid = false;

    m_resources_isSet = false;
    m_resources_isValid = false;
}

void OAITopology::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITopology::fromJsonObject(QJsonObject json) {

    m_created_date_time_isValid = ::OpenAPI::fromJsonValue(m_created_date_time, json[QString("createdDateTime")]);
    m_created_date_time_isSet = !json[QString("createdDateTime")].isNull() && m_created_date_time_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_last_modified_isValid = ::OpenAPI::fromJsonValue(m_last_modified, json[QString("lastModified")]);
    m_last_modified_isSet = !json[QString("lastModified")].isNull() && m_last_modified_isValid;

    m_resources_isValid = ::OpenAPI::fromJsonValue(m_resources, json[QString("resources")]);
    m_resources_isSet = !json[QString("resources")].isNull() && m_resources_isValid;
}

QString OAITopology::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITopology::asJsonObject() const {
    QJsonObject obj;
    if (m_created_date_time_isSet) {
        obj.insert(QString("createdDateTime"), ::OpenAPI::toJsonValue(m_created_date_time));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_last_modified_isSet) {
        obj.insert(QString("lastModified"), ::OpenAPI::toJsonValue(m_last_modified));
    }
    if (m_resources.size() > 0) {
        obj.insert(QString("resources"), ::OpenAPI::toJsonValue(m_resources));
    }
    return obj;
}

QDateTime OAITopology::getCreatedDateTime() const {
    return m_created_date_time;
}
void OAITopology::setCreatedDateTime(const QDateTime &created_date_time) {
    m_created_date_time = created_date_time;
    m_created_date_time_isSet = true;
}

bool OAITopology::is_created_date_time_Set() const{
    return m_created_date_time_isSet;
}

bool OAITopology::is_created_date_time_Valid() const{
    return m_created_date_time_isValid;
}

QString OAITopology::getId() const {
    return m_id;
}
void OAITopology::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITopology::is_id_Set() const{
    return m_id_isSet;
}

bool OAITopology::is_id_Valid() const{
    return m_id_isValid;
}

QDateTime OAITopology::getLastModified() const {
    return m_last_modified;
}
void OAITopology::setLastModified(const QDateTime &last_modified) {
    m_last_modified = last_modified;
    m_last_modified_isSet = true;
}

bool OAITopology::is_last_modified_Set() const{
    return m_last_modified_isSet;
}

bool OAITopology::is_last_modified_Valid() const{
    return m_last_modified_isValid;
}

QList<OAITopologyResource> OAITopology::getResources() const {
    return m_resources;
}
void OAITopology::setResources(const QList<OAITopologyResource> &resources) {
    m_resources = resources;
    m_resources_isSet = true;
}

bool OAITopology::is_resources_Set() const{
    return m_resources_isSet;
}

bool OAITopology::is_resources_Valid() const{
    return m_resources_isValid;
}

bool OAITopology::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resources.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITopology::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
