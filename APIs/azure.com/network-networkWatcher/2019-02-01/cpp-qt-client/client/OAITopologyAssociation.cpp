/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-02-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITopologyAssociation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITopologyAssociation::OAITopologyAssociation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITopologyAssociation::OAITopologyAssociation() {
    this->initializeModel();
}

OAITopologyAssociation::~OAITopologyAssociation() {}

void OAITopologyAssociation::initializeModel() {

    m_association_type_isSet = false;
    m_association_type_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_resource_id_isSet = false;
    m_resource_id_isValid = false;
}

void OAITopologyAssociation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITopologyAssociation::fromJsonObject(QJsonObject json) {

    m_association_type_isValid = ::OpenAPI::fromJsonValue(m_association_type, json[QString("associationType")]);
    m_association_type_isSet = !json[QString("associationType")].isNull() && m_association_type_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_resource_id_isValid = ::OpenAPI::fromJsonValue(m_resource_id, json[QString("resourceId")]);
    m_resource_id_isSet = !json[QString("resourceId")].isNull() && m_resource_id_isValid;
}

QString OAITopologyAssociation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITopologyAssociation::asJsonObject() const {
    QJsonObject obj;
    if (m_association_type_isSet) {
        obj.insert(QString("associationType"), ::OpenAPI::toJsonValue(m_association_type));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_resource_id_isSet) {
        obj.insert(QString("resourceId"), ::OpenAPI::toJsonValue(m_resource_id));
    }
    return obj;
}

QString OAITopologyAssociation::getAssociationType() const {
    return m_association_type;
}
void OAITopologyAssociation::setAssociationType(const QString &association_type) {
    m_association_type = association_type;
    m_association_type_isSet = true;
}

bool OAITopologyAssociation::is_association_type_Set() const{
    return m_association_type_isSet;
}

bool OAITopologyAssociation::is_association_type_Valid() const{
    return m_association_type_isValid;
}

QString OAITopologyAssociation::getName() const {
    return m_name;
}
void OAITopologyAssociation::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITopologyAssociation::is_name_Set() const{
    return m_name_isSet;
}

bool OAITopologyAssociation::is_name_Valid() const{
    return m_name_isValid;
}

QString OAITopologyAssociation::getResourceId() const {
    return m_resource_id;
}
void OAITopologyAssociation::setResourceId(const QString &resource_id) {
    m_resource_id = resource_id;
    m_resource_id_isSet = true;
}

bool OAITopologyAssociation::is_resource_id_Set() const{
    return m_resource_id_isSet;
}

bool OAITopologyAssociation::is_resource_id_Valid() const{
    return m_resource_id_isValid;
}

bool OAITopologyAssociation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_association_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITopologyAssociation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
