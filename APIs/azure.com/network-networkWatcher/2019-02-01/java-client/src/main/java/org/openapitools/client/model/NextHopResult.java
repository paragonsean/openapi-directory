/*
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-02-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The information about next hop from the specified VM.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:33:05.908322-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NextHopResult {
  public static final String SERIALIZED_NAME_NEXT_HOP_IP_ADDRESS = "nextHopIpAddress";
  @SerializedName(SERIALIZED_NAME_NEXT_HOP_IP_ADDRESS)
  private String nextHopIpAddress;

  /**
   * Next hop type.
   */
  @JsonAdapter(NextHopTypeEnum.Adapter.class)
  public enum NextHopTypeEnum {
    INTERNET("Internet"),
    
    VIRTUAL_APPLIANCE("VirtualAppliance"),
    
    VIRTUAL_NETWORK_GATEWAY("VirtualNetworkGateway"),
    
    VNET_LOCAL("VnetLocal"),
    
    HYPER_NET_GATEWAY("HyperNetGateway"),
    
    NONE("None");

    private String value;

    NextHopTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static NextHopTypeEnum fromValue(String value) {
      for (NextHopTypeEnum b : NextHopTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<NextHopTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final NextHopTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public NextHopTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return NextHopTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      NextHopTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_NEXT_HOP_TYPE = "nextHopType";
  @SerializedName(SERIALIZED_NAME_NEXT_HOP_TYPE)
  private NextHopTypeEnum nextHopType;

  public static final String SERIALIZED_NAME_ROUTE_TABLE_ID = "routeTableId";
  @SerializedName(SERIALIZED_NAME_ROUTE_TABLE_ID)
  private String routeTableId;

  public NextHopResult() {
  }

  public NextHopResult nextHopIpAddress(String nextHopIpAddress) {
    this.nextHopIpAddress = nextHopIpAddress;
    return this;
  }

  /**
   * Next hop IP Address
   * @return nextHopIpAddress
   */
  @javax.annotation.Nullable
  public String getNextHopIpAddress() {
    return nextHopIpAddress;
  }

  public void setNextHopIpAddress(String nextHopIpAddress) {
    this.nextHopIpAddress = nextHopIpAddress;
  }


  public NextHopResult nextHopType(NextHopTypeEnum nextHopType) {
    this.nextHopType = nextHopType;
    return this;
  }

  /**
   * Next hop type.
   * @return nextHopType
   */
  @javax.annotation.Nullable
  public NextHopTypeEnum getNextHopType() {
    return nextHopType;
  }

  public void setNextHopType(NextHopTypeEnum nextHopType) {
    this.nextHopType = nextHopType;
  }


  public NextHopResult routeTableId(String routeTableId) {
    this.routeTableId = routeTableId;
    return this;
  }

  /**
   * The resource identifier for the route table associated with the route being returned. If the route being returned does not correspond to any user created routes then this field will be the string &#39;System Route&#39;.
   * @return routeTableId
   */
  @javax.annotation.Nullable
  public String getRouteTableId() {
    return routeTableId;
  }

  public void setRouteTableId(String routeTableId) {
    this.routeTableId = routeTableId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NextHopResult nextHopResult = (NextHopResult) o;
    return Objects.equals(this.nextHopIpAddress, nextHopResult.nextHopIpAddress) &&
        Objects.equals(this.nextHopType, nextHopResult.nextHopType) &&
        Objects.equals(this.routeTableId, nextHopResult.routeTableId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(nextHopIpAddress, nextHopType, routeTableId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NextHopResult {\n");
    sb.append("    nextHopIpAddress: ").append(toIndentedString(nextHopIpAddress)).append("\n");
    sb.append("    nextHopType: ").append(toIndentedString(nextHopType)).append("\n");
    sb.append("    routeTableId: ").append(toIndentedString(routeTableId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("nextHopIpAddress");
    openapiFields.add("nextHopType");
    openapiFields.add("routeTableId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NextHopResult
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NextHopResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NextHopResult is not found in the empty JSON string", NextHopResult.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NextHopResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NextHopResult` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("nextHopIpAddress") != null && !jsonObj.get("nextHopIpAddress").isJsonNull()) && !jsonObj.get("nextHopIpAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nextHopIpAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nextHopIpAddress").toString()));
      }
      if ((jsonObj.get("nextHopType") != null && !jsonObj.get("nextHopType").isJsonNull()) && !jsonObj.get("nextHopType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nextHopType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nextHopType").toString()));
      }
      // validate the optional field `nextHopType`
      if (jsonObj.get("nextHopType") != null && !jsonObj.get("nextHopType").isJsonNull()) {
        NextHopTypeEnum.validateJsonElement(jsonObj.get("nextHopType"));
      }
      if ((jsonObj.get("routeTableId") != null && !jsonObj.get("routeTableId").isJsonNull()) && !jsonObj.get("routeTableId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `routeTableId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("routeTableId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NextHopResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NextHopResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NextHopResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NextHopResult.class));

       return (TypeAdapter<T>) new TypeAdapter<NextHopResult>() {
           @Override
           public void write(JsonWriter out, NextHopResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NextHopResult read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NextHopResult given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NextHopResult
   * @throws IOException if the JSON string is invalid with respect to NextHopResult
   */
  public static NextHopResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NextHopResult.class);
  }

  /**
   * Convert an instance of NextHopResult to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

