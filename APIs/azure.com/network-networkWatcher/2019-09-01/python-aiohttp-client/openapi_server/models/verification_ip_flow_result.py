# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class VerificationIPFlowResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access: str=None, rule_name: str=None):
        """VerificationIPFlowResult - a model defined in OpenAPI

        :param access: The access of this VerificationIPFlowResult.
        :param rule_name: The rule_name of this VerificationIPFlowResult.
        """
        self.openapi_types = {
            'access': str,
            'rule_name': str
        }

        self.attribute_map = {
            'access': 'access',
            'rule_name': 'ruleName'
        }

        self._access = access
        self._rule_name = rule_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VerificationIPFlowResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VerificationIPFlowResult of this VerificationIPFlowResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access(self):
        """Gets the access of this VerificationIPFlowResult.

        Access to be allowed or denied.

        :return: The access of this VerificationIPFlowResult.
        :rtype: str
        """
        return self._access

    @access.setter
    def access(self, access):
        """Sets the access of this VerificationIPFlowResult.

        Access to be allowed or denied.

        :param access: The access of this VerificationIPFlowResult.
        :type access: str
        """
        allowed_values = ["Allow", "Deny"]  # noqa: E501
        if access not in allowed_values:
            raise ValueError(
                "Invalid value for `access` ({0}), must be one of {1}"
                .format(access, allowed_values)
            )

        self._access = access

    @property
    def rule_name(self):
        """Gets the rule_name of this VerificationIPFlowResult.

        Name of the rule. If input is not matched against any security rule, it is not displayed.

        :return: The rule_name of this VerificationIPFlowResult.
        :rtype: str
        """
        return self._rule_name

    @rule_name.setter
    def rule_name(self, rule_name):
        """Sets the rule_name of this VerificationIPFlowResult.

        Name of the rule. If input is not matched against any security rule, it is not displayed.

        :param rule_name: The rule_name of this VerificationIPFlowResult.
        :type rule_name: str
        """

        self._rule_name = rule_name
