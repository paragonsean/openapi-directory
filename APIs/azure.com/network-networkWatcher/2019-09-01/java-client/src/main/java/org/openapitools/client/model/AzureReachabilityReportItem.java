/*
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-09-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AzureReachabilityReportLatencyInfo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Azure reachability report details for a given provider location.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:34:01.903102-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AzureReachabilityReportItem {
  public static final String SERIALIZED_NAME_AZURE_LOCATION = "azureLocation";
  @SerializedName(SERIALIZED_NAME_AZURE_LOCATION)
  private String azureLocation;

  public static final String SERIALIZED_NAME_LATENCIES = "latencies";
  @SerializedName(SERIALIZED_NAME_LATENCIES)
  private List<AzureReachabilityReportLatencyInfo> latencies = new ArrayList<>();

  public static final String SERIALIZED_NAME_PROVIDER = "provider";
  @SerializedName(SERIALIZED_NAME_PROVIDER)
  private String provider;

  public AzureReachabilityReportItem() {
  }

  public AzureReachabilityReportItem azureLocation(String azureLocation) {
    this.azureLocation = azureLocation;
    return this;
  }

  /**
   * The Azure region.
   * @return azureLocation
   */
  @javax.annotation.Nullable
  public String getAzureLocation() {
    return azureLocation;
  }

  public void setAzureLocation(String azureLocation) {
    this.azureLocation = azureLocation;
  }


  public AzureReachabilityReportItem latencies(List<AzureReachabilityReportLatencyInfo> latencies) {
    this.latencies = latencies;
    return this;
  }

  public AzureReachabilityReportItem addLatenciesItem(AzureReachabilityReportLatencyInfo latenciesItem) {
    if (this.latencies == null) {
      this.latencies = new ArrayList<>();
    }
    this.latencies.add(latenciesItem);
    return this;
  }

  /**
   * List of latency details for each of the time series.
   * @return latencies
   */
  @javax.annotation.Nullable
  public List<AzureReachabilityReportLatencyInfo> getLatencies() {
    return latencies;
  }

  public void setLatencies(List<AzureReachabilityReportLatencyInfo> latencies) {
    this.latencies = latencies;
  }


  public AzureReachabilityReportItem provider(String provider) {
    this.provider = provider;
    return this;
  }

  /**
   * The Internet service provider.
   * @return provider
   */
  @javax.annotation.Nullable
  public String getProvider() {
    return provider;
  }

  public void setProvider(String provider) {
    this.provider = provider;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AzureReachabilityReportItem azureReachabilityReportItem = (AzureReachabilityReportItem) o;
    return Objects.equals(this.azureLocation, azureReachabilityReportItem.azureLocation) &&
        Objects.equals(this.latencies, azureReachabilityReportItem.latencies) &&
        Objects.equals(this.provider, azureReachabilityReportItem.provider);
  }

  @Override
  public int hashCode() {
    return Objects.hash(azureLocation, latencies, provider);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AzureReachabilityReportItem {\n");
    sb.append("    azureLocation: ").append(toIndentedString(azureLocation)).append("\n");
    sb.append("    latencies: ").append(toIndentedString(latencies)).append("\n");
    sb.append("    provider: ").append(toIndentedString(provider)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("azureLocation");
    openapiFields.add("latencies");
    openapiFields.add("provider");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AzureReachabilityReportItem
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AzureReachabilityReportItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AzureReachabilityReportItem is not found in the empty JSON string", AzureReachabilityReportItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AzureReachabilityReportItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AzureReachabilityReportItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("azureLocation") != null && !jsonObj.get("azureLocation").isJsonNull()) && !jsonObj.get("azureLocation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `azureLocation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("azureLocation").toString()));
      }
      if (jsonObj.get("latencies") != null && !jsonObj.get("latencies").isJsonNull()) {
        JsonArray jsonArraylatencies = jsonObj.getAsJsonArray("latencies");
        if (jsonArraylatencies != null) {
          // ensure the json data is an array
          if (!jsonObj.get("latencies").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `latencies` to be an array in the JSON string but got `%s`", jsonObj.get("latencies").toString()));
          }

          // validate the optional field `latencies` (array)
          for (int i = 0; i < jsonArraylatencies.size(); i++) {
            AzureReachabilityReportLatencyInfo.validateJsonElement(jsonArraylatencies.get(i));
          };
        }
      }
      if ((jsonObj.get("provider") != null && !jsonObj.get("provider").isJsonNull()) && !jsonObj.get("provider").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provider` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provider").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AzureReachabilityReportItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AzureReachabilityReportItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AzureReachabilityReportItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AzureReachabilityReportItem.class));

       return (TypeAdapter<T>) new TypeAdapter<AzureReachabilityReportItem>() {
           @Override
           public void write(JsonWriter out, AzureReachabilityReportItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AzureReachabilityReportItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AzureReachabilityReportItem given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AzureReachabilityReportItem
   * @throws IOException if the JSON string is invalid with respect to AzureReachabilityReportItem
   */
  public static AzureReachabilityReportItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AzureReachabilityReportItem.class);
  }

  /**
   * Convert an instance of AzureReachabilityReportItem to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

