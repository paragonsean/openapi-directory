/*
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-09-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Storage location provided for troubleshoot.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:34:01.903102-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TroubleshootingProperties {
  public static final String SERIALIZED_NAME_STORAGE_ID = "storageId";
  @SerializedName(SERIALIZED_NAME_STORAGE_ID)
  private String storageId;

  public static final String SERIALIZED_NAME_STORAGE_PATH = "storagePath";
  @SerializedName(SERIALIZED_NAME_STORAGE_PATH)
  private String storagePath;

  public TroubleshootingProperties() {
  }

  public TroubleshootingProperties storageId(String storageId) {
    this.storageId = storageId;
    return this;
  }

  /**
   * The ID for the storage account to save the troubleshoot result.
   * @return storageId
   */
  @javax.annotation.Nonnull
  public String getStorageId() {
    return storageId;
  }

  public void setStorageId(String storageId) {
    this.storageId = storageId;
  }


  public TroubleshootingProperties storagePath(String storagePath) {
    this.storagePath = storagePath;
    return this;
  }

  /**
   * The path to the blob to save the troubleshoot result in.
   * @return storagePath
   */
  @javax.annotation.Nonnull
  public String getStoragePath() {
    return storagePath;
  }

  public void setStoragePath(String storagePath) {
    this.storagePath = storagePath;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TroubleshootingProperties troubleshootingProperties = (TroubleshootingProperties) o;
    return Objects.equals(this.storageId, troubleshootingProperties.storageId) &&
        Objects.equals(this.storagePath, troubleshootingProperties.storagePath);
  }

  @Override
  public int hashCode() {
    return Objects.hash(storageId, storagePath);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TroubleshootingProperties {\n");
    sb.append("    storageId: ").append(toIndentedString(storageId)).append("\n");
    sb.append("    storagePath: ").append(toIndentedString(storagePath)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("storageId");
    openapiFields.add("storagePath");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("storageId");
    openapiRequiredFields.add("storagePath");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TroubleshootingProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TroubleshootingProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TroubleshootingProperties is not found in the empty JSON string", TroubleshootingProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TroubleshootingProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TroubleshootingProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TroubleshootingProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("storageId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `storageId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("storageId").toString()));
      }
      if (!jsonObj.get("storagePath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `storagePath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("storagePath").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TroubleshootingProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TroubleshootingProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TroubleshootingProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TroubleshootingProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<TroubleshootingProperties>() {
           @Override
           public void write(JsonWriter out, TroubleshootingProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TroubleshootingProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TroubleshootingProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TroubleshootingProperties
   * @throws IOException if the JSON string is invalid with respect to TroubleshootingProperties
   */
  public static TroubleshootingProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TroubleshootingProperties.class);
  }

  /**
   * Convert an instance of TroubleshootingProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

