/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-09-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAzureReachabilityReportLocation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAzureReachabilityReportLocation::OAIAzureReachabilityReportLocation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAzureReachabilityReportLocation::OAIAzureReachabilityReportLocation() {
    this->initializeModel();
}

OAIAzureReachabilityReportLocation::~OAIAzureReachabilityReportLocation() {}

void OAIAzureReachabilityReportLocation::initializeModel() {

    m_city_isSet = false;
    m_city_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAIAzureReachabilityReportLocation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAzureReachabilityReportLocation::fromJsonObject(QJsonObject json) {

    m_city_isValid = ::OpenAPI::fromJsonValue(m_city, json[QString("city")]);
    m_city_isSet = !json[QString("city")].isNull() && m_city_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;
}

QString OAIAzureReachabilityReportLocation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAzureReachabilityReportLocation::asJsonObject() const {
    QJsonObject obj;
    if (m_city_isSet) {
        obj.insert(QString("city"), ::OpenAPI::toJsonValue(m_city));
    }
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

QString OAIAzureReachabilityReportLocation::getCity() const {
    return m_city;
}
void OAIAzureReachabilityReportLocation::setCity(const QString &city) {
    m_city = city;
    m_city_isSet = true;
}

bool OAIAzureReachabilityReportLocation::is_city_Set() const{
    return m_city_isSet;
}

bool OAIAzureReachabilityReportLocation::is_city_Valid() const{
    return m_city_isValid;
}

QString OAIAzureReachabilityReportLocation::getCountry() const {
    return m_country;
}
void OAIAzureReachabilityReportLocation::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIAzureReachabilityReportLocation::is_country_Set() const{
    return m_country_isSet;
}

bool OAIAzureReachabilityReportLocation::is_country_Valid() const{
    return m_country_isValid;
}

QString OAIAzureReachabilityReportLocation::getState() const {
    return m_state;
}
void OAIAzureReachabilityReportLocation::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIAzureReachabilityReportLocation::is_state_Set() const{
    return m_state_isSet;
}

bool OAIAzureReachabilityReportLocation::is_state_Valid() const{
    return m_state_isValid;
}

bool OAIAzureReachabilityReportLocation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAzureReachabilityReportLocation::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_country_isValid && true;
}

} // namespace OpenAPI
