/*
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2018-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Constraints that determine the list of available Internet service providers.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:33:55.527659-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AvailableProvidersListParameters {
  public static final String SERIALIZED_NAME_AZURE_LOCATIONS = "azureLocations";
  @SerializedName(SERIALIZED_NAME_AZURE_LOCATIONS)
  private List<String> azureLocations = new ArrayList<>();

  public static final String SERIALIZED_NAME_CITY = "city";
  @SerializedName(SERIALIZED_NAME_CITY)
  private String city;

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public AvailableProvidersListParameters() {
  }

  public AvailableProvidersListParameters azureLocations(List<String> azureLocations) {
    this.azureLocations = azureLocations;
    return this;
  }

  public AvailableProvidersListParameters addAzureLocationsItem(String azureLocationsItem) {
    if (this.azureLocations == null) {
      this.azureLocations = new ArrayList<>();
    }
    this.azureLocations.add(azureLocationsItem);
    return this;
  }

  /**
   * A list of Azure regions.
   * @return azureLocations
   */
  @javax.annotation.Nullable
  public List<String> getAzureLocations() {
    return azureLocations;
  }

  public void setAzureLocations(List<String> azureLocations) {
    this.azureLocations = azureLocations;
  }


  public AvailableProvidersListParameters city(String city) {
    this.city = city;
    return this;
  }

  /**
   * The city or town for available providers list.
   * @return city
   */
  @javax.annotation.Nullable
  public String getCity() {
    return city;
  }

  public void setCity(String city) {
    this.city = city;
  }


  public AvailableProvidersListParameters country(String country) {
    this.country = country;
    return this;
  }

  /**
   * The country for available providers list.
   * @return country
   */
  @javax.annotation.Nullable
  public String getCountry() {
    return country;
  }

  public void setCountry(String country) {
    this.country = country;
  }


  public AvailableProvidersListParameters state(String state) {
    this.state = state;
    return this;
  }

  /**
   * The state for available providers list.
   * @return state
   */
  @javax.annotation.Nullable
  public String getState() {
    return state;
  }

  public void setState(String state) {
    this.state = state;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AvailableProvidersListParameters availableProvidersListParameters = (AvailableProvidersListParameters) o;
    return Objects.equals(this.azureLocations, availableProvidersListParameters.azureLocations) &&
        Objects.equals(this.city, availableProvidersListParameters.city) &&
        Objects.equals(this.country, availableProvidersListParameters.country) &&
        Objects.equals(this.state, availableProvidersListParameters.state);
  }

  @Override
  public int hashCode() {
    return Objects.hash(azureLocations, city, country, state);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AvailableProvidersListParameters {\n");
    sb.append("    azureLocations: ").append(toIndentedString(azureLocations)).append("\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("azureLocations");
    openapiFields.add("city");
    openapiFields.add("country");
    openapiFields.add("state");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AvailableProvidersListParameters
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AvailableProvidersListParameters.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AvailableProvidersListParameters is not found in the empty JSON string", AvailableProvidersListParameters.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AvailableProvidersListParameters.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AvailableProvidersListParameters` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("azureLocations") != null && !jsonObj.get("azureLocations").isJsonNull() && !jsonObj.get("azureLocations").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `azureLocations` to be an array in the JSON string but got `%s`", jsonObj.get("azureLocations").toString()));
      }
      if ((jsonObj.get("city") != null && !jsonObj.get("city").isJsonNull()) && !jsonObj.get("city").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `city` to be a primitive type in the JSON string but got `%s`", jsonObj.get("city").toString()));
      }
      if ((jsonObj.get("country") != null && !jsonObj.get("country").isJsonNull()) && !jsonObj.get("country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AvailableProvidersListParameters.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AvailableProvidersListParameters' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AvailableProvidersListParameters> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AvailableProvidersListParameters.class));

       return (TypeAdapter<T>) new TypeAdapter<AvailableProvidersListParameters>() {
           @Override
           public void write(JsonWriter out, AvailableProvidersListParameters value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AvailableProvidersListParameters read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AvailableProvidersListParameters given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AvailableProvidersListParameters
   * @throws IOException if the JSON string is invalid with respect to AvailableProvidersListParameters
   */
  public static AvailableProvidersListParameters fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AvailableProvidersListParameters.class);
  }

  /**
   * Convert an instance of AvailableProvidersListParameters to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

