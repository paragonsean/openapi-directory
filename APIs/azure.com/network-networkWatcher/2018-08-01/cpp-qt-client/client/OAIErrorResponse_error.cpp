/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2018-08-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIErrorResponse_error.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIErrorResponse_error::OAIErrorResponse_error(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIErrorResponse_error::OAIErrorResponse_error() {
    this->initializeModel();
}

OAIErrorResponse_error::~OAIErrorResponse_error() {}

void OAIErrorResponse_error::initializeModel() {

    m_code_isSet = false;
    m_code_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_target_isSet = false;
    m_target_isValid = false;
}

void OAIErrorResponse_error::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIErrorResponse_error::fromJsonObject(QJsonObject json) {

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_target_isValid = ::OpenAPI::fromJsonValue(m_target, json[QString("target")]);
    m_target_isSet = !json[QString("target")].isNull() && m_target_isValid;
}

QString OAIErrorResponse_error::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIErrorResponse_error::asJsonObject() const {
    QJsonObject obj;
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_target_isSet) {
        obj.insert(QString("target"), ::OpenAPI::toJsonValue(m_target));
    }
    return obj;
}

QString OAIErrorResponse_error::getCode() const {
    return m_code;
}
void OAIErrorResponse_error::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIErrorResponse_error::is_code_Set() const{
    return m_code_isSet;
}

bool OAIErrorResponse_error::is_code_Valid() const{
    return m_code_isValid;
}

QString OAIErrorResponse_error::getMessage() const {
    return m_message;
}
void OAIErrorResponse_error::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIErrorResponse_error::is_message_Set() const{
    return m_message_isSet;
}

bool OAIErrorResponse_error::is_message_Valid() const{
    return m_message_isValid;
}

QString OAIErrorResponse_error::getTarget() const {
    return m_target;
}
void OAIErrorResponse_error::setTarget(const QString &target) {
    m_target = target;
    m_target_isSet = true;
}

bool OAIErrorResponse_error::is_target_Set() const{
    return m_target_isSet;
}

bool OAIErrorResponse_error::is_target_Valid() const{
    return m_target_isValid;
}

bool OAIErrorResponse_error::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIErrorResponse_error::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
