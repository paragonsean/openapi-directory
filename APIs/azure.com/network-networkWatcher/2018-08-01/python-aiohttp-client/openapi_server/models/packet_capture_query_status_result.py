# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PacketCaptureQueryStatusResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, capture_start_time: datetime=None, id: str=None, name: str=None, packet_capture_error: List[str]=None, packet_capture_status: str=None, stop_reason: str=None):
        """PacketCaptureQueryStatusResult - a model defined in OpenAPI

        :param capture_start_time: The capture_start_time of this PacketCaptureQueryStatusResult.
        :param id: The id of this PacketCaptureQueryStatusResult.
        :param name: The name of this PacketCaptureQueryStatusResult.
        :param packet_capture_error: The packet_capture_error of this PacketCaptureQueryStatusResult.
        :param packet_capture_status: The packet_capture_status of this PacketCaptureQueryStatusResult.
        :param stop_reason: The stop_reason of this PacketCaptureQueryStatusResult.
        """
        self.openapi_types = {
            'capture_start_time': datetime,
            'id': str,
            'name': str,
            'packet_capture_error': List[str],
            'packet_capture_status': str,
            'stop_reason': str
        }

        self.attribute_map = {
            'capture_start_time': 'captureStartTime',
            'id': 'id',
            'name': 'name',
            'packet_capture_error': 'packetCaptureError',
            'packet_capture_status': 'packetCaptureStatus',
            'stop_reason': 'stopReason'
        }

        self._capture_start_time = capture_start_time
        self._id = id
        self._name = name
        self._packet_capture_error = packet_capture_error
        self._packet_capture_status = packet_capture_status
        self._stop_reason = stop_reason

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PacketCaptureQueryStatusResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PacketCaptureQueryStatusResult of this PacketCaptureQueryStatusResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def capture_start_time(self):
        """Gets the capture_start_time of this PacketCaptureQueryStatusResult.

        The start time of the packet capture session.

        :return: The capture_start_time of this PacketCaptureQueryStatusResult.
        :rtype: datetime
        """
        return self._capture_start_time

    @capture_start_time.setter
    def capture_start_time(self, capture_start_time):
        """Sets the capture_start_time of this PacketCaptureQueryStatusResult.

        The start time of the packet capture session.

        :param capture_start_time: The capture_start_time of this PacketCaptureQueryStatusResult.
        :type capture_start_time: datetime
        """

        self._capture_start_time = capture_start_time

    @property
    def id(self):
        """Gets the id of this PacketCaptureQueryStatusResult.

        The ID of the packet capture resource.

        :return: The id of this PacketCaptureQueryStatusResult.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PacketCaptureQueryStatusResult.

        The ID of the packet capture resource.

        :param id: The id of this PacketCaptureQueryStatusResult.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this PacketCaptureQueryStatusResult.

        The name of the packet capture resource.

        :return: The name of this PacketCaptureQueryStatusResult.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PacketCaptureQueryStatusResult.

        The name of the packet capture resource.

        :param name: The name of this PacketCaptureQueryStatusResult.
        :type name: str
        """

        self._name = name

    @property
    def packet_capture_error(self):
        """Gets the packet_capture_error of this PacketCaptureQueryStatusResult.

        List of errors of packet capture session.

        :return: The packet_capture_error of this PacketCaptureQueryStatusResult.
        :rtype: List[str]
        """
        return self._packet_capture_error

    @packet_capture_error.setter
    def packet_capture_error(self, packet_capture_error):
        """Sets the packet_capture_error of this PacketCaptureQueryStatusResult.

        List of errors of packet capture session.

        :param packet_capture_error: The packet_capture_error of this PacketCaptureQueryStatusResult.
        :type packet_capture_error: List[str]
        """
        allowed_values = ["InternalError", "AgentStopped", "CaptureFailed", "LocalFileFailed", "StorageFailed"]  # noqa: E501
        if not set(packet_capture_error).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `packet_capture_error` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(packet_capture_error) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._packet_capture_error = packet_capture_error

    @property
    def packet_capture_status(self):
        """Gets the packet_capture_status of this PacketCaptureQueryStatusResult.

        The status of the packet capture session.

        :return: The packet_capture_status of this PacketCaptureQueryStatusResult.
        :rtype: str
        """
        return self._packet_capture_status

    @packet_capture_status.setter
    def packet_capture_status(self, packet_capture_status):
        """Sets the packet_capture_status of this PacketCaptureQueryStatusResult.

        The status of the packet capture session.

        :param packet_capture_status: The packet_capture_status of this PacketCaptureQueryStatusResult.
        :type packet_capture_status: str
        """
        allowed_values = ["NotStarted", "Running", "Stopped", "Error", "Unknown"]  # noqa: E501
        if packet_capture_status not in allowed_values:
            raise ValueError(
                "Invalid value for `packet_capture_status` ({0}), must be one of {1}"
                .format(packet_capture_status, allowed_values)
            )

        self._packet_capture_status = packet_capture_status

    @property
    def stop_reason(self):
        """Gets the stop_reason of this PacketCaptureQueryStatusResult.

        The reason the current packet capture session was stopped.

        :return: The stop_reason of this PacketCaptureQueryStatusResult.
        :rtype: str
        """
        return self._stop_reason

    @stop_reason.setter
    def stop_reason(self, stop_reason):
        """Sets the stop_reason of this PacketCaptureQueryStatusResult.

        The reason the current packet capture session was stopped.

        :param stop_reason: The stop_reason of this PacketCaptureQueryStatusResult.
        :type stop_reason: str
        """

        self._stop_reason = stop_reason
