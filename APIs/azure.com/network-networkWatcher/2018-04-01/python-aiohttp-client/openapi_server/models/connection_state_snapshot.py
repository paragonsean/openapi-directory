# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.connectivity_hop import ConnectivityHop
from openapi_server import util


class ConnectionStateSnapshot(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, connection_state: str=None, end_time: datetime=None, evaluation_state: str=None, hops: List[ConnectivityHop]=None, start_time: datetime=None):
        """ConnectionStateSnapshot - a model defined in OpenAPI

        :param connection_state: The connection_state of this ConnectionStateSnapshot.
        :param end_time: The end_time of this ConnectionStateSnapshot.
        :param evaluation_state: The evaluation_state of this ConnectionStateSnapshot.
        :param hops: The hops of this ConnectionStateSnapshot.
        :param start_time: The start_time of this ConnectionStateSnapshot.
        """
        self.openapi_types = {
            'connection_state': str,
            'end_time': datetime,
            'evaluation_state': str,
            'hops': List[ConnectivityHop],
            'start_time': datetime
        }

        self.attribute_map = {
            'connection_state': 'connectionState',
            'end_time': 'endTime',
            'evaluation_state': 'evaluationState',
            'hops': 'hops',
            'start_time': 'startTime'
        }

        self._connection_state = connection_state
        self._end_time = end_time
        self._evaluation_state = evaluation_state
        self._hops = hops
        self._start_time = start_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConnectionStateSnapshot':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConnectionStateSnapshot of this ConnectionStateSnapshot.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def connection_state(self):
        """Gets the connection_state of this ConnectionStateSnapshot.

        The connection state.

        :return: The connection_state of this ConnectionStateSnapshot.
        :rtype: str
        """
        return self._connection_state

    @connection_state.setter
    def connection_state(self, connection_state):
        """Sets the connection_state of this ConnectionStateSnapshot.

        The connection state.

        :param connection_state: The connection_state of this ConnectionStateSnapshot.
        :type connection_state: str
        """
        allowed_values = ["Reachable", "Unreachable", "Unknown"]  # noqa: E501
        if connection_state not in allowed_values:
            raise ValueError(
                "Invalid value for `connection_state` ({0}), must be one of {1}"
                .format(connection_state, allowed_values)
            )

        self._connection_state = connection_state

    @property
    def end_time(self):
        """Gets the end_time of this ConnectionStateSnapshot.

        The end time of the connection snapshot.

        :return: The end_time of this ConnectionStateSnapshot.
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this ConnectionStateSnapshot.

        The end time of the connection snapshot.

        :param end_time: The end_time of this ConnectionStateSnapshot.
        :type end_time: datetime
        """

        self._end_time = end_time

    @property
    def evaluation_state(self):
        """Gets the evaluation_state of this ConnectionStateSnapshot.

        Connectivity analysis evaluation state.

        :return: The evaluation_state of this ConnectionStateSnapshot.
        :rtype: str
        """
        return self._evaluation_state

    @evaluation_state.setter
    def evaluation_state(self, evaluation_state):
        """Sets the evaluation_state of this ConnectionStateSnapshot.

        Connectivity analysis evaluation state.

        :param evaluation_state: The evaluation_state of this ConnectionStateSnapshot.
        :type evaluation_state: str
        """
        allowed_values = ["NotStarted", "InProgress", "Completed"]  # noqa: E501
        if evaluation_state not in allowed_values:
            raise ValueError(
                "Invalid value for `evaluation_state` ({0}), must be one of {1}"
                .format(evaluation_state, allowed_values)
            )

        self._evaluation_state = evaluation_state

    @property
    def hops(self):
        """Gets the hops of this ConnectionStateSnapshot.

        List of hops between the source and the destination.

        :return: The hops of this ConnectionStateSnapshot.
        :rtype: List[ConnectivityHop]
        """
        return self._hops

    @hops.setter
    def hops(self, hops):
        """Sets the hops of this ConnectionStateSnapshot.

        List of hops between the source and the destination.

        :param hops: The hops of this ConnectionStateSnapshot.
        :type hops: List[ConnectivityHop]
        """

        self._hops = hops

    @property
    def start_time(self):
        """Gets the start_time of this ConnectionStateSnapshot.

        The start time of the connection snapshot.

        :return: The start_time of this ConnectionStateSnapshot.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this ConnectionStateSnapshot.

        The start time of the connection snapshot.

        :param start_time: The start_time of this ConnectionStateSnapshot.
        :type start_time: datetime
        """

        self._start_time = start_time
