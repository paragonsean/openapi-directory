# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TopologyAssociation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, association_type: str=None, name: str=None, resource_id: str=None):
        """TopologyAssociation - a model defined in OpenAPI

        :param association_type: The association_type of this TopologyAssociation.
        :param name: The name of this TopologyAssociation.
        :param resource_id: The resource_id of this TopologyAssociation.
        """
        self.openapi_types = {
            'association_type': str,
            'name': str,
            'resource_id': str
        }

        self.attribute_map = {
            'association_type': 'associationType',
            'name': 'name',
            'resource_id': 'resourceId'
        }

        self._association_type = association_type
        self._name = name
        self._resource_id = resource_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TopologyAssociation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TopologyAssociation of this TopologyAssociation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def association_type(self):
        """Gets the association_type of this TopologyAssociation.

        The association type of the child resource to the parent resource.

        :return: The association_type of this TopologyAssociation.
        :rtype: str
        """
        return self._association_type

    @association_type.setter
    def association_type(self, association_type):
        """Sets the association_type of this TopologyAssociation.

        The association type of the child resource to the parent resource.

        :param association_type: The association_type of this TopologyAssociation.
        :type association_type: str
        """
        allowed_values = ["Associated", "Contains"]  # noqa: E501
        if association_type not in allowed_values:
            raise ValueError(
                "Invalid value for `association_type` ({0}), must be one of {1}"
                .format(association_type, allowed_values)
            )

        self._association_type = association_type

    @property
    def name(self):
        """Gets the name of this TopologyAssociation.

        The name of the resource that is associated with the parent resource.

        :return: The name of this TopologyAssociation.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TopologyAssociation.

        The name of the resource that is associated with the parent resource.

        :param name: The name of this TopologyAssociation.
        :type name: str
        """

        self._name = name

    @property
    def resource_id(self):
        """Gets the resource_id of this TopologyAssociation.

        The ID of the resource that is associated with the parent resource.

        :return: The resource_id of this TopologyAssociation.
        :rtype: str
        """
        return self._resource_id

    @resource_id.setter
    def resource_id(self, resource_id):
        """Sets the resource_id of this TopologyAssociation.

        The ID of the resource that is associated with the parent resource.

        :param resource_id: The resource_id of this TopologyAssociation.
        :type resource_id: str
        """

        self._resource_id = resource_id
