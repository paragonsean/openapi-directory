/*
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2018-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ConnectivityHop;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Connection state snapshot.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:33:18.702760-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ConnectionStateSnapshot {
  /**
   * The connection state.
   */
  @JsonAdapter(ConnectionStateEnum.Adapter.class)
  public enum ConnectionStateEnum {
    REACHABLE("Reachable"),
    
    UNREACHABLE("Unreachable"),
    
    UNKNOWN("Unknown");

    private String value;

    ConnectionStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ConnectionStateEnum fromValue(String value) {
      for (ConnectionStateEnum b : ConnectionStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ConnectionStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ConnectionStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ConnectionStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ConnectionStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ConnectionStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CONNECTION_STATE = "connectionState";
  @SerializedName(SERIALIZED_NAME_CONNECTION_STATE)
  private ConnectionStateEnum connectionState;

  public static final String SERIALIZED_NAME_END_TIME = "endTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private OffsetDateTime endTime;

  /**
   * Connectivity analysis evaluation state.
   */
  @JsonAdapter(EvaluationStateEnum.Adapter.class)
  public enum EvaluationStateEnum {
    NOT_STARTED("NotStarted"),
    
    IN_PROGRESS("InProgress"),
    
    COMPLETED("Completed");

    private String value;

    EvaluationStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EvaluationStateEnum fromValue(String value) {
      for (EvaluationStateEnum b : EvaluationStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EvaluationStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EvaluationStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EvaluationStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EvaluationStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EvaluationStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_EVALUATION_STATE = "evaluationState";
  @SerializedName(SERIALIZED_NAME_EVALUATION_STATE)
  private EvaluationStateEnum evaluationState;

  public static final String SERIALIZED_NAME_HOPS = "hops";
  @SerializedName(SERIALIZED_NAME_HOPS)
  private List<ConnectivityHop> hops = new ArrayList<>();

  public static final String SERIALIZED_NAME_START_TIME = "startTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private OffsetDateTime startTime;

  public ConnectionStateSnapshot() {
  }

  public ConnectionStateSnapshot(
     List<ConnectivityHop> hops
  ) {
    this();
    this.hops = hops;
  }

  public ConnectionStateSnapshot connectionState(ConnectionStateEnum connectionState) {
    this.connectionState = connectionState;
    return this;
  }

  /**
   * The connection state.
   * @return connectionState
   */
  @javax.annotation.Nullable
  public ConnectionStateEnum getConnectionState() {
    return connectionState;
  }

  public void setConnectionState(ConnectionStateEnum connectionState) {
    this.connectionState = connectionState;
  }


  public ConnectionStateSnapshot endTime(OffsetDateTime endTime) {
    this.endTime = endTime;
    return this;
  }

  /**
   * The end time of the connection snapshot.
   * @return endTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEndTime() {
    return endTime;
  }

  public void setEndTime(OffsetDateTime endTime) {
    this.endTime = endTime;
  }


  public ConnectionStateSnapshot evaluationState(EvaluationStateEnum evaluationState) {
    this.evaluationState = evaluationState;
    return this;
  }

  /**
   * Connectivity analysis evaluation state.
   * @return evaluationState
   */
  @javax.annotation.Nullable
  public EvaluationStateEnum getEvaluationState() {
    return evaluationState;
  }

  public void setEvaluationState(EvaluationStateEnum evaluationState) {
    this.evaluationState = evaluationState;
  }


  /**
   * List of hops between the source and the destination.
   * @return hops
   */
  @javax.annotation.Nullable
  public List<ConnectivityHop> getHops() {
    return hops;
  }



  public ConnectionStateSnapshot startTime(OffsetDateTime startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * The start time of the connection snapshot.
   * @return startTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartTime() {
    return startTime;
  }

  public void setStartTime(OffsetDateTime startTime) {
    this.startTime = startTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConnectionStateSnapshot connectionStateSnapshot = (ConnectionStateSnapshot) o;
    return Objects.equals(this.connectionState, connectionStateSnapshot.connectionState) &&
        Objects.equals(this.endTime, connectionStateSnapshot.endTime) &&
        Objects.equals(this.evaluationState, connectionStateSnapshot.evaluationState) &&
        Objects.equals(this.hops, connectionStateSnapshot.hops) &&
        Objects.equals(this.startTime, connectionStateSnapshot.startTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(connectionState, endTime, evaluationState, hops, startTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConnectionStateSnapshot {\n");
    sb.append("    connectionState: ").append(toIndentedString(connectionState)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    evaluationState: ").append(toIndentedString(evaluationState)).append("\n");
    sb.append("    hops: ").append(toIndentedString(hops)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("connectionState");
    openapiFields.add("endTime");
    openapiFields.add("evaluationState");
    openapiFields.add("hops");
    openapiFields.add("startTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ConnectionStateSnapshot
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConnectionStateSnapshot.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConnectionStateSnapshot is not found in the empty JSON string", ConnectionStateSnapshot.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConnectionStateSnapshot.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConnectionStateSnapshot` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("connectionState") != null && !jsonObj.get("connectionState").isJsonNull()) && !jsonObj.get("connectionState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `connectionState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("connectionState").toString()));
      }
      // validate the optional field `connectionState`
      if (jsonObj.get("connectionState") != null && !jsonObj.get("connectionState").isJsonNull()) {
        ConnectionStateEnum.validateJsonElement(jsonObj.get("connectionState"));
      }
      if ((jsonObj.get("evaluationState") != null && !jsonObj.get("evaluationState").isJsonNull()) && !jsonObj.get("evaluationState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `evaluationState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("evaluationState").toString()));
      }
      // validate the optional field `evaluationState`
      if (jsonObj.get("evaluationState") != null && !jsonObj.get("evaluationState").isJsonNull()) {
        EvaluationStateEnum.validateJsonElement(jsonObj.get("evaluationState"));
      }
      if (jsonObj.get("hops") != null && !jsonObj.get("hops").isJsonNull()) {
        JsonArray jsonArrayhops = jsonObj.getAsJsonArray("hops");
        if (jsonArrayhops != null) {
          // ensure the json data is an array
          if (!jsonObj.get("hops").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `hops` to be an array in the JSON string but got `%s`", jsonObj.get("hops").toString()));
          }

          // validate the optional field `hops` (array)
          for (int i = 0; i < jsonArrayhops.size(); i++) {
            ConnectivityHop.validateJsonElement(jsonArrayhops.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConnectionStateSnapshot.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConnectionStateSnapshot' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConnectionStateSnapshot> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConnectionStateSnapshot.class));

       return (TypeAdapter<T>) new TypeAdapter<ConnectionStateSnapshot>() {
           @Override
           public void write(JsonWriter out, ConnectionStateSnapshot value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConnectionStateSnapshot read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ConnectionStateSnapshot given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ConnectionStateSnapshot
   * @throws IOException if the JSON string is invalid with respect to ConnectionStateSnapshot
   */
  public static ConnectionStateSnapshot fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConnectionStateSnapshot.class);
  }

  /**
   * Convert an instance of ConnectionStateSnapshot to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

