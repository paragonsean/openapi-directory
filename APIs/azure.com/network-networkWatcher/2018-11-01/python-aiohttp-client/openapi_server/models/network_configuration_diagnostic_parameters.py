# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.network_configuration_diagnostic_profile import NetworkConfigurationDiagnosticProfile
from openapi_server import util


class NetworkConfigurationDiagnosticParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, profiles: List[NetworkConfigurationDiagnosticProfile]=None, target_resource_id: str=None, verbosity_level: str=None):
        """NetworkConfigurationDiagnosticParameters - a model defined in OpenAPI

        :param profiles: The profiles of this NetworkConfigurationDiagnosticParameters.
        :param target_resource_id: The target_resource_id of this NetworkConfigurationDiagnosticParameters.
        :param verbosity_level: The verbosity_level of this NetworkConfigurationDiagnosticParameters.
        """
        self.openapi_types = {
            'profiles': List[NetworkConfigurationDiagnosticProfile],
            'target_resource_id': str,
            'verbosity_level': str
        }

        self.attribute_map = {
            'profiles': 'profiles',
            'target_resource_id': 'targetResourceId',
            'verbosity_level': 'verbosityLevel'
        }

        self._profiles = profiles
        self._target_resource_id = target_resource_id
        self._verbosity_level = verbosity_level

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NetworkConfigurationDiagnosticParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NetworkConfigurationDiagnosticParameters of this NetworkConfigurationDiagnosticParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def profiles(self):
        """Gets the profiles of this NetworkConfigurationDiagnosticParameters.

        List of network configuration diagnostic profiles.

        :return: The profiles of this NetworkConfigurationDiagnosticParameters.
        :rtype: List[NetworkConfigurationDiagnosticProfile]
        """
        return self._profiles

    @profiles.setter
    def profiles(self, profiles):
        """Sets the profiles of this NetworkConfigurationDiagnosticParameters.

        List of network configuration diagnostic profiles.

        :param profiles: The profiles of this NetworkConfigurationDiagnosticParameters.
        :type profiles: List[NetworkConfigurationDiagnosticProfile]
        """
        if profiles is None:
            raise ValueError("Invalid value for `profiles`, must not be `None`")

        self._profiles = profiles

    @property
    def target_resource_id(self):
        """Gets the target_resource_id of this NetworkConfigurationDiagnosticParameters.

        The ID of the target resource to perform network configuration diagnostic. Valid options are VM, NetworkInterface, VMSS/NetworkInterface and Application Gateway.

        :return: The target_resource_id of this NetworkConfigurationDiagnosticParameters.
        :rtype: str
        """
        return self._target_resource_id

    @target_resource_id.setter
    def target_resource_id(self, target_resource_id):
        """Sets the target_resource_id of this NetworkConfigurationDiagnosticParameters.

        The ID of the target resource to perform network configuration diagnostic. Valid options are VM, NetworkInterface, VMSS/NetworkInterface and Application Gateway.

        :param target_resource_id: The target_resource_id of this NetworkConfigurationDiagnosticParameters.
        :type target_resource_id: str
        """
        if target_resource_id is None:
            raise ValueError("Invalid value for `target_resource_id`, must not be `None`")

        self._target_resource_id = target_resource_id

    @property
    def verbosity_level(self):
        """Gets the verbosity_level of this NetworkConfigurationDiagnosticParameters.

        Verbosity level. Accepted values are 'Normal', 'Minimum', 'Full'.

        :return: The verbosity_level of this NetworkConfigurationDiagnosticParameters.
        :rtype: str
        """
        return self._verbosity_level

    @verbosity_level.setter
    def verbosity_level(self, verbosity_level):
        """Sets the verbosity_level of this NetworkConfigurationDiagnosticParameters.

        Verbosity level. Accepted values are 'Normal', 'Minimum', 'Full'.

        :param verbosity_level: The verbosity_level of this NetworkConfigurationDiagnosticParameters.
        :type verbosity_level: str
        """
        allowed_values = ["Normal", "Minimum", "Full"]  # noqa: E501
        if verbosity_level not in allowed_values:
            raise ValueError(
                "Invalid value for `verbosity_level` ({0}), must be one of {1}"
                .format(verbosity_level, allowed_values)
            )

        self._verbosity_level = verbosity_level
