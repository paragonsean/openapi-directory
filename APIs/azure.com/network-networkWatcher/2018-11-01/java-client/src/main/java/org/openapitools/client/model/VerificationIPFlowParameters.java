/*
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2018-11-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Parameters that define the IP flow to be verified.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:33:25.776188-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VerificationIPFlowParameters {
  /**
   * The direction of the packet represented as a 5-tuple.
   */
  @JsonAdapter(DirectionEnum.Adapter.class)
  public enum DirectionEnum {
    INBOUND("Inbound"),
    
    OUTBOUND("Outbound");

    private String value;

    DirectionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DirectionEnum fromValue(String value) {
      for (DirectionEnum b : DirectionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DirectionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DirectionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DirectionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DirectionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DirectionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DIRECTION = "direction";
  @SerializedName(SERIALIZED_NAME_DIRECTION)
  private DirectionEnum direction;

  public static final String SERIALIZED_NAME_LOCAL_I_P_ADDRESS = "localIPAddress";
  @SerializedName(SERIALIZED_NAME_LOCAL_I_P_ADDRESS)
  private String localIPAddress;

  public static final String SERIALIZED_NAME_LOCAL_PORT = "localPort";
  @SerializedName(SERIALIZED_NAME_LOCAL_PORT)
  private String localPort;

  /**
   * Protocol to be verified on.
   */
  @JsonAdapter(ProtocolEnum.Adapter.class)
  public enum ProtocolEnum {
    TCP("TCP"),
    
    UDP("UDP");

    private String value;

    ProtocolEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProtocolEnum fromValue(String value) {
      for (ProtocolEnum b : ProtocolEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProtocolEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProtocolEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProtocolEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProtocolEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProtocolEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROTOCOL = "protocol";
  @SerializedName(SERIALIZED_NAME_PROTOCOL)
  private ProtocolEnum protocol;

  public static final String SERIALIZED_NAME_REMOTE_I_P_ADDRESS = "remoteIPAddress";
  @SerializedName(SERIALIZED_NAME_REMOTE_I_P_ADDRESS)
  private String remoteIPAddress;

  public static final String SERIALIZED_NAME_REMOTE_PORT = "remotePort";
  @SerializedName(SERIALIZED_NAME_REMOTE_PORT)
  private String remotePort;

  public static final String SERIALIZED_NAME_TARGET_NIC_RESOURCE_ID = "targetNicResourceId";
  @SerializedName(SERIALIZED_NAME_TARGET_NIC_RESOURCE_ID)
  private String targetNicResourceId;

  public static final String SERIALIZED_NAME_TARGET_RESOURCE_ID = "targetResourceId";
  @SerializedName(SERIALIZED_NAME_TARGET_RESOURCE_ID)
  private String targetResourceId;

  public VerificationIPFlowParameters() {
  }

  public VerificationIPFlowParameters direction(DirectionEnum direction) {
    this.direction = direction;
    return this;
  }

  /**
   * The direction of the packet represented as a 5-tuple.
   * @return direction
   */
  @javax.annotation.Nonnull
  public DirectionEnum getDirection() {
    return direction;
  }

  public void setDirection(DirectionEnum direction) {
    this.direction = direction;
  }


  public VerificationIPFlowParameters localIPAddress(String localIPAddress) {
    this.localIPAddress = localIPAddress;
    return this;
  }

  /**
   * The local IP address. Acceptable values are valid IPv4 addresses.
   * @return localIPAddress
   */
  @javax.annotation.Nonnull
  public String getLocalIPAddress() {
    return localIPAddress;
  }

  public void setLocalIPAddress(String localIPAddress) {
    this.localIPAddress = localIPAddress;
  }


  public VerificationIPFlowParameters localPort(String localPort) {
    this.localPort = localPort;
    return this;
  }

  /**
   * The local port. Acceptable values are a single integer in the range (0-65535). Support for * for the source port, which depends on the direction.
   * @return localPort
   */
  @javax.annotation.Nonnull
  public String getLocalPort() {
    return localPort;
  }

  public void setLocalPort(String localPort) {
    this.localPort = localPort;
  }


  public VerificationIPFlowParameters protocol(ProtocolEnum protocol) {
    this.protocol = protocol;
    return this;
  }

  /**
   * Protocol to be verified on.
   * @return protocol
   */
  @javax.annotation.Nonnull
  public ProtocolEnum getProtocol() {
    return protocol;
  }

  public void setProtocol(ProtocolEnum protocol) {
    this.protocol = protocol;
  }


  public VerificationIPFlowParameters remoteIPAddress(String remoteIPAddress) {
    this.remoteIPAddress = remoteIPAddress;
    return this;
  }

  /**
   * The remote IP address. Acceptable values are valid IPv4 addresses.
   * @return remoteIPAddress
   */
  @javax.annotation.Nonnull
  public String getRemoteIPAddress() {
    return remoteIPAddress;
  }

  public void setRemoteIPAddress(String remoteIPAddress) {
    this.remoteIPAddress = remoteIPAddress;
  }


  public VerificationIPFlowParameters remotePort(String remotePort) {
    this.remotePort = remotePort;
    return this;
  }

  /**
   * The remote port. Acceptable values are a single integer in the range (0-65535). Support for * for the source port, which depends on the direction.
   * @return remotePort
   */
  @javax.annotation.Nonnull
  public String getRemotePort() {
    return remotePort;
  }

  public void setRemotePort(String remotePort) {
    this.remotePort = remotePort;
  }


  public VerificationIPFlowParameters targetNicResourceId(String targetNicResourceId) {
    this.targetNicResourceId = targetNicResourceId;
    return this;
  }

  /**
   * The NIC ID. (If VM has multiple NICs and IP forwarding is enabled on any of them, then this parameter must be specified. Otherwise optional).
   * @return targetNicResourceId
   */
  @javax.annotation.Nullable
  public String getTargetNicResourceId() {
    return targetNicResourceId;
  }

  public void setTargetNicResourceId(String targetNicResourceId) {
    this.targetNicResourceId = targetNicResourceId;
  }


  public VerificationIPFlowParameters targetResourceId(String targetResourceId) {
    this.targetResourceId = targetResourceId;
    return this;
  }

  /**
   * The ID of the target resource to perform next-hop on.
   * @return targetResourceId
   */
  @javax.annotation.Nonnull
  public String getTargetResourceId() {
    return targetResourceId;
  }

  public void setTargetResourceId(String targetResourceId) {
    this.targetResourceId = targetResourceId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VerificationIPFlowParameters verificationIPFlowParameters = (VerificationIPFlowParameters) o;
    return Objects.equals(this.direction, verificationIPFlowParameters.direction) &&
        Objects.equals(this.localIPAddress, verificationIPFlowParameters.localIPAddress) &&
        Objects.equals(this.localPort, verificationIPFlowParameters.localPort) &&
        Objects.equals(this.protocol, verificationIPFlowParameters.protocol) &&
        Objects.equals(this.remoteIPAddress, verificationIPFlowParameters.remoteIPAddress) &&
        Objects.equals(this.remotePort, verificationIPFlowParameters.remotePort) &&
        Objects.equals(this.targetNicResourceId, verificationIPFlowParameters.targetNicResourceId) &&
        Objects.equals(this.targetResourceId, verificationIPFlowParameters.targetResourceId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(direction, localIPAddress, localPort, protocol, remoteIPAddress, remotePort, targetNicResourceId, targetResourceId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VerificationIPFlowParameters {\n");
    sb.append("    direction: ").append(toIndentedString(direction)).append("\n");
    sb.append("    localIPAddress: ").append(toIndentedString(localIPAddress)).append("\n");
    sb.append("    localPort: ").append(toIndentedString(localPort)).append("\n");
    sb.append("    protocol: ").append(toIndentedString(protocol)).append("\n");
    sb.append("    remoteIPAddress: ").append(toIndentedString(remoteIPAddress)).append("\n");
    sb.append("    remotePort: ").append(toIndentedString(remotePort)).append("\n");
    sb.append("    targetNicResourceId: ").append(toIndentedString(targetNicResourceId)).append("\n");
    sb.append("    targetResourceId: ").append(toIndentedString(targetResourceId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("direction");
    openapiFields.add("localIPAddress");
    openapiFields.add("localPort");
    openapiFields.add("protocol");
    openapiFields.add("remoteIPAddress");
    openapiFields.add("remotePort");
    openapiFields.add("targetNicResourceId");
    openapiFields.add("targetResourceId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("direction");
    openapiRequiredFields.add("localIPAddress");
    openapiRequiredFields.add("localPort");
    openapiRequiredFields.add("protocol");
    openapiRequiredFields.add("remoteIPAddress");
    openapiRequiredFields.add("remotePort");
    openapiRequiredFields.add("targetResourceId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VerificationIPFlowParameters
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VerificationIPFlowParameters.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VerificationIPFlowParameters is not found in the empty JSON string", VerificationIPFlowParameters.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VerificationIPFlowParameters.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VerificationIPFlowParameters` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : VerificationIPFlowParameters.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("direction").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `direction` to be a primitive type in the JSON string but got `%s`", jsonObj.get("direction").toString()));
      }
      // validate the required field `direction`
      DirectionEnum.validateJsonElement(jsonObj.get("direction"));
      if (!jsonObj.get("localIPAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `localIPAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("localIPAddress").toString()));
      }
      if (!jsonObj.get("localPort").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `localPort` to be a primitive type in the JSON string but got `%s`", jsonObj.get("localPort").toString()));
      }
      if (!jsonObj.get("protocol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `protocol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("protocol").toString()));
      }
      // validate the required field `protocol`
      ProtocolEnum.validateJsonElement(jsonObj.get("protocol"));
      if (!jsonObj.get("remoteIPAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `remoteIPAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("remoteIPAddress").toString()));
      }
      if (!jsonObj.get("remotePort").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `remotePort` to be a primitive type in the JSON string but got `%s`", jsonObj.get("remotePort").toString()));
      }
      if ((jsonObj.get("targetNicResourceId") != null && !jsonObj.get("targetNicResourceId").isJsonNull()) && !jsonObj.get("targetNicResourceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetNicResourceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("targetNicResourceId").toString()));
      }
      if (!jsonObj.get("targetResourceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetResourceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("targetResourceId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VerificationIPFlowParameters.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VerificationIPFlowParameters' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VerificationIPFlowParameters> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VerificationIPFlowParameters.class));

       return (TypeAdapter<T>) new TypeAdapter<VerificationIPFlowParameters>() {
           @Override
           public void write(JsonWriter out, VerificationIPFlowParameters value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VerificationIPFlowParameters read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VerificationIPFlowParameters given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VerificationIPFlowParameters
   * @throws IOException if the JSON string is invalid with respect to VerificationIPFlowParameters
   */
  public static VerificationIPFlowParameters fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VerificationIPFlowParameters.class);
  }

  /**
   * Convert an instance of VerificationIPFlowParameters to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

