/*
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2018-11-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ConnectionStateSnapshot;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * List of connection states snapshots.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:33:25.776188-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ConnectionMonitorQueryResult {
  /**
   * Status of connection monitor source.
   */
  @JsonAdapter(SourceStatusEnum.Adapter.class)
  public enum SourceStatusEnum {
    UKNOWN("Uknown"),
    
    ACTIVE("Active"),
    
    INACTIVE("Inactive");

    private String value;

    SourceStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SourceStatusEnum fromValue(String value) {
      for (SourceStatusEnum b : SourceStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SourceStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SourceStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SourceStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SourceStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SourceStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SOURCE_STATUS = "sourceStatus";
  @SerializedName(SERIALIZED_NAME_SOURCE_STATUS)
  private SourceStatusEnum sourceStatus;

  public static final String SERIALIZED_NAME_STATES = "states";
  @SerializedName(SERIALIZED_NAME_STATES)
  private List<ConnectionStateSnapshot> states = new ArrayList<>();

  public ConnectionMonitorQueryResult() {
  }

  public ConnectionMonitorQueryResult sourceStatus(SourceStatusEnum sourceStatus) {
    this.sourceStatus = sourceStatus;
    return this;
  }

  /**
   * Status of connection monitor source.
   * @return sourceStatus
   */
  @javax.annotation.Nullable
  public SourceStatusEnum getSourceStatus() {
    return sourceStatus;
  }

  public void setSourceStatus(SourceStatusEnum sourceStatus) {
    this.sourceStatus = sourceStatus;
  }


  public ConnectionMonitorQueryResult states(List<ConnectionStateSnapshot> states) {
    this.states = states;
    return this;
  }

  public ConnectionMonitorQueryResult addStatesItem(ConnectionStateSnapshot statesItem) {
    if (this.states == null) {
      this.states = new ArrayList<>();
    }
    this.states.add(statesItem);
    return this;
  }

  /**
   * Information about connection states.
   * @return states
   */
  @javax.annotation.Nullable
  public List<ConnectionStateSnapshot> getStates() {
    return states;
  }

  public void setStates(List<ConnectionStateSnapshot> states) {
    this.states = states;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConnectionMonitorQueryResult connectionMonitorQueryResult = (ConnectionMonitorQueryResult) o;
    return Objects.equals(this.sourceStatus, connectionMonitorQueryResult.sourceStatus) &&
        Objects.equals(this.states, connectionMonitorQueryResult.states);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sourceStatus, states);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConnectionMonitorQueryResult {\n");
    sb.append("    sourceStatus: ").append(toIndentedString(sourceStatus)).append("\n");
    sb.append("    states: ").append(toIndentedString(states)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("sourceStatus");
    openapiFields.add("states");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ConnectionMonitorQueryResult
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConnectionMonitorQueryResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConnectionMonitorQueryResult is not found in the empty JSON string", ConnectionMonitorQueryResult.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConnectionMonitorQueryResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConnectionMonitorQueryResult` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("sourceStatus") != null && !jsonObj.get("sourceStatus").isJsonNull()) && !jsonObj.get("sourceStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceStatus").toString()));
      }
      // validate the optional field `sourceStatus`
      if (jsonObj.get("sourceStatus") != null && !jsonObj.get("sourceStatus").isJsonNull()) {
        SourceStatusEnum.validateJsonElement(jsonObj.get("sourceStatus"));
      }
      if (jsonObj.get("states") != null && !jsonObj.get("states").isJsonNull()) {
        JsonArray jsonArraystates = jsonObj.getAsJsonArray("states");
        if (jsonArraystates != null) {
          // ensure the json data is an array
          if (!jsonObj.get("states").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `states` to be an array in the JSON string but got `%s`", jsonObj.get("states").toString()));
          }

          // validate the optional field `states` (array)
          for (int i = 0; i < jsonArraystates.size(); i++) {
            ConnectionStateSnapshot.validateJsonElement(jsonArraystates.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConnectionMonitorQueryResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConnectionMonitorQueryResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConnectionMonitorQueryResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConnectionMonitorQueryResult.class));

       return (TypeAdapter<T>) new TypeAdapter<ConnectionMonitorQueryResult>() {
           @Override
           public void write(JsonWriter out, ConnectionMonitorQueryResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConnectionMonitorQueryResult read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ConnectionMonitorQueryResult given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ConnectionMonitorQueryResult
   * @throws IOException if the JSON string is invalid with respect to ConnectionMonitorQueryResult
   */
  public static ConnectionMonitorQueryResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConnectionMonitorQueryResult.class);
  }

  /**
   * Convert an instance of ConnectionMonitorQueryResult to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

