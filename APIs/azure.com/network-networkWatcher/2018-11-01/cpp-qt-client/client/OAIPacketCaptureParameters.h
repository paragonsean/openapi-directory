/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2018-11-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPacketCaptureParameters.h
 *
 * Parameters that define the create packet capture operation.
 */

#ifndef OAIPacketCaptureParameters_H
#define OAIPacketCaptureParameters_H

#include <QJsonObject>

#include "OAIPacketCaptureFilter.h"
#include "OAIPacketCaptureStorageLocation.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIPacketCaptureFilter;
class OAIPacketCaptureStorageLocation;

class OAIPacketCaptureParameters : public OAIObject {
public:
    OAIPacketCaptureParameters();
    OAIPacketCaptureParameters(QString json);
    ~OAIPacketCaptureParameters() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getBytesToCapturePerPacket() const;
    void setBytesToCapturePerPacket(const qint32 &bytes_to_capture_per_packet);
    bool is_bytes_to_capture_per_packet_Set() const;
    bool is_bytes_to_capture_per_packet_Valid() const;

    QList<OAIPacketCaptureFilter> getFilters() const;
    void setFilters(const QList<OAIPacketCaptureFilter> &filters);
    bool is_filters_Set() const;
    bool is_filters_Valid() const;

    OAIPacketCaptureStorageLocation getStorageLocation() const;
    void setStorageLocation(const OAIPacketCaptureStorageLocation &storage_location);
    bool is_storage_location_Set() const;
    bool is_storage_location_Valid() const;

    QString getTarget() const;
    void setTarget(const QString &target);
    bool is_target_Set() const;
    bool is_target_Valid() const;

    qint32 getTimeLimitInSeconds() const;
    void setTimeLimitInSeconds(const qint32 &time_limit_in_seconds);
    bool is_time_limit_in_seconds_Set() const;
    bool is_time_limit_in_seconds_Valid() const;

    qint32 getTotalBytesPerSession() const;
    void setTotalBytesPerSession(const qint32 &total_bytes_per_session);
    bool is_total_bytes_per_session_Set() const;
    bool is_total_bytes_per_session_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_bytes_to_capture_per_packet;
    bool m_bytes_to_capture_per_packet_isSet;
    bool m_bytes_to_capture_per_packet_isValid;

    QList<OAIPacketCaptureFilter> m_filters;
    bool m_filters_isSet;
    bool m_filters_isValid;

    OAIPacketCaptureStorageLocation m_storage_location;
    bool m_storage_location_isSet;
    bool m_storage_location_isValid;

    QString m_target;
    bool m_target_isSet;
    bool m_target_isValid;

    qint32 m_time_limit_in_seconds;
    bool m_time_limit_in_seconds_isSet;
    bool m_time_limit_in_seconds_isValid;

    qint32 m_total_bytes_per_session;
    bool m_total_bytes_per_session_isSet;
    bool m_total_bytes_per_session_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPacketCaptureParameters)

#endif // OAIPacketCaptureParameters_H
