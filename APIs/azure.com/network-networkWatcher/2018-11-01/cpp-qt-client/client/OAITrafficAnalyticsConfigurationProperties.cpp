/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2018-11-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITrafficAnalyticsConfigurationProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITrafficAnalyticsConfigurationProperties::OAITrafficAnalyticsConfigurationProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITrafficAnalyticsConfigurationProperties::OAITrafficAnalyticsConfigurationProperties() {
    this->initializeModel();
}

OAITrafficAnalyticsConfigurationProperties::~OAITrafficAnalyticsConfigurationProperties() {}

void OAITrafficAnalyticsConfigurationProperties::initializeModel() {

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_traffic_analytics_interval_isSet = false;
    m_traffic_analytics_interval_isValid = false;

    m_workspace_id_isSet = false;
    m_workspace_id_isValid = false;

    m_workspace_region_isSet = false;
    m_workspace_region_isValid = false;

    m_workspace_resource_id_isSet = false;
    m_workspace_resource_id_isValid = false;
}

void OAITrafficAnalyticsConfigurationProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITrafficAnalyticsConfigurationProperties::fromJsonObject(QJsonObject json) {

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_traffic_analytics_interval_isValid = ::OpenAPI::fromJsonValue(m_traffic_analytics_interval, json[QString("trafficAnalyticsInterval")]);
    m_traffic_analytics_interval_isSet = !json[QString("trafficAnalyticsInterval")].isNull() && m_traffic_analytics_interval_isValid;

    m_workspace_id_isValid = ::OpenAPI::fromJsonValue(m_workspace_id, json[QString("workspaceId")]);
    m_workspace_id_isSet = !json[QString("workspaceId")].isNull() && m_workspace_id_isValid;

    m_workspace_region_isValid = ::OpenAPI::fromJsonValue(m_workspace_region, json[QString("workspaceRegion")]);
    m_workspace_region_isSet = !json[QString("workspaceRegion")].isNull() && m_workspace_region_isValid;

    m_workspace_resource_id_isValid = ::OpenAPI::fromJsonValue(m_workspace_resource_id, json[QString("workspaceResourceId")]);
    m_workspace_resource_id_isSet = !json[QString("workspaceResourceId")].isNull() && m_workspace_resource_id_isValid;
}

QString OAITrafficAnalyticsConfigurationProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITrafficAnalyticsConfigurationProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_traffic_analytics_interval_isSet) {
        obj.insert(QString("trafficAnalyticsInterval"), ::OpenAPI::toJsonValue(m_traffic_analytics_interval));
    }
    if (m_workspace_id_isSet) {
        obj.insert(QString("workspaceId"), ::OpenAPI::toJsonValue(m_workspace_id));
    }
    if (m_workspace_region_isSet) {
        obj.insert(QString("workspaceRegion"), ::OpenAPI::toJsonValue(m_workspace_region));
    }
    if (m_workspace_resource_id_isSet) {
        obj.insert(QString("workspaceResourceId"), ::OpenAPI::toJsonValue(m_workspace_resource_id));
    }
    return obj;
}

bool OAITrafficAnalyticsConfigurationProperties::isEnabled() const {
    return m_enabled;
}
void OAITrafficAnalyticsConfigurationProperties::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAITrafficAnalyticsConfigurationProperties::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAITrafficAnalyticsConfigurationProperties::is_enabled_Valid() const{
    return m_enabled_isValid;
}

qint32 OAITrafficAnalyticsConfigurationProperties::getTrafficAnalyticsInterval() const {
    return m_traffic_analytics_interval;
}
void OAITrafficAnalyticsConfigurationProperties::setTrafficAnalyticsInterval(const qint32 &traffic_analytics_interval) {
    m_traffic_analytics_interval = traffic_analytics_interval;
    m_traffic_analytics_interval_isSet = true;
}

bool OAITrafficAnalyticsConfigurationProperties::is_traffic_analytics_interval_Set() const{
    return m_traffic_analytics_interval_isSet;
}

bool OAITrafficAnalyticsConfigurationProperties::is_traffic_analytics_interval_Valid() const{
    return m_traffic_analytics_interval_isValid;
}

QString OAITrafficAnalyticsConfigurationProperties::getWorkspaceId() const {
    return m_workspace_id;
}
void OAITrafficAnalyticsConfigurationProperties::setWorkspaceId(const QString &workspace_id) {
    m_workspace_id = workspace_id;
    m_workspace_id_isSet = true;
}

bool OAITrafficAnalyticsConfigurationProperties::is_workspace_id_Set() const{
    return m_workspace_id_isSet;
}

bool OAITrafficAnalyticsConfigurationProperties::is_workspace_id_Valid() const{
    return m_workspace_id_isValid;
}

QString OAITrafficAnalyticsConfigurationProperties::getWorkspaceRegion() const {
    return m_workspace_region;
}
void OAITrafficAnalyticsConfigurationProperties::setWorkspaceRegion(const QString &workspace_region) {
    m_workspace_region = workspace_region;
    m_workspace_region_isSet = true;
}

bool OAITrafficAnalyticsConfigurationProperties::is_workspace_region_Set() const{
    return m_workspace_region_isSet;
}

bool OAITrafficAnalyticsConfigurationProperties::is_workspace_region_Valid() const{
    return m_workspace_region_isValid;
}

QString OAITrafficAnalyticsConfigurationProperties::getWorkspaceResourceId() const {
    return m_workspace_resource_id;
}
void OAITrafficAnalyticsConfigurationProperties::setWorkspaceResourceId(const QString &workspace_resource_id) {
    m_workspace_resource_id = workspace_resource_id;
    m_workspace_resource_id_isSet = true;
}

bool OAITrafficAnalyticsConfigurationProperties::is_workspace_resource_id_Set() const{
    return m_workspace_resource_id_isSet;
}

bool OAITrafficAnalyticsConfigurationProperties::is_workspace_resource_id_Valid() const{
    return m_workspace_resource_id_isValid;
}

bool OAITrafficAnalyticsConfigurationProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_traffic_analytics_interval_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_workspace_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_workspace_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_workspace_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITrafficAnalyticsConfigurationProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_enabled_isValid && m_workspace_id_isValid && m_workspace_region_isValid && m_workspace_resource_id_isValid && true;
}

} // namespace OpenAPI
