/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2018-11-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPacketCaptureStorageLocation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPacketCaptureStorageLocation::OAIPacketCaptureStorageLocation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPacketCaptureStorageLocation::OAIPacketCaptureStorageLocation() {
    this->initializeModel();
}

OAIPacketCaptureStorageLocation::~OAIPacketCaptureStorageLocation() {}

void OAIPacketCaptureStorageLocation::initializeModel() {

    m_file_path_isSet = false;
    m_file_path_isValid = false;

    m_storage_id_isSet = false;
    m_storage_id_isValid = false;

    m_storage_path_isSet = false;
    m_storage_path_isValid = false;
}

void OAIPacketCaptureStorageLocation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPacketCaptureStorageLocation::fromJsonObject(QJsonObject json) {

    m_file_path_isValid = ::OpenAPI::fromJsonValue(m_file_path, json[QString("filePath")]);
    m_file_path_isSet = !json[QString("filePath")].isNull() && m_file_path_isValid;

    m_storage_id_isValid = ::OpenAPI::fromJsonValue(m_storage_id, json[QString("storageId")]);
    m_storage_id_isSet = !json[QString("storageId")].isNull() && m_storage_id_isValid;

    m_storage_path_isValid = ::OpenAPI::fromJsonValue(m_storage_path, json[QString("storagePath")]);
    m_storage_path_isSet = !json[QString("storagePath")].isNull() && m_storage_path_isValid;
}

QString OAIPacketCaptureStorageLocation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPacketCaptureStorageLocation::asJsonObject() const {
    QJsonObject obj;
    if (m_file_path_isSet) {
        obj.insert(QString("filePath"), ::OpenAPI::toJsonValue(m_file_path));
    }
    if (m_storage_id_isSet) {
        obj.insert(QString("storageId"), ::OpenAPI::toJsonValue(m_storage_id));
    }
    if (m_storage_path_isSet) {
        obj.insert(QString("storagePath"), ::OpenAPI::toJsonValue(m_storage_path));
    }
    return obj;
}

QString OAIPacketCaptureStorageLocation::getFilePath() const {
    return m_file_path;
}
void OAIPacketCaptureStorageLocation::setFilePath(const QString &file_path) {
    m_file_path = file_path;
    m_file_path_isSet = true;
}

bool OAIPacketCaptureStorageLocation::is_file_path_Set() const{
    return m_file_path_isSet;
}

bool OAIPacketCaptureStorageLocation::is_file_path_Valid() const{
    return m_file_path_isValid;
}

QString OAIPacketCaptureStorageLocation::getStorageId() const {
    return m_storage_id;
}
void OAIPacketCaptureStorageLocation::setStorageId(const QString &storage_id) {
    m_storage_id = storage_id;
    m_storage_id_isSet = true;
}

bool OAIPacketCaptureStorageLocation::is_storage_id_Set() const{
    return m_storage_id_isSet;
}

bool OAIPacketCaptureStorageLocation::is_storage_id_Valid() const{
    return m_storage_id_isValid;
}

QString OAIPacketCaptureStorageLocation::getStoragePath() const {
    return m_storage_path;
}
void OAIPacketCaptureStorageLocation::setStoragePath(const QString &storage_path) {
    m_storage_path = storage_path;
    m_storage_path_isSet = true;
}

bool OAIPacketCaptureStorageLocation::is_storage_path_Set() const{
    return m_storage_path_isSet;
}

bool OAIPacketCaptureStorageLocation::is_storage_path_Valid() const{
    return m_storage_path_isValid;
}

bool OAIPacketCaptureStorageLocation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_file_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_path_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPacketCaptureStorageLocation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
