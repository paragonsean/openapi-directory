/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2018-11-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AvailableProvidersList from '../model/AvailableProvidersList';
import AvailableProvidersListParameters from '../model/AvailableProvidersListParameters';
import AzureReachabilityReport from '../model/AzureReachabilityReport';
import AzureReachabilityReportParameters from '../model/AzureReachabilityReportParameters';
import ConnectivityInformation from '../model/ConnectivityInformation';
import ConnectivityParameters from '../model/ConnectivityParameters';
import ErrorResponse from '../model/ErrorResponse';
import FlowLogInformation from '../model/FlowLogInformation';
import FlowLogStatusParameters from '../model/FlowLogStatusParameters';
import NetworkConfigurationDiagnosticParameters from '../model/NetworkConfigurationDiagnosticParameters';
import NetworkConfigurationDiagnosticResponse from '../model/NetworkConfigurationDiagnosticResponse';
import NetworkWatcher from '../model/NetworkWatcher';
import NetworkWatcherListResult from '../model/NetworkWatcherListResult';
import NetworkWatchersUpdateTagsRequest from '../model/NetworkWatchersUpdateTagsRequest';
import NextHopParameters from '../model/NextHopParameters';
import NextHopResult from '../model/NextHopResult';
import QueryTroubleshootingParameters from '../model/QueryTroubleshootingParameters';
import SecurityGroupViewParameters from '../model/SecurityGroupViewParameters';
import SecurityGroupViewResult from '../model/SecurityGroupViewResult';
import Topology from '../model/Topology';
import TopologyParameters from '../model/TopologyParameters';
import TroubleshootingParameters from '../model/TroubleshootingParameters';
import TroubleshootingResult from '../model/TroubleshootingResult';
import VerificationIPFlowParameters from '../model/VerificationIPFlowParameters';
import VerificationIPFlowResult from '../model/VerificationIPFlowResult';

/**
* NetworkWatchers service.
* @module api/NetworkWatchersApi
* @version 2018-11-01
*/
export default class NetworkWatchersApi {

    /**
    * Constructs a new NetworkWatchersApi. 
    * @alias module:api/NetworkWatchersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the networkWatchersCheckConnectivity operation.
     * @callback module:api/NetworkWatchersApi~networkWatchersCheckConnectivityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConnectivityInformation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Verifies the possibility of establishing a direct TCP connection from a virtual machine to a given endpoint including another VM or an arbitrary remote server.
     * @param {String} resourceGroupName The name of the network watcher resource group.
     * @param {String} networkWatcherName The name of the network watcher resource.
     * @param {String} apiVersion Client API version.
     * @param {String} subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:model/ConnectivityParameters} parameters Parameters that determine how the connectivity check will be performed.
     * @param {module:api/NetworkWatchersApi~networkWatchersCheckConnectivityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConnectivityInformation}
     */
    networkWatchersCheckConnectivity(resourceGroupName, networkWatcherName, apiVersion, subscriptionId, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling networkWatchersCheckConnectivity");
      }
      // verify the required parameter 'networkWatcherName' is set
      if (networkWatcherName === undefined || networkWatcherName === null) {
        throw new Error("Missing the required parameter 'networkWatcherName' when calling networkWatchersCheckConnectivity");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling networkWatchersCheckConnectivity");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling networkWatchersCheckConnectivity");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling networkWatchersCheckConnectivity");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'networkWatcherName': networkWatcherName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ConnectivityInformation;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/connectivityCheck', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the networkWatchersCreateOrUpdate operation.
     * @callback module:api/NetworkWatchersApi~networkWatchersCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NetworkWatcher} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates or updates a network watcher in the specified resource group.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} networkWatcherName The name of the network watcher.
     * @param {String} apiVersion Client API version.
     * @param {String} subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:model/NetworkWatcher} parameters Parameters that define the network watcher resource.
     * @param {module:api/NetworkWatchersApi~networkWatchersCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NetworkWatcher}
     */
    networkWatchersCreateOrUpdate(resourceGroupName, networkWatcherName, apiVersion, subscriptionId, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling networkWatchersCreateOrUpdate");
      }
      // verify the required parameter 'networkWatcherName' is set
      if (networkWatcherName === undefined || networkWatcherName === null) {
        throw new Error("Missing the required parameter 'networkWatcherName' when calling networkWatchersCreateOrUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling networkWatchersCreateOrUpdate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling networkWatchersCreateOrUpdate");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling networkWatchersCreateOrUpdate");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'networkWatcherName': networkWatcherName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = NetworkWatcher;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the networkWatchersDelete operation.
     * @callback module:api/NetworkWatchersApi~networkWatchersDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the specified network watcher resource.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} networkWatcherName The name of the network watcher.
     * @param {String} apiVersion Client API version.
     * @param {String} subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:api/NetworkWatchersApi~networkWatchersDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    networkWatchersDelete(resourceGroupName, networkWatcherName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling networkWatchersDelete");
      }
      // verify the required parameter 'networkWatcherName' is set
      if (networkWatcherName === undefined || networkWatcherName === null) {
        throw new Error("Missing the required parameter 'networkWatcherName' when calling networkWatchersDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling networkWatchersDelete");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling networkWatchersDelete");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'networkWatcherName': networkWatcherName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the networkWatchersGet operation.
     * @callback module:api/NetworkWatchersApi~networkWatchersGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NetworkWatcher} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the specified network watcher by resource group.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} networkWatcherName The name of the network watcher.
     * @param {String} apiVersion Client API version.
     * @param {String} subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:api/NetworkWatchersApi~networkWatchersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NetworkWatcher}
     */
    networkWatchersGet(resourceGroupName, networkWatcherName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling networkWatchersGet");
      }
      // verify the required parameter 'networkWatcherName' is set
      if (networkWatcherName === undefined || networkWatcherName === null) {
        throw new Error("Missing the required parameter 'networkWatcherName' when calling networkWatchersGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling networkWatchersGet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling networkWatchersGet");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'networkWatcherName': networkWatcherName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = NetworkWatcher;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the networkWatchersGetAzureReachabilityReport operation.
     * @callback module:api/NetworkWatchersApi~networkWatchersGetAzureReachabilityReportCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AzureReachabilityReport} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the relative latency score for internet service providers from a specified location to Azure regions.
     * @param {String} resourceGroupName The name of the network watcher resource group.
     * @param {String} networkWatcherName The name of the network watcher resource.
     * @param {String} apiVersion Client API version.
     * @param {String} subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:model/AzureReachabilityReportParameters} parameters Parameters that determine Azure reachability report configuration.
     * @param {module:api/NetworkWatchersApi~networkWatchersGetAzureReachabilityReportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AzureReachabilityReport}
     */
    networkWatchersGetAzureReachabilityReport(resourceGroupName, networkWatcherName, apiVersion, subscriptionId, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling networkWatchersGetAzureReachabilityReport");
      }
      // verify the required parameter 'networkWatcherName' is set
      if (networkWatcherName === undefined || networkWatcherName === null) {
        throw new Error("Missing the required parameter 'networkWatcherName' when calling networkWatchersGetAzureReachabilityReport");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling networkWatchersGetAzureReachabilityReport");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling networkWatchersGetAzureReachabilityReport");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling networkWatchersGetAzureReachabilityReport");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'networkWatcherName': networkWatcherName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AzureReachabilityReport;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/azureReachabilityReport', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the networkWatchersGetFlowLogStatus operation.
     * @callback module:api/NetworkWatchersApi~networkWatchersGetFlowLogStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FlowLogInformation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Queries status of flow log and traffic analytics (optional) on a specified resource.
     * @param {String} resourceGroupName The name of the network watcher resource group.
     * @param {String} networkWatcherName The name of the network watcher resource.
     * @param {String} apiVersion Client API version.
     * @param {String} subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:model/FlowLogStatusParameters} parameters Parameters that define a resource to query flow log and traffic analytics (optional)  status.
     * @param {module:api/NetworkWatchersApi~networkWatchersGetFlowLogStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FlowLogInformation}
     */
    networkWatchersGetFlowLogStatus(resourceGroupName, networkWatcherName, apiVersion, subscriptionId, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling networkWatchersGetFlowLogStatus");
      }
      // verify the required parameter 'networkWatcherName' is set
      if (networkWatcherName === undefined || networkWatcherName === null) {
        throw new Error("Missing the required parameter 'networkWatcherName' when calling networkWatchersGetFlowLogStatus");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling networkWatchersGetFlowLogStatus");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling networkWatchersGetFlowLogStatus");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling networkWatchersGetFlowLogStatus");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'networkWatcherName': networkWatcherName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = FlowLogInformation;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/queryFlowLogStatus', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the networkWatchersGetNetworkConfigurationDiagnostic operation.
     * @callback module:api/NetworkWatchersApi~networkWatchersGetNetworkConfigurationDiagnosticCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NetworkConfigurationDiagnosticResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get network configuration diagnostic.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} networkWatcherName The name of the network watcher.
     * @param {String} apiVersion Client API version.
     * @param {String} subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:model/NetworkConfigurationDiagnosticParameters} parameters Parameters to get network configuration diagnostic.
     * @param {module:api/NetworkWatchersApi~networkWatchersGetNetworkConfigurationDiagnosticCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NetworkConfigurationDiagnosticResponse}
     */
    networkWatchersGetNetworkConfigurationDiagnostic(resourceGroupName, networkWatcherName, apiVersion, subscriptionId, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling networkWatchersGetNetworkConfigurationDiagnostic");
      }
      // verify the required parameter 'networkWatcherName' is set
      if (networkWatcherName === undefined || networkWatcherName === null) {
        throw new Error("Missing the required parameter 'networkWatcherName' when calling networkWatchersGetNetworkConfigurationDiagnostic");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling networkWatchersGetNetworkConfigurationDiagnostic");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling networkWatchersGetNetworkConfigurationDiagnostic");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling networkWatchersGetNetworkConfigurationDiagnostic");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'networkWatcherName': networkWatcherName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = NetworkConfigurationDiagnosticResponse;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/networkConfigurationDiagnostic', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the networkWatchersGetNextHop operation.
     * @callback module:api/NetworkWatchersApi~networkWatchersGetNextHopCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NextHopResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the next hop from the specified VM.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} networkWatcherName The name of the network watcher.
     * @param {String} apiVersion Client API version.
     * @param {String} subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:model/NextHopParameters} parameters Parameters that define the source and destination endpoint.
     * @param {module:api/NetworkWatchersApi~networkWatchersGetNextHopCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NextHopResult}
     */
    networkWatchersGetNextHop(resourceGroupName, networkWatcherName, apiVersion, subscriptionId, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling networkWatchersGetNextHop");
      }
      // verify the required parameter 'networkWatcherName' is set
      if (networkWatcherName === undefined || networkWatcherName === null) {
        throw new Error("Missing the required parameter 'networkWatcherName' when calling networkWatchersGetNextHop");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling networkWatchersGetNextHop");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling networkWatchersGetNextHop");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling networkWatchersGetNextHop");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'networkWatcherName': networkWatcherName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = NextHopResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/nextHop', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the networkWatchersGetTopology operation.
     * @callback module:api/NetworkWatchersApi~networkWatchersGetTopologyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Topology} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the current network topology by resource group.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} networkWatcherName The name of the network watcher.
     * @param {String} apiVersion Client API version.
     * @param {String} subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:model/TopologyParameters} parameters Parameters that define the representation of topology.
     * @param {module:api/NetworkWatchersApi~networkWatchersGetTopologyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Topology}
     */
    networkWatchersGetTopology(resourceGroupName, networkWatcherName, apiVersion, subscriptionId, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling networkWatchersGetTopology");
      }
      // verify the required parameter 'networkWatcherName' is set
      if (networkWatcherName === undefined || networkWatcherName === null) {
        throw new Error("Missing the required parameter 'networkWatcherName' when calling networkWatchersGetTopology");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling networkWatchersGetTopology");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling networkWatchersGetTopology");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling networkWatchersGetTopology");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'networkWatcherName': networkWatcherName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Topology;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/topology', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the networkWatchersGetTroubleshooting operation.
     * @callback module:api/NetworkWatchersApi~networkWatchersGetTroubleshootingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TroubleshootingResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Initiate troubleshooting on a specified resource
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} networkWatcherName The name of the network watcher resource.
     * @param {String} apiVersion Client API version.
     * @param {String} subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:model/TroubleshootingParameters} parameters Parameters that define the resource to troubleshoot.
     * @param {module:api/NetworkWatchersApi~networkWatchersGetTroubleshootingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TroubleshootingResult}
     */
    networkWatchersGetTroubleshooting(resourceGroupName, networkWatcherName, apiVersion, subscriptionId, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling networkWatchersGetTroubleshooting");
      }
      // verify the required parameter 'networkWatcherName' is set
      if (networkWatcherName === undefined || networkWatcherName === null) {
        throw new Error("Missing the required parameter 'networkWatcherName' when calling networkWatchersGetTroubleshooting");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling networkWatchersGetTroubleshooting");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling networkWatchersGetTroubleshooting");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling networkWatchersGetTroubleshooting");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'networkWatcherName': networkWatcherName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TroubleshootingResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/troubleshoot', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the networkWatchersGetTroubleshootingResult operation.
     * @callback module:api/NetworkWatchersApi~networkWatchersGetTroubleshootingResultCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TroubleshootingResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the last completed troubleshooting result on a specified resource
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} networkWatcherName The name of the network watcher resource.
     * @param {String} apiVersion Client API version.
     * @param {String} subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:model/QueryTroubleshootingParameters} parameters Parameters that define the resource to query the troubleshooting result.
     * @param {module:api/NetworkWatchersApi~networkWatchersGetTroubleshootingResultCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TroubleshootingResult}
     */
    networkWatchersGetTroubleshootingResult(resourceGroupName, networkWatcherName, apiVersion, subscriptionId, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling networkWatchersGetTroubleshootingResult");
      }
      // verify the required parameter 'networkWatcherName' is set
      if (networkWatcherName === undefined || networkWatcherName === null) {
        throw new Error("Missing the required parameter 'networkWatcherName' when calling networkWatchersGetTroubleshootingResult");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling networkWatchersGetTroubleshootingResult");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling networkWatchersGetTroubleshootingResult");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling networkWatchersGetTroubleshootingResult");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'networkWatcherName': networkWatcherName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TroubleshootingResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/queryTroubleshootResult', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the networkWatchersGetVMSecurityRules operation.
     * @callback module:api/NetworkWatchersApi~networkWatchersGetVMSecurityRulesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SecurityGroupViewResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the configured and effective security group rules on the specified VM.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} networkWatcherName The name of the network watcher.
     * @param {String} apiVersion Client API version.
     * @param {String} subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:model/SecurityGroupViewParameters} parameters Parameters that define the VM to check security groups for.
     * @param {module:api/NetworkWatchersApi~networkWatchersGetVMSecurityRulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SecurityGroupViewResult}
     */
    networkWatchersGetVMSecurityRules(resourceGroupName, networkWatcherName, apiVersion, subscriptionId, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling networkWatchersGetVMSecurityRules");
      }
      // verify the required parameter 'networkWatcherName' is set
      if (networkWatcherName === undefined || networkWatcherName === null) {
        throw new Error("Missing the required parameter 'networkWatcherName' when calling networkWatchersGetVMSecurityRules");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling networkWatchersGetVMSecurityRules");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling networkWatchersGetVMSecurityRules");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling networkWatchersGetVMSecurityRules");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'networkWatcherName': networkWatcherName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SecurityGroupViewResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/securityGroupView', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the networkWatchersList operation.
     * @callback module:api/NetworkWatchersApi~networkWatchersListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NetworkWatcherListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all network watchers by resource group.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} apiVersion Client API version.
     * @param {String} subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:api/NetworkWatchersApi~networkWatchersListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NetworkWatcherListResult}
     */
    networkWatchersList(resourceGroupName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling networkWatchersList");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling networkWatchersList");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling networkWatchersList");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = NetworkWatcherListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the networkWatchersListAll operation.
     * @callback module:api/NetworkWatchersApi~networkWatchersListAllCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NetworkWatcherListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all network watchers by subscription.
     * @param {String} apiVersion Client API version.
     * @param {String} subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:api/NetworkWatchersApi~networkWatchersListAllCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NetworkWatcherListResult}
     */
    networkWatchersListAll(apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling networkWatchersListAll");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling networkWatchersListAll");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = NetworkWatcherListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Network/networkWatchers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the networkWatchersListAvailableProviders operation.
     * @callback module:api/NetworkWatchersApi~networkWatchersListAvailableProvidersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AvailableProvidersList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all available internet service providers for a specified Azure region.
     * @param {String} resourceGroupName The name of the network watcher resource group.
     * @param {String} networkWatcherName The name of the network watcher resource.
     * @param {String} apiVersion Client API version.
     * @param {String} subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:model/AvailableProvidersListParameters} parameters Parameters that scope the list of available providers.
     * @param {module:api/NetworkWatchersApi~networkWatchersListAvailableProvidersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AvailableProvidersList}
     */
    networkWatchersListAvailableProviders(resourceGroupName, networkWatcherName, apiVersion, subscriptionId, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling networkWatchersListAvailableProviders");
      }
      // verify the required parameter 'networkWatcherName' is set
      if (networkWatcherName === undefined || networkWatcherName === null) {
        throw new Error("Missing the required parameter 'networkWatcherName' when calling networkWatchersListAvailableProviders");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling networkWatchersListAvailableProviders");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling networkWatchersListAvailableProviders");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling networkWatchersListAvailableProviders");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'networkWatcherName': networkWatcherName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AvailableProvidersList;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/availableProvidersList', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the networkWatchersSetFlowLogConfiguration operation.
     * @callback module:api/NetworkWatchersApi~networkWatchersSetFlowLogConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FlowLogInformation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Configures flow log  and traffic analytics (optional) on a specified resource.
     * @param {String} resourceGroupName The name of the network watcher resource group.
     * @param {String} networkWatcherName The name of the network watcher resource.
     * @param {String} apiVersion Client API version.
     * @param {String} subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:model/FlowLogInformation} parameters Parameters that define the configuration of flow log.
     * @param {module:api/NetworkWatchersApi~networkWatchersSetFlowLogConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FlowLogInformation}
     */
    networkWatchersSetFlowLogConfiguration(resourceGroupName, networkWatcherName, apiVersion, subscriptionId, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling networkWatchersSetFlowLogConfiguration");
      }
      // verify the required parameter 'networkWatcherName' is set
      if (networkWatcherName === undefined || networkWatcherName === null) {
        throw new Error("Missing the required parameter 'networkWatcherName' when calling networkWatchersSetFlowLogConfiguration");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling networkWatchersSetFlowLogConfiguration");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling networkWatchersSetFlowLogConfiguration");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling networkWatchersSetFlowLogConfiguration");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'networkWatcherName': networkWatcherName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = FlowLogInformation;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/configureFlowLog', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the networkWatchersUpdateTags operation.
     * @callback module:api/NetworkWatchersApi~networkWatchersUpdateTagsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NetworkWatcher} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a network watcher tags.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} networkWatcherName The name of the network watcher.
     * @param {String} apiVersion Client API version.
     * @param {String} subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:model/NetworkWatchersUpdateTagsRequest} parameters Parameters supplied to update network watcher tags.
     * @param {module:api/NetworkWatchersApi~networkWatchersUpdateTagsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NetworkWatcher}
     */
    networkWatchersUpdateTags(resourceGroupName, networkWatcherName, apiVersion, subscriptionId, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling networkWatchersUpdateTags");
      }
      // verify the required parameter 'networkWatcherName' is set
      if (networkWatcherName === undefined || networkWatcherName === null) {
        throw new Error("Missing the required parameter 'networkWatcherName' when calling networkWatchersUpdateTags");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling networkWatchersUpdateTags");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling networkWatchersUpdateTags");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling networkWatchersUpdateTags");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'networkWatcherName': networkWatcherName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = NetworkWatcher;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the networkWatchersVerifyIPFlow operation.
     * @callback module:api/NetworkWatchersApi~networkWatchersVerifyIPFlowCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VerificationIPFlowResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Verify IP flow from the specified VM to a location given the currently configured NSG rules.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} networkWatcherName The name of the network watcher.
     * @param {String} apiVersion Client API version.
     * @param {String} subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:model/VerificationIPFlowParameters} parameters Parameters that define the IP flow to be verified.
     * @param {module:api/NetworkWatchersApi~networkWatchersVerifyIPFlowCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VerificationIPFlowResult}
     */
    networkWatchersVerifyIPFlow(resourceGroupName, networkWatcherName, apiVersion, subscriptionId, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling networkWatchersVerifyIPFlow");
      }
      // verify the required parameter 'networkWatcherName' is set
      if (networkWatcherName === undefined || networkWatcherName === null) {
        throw new Error("Missing the required parameter 'networkWatcherName' when calling networkWatchersVerifyIPFlow");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling networkWatchersVerifyIPFlow");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling networkWatchersVerifyIPFlow");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling networkWatchersVerifyIPFlow");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'networkWatcherName': networkWatcherName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = VerificationIPFlowResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/ipFlowVerify', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
