/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2017-08-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITroubleshootingDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITroubleshootingDetails::OAITroubleshootingDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITroubleshootingDetails::OAITroubleshootingDetails() {
    this->initializeModel();
}

OAITroubleshootingDetails::~OAITroubleshootingDetails() {}

void OAITroubleshootingDetails::initializeModel() {

    m_detail_isSet = false;
    m_detail_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_reason_type_isSet = false;
    m_reason_type_isValid = false;

    m_recommended_actions_isSet = false;
    m_recommended_actions_isValid = false;

    m_summary_isSet = false;
    m_summary_isValid = false;
}

void OAITroubleshootingDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITroubleshootingDetails::fromJsonObject(QJsonObject json) {

    m_detail_isValid = ::OpenAPI::fromJsonValue(m_detail, json[QString("detail")]);
    m_detail_isSet = !json[QString("detail")].isNull() && m_detail_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_reason_type_isValid = ::OpenAPI::fromJsonValue(m_reason_type, json[QString("reasonType")]);
    m_reason_type_isSet = !json[QString("reasonType")].isNull() && m_reason_type_isValid;

    m_recommended_actions_isValid = ::OpenAPI::fromJsonValue(m_recommended_actions, json[QString("recommendedActions")]);
    m_recommended_actions_isSet = !json[QString("recommendedActions")].isNull() && m_recommended_actions_isValid;

    m_summary_isValid = ::OpenAPI::fromJsonValue(m_summary, json[QString("summary")]);
    m_summary_isSet = !json[QString("summary")].isNull() && m_summary_isValid;
}

QString OAITroubleshootingDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITroubleshootingDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_detail_isSet) {
        obj.insert(QString("detail"), ::OpenAPI::toJsonValue(m_detail));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_reason_type_isSet) {
        obj.insert(QString("reasonType"), ::OpenAPI::toJsonValue(m_reason_type));
    }
    if (m_recommended_actions.size() > 0) {
        obj.insert(QString("recommendedActions"), ::OpenAPI::toJsonValue(m_recommended_actions));
    }
    if (m_summary_isSet) {
        obj.insert(QString("summary"), ::OpenAPI::toJsonValue(m_summary));
    }
    return obj;
}

QString OAITroubleshootingDetails::getDetail() const {
    return m_detail;
}
void OAITroubleshootingDetails::setDetail(const QString &detail) {
    m_detail = detail;
    m_detail_isSet = true;
}

bool OAITroubleshootingDetails::is_detail_Set() const{
    return m_detail_isSet;
}

bool OAITroubleshootingDetails::is_detail_Valid() const{
    return m_detail_isValid;
}

QString OAITroubleshootingDetails::getId() const {
    return m_id;
}
void OAITroubleshootingDetails::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITroubleshootingDetails::is_id_Set() const{
    return m_id_isSet;
}

bool OAITroubleshootingDetails::is_id_Valid() const{
    return m_id_isValid;
}

QString OAITroubleshootingDetails::getReasonType() const {
    return m_reason_type;
}
void OAITroubleshootingDetails::setReasonType(const QString &reason_type) {
    m_reason_type = reason_type;
    m_reason_type_isSet = true;
}

bool OAITroubleshootingDetails::is_reason_type_Set() const{
    return m_reason_type_isSet;
}

bool OAITroubleshootingDetails::is_reason_type_Valid() const{
    return m_reason_type_isValid;
}

QList<OAITroubleshootingRecommendedActions> OAITroubleshootingDetails::getRecommendedActions() const {
    return m_recommended_actions;
}
void OAITroubleshootingDetails::setRecommendedActions(const QList<OAITroubleshootingRecommendedActions> &recommended_actions) {
    m_recommended_actions = recommended_actions;
    m_recommended_actions_isSet = true;
}

bool OAITroubleshootingDetails::is_recommended_actions_Set() const{
    return m_recommended_actions_isSet;
}

bool OAITroubleshootingDetails::is_recommended_actions_Valid() const{
    return m_recommended_actions_isValid;
}

QString OAITroubleshootingDetails::getSummary() const {
    return m_summary;
}
void OAITroubleshootingDetails::setSummary(const QString &summary) {
    m_summary = summary;
    m_summary_isSet = true;
}

bool OAITroubleshootingDetails::is_summary_Set() const{
    return m_summary_isSet;
}

bool OAITroubleshootingDetails::is_summary_Valid() const{
    return m_summary_isValid;
}

bool OAITroubleshootingDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_detail_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recommended_actions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_summary_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITroubleshootingDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
