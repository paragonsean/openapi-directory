/*
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2018-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AzureReachabilityReportItem;
import org.openapitools.client.model.AzureReachabilityReportLocation;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Azure reachability report details.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:33:02.054394-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AzureReachabilityReport {
  public static final String SERIALIZED_NAME_AGGREGATION_LEVEL = "aggregationLevel";
  @SerializedName(SERIALIZED_NAME_AGGREGATION_LEVEL)
  private String aggregationLevel;

  public static final String SERIALIZED_NAME_PROVIDER_LOCATION = "providerLocation";
  @SerializedName(SERIALIZED_NAME_PROVIDER_LOCATION)
  private AzureReachabilityReportLocation providerLocation;

  public static final String SERIALIZED_NAME_REACHABILITY_REPORT = "reachabilityReport";
  @SerializedName(SERIALIZED_NAME_REACHABILITY_REPORT)
  private List<AzureReachabilityReportItem> reachabilityReport = new ArrayList<>();

  public AzureReachabilityReport() {
  }

  public AzureReachabilityReport aggregationLevel(String aggregationLevel) {
    this.aggregationLevel = aggregationLevel;
    return this;
  }

  /**
   * The aggregation level of Azure reachability report. Can be Country, State or City.
   * @return aggregationLevel
   */
  @javax.annotation.Nonnull
  public String getAggregationLevel() {
    return aggregationLevel;
  }

  public void setAggregationLevel(String aggregationLevel) {
    this.aggregationLevel = aggregationLevel;
  }


  public AzureReachabilityReport providerLocation(AzureReachabilityReportLocation providerLocation) {
    this.providerLocation = providerLocation;
    return this;
  }

  /**
   * Get providerLocation
   * @return providerLocation
   */
  @javax.annotation.Nonnull
  public AzureReachabilityReportLocation getProviderLocation() {
    return providerLocation;
  }

  public void setProviderLocation(AzureReachabilityReportLocation providerLocation) {
    this.providerLocation = providerLocation;
  }


  public AzureReachabilityReport reachabilityReport(List<AzureReachabilityReportItem> reachabilityReport) {
    this.reachabilityReport = reachabilityReport;
    return this;
  }

  public AzureReachabilityReport addReachabilityReportItem(AzureReachabilityReportItem reachabilityReportItem) {
    if (this.reachabilityReport == null) {
      this.reachabilityReport = new ArrayList<>();
    }
    this.reachabilityReport.add(reachabilityReportItem);
    return this;
  }

  /**
   * List of Azure reachability report items.
   * @return reachabilityReport
   */
  @javax.annotation.Nonnull
  public List<AzureReachabilityReportItem> getReachabilityReport() {
    return reachabilityReport;
  }

  public void setReachabilityReport(List<AzureReachabilityReportItem> reachabilityReport) {
    this.reachabilityReport = reachabilityReport;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AzureReachabilityReport azureReachabilityReport = (AzureReachabilityReport) o;
    return Objects.equals(this.aggregationLevel, azureReachabilityReport.aggregationLevel) &&
        Objects.equals(this.providerLocation, azureReachabilityReport.providerLocation) &&
        Objects.equals(this.reachabilityReport, azureReachabilityReport.reachabilityReport);
  }

  @Override
  public int hashCode() {
    return Objects.hash(aggregationLevel, providerLocation, reachabilityReport);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AzureReachabilityReport {\n");
    sb.append("    aggregationLevel: ").append(toIndentedString(aggregationLevel)).append("\n");
    sb.append("    providerLocation: ").append(toIndentedString(providerLocation)).append("\n");
    sb.append("    reachabilityReport: ").append(toIndentedString(reachabilityReport)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("aggregationLevel");
    openapiFields.add("providerLocation");
    openapiFields.add("reachabilityReport");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("aggregationLevel");
    openapiRequiredFields.add("providerLocation");
    openapiRequiredFields.add("reachabilityReport");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AzureReachabilityReport
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AzureReachabilityReport.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AzureReachabilityReport is not found in the empty JSON string", AzureReachabilityReport.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AzureReachabilityReport.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AzureReachabilityReport` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AzureReachabilityReport.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("aggregationLevel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `aggregationLevel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("aggregationLevel").toString()));
      }
      // validate the required field `providerLocation`
      AzureReachabilityReportLocation.validateJsonElement(jsonObj.get("providerLocation"));
      // ensure the json data is an array
      if (!jsonObj.get("reachabilityReport").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `reachabilityReport` to be an array in the JSON string but got `%s`", jsonObj.get("reachabilityReport").toString()));
      }

      JsonArray jsonArrayreachabilityReport = jsonObj.getAsJsonArray("reachabilityReport");
      // validate the required field `reachabilityReport` (array)
      for (int i = 0; i < jsonArrayreachabilityReport.size(); i++) {
        AzureReachabilityReportItem.validateJsonElement(jsonArrayreachabilityReport.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AzureReachabilityReport.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AzureReachabilityReport' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AzureReachabilityReport> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AzureReachabilityReport.class));

       return (TypeAdapter<T>) new TypeAdapter<AzureReachabilityReport>() {
           @Override
           public void write(JsonWriter out, AzureReachabilityReport value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AzureReachabilityReport read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AzureReachabilityReport given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AzureReachabilityReport
   * @throws IOException if the JSON string is invalid with respect to AzureReachabilityReport
   */
  public static AzureReachabilityReport fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AzureReachabilityReport.class);
  }

  /**
   * Convert an instance of AzureReachabilityReport to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

