/*
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2018-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.TrafficAnalyticsConfigurationProperties;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Parameters that define the configuration of traffic analytics.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:33:02.054394-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TrafficAnalyticsProperties {
  public static final String SERIALIZED_NAME_NETWORK_WATCHER_FLOW_ANALYTICS_CONFIGURATION = "networkWatcherFlowAnalyticsConfiguration";
  @SerializedName(SERIALIZED_NAME_NETWORK_WATCHER_FLOW_ANALYTICS_CONFIGURATION)
  private TrafficAnalyticsConfigurationProperties networkWatcherFlowAnalyticsConfiguration;

  public TrafficAnalyticsProperties() {
  }

  public TrafficAnalyticsProperties networkWatcherFlowAnalyticsConfiguration(TrafficAnalyticsConfigurationProperties networkWatcherFlowAnalyticsConfiguration) {
    this.networkWatcherFlowAnalyticsConfiguration = networkWatcherFlowAnalyticsConfiguration;
    return this;
  }

  /**
   * Get networkWatcherFlowAnalyticsConfiguration
   * @return networkWatcherFlowAnalyticsConfiguration
   */
  @javax.annotation.Nonnull
  public TrafficAnalyticsConfigurationProperties getNetworkWatcherFlowAnalyticsConfiguration() {
    return networkWatcherFlowAnalyticsConfiguration;
  }

  public void setNetworkWatcherFlowAnalyticsConfiguration(TrafficAnalyticsConfigurationProperties networkWatcherFlowAnalyticsConfiguration) {
    this.networkWatcherFlowAnalyticsConfiguration = networkWatcherFlowAnalyticsConfiguration;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TrafficAnalyticsProperties trafficAnalyticsProperties = (TrafficAnalyticsProperties) o;
    return Objects.equals(this.networkWatcherFlowAnalyticsConfiguration, trafficAnalyticsProperties.networkWatcherFlowAnalyticsConfiguration);
  }

  @Override
  public int hashCode() {
    return Objects.hash(networkWatcherFlowAnalyticsConfiguration);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TrafficAnalyticsProperties {\n");
    sb.append("    networkWatcherFlowAnalyticsConfiguration: ").append(toIndentedString(networkWatcherFlowAnalyticsConfiguration)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("networkWatcherFlowAnalyticsConfiguration");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("networkWatcherFlowAnalyticsConfiguration");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TrafficAnalyticsProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TrafficAnalyticsProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TrafficAnalyticsProperties is not found in the empty JSON string", TrafficAnalyticsProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TrafficAnalyticsProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TrafficAnalyticsProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TrafficAnalyticsProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `networkWatcherFlowAnalyticsConfiguration`
      TrafficAnalyticsConfigurationProperties.validateJsonElement(jsonObj.get("networkWatcherFlowAnalyticsConfiguration"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TrafficAnalyticsProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TrafficAnalyticsProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TrafficAnalyticsProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TrafficAnalyticsProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<TrafficAnalyticsProperties>() {
           @Override
           public void write(JsonWriter out, TrafficAnalyticsProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TrafficAnalyticsProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TrafficAnalyticsProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TrafficAnalyticsProperties
   * @throws IOException if the JSON string is invalid with respect to TrafficAnalyticsProperties
   */
  public static TrafficAnalyticsProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TrafficAnalyticsProperties.class);
  }

  /**
   * Convert an instance of TrafficAnalyticsProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

