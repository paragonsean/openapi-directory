/*
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2018-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ConnectionMonitorDestination;
import org.openapitools.client.model.ConnectionMonitorSource;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Parameters that define the operation to create a connection monitor.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:33:02.054394-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ConnectionMonitorParameters {
  public static final String SERIALIZED_NAME_AUTO_START = "autoStart";
  @SerializedName(SERIALIZED_NAME_AUTO_START)
  private Boolean autoStart = true;

  public static final String SERIALIZED_NAME_DESTINATION = "destination";
  @SerializedName(SERIALIZED_NAME_DESTINATION)
  private ConnectionMonitorDestination destination;

  public static final String SERIALIZED_NAME_MONITORING_INTERVAL_IN_SECONDS = "monitoringIntervalInSeconds";
  @SerializedName(SERIALIZED_NAME_MONITORING_INTERVAL_IN_SECONDS)
  private Integer monitoringIntervalInSeconds;

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private ConnectionMonitorSource source;

  public ConnectionMonitorParameters() {
  }

  public ConnectionMonitorParameters autoStart(Boolean autoStart) {
    this.autoStart = autoStart;
    return this;
  }

  /**
   * Determines if the connection monitor will start automatically once created.
   * @return autoStart
   */
  @javax.annotation.Nullable
  public Boolean getAutoStart() {
    return autoStart;
  }

  public void setAutoStart(Boolean autoStart) {
    this.autoStart = autoStart;
  }


  public ConnectionMonitorParameters destination(ConnectionMonitorDestination destination) {
    this.destination = destination;
    return this;
  }

  /**
   * Get destination
   * @return destination
   */
  @javax.annotation.Nonnull
  public ConnectionMonitorDestination getDestination() {
    return destination;
  }

  public void setDestination(ConnectionMonitorDestination destination) {
    this.destination = destination;
  }


  public ConnectionMonitorParameters monitoringIntervalInSeconds(Integer monitoringIntervalInSeconds) {
    this.monitoringIntervalInSeconds = monitoringIntervalInSeconds;
    return this;
  }

  /**
   * Monitoring interval in seconds.
   * @return monitoringIntervalInSeconds
   */
  @javax.annotation.Nullable
  public Integer getMonitoringIntervalInSeconds() {
    return monitoringIntervalInSeconds;
  }

  public void setMonitoringIntervalInSeconds(Integer monitoringIntervalInSeconds) {
    this.monitoringIntervalInSeconds = monitoringIntervalInSeconds;
  }


  public ConnectionMonitorParameters source(ConnectionMonitorSource source) {
    this.source = source;
    return this;
  }

  /**
   * Get source
   * @return source
   */
  @javax.annotation.Nonnull
  public ConnectionMonitorSource getSource() {
    return source;
  }

  public void setSource(ConnectionMonitorSource source) {
    this.source = source;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConnectionMonitorParameters connectionMonitorParameters = (ConnectionMonitorParameters) o;
    return Objects.equals(this.autoStart, connectionMonitorParameters.autoStart) &&
        Objects.equals(this.destination, connectionMonitorParameters.destination) &&
        Objects.equals(this.monitoringIntervalInSeconds, connectionMonitorParameters.monitoringIntervalInSeconds) &&
        Objects.equals(this.source, connectionMonitorParameters.source);
  }

  @Override
  public int hashCode() {
    return Objects.hash(autoStart, destination, monitoringIntervalInSeconds, source);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConnectionMonitorParameters {\n");
    sb.append("    autoStart: ").append(toIndentedString(autoStart)).append("\n");
    sb.append("    destination: ").append(toIndentedString(destination)).append("\n");
    sb.append("    monitoringIntervalInSeconds: ").append(toIndentedString(monitoringIntervalInSeconds)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("autoStart");
    openapiFields.add("destination");
    openapiFields.add("monitoringIntervalInSeconds");
    openapiFields.add("source");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("destination");
    openapiRequiredFields.add("source");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ConnectionMonitorParameters
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConnectionMonitorParameters.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConnectionMonitorParameters is not found in the empty JSON string", ConnectionMonitorParameters.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConnectionMonitorParameters.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConnectionMonitorParameters` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ConnectionMonitorParameters.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `destination`
      ConnectionMonitorDestination.validateJsonElement(jsonObj.get("destination"));
      // validate the required field `source`
      ConnectionMonitorSource.validateJsonElement(jsonObj.get("source"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConnectionMonitorParameters.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConnectionMonitorParameters' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConnectionMonitorParameters> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConnectionMonitorParameters.class));

       return (TypeAdapter<T>) new TypeAdapter<ConnectionMonitorParameters>() {
           @Override
           public void write(JsonWriter out, ConnectionMonitorParameters value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConnectionMonitorParameters read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ConnectionMonitorParameters given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ConnectionMonitorParameters
   * @throws IOException if the JSON string is invalid with respect to ConnectionMonitorParameters
   */
  public static ConnectionMonitorParameters fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConnectionMonitorParameters.class);
  }

  /**
   * Convert an instance of ConnectionMonitorParameters to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

