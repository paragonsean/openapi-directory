# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PacketCaptureFilter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, local_ip_address: str=None, local_port: str=None, protocol: str='Any', remote_ip_address: str=None, remote_port: str=None):
        """PacketCaptureFilter - a model defined in OpenAPI

        :param local_ip_address: The local_ip_address of this PacketCaptureFilter.
        :param local_port: The local_port of this PacketCaptureFilter.
        :param protocol: The protocol of this PacketCaptureFilter.
        :param remote_ip_address: The remote_ip_address of this PacketCaptureFilter.
        :param remote_port: The remote_port of this PacketCaptureFilter.
        """
        self.openapi_types = {
            'local_ip_address': str,
            'local_port': str,
            'protocol': str,
            'remote_ip_address': str,
            'remote_port': str
        }

        self.attribute_map = {
            'local_ip_address': 'localIPAddress',
            'local_port': 'localPort',
            'protocol': 'protocol',
            'remote_ip_address': 'remoteIPAddress',
            'remote_port': 'remotePort'
        }

        self._local_ip_address = local_ip_address
        self._local_port = local_port
        self._protocol = protocol
        self._remote_ip_address = remote_ip_address
        self._remote_port = remote_port

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PacketCaptureFilter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PacketCaptureFilter of this PacketCaptureFilter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def local_ip_address(self):
        """Gets the local_ip_address of this PacketCaptureFilter.

        Local IP Address to be filtered on. Notation: \"127.0.0.1\" for single address entry. \"127.0.0.1-127.0.0.255\" for range. \"127.0.0.1;127.0.0.5\"? for multiple entries. Multiple ranges not currently supported. Mixing ranges with multiple entries not currently supported. Default = null.

        :return: The local_ip_address of this PacketCaptureFilter.
        :rtype: str
        """
        return self._local_ip_address

    @local_ip_address.setter
    def local_ip_address(self, local_ip_address):
        """Sets the local_ip_address of this PacketCaptureFilter.

        Local IP Address to be filtered on. Notation: \"127.0.0.1\" for single address entry. \"127.0.0.1-127.0.0.255\" for range. \"127.0.0.1;127.0.0.5\"? for multiple entries. Multiple ranges not currently supported. Mixing ranges with multiple entries not currently supported. Default = null.

        :param local_ip_address: The local_ip_address of this PacketCaptureFilter.
        :type local_ip_address: str
        """

        self._local_ip_address = local_ip_address

    @property
    def local_port(self):
        """Gets the local_port of this PacketCaptureFilter.

        Local port to be filtered on. Notation: \"80\" for single port entry.\"80-85\" for range. \"80;443;\" for multiple entries. Multiple ranges not currently supported. Mixing ranges with multiple entries not currently supported. Default = null.

        :return: The local_port of this PacketCaptureFilter.
        :rtype: str
        """
        return self._local_port

    @local_port.setter
    def local_port(self, local_port):
        """Sets the local_port of this PacketCaptureFilter.

        Local port to be filtered on. Notation: \"80\" for single port entry.\"80-85\" for range. \"80;443;\" for multiple entries. Multiple ranges not currently supported. Mixing ranges with multiple entries not currently supported. Default = null.

        :param local_port: The local_port of this PacketCaptureFilter.
        :type local_port: str
        """

        self._local_port = local_port

    @property
    def protocol(self):
        """Gets the protocol of this PacketCaptureFilter.

        Protocol to be filtered on.

        :return: The protocol of this PacketCaptureFilter.
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this PacketCaptureFilter.

        Protocol to be filtered on.

        :param protocol: The protocol of this PacketCaptureFilter.
        :type protocol: str
        """
        allowed_values = ["TCP", "UDP", "Any"]  # noqa: E501
        if protocol not in allowed_values:
            raise ValueError(
                "Invalid value for `protocol` ({0}), must be one of {1}"
                .format(protocol, allowed_values)
            )

        self._protocol = protocol

    @property
    def remote_ip_address(self):
        """Gets the remote_ip_address of this PacketCaptureFilter.

        Local IP Address to be filtered on. Notation: \"127.0.0.1\" for single address entry. \"127.0.0.1-127.0.0.255\" for range. \"127.0.0.1;127.0.0.5;\" for multiple entries. Multiple ranges not currently supported. Mixing ranges with multiple entries not currently supported. Default = null.

        :return: The remote_ip_address of this PacketCaptureFilter.
        :rtype: str
        """
        return self._remote_ip_address

    @remote_ip_address.setter
    def remote_ip_address(self, remote_ip_address):
        """Sets the remote_ip_address of this PacketCaptureFilter.

        Local IP Address to be filtered on. Notation: \"127.0.0.1\" for single address entry. \"127.0.0.1-127.0.0.255\" for range. \"127.0.0.1;127.0.0.5;\" for multiple entries. Multiple ranges not currently supported. Mixing ranges with multiple entries not currently supported. Default = null.

        :param remote_ip_address: The remote_ip_address of this PacketCaptureFilter.
        :type remote_ip_address: str
        """

        self._remote_ip_address = remote_ip_address

    @property
    def remote_port(self):
        """Gets the remote_port of this PacketCaptureFilter.

        Remote port to be filtered on. Notation: \"80\" for single port entry.\"80-85\" for range. \"80;443;\" for multiple entries. Multiple ranges not currently supported. Mixing ranges with multiple entries not currently supported. Default = null.

        :return: The remote_port of this PacketCaptureFilter.
        :rtype: str
        """
        return self._remote_port

    @remote_port.setter
    def remote_port(self, remote_port):
        """Sets the remote_port of this PacketCaptureFilter.

        Remote port to be filtered on. Notation: \"80\" for single port entry.\"80-85\" for range. \"80;443;\" for multiple entries. Multiple ranges not currently supported. Mixing ranges with multiple entries not currently supported. Default = null.

        :param remote_port: The remote_port of this PacketCaptureFilter.
        :type remote_port: str
        """

        self._remote_port = remote_port
