/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2018-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITopologyParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITopologyParameters::OAITopologyParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITopologyParameters::OAITopologyParameters() {
    this->initializeModel();
}

OAITopologyParameters::~OAITopologyParameters() {}

void OAITopologyParameters::initializeModel() {

    m_target_resource_group_name_isSet = false;
    m_target_resource_group_name_isValid = false;

    m_target_subnet_isSet = false;
    m_target_subnet_isValid = false;

    m_target_virtual_network_isSet = false;
    m_target_virtual_network_isValid = false;
}

void OAITopologyParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITopologyParameters::fromJsonObject(QJsonObject json) {

    m_target_resource_group_name_isValid = ::OpenAPI::fromJsonValue(m_target_resource_group_name, json[QString("targetResourceGroupName")]);
    m_target_resource_group_name_isSet = !json[QString("targetResourceGroupName")].isNull() && m_target_resource_group_name_isValid;

    m_target_subnet_isValid = ::OpenAPI::fromJsonValue(m_target_subnet, json[QString("targetSubnet")]);
    m_target_subnet_isSet = !json[QString("targetSubnet")].isNull() && m_target_subnet_isValid;

    m_target_virtual_network_isValid = ::OpenAPI::fromJsonValue(m_target_virtual_network, json[QString("targetVirtualNetwork")]);
    m_target_virtual_network_isSet = !json[QString("targetVirtualNetwork")].isNull() && m_target_virtual_network_isValid;
}

QString OAITopologyParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITopologyParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_target_resource_group_name_isSet) {
        obj.insert(QString("targetResourceGroupName"), ::OpenAPI::toJsonValue(m_target_resource_group_name));
    }
    if (m_target_subnet.isSet()) {
        obj.insert(QString("targetSubnet"), ::OpenAPI::toJsonValue(m_target_subnet));
    }
    if (m_target_virtual_network.isSet()) {
        obj.insert(QString("targetVirtualNetwork"), ::OpenAPI::toJsonValue(m_target_virtual_network));
    }
    return obj;
}

QString OAITopologyParameters::getTargetResourceGroupName() const {
    return m_target_resource_group_name;
}
void OAITopologyParameters::setTargetResourceGroupName(const QString &target_resource_group_name) {
    m_target_resource_group_name = target_resource_group_name;
    m_target_resource_group_name_isSet = true;
}

bool OAITopologyParameters::is_target_resource_group_name_Set() const{
    return m_target_resource_group_name_isSet;
}

bool OAITopologyParameters::is_target_resource_group_name_Valid() const{
    return m_target_resource_group_name_isValid;
}

OAITopologyParameters_targetSubnet OAITopologyParameters::getTargetSubnet() const {
    return m_target_subnet;
}
void OAITopologyParameters::setTargetSubnet(const OAITopologyParameters_targetSubnet &target_subnet) {
    m_target_subnet = target_subnet;
    m_target_subnet_isSet = true;
}

bool OAITopologyParameters::is_target_subnet_Set() const{
    return m_target_subnet_isSet;
}

bool OAITopologyParameters::is_target_subnet_Valid() const{
    return m_target_subnet_isValid;
}

OAITopologyParameters_targetSubnet OAITopologyParameters::getTargetVirtualNetwork() const {
    return m_target_virtual_network;
}
void OAITopologyParameters::setTargetVirtualNetwork(const OAITopologyParameters_targetSubnet &target_virtual_network) {
    m_target_virtual_network = target_virtual_network;
    m_target_virtual_network_isSet = true;
}

bool OAITopologyParameters::is_target_virtual_network_Set() const{
    return m_target_virtual_network_isSet;
}

bool OAITopologyParameters::is_target_virtual_network_Valid() const{
    return m_target_virtual_network_isValid;
}

bool OAITopologyParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_target_resource_group_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_subnet.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_virtual_network.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITopologyParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
