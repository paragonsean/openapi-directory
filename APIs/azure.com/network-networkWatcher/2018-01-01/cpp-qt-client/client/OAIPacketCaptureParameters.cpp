/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2018-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPacketCaptureParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPacketCaptureParameters::OAIPacketCaptureParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPacketCaptureParameters::OAIPacketCaptureParameters() {
    this->initializeModel();
}

OAIPacketCaptureParameters::~OAIPacketCaptureParameters() {}

void OAIPacketCaptureParameters::initializeModel() {

    m_bytes_to_capture_per_packet_isSet = false;
    m_bytes_to_capture_per_packet_isValid = false;

    m_filters_isSet = false;
    m_filters_isValid = false;

    m_storage_location_isSet = false;
    m_storage_location_isValid = false;

    m_target_isSet = false;
    m_target_isValid = false;

    m_time_limit_in_seconds_isSet = false;
    m_time_limit_in_seconds_isValid = false;

    m_total_bytes_per_session_isSet = false;
    m_total_bytes_per_session_isValid = false;
}

void OAIPacketCaptureParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPacketCaptureParameters::fromJsonObject(QJsonObject json) {

    m_bytes_to_capture_per_packet_isValid = ::OpenAPI::fromJsonValue(m_bytes_to_capture_per_packet, json[QString("bytesToCapturePerPacket")]);
    m_bytes_to_capture_per_packet_isSet = !json[QString("bytesToCapturePerPacket")].isNull() && m_bytes_to_capture_per_packet_isValid;

    m_filters_isValid = ::OpenAPI::fromJsonValue(m_filters, json[QString("filters")]);
    m_filters_isSet = !json[QString("filters")].isNull() && m_filters_isValid;

    m_storage_location_isValid = ::OpenAPI::fromJsonValue(m_storage_location, json[QString("storageLocation")]);
    m_storage_location_isSet = !json[QString("storageLocation")].isNull() && m_storage_location_isValid;

    m_target_isValid = ::OpenAPI::fromJsonValue(m_target, json[QString("target")]);
    m_target_isSet = !json[QString("target")].isNull() && m_target_isValid;

    m_time_limit_in_seconds_isValid = ::OpenAPI::fromJsonValue(m_time_limit_in_seconds, json[QString("timeLimitInSeconds")]);
    m_time_limit_in_seconds_isSet = !json[QString("timeLimitInSeconds")].isNull() && m_time_limit_in_seconds_isValid;

    m_total_bytes_per_session_isValid = ::OpenAPI::fromJsonValue(m_total_bytes_per_session, json[QString("totalBytesPerSession")]);
    m_total_bytes_per_session_isSet = !json[QString("totalBytesPerSession")].isNull() && m_total_bytes_per_session_isValid;
}

QString OAIPacketCaptureParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPacketCaptureParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_bytes_to_capture_per_packet_isSet) {
        obj.insert(QString("bytesToCapturePerPacket"), ::OpenAPI::toJsonValue(m_bytes_to_capture_per_packet));
    }
    if (m_filters.size() > 0) {
        obj.insert(QString("filters"), ::OpenAPI::toJsonValue(m_filters));
    }
    if (m_storage_location.isSet()) {
        obj.insert(QString("storageLocation"), ::OpenAPI::toJsonValue(m_storage_location));
    }
    if (m_target_isSet) {
        obj.insert(QString("target"), ::OpenAPI::toJsonValue(m_target));
    }
    if (m_time_limit_in_seconds_isSet) {
        obj.insert(QString("timeLimitInSeconds"), ::OpenAPI::toJsonValue(m_time_limit_in_seconds));
    }
    if (m_total_bytes_per_session_isSet) {
        obj.insert(QString("totalBytesPerSession"), ::OpenAPI::toJsonValue(m_total_bytes_per_session));
    }
    return obj;
}

qint32 OAIPacketCaptureParameters::getBytesToCapturePerPacket() const {
    return m_bytes_to_capture_per_packet;
}
void OAIPacketCaptureParameters::setBytesToCapturePerPacket(const qint32 &bytes_to_capture_per_packet) {
    m_bytes_to_capture_per_packet = bytes_to_capture_per_packet;
    m_bytes_to_capture_per_packet_isSet = true;
}

bool OAIPacketCaptureParameters::is_bytes_to_capture_per_packet_Set() const{
    return m_bytes_to_capture_per_packet_isSet;
}

bool OAIPacketCaptureParameters::is_bytes_to_capture_per_packet_Valid() const{
    return m_bytes_to_capture_per_packet_isValid;
}

QList<OAIPacketCaptureFilter> OAIPacketCaptureParameters::getFilters() const {
    return m_filters;
}
void OAIPacketCaptureParameters::setFilters(const QList<OAIPacketCaptureFilter> &filters) {
    m_filters = filters;
    m_filters_isSet = true;
}

bool OAIPacketCaptureParameters::is_filters_Set() const{
    return m_filters_isSet;
}

bool OAIPacketCaptureParameters::is_filters_Valid() const{
    return m_filters_isValid;
}

OAIPacketCaptureStorageLocation OAIPacketCaptureParameters::getStorageLocation() const {
    return m_storage_location;
}
void OAIPacketCaptureParameters::setStorageLocation(const OAIPacketCaptureStorageLocation &storage_location) {
    m_storage_location = storage_location;
    m_storage_location_isSet = true;
}

bool OAIPacketCaptureParameters::is_storage_location_Set() const{
    return m_storage_location_isSet;
}

bool OAIPacketCaptureParameters::is_storage_location_Valid() const{
    return m_storage_location_isValid;
}

QString OAIPacketCaptureParameters::getTarget() const {
    return m_target;
}
void OAIPacketCaptureParameters::setTarget(const QString &target) {
    m_target = target;
    m_target_isSet = true;
}

bool OAIPacketCaptureParameters::is_target_Set() const{
    return m_target_isSet;
}

bool OAIPacketCaptureParameters::is_target_Valid() const{
    return m_target_isValid;
}

qint32 OAIPacketCaptureParameters::getTimeLimitInSeconds() const {
    return m_time_limit_in_seconds;
}
void OAIPacketCaptureParameters::setTimeLimitInSeconds(const qint32 &time_limit_in_seconds) {
    m_time_limit_in_seconds = time_limit_in_seconds;
    m_time_limit_in_seconds_isSet = true;
}

bool OAIPacketCaptureParameters::is_time_limit_in_seconds_Set() const{
    return m_time_limit_in_seconds_isSet;
}

bool OAIPacketCaptureParameters::is_time_limit_in_seconds_Valid() const{
    return m_time_limit_in_seconds_isValid;
}

qint32 OAIPacketCaptureParameters::getTotalBytesPerSession() const {
    return m_total_bytes_per_session;
}
void OAIPacketCaptureParameters::setTotalBytesPerSession(const qint32 &total_bytes_per_session) {
    m_total_bytes_per_session = total_bytes_per_session;
    m_total_bytes_per_session_isSet = true;
}

bool OAIPacketCaptureParameters::is_total_bytes_per_session_Set() const{
    return m_total_bytes_per_session_isSet;
}

bool OAIPacketCaptureParameters::is_total_bytes_per_session_Valid() const{
    return m_total_bytes_per_session_isValid;
}

bool OAIPacketCaptureParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bytes_to_capture_per_packet_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_limit_in_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_bytes_per_session_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPacketCaptureParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_storage_location_isValid && m_target_isValid && true;
}

} // namespace OpenAPI
