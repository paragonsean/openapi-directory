/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2018-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAvailableProvidersListCountry.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAvailableProvidersListCountry::OAIAvailableProvidersListCountry(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAvailableProvidersListCountry::OAIAvailableProvidersListCountry() {
    this->initializeModel();
}

OAIAvailableProvidersListCountry::~OAIAvailableProvidersListCountry() {}

void OAIAvailableProvidersListCountry::initializeModel() {

    m_country_name_isSet = false;
    m_country_name_isValid = false;

    m_providers_isSet = false;
    m_providers_isValid = false;

    m_states_isSet = false;
    m_states_isValid = false;
}

void OAIAvailableProvidersListCountry::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAvailableProvidersListCountry::fromJsonObject(QJsonObject json) {

    m_country_name_isValid = ::OpenAPI::fromJsonValue(m_country_name, json[QString("countryName")]);
    m_country_name_isSet = !json[QString("countryName")].isNull() && m_country_name_isValid;

    m_providers_isValid = ::OpenAPI::fromJsonValue(m_providers, json[QString("providers")]);
    m_providers_isSet = !json[QString("providers")].isNull() && m_providers_isValid;

    m_states_isValid = ::OpenAPI::fromJsonValue(m_states, json[QString("states")]);
    m_states_isSet = !json[QString("states")].isNull() && m_states_isValid;
}

QString OAIAvailableProvidersListCountry::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAvailableProvidersListCountry::asJsonObject() const {
    QJsonObject obj;
    if (m_country_name_isSet) {
        obj.insert(QString("countryName"), ::OpenAPI::toJsonValue(m_country_name));
    }
    if (m_providers.size() > 0) {
        obj.insert(QString("providers"), ::OpenAPI::toJsonValue(m_providers));
    }
    if (m_states.size() > 0) {
        obj.insert(QString("states"), ::OpenAPI::toJsonValue(m_states));
    }
    return obj;
}

QString OAIAvailableProvidersListCountry::getCountryName() const {
    return m_country_name;
}
void OAIAvailableProvidersListCountry::setCountryName(const QString &country_name) {
    m_country_name = country_name;
    m_country_name_isSet = true;
}

bool OAIAvailableProvidersListCountry::is_country_name_Set() const{
    return m_country_name_isSet;
}

bool OAIAvailableProvidersListCountry::is_country_name_Valid() const{
    return m_country_name_isValid;
}

QList<QString> OAIAvailableProvidersListCountry::getProviders() const {
    return m_providers;
}
void OAIAvailableProvidersListCountry::setProviders(const QList<QString> &providers) {
    m_providers = providers;
    m_providers_isSet = true;
}

bool OAIAvailableProvidersListCountry::is_providers_Set() const{
    return m_providers_isSet;
}

bool OAIAvailableProvidersListCountry::is_providers_Valid() const{
    return m_providers_isValid;
}

QList<OAIAvailableProvidersListState> OAIAvailableProvidersListCountry::getStates() const {
    return m_states;
}
void OAIAvailableProvidersListCountry::setStates(const QList<OAIAvailableProvidersListState> &states) {
    m_states = states;
    m_states_isSet = true;
}

bool OAIAvailableProvidersListCountry::is_states_Set() const{
    return m_states_isSet;
}

bool OAIAvailableProvidersListCountry::is_states_Valid() const{
    return m_states_isValid;
}

bool OAIAvailableProvidersListCountry::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_country_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_providers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_states.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAvailableProvidersListCountry::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
