/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2018-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPacketCaptureResultProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPacketCaptureResultProperties::OAIPacketCaptureResultProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPacketCaptureResultProperties::OAIPacketCaptureResultProperties() {
    this->initializeModel();
}

OAIPacketCaptureResultProperties::~OAIPacketCaptureResultProperties() {}

void OAIPacketCaptureResultProperties::initializeModel() {

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_bytes_to_capture_per_packet_isSet = false;
    m_bytes_to_capture_per_packet_isValid = false;

    m_filters_isSet = false;
    m_filters_isValid = false;

    m_storage_location_isSet = false;
    m_storage_location_isValid = false;

    m_target_isSet = false;
    m_target_isValid = false;

    m_time_limit_in_seconds_isSet = false;
    m_time_limit_in_seconds_isValid = false;

    m_total_bytes_per_session_isSet = false;
    m_total_bytes_per_session_isValid = false;
}

void OAIPacketCaptureResultProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPacketCaptureResultProperties::fromJsonObject(QJsonObject json) {

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_bytes_to_capture_per_packet_isValid = ::OpenAPI::fromJsonValue(m_bytes_to_capture_per_packet, json[QString("bytesToCapturePerPacket")]);
    m_bytes_to_capture_per_packet_isSet = !json[QString("bytesToCapturePerPacket")].isNull() && m_bytes_to_capture_per_packet_isValid;

    m_filters_isValid = ::OpenAPI::fromJsonValue(m_filters, json[QString("filters")]);
    m_filters_isSet = !json[QString("filters")].isNull() && m_filters_isValid;

    m_storage_location_isValid = ::OpenAPI::fromJsonValue(m_storage_location, json[QString("storageLocation")]);
    m_storage_location_isSet = !json[QString("storageLocation")].isNull() && m_storage_location_isValid;

    m_target_isValid = ::OpenAPI::fromJsonValue(m_target, json[QString("target")]);
    m_target_isSet = !json[QString("target")].isNull() && m_target_isValid;

    m_time_limit_in_seconds_isValid = ::OpenAPI::fromJsonValue(m_time_limit_in_seconds, json[QString("timeLimitInSeconds")]);
    m_time_limit_in_seconds_isSet = !json[QString("timeLimitInSeconds")].isNull() && m_time_limit_in_seconds_isValid;

    m_total_bytes_per_session_isValid = ::OpenAPI::fromJsonValue(m_total_bytes_per_session, json[QString("totalBytesPerSession")]);
    m_total_bytes_per_session_isSet = !json[QString("totalBytesPerSession")].isNull() && m_total_bytes_per_session_isValid;
}

QString OAIPacketCaptureResultProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPacketCaptureResultProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_bytes_to_capture_per_packet_isSet) {
        obj.insert(QString("bytesToCapturePerPacket"), ::OpenAPI::toJsonValue(m_bytes_to_capture_per_packet));
    }
    if (m_filters.size() > 0) {
        obj.insert(QString("filters"), ::OpenAPI::toJsonValue(m_filters));
    }
    if (m_storage_location.isSet()) {
        obj.insert(QString("storageLocation"), ::OpenAPI::toJsonValue(m_storage_location));
    }
    if (m_target_isSet) {
        obj.insert(QString("target"), ::OpenAPI::toJsonValue(m_target));
    }
    if (m_time_limit_in_seconds_isSet) {
        obj.insert(QString("timeLimitInSeconds"), ::OpenAPI::toJsonValue(m_time_limit_in_seconds));
    }
    if (m_total_bytes_per_session_isSet) {
        obj.insert(QString("totalBytesPerSession"), ::OpenAPI::toJsonValue(m_total_bytes_per_session));
    }
    return obj;
}

QString OAIPacketCaptureResultProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIPacketCaptureResultProperties::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIPacketCaptureResultProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIPacketCaptureResultProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

qint32 OAIPacketCaptureResultProperties::getBytesToCapturePerPacket() const {
    return m_bytes_to_capture_per_packet;
}
void OAIPacketCaptureResultProperties::setBytesToCapturePerPacket(const qint32 &bytes_to_capture_per_packet) {
    m_bytes_to_capture_per_packet = bytes_to_capture_per_packet;
    m_bytes_to_capture_per_packet_isSet = true;
}

bool OAIPacketCaptureResultProperties::is_bytes_to_capture_per_packet_Set() const{
    return m_bytes_to_capture_per_packet_isSet;
}

bool OAIPacketCaptureResultProperties::is_bytes_to_capture_per_packet_Valid() const{
    return m_bytes_to_capture_per_packet_isValid;
}

QList<OAIPacketCaptureFilter> OAIPacketCaptureResultProperties::getFilters() const {
    return m_filters;
}
void OAIPacketCaptureResultProperties::setFilters(const QList<OAIPacketCaptureFilter> &filters) {
    m_filters = filters;
    m_filters_isSet = true;
}

bool OAIPacketCaptureResultProperties::is_filters_Set() const{
    return m_filters_isSet;
}

bool OAIPacketCaptureResultProperties::is_filters_Valid() const{
    return m_filters_isValid;
}

OAIPacketCaptureStorageLocation OAIPacketCaptureResultProperties::getStorageLocation() const {
    return m_storage_location;
}
void OAIPacketCaptureResultProperties::setStorageLocation(const OAIPacketCaptureStorageLocation &storage_location) {
    m_storage_location = storage_location;
    m_storage_location_isSet = true;
}

bool OAIPacketCaptureResultProperties::is_storage_location_Set() const{
    return m_storage_location_isSet;
}

bool OAIPacketCaptureResultProperties::is_storage_location_Valid() const{
    return m_storage_location_isValid;
}

QString OAIPacketCaptureResultProperties::getTarget() const {
    return m_target;
}
void OAIPacketCaptureResultProperties::setTarget(const QString &target) {
    m_target = target;
    m_target_isSet = true;
}

bool OAIPacketCaptureResultProperties::is_target_Set() const{
    return m_target_isSet;
}

bool OAIPacketCaptureResultProperties::is_target_Valid() const{
    return m_target_isValid;
}

qint32 OAIPacketCaptureResultProperties::getTimeLimitInSeconds() const {
    return m_time_limit_in_seconds;
}
void OAIPacketCaptureResultProperties::setTimeLimitInSeconds(const qint32 &time_limit_in_seconds) {
    m_time_limit_in_seconds = time_limit_in_seconds;
    m_time_limit_in_seconds_isSet = true;
}

bool OAIPacketCaptureResultProperties::is_time_limit_in_seconds_Set() const{
    return m_time_limit_in_seconds_isSet;
}

bool OAIPacketCaptureResultProperties::is_time_limit_in_seconds_Valid() const{
    return m_time_limit_in_seconds_isValid;
}

qint32 OAIPacketCaptureResultProperties::getTotalBytesPerSession() const {
    return m_total_bytes_per_session;
}
void OAIPacketCaptureResultProperties::setTotalBytesPerSession(const qint32 &total_bytes_per_session) {
    m_total_bytes_per_session = total_bytes_per_session;
    m_total_bytes_per_session_isSet = true;
}

bool OAIPacketCaptureResultProperties::is_total_bytes_per_session_Set() const{
    return m_total_bytes_per_session_isSet;
}

bool OAIPacketCaptureResultProperties::is_total_bytes_per_session_Valid() const{
    return m_total_bytes_per_session_isValid;
}

bool OAIPacketCaptureResultProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bytes_to_capture_per_packet_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_limit_in_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_bytes_per_session_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPacketCaptureResultProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_storage_location_isValid && m_target_isValid && true;
}

} // namespace OpenAPI
