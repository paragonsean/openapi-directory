/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2018-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The VerificationIPFlowParameters model module.
 * @module model/VerificationIPFlowParameters
 * @version 2018-01-01
 */
class VerificationIPFlowParameters {
    /**
     * Constructs a new <code>VerificationIPFlowParameters</code>.
     * Parameters that define the IP flow to be verified.
     * @alias module:model/VerificationIPFlowParameters
     * @param direction {module:model/VerificationIPFlowParameters.DirectionEnum} The direction of the packet represented as a 5-tuple.
     * @param localIPAddress {String} The local IP address. Acceptable values are valid IPv4 addresses.
     * @param localPort {String} The local port. Acceptable values are a single integer in the range (0-65535). Support for * for the source port, which depends on the direction.
     * @param protocol {module:model/VerificationIPFlowParameters.ProtocolEnum} Protocol to be verified on.
     * @param remoteIPAddress {String} The remote IP address. Acceptable values are valid IPv4 addresses.
     * @param remotePort {String} The remote port. Acceptable values are a single integer in the range (0-65535). Support for * for the source port, which depends on the direction.
     * @param targetResourceId {String} The ID of the target resource to perform next-hop on.
     */
    constructor(direction, localIPAddress, localPort, protocol, remoteIPAddress, remotePort, targetResourceId) { 
        
        VerificationIPFlowParameters.initialize(this, direction, localIPAddress, localPort, protocol, remoteIPAddress, remotePort, targetResourceId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, direction, localIPAddress, localPort, protocol, remoteIPAddress, remotePort, targetResourceId) { 
        obj['direction'] = direction;
        obj['localIPAddress'] = localIPAddress;
        obj['localPort'] = localPort;
        obj['protocol'] = protocol;
        obj['remoteIPAddress'] = remoteIPAddress;
        obj['remotePort'] = remotePort;
        obj['targetResourceId'] = targetResourceId;
    }

    /**
     * Constructs a <code>VerificationIPFlowParameters</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VerificationIPFlowParameters} obj Optional instance to populate.
     * @return {module:model/VerificationIPFlowParameters} The populated <code>VerificationIPFlowParameters</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VerificationIPFlowParameters();

            if (data.hasOwnProperty('direction')) {
                obj['direction'] = ApiClient.convertToType(data['direction'], 'String');
            }
            if (data.hasOwnProperty('localIPAddress')) {
                obj['localIPAddress'] = ApiClient.convertToType(data['localIPAddress'], 'String');
            }
            if (data.hasOwnProperty('localPort')) {
                obj['localPort'] = ApiClient.convertToType(data['localPort'], 'String');
            }
            if (data.hasOwnProperty('protocol')) {
                obj['protocol'] = ApiClient.convertToType(data['protocol'], 'String');
            }
            if (data.hasOwnProperty('remoteIPAddress')) {
                obj['remoteIPAddress'] = ApiClient.convertToType(data['remoteIPAddress'], 'String');
            }
            if (data.hasOwnProperty('remotePort')) {
                obj['remotePort'] = ApiClient.convertToType(data['remotePort'], 'String');
            }
            if (data.hasOwnProperty('targetNicResourceId')) {
                obj['targetNicResourceId'] = ApiClient.convertToType(data['targetNicResourceId'], 'String');
            }
            if (data.hasOwnProperty('targetResourceId')) {
                obj['targetResourceId'] = ApiClient.convertToType(data['targetResourceId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VerificationIPFlowParameters</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VerificationIPFlowParameters</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of VerificationIPFlowParameters.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['direction'] && !(typeof data['direction'] === 'string' || data['direction'] instanceof String)) {
            throw new Error("Expected the field `direction` to be a primitive type in the JSON string but got " + data['direction']);
        }
        // ensure the json data is a string
        if (data['localIPAddress'] && !(typeof data['localIPAddress'] === 'string' || data['localIPAddress'] instanceof String)) {
            throw new Error("Expected the field `localIPAddress` to be a primitive type in the JSON string but got " + data['localIPAddress']);
        }
        // ensure the json data is a string
        if (data['localPort'] && !(typeof data['localPort'] === 'string' || data['localPort'] instanceof String)) {
            throw new Error("Expected the field `localPort` to be a primitive type in the JSON string but got " + data['localPort']);
        }
        // ensure the json data is a string
        if (data['protocol'] && !(typeof data['protocol'] === 'string' || data['protocol'] instanceof String)) {
            throw new Error("Expected the field `protocol` to be a primitive type in the JSON string but got " + data['protocol']);
        }
        // ensure the json data is a string
        if (data['remoteIPAddress'] && !(typeof data['remoteIPAddress'] === 'string' || data['remoteIPAddress'] instanceof String)) {
            throw new Error("Expected the field `remoteIPAddress` to be a primitive type in the JSON string but got " + data['remoteIPAddress']);
        }
        // ensure the json data is a string
        if (data['remotePort'] && !(typeof data['remotePort'] === 'string' || data['remotePort'] instanceof String)) {
            throw new Error("Expected the field `remotePort` to be a primitive type in the JSON string but got " + data['remotePort']);
        }
        // ensure the json data is a string
        if (data['targetNicResourceId'] && !(typeof data['targetNicResourceId'] === 'string' || data['targetNicResourceId'] instanceof String)) {
            throw new Error("Expected the field `targetNicResourceId` to be a primitive type in the JSON string but got " + data['targetNicResourceId']);
        }
        // ensure the json data is a string
        if (data['targetResourceId'] && !(typeof data['targetResourceId'] === 'string' || data['targetResourceId'] instanceof String)) {
            throw new Error("Expected the field `targetResourceId` to be a primitive type in the JSON string but got " + data['targetResourceId']);
        }

        return true;
    }


}

VerificationIPFlowParameters.RequiredProperties = ["direction", "localIPAddress", "localPort", "protocol", "remoteIPAddress", "remotePort", "targetResourceId"];

/**
 * The direction of the packet represented as a 5-tuple.
 * @member {module:model/VerificationIPFlowParameters.DirectionEnum} direction
 */
VerificationIPFlowParameters.prototype['direction'] = undefined;

/**
 * The local IP address. Acceptable values are valid IPv4 addresses.
 * @member {String} localIPAddress
 */
VerificationIPFlowParameters.prototype['localIPAddress'] = undefined;

/**
 * The local port. Acceptable values are a single integer in the range (0-65535). Support for * for the source port, which depends on the direction.
 * @member {String} localPort
 */
VerificationIPFlowParameters.prototype['localPort'] = undefined;

/**
 * Protocol to be verified on.
 * @member {module:model/VerificationIPFlowParameters.ProtocolEnum} protocol
 */
VerificationIPFlowParameters.prototype['protocol'] = undefined;

/**
 * The remote IP address. Acceptable values are valid IPv4 addresses.
 * @member {String} remoteIPAddress
 */
VerificationIPFlowParameters.prototype['remoteIPAddress'] = undefined;

/**
 * The remote port. Acceptable values are a single integer in the range (0-65535). Support for * for the source port, which depends on the direction.
 * @member {String} remotePort
 */
VerificationIPFlowParameters.prototype['remotePort'] = undefined;

/**
 * The NIC ID. (If VM has multiple NICs and IP forwarding is enabled on any of them, then this parameter must be specified. Otherwise optional).
 * @member {String} targetNicResourceId
 */
VerificationIPFlowParameters.prototype['targetNicResourceId'] = undefined;

/**
 * The ID of the target resource to perform next-hop on.
 * @member {String} targetResourceId
 */
VerificationIPFlowParameters.prototype['targetResourceId'] = undefined;





/**
 * Allowed values for the <code>direction</code> property.
 * @enum {String}
 * @readonly
 */
VerificationIPFlowParameters['DirectionEnum'] = {

    /**
     * value: "Inbound"
     * @const
     */
    "Inbound": "Inbound",

    /**
     * value: "Outbound"
     * @const
     */
    "Outbound": "Outbound"
};


/**
 * Allowed values for the <code>protocol</code> property.
 * @enum {String}
 * @readonly
 */
VerificationIPFlowParameters['ProtocolEnum'] = {

    /**
     * value: "TCP"
     * @const
     */
    "TCP": "TCP",

    /**
     * value: "UDP"
     * @const
     */
    "UDP": "UDP"
};



export default VerificationIPFlowParameters;

