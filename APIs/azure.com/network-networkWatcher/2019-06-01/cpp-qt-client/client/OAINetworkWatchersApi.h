/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAINetworkWatchersApi_H
#define OAI_OAINetworkWatchersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAvailableProvidersList.h"
#include "OAIAvailableProvidersListParameters.h"
#include "OAIAzureReachabilityReport.h"
#include "OAIAzureReachabilityReportParameters.h"
#include "OAIConnectivityInformation.h"
#include "OAIConnectivityParameters.h"
#include "OAIErrorResponse.h"
#include "OAIFlowLogInformation.h"
#include "OAIFlowLogStatusParameters.h"
#include "OAINetworkConfigurationDiagnosticParameters.h"
#include "OAINetworkConfigurationDiagnosticResponse.h"
#include "OAINetworkWatcher.h"
#include "OAINetworkWatcherListResult.h"
#include "OAINetworkWatchers_UpdateTags_request.h"
#include "OAINextHopParameters.h"
#include "OAINextHopResult.h"
#include "OAIQueryTroubleshootingParameters.h"
#include "OAISecurityGroupViewParameters.h"
#include "OAISecurityGroupViewResult.h"
#include "OAITopology.h"
#include "OAITopologyParameters.h"
#include "OAITroubleshootingParameters.h"
#include "OAITroubleshootingResult.h"
#include "OAIVerificationIPFlowParameters.h"
#include "OAIVerificationIPFlowResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAINetworkWatchersApi : public QObject {
    Q_OBJECT

public:
    OAINetworkWatchersApi(const int timeOut = 0);
    ~OAINetworkWatchersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  network_watcher_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIConnectivityParameters [required]
    */
    virtual void networkWatchersCheckConnectivity(const QString &resource_group_name, const QString &network_watcher_name, const QString &api_version, const QString &subscription_id, const OAIConnectivityParameters &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  network_watcher_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAINetworkWatcher [required]
    */
    virtual void networkWatchersCreateOrUpdate(const QString &resource_group_name, const QString &network_watcher_name, const QString &api_version, const QString &subscription_id, const OAINetworkWatcher &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  network_watcher_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void networkWatchersDelete(const QString &resource_group_name, const QString &network_watcher_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  network_watcher_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void networkWatchersGet(const QString &resource_group_name, const QString &network_watcher_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  network_watcher_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIAzureReachabilityReportParameters [required]
    */
    virtual void networkWatchersGetAzureReachabilityReport(const QString &resource_group_name, const QString &network_watcher_name, const QString &api_version, const QString &subscription_id, const OAIAzureReachabilityReportParameters &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  network_watcher_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIFlowLogStatusParameters [required]
    */
    virtual void networkWatchersGetFlowLogStatus(const QString &resource_group_name, const QString &network_watcher_name, const QString &api_version, const QString &subscription_id, const OAIFlowLogStatusParameters &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  network_watcher_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAINetworkConfigurationDiagnosticParameters [required]
    */
    virtual void networkWatchersGetNetworkConfigurationDiagnostic(const QString &resource_group_name, const QString &network_watcher_name, const QString &api_version, const QString &subscription_id, const OAINetworkConfigurationDiagnosticParameters &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  network_watcher_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAINextHopParameters [required]
    */
    virtual void networkWatchersGetNextHop(const QString &resource_group_name, const QString &network_watcher_name, const QString &api_version, const QString &subscription_id, const OAINextHopParameters &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  network_watcher_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAITopologyParameters [required]
    */
    virtual void networkWatchersGetTopology(const QString &resource_group_name, const QString &network_watcher_name, const QString &api_version, const QString &subscription_id, const OAITopologyParameters &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  network_watcher_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAITroubleshootingParameters [required]
    */
    virtual void networkWatchersGetTroubleshooting(const QString &resource_group_name, const QString &network_watcher_name, const QString &api_version, const QString &subscription_id, const OAITroubleshootingParameters &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  network_watcher_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIQueryTroubleshootingParameters [required]
    */
    virtual void networkWatchersGetTroubleshootingResult(const QString &resource_group_name, const QString &network_watcher_name, const QString &api_version, const QString &subscription_id, const OAIQueryTroubleshootingParameters &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  network_watcher_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAISecurityGroupViewParameters [required]
    */
    virtual void networkWatchersGetVMSecurityRules(const QString &resource_group_name, const QString &network_watcher_name, const QString &api_version, const QString &subscription_id, const OAISecurityGroupViewParameters &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void networkWatchersList(const QString &resource_group_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void networkWatchersListAll(const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  network_watcher_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIAvailableProvidersListParameters [required]
    */
    virtual void networkWatchersListAvailableProviders(const QString &resource_group_name, const QString &network_watcher_name, const QString &api_version, const QString &subscription_id, const OAIAvailableProvidersListParameters &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  network_watcher_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIFlowLogInformation [required]
    */
    virtual void networkWatchersSetFlowLogConfiguration(const QString &resource_group_name, const QString &network_watcher_name, const QString &api_version, const QString &subscription_id, const OAIFlowLogInformation &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  network_watcher_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAINetworkWatchers_UpdateTags_request [required]
    */
    virtual void networkWatchersUpdateTags(const QString &resource_group_name, const QString &network_watcher_name, const QString &api_version, const QString &subscription_id, const OAINetworkWatchers_UpdateTags_request &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  network_watcher_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIVerificationIPFlowParameters [required]
    */
    virtual void networkWatchersVerifyIPFlow(const QString &resource_group_name, const QString &network_watcher_name, const QString &api_version, const QString &subscription_id, const OAIVerificationIPFlowParameters &parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void networkWatchersCheckConnectivityCallback(OAIHttpRequestWorker *worker);
    void networkWatchersCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void networkWatchersDeleteCallback(OAIHttpRequestWorker *worker);
    void networkWatchersGetCallback(OAIHttpRequestWorker *worker);
    void networkWatchersGetAzureReachabilityReportCallback(OAIHttpRequestWorker *worker);
    void networkWatchersGetFlowLogStatusCallback(OAIHttpRequestWorker *worker);
    void networkWatchersGetNetworkConfigurationDiagnosticCallback(OAIHttpRequestWorker *worker);
    void networkWatchersGetNextHopCallback(OAIHttpRequestWorker *worker);
    void networkWatchersGetTopologyCallback(OAIHttpRequestWorker *worker);
    void networkWatchersGetTroubleshootingCallback(OAIHttpRequestWorker *worker);
    void networkWatchersGetTroubleshootingResultCallback(OAIHttpRequestWorker *worker);
    void networkWatchersGetVMSecurityRulesCallback(OAIHttpRequestWorker *worker);
    void networkWatchersListCallback(OAIHttpRequestWorker *worker);
    void networkWatchersListAllCallback(OAIHttpRequestWorker *worker);
    void networkWatchersListAvailableProvidersCallback(OAIHttpRequestWorker *worker);
    void networkWatchersSetFlowLogConfigurationCallback(OAIHttpRequestWorker *worker);
    void networkWatchersUpdateTagsCallback(OAIHttpRequestWorker *worker);
    void networkWatchersVerifyIPFlowCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void networkWatchersCheckConnectivitySignal(OAIConnectivityInformation summary);
    void networkWatchersCreateOrUpdateSignal(OAINetworkWatcher summary);
    void networkWatchersDeleteSignal();
    void networkWatchersGetSignal(OAINetworkWatcher summary);
    void networkWatchersGetAzureReachabilityReportSignal(OAIAzureReachabilityReport summary);
    void networkWatchersGetFlowLogStatusSignal(OAIFlowLogInformation summary);
    void networkWatchersGetNetworkConfigurationDiagnosticSignal(OAINetworkConfigurationDiagnosticResponse summary);
    void networkWatchersGetNextHopSignal(OAINextHopResult summary);
    void networkWatchersGetTopologySignal(OAITopology summary);
    void networkWatchersGetTroubleshootingSignal(OAITroubleshootingResult summary);
    void networkWatchersGetTroubleshootingResultSignal(OAITroubleshootingResult summary);
    void networkWatchersGetVMSecurityRulesSignal(OAISecurityGroupViewResult summary);
    void networkWatchersListSignal(OAINetworkWatcherListResult summary);
    void networkWatchersListAllSignal(OAINetworkWatcherListResult summary);
    void networkWatchersListAvailableProvidersSignal(OAIAvailableProvidersList summary);
    void networkWatchersSetFlowLogConfigurationSignal(OAIFlowLogInformation summary);
    void networkWatchersUpdateTagsSignal(OAINetworkWatcher summary);
    void networkWatchersVerifyIPFlowSignal(OAIVerificationIPFlowResult summary);


    void networkWatchersCheckConnectivitySignalFull(OAIHttpRequestWorker *worker, OAIConnectivityInformation summary);
    void networkWatchersCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAINetworkWatcher summary);
    void networkWatchersDeleteSignalFull(OAIHttpRequestWorker *worker);
    void networkWatchersGetSignalFull(OAIHttpRequestWorker *worker, OAINetworkWatcher summary);
    void networkWatchersGetAzureReachabilityReportSignalFull(OAIHttpRequestWorker *worker, OAIAzureReachabilityReport summary);
    void networkWatchersGetFlowLogStatusSignalFull(OAIHttpRequestWorker *worker, OAIFlowLogInformation summary);
    void networkWatchersGetNetworkConfigurationDiagnosticSignalFull(OAIHttpRequestWorker *worker, OAINetworkConfigurationDiagnosticResponse summary);
    void networkWatchersGetNextHopSignalFull(OAIHttpRequestWorker *worker, OAINextHopResult summary);
    void networkWatchersGetTopologySignalFull(OAIHttpRequestWorker *worker, OAITopology summary);
    void networkWatchersGetTroubleshootingSignalFull(OAIHttpRequestWorker *worker, OAITroubleshootingResult summary);
    void networkWatchersGetTroubleshootingResultSignalFull(OAIHttpRequestWorker *worker, OAITroubleshootingResult summary);
    void networkWatchersGetVMSecurityRulesSignalFull(OAIHttpRequestWorker *worker, OAISecurityGroupViewResult summary);
    void networkWatchersListSignalFull(OAIHttpRequestWorker *worker, OAINetworkWatcherListResult summary);
    void networkWatchersListAllSignalFull(OAIHttpRequestWorker *worker, OAINetworkWatcherListResult summary);
    void networkWatchersListAvailableProvidersSignalFull(OAIHttpRequestWorker *worker, OAIAvailableProvidersList summary);
    void networkWatchersSetFlowLogConfigurationSignalFull(OAIHttpRequestWorker *worker, OAIFlowLogInformation summary);
    void networkWatchersUpdateTagsSignalFull(OAIHttpRequestWorker *worker, OAINetworkWatcher summary);
    void networkWatchersVerifyIPFlowSignalFull(OAIHttpRequestWorker *worker, OAIVerificationIPFlowResult summary);

    Q_DECL_DEPRECATED_X("Use networkWatchersCheckConnectivitySignalError() instead")
    void networkWatchersCheckConnectivitySignalE(OAIConnectivityInformation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void networkWatchersCheckConnectivitySignalError(OAIConnectivityInformation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networkWatchersCreateOrUpdateSignalError() instead")
    void networkWatchersCreateOrUpdateSignalE(OAINetworkWatcher summary, QNetworkReply::NetworkError error_type, QString error_str);
    void networkWatchersCreateOrUpdateSignalError(OAINetworkWatcher summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networkWatchersDeleteSignalError() instead")
    void networkWatchersDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void networkWatchersDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networkWatchersGetSignalError() instead")
    void networkWatchersGetSignalE(OAINetworkWatcher summary, QNetworkReply::NetworkError error_type, QString error_str);
    void networkWatchersGetSignalError(OAINetworkWatcher summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networkWatchersGetAzureReachabilityReportSignalError() instead")
    void networkWatchersGetAzureReachabilityReportSignalE(OAIAzureReachabilityReport summary, QNetworkReply::NetworkError error_type, QString error_str);
    void networkWatchersGetAzureReachabilityReportSignalError(OAIAzureReachabilityReport summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networkWatchersGetFlowLogStatusSignalError() instead")
    void networkWatchersGetFlowLogStatusSignalE(OAIFlowLogInformation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void networkWatchersGetFlowLogStatusSignalError(OAIFlowLogInformation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networkWatchersGetNetworkConfigurationDiagnosticSignalError() instead")
    void networkWatchersGetNetworkConfigurationDiagnosticSignalE(OAINetworkConfigurationDiagnosticResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void networkWatchersGetNetworkConfigurationDiagnosticSignalError(OAINetworkConfigurationDiagnosticResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networkWatchersGetNextHopSignalError() instead")
    void networkWatchersGetNextHopSignalE(OAINextHopResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void networkWatchersGetNextHopSignalError(OAINextHopResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networkWatchersGetTopologySignalError() instead")
    void networkWatchersGetTopologySignalE(OAITopology summary, QNetworkReply::NetworkError error_type, QString error_str);
    void networkWatchersGetTopologySignalError(OAITopology summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networkWatchersGetTroubleshootingSignalError() instead")
    void networkWatchersGetTroubleshootingSignalE(OAITroubleshootingResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void networkWatchersGetTroubleshootingSignalError(OAITroubleshootingResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networkWatchersGetTroubleshootingResultSignalError() instead")
    void networkWatchersGetTroubleshootingResultSignalE(OAITroubleshootingResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void networkWatchersGetTroubleshootingResultSignalError(OAITroubleshootingResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networkWatchersGetVMSecurityRulesSignalError() instead")
    void networkWatchersGetVMSecurityRulesSignalE(OAISecurityGroupViewResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void networkWatchersGetVMSecurityRulesSignalError(OAISecurityGroupViewResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networkWatchersListSignalError() instead")
    void networkWatchersListSignalE(OAINetworkWatcherListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void networkWatchersListSignalError(OAINetworkWatcherListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networkWatchersListAllSignalError() instead")
    void networkWatchersListAllSignalE(OAINetworkWatcherListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void networkWatchersListAllSignalError(OAINetworkWatcherListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networkWatchersListAvailableProvidersSignalError() instead")
    void networkWatchersListAvailableProvidersSignalE(OAIAvailableProvidersList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void networkWatchersListAvailableProvidersSignalError(OAIAvailableProvidersList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networkWatchersSetFlowLogConfigurationSignalError() instead")
    void networkWatchersSetFlowLogConfigurationSignalE(OAIFlowLogInformation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void networkWatchersSetFlowLogConfigurationSignalError(OAIFlowLogInformation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networkWatchersUpdateTagsSignalError() instead")
    void networkWatchersUpdateTagsSignalE(OAINetworkWatcher summary, QNetworkReply::NetworkError error_type, QString error_str);
    void networkWatchersUpdateTagsSignalError(OAINetworkWatcher summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networkWatchersVerifyIPFlowSignalError() instead")
    void networkWatchersVerifyIPFlowSignalE(OAIVerificationIPFlowResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void networkWatchersVerifyIPFlowSignalError(OAIVerificationIPFlowResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use networkWatchersCheckConnectivitySignalErrorFull() instead")
    void networkWatchersCheckConnectivitySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void networkWatchersCheckConnectivitySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networkWatchersCreateOrUpdateSignalErrorFull() instead")
    void networkWatchersCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void networkWatchersCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networkWatchersDeleteSignalErrorFull() instead")
    void networkWatchersDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void networkWatchersDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networkWatchersGetSignalErrorFull() instead")
    void networkWatchersGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void networkWatchersGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networkWatchersGetAzureReachabilityReportSignalErrorFull() instead")
    void networkWatchersGetAzureReachabilityReportSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void networkWatchersGetAzureReachabilityReportSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networkWatchersGetFlowLogStatusSignalErrorFull() instead")
    void networkWatchersGetFlowLogStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void networkWatchersGetFlowLogStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networkWatchersGetNetworkConfigurationDiagnosticSignalErrorFull() instead")
    void networkWatchersGetNetworkConfigurationDiagnosticSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void networkWatchersGetNetworkConfigurationDiagnosticSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networkWatchersGetNextHopSignalErrorFull() instead")
    void networkWatchersGetNextHopSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void networkWatchersGetNextHopSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networkWatchersGetTopologySignalErrorFull() instead")
    void networkWatchersGetTopologySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void networkWatchersGetTopologySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networkWatchersGetTroubleshootingSignalErrorFull() instead")
    void networkWatchersGetTroubleshootingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void networkWatchersGetTroubleshootingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networkWatchersGetTroubleshootingResultSignalErrorFull() instead")
    void networkWatchersGetTroubleshootingResultSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void networkWatchersGetTroubleshootingResultSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networkWatchersGetVMSecurityRulesSignalErrorFull() instead")
    void networkWatchersGetVMSecurityRulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void networkWatchersGetVMSecurityRulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networkWatchersListSignalErrorFull() instead")
    void networkWatchersListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void networkWatchersListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networkWatchersListAllSignalErrorFull() instead")
    void networkWatchersListAllSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void networkWatchersListAllSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networkWatchersListAvailableProvidersSignalErrorFull() instead")
    void networkWatchersListAvailableProvidersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void networkWatchersListAvailableProvidersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networkWatchersSetFlowLogConfigurationSignalErrorFull() instead")
    void networkWatchersSetFlowLogConfigurationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void networkWatchersSetFlowLogConfigurationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networkWatchersUpdateTagsSignalErrorFull() instead")
    void networkWatchersUpdateTagsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void networkWatchersUpdateTagsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networkWatchersVerifyIPFlowSignalErrorFull() instead")
    void networkWatchersVerifyIPFlowSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void networkWatchersVerifyIPFlowSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
