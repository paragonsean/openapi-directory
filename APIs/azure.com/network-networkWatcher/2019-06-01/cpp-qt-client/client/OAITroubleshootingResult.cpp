/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITroubleshootingResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITroubleshootingResult::OAITroubleshootingResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITroubleshootingResult::OAITroubleshootingResult() {
    this->initializeModel();
}

OAITroubleshootingResult::~OAITroubleshootingResult() {}

void OAITroubleshootingResult::initializeModel() {

    m_code_isSet = false;
    m_code_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_results_isSet = false;
    m_results_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;
}

void OAITroubleshootingResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITroubleshootingResult::fromJsonObject(QJsonObject json) {

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("endTime")]);
    m_end_time_isSet = !json[QString("endTime")].isNull() && m_end_time_isValid;

    m_results_isValid = ::OpenAPI::fromJsonValue(m_results, json[QString("results")]);
    m_results_isSet = !json[QString("results")].isNull() && m_results_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;
}

QString OAITroubleshootingResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITroubleshootingResult::asJsonObject() const {
    QJsonObject obj;
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("endTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_results.size() > 0) {
        obj.insert(QString("results"), ::OpenAPI::toJsonValue(m_results));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    return obj;
}

QString OAITroubleshootingResult::getCode() const {
    return m_code;
}
void OAITroubleshootingResult::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAITroubleshootingResult::is_code_Set() const{
    return m_code_isSet;
}

bool OAITroubleshootingResult::is_code_Valid() const{
    return m_code_isValid;
}

QDateTime OAITroubleshootingResult::getEndTime() const {
    return m_end_time;
}
void OAITroubleshootingResult::setEndTime(const QDateTime &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAITroubleshootingResult::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAITroubleshootingResult::is_end_time_Valid() const{
    return m_end_time_isValid;
}

QList<OAITroubleshootingDetails> OAITroubleshootingResult::getResults() const {
    return m_results;
}
void OAITroubleshootingResult::setResults(const QList<OAITroubleshootingDetails> &results) {
    m_results = results;
    m_results_isSet = true;
}

bool OAITroubleshootingResult::is_results_Set() const{
    return m_results_isSet;
}

bool OAITroubleshootingResult::is_results_Valid() const{
    return m_results_isValid;
}

QDateTime OAITroubleshootingResult::getStartTime() const {
    return m_start_time;
}
void OAITroubleshootingResult::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAITroubleshootingResult::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAITroubleshootingResult::is_start_time_Valid() const{
    return m_start_time_isValid;
}

bool OAITroubleshootingResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_results.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITroubleshootingResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
