/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITrafficAnalyticsProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITrafficAnalyticsProperties::OAITrafficAnalyticsProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITrafficAnalyticsProperties::OAITrafficAnalyticsProperties() {
    this->initializeModel();
}

OAITrafficAnalyticsProperties::~OAITrafficAnalyticsProperties() {}

void OAITrafficAnalyticsProperties::initializeModel() {

    m_network_watcher_flow_analytics_configuration_isSet = false;
    m_network_watcher_flow_analytics_configuration_isValid = false;
}

void OAITrafficAnalyticsProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITrafficAnalyticsProperties::fromJsonObject(QJsonObject json) {

    m_network_watcher_flow_analytics_configuration_isValid = ::OpenAPI::fromJsonValue(m_network_watcher_flow_analytics_configuration, json[QString("networkWatcherFlowAnalyticsConfiguration")]);
    m_network_watcher_flow_analytics_configuration_isSet = !json[QString("networkWatcherFlowAnalyticsConfiguration")].isNull() && m_network_watcher_flow_analytics_configuration_isValid;
}

QString OAITrafficAnalyticsProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITrafficAnalyticsProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_network_watcher_flow_analytics_configuration.isSet()) {
        obj.insert(QString("networkWatcherFlowAnalyticsConfiguration"), ::OpenAPI::toJsonValue(m_network_watcher_flow_analytics_configuration));
    }
    return obj;
}

OAITrafficAnalyticsConfigurationProperties OAITrafficAnalyticsProperties::getNetworkWatcherFlowAnalyticsConfiguration() const {
    return m_network_watcher_flow_analytics_configuration;
}
void OAITrafficAnalyticsProperties::setNetworkWatcherFlowAnalyticsConfiguration(const OAITrafficAnalyticsConfigurationProperties &network_watcher_flow_analytics_configuration) {
    m_network_watcher_flow_analytics_configuration = network_watcher_flow_analytics_configuration;
    m_network_watcher_flow_analytics_configuration_isSet = true;
}

bool OAITrafficAnalyticsProperties::is_network_watcher_flow_analytics_configuration_Set() const{
    return m_network_watcher_flow_analytics_configuration_isSet;
}

bool OAITrafficAnalyticsProperties::is_network_watcher_flow_analytics_configuration_Valid() const{
    return m_network_watcher_flow_analytics_configuration_isValid;
}

bool OAITrafficAnalyticsProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_network_watcher_flow_analytics_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITrafficAnalyticsProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_network_watcher_flow_analytics_configuration_isValid && true;
}

} // namespace OpenAPI
