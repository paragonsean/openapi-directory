/*
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AvailableProvidersListCity;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * State details.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:33:17.107907-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AvailableProvidersListState {
  public static final String SERIALIZED_NAME_CITIES = "cities";
  @SerializedName(SERIALIZED_NAME_CITIES)
  private List<AvailableProvidersListCity> cities = new ArrayList<>();

  public static final String SERIALIZED_NAME_PROVIDERS = "providers";
  @SerializedName(SERIALIZED_NAME_PROVIDERS)
  private List<String> providers = new ArrayList<>();

  public static final String SERIALIZED_NAME_STATE_NAME = "stateName";
  @SerializedName(SERIALIZED_NAME_STATE_NAME)
  private String stateName;

  public AvailableProvidersListState() {
  }

  public AvailableProvidersListState cities(List<AvailableProvidersListCity> cities) {
    this.cities = cities;
    return this;
  }

  public AvailableProvidersListState addCitiesItem(AvailableProvidersListCity citiesItem) {
    if (this.cities == null) {
      this.cities = new ArrayList<>();
    }
    this.cities.add(citiesItem);
    return this;
  }

  /**
   * List of available cities or towns in the state.
   * @return cities
   */
  @javax.annotation.Nullable
  public List<AvailableProvidersListCity> getCities() {
    return cities;
  }

  public void setCities(List<AvailableProvidersListCity> cities) {
    this.cities = cities;
  }


  public AvailableProvidersListState providers(List<String> providers) {
    this.providers = providers;
    return this;
  }

  public AvailableProvidersListState addProvidersItem(String providersItem) {
    if (this.providers == null) {
      this.providers = new ArrayList<>();
    }
    this.providers.add(providersItem);
    return this;
  }

  /**
   * A list of Internet service providers.
   * @return providers
   */
  @javax.annotation.Nullable
  public List<String> getProviders() {
    return providers;
  }

  public void setProviders(List<String> providers) {
    this.providers = providers;
  }


  public AvailableProvidersListState stateName(String stateName) {
    this.stateName = stateName;
    return this;
  }

  /**
   * The state name.
   * @return stateName
   */
  @javax.annotation.Nullable
  public String getStateName() {
    return stateName;
  }

  public void setStateName(String stateName) {
    this.stateName = stateName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AvailableProvidersListState availableProvidersListState = (AvailableProvidersListState) o;
    return Objects.equals(this.cities, availableProvidersListState.cities) &&
        Objects.equals(this.providers, availableProvidersListState.providers) &&
        Objects.equals(this.stateName, availableProvidersListState.stateName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cities, providers, stateName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AvailableProvidersListState {\n");
    sb.append("    cities: ").append(toIndentedString(cities)).append("\n");
    sb.append("    providers: ").append(toIndentedString(providers)).append("\n");
    sb.append("    stateName: ").append(toIndentedString(stateName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cities");
    openapiFields.add("providers");
    openapiFields.add("stateName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AvailableProvidersListState
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AvailableProvidersListState.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AvailableProvidersListState is not found in the empty JSON string", AvailableProvidersListState.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AvailableProvidersListState.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AvailableProvidersListState` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("cities") != null && !jsonObj.get("cities").isJsonNull()) {
        JsonArray jsonArraycities = jsonObj.getAsJsonArray("cities");
        if (jsonArraycities != null) {
          // ensure the json data is an array
          if (!jsonObj.get("cities").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `cities` to be an array in the JSON string but got `%s`", jsonObj.get("cities").toString()));
          }

          // validate the optional field `cities` (array)
          for (int i = 0; i < jsonArraycities.size(); i++) {
            AvailableProvidersListCity.validateJsonElement(jsonArraycities.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("providers") != null && !jsonObj.get("providers").isJsonNull() && !jsonObj.get("providers").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `providers` to be an array in the JSON string but got `%s`", jsonObj.get("providers").toString()));
      }
      if ((jsonObj.get("stateName") != null && !jsonObj.get("stateName").isJsonNull()) && !jsonObj.get("stateName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stateName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stateName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AvailableProvidersListState.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AvailableProvidersListState' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AvailableProvidersListState> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AvailableProvidersListState.class));

       return (TypeAdapter<T>) new TypeAdapter<AvailableProvidersListState>() {
           @Override
           public void write(JsonWriter out, AvailableProvidersListState value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AvailableProvidersListState read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AvailableProvidersListState given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AvailableProvidersListState
   * @throws IOException if the JSON string is invalid with respect to AvailableProvidersListState
   */
  public static AvailableProvidersListState fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AvailableProvidersListState.class);
  }

  /**
   * Convert an instance of AvailableProvidersListState to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

