# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.evaluated_network_security_group import EvaluatedNetworkSecurityGroup
from openapi_server import util


class NetworkSecurityGroupResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, evaluated_network_security_groups: List[EvaluatedNetworkSecurityGroup]=None, security_rule_access_result: str=None):
        """NetworkSecurityGroupResult - a model defined in OpenAPI

        :param evaluated_network_security_groups: The evaluated_network_security_groups of this NetworkSecurityGroupResult.
        :param security_rule_access_result: The security_rule_access_result of this NetworkSecurityGroupResult.
        """
        self.openapi_types = {
            'evaluated_network_security_groups': List[EvaluatedNetworkSecurityGroup],
            'security_rule_access_result': str
        }

        self.attribute_map = {
            'evaluated_network_security_groups': 'evaluatedNetworkSecurityGroups',
            'security_rule_access_result': 'securityRuleAccessResult'
        }

        self._evaluated_network_security_groups = evaluated_network_security_groups
        self._security_rule_access_result = security_rule_access_result

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NetworkSecurityGroupResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NetworkSecurityGroupResult of this NetworkSecurityGroupResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def evaluated_network_security_groups(self):
        """Gets the evaluated_network_security_groups of this NetworkSecurityGroupResult.

        List of results network security groups diagnostic.

        :return: The evaluated_network_security_groups of this NetworkSecurityGroupResult.
        :rtype: List[EvaluatedNetworkSecurityGroup]
        """
        return self._evaluated_network_security_groups

    @evaluated_network_security_groups.setter
    def evaluated_network_security_groups(self, evaluated_network_security_groups):
        """Sets the evaluated_network_security_groups of this NetworkSecurityGroupResult.

        List of results network security groups diagnostic.

        :param evaluated_network_security_groups: The evaluated_network_security_groups of this NetworkSecurityGroupResult.
        :type evaluated_network_security_groups: List[EvaluatedNetworkSecurityGroup]
        """

        self._evaluated_network_security_groups = evaluated_network_security_groups

    @property
    def security_rule_access_result(self):
        """Gets the security_rule_access_result of this NetworkSecurityGroupResult.

        Whether network traffic is allowed or denied.

        :return: The security_rule_access_result of this NetworkSecurityGroupResult.
        :rtype: str
        """
        return self._security_rule_access_result

    @security_rule_access_result.setter
    def security_rule_access_result(self, security_rule_access_result):
        """Sets the security_rule_access_result of this NetworkSecurityGroupResult.

        Whether network traffic is allowed or denied.

        :param security_rule_access_result: The security_rule_access_result of this NetworkSecurityGroupResult.
        :type security_rule_access_result: str
        """
        allowed_values = ["Allow", "Deny"]  # noqa: E501
        if security_rule_access_result not in allowed_values:
            raise ValueError(
                "Invalid value for `security_rule_access_result` ({0}), must be one of {1}"
                .format(security_rule_access_result, allowed_values)
            )

        self._security_rule_access_result = security_rule_access_result
