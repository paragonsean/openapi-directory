# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TrafficAnalyticsConfigurationProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, enabled: bool=None, traffic_analytics_interval: int=None, workspace_id: str=None, workspace_region: str=None, workspace_resource_id: str=None):
        """TrafficAnalyticsConfigurationProperties - a model defined in OpenAPI

        :param enabled: The enabled of this TrafficAnalyticsConfigurationProperties.
        :param traffic_analytics_interval: The traffic_analytics_interval of this TrafficAnalyticsConfigurationProperties.
        :param workspace_id: The workspace_id of this TrafficAnalyticsConfigurationProperties.
        :param workspace_region: The workspace_region of this TrafficAnalyticsConfigurationProperties.
        :param workspace_resource_id: The workspace_resource_id of this TrafficAnalyticsConfigurationProperties.
        """
        self.openapi_types = {
            'enabled': bool,
            'traffic_analytics_interval': int,
            'workspace_id': str,
            'workspace_region': str,
            'workspace_resource_id': str
        }

        self.attribute_map = {
            'enabled': 'enabled',
            'traffic_analytics_interval': 'trafficAnalyticsInterval',
            'workspace_id': 'workspaceId',
            'workspace_region': 'workspaceRegion',
            'workspace_resource_id': 'workspaceResourceId'
        }

        self._enabled = enabled
        self._traffic_analytics_interval = traffic_analytics_interval
        self._workspace_id = workspace_id
        self._workspace_region = workspace_region
        self._workspace_resource_id = workspace_resource_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TrafficAnalyticsConfigurationProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TrafficAnalyticsConfigurationProperties of this TrafficAnalyticsConfigurationProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enabled(self):
        """Gets the enabled of this TrafficAnalyticsConfigurationProperties.

        Flag to enable/disable traffic analytics.

        :return: The enabled of this TrafficAnalyticsConfigurationProperties.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this TrafficAnalyticsConfigurationProperties.

        Flag to enable/disable traffic analytics.

        :param enabled: The enabled of this TrafficAnalyticsConfigurationProperties.
        :type enabled: bool
        """
        if enabled is None:
            raise ValueError("Invalid value for `enabled`, must not be `None`")

        self._enabled = enabled

    @property
    def traffic_analytics_interval(self):
        """Gets the traffic_analytics_interval of this TrafficAnalyticsConfigurationProperties.

        The interval in minutes which would decide how frequently TA service should do flow analytics.

        :return: The traffic_analytics_interval of this TrafficAnalyticsConfigurationProperties.
        :rtype: int
        """
        return self._traffic_analytics_interval

    @traffic_analytics_interval.setter
    def traffic_analytics_interval(self, traffic_analytics_interval):
        """Sets the traffic_analytics_interval of this TrafficAnalyticsConfigurationProperties.

        The interval in minutes which would decide how frequently TA service should do flow analytics.

        :param traffic_analytics_interval: The traffic_analytics_interval of this TrafficAnalyticsConfigurationProperties.
        :type traffic_analytics_interval: int
        """

        self._traffic_analytics_interval = traffic_analytics_interval

    @property
    def workspace_id(self):
        """Gets the workspace_id of this TrafficAnalyticsConfigurationProperties.

        The resource guid of the attached workspace.

        :return: The workspace_id of this TrafficAnalyticsConfigurationProperties.
        :rtype: str
        """
        return self._workspace_id

    @workspace_id.setter
    def workspace_id(self, workspace_id):
        """Sets the workspace_id of this TrafficAnalyticsConfigurationProperties.

        The resource guid of the attached workspace.

        :param workspace_id: The workspace_id of this TrafficAnalyticsConfigurationProperties.
        :type workspace_id: str
        """
        if workspace_id is None:
            raise ValueError("Invalid value for `workspace_id`, must not be `None`")

        self._workspace_id = workspace_id

    @property
    def workspace_region(self):
        """Gets the workspace_region of this TrafficAnalyticsConfigurationProperties.

        The location of the attached workspace.

        :return: The workspace_region of this TrafficAnalyticsConfigurationProperties.
        :rtype: str
        """
        return self._workspace_region

    @workspace_region.setter
    def workspace_region(self, workspace_region):
        """Sets the workspace_region of this TrafficAnalyticsConfigurationProperties.

        The location of the attached workspace.

        :param workspace_region: The workspace_region of this TrafficAnalyticsConfigurationProperties.
        :type workspace_region: str
        """
        if workspace_region is None:
            raise ValueError("Invalid value for `workspace_region`, must not be `None`")

        self._workspace_region = workspace_region

    @property
    def workspace_resource_id(self):
        """Gets the workspace_resource_id of this TrafficAnalyticsConfigurationProperties.

        Resource Id of the attached workspace.

        :return: The workspace_resource_id of this TrafficAnalyticsConfigurationProperties.
        :rtype: str
        """
        return self._workspace_resource_id

    @workspace_resource_id.setter
    def workspace_resource_id(self, workspace_resource_id):
        """Sets the workspace_resource_id of this TrafficAnalyticsConfigurationProperties.

        Resource Id of the attached workspace.

        :param workspace_resource_id: The workspace_resource_id of this TrafficAnalyticsConfigurationProperties.
        :type workspace_resource_id: str
        """
        if workspace_resource_id is None:
            raise ValueError("Invalid value for `workspace_resource_id`, must not be `None`")

        self._workspace_resource_id = workspace_resource_id
