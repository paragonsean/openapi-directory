# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.packet_capture_filter import PacketCaptureFilter
from openapi_server.models.packet_capture_storage_location import PacketCaptureStorageLocation
from openapi_server import util


class PacketCaptureResultProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, provisioning_state: str=None, bytes_to_capture_per_packet: int=None, filters: List[PacketCaptureFilter]=None, storage_location: PacketCaptureStorageLocation=None, target: str=None, time_limit_in_seconds: int=None, total_bytes_per_session: int=None):
        """PacketCaptureResultProperties - a model defined in OpenAPI

        :param provisioning_state: The provisioning_state of this PacketCaptureResultProperties.
        :param bytes_to_capture_per_packet: The bytes_to_capture_per_packet of this PacketCaptureResultProperties.
        :param filters: The filters of this PacketCaptureResultProperties.
        :param storage_location: The storage_location of this PacketCaptureResultProperties.
        :param target: The target of this PacketCaptureResultProperties.
        :param time_limit_in_seconds: The time_limit_in_seconds of this PacketCaptureResultProperties.
        :param total_bytes_per_session: The total_bytes_per_session of this PacketCaptureResultProperties.
        """
        self.openapi_types = {
            'provisioning_state': str,
            'bytes_to_capture_per_packet': int,
            'filters': List[PacketCaptureFilter],
            'storage_location': PacketCaptureStorageLocation,
            'target': str,
            'time_limit_in_seconds': int,
            'total_bytes_per_session': int
        }

        self.attribute_map = {
            'provisioning_state': 'provisioningState',
            'bytes_to_capture_per_packet': 'bytesToCapturePerPacket',
            'filters': 'filters',
            'storage_location': 'storageLocation',
            'target': 'target',
            'time_limit_in_seconds': 'timeLimitInSeconds',
            'total_bytes_per_session': 'totalBytesPerSession'
        }

        self._provisioning_state = provisioning_state
        self._bytes_to_capture_per_packet = bytes_to_capture_per_packet
        self._filters = filters
        self._storage_location = storage_location
        self._target = target
        self._time_limit_in_seconds = time_limit_in_seconds
        self._total_bytes_per_session = total_bytes_per_session

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PacketCaptureResultProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PacketCaptureResultProperties of this PacketCaptureResultProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this PacketCaptureResultProperties.

        The current provisioning state.

        :return: The provisioning_state of this PacketCaptureResultProperties.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this PacketCaptureResultProperties.

        The current provisioning state.

        :param provisioning_state: The provisioning_state of this PacketCaptureResultProperties.
        :type provisioning_state: str
        """
        allowed_values = ["Succeeded", "Updating", "Deleting", "Failed"]  # noqa: E501
        if provisioning_state not in allowed_values:
            raise ValueError(
                "Invalid value for `provisioning_state` ({0}), must be one of {1}"
                .format(provisioning_state, allowed_values)
            )

        self._provisioning_state = provisioning_state

    @property
    def bytes_to_capture_per_packet(self):
        """Gets the bytes_to_capture_per_packet of this PacketCaptureResultProperties.

        Number of bytes captured per packet, the remaining bytes are truncated.

        :return: The bytes_to_capture_per_packet of this PacketCaptureResultProperties.
        :rtype: int
        """
        return self._bytes_to_capture_per_packet

    @bytes_to_capture_per_packet.setter
    def bytes_to_capture_per_packet(self, bytes_to_capture_per_packet):
        """Sets the bytes_to_capture_per_packet of this PacketCaptureResultProperties.

        Number of bytes captured per packet, the remaining bytes are truncated.

        :param bytes_to_capture_per_packet: The bytes_to_capture_per_packet of this PacketCaptureResultProperties.
        :type bytes_to_capture_per_packet: int
        """

        self._bytes_to_capture_per_packet = bytes_to_capture_per_packet

    @property
    def filters(self):
        """Gets the filters of this PacketCaptureResultProperties.

        A list of packet capture filters.

        :return: The filters of this PacketCaptureResultProperties.
        :rtype: List[PacketCaptureFilter]
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """Sets the filters of this PacketCaptureResultProperties.

        A list of packet capture filters.

        :param filters: The filters of this PacketCaptureResultProperties.
        :type filters: List[PacketCaptureFilter]
        """

        self._filters = filters

    @property
    def storage_location(self):
        """Gets the storage_location of this PacketCaptureResultProperties.


        :return: The storage_location of this PacketCaptureResultProperties.
        :rtype: PacketCaptureStorageLocation
        """
        return self._storage_location

    @storage_location.setter
    def storage_location(self, storage_location):
        """Sets the storage_location of this PacketCaptureResultProperties.


        :param storage_location: The storage_location of this PacketCaptureResultProperties.
        :type storage_location: PacketCaptureStorageLocation
        """
        if storage_location is None:
            raise ValueError("Invalid value for `storage_location`, must not be `None`")

        self._storage_location = storage_location

    @property
    def target(self):
        """Gets the target of this PacketCaptureResultProperties.

        The ID of the targeted resource, only VM is currently supported.

        :return: The target of this PacketCaptureResultProperties.
        :rtype: str
        """
        return self._target

    @target.setter
    def target(self, target):
        """Sets the target of this PacketCaptureResultProperties.

        The ID of the targeted resource, only VM is currently supported.

        :param target: The target of this PacketCaptureResultProperties.
        :type target: str
        """
        if target is None:
            raise ValueError("Invalid value for `target`, must not be `None`")

        self._target = target

    @property
    def time_limit_in_seconds(self):
        """Gets the time_limit_in_seconds of this PacketCaptureResultProperties.

        Maximum duration of the capture session in seconds.

        :return: The time_limit_in_seconds of this PacketCaptureResultProperties.
        :rtype: int
        """
        return self._time_limit_in_seconds

    @time_limit_in_seconds.setter
    def time_limit_in_seconds(self, time_limit_in_seconds):
        """Sets the time_limit_in_seconds of this PacketCaptureResultProperties.

        Maximum duration of the capture session in seconds.

        :param time_limit_in_seconds: The time_limit_in_seconds of this PacketCaptureResultProperties.
        :type time_limit_in_seconds: int
        """

        self._time_limit_in_seconds = time_limit_in_seconds

    @property
    def total_bytes_per_session(self):
        """Gets the total_bytes_per_session of this PacketCaptureResultProperties.

        Maximum size of the capture output.

        :return: The total_bytes_per_session of this PacketCaptureResultProperties.
        :rtype: int
        """
        return self._total_bytes_per_session

    @total_bytes_per_session.setter
    def total_bytes_per_session(self, total_bytes_per_session):
        """Sets the total_bytes_per_session of this PacketCaptureResultProperties.

        Maximum size of the capture output.

        :param total_bytes_per_session: The total_bytes_per_session of this PacketCaptureResultProperties.
        :type total_bytes_per_session: int
        """

        self._total_bytes_per_session = total_bytes_per_session
