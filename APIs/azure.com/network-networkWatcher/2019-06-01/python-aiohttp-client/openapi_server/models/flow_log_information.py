# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.flow_log_properties import FlowLogProperties
from openapi_server.models.traffic_analytics_properties import TrafficAnalyticsProperties
from openapi_server import util


class FlowLogInformation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, flow_analytics_configuration: TrafficAnalyticsProperties=None, properties: FlowLogProperties=None, target_resource_id: str=None):
        """FlowLogInformation - a model defined in OpenAPI

        :param flow_analytics_configuration: The flow_analytics_configuration of this FlowLogInformation.
        :param properties: The properties of this FlowLogInformation.
        :param target_resource_id: The target_resource_id of this FlowLogInformation.
        """
        self.openapi_types = {
            'flow_analytics_configuration': TrafficAnalyticsProperties,
            'properties': FlowLogProperties,
            'target_resource_id': str
        }

        self.attribute_map = {
            'flow_analytics_configuration': 'flowAnalyticsConfiguration',
            'properties': 'properties',
            'target_resource_id': 'targetResourceId'
        }

        self._flow_analytics_configuration = flow_analytics_configuration
        self._properties = properties
        self._target_resource_id = target_resource_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FlowLogInformation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FlowLogInformation of this FlowLogInformation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def flow_analytics_configuration(self):
        """Gets the flow_analytics_configuration of this FlowLogInformation.


        :return: The flow_analytics_configuration of this FlowLogInformation.
        :rtype: TrafficAnalyticsProperties
        """
        return self._flow_analytics_configuration

    @flow_analytics_configuration.setter
    def flow_analytics_configuration(self, flow_analytics_configuration):
        """Sets the flow_analytics_configuration of this FlowLogInformation.


        :param flow_analytics_configuration: The flow_analytics_configuration of this FlowLogInformation.
        :type flow_analytics_configuration: TrafficAnalyticsProperties
        """

        self._flow_analytics_configuration = flow_analytics_configuration

    @property
    def properties(self):
        """Gets the properties of this FlowLogInformation.


        :return: The properties of this FlowLogInformation.
        :rtype: FlowLogProperties
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this FlowLogInformation.


        :param properties: The properties of this FlowLogInformation.
        :type properties: FlowLogProperties
        """
        if properties is None:
            raise ValueError("Invalid value for `properties`, must not be `None`")

        self._properties = properties

    @property
    def target_resource_id(self):
        """Gets the target_resource_id of this FlowLogInformation.

        The ID of the resource to configure for flow log and traffic analytics (optional) .

        :return: The target_resource_id of this FlowLogInformation.
        :rtype: str
        """
        return self._target_resource_id

    @target_resource_id.setter
    def target_resource_id(self, target_resource_id):
        """Sets the target_resource_id of this FlowLogInformation.

        The ID of the resource to configure for flow log and traffic analytics (optional) .

        :param target_resource_id: The target_resource_id of this FlowLogInformation.
        :type target_resource_id: str
        """
        if target_resource_id is None:
            raise ValueError("Invalid value for `target_resource_id`, must not be `None`")

        self._target_resource_id = target_resource_id
