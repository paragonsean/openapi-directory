# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TrafficQuery(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, destination: str=None, destination_port: str=None, direction: str=None, protocol: str=None, source: str=None):
        """TrafficQuery - a model defined in OpenAPI

        :param destination: The destination of this TrafficQuery.
        :param destination_port: The destination_port of this TrafficQuery.
        :param direction: The direction of this TrafficQuery.
        :param protocol: The protocol of this TrafficQuery.
        :param source: The source of this TrafficQuery.
        """
        self.openapi_types = {
            'destination': str,
            'destination_port': str,
            'direction': str,
            'protocol': str,
            'source': str
        }

        self.attribute_map = {
            'destination': 'destination',
            'destination_port': 'destinationPort',
            'direction': 'direction',
            'protocol': 'protocol',
            'source': 'source'
        }

        self._destination = destination
        self._destination_port = destination_port
        self._direction = direction
        self._protocol = protocol
        self._source = source

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TrafficQuery':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TrafficQuery of this TrafficQuery.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def destination(self):
        """Gets the destination of this TrafficQuery.

        Traffic destination. Accepted values are: '*', IP Address/CIDR, Service Tag.

        :return: The destination of this TrafficQuery.
        :rtype: str
        """
        return self._destination

    @destination.setter
    def destination(self, destination):
        """Sets the destination of this TrafficQuery.

        Traffic destination. Accepted values are: '*', IP Address/CIDR, Service Tag.

        :param destination: The destination of this TrafficQuery.
        :type destination: str
        """
        if destination is None:
            raise ValueError("Invalid value for `destination`, must not be `None`")

        self._destination = destination

    @property
    def destination_port(self):
        """Gets the destination_port of this TrafficQuery.

        Traffic destination port. Accepted values are '*', port (for example, 3389) and port range (for example, 80-100).

        :return: The destination_port of this TrafficQuery.
        :rtype: str
        """
        return self._destination_port

    @destination_port.setter
    def destination_port(self, destination_port):
        """Sets the destination_port of this TrafficQuery.

        Traffic destination port. Accepted values are '*', port (for example, 3389) and port range (for example, 80-100).

        :param destination_port: The destination_port of this TrafficQuery.
        :type destination_port: str
        """
        if destination_port is None:
            raise ValueError("Invalid value for `destination_port`, must not be `None`")

        self._destination_port = destination_port

    @property
    def direction(self):
        """Gets the direction of this TrafficQuery.

        The direction of the traffic. Accepted values are 'Inbound' and 'Outbound'.

        :return: The direction of this TrafficQuery.
        :rtype: str
        """
        return self._direction

    @direction.setter
    def direction(self, direction):
        """Sets the direction of this TrafficQuery.

        The direction of the traffic. Accepted values are 'Inbound' and 'Outbound'.

        :param direction: The direction of this TrafficQuery.
        :type direction: str
        """
        allowed_values = ["Inbound", "Outbound"]  # noqa: E501
        if direction not in allowed_values:
            raise ValueError(
                "Invalid value for `direction` ({0}), must be one of {1}"
                .format(direction, allowed_values)
            )

        self._direction = direction

    @property
    def protocol(self):
        """Gets the protocol of this TrafficQuery.

        Protocol to be verified on. Accepted values are '*', TCP, UDP.

        :return: The protocol of this TrafficQuery.
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this TrafficQuery.

        Protocol to be verified on. Accepted values are '*', TCP, UDP.

        :param protocol: The protocol of this TrafficQuery.
        :type protocol: str
        """
        if protocol is None:
            raise ValueError("Invalid value for `protocol`, must not be `None`")

        self._protocol = protocol

    @property
    def source(self):
        """Gets the source of this TrafficQuery.

        Traffic source. Accepted values are '*', IP Address/CIDR, Service Tag.

        :return: The source of this TrafficQuery.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this TrafficQuery.

        Traffic source. Accepted values are '*', IP Address/CIDR, Service Tag.

        :param source: The source of this TrafficQuery.
        :type source: str
        """
        if source is None:
            raise ValueError("Invalid value for `source`, must not be `None`")

        self._source = source
