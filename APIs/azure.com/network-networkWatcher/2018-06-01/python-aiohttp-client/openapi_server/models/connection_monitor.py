# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.connection_monitor_parameters import ConnectionMonitorParameters
from openapi_server import util


class ConnectionMonitor(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, location: str=None, properties: ConnectionMonitorParameters=None, tags: Dict[str, str]=None):
        """ConnectionMonitor - a model defined in OpenAPI

        :param location: The location of this ConnectionMonitor.
        :param properties: The properties of this ConnectionMonitor.
        :param tags: The tags of this ConnectionMonitor.
        """
        self.openapi_types = {
            'location': str,
            'properties': ConnectionMonitorParameters,
            'tags': Dict[str, str]
        }

        self.attribute_map = {
            'location': 'location',
            'properties': 'properties',
            'tags': 'tags'
        }

        self._location = location
        self._properties = properties
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConnectionMonitor':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConnectionMonitor of this ConnectionMonitor.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def location(self):
        """Gets the location of this ConnectionMonitor.

        Connection monitor location.

        :return: The location of this ConnectionMonitor.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this ConnectionMonitor.

        Connection monitor location.

        :param location: The location of this ConnectionMonitor.
        :type location: str
        """

        self._location = location

    @property
    def properties(self):
        """Gets the properties of this ConnectionMonitor.


        :return: The properties of this ConnectionMonitor.
        :rtype: ConnectionMonitorParameters
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this ConnectionMonitor.


        :param properties: The properties of this ConnectionMonitor.
        :type properties: ConnectionMonitorParameters
        """
        if properties is None:
            raise ValueError("Invalid value for `properties`, must not be `None`")

        self._properties = properties

    @property
    def tags(self):
        """Gets the tags of this ConnectionMonitor.

        Connection monitor tags.

        :return: The tags of this ConnectionMonitor.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this ConnectionMonitor.

        Connection monitor tags.

        :param tags: The tags of this ConnectionMonitor.
        :type tags: Dict[str, str]
        """

        self._tags = tags
