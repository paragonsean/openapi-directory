# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.troubleshooting_properties import TroubleshootingProperties
from openapi_server import util


class TroubleshootingParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, properties: TroubleshootingProperties=None, target_resource_id: str=None):
        """TroubleshootingParameters - a model defined in OpenAPI

        :param properties: The properties of this TroubleshootingParameters.
        :param target_resource_id: The target_resource_id of this TroubleshootingParameters.
        """
        self.openapi_types = {
            'properties': TroubleshootingProperties,
            'target_resource_id': str
        }

        self.attribute_map = {
            'properties': 'properties',
            'target_resource_id': 'targetResourceId'
        }

        self._properties = properties
        self._target_resource_id = target_resource_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TroubleshootingParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TroubleshootingParameters of this TroubleshootingParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def properties(self):
        """Gets the properties of this TroubleshootingParameters.


        :return: The properties of this TroubleshootingParameters.
        :rtype: TroubleshootingProperties
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this TroubleshootingParameters.


        :param properties: The properties of this TroubleshootingParameters.
        :type properties: TroubleshootingProperties
        """
        if properties is None:
            raise ValueError("Invalid value for `properties`, must not be `None`")

        self._properties = properties

    @property
    def target_resource_id(self):
        """Gets the target_resource_id of this TroubleshootingParameters.

        The target resource to troubleshoot.

        :return: The target_resource_id of this TroubleshootingParameters.
        :rtype: str
        """
        return self._target_resource_id

    @target_resource_id.setter
    def target_resource_id(self, target_resource_id):
        """Sets the target_resource_id of this TroubleshootingParameters.

        The target resource to troubleshoot.

        :param target_resource_id: The target_resource_id of this TroubleshootingParameters.
        :type target_resource_id: str
        """
        if target_resource_id is None:
            raise ValueError("Invalid value for `target_resource_id`, must not be `None`")

        self._target_resource_id = target_resource_id
