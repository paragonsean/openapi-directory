/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2018-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConnectionStateSnapshot.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConnectionStateSnapshot::OAIConnectionStateSnapshot(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConnectionStateSnapshot::OAIConnectionStateSnapshot() {
    this->initializeModel();
}

OAIConnectionStateSnapshot::~OAIConnectionStateSnapshot() {}

void OAIConnectionStateSnapshot::initializeModel() {

    m_avg_latency_in_ms_isSet = false;
    m_avg_latency_in_ms_isValid = false;

    m_connection_state_isSet = false;
    m_connection_state_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_evaluation_state_isSet = false;
    m_evaluation_state_isValid = false;

    m_hops_isSet = false;
    m_hops_isValid = false;

    m_max_latency_in_ms_isSet = false;
    m_max_latency_in_ms_isValid = false;

    m_min_latency_in_ms_isSet = false;
    m_min_latency_in_ms_isValid = false;

    m_probes_failed_isSet = false;
    m_probes_failed_isValid = false;

    m_probes_sent_isSet = false;
    m_probes_sent_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;
}

void OAIConnectionStateSnapshot::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConnectionStateSnapshot::fromJsonObject(QJsonObject json) {

    m_avg_latency_in_ms_isValid = ::OpenAPI::fromJsonValue(m_avg_latency_in_ms, json[QString("avgLatencyInMs")]);
    m_avg_latency_in_ms_isSet = !json[QString("avgLatencyInMs")].isNull() && m_avg_latency_in_ms_isValid;

    m_connection_state_isValid = ::OpenAPI::fromJsonValue(m_connection_state, json[QString("connectionState")]);
    m_connection_state_isSet = !json[QString("connectionState")].isNull() && m_connection_state_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("endTime")]);
    m_end_time_isSet = !json[QString("endTime")].isNull() && m_end_time_isValid;

    m_evaluation_state_isValid = ::OpenAPI::fromJsonValue(m_evaluation_state, json[QString("evaluationState")]);
    m_evaluation_state_isSet = !json[QString("evaluationState")].isNull() && m_evaluation_state_isValid;

    m_hops_isValid = ::OpenAPI::fromJsonValue(m_hops, json[QString("hops")]);
    m_hops_isSet = !json[QString("hops")].isNull() && m_hops_isValid;

    m_max_latency_in_ms_isValid = ::OpenAPI::fromJsonValue(m_max_latency_in_ms, json[QString("maxLatencyInMs")]);
    m_max_latency_in_ms_isSet = !json[QString("maxLatencyInMs")].isNull() && m_max_latency_in_ms_isValid;

    m_min_latency_in_ms_isValid = ::OpenAPI::fromJsonValue(m_min_latency_in_ms, json[QString("minLatencyInMs")]);
    m_min_latency_in_ms_isSet = !json[QString("minLatencyInMs")].isNull() && m_min_latency_in_ms_isValid;

    m_probes_failed_isValid = ::OpenAPI::fromJsonValue(m_probes_failed, json[QString("probesFailed")]);
    m_probes_failed_isSet = !json[QString("probesFailed")].isNull() && m_probes_failed_isValid;

    m_probes_sent_isValid = ::OpenAPI::fromJsonValue(m_probes_sent, json[QString("probesSent")]);
    m_probes_sent_isSet = !json[QString("probesSent")].isNull() && m_probes_sent_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;
}

QString OAIConnectionStateSnapshot::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConnectionStateSnapshot::asJsonObject() const {
    QJsonObject obj;
    if (m_avg_latency_in_ms_isSet) {
        obj.insert(QString("avgLatencyInMs"), ::OpenAPI::toJsonValue(m_avg_latency_in_ms));
    }
    if (m_connection_state_isSet) {
        obj.insert(QString("connectionState"), ::OpenAPI::toJsonValue(m_connection_state));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("endTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_evaluation_state_isSet) {
        obj.insert(QString("evaluationState"), ::OpenAPI::toJsonValue(m_evaluation_state));
    }
    if (m_hops.size() > 0) {
        obj.insert(QString("hops"), ::OpenAPI::toJsonValue(m_hops));
    }
    if (m_max_latency_in_ms_isSet) {
        obj.insert(QString("maxLatencyInMs"), ::OpenAPI::toJsonValue(m_max_latency_in_ms));
    }
    if (m_min_latency_in_ms_isSet) {
        obj.insert(QString("minLatencyInMs"), ::OpenAPI::toJsonValue(m_min_latency_in_ms));
    }
    if (m_probes_failed_isSet) {
        obj.insert(QString("probesFailed"), ::OpenAPI::toJsonValue(m_probes_failed));
    }
    if (m_probes_sent_isSet) {
        obj.insert(QString("probesSent"), ::OpenAPI::toJsonValue(m_probes_sent));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    return obj;
}

qint32 OAIConnectionStateSnapshot::getAvgLatencyInMs() const {
    return m_avg_latency_in_ms;
}
void OAIConnectionStateSnapshot::setAvgLatencyInMs(const qint32 &avg_latency_in_ms) {
    m_avg_latency_in_ms = avg_latency_in_ms;
    m_avg_latency_in_ms_isSet = true;
}

bool OAIConnectionStateSnapshot::is_avg_latency_in_ms_Set() const{
    return m_avg_latency_in_ms_isSet;
}

bool OAIConnectionStateSnapshot::is_avg_latency_in_ms_Valid() const{
    return m_avg_latency_in_ms_isValid;
}

QString OAIConnectionStateSnapshot::getConnectionState() const {
    return m_connection_state;
}
void OAIConnectionStateSnapshot::setConnectionState(const QString &connection_state) {
    m_connection_state = connection_state;
    m_connection_state_isSet = true;
}

bool OAIConnectionStateSnapshot::is_connection_state_Set() const{
    return m_connection_state_isSet;
}

bool OAIConnectionStateSnapshot::is_connection_state_Valid() const{
    return m_connection_state_isValid;
}

QDateTime OAIConnectionStateSnapshot::getEndTime() const {
    return m_end_time;
}
void OAIConnectionStateSnapshot::setEndTime(const QDateTime &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIConnectionStateSnapshot::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIConnectionStateSnapshot::is_end_time_Valid() const{
    return m_end_time_isValid;
}

QString OAIConnectionStateSnapshot::getEvaluationState() const {
    return m_evaluation_state;
}
void OAIConnectionStateSnapshot::setEvaluationState(const QString &evaluation_state) {
    m_evaluation_state = evaluation_state;
    m_evaluation_state_isSet = true;
}

bool OAIConnectionStateSnapshot::is_evaluation_state_Set() const{
    return m_evaluation_state_isSet;
}

bool OAIConnectionStateSnapshot::is_evaluation_state_Valid() const{
    return m_evaluation_state_isValid;
}

QList<OAIConnectivityHop> OAIConnectionStateSnapshot::getHops() const {
    return m_hops;
}
void OAIConnectionStateSnapshot::setHops(const QList<OAIConnectivityHop> &hops) {
    m_hops = hops;
    m_hops_isSet = true;
}

bool OAIConnectionStateSnapshot::is_hops_Set() const{
    return m_hops_isSet;
}

bool OAIConnectionStateSnapshot::is_hops_Valid() const{
    return m_hops_isValid;
}

qint32 OAIConnectionStateSnapshot::getMaxLatencyInMs() const {
    return m_max_latency_in_ms;
}
void OAIConnectionStateSnapshot::setMaxLatencyInMs(const qint32 &max_latency_in_ms) {
    m_max_latency_in_ms = max_latency_in_ms;
    m_max_latency_in_ms_isSet = true;
}

bool OAIConnectionStateSnapshot::is_max_latency_in_ms_Set() const{
    return m_max_latency_in_ms_isSet;
}

bool OAIConnectionStateSnapshot::is_max_latency_in_ms_Valid() const{
    return m_max_latency_in_ms_isValid;
}

qint32 OAIConnectionStateSnapshot::getMinLatencyInMs() const {
    return m_min_latency_in_ms;
}
void OAIConnectionStateSnapshot::setMinLatencyInMs(const qint32 &min_latency_in_ms) {
    m_min_latency_in_ms = min_latency_in_ms;
    m_min_latency_in_ms_isSet = true;
}

bool OAIConnectionStateSnapshot::is_min_latency_in_ms_Set() const{
    return m_min_latency_in_ms_isSet;
}

bool OAIConnectionStateSnapshot::is_min_latency_in_ms_Valid() const{
    return m_min_latency_in_ms_isValid;
}

qint32 OAIConnectionStateSnapshot::getProbesFailed() const {
    return m_probes_failed;
}
void OAIConnectionStateSnapshot::setProbesFailed(const qint32 &probes_failed) {
    m_probes_failed = probes_failed;
    m_probes_failed_isSet = true;
}

bool OAIConnectionStateSnapshot::is_probes_failed_Set() const{
    return m_probes_failed_isSet;
}

bool OAIConnectionStateSnapshot::is_probes_failed_Valid() const{
    return m_probes_failed_isValid;
}

qint32 OAIConnectionStateSnapshot::getProbesSent() const {
    return m_probes_sent;
}
void OAIConnectionStateSnapshot::setProbesSent(const qint32 &probes_sent) {
    m_probes_sent = probes_sent;
    m_probes_sent_isSet = true;
}

bool OAIConnectionStateSnapshot::is_probes_sent_Set() const{
    return m_probes_sent_isSet;
}

bool OAIConnectionStateSnapshot::is_probes_sent_Valid() const{
    return m_probes_sent_isValid;
}

QDateTime OAIConnectionStateSnapshot::getStartTime() const {
    return m_start_time;
}
void OAIConnectionStateSnapshot::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIConnectionStateSnapshot::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIConnectionStateSnapshot::is_start_time_Valid() const{
    return m_start_time_isValid;
}

bool OAIConnectionStateSnapshot::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_avg_latency_in_ms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_connection_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_evaluation_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hops.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_latency_in_ms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_latency_in_ms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_probes_failed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_probes_sent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConnectionStateSnapshot::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
