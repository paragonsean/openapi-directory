/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2018-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISecurityRuleAssociations_effectiveSecurityRules_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISecurityRuleAssociations_effectiveSecurityRules_inner::OAISecurityRuleAssociations_effectiveSecurityRules_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISecurityRuleAssociations_effectiveSecurityRules_inner::OAISecurityRuleAssociations_effectiveSecurityRules_inner() {
    this->initializeModel();
}

OAISecurityRuleAssociations_effectiveSecurityRules_inner::~OAISecurityRuleAssociations_effectiveSecurityRules_inner() {}

void OAISecurityRuleAssociations_effectiveSecurityRules_inner::initializeModel() {

    m_access_isSet = false;
    m_access_isValid = false;

    m_destination_address_prefix_isSet = false;
    m_destination_address_prefix_isValid = false;

    m_destination_address_prefixes_isSet = false;
    m_destination_address_prefixes_isValid = false;

    m_destination_port_range_isSet = false;
    m_destination_port_range_isValid = false;

    m_destination_port_ranges_isSet = false;
    m_destination_port_ranges_isValid = false;

    m_direction_isSet = false;
    m_direction_isValid = false;

    m_expanded_destination_address_prefix_isSet = false;
    m_expanded_destination_address_prefix_isValid = false;

    m_expanded_source_address_prefix_isSet = false;
    m_expanded_source_address_prefix_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_priority_isSet = false;
    m_priority_isValid = false;

    m_protocol_isSet = false;
    m_protocol_isValid = false;

    m_source_address_prefix_isSet = false;
    m_source_address_prefix_isValid = false;

    m_source_address_prefixes_isSet = false;
    m_source_address_prefixes_isValid = false;

    m_source_port_range_isSet = false;
    m_source_port_range_isValid = false;

    m_source_port_ranges_isSet = false;
    m_source_port_ranges_isValid = false;
}

void OAISecurityRuleAssociations_effectiveSecurityRules_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISecurityRuleAssociations_effectiveSecurityRules_inner::fromJsonObject(QJsonObject json) {

    m_access_isValid = ::OpenAPI::fromJsonValue(m_access, json[QString("access")]);
    m_access_isSet = !json[QString("access")].isNull() && m_access_isValid;

    m_destination_address_prefix_isValid = ::OpenAPI::fromJsonValue(m_destination_address_prefix, json[QString("destinationAddressPrefix")]);
    m_destination_address_prefix_isSet = !json[QString("destinationAddressPrefix")].isNull() && m_destination_address_prefix_isValid;

    m_destination_address_prefixes_isValid = ::OpenAPI::fromJsonValue(m_destination_address_prefixes, json[QString("destinationAddressPrefixes")]);
    m_destination_address_prefixes_isSet = !json[QString("destinationAddressPrefixes")].isNull() && m_destination_address_prefixes_isValid;

    m_destination_port_range_isValid = ::OpenAPI::fromJsonValue(m_destination_port_range, json[QString("destinationPortRange")]);
    m_destination_port_range_isSet = !json[QString("destinationPortRange")].isNull() && m_destination_port_range_isValid;

    m_destination_port_ranges_isValid = ::OpenAPI::fromJsonValue(m_destination_port_ranges, json[QString("destinationPortRanges")]);
    m_destination_port_ranges_isSet = !json[QString("destinationPortRanges")].isNull() && m_destination_port_ranges_isValid;

    m_direction_isValid = ::OpenAPI::fromJsonValue(m_direction, json[QString("direction")]);
    m_direction_isSet = !json[QString("direction")].isNull() && m_direction_isValid;

    m_expanded_destination_address_prefix_isValid = ::OpenAPI::fromJsonValue(m_expanded_destination_address_prefix, json[QString("expandedDestinationAddressPrefix")]);
    m_expanded_destination_address_prefix_isSet = !json[QString("expandedDestinationAddressPrefix")].isNull() && m_expanded_destination_address_prefix_isValid;

    m_expanded_source_address_prefix_isValid = ::OpenAPI::fromJsonValue(m_expanded_source_address_prefix, json[QString("expandedSourceAddressPrefix")]);
    m_expanded_source_address_prefix_isSet = !json[QString("expandedSourceAddressPrefix")].isNull() && m_expanded_source_address_prefix_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_priority_isValid = ::OpenAPI::fromJsonValue(m_priority, json[QString("priority")]);
    m_priority_isSet = !json[QString("priority")].isNull() && m_priority_isValid;

    m_protocol_isValid = ::OpenAPI::fromJsonValue(m_protocol, json[QString("protocol")]);
    m_protocol_isSet = !json[QString("protocol")].isNull() && m_protocol_isValid;

    m_source_address_prefix_isValid = ::OpenAPI::fromJsonValue(m_source_address_prefix, json[QString("sourceAddressPrefix")]);
    m_source_address_prefix_isSet = !json[QString("sourceAddressPrefix")].isNull() && m_source_address_prefix_isValid;

    m_source_address_prefixes_isValid = ::OpenAPI::fromJsonValue(m_source_address_prefixes, json[QString("sourceAddressPrefixes")]);
    m_source_address_prefixes_isSet = !json[QString("sourceAddressPrefixes")].isNull() && m_source_address_prefixes_isValid;

    m_source_port_range_isValid = ::OpenAPI::fromJsonValue(m_source_port_range, json[QString("sourcePortRange")]);
    m_source_port_range_isSet = !json[QString("sourcePortRange")].isNull() && m_source_port_range_isValid;

    m_source_port_ranges_isValid = ::OpenAPI::fromJsonValue(m_source_port_ranges, json[QString("sourcePortRanges")]);
    m_source_port_ranges_isSet = !json[QString("sourcePortRanges")].isNull() && m_source_port_ranges_isValid;
}

QString OAISecurityRuleAssociations_effectiveSecurityRules_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISecurityRuleAssociations_effectiveSecurityRules_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_access_isSet) {
        obj.insert(QString("access"), ::OpenAPI::toJsonValue(m_access));
    }
    if (m_destination_address_prefix_isSet) {
        obj.insert(QString("destinationAddressPrefix"), ::OpenAPI::toJsonValue(m_destination_address_prefix));
    }
    if (m_destination_address_prefixes.size() > 0) {
        obj.insert(QString("destinationAddressPrefixes"), ::OpenAPI::toJsonValue(m_destination_address_prefixes));
    }
    if (m_destination_port_range_isSet) {
        obj.insert(QString("destinationPortRange"), ::OpenAPI::toJsonValue(m_destination_port_range));
    }
    if (m_destination_port_ranges.size() > 0) {
        obj.insert(QString("destinationPortRanges"), ::OpenAPI::toJsonValue(m_destination_port_ranges));
    }
    if (m_direction_isSet) {
        obj.insert(QString("direction"), ::OpenAPI::toJsonValue(m_direction));
    }
    if (m_expanded_destination_address_prefix.size() > 0) {
        obj.insert(QString("expandedDestinationAddressPrefix"), ::OpenAPI::toJsonValue(m_expanded_destination_address_prefix));
    }
    if (m_expanded_source_address_prefix.size() > 0) {
        obj.insert(QString("expandedSourceAddressPrefix"), ::OpenAPI::toJsonValue(m_expanded_source_address_prefix));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_priority_isSet) {
        obj.insert(QString("priority"), ::OpenAPI::toJsonValue(m_priority));
    }
    if (m_protocol_isSet) {
        obj.insert(QString("protocol"), ::OpenAPI::toJsonValue(m_protocol));
    }
    if (m_source_address_prefix_isSet) {
        obj.insert(QString("sourceAddressPrefix"), ::OpenAPI::toJsonValue(m_source_address_prefix));
    }
    if (m_source_address_prefixes.size() > 0) {
        obj.insert(QString("sourceAddressPrefixes"), ::OpenAPI::toJsonValue(m_source_address_prefixes));
    }
    if (m_source_port_range_isSet) {
        obj.insert(QString("sourcePortRange"), ::OpenAPI::toJsonValue(m_source_port_range));
    }
    if (m_source_port_ranges.size() > 0) {
        obj.insert(QString("sourcePortRanges"), ::OpenAPI::toJsonValue(m_source_port_ranges));
    }
    return obj;
}

QString OAISecurityRuleAssociations_effectiveSecurityRules_inner::getAccess() const {
    return m_access;
}
void OAISecurityRuleAssociations_effectiveSecurityRules_inner::setAccess(const QString &access) {
    m_access = access;
    m_access_isSet = true;
}

bool OAISecurityRuleAssociations_effectiveSecurityRules_inner::is_access_Set() const{
    return m_access_isSet;
}

bool OAISecurityRuleAssociations_effectiveSecurityRules_inner::is_access_Valid() const{
    return m_access_isValid;
}

QString OAISecurityRuleAssociations_effectiveSecurityRules_inner::getDestinationAddressPrefix() const {
    return m_destination_address_prefix;
}
void OAISecurityRuleAssociations_effectiveSecurityRules_inner::setDestinationAddressPrefix(const QString &destination_address_prefix) {
    m_destination_address_prefix = destination_address_prefix;
    m_destination_address_prefix_isSet = true;
}

bool OAISecurityRuleAssociations_effectiveSecurityRules_inner::is_destination_address_prefix_Set() const{
    return m_destination_address_prefix_isSet;
}

bool OAISecurityRuleAssociations_effectiveSecurityRules_inner::is_destination_address_prefix_Valid() const{
    return m_destination_address_prefix_isValid;
}

QList<QString> OAISecurityRuleAssociations_effectiveSecurityRules_inner::getDestinationAddressPrefixes() const {
    return m_destination_address_prefixes;
}
void OAISecurityRuleAssociations_effectiveSecurityRules_inner::setDestinationAddressPrefixes(const QList<QString> &destination_address_prefixes) {
    m_destination_address_prefixes = destination_address_prefixes;
    m_destination_address_prefixes_isSet = true;
}

bool OAISecurityRuleAssociations_effectiveSecurityRules_inner::is_destination_address_prefixes_Set() const{
    return m_destination_address_prefixes_isSet;
}

bool OAISecurityRuleAssociations_effectiveSecurityRules_inner::is_destination_address_prefixes_Valid() const{
    return m_destination_address_prefixes_isValid;
}

QString OAISecurityRuleAssociations_effectiveSecurityRules_inner::getDestinationPortRange() const {
    return m_destination_port_range;
}
void OAISecurityRuleAssociations_effectiveSecurityRules_inner::setDestinationPortRange(const QString &destination_port_range) {
    m_destination_port_range = destination_port_range;
    m_destination_port_range_isSet = true;
}

bool OAISecurityRuleAssociations_effectiveSecurityRules_inner::is_destination_port_range_Set() const{
    return m_destination_port_range_isSet;
}

bool OAISecurityRuleAssociations_effectiveSecurityRules_inner::is_destination_port_range_Valid() const{
    return m_destination_port_range_isValid;
}

QList<QString> OAISecurityRuleAssociations_effectiveSecurityRules_inner::getDestinationPortRanges() const {
    return m_destination_port_ranges;
}
void OAISecurityRuleAssociations_effectiveSecurityRules_inner::setDestinationPortRanges(const QList<QString> &destination_port_ranges) {
    m_destination_port_ranges = destination_port_ranges;
    m_destination_port_ranges_isSet = true;
}

bool OAISecurityRuleAssociations_effectiveSecurityRules_inner::is_destination_port_ranges_Set() const{
    return m_destination_port_ranges_isSet;
}

bool OAISecurityRuleAssociations_effectiveSecurityRules_inner::is_destination_port_ranges_Valid() const{
    return m_destination_port_ranges_isValid;
}

QString OAISecurityRuleAssociations_effectiveSecurityRules_inner::getDirection() const {
    return m_direction;
}
void OAISecurityRuleAssociations_effectiveSecurityRules_inner::setDirection(const QString &direction) {
    m_direction = direction;
    m_direction_isSet = true;
}

bool OAISecurityRuleAssociations_effectiveSecurityRules_inner::is_direction_Set() const{
    return m_direction_isSet;
}

bool OAISecurityRuleAssociations_effectiveSecurityRules_inner::is_direction_Valid() const{
    return m_direction_isValid;
}

QList<QString> OAISecurityRuleAssociations_effectiveSecurityRules_inner::getExpandedDestinationAddressPrefix() const {
    return m_expanded_destination_address_prefix;
}
void OAISecurityRuleAssociations_effectiveSecurityRules_inner::setExpandedDestinationAddressPrefix(const QList<QString> &expanded_destination_address_prefix) {
    m_expanded_destination_address_prefix = expanded_destination_address_prefix;
    m_expanded_destination_address_prefix_isSet = true;
}

bool OAISecurityRuleAssociations_effectiveSecurityRules_inner::is_expanded_destination_address_prefix_Set() const{
    return m_expanded_destination_address_prefix_isSet;
}

bool OAISecurityRuleAssociations_effectiveSecurityRules_inner::is_expanded_destination_address_prefix_Valid() const{
    return m_expanded_destination_address_prefix_isValid;
}

QList<QString> OAISecurityRuleAssociations_effectiveSecurityRules_inner::getExpandedSourceAddressPrefix() const {
    return m_expanded_source_address_prefix;
}
void OAISecurityRuleAssociations_effectiveSecurityRules_inner::setExpandedSourceAddressPrefix(const QList<QString> &expanded_source_address_prefix) {
    m_expanded_source_address_prefix = expanded_source_address_prefix;
    m_expanded_source_address_prefix_isSet = true;
}

bool OAISecurityRuleAssociations_effectiveSecurityRules_inner::is_expanded_source_address_prefix_Set() const{
    return m_expanded_source_address_prefix_isSet;
}

bool OAISecurityRuleAssociations_effectiveSecurityRules_inner::is_expanded_source_address_prefix_Valid() const{
    return m_expanded_source_address_prefix_isValid;
}

QString OAISecurityRuleAssociations_effectiveSecurityRules_inner::getName() const {
    return m_name;
}
void OAISecurityRuleAssociations_effectiveSecurityRules_inner::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISecurityRuleAssociations_effectiveSecurityRules_inner::is_name_Set() const{
    return m_name_isSet;
}

bool OAISecurityRuleAssociations_effectiveSecurityRules_inner::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAISecurityRuleAssociations_effectiveSecurityRules_inner::getPriority() const {
    return m_priority;
}
void OAISecurityRuleAssociations_effectiveSecurityRules_inner::setPriority(const qint32 &priority) {
    m_priority = priority;
    m_priority_isSet = true;
}

bool OAISecurityRuleAssociations_effectiveSecurityRules_inner::is_priority_Set() const{
    return m_priority_isSet;
}

bool OAISecurityRuleAssociations_effectiveSecurityRules_inner::is_priority_Valid() const{
    return m_priority_isValid;
}

QString OAISecurityRuleAssociations_effectiveSecurityRules_inner::getProtocol() const {
    return m_protocol;
}
void OAISecurityRuleAssociations_effectiveSecurityRules_inner::setProtocol(const QString &protocol) {
    m_protocol = protocol;
    m_protocol_isSet = true;
}

bool OAISecurityRuleAssociations_effectiveSecurityRules_inner::is_protocol_Set() const{
    return m_protocol_isSet;
}

bool OAISecurityRuleAssociations_effectiveSecurityRules_inner::is_protocol_Valid() const{
    return m_protocol_isValid;
}

QString OAISecurityRuleAssociations_effectiveSecurityRules_inner::getSourceAddressPrefix() const {
    return m_source_address_prefix;
}
void OAISecurityRuleAssociations_effectiveSecurityRules_inner::setSourceAddressPrefix(const QString &source_address_prefix) {
    m_source_address_prefix = source_address_prefix;
    m_source_address_prefix_isSet = true;
}

bool OAISecurityRuleAssociations_effectiveSecurityRules_inner::is_source_address_prefix_Set() const{
    return m_source_address_prefix_isSet;
}

bool OAISecurityRuleAssociations_effectiveSecurityRules_inner::is_source_address_prefix_Valid() const{
    return m_source_address_prefix_isValid;
}

QList<QString> OAISecurityRuleAssociations_effectiveSecurityRules_inner::getSourceAddressPrefixes() const {
    return m_source_address_prefixes;
}
void OAISecurityRuleAssociations_effectiveSecurityRules_inner::setSourceAddressPrefixes(const QList<QString> &source_address_prefixes) {
    m_source_address_prefixes = source_address_prefixes;
    m_source_address_prefixes_isSet = true;
}

bool OAISecurityRuleAssociations_effectiveSecurityRules_inner::is_source_address_prefixes_Set() const{
    return m_source_address_prefixes_isSet;
}

bool OAISecurityRuleAssociations_effectiveSecurityRules_inner::is_source_address_prefixes_Valid() const{
    return m_source_address_prefixes_isValid;
}

QString OAISecurityRuleAssociations_effectiveSecurityRules_inner::getSourcePortRange() const {
    return m_source_port_range;
}
void OAISecurityRuleAssociations_effectiveSecurityRules_inner::setSourcePortRange(const QString &source_port_range) {
    m_source_port_range = source_port_range;
    m_source_port_range_isSet = true;
}

bool OAISecurityRuleAssociations_effectiveSecurityRules_inner::is_source_port_range_Set() const{
    return m_source_port_range_isSet;
}

bool OAISecurityRuleAssociations_effectiveSecurityRules_inner::is_source_port_range_Valid() const{
    return m_source_port_range_isValid;
}

QList<QString> OAISecurityRuleAssociations_effectiveSecurityRules_inner::getSourcePortRanges() const {
    return m_source_port_ranges;
}
void OAISecurityRuleAssociations_effectiveSecurityRules_inner::setSourcePortRanges(const QList<QString> &source_port_ranges) {
    m_source_port_ranges = source_port_ranges;
    m_source_port_ranges_isSet = true;
}

bool OAISecurityRuleAssociations_effectiveSecurityRules_inner::is_source_port_ranges_Set() const{
    return m_source_port_ranges_isSet;
}

bool OAISecurityRuleAssociations_effectiveSecurityRules_inner::is_source_port_ranges_Valid() const{
    return m_source_port_ranges_isValid;
}

bool OAISecurityRuleAssociations_effectiveSecurityRules_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_access_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_address_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_address_prefixes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_port_range_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_port_ranges.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_direction_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expanded_destination_address_prefix.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_expanded_source_address_prefix.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_priority_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protocol_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_address_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_address_prefixes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_port_range_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_port_ranges.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISecurityRuleAssociations_effectiveSecurityRules_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
