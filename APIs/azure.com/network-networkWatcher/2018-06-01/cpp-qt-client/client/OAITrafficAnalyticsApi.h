/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2018-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITrafficAnalyticsApi_H
#define OAI_OAITrafficAnalyticsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIErrorResponse.h"
#include "OAIFlowLogInformation.h"
#include "OAIFlowLogStatusParameters.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITrafficAnalyticsApi : public QObject {
    Q_OBJECT

public:
    OAITrafficAnalyticsApi(const int timeOut = 0);
    ~OAITrafficAnalyticsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  network_watcher_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIFlowLogStatusParameters [required]
    */
    virtual void networkWatchersGetFlowLogStatus(const QString &resource_group_name, const QString &network_watcher_name, const QString &api_version, const QString &subscription_id, const OAIFlowLogStatusParameters &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  network_watcher_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIFlowLogInformation [required]
    */
    virtual void networkWatchersSetFlowLogConfiguration(const QString &resource_group_name, const QString &network_watcher_name, const QString &api_version, const QString &subscription_id, const OAIFlowLogInformation &parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void networkWatchersGetFlowLogStatusCallback(OAIHttpRequestWorker *worker);
    void networkWatchersSetFlowLogConfigurationCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void networkWatchersGetFlowLogStatusSignal(OAIFlowLogInformation summary);
    void networkWatchersSetFlowLogConfigurationSignal(OAIFlowLogInformation summary);


    void networkWatchersGetFlowLogStatusSignalFull(OAIHttpRequestWorker *worker, OAIFlowLogInformation summary);
    void networkWatchersSetFlowLogConfigurationSignalFull(OAIHttpRequestWorker *worker, OAIFlowLogInformation summary);

    Q_DECL_DEPRECATED_X("Use networkWatchersGetFlowLogStatusSignalError() instead")
    void networkWatchersGetFlowLogStatusSignalE(OAIFlowLogInformation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void networkWatchersGetFlowLogStatusSignalError(OAIFlowLogInformation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networkWatchersSetFlowLogConfigurationSignalError() instead")
    void networkWatchersSetFlowLogConfigurationSignalE(OAIFlowLogInformation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void networkWatchersSetFlowLogConfigurationSignalError(OAIFlowLogInformation summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use networkWatchersGetFlowLogStatusSignalErrorFull() instead")
    void networkWatchersGetFlowLogStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void networkWatchersGetFlowLogStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networkWatchersSetFlowLogConfigurationSignalErrorFull() instead")
    void networkWatchersSetFlowLogConfigurationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void networkWatchersSetFlowLogConfigurationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
