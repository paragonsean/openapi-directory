/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2018-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPacketCaptureQueryStatusResult.h
 *
 * Status of packet capture session.
 */

#ifndef OAIPacketCaptureQueryStatusResult_H
#define OAIPacketCaptureQueryStatusResult_H

#include <QJsonObject>

#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIPacketCaptureQueryStatusResult : public OAIObject {
public:
    OAIPacketCaptureQueryStatusResult();
    OAIPacketCaptureQueryStatusResult(QString json);
    ~OAIPacketCaptureQueryStatusResult() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QDateTime getCaptureStartTime() const;
    void setCaptureStartTime(const QDateTime &capture_start_time);
    bool is_capture_start_time_Set() const;
    bool is_capture_start_time_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QList<QString> getPacketCaptureError() const;
    void setPacketCaptureError(const QList<QString> &packet_capture_error);
    bool is_packet_capture_error_Set() const;
    bool is_packet_capture_error_Valid() const;

    QString getPacketCaptureStatus() const;
    void setPacketCaptureStatus(const QString &packet_capture_status);
    bool is_packet_capture_status_Set() const;
    bool is_packet_capture_status_Valid() const;

    QString getStopReason() const;
    void setStopReason(const QString &stop_reason);
    bool is_stop_reason_Set() const;
    bool is_stop_reason_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QDateTime m_capture_start_time;
    bool m_capture_start_time_isSet;
    bool m_capture_start_time_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QList<QString> m_packet_capture_error;
    bool m_packet_capture_error_isSet;
    bool m_packet_capture_error_isValid;

    QString m_packet_capture_status;
    bool m_packet_capture_status_isSet;
    bool m_packet_capture_status_isValid;

    QString m_stop_reason;
    bool m_stop_reason_isSet;
    bool m_stop_reason_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPacketCaptureQueryStatusResult)

#endif // OAIPacketCaptureQueryStatusResult_H
