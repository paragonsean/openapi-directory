/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2018-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIConnectionStateSnapshot.h
 *
 * Connection state snapshot.
 */

#ifndef OAIConnectionStateSnapshot_H
#define OAIConnectionStateSnapshot_H

#include <QJsonObject>

#include "OAIConnectivityHop.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIConnectivityHop;

class OAIConnectionStateSnapshot : public OAIObject {
public:
    OAIConnectionStateSnapshot();
    OAIConnectionStateSnapshot(QString json);
    ~OAIConnectionStateSnapshot() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getAvgLatencyInMs() const;
    void setAvgLatencyInMs(const qint32 &avg_latency_in_ms);
    bool is_avg_latency_in_ms_Set() const;
    bool is_avg_latency_in_ms_Valid() const;

    QString getConnectionState() const;
    void setConnectionState(const QString &connection_state);
    bool is_connection_state_Set() const;
    bool is_connection_state_Valid() const;

    QDateTime getEndTime() const;
    void setEndTime(const QDateTime &end_time);
    bool is_end_time_Set() const;
    bool is_end_time_Valid() const;

    QString getEvaluationState() const;
    void setEvaluationState(const QString &evaluation_state);
    bool is_evaluation_state_Set() const;
    bool is_evaluation_state_Valid() const;

    QList<OAIConnectivityHop> getHops() const;
    void setHops(const QList<OAIConnectivityHop> &hops);
    bool is_hops_Set() const;
    bool is_hops_Valid() const;

    qint32 getMaxLatencyInMs() const;
    void setMaxLatencyInMs(const qint32 &max_latency_in_ms);
    bool is_max_latency_in_ms_Set() const;
    bool is_max_latency_in_ms_Valid() const;

    qint32 getMinLatencyInMs() const;
    void setMinLatencyInMs(const qint32 &min_latency_in_ms);
    bool is_min_latency_in_ms_Set() const;
    bool is_min_latency_in_ms_Valid() const;

    qint32 getProbesFailed() const;
    void setProbesFailed(const qint32 &probes_failed);
    bool is_probes_failed_Set() const;
    bool is_probes_failed_Valid() const;

    qint32 getProbesSent() const;
    void setProbesSent(const qint32 &probes_sent);
    bool is_probes_sent_Set() const;
    bool is_probes_sent_Valid() const;

    QDateTime getStartTime() const;
    void setStartTime(const QDateTime &start_time);
    bool is_start_time_Set() const;
    bool is_start_time_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_avg_latency_in_ms;
    bool m_avg_latency_in_ms_isSet;
    bool m_avg_latency_in_ms_isValid;

    QString m_connection_state;
    bool m_connection_state_isSet;
    bool m_connection_state_isValid;

    QDateTime m_end_time;
    bool m_end_time_isSet;
    bool m_end_time_isValid;

    QString m_evaluation_state;
    bool m_evaluation_state_isSet;
    bool m_evaluation_state_isValid;

    QList<OAIConnectivityHop> m_hops;
    bool m_hops_isSet;
    bool m_hops_isValid;

    qint32 m_max_latency_in_ms;
    bool m_max_latency_in_ms_isSet;
    bool m_max_latency_in_ms_isValid;

    qint32 m_min_latency_in_ms;
    bool m_min_latency_in_ms_isSet;
    bool m_min_latency_in_ms_isValid;

    qint32 m_probes_failed;
    bool m_probes_failed_isSet;
    bool m_probes_failed_isValid;

    qint32 m_probes_sent;
    bool m_probes_sent_isSet;
    bool m_probes_sent_isValid;

    QDateTime m_start_time;
    bool m_start_time_isSet;
    bool m_start_time_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIConnectionStateSnapshot)

#endif // OAIConnectionStateSnapshot_H
