/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2018-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAvailableProvidersListParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAvailableProvidersListParameters::OAIAvailableProvidersListParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAvailableProvidersListParameters::OAIAvailableProvidersListParameters() {
    this->initializeModel();
}

OAIAvailableProvidersListParameters::~OAIAvailableProvidersListParameters() {}

void OAIAvailableProvidersListParameters::initializeModel() {

    m_azure_locations_isSet = false;
    m_azure_locations_isValid = false;

    m_city_isSet = false;
    m_city_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAIAvailableProvidersListParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAvailableProvidersListParameters::fromJsonObject(QJsonObject json) {

    m_azure_locations_isValid = ::OpenAPI::fromJsonValue(m_azure_locations, json[QString("azureLocations")]);
    m_azure_locations_isSet = !json[QString("azureLocations")].isNull() && m_azure_locations_isValid;

    m_city_isValid = ::OpenAPI::fromJsonValue(m_city, json[QString("city")]);
    m_city_isSet = !json[QString("city")].isNull() && m_city_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;
}

QString OAIAvailableProvidersListParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAvailableProvidersListParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_azure_locations.size() > 0) {
        obj.insert(QString("azureLocations"), ::OpenAPI::toJsonValue(m_azure_locations));
    }
    if (m_city_isSet) {
        obj.insert(QString("city"), ::OpenAPI::toJsonValue(m_city));
    }
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

QList<QString> OAIAvailableProvidersListParameters::getAzureLocations() const {
    return m_azure_locations;
}
void OAIAvailableProvidersListParameters::setAzureLocations(const QList<QString> &azure_locations) {
    m_azure_locations = azure_locations;
    m_azure_locations_isSet = true;
}

bool OAIAvailableProvidersListParameters::is_azure_locations_Set() const{
    return m_azure_locations_isSet;
}

bool OAIAvailableProvidersListParameters::is_azure_locations_Valid() const{
    return m_azure_locations_isValid;
}

QString OAIAvailableProvidersListParameters::getCity() const {
    return m_city;
}
void OAIAvailableProvidersListParameters::setCity(const QString &city) {
    m_city = city;
    m_city_isSet = true;
}

bool OAIAvailableProvidersListParameters::is_city_Set() const{
    return m_city_isSet;
}

bool OAIAvailableProvidersListParameters::is_city_Valid() const{
    return m_city_isValid;
}

QString OAIAvailableProvidersListParameters::getCountry() const {
    return m_country;
}
void OAIAvailableProvidersListParameters::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIAvailableProvidersListParameters::is_country_Set() const{
    return m_country_isSet;
}

bool OAIAvailableProvidersListParameters::is_country_Valid() const{
    return m_country_isValid;
}

QString OAIAvailableProvidersListParameters::getState() const {
    return m_state;
}
void OAIAvailableProvidersListParameters::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIAvailableProvidersListParameters::is_state_Set() const{
    return m_state_isSet;
}

bool OAIAvailableProvidersListParameters::is_state_Valid() const{
    return m_state_isValid;
}

bool OAIAvailableProvidersListParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_azure_locations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAvailableProvidersListParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
