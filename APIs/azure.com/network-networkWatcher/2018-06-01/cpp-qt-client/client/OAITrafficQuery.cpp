/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2018-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITrafficQuery.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITrafficQuery::OAITrafficQuery(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITrafficQuery::OAITrafficQuery() {
    this->initializeModel();
}

OAITrafficQuery::~OAITrafficQuery() {}

void OAITrafficQuery::initializeModel() {

    m_destination_isSet = false;
    m_destination_isValid = false;

    m_destination_port_isSet = false;
    m_destination_port_isValid = false;

    m_direction_isSet = false;
    m_direction_isValid = false;

    m_protocol_isSet = false;
    m_protocol_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;
}

void OAITrafficQuery::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITrafficQuery::fromJsonObject(QJsonObject json) {

    m_destination_isValid = ::OpenAPI::fromJsonValue(m_destination, json[QString("destination")]);
    m_destination_isSet = !json[QString("destination")].isNull() && m_destination_isValid;

    m_destination_port_isValid = ::OpenAPI::fromJsonValue(m_destination_port, json[QString("destinationPort")]);
    m_destination_port_isSet = !json[QString("destinationPort")].isNull() && m_destination_port_isValid;

    m_direction_isValid = ::OpenAPI::fromJsonValue(m_direction, json[QString("direction")]);
    m_direction_isSet = !json[QString("direction")].isNull() && m_direction_isValid;

    m_protocol_isValid = ::OpenAPI::fromJsonValue(m_protocol, json[QString("protocol")]);
    m_protocol_isSet = !json[QString("protocol")].isNull() && m_protocol_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;
}

QString OAITrafficQuery::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITrafficQuery::asJsonObject() const {
    QJsonObject obj;
    if (m_destination_isSet) {
        obj.insert(QString("destination"), ::OpenAPI::toJsonValue(m_destination));
    }
    if (m_destination_port_isSet) {
        obj.insert(QString("destinationPort"), ::OpenAPI::toJsonValue(m_destination_port));
    }
    if (m_direction_isSet) {
        obj.insert(QString("direction"), ::OpenAPI::toJsonValue(m_direction));
    }
    if (m_protocol_isSet) {
        obj.insert(QString("protocol"), ::OpenAPI::toJsonValue(m_protocol));
    }
    if (m_source_isSet) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    return obj;
}

QString OAITrafficQuery::getDestination() const {
    return m_destination;
}
void OAITrafficQuery::setDestination(const QString &destination) {
    m_destination = destination;
    m_destination_isSet = true;
}

bool OAITrafficQuery::is_destination_Set() const{
    return m_destination_isSet;
}

bool OAITrafficQuery::is_destination_Valid() const{
    return m_destination_isValid;
}

QString OAITrafficQuery::getDestinationPort() const {
    return m_destination_port;
}
void OAITrafficQuery::setDestinationPort(const QString &destination_port) {
    m_destination_port = destination_port;
    m_destination_port_isSet = true;
}

bool OAITrafficQuery::is_destination_port_Set() const{
    return m_destination_port_isSet;
}

bool OAITrafficQuery::is_destination_port_Valid() const{
    return m_destination_port_isValid;
}

QString OAITrafficQuery::getDirection() const {
    return m_direction;
}
void OAITrafficQuery::setDirection(const QString &direction) {
    m_direction = direction;
    m_direction_isSet = true;
}

bool OAITrafficQuery::is_direction_Set() const{
    return m_direction_isSet;
}

bool OAITrafficQuery::is_direction_Valid() const{
    return m_direction_isValid;
}

QString OAITrafficQuery::getProtocol() const {
    return m_protocol;
}
void OAITrafficQuery::setProtocol(const QString &protocol) {
    m_protocol = protocol;
    m_protocol_isSet = true;
}

bool OAITrafficQuery::is_protocol_Set() const{
    return m_protocol_isSet;
}

bool OAITrafficQuery::is_protocol_Valid() const{
    return m_protocol_isValid;
}

QString OAITrafficQuery::getSource() const {
    return m_source;
}
void OAITrafficQuery::setSource(const QString &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAITrafficQuery::is_source_Set() const{
    return m_source_isSet;
}

bool OAITrafficQuery::is_source_Valid() const{
    return m_source_isValid;
}

bool OAITrafficQuery::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_destination_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_direction_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protocol_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITrafficQuery::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_destination_isValid && m_destination_port_isValid && m_direction_isValid && m_protocol_isValid && m_source_isValid && true;
}

} // namespace OpenAPI
