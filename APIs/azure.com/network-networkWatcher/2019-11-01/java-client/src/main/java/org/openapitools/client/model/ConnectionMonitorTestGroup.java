/*
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-11-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes the connection monitor test group.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:33:12.028284-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ConnectionMonitorTestGroup {
  public static final String SERIALIZED_NAME_DESTINATIONS = "destinations";
  @SerializedName(SERIALIZED_NAME_DESTINATIONS)
  private List<String> destinations = new ArrayList<>();

  public static final String SERIALIZED_NAME_DISABLE = "disable";
  @SerializedName(SERIALIZED_NAME_DISABLE)
  private Boolean disable;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SOURCES = "sources";
  @SerializedName(SERIALIZED_NAME_SOURCES)
  private List<String> sources = new ArrayList<>();

  public static final String SERIALIZED_NAME_TEST_CONFIGURATIONS = "testConfigurations";
  @SerializedName(SERIALIZED_NAME_TEST_CONFIGURATIONS)
  private List<String> testConfigurations = new ArrayList<>();

  public ConnectionMonitorTestGroup() {
  }

  public ConnectionMonitorTestGroup destinations(List<String> destinations) {
    this.destinations = destinations;
    return this;
  }

  public ConnectionMonitorTestGroup addDestinationsItem(String destinationsItem) {
    if (this.destinations == null) {
      this.destinations = new ArrayList<>();
    }
    this.destinations.add(destinationsItem);
    return this;
  }

  /**
   * List of destination endpoint names.
   * @return destinations
   */
  @javax.annotation.Nonnull
  public List<String> getDestinations() {
    return destinations;
  }

  public void setDestinations(List<String> destinations) {
    this.destinations = destinations;
  }


  public ConnectionMonitorTestGroup disable(Boolean disable) {
    this.disable = disable;
    return this;
  }

  /**
   * Value indicating whether test group is disabled.
   * @return disable
   */
  @javax.annotation.Nullable
  public Boolean getDisable() {
    return disable;
  }

  public void setDisable(Boolean disable) {
    this.disable = disable;
  }


  public ConnectionMonitorTestGroup name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the connection monitor test group.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ConnectionMonitorTestGroup sources(List<String> sources) {
    this.sources = sources;
    return this;
  }

  public ConnectionMonitorTestGroup addSourcesItem(String sourcesItem) {
    if (this.sources == null) {
      this.sources = new ArrayList<>();
    }
    this.sources.add(sourcesItem);
    return this;
  }

  /**
   * List of source endpoint names.
   * @return sources
   */
  @javax.annotation.Nonnull
  public List<String> getSources() {
    return sources;
  }

  public void setSources(List<String> sources) {
    this.sources = sources;
  }


  public ConnectionMonitorTestGroup testConfigurations(List<String> testConfigurations) {
    this.testConfigurations = testConfigurations;
    return this;
  }

  public ConnectionMonitorTestGroup addTestConfigurationsItem(String testConfigurationsItem) {
    if (this.testConfigurations == null) {
      this.testConfigurations = new ArrayList<>();
    }
    this.testConfigurations.add(testConfigurationsItem);
    return this;
  }

  /**
   * List of test configuration names.
   * @return testConfigurations
   */
  @javax.annotation.Nonnull
  public List<String> getTestConfigurations() {
    return testConfigurations;
  }

  public void setTestConfigurations(List<String> testConfigurations) {
    this.testConfigurations = testConfigurations;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConnectionMonitorTestGroup connectionMonitorTestGroup = (ConnectionMonitorTestGroup) o;
    return Objects.equals(this.destinations, connectionMonitorTestGroup.destinations) &&
        Objects.equals(this.disable, connectionMonitorTestGroup.disable) &&
        Objects.equals(this.name, connectionMonitorTestGroup.name) &&
        Objects.equals(this.sources, connectionMonitorTestGroup.sources) &&
        Objects.equals(this.testConfigurations, connectionMonitorTestGroup.testConfigurations);
  }

  @Override
  public int hashCode() {
    return Objects.hash(destinations, disable, name, sources, testConfigurations);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConnectionMonitorTestGroup {\n");
    sb.append("    destinations: ").append(toIndentedString(destinations)).append("\n");
    sb.append("    disable: ").append(toIndentedString(disable)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    sources: ").append(toIndentedString(sources)).append("\n");
    sb.append("    testConfigurations: ").append(toIndentedString(testConfigurations)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("destinations");
    openapiFields.add("disable");
    openapiFields.add("name");
    openapiFields.add("sources");
    openapiFields.add("testConfigurations");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("destinations");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("sources");
    openapiRequiredFields.add("testConfigurations");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ConnectionMonitorTestGroup
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConnectionMonitorTestGroup.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConnectionMonitorTestGroup is not found in the empty JSON string", ConnectionMonitorTestGroup.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConnectionMonitorTestGroup.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConnectionMonitorTestGroup` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ConnectionMonitorTestGroup.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the required json array is present
      if (jsonObj.get("destinations") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("destinations").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `destinations` to be an array in the JSON string but got `%s`", jsonObj.get("destinations").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("sources") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("sources").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `sources` to be an array in the JSON string but got `%s`", jsonObj.get("sources").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("testConfigurations") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("testConfigurations").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `testConfigurations` to be an array in the JSON string but got `%s`", jsonObj.get("testConfigurations").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConnectionMonitorTestGroup.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConnectionMonitorTestGroup' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConnectionMonitorTestGroup> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConnectionMonitorTestGroup.class));

       return (TypeAdapter<T>) new TypeAdapter<ConnectionMonitorTestGroup>() {
           @Override
           public void write(JsonWriter out, ConnectionMonitorTestGroup value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConnectionMonitorTestGroup read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ConnectionMonitorTestGroup given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ConnectionMonitorTestGroup
   * @throws IOException if the JSON string is invalid with respect to ConnectionMonitorTestGroup
   */
  public static ConnectionMonitorTestGroup fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConnectionMonitorTestGroup.class);
  }

  /**
   * Convert an instance of ConnectionMonitorTestGroup to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

