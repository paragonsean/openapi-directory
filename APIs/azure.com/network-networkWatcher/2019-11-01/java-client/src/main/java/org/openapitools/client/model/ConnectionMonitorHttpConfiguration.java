/*
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-11-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.HTTPHeader;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes the HTTP configuration.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:33:12.028284-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ConnectionMonitorHttpConfiguration {
  /**
   * The HTTP method to use.
   */
  @JsonAdapter(MethodEnum.Adapter.class)
  public enum MethodEnum {
    GET("Get"),
    
    POST("Post");

    private String value;

    MethodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MethodEnum fromValue(String value) {
      for (MethodEnum b : MethodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MethodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MethodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MethodEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MethodEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MethodEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_METHOD = "method";
  @SerializedName(SERIALIZED_NAME_METHOD)
  private MethodEnum method;

  public static final String SERIALIZED_NAME_PATH = "path";
  @SerializedName(SERIALIZED_NAME_PATH)
  private String path;

  public static final String SERIALIZED_NAME_PORT = "port";
  @SerializedName(SERIALIZED_NAME_PORT)
  private Integer port;

  public static final String SERIALIZED_NAME_PREFER_H_T_T_P_S = "preferHTTPS";
  @SerializedName(SERIALIZED_NAME_PREFER_H_T_T_P_S)
  private Boolean preferHTTPS;

  public static final String SERIALIZED_NAME_REQUEST_HEADERS = "requestHeaders";
  @SerializedName(SERIALIZED_NAME_REQUEST_HEADERS)
  private List<HTTPHeader> requestHeaders = new ArrayList<>();

  public static final String SERIALIZED_NAME_VALID_STATUS_CODE_RANGES = "validStatusCodeRanges";
  @SerializedName(SERIALIZED_NAME_VALID_STATUS_CODE_RANGES)
  private List<String> validStatusCodeRanges = new ArrayList<>();

  public ConnectionMonitorHttpConfiguration() {
  }

  public ConnectionMonitorHttpConfiguration method(MethodEnum method) {
    this.method = method;
    return this;
  }

  /**
   * The HTTP method to use.
   * @return method
   */
  @javax.annotation.Nullable
  public MethodEnum getMethod() {
    return method;
  }

  public void setMethod(MethodEnum method) {
    this.method = method;
  }


  public ConnectionMonitorHttpConfiguration path(String path) {
    this.path = path;
    return this;
  }

  /**
   * The path component of the URI. For instance, \&quot;/dir1/dir2\&quot;.
   * @return path
   */
  @javax.annotation.Nullable
  public String getPath() {
    return path;
  }

  public void setPath(String path) {
    this.path = path;
  }


  public ConnectionMonitorHttpConfiguration port(Integer port) {
    this.port = port;
    return this;
  }

  /**
   * The port to connect to.
   * @return port
   */
  @javax.annotation.Nullable
  public Integer getPort() {
    return port;
  }

  public void setPort(Integer port) {
    this.port = port;
  }


  public ConnectionMonitorHttpConfiguration preferHTTPS(Boolean preferHTTPS) {
    this.preferHTTPS = preferHTTPS;
    return this;
  }

  /**
   * Value indicating whether HTTPS is preferred over HTTP in cases where the choice is not explicit.
   * @return preferHTTPS
   */
  @javax.annotation.Nullable
  public Boolean getPreferHTTPS() {
    return preferHTTPS;
  }

  public void setPreferHTTPS(Boolean preferHTTPS) {
    this.preferHTTPS = preferHTTPS;
  }


  public ConnectionMonitorHttpConfiguration requestHeaders(List<HTTPHeader> requestHeaders) {
    this.requestHeaders = requestHeaders;
    return this;
  }

  public ConnectionMonitorHttpConfiguration addRequestHeadersItem(HTTPHeader requestHeadersItem) {
    if (this.requestHeaders == null) {
      this.requestHeaders = new ArrayList<>();
    }
    this.requestHeaders.add(requestHeadersItem);
    return this;
  }

  /**
   * The HTTP headers to transmit with the request.
   * @return requestHeaders
   */
  @javax.annotation.Nullable
  public List<HTTPHeader> getRequestHeaders() {
    return requestHeaders;
  }

  public void setRequestHeaders(List<HTTPHeader> requestHeaders) {
    this.requestHeaders = requestHeaders;
  }


  public ConnectionMonitorHttpConfiguration validStatusCodeRanges(List<String> validStatusCodeRanges) {
    this.validStatusCodeRanges = validStatusCodeRanges;
    return this;
  }

  public ConnectionMonitorHttpConfiguration addValidStatusCodeRangesItem(String validStatusCodeRangesItem) {
    if (this.validStatusCodeRanges == null) {
      this.validStatusCodeRanges = new ArrayList<>();
    }
    this.validStatusCodeRanges.add(validStatusCodeRangesItem);
    return this;
  }

  /**
   * HTTP status codes to consider successful. For instance, \&quot;2xx,301-304,418\&quot;.
   * @return validStatusCodeRanges
   */
  @javax.annotation.Nullable
  public List<String> getValidStatusCodeRanges() {
    return validStatusCodeRanges;
  }

  public void setValidStatusCodeRanges(List<String> validStatusCodeRanges) {
    this.validStatusCodeRanges = validStatusCodeRanges;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConnectionMonitorHttpConfiguration connectionMonitorHttpConfiguration = (ConnectionMonitorHttpConfiguration) o;
    return Objects.equals(this.method, connectionMonitorHttpConfiguration.method) &&
        Objects.equals(this.path, connectionMonitorHttpConfiguration.path) &&
        Objects.equals(this.port, connectionMonitorHttpConfiguration.port) &&
        Objects.equals(this.preferHTTPS, connectionMonitorHttpConfiguration.preferHTTPS) &&
        Objects.equals(this.requestHeaders, connectionMonitorHttpConfiguration.requestHeaders) &&
        Objects.equals(this.validStatusCodeRanges, connectionMonitorHttpConfiguration.validStatusCodeRanges);
  }

  @Override
  public int hashCode() {
    return Objects.hash(method, path, port, preferHTTPS, requestHeaders, validStatusCodeRanges);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConnectionMonitorHttpConfiguration {\n");
    sb.append("    method: ").append(toIndentedString(method)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("    preferHTTPS: ").append(toIndentedString(preferHTTPS)).append("\n");
    sb.append("    requestHeaders: ").append(toIndentedString(requestHeaders)).append("\n");
    sb.append("    validStatusCodeRanges: ").append(toIndentedString(validStatusCodeRanges)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("method");
    openapiFields.add("path");
    openapiFields.add("port");
    openapiFields.add("preferHTTPS");
    openapiFields.add("requestHeaders");
    openapiFields.add("validStatusCodeRanges");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ConnectionMonitorHttpConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConnectionMonitorHttpConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConnectionMonitorHttpConfiguration is not found in the empty JSON string", ConnectionMonitorHttpConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConnectionMonitorHttpConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConnectionMonitorHttpConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("method") != null && !jsonObj.get("method").isJsonNull()) && !jsonObj.get("method").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `method` to be a primitive type in the JSON string but got `%s`", jsonObj.get("method").toString()));
      }
      // validate the optional field `method`
      if (jsonObj.get("method") != null && !jsonObj.get("method").isJsonNull()) {
        MethodEnum.validateJsonElement(jsonObj.get("method"));
      }
      if ((jsonObj.get("path") != null && !jsonObj.get("path").isJsonNull()) && !jsonObj.get("path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("path").toString()));
      }
      if (jsonObj.get("requestHeaders") != null && !jsonObj.get("requestHeaders").isJsonNull()) {
        JsonArray jsonArrayrequestHeaders = jsonObj.getAsJsonArray("requestHeaders");
        if (jsonArrayrequestHeaders != null) {
          // ensure the json data is an array
          if (!jsonObj.get("requestHeaders").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `requestHeaders` to be an array in the JSON string but got `%s`", jsonObj.get("requestHeaders").toString()));
          }

          // validate the optional field `requestHeaders` (array)
          for (int i = 0; i < jsonArrayrequestHeaders.size(); i++) {
            HTTPHeader.validateJsonElement(jsonArrayrequestHeaders.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("validStatusCodeRanges") != null && !jsonObj.get("validStatusCodeRanges").isJsonNull() && !jsonObj.get("validStatusCodeRanges").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `validStatusCodeRanges` to be an array in the JSON string but got `%s`", jsonObj.get("validStatusCodeRanges").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConnectionMonitorHttpConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConnectionMonitorHttpConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConnectionMonitorHttpConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConnectionMonitorHttpConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<ConnectionMonitorHttpConfiguration>() {
           @Override
           public void write(JsonWriter out, ConnectionMonitorHttpConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConnectionMonitorHttpConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ConnectionMonitorHttpConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ConnectionMonitorHttpConfiguration
   * @throws IOException if the JSON string is invalid with respect to ConnectionMonitorHttpConfiguration
   */
  public static ConnectionMonitorHttpConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConnectionMonitorHttpConfiguration.class);
  }

  /**
   * Convert an instance of ConnectionMonitorHttpConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

