/*
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-11-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.FlowLogFormatParameters;
import org.openapitools.client.model.RetentionPolicyParameters;
import org.openapitools.client.model.TrafficAnalyticsProperties;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Parameters that define the configuration of flow log.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:33:12.028284-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FlowLogPropertiesFormat {
  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_FLOW_ANALYTICS_CONFIGURATION = "flowAnalyticsConfiguration";
  @SerializedName(SERIALIZED_NAME_FLOW_ANALYTICS_CONFIGURATION)
  private TrafficAnalyticsProperties flowAnalyticsConfiguration;

  public static final String SERIALIZED_NAME_FORMAT = "format";
  @SerializedName(SERIALIZED_NAME_FORMAT)
  private FlowLogFormatParameters format;

  /**
   * The current provisioning state.
   */
  @JsonAdapter(ProvisioningStateEnum.Adapter.class)
  public enum ProvisioningStateEnum {
    SUCCEEDED("Succeeded"),
    
    UPDATING("Updating"),
    
    DELETING("Deleting"),
    
    FAILED("Failed");

    private String value;

    ProvisioningStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProvisioningStateEnum fromValue(String value) {
      for (ProvisioningStateEnum b : ProvisioningStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProvisioningStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProvisioningStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProvisioningStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProvisioningStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProvisioningStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private ProvisioningStateEnum provisioningState;

  public static final String SERIALIZED_NAME_RETENTION_POLICY = "retentionPolicy";
  @SerializedName(SERIALIZED_NAME_RETENTION_POLICY)
  private RetentionPolicyParameters retentionPolicy;

  public static final String SERIALIZED_NAME_STORAGE_ID = "storageId";
  @SerializedName(SERIALIZED_NAME_STORAGE_ID)
  private String storageId;

  public static final String SERIALIZED_NAME_TARGET_RESOURCE_GUID = "targetResourceGuid";
  @SerializedName(SERIALIZED_NAME_TARGET_RESOURCE_GUID)
  private String targetResourceGuid;

  public static final String SERIALIZED_NAME_TARGET_RESOURCE_ID = "targetResourceId";
  @SerializedName(SERIALIZED_NAME_TARGET_RESOURCE_ID)
  private String targetResourceId;

  public FlowLogPropertiesFormat() {
  }

  public FlowLogPropertiesFormat(
     ProvisioningStateEnum provisioningState, 
     String targetResourceGuid
  ) {
    this();
    this.provisioningState = provisioningState;
    this.targetResourceGuid = targetResourceGuid;
  }

  public FlowLogPropertiesFormat enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  /**
   * Flag to enable/disable flow logging.
   * @return enabled
   */
  @javax.annotation.Nullable
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public FlowLogPropertiesFormat flowAnalyticsConfiguration(TrafficAnalyticsProperties flowAnalyticsConfiguration) {
    this.flowAnalyticsConfiguration = flowAnalyticsConfiguration;
    return this;
  }

  /**
   * Get flowAnalyticsConfiguration
   * @return flowAnalyticsConfiguration
   */
  @javax.annotation.Nullable
  public TrafficAnalyticsProperties getFlowAnalyticsConfiguration() {
    return flowAnalyticsConfiguration;
  }

  public void setFlowAnalyticsConfiguration(TrafficAnalyticsProperties flowAnalyticsConfiguration) {
    this.flowAnalyticsConfiguration = flowAnalyticsConfiguration;
  }


  public FlowLogPropertiesFormat format(FlowLogFormatParameters format) {
    this.format = format;
    return this;
  }

  /**
   * Get format
   * @return format
   */
  @javax.annotation.Nullable
  public FlowLogFormatParameters getFormat() {
    return format;
  }

  public void setFormat(FlowLogFormatParameters format) {
    this.format = format;
  }


  /**
   * The current provisioning state.
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public ProvisioningStateEnum getProvisioningState() {
    return provisioningState;
  }



  public FlowLogPropertiesFormat retentionPolicy(RetentionPolicyParameters retentionPolicy) {
    this.retentionPolicy = retentionPolicy;
    return this;
  }

  /**
   * Get retentionPolicy
   * @return retentionPolicy
   */
  @javax.annotation.Nullable
  public RetentionPolicyParameters getRetentionPolicy() {
    return retentionPolicy;
  }

  public void setRetentionPolicy(RetentionPolicyParameters retentionPolicy) {
    this.retentionPolicy = retentionPolicy;
  }


  public FlowLogPropertiesFormat storageId(String storageId) {
    this.storageId = storageId;
    return this;
  }

  /**
   * ID of the storage account which is used to store the flow log.
   * @return storageId
   */
  @javax.annotation.Nonnull
  public String getStorageId() {
    return storageId;
  }

  public void setStorageId(String storageId) {
    this.storageId = storageId;
  }


  /**
   * Guid of network security group to which flow log will be applied.
   * @return targetResourceGuid
   */
  @javax.annotation.Nullable
  public String getTargetResourceGuid() {
    return targetResourceGuid;
  }



  public FlowLogPropertiesFormat targetResourceId(String targetResourceId) {
    this.targetResourceId = targetResourceId;
    return this;
  }

  /**
   * ID of network security group to which flow log will be applied.
   * @return targetResourceId
   */
  @javax.annotation.Nonnull
  public String getTargetResourceId() {
    return targetResourceId;
  }

  public void setTargetResourceId(String targetResourceId) {
    this.targetResourceId = targetResourceId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FlowLogPropertiesFormat flowLogPropertiesFormat = (FlowLogPropertiesFormat) o;
    return Objects.equals(this.enabled, flowLogPropertiesFormat.enabled) &&
        Objects.equals(this.flowAnalyticsConfiguration, flowLogPropertiesFormat.flowAnalyticsConfiguration) &&
        Objects.equals(this.format, flowLogPropertiesFormat.format) &&
        Objects.equals(this.provisioningState, flowLogPropertiesFormat.provisioningState) &&
        Objects.equals(this.retentionPolicy, flowLogPropertiesFormat.retentionPolicy) &&
        Objects.equals(this.storageId, flowLogPropertiesFormat.storageId) &&
        Objects.equals(this.targetResourceGuid, flowLogPropertiesFormat.targetResourceGuid) &&
        Objects.equals(this.targetResourceId, flowLogPropertiesFormat.targetResourceId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(enabled, flowAnalyticsConfiguration, format, provisioningState, retentionPolicy, storageId, targetResourceGuid, targetResourceId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FlowLogPropertiesFormat {\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    flowAnalyticsConfiguration: ").append(toIndentedString(flowAnalyticsConfiguration)).append("\n");
    sb.append("    format: ").append(toIndentedString(format)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("    retentionPolicy: ").append(toIndentedString(retentionPolicy)).append("\n");
    sb.append("    storageId: ").append(toIndentedString(storageId)).append("\n");
    sb.append("    targetResourceGuid: ").append(toIndentedString(targetResourceGuid)).append("\n");
    sb.append("    targetResourceId: ").append(toIndentedString(targetResourceId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("enabled");
    openapiFields.add("flowAnalyticsConfiguration");
    openapiFields.add("format");
    openapiFields.add("provisioningState");
    openapiFields.add("retentionPolicy");
    openapiFields.add("storageId");
    openapiFields.add("targetResourceGuid");
    openapiFields.add("targetResourceId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("storageId");
    openapiRequiredFields.add("targetResourceId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FlowLogPropertiesFormat
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FlowLogPropertiesFormat.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FlowLogPropertiesFormat is not found in the empty JSON string", FlowLogPropertiesFormat.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FlowLogPropertiesFormat.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FlowLogPropertiesFormat` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : FlowLogPropertiesFormat.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `flowAnalyticsConfiguration`
      if (jsonObj.get("flowAnalyticsConfiguration") != null && !jsonObj.get("flowAnalyticsConfiguration").isJsonNull()) {
        TrafficAnalyticsProperties.validateJsonElement(jsonObj.get("flowAnalyticsConfiguration"));
      }
      // validate the optional field `format`
      if (jsonObj.get("format") != null && !jsonObj.get("format").isJsonNull()) {
        FlowLogFormatParameters.validateJsonElement(jsonObj.get("format"));
      }
      if ((jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) && !jsonObj.get("provisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningState").toString()));
      }
      // validate the optional field `provisioningState`
      if (jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) {
        ProvisioningStateEnum.validateJsonElement(jsonObj.get("provisioningState"));
      }
      // validate the optional field `retentionPolicy`
      if (jsonObj.get("retentionPolicy") != null && !jsonObj.get("retentionPolicy").isJsonNull()) {
        RetentionPolicyParameters.validateJsonElement(jsonObj.get("retentionPolicy"));
      }
      if (!jsonObj.get("storageId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `storageId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("storageId").toString()));
      }
      if ((jsonObj.get("targetResourceGuid") != null && !jsonObj.get("targetResourceGuid").isJsonNull()) && !jsonObj.get("targetResourceGuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetResourceGuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("targetResourceGuid").toString()));
      }
      if (!jsonObj.get("targetResourceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetResourceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("targetResourceId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FlowLogPropertiesFormat.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FlowLogPropertiesFormat' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FlowLogPropertiesFormat> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FlowLogPropertiesFormat.class));

       return (TypeAdapter<T>) new TypeAdapter<FlowLogPropertiesFormat>() {
           @Override
           public void write(JsonWriter out, FlowLogPropertiesFormat value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FlowLogPropertiesFormat read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FlowLogPropertiesFormat given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FlowLogPropertiesFormat
   * @throws IOException if the JSON string is invalid with respect to FlowLogPropertiesFormat
   */
  public static FlowLogPropertiesFormat fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FlowLogPropertiesFormat.class);
  }

  /**
   * Convert an instance of FlowLogPropertiesFormat to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

