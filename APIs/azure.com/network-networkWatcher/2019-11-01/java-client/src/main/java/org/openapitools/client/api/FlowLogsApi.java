/*
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-11-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ConnectionMonitorsListDefaultResponse;
import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.FlowLog;
import org.openapitools.client.model.FlowLogListResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FlowLogsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public FlowLogsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FlowLogsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for flowLogsCreateOrUpdate
     * @param resourceGroupName The name of the resource group. (required)
     * @param networkWatcherName The name of the network watcher. (required)
     * @param flowLogName The name of the flow log. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters that define the create or update flow log resource. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update successful. The operation returns the resulting flow log resource. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Request successful. The operation returns the resulting flow log resource. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call flowLogsCreateOrUpdateCall(String resourceGroupName, String networkWatcherName, String flowLogName, String apiVersion, String subscriptionId, FlowLog parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/flowLogs/{flowLogName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "networkWatcherName" + "}", localVarApiClient.escapeString(networkWatcherName.toString()))
            .replace("{" + "flowLogName" + "}", localVarApiClient.escapeString(flowLogName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call flowLogsCreateOrUpdateValidateBeforeCall(String resourceGroupName, String networkWatcherName, String flowLogName, String apiVersion, String subscriptionId, FlowLog parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling flowLogsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'networkWatcherName' is set
        if (networkWatcherName == null) {
            throw new ApiException("Missing the required parameter 'networkWatcherName' when calling flowLogsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'flowLogName' is set
        if (flowLogName == null) {
            throw new ApiException("Missing the required parameter 'flowLogName' when calling flowLogsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling flowLogsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling flowLogsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling flowLogsCreateOrUpdate(Async)");
        }

        return flowLogsCreateOrUpdateCall(resourceGroupName, networkWatcherName, flowLogName, apiVersion, subscriptionId, parameters, _callback);

    }

    /**
     * 
     * Create or update a flow log for the specified network security group.
     * @param resourceGroupName The name of the resource group. (required)
     * @param networkWatcherName The name of the network watcher. (required)
     * @param flowLogName The name of the flow log. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters that define the create or update flow log resource. (required)
     * @return FlowLog
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update successful. The operation returns the resulting flow log resource. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Request successful. The operation returns the resulting flow log resource. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public FlowLog flowLogsCreateOrUpdate(String resourceGroupName, String networkWatcherName, String flowLogName, String apiVersion, String subscriptionId, FlowLog parameters) throws ApiException {
        ApiResponse<FlowLog> localVarResp = flowLogsCreateOrUpdateWithHttpInfo(resourceGroupName, networkWatcherName, flowLogName, apiVersion, subscriptionId, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Create or update a flow log for the specified network security group.
     * @param resourceGroupName The name of the resource group. (required)
     * @param networkWatcherName The name of the network watcher. (required)
     * @param flowLogName The name of the flow log. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters that define the create or update flow log resource. (required)
     * @return ApiResponse&lt;FlowLog&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update successful. The operation returns the resulting flow log resource. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Request successful. The operation returns the resulting flow log resource. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FlowLog> flowLogsCreateOrUpdateWithHttpInfo(String resourceGroupName, String networkWatcherName, String flowLogName, String apiVersion, String subscriptionId, FlowLog parameters) throws ApiException {
        okhttp3.Call localVarCall = flowLogsCreateOrUpdateValidateBeforeCall(resourceGroupName, networkWatcherName, flowLogName, apiVersion, subscriptionId, parameters, null);
        Type localVarReturnType = new TypeToken<FlowLog>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create or update a flow log for the specified network security group.
     * @param resourceGroupName The name of the resource group. (required)
     * @param networkWatcherName The name of the network watcher. (required)
     * @param flowLogName The name of the flow log. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters that define the create or update flow log resource. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update successful. The operation returns the resulting flow log resource. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Request successful. The operation returns the resulting flow log resource. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call flowLogsCreateOrUpdateAsync(String resourceGroupName, String networkWatcherName, String flowLogName, String apiVersion, String subscriptionId, FlowLog parameters, final ApiCallback<FlowLog> _callback) throws ApiException {

        okhttp3.Call localVarCall = flowLogsCreateOrUpdateValidateBeforeCall(resourceGroupName, networkWatcherName, flowLogName, apiVersion, subscriptionId, parameters, _callback);
        Type localVarReturnType = new TypeToken<FlowLog>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for flowLogsDelete
     * @param resourceGroupName The name of the resource group. (required)
     * @param networkWatcherName The name of the network watcher. (required)
     * @param flowLogName The name of the flow log resource. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Delete successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call flowLogsDeleteCall(String resourceGroupName, String networkWatcherName, String flowLogName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/flowLogs/{flowLogName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "networkWatcherName" + "}", localVarApiClient.escapeString(networkWatcherName.toString()))
            .replace("{" + "flowLogName" + "}", localVarApiClient.escapeString(flowLogName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call flowLogsDeleteValidateBeforeCall(String resourceGroupName, String networkWatcherName, String flowLogName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling flowLogsDelete(Async)");
        }

        // verify the required parameter 'networkWatcherName' is set
        if (networkWatcherName == null) {
            throw new ApiException("Missing the required parameter 'networkWatcherName' when calling flowLogsDelete(Async)");
        }

        // verify the required parameter 'flowLogName' is set
        if (flowLogName == null) {
            throw new ApiException("Missing the required parameter 'flowLogName' when calling flowLogsDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling flowLogsDelete(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling flowLogsDelete(Async)");
        }

        return flowLogsDeleteCall(resourceGroupName, networkWatcherName, flowLogName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Deletes the specified flow log resource.
     * @param resourceGroupName The name of the resource group. (required)
     * @param networkWatcherName The name of the network watcher. (required)
     * @param flowLogName The name of the flow log resource. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Delete successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public void flowLogsDelete(String resourceGroupName, String networkWatcherName, String flowLogName, String apiVersion, String subscriptionId) throws ApiException {
        flowLogsDeleteWithHttpInfo(resourceGroupName, networkWatcherName, flowLogName, apiVersion, subscriptionId);
    }

    /**
     * 
     * Deletes the specified flow log resource.
     * @param resourceGroupName The name of the resource group. (required)
     * @param networkWatcherName The name of the network watcher. (required)
     * @param flowLogName The name of the flow log resource. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Delete successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> flowLogsDeleteWithHttpInfo(String resourceGroupName, String networkWatcherName, String flowLogName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = flowLogsDeleteValidateBeforeCall(resourceGroupName, networkWatcherName, flowLogName, apiVersion, subscriptionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes the specified flow log resource.
     * @param resourceGroupName The name of the resource group. (required)
     * @param networkWatcherName The name of the network watcher. (required)
     * @param flowLogName The name of the flow log resource. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Delete successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call flowLogsDeleteAsync(String resourceGroupName, String networkWatcherName, String flowLogName, String apiVersion, String subscriptionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = flowLogsDeleteValidateBeforeCall(resourceGroupName, networkWatcherName, flowLogName, apiVersion, subscriptionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for flowLogsGet
     * @param resourceGroupName The name of the resource group. (required)
     * @param networkWatcherName The name of the network watcher. (required)
     * @param flowLogName The name of the flow log resource. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns a flow log resource. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call flowLogsGetCall(String resourceGroupName, String networkWatcherName, String flowLogName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/flowLogs/{flowLogName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "networkWatcherName" + "}", localVarApiClient.escapeString(networkWatcherName.toString()))
            .replace("{" + "flowLogName" + "}", localVarApiClient.escapeString(flowLogName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call flowLogsGetValidateBeforeCall(String resourceGroupName, String networkWatcherName, String flowLogName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling flowLogsGet(Async)");
        }

        // verify the required parameter 'networkWatcherName' is set
        if (networkWatcherName == null) {
            throw new ApiException("Missing the required parameter 'networkWatcherName' when calling flowLogsGet(Async)");
        }

        // verify the required parameter 'flowLogName' is set
        if (flowLogName == null) {
            throw new ApiException("Missing the required parameter 'flowLogName' when calling flowLogsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling flowLogsGet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling flowLogsGet(Async)");
        }

        return flowLogsGetCall(resourceGroupName, networkWatcherName, flowLogName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Gets a flow log resource by name.
     * @param resourceGroupName The name of the resource group. (required)
     * @param networkWatcherName The name of the network watcher. (required)
     * @param flowLogName The name of the flow log resource. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return FlowLog
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns a flow log resource. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public FlowLog flowLogsGet(String resourceGroupName, String networkWatcherName, String flowLogName, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<FlowLog> localVarResp = flowLogsGetWithHttpInfo(resourceGroupName, networkWatcherName, flowLogName, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets a flow log resource by name.
     * @param resourceGroupName The name of the resource group. (required)
     * @param networkWatcherName The name of the network watcher. (required)
     * @param flowLogName The name of the flow log resource. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;FlowLog&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns a flow log resource. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FlowLog> flowLogsGetWithHttpInfo(String resourceGroupName, String networkWatcherName, String flowLogName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = flowLogsGetValidateBeforeCall(resourceGroupName, networkWatcherName, flowLogName, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<FlowLog>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets a flow log resource by name.
     * @param resourceGroupName The name of the resource group. (required)
     * @param networkWatcherName The name of the network watcher. (required)
     * @param flowLogName The name of the flow log resource. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns a flow log resource. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call flowLogsGetAsync(String resourceGroupName, String networkWatcherName, String flowLogName, String apiVersion, String subscriptionId, final ApiCallback<FlowLog> _callback) throws ApiException {

        okhttp3.Call localVarCall = flowLogsGetValidateBeforeCall(resourceGroupName, networkWatcherName, flowLogName, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<FlowLog>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for flowLogsList
     * @param resourceGroupName The name of the resource group containing Network Watcher. (required)
     * @param networkWatcherName The name of the Network Watcher resource. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful flow log enumeration request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call flowLogsListCall(String resourceGroupName, String networkWatcherName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/flowLogs"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "networkWatcherName" + "}", localVarApiClient.escapeString(networkWatcherName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call flowLogsListValidateBeforeCall(String resourceGroupName, String networkWatcherName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling flowLogsList(Async)");
        }

        // verify the required parameter 'networkWatcherName' is set
        if (networkWatcherName == null) {
            throw new ApiException("Missing the required parameter 'networkWatcherName' when calling flowLogsList(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling flowLogsList(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling flowLogsList(Async)");
        }

        return flowLogsListCall(resourceGroupName, networkWatcherName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Lists all flow log resources for the specified Network Watcher.
     * @param resourceGroupName The name of the resource group containing Network Watcher. (required)
     * @param networkWatcherName The name of the Network Watcher resource. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return FlowLogListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful flow log enumeration request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public FlowLogListResult flowLogsList(String resourceGroupName, String networkWatcherName, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<FlowLogListResult> localVarResp = flowLogsListWithHttpInfo(resourceGroupName, networkWatcherName, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists all flow log resources for the specified Network Watcher.
     * @param resourceGroupName The name of the resource group containing Network Watcher. (required)
     * @param networkWatcherName The name of the Network Watcher resource. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;FlowLogListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful flow log enumeration request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FlowLogListResult> flowLogsListWithHttpInfo(String resourceGroupName, String networkWatcherName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = flowLogsListValidateBeforeCall(resourceGroupName, networkWatcherName, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<FlowLogListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists all flow log resources for the specified Network Watcher.
     * @param resourceGroupName The name of the resource group containing Network Watcher. (required)
     * @param networkWatcherName The name of the Network Watcher resource. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful flow log enumeration request. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call flowLogsListAsync(String resourceGroupName, String networkWatcherName, String apiVersion, String subscriptionId, final ApiCallback<FlowLogListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = flowLogsListValidateBeforeCall(resourceGroupName, networkWatcherName, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<FlowLogListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
