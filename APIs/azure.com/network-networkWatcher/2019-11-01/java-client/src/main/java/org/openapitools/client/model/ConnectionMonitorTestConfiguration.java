/*
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-11-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ConnectionMonitorHttpConfiguration;
import org.openapitools.client.model.ConnectionMonitorIcmpConfiguration;
import org.openapitools.client.model.ConnectionMonitorSuccessThreshold;
import org.openapitools.client.model.ConnectionMonitorTcpConfiguration;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes a connection monitor test configuration.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:33:12.028284-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ConnectionMonitorTestConfiguration {
  public static final String SERIALIZED_NAME_HTTP_CONFIGURATION = "httpConfiguration";
  @SerializedName(SERIALIZED_NAME_HTTP_CONFIGURATION)
  private ConnectionMonitorHttpConfiguration httpConfiguration;

  public static final String SERIALIZED_NAME_ICMP_CONFIGURATION = "icmpConfiguration";
  @SerializedName(SERIALIZED_NAME_ICMP_CONFIGURATION)
  private ConnectionMonitorIcmpConfiguration icmpConfiguration;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  /**
   * The preferred IP version to use in test evaluation. The connection monitor may choose to use a different version depending on other parameters.
   */
  @JsonAdapter(PreferredIPVersionEnum.Adapter.class)
  public enum PreferredIPVersionEnum {
    IPV4("IPv4"),
    
    IPV6("IPv6");

    private String value;

    PreferredIPVersionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PreferredIPVersionEnum fromValue(String value) {
      for (PreferredIPVersionEnum b : PreferredIPVersionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PreferredIPVersionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PreferredIPVersionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PreferredIPVersionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PreferredIPVersionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PreferredIPVersionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PREFERRED_I_P_VERSION = "preferredIPVersion";
  @SerializedName(SERIALIZED_NAME_PREFERRED_I_P_VERSION)
  private PreferredIPVersionEnum preferredIPVersion;

  /**
   * The protocol to use in test evaluation.
   */
  @JsonAdapter(ProtocolEnum.Adapter.class)
  public enum ProtocolEnum {
    TCP("Tcp"),
    
    HTTP("Http"),
    
    ICMP("Icmp");

    private String value;

    ProtocolEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProtocolEnum fromValue(String value) {
      for (ProtocolEnum b : ProtocolEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProtocolEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProtocolEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProtocolEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProtocolEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProtocolEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROTOCOL = "protocol";
  @SerializedName(SERIALIZED_NAME_PROTOCOL)
  private ProtocolEnum protocol;

  public static final String SERIALIZED_NAME_SUCCESS_THRESHOLD = "successThreshold";
  @SerializedName(SERIALIZED_NAME_SUCCESS_THRESHOLD)
  private ConnectionMonitorSuccessThreshold successThreshold;

  public static final String SERIALIZED_NAME_TCP_CONFIGURATION = "tcpConfiguration";
  @SerializedName(SERIALIZED_NAME_TCP_CONFIGURATION)
  private ConnectionMonitorTcpConfiguration tcpConfiguration;

  public static final String SERIALIZED_NAME_TEST_FREQUENCY_SEC = "testFrequencySec";
  @SerializedName(SERIALIZED_NAME_TEST_FREQUENCY_SEC)
  private Integer testFrequencySec;

  public ConnectionMonitorTestConfiguration() {
  }

  public ConnectionMonitorTestConfiguration httpConfiguration(ConnectionMonitorHttpConfiguration httpConfiguration) {
    this.httpConfiguration = httpConfiguration;
    return this;
  }

  /**
   * Get httpConfiguration
   * @return httpConfiguration
   */
  @javax.annotation.Nullable
  public ConnectionMonitorHttpConfiguration getHttpConfiguration() {
    return httpConfiguration;
  }

  public void setHttpConfiguration(ConnectionMonitorHttpConfiguration httpConfiguration) {
    this.httpConfiguration = httpConfiguration;
  }


  public ConnectionMonitorTestConfiguration icmpConfiguration(ConnectionMonitorIcmpConfiguration icmpConfiguration) {
    this.icmpConfiguration = icmpConfiguration;
    return this;
  }

  /**
   * Get icmpConfiguration
   * @return icmpConfiguration
   */
  @javax.annotation.Nullable
  public ConnectionMonitorIcmpConfiguration getIcmpConfiguration() {
    return icmpConfiguration;
  }

  public void setIcmpConfiguration(ConnectionMonitorIcmpConfiguration icmpConfiguration) {
    this.icmpConfiguration = icmpConfiguration;
  }


  public ConnectionMonitorTestConfiguration name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the connection monitor test configuration.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ConnectionMonitorTestConfiguration preferredIPVersion(PreferredIPVersionEnum preferredIPVersion) {
    this.preferredIPVersion = preferredIPVersion;
    return this;
  }

  /**
   * The preferred IP version to use in test evaluation. The connection monitor may choose to use a different version depending on other parameters.
   * @return preferredIPVersion
   */
  @javax.annotation.Nullable
  public PreferredIPVersionEnum getPreferredIPVersion() {
    return preferredIPVersion;
  }

  public void setPreferredIPVersion(PreferredIPVersionEnum preferredIPVersion) {
    this.preferredIPVersion = preferredIPVersion;
  }


  public ConnectionMonitorTestConfiguration protocol(ProtocolEnum protocol) {
    this.protocol = protocol;
    return this;
  }

  /**
   * The protocol to use in test evaluation.
   * @return protocol
   */
  @javax.annotation.Nonnull
  public ProtocolEnum getProtocol() {
    return protocol;
  }

  public void setProtocol(ProtocolEnum protocol) {
    this.protocol = protocol;
  }


  public ConnectionMonitorTestConfiguration successThreshold(ConnectionMonitorSuccessThreshold successThreshold) {
    this.successThreshold = successThreshold;
    return this;
  }

  /**
   * Get successThreshold
   * @return successThreshold
   */
  @javax.annotation.Nullable
  public ConnectionMonitorSuccessThreshold getSuccessThreshold() {
    return successThreshold;
  }

  public void setSuccessThreshold(ConnectionMonitorSuccessThreshold successThreshold) {
    this.successThreshold = successThreshold;
  }


  public ConnectionMonitorTestConfiguration tcpConfiguration(ConnectionMonitorTcpConfiguration tcpConfiguration) {
    this.tcpConfiguration = tcpConfiguration;
    return this;
  }

  /**
   * Get tcpConfiguration
   * @return tcpConfiguration
   */
  @javax.annotation.Nullable
  public ConnectionMonitorTcpConfiguration getTcpConfiguration() {
    return tcpConfiguration;
  }

  public void setTcpConfiguration(ConnectionMonitorTcpConfiguration tcpConfiguration) {
    this.tcpConfiguration = tcpConfiguration;
  }


  public ConnectionMonitorTestConfiguration testFrequencySec(Integer testFrequencySec) {
    this.testFrequencySec = testFrequencySec;
    return this;
  }

  /**
   * The frequency of test evaluation, in seconds.
   * @return testFrequencySec
   */
  @javax.annotation.Nullable
  public Integer getTestFrequencySec() {
    return testFrequencySec;
  }

  public void setTestFrequencySec(Integer testFrequencySec) {
    this.testFrequencySec = testFrequencySec;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConnectionMonitorTestConfiguration connectionMonitorTestConfiguration = (ConnectionMonitorTestConfiguration) o;
    return Objects.equals(this.httpConfiguration, connectionMonitorTestConfiguration.httpConfiguration) &&
        Objects.equals(this.icmpConfiguration, connectionMonitorTestConfiguration.icmpConfiguration) &&
        Objects.equals(this.name, connectionMonitorTestConfiguration.name) &&
        Objects.equals(this.preferredIPVersion, connectionMonitorTestConfiguration.preferredIPVersion) &&
        Objects.equals(this.protocol, connectionMonitorTestConfiguration.protocol) &&
        Objects.equals(this.successThreshold, connectionMonitorTestConfiguration.successThreshold) &&
        Objects.equals(this.tcpConfiguration, connectionMonitorTestConfiguration.tcpConfiguration) &&
        Objects.equals(this.testFrequencySec, connectionMonitorTestConfiguration.testFrequencySec);
  }

  @Override
  public int hashCode() {
    return Objects.hash(httpConfiguration, icmpConfiguration, name, preferredIPVersion, protocol, successThreshold, tcpConfiguration, testFrequencySec);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConnectionMonitorTestConfiguration {\n");
    sb.append("    httpConfiguration: ").append(toIndentedString(httpConfiguration)).append("\n");
    sb.append("    icmpConfiguration: ").append(toIndentedString(icmpConfiguration)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    preferredIPVersion: ").append(toIndentedString(preferredIPVersion)).append("\n");
    sb.append("    protocol: ").append(toIndentedString(protocol)).append("\n");
    sb.append("    successThreshold: ").append(toIndentedString(successThreshold)).append("\n");
    sb.append("    tcpConfiguration: ").append(toIndentedString(tcpConfiguration)).append("\n");
    sb.append("    testFrequencySec: ").append(toIndentedString(testFrequencySec)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("httpConfiguration");
    openapiFields.add("icmpConfiguration");
    openapiFields.add("name");
    openapiFields.add("preferredIPVersion");
    openapiFields.add("protocol");
    openapiFields.add("successThreshold");
    openapiFields.add("tcpConfiguration");
    openapiFields.add("testFrequencySec");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("protocol");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ConnectionMonitorTestConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConnectionMonitorTestConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConnectionMonitorTestConfiguration is not found in the empty JSON string", ConnectionMonitorTestConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConnectionMonitorTestConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConnectionMonitorTestConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ConnectionMonitorTestConfiguration.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `httpConfiguration`
      if (jsonObj.get("httpConfiguration") != null && !jsonObj.get("httpConfiguration").isJsonNull()) {
        ConnectionMonitorHttpConfiguration.validateJsonElement(jsonObj.get("httpConfiguration"));
      }
      // validate the optional field `icmpConfiguration`
      if (jsonObj.get("icmpConfiguration") != null && !jsonObj.get("icmpConfiguration").isJsonNull()) {
        ConnectionMonitorIcmpConfiguration.validateJsonElement(jsonObj.get("icmpConfiguration"));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("preferredIPVersion") != null && !jsonObj.get("preferredIPVersion").isJsonNull()) && !jsonObj.get("preferredIPVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `preferredIPVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("preferredIPVersion").toString()));
      }
      // validate the optional field `preferredIPVersion`
      if (jsonObj.get("preferredIPVersion") != null && !jsonObj.get("preferredIPVersion").isJsonNull()) {
        PreferredIPVersionEnum.validateJsonElement(jsonObj.get("preferredIPVersion"));
      }
      if (!jsonObj.get("protocol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `protocol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("protocol").toString()));
      }
      // validate the required field `protocol`
      ProtocolEnum.validateJsonElement(jsonObj.get("protocol"));
      // validate the optional field `successThreshold`
      if (jsonObj.get("successThreshold") != null && !jsonObj.get("successThreshold").isJsonNull()) {
        ConnectionMonitorSuccessThreshold.validateJsonElement(jsonObj.get("successThreshold"));
      }
      // validate the optional field `tcpConfiguration`
      if (jsonObj.get("tcpConfiguration") != null && !jsonObj.get("tcpConfiguration").isJsonNull()) {
        ConnectionMonitorTcpConfiguration.validateJsonElement(jsonObj.get("tcpConfiguration"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConnectionMonitorTestConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConnectionMonitorTestConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConnectionMonitorTestConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConnectionMonitorTestConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<ConnectionMonitorTestConfiguration>() {
           @Override
           public void write(JsonWriter out, ConnectionMonitorTestConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConnectionMonitorTestConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ConnectionMonitorTestConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ConnectionMonitorTestConfiguration
   * @throws IOException if the JSON string is invalid with respect to ConnectionMonitorTestConfiguration
   */
  public static ConnectionMonitorTestConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConnectionMonitorTestConfiguration.class);
  }

  /**
   * Convert an instance of ConnectionMonitorTestConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

