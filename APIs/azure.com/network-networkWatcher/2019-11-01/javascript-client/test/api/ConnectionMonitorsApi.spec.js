/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-11-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.NetworkManagementClient);
  }
}(this, function(expect, NetworkManagementClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new NetworkManagementClient.ConnectionMonitorsApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ConnectionMonitorsApi', function() {
    describe('connectionMonitorsCreateOrUpdate', function() {
      it('should call connectionMonitorsCreateOrUpdate successfully', function(done) {
        //uncomment below and update the code to test connectionMonitorsCreateOrUpdate
        //instance.connectionMonitorsCreateOrUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('connectionMonitorsDelete', function() {
      it('should call connectionMonitorsDelete successfully', function(done) {
        //uncomment below and update the code to test connectionMonitorsDelete
        //instance.connectionMonitorsDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('connectionMonitorsGet', function() {
      it('should call connectionMonitorsGet successfully', function(done) {
        //uncomment below and update the code to test connectionMonitorsGet
        //instance.connectionMonitorsGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('connectionMonitorsList', function() {
      it('should call connectionMonitorsList successfully', function(done) {
        //uncomment below and update the code to test connectionMonitorsList
        //instance.connectionMonitorsList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('connectionMonitorsQuery', function() {
      it('should call connectionMonitorsQuery successfully', function(done) {
        //uncomment below and update the code to test connectionMonitorsQuery
        //instance.connectionMonitorsQuery(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('connectionMonitorsStart', function() {
      it('should call connectionMonitorsStart successfully', function(done) {
        //uncomment below and update the code to test connectionMonitorsStart
        //instance.connectionMonitorsStart(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('connectionMonitorsStop', function() {
      it('should call connectionMonitorsStop successfully', function(done) {
        //uncomment below and update the code to test connectionMonitorsStop
        //instance.connectionMonitorsStop(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('connectionMonitorsUpdateTags', function() {
      it('should call connectionMonitorsUpdateTags successfully', function(done) {
        //uncomment below and update the code to test connectionMonitorsUpdateTags
        //instance.connectionMonitorsUpdateTags(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
