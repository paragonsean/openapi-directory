/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-11-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PacketCaptureStorageLocation model module.
 * @module model/PacketCaptureStorageLocation
 * @version 2019-11-01
 */
class PacketCaptureStorageLocation {
    /**
     * Constructs a new <code>PacketCaptureStorageLocation</code>.
     * The storage location for a packet capture session.
     * @alias module:model/PacketCaptureStorageLocation
     */
    constructor() { 
        
        PacketCaptureStorageLocation.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PacketCaptureStorageLocation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PacketCaptureStorageLocation} obj Optional instance to populate.
     * @return {module:model/PacketCaptureStorageLocation} The populated <code>PacketCaptureStorageLocation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PacketCaptureStorageLocation();

            if (data.hasOwnProperty('filePath')) {
                obj['filePath'] = ApiClient.convertToType(data['filePath'], 'String');
            }
            if (data.hasOwnProperty('storageId')) {
                obj['storageId'] = ApiClient.convertToType(data['storageId'], 'String');
            }
            if (data.hasOwnProperty('storagePath')) {
                obj['storagePath'] = ApiClient.convertToType(data['storagePath'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PacketCaptureStorageLocation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PacketCaptureStorageLocation</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['filePath'] && !(typeof data['filePath'] === 'string' || data['filePath'] instanceof String)) {
            throw new Error("Expected the field `filePath` to be a primitive type in the JSON string but got " + data['filePath']);
        }
        // ensure the json data is a string
        if (data['storageId'] && !(typeof data['storageId'] === 'string' || data['storageId'] instanceof String)) {
            throw new Error("Expected the field `storageId` to be a primitive type in the JSON string but got " + data['storageId']);
        }
        // ensure the json data is a string
        if (data['storagePath'] && !(typeof data['storagePath'] === 'string' || data['storagePath'] instanceof String)) {
            throw new Error("Expected the field `storagePath` to be a primitive type in the JSON string but got " + data['storagePath']);
        }

        return true;
    }


}



/**
 * A valid local path on the targeting VM. Must include the name of the capture file (*.cap). For linux virtual machine it must start with /var/captures. Required if no storage ID is provided, otherwise optional.
 * @member {String} filePath
 */
PacketCaptureStorageLocation.prototype['filePath'] = undefined;

/**
 * The ID of the storage account to save the packet capture session. Required if no local file path is provided.
 * @member {String} storageId
 */
PacketCaptureStorageLocation.prototype['storageId'] = undefined;

/**
 * The URI of the storage path to save the packet capture. Must be a well-formed URI describing the location to save the packet capture.
 * @member {String} storagePath
 */
PacketCaptureStorageLocation.prototype['storagePath'] = undefined;






export default PacketCaptureStorageLocation;

