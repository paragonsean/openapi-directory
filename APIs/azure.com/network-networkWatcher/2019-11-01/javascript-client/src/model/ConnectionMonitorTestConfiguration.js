/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-11-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ConnectionMonitorHttpConfiguration from './ConnectionMonitorHttpConfiguration';
import ConnectionMonitorIcmpConfiguration from './ConnectionMonitorIcmpConfiguration';
import ConnectionMonitorSuccessThreshold from './ConnectionMonitorSuccessThreshold';
import ConnectionMonitorTcpConfiguration from './ConnectionMonitorTcpConfiguration';

/**
 * The ConnectionMonitorTestConfiguration model module.
 * @module model/ConnectionMonitorTestConfiguration
 * @version 2019-11-01
 */
class ConnectionMonitorTestConfiguration {
    /**
     * Constructs a new <code>ConnectionMonitorTestConfiguration</code>.
     * Describes a connection monitor test configuration.
     * @alias module:model/ConnectionMonitorTestConfiguration
     * @param name {String} The name of the connection monitor test configuration.
     * @param protocol {module:model/ConnectionMonitorTestConfiguration.ProtocolEnum} The protocol to use in test evaluation.
     */
    constructor(name, protocol) { 
        
        ConnectionMonitorTestConfiguration.initialize(this, name, protocol);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, protocol) { 
        obj['name'] = name;
        obj['protocol'] = protocol;
    }

    /**
     * Constructs a <code>ConnectionMonitorTestConfiguration</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ConnectionMonitorTestConfiguration} obj Optional instance to populate.
     * @return {module:model/ConnectionMonitorTestConfiguration} The populated <code>ConnectionMonitorTestConfiguration</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ConnectionMonitorTestConfiguration();

            if (data.hasOwnProperty('httpConfiguration')) {
                obj['httpConfiguration'] = ConnectionMonitorHttpConfiguration.constructFromObject(data['httpConfiguration']);
            }
            if (data.hasOwnProperty('icmpConfiguration')) {
                obj['icmpConfiguration'] = ConnectionMonitorIcmpConfiguration.constructFromObject(data['icmpConfiguration']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('preferredIPVersion')) {
                obj['preferredIPVersion'] = ApiClient.convertToType(data['preferredIPVersion'], 'String');
            }
            if (data.hasOwnProperty('protocol')) {
                obj['protocol'] = ApiClient.convertToType(data['protocol'], 'String');
            }
            if (data.hasOwnProperty('successThreshold')) {
                obj['successThreshold'] = ConnectionMonitorSuccessThreshold.constructFromObject(data['successThreshold']);
            }
            if (data.hasOwnProperty('tcpConfiguration')) {
                obj['tcpConfiguration'] = ConnectionMonitorTcpConfiguration.constructFromObject(data['tcpConfiguration']);
            }
            if (data.hasOwnProperty('testFrequencySec')) {
                obj['testFrequencySec'] = ApiClient.convertToType(data['testFrequencySec'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ConnectionMonitorTestConfiguration</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ConnectionMonitorTestConfiguration</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ConnectionMonitorTestConfiguration.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `httpConfiguration`
        if (data['httpConfiguration']) { // data not null
          ConnectionMonitorHttpConfiguration.validateJSON(data['httpConfiguration']);
        }
        // validate the optional field `icmpConfiguration`
        if (data['icmpConfiguration']) { // data not null
          ConnectionMonitorIcmpConfiguration.validateJSON(data['icmpConfiguration']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['preferredIPVersion'] && !(typeof data['preferredIPVersion'] === 'string' || data['preferredIPVersion'] instanceof String)) {
            throw new Error("Expected the field `preferredIPVersion` to be a primitive type in the JSON string but got " + data['preferredIPVersion']);
        }
        // ensure the json data is a string
        if (data['protocol'] && !(typeof data['protocol'] === 'string' || data['protocol'] instanceof String)) {
            throw new Error("Expected the field `protocol` to be a primitive type in the JSON string but got " + data['protocol']);
        }
        // validate the optional field `successThreshold`
        if (data['successThreshold']) { // data not null
          ConnectionMonitorSuccessThreshold.validateJSON(data['successThreshold']);
        }
        // validate the optional field `tcpConfiguration`
        if (data['tcpConfiguration']) { // data not null
          ConnectionMonitorTcpConfiguration.validateJSON(data['tcpConfiguration']);
        }

        return true;
    }


}

ConnectionMonitorTestConfiguration.RequiredProperties = ["name", "protocol"];

/**
 * @member {module:model/ConnectionMonitorHttpConfiguration} httpConfiguration
 */
ConnectionMonitorTestConfiguration.prototype['httpConfiguration'] = undefined;

/**
 * @member {module:model/ConnectionMonitorIcmpConfiguration} icmpConfiguration
 */
ConnectionMonitorTestConfiguration.prototype['icmpConfiguration'] = undefined;

/**
 * The name of the connection monitor test configuration.
 * @member {String} name
 */
ConnectionMonitorTestConfiguration.prototype['name'] = undefined;

/**
 * The preferred IP version to use in test evaluation. The connection monitor may choose to use a different version depending on other parameters.
 * @member {module:model/ConnectionMonitorTestConfiguration.PreferredIPVersionEnum} preferredIPVersion
 */
ConnectionMonitorTestConfiguration.prototype['preferredIPVersion'] = undefined;

/**
 * The protocol to use in test evaluation.
 * @member {module:model/ConnectionMonitorTestConfiguration.ProtocolEnum} protocol
 */
ConnectionMonitorTestConfiguration.prototype['protocol'] = undefined;

/**
 * @member {module:model/ConnectionMonitorSuccessThreshold} successThreshold
 */
ConnectionMonitorTestConfiguration.prototype['successThreshold'] = undefined;

/**
 * @member {module:model/ConnectionMonitorTcpConfiguration} tcpConfiguration
 */
ConnectionMonitorTestConfiguration.prototype['tcpConfiguration'] = undefined;

/**
 * The frequency of test evaluation, in seconds.
 * @member {Number} testFrequencySec
 */
ConnectionMonitorTestConfiguration.prototype['testFrequencySec'] = undefined;





/**
 * Allowed values for the <code>preferredIPVersion</code> property.
 * @enum {String}
 * @readonly
 */
ConnectionMonitorTestConfiguration['PreferredIPVersionEnum'] = {

    /**
     * value: "IPv4"
     * @const
     */
    "IPv4": "IPv4",

    /**
     * value: "IPv6"
     * @const
     */
    "IPv6": "IPv6"
};


/**
 * Allowed values for the <code>protocol</code> property.
 * @enum {String}
 * @readonly
 */
ConnectionMonitorTestConfiguration['ProtocolEnum'] = {

    /**
     * value: "Tcp"
     * @const
     */
    "Tcp": "Tcp",

    /**
     * value: "Http"
     * @const
     */
    "Http": "Http",

    /**
     * value: "Icmp"
     * @const
     */
    "Icmp": "Icmp"
};



export default ConnectionMonitorTestConfiguration;

