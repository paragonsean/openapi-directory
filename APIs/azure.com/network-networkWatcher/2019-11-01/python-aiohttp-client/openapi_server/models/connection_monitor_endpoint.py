# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.connection_monitor_endpoint_filter import ConnectionMonitorEndpointFilter
from openapi_server import util


class ConnectionMonitorEndpoint(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: str=None, filter: ConnectionMonitorEndpointFilter=None, name: str=None, resource_id: str=None):
        """ConnectionMonitorEndpoint - a model defined in OpenAPI

        :param address: The address of this ConnectionMonitorEndpoint.
        :param filter: The filter of this ConnectionMonitorEndpoint.
        :param name: The name of this ConnectionMonitorEndpoint.
        :param resource_id: The resource_id of this ConnectionMonitorEndpoint.
        """
        self.openapi_types = {
            'address': str,
            'filter': ConnectionMonitorEndpointFilter,
            'name': str,
            'resource_id': str
        }

        self.attribute_map = {
            'address': 'address',
            'filter': 'filter',
            'name': 'name',
            'resource_id': 'resourceId'
        }

        self._address = address
        self._filter = filter
        self._name = name
        self._resource_id = resource_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConnectionMonitorEndpoint':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConnectionMonitorEndpoint of this ConnectionMonitorEndpoint.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this ConnectionMonitorEndpoint.

        Address of the connection monitor endpoint (IP or domain name).

        :return: The address of this ConnectionMonitorEndpoint.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this ConnectionMonitorEndpoint.

        Address of the connection monitor endpoint (IP or domain name).

        :param address: The address of this ConnectionMonitorEndpoint.
        :type address: str
        """

        self._address = address

    @property
    def filter(self):
        """Gets the filter of this ConnectionMonitorEndpoint.


        :return: The filter of this ConnectionMonitorEndpoint.
        :rtype: ConnectionMonitorEndpointFilter
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this ConnectionMonitorEndpoint.


        :param filter: The filter of this ConnectionMonitorEndpoint.
        :type filter: ConnectionMonitorEndpointFilter
        """

        self._filter = filter

    @property
    def name(self):
        """Gets the name of this ConnectionMonitorEndpoint.

        The name of the connection monitor endpoint.

        :return: The name of this ConnectionMonitorEndpoint.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ConnectionMonitorEndpoint.

        The name of the connection monitor endpoint.

        :param name: The name of this ConnectionMonitorEndpoint.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def resource_id(self):
        """Gets the resource_id of this ConnectionMonitorEndpoint.

        Resource ID of the connection monitor endpoint.

        :return: The resource_id of this ConnectionMonitorEndpoint.
        :rtype: str
        """
        return self._resource_id

    @resource_id.setter
    def resource_id(self, resource_id):
        """Sets the resource_id of this ConnectionMonitorEndpoint.

        Resource ID of the connection monitor endpoint.

        :param resource_id: The resource_id of this ConnectionMonitorEndpoint.
        :type resource_id: str
        """

        self._resource_id = resource_id
