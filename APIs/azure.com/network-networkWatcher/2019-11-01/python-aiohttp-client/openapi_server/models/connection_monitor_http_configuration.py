# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.http_header import HTTPHeader
from openapi_server import util


class ConnectionMonitorHttpConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, method: str=None, path: str=None, port: int=None, prefer_https: bool=None, request_headers: List[HTTPHeader]=None, valid_status_code_ranges: List[str]=None):
        """ConnectionMonitorHttpConfiguration - a model defined in OpenAPI

        :param method: The method of this ConnectionMonitorHttpConfiguration.
        :param path: The path of this ConnectionMonitorHttpConfiguration.
        :param port: The port of this ConnectionMonitorHttpConfiguration.
        :param prefer_https: The prefer_https of this ConnectionMonitorHttpConfiguration.
        :param request_headers: The request_headers of this ConnectionMonitorHttpConfiguration.
        :param valid_status_code_ranges: The valid_status_code_ranges of this ConnectionMonitorHttpConfiguration.
        """
        self.openapi_types = {
            'method': str,
            'path': str,
            'port': int,
            'prefer_https': bool,
            'request_headers': List[HTTPHeader],
            'valid_status_code_ranges': List[str]
        }

        self.attribute_map = {
            'method': 'method',
            'path': 'path',
            'port': 'port',
            'prefer_https': 'preferHTTPS',
            'request_headers': 'requestHeaders',
            'valid_status_code_ranges': 'validStatusCodeRanges'
        }

        self._method = method
        self._path = path
        self._port = port
        self._prefer_https = prefer_https
        self._request_headers = request_headers
        self._valid_status_code_ranges = valid_status_code_ranges

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConnectionMonitorHttpConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConnectionMonitorHttpConfiguration of this ConnectionMonitorHttpConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def method(self):
        """Gets the method of this ConnectionMonitorHttpConfiguration.

        The HTTP method to use.

        :return: The method of this ConnectionMonitorHttpConfiguration.
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this ConnectionMonitorHttpConfiguration.

        The HTTP method to use.

        :param method: The method of this ConnectionMonitorHttpConfiguration.
        :type method: str
        """
        allowed_values = ["Get", "Post"]  # noqa: E501
        if method not in allowed_values:
            raise ValueError(
                "Invalid value for `method` ({0}), must be one of {1}"
                .format(method, allowed_values)
            )

        self._method = method

    @property
    def path(self):
        """Gets the path of this ConnectionMonitorHttpConfiguration.

        The path component of the URI. For instance, \"/dir1/dir2\".

        :return: The path of this ConnectionMonitorHttpConfiguration.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this ConnectionMonitorHttpConfiguration.

        The path component of the URI. For instance, \"/dir1/dir2\".

        :param path: The path of this ConnectionMonitorHttpConfiguration.
        :type path: str
        """

        self._path = path

    @property
    def port(self):
        """Gets the port of this ConnectionMonitorHttpConfiguration.

        The port to connect to.

        :return: The port of this ConnectionMonitorHttpConfiguration.
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this ConnectionMonitorHttpConfiguration.

        The port to connect to.

        :param port: The port of this ConnectionMonitorHttpConfiguration.
        :type port: int
        """

        self._port = port

    @property
    def prefer_https(self):
        """Gets the prefer_https of this ConnectionMonitorHttpConfiguration.

        Value indicating whether HTTPS is preferred over HTTP in cases where the choice is not explicit.

        :return: The prefer_https of this ConnectionMonitorHttpConfiguration.
        :rtype: bool
        """
        return self._prefer_https

    @prefer_https.setter
    def prefer_https(self, prefer_https):
        """Sets the prefer_https of this ConnectionMonitorHttpConfiguration.

        Value indicating whether HTTPS is preferred over HTTP in cases where the choice is not explicit.

        :param prefer_https: The prefer_https of this ConnectionMonitorHttpConfiguration.
        :type prefer_https: bool
        """

        self._prefer_https = prefer_https

    @property
    def request_headers(self):
        """Gets the request_headers of this ConnectionMonitorHttpConfiguration.

        The HTTP headers to transmit with the request.

        :return: The request_headers of this ConnectionMonitorHttpConfiguration.
        :rtype: List[HTTPHeader]
        """
        return self._request_headers

    @request_headers.setter
    def request_headers(self, request_headers):
        """Sets the request_headers of this ConnectionMonitorHttpConfiguration.

        The HTTP headers to transmit with the request.

        :param request_headers: The request_headers of this ConnectionMonitorHttpConfiguration.
        :type request_headers: List[HTTPHeader]
        """

        self._request_headers = request_headers

    @property
    def valid_status_code_ranges(self):
        """Gets the valid_status_code_ranges of this ConnectionMonitorHttpConfiguration.

        HTTP status codes to consider successful. For instance, \"2xx,301-304,418\".

        :return: The valid_status_code_ranges of this ConnectionMonitorHttpConfiguration.
        :rtype: List[str]
        """
        return self._valid_status_code_ranges

    @valid_status_code_ranges.setter
    def valid_status_code_ranges(self, valid_status_code_ranges):
        """Sets the valid_status_code_ranges of this ConnectionMonitorHttpConfiguration.

        HTTP status codes to consider successful. For instance, \"2xx,301-304,418\".

        :param valid_status_code_ranges: The valid_status_code_ranges of this ConnectionMonitorHttpConfiguration.
        :type valid_status_code_ranges: List[str]
        """

        self._valid_status_code_ranges = valid_status_code_ranges
