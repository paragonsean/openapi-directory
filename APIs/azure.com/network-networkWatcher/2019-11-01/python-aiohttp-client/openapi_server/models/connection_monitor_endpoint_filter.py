# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.connection_monitor_endpoint_filter_item import ConnectionMonitorEndpointFilterItem
from openapi_server import util


class ConnectionMonitorEndpointFilter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, items: List[ConnectionMonitorEndpointFilterItem]=None, type: str=None):
        """ConnectionMonitorEndpointFilter - a model defined in OpenAPI

        :param items: The items of this ConnectionMonitorEndpointFilter.
        :param type: The type of this ConnectionMonitorEndpointFilter.
        """
        self.openapi_types = {
            'items': List[ConnectionMonitorEndpointFilterItem],
            'type': str
        }

        self.attribute_map = {
            'items': 'items',
            'type': 'type'
        }

        self._items = items
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConnectionMonitorEndpointFilter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConnectionMonitorEndpointFilter of this ConnectionMonitorEndpointFilter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def items(self):
        """Gets the items of this ConnectionMonitorEndpointFilter.

        List of items in the filter.

        :return: The items of this ConnectionMonitorEndpointFilter.
        :rtype: List[ConnectionMonitorEndpointFilterItem]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this ConnectionMonitorEndpointFilter.

        List of items in the filter.

        :param items: The items of this ConnectionMonitorEndpointFilter.
        :type items: List[ConnectionMonitorEndpointFilterItem]
        """

        self._items = items

    @property
    def type(self):
        """Gets the type of this ConnectionMonitorEndpointFilter.

        The behavior of the endpoint filter. Currently only 'Include' is supported.

        :return: The type of this ConnectionMonitorEndpointFilter.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ConnectionMonitorEndpointFilter.

        The behavior of the endpoint filter. Currently only 'Include' is supported.

        :param type: The type of this ConnectionMonitorEndpointFilter.
        :type type: str
        """
        allowed_values = ["Include"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
