# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.connection_monitor_http_configuration import ConnectionMonitorHttpConfiguration
from openapi_server.models.connection_monitor_icmp_configuration import ConnectionMonitorIcmpConfiguration
from openapi_server.models.connection_monitor_success_threshold import ConnectionMonitorSuccessThreshold
from openapi_server.models.connection_monitor_tcp_configuration import ConnectionMonitorTcpConfiguration
from openapi_server import util


class ConnectionMonitorTestConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, http_configuration: ConnectionMonitorHttpConfiguration=None, icmp_configuration: ConnectionMonitorIcmpConfiguration=None, name: str=None, preferred_ip_version: str=None, protocol: str=None, success_threshold: ConnectionMonitorSuccessThreshold=None, tcp_configuration: ConnectionMonitorTcpConfiguration=None, test_frequency_sec: int=None):
        """ConnectionMonitorTestConfiguration - a model defined in OpenAPI

        :param http_configuration: The http_configuration of this ConnectionMonitorTestConfiguration.
        :param icmp_configuration: The icmp_configuration of this ConnectionMonitorTestConfiguration.
        :param name: The name of this ConnectionMonitorTestConfiguration.
        :param preferred_ip_version: The preferred_ip_version of this ConnectionMonitorTestConfiguration.
        :param protocol: The protocol of this ConnectionMonitorTestConfiguration.
        :param success_threshold: The success_threshold of this ConnectionMonitorTestConfiguration.
        :param tcp_configuration: The tcp_configuration of this ConnectionMonitorTestConfiguration.
        :param test_frequency_sec: The test_frequency_sec of this ConnectionMonitorTestConfiguration.
        """
        self.openapi_types = {
            'http_configuration': ConnectionMonitorHttpConfiguration,
            'icmp_configuration': ConnectionMonitorIcmpConfiguration,
            'name': str,
            'preferred_ip_version': str,
            'protocol': str,
            'success_threshold': ConnectionMonitorSuccessThreshold,
            'tcp_configuration': ConnectionMonitorTcpConfiguration,
            'test_frequency_sec': int
        }

        self.attribute_map = {
            'http_configuration': 'httpConfiguration',
            'icmp_configuration': 'icmpConfiguration',
            'name': 'name',
            'preferred_ip_version': 'preferredIPVersion',
            'protocol': 'protocol',
            'success_threshold': 'successThreshold',
            'tcp_configuration': 'tcpConfiguration',
            'test_frequency_sec': 'testFrequencySec'
        }

        self._http_configuration = http_configuration
        self._icmp_configuration = icmp_configuration
        self._name = name
        self._preferred_ip_version = preferred_ip_version
        self._protocol = protocol
        self._success_threshold = success_threshold
        self._tcp_configuration = tcp_configuration
        self._test_frequency_sec = test_frequency_sec

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConnectionMonitorTestConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConnectionMonitorTestConfiguration of this ConnectionMonitorTestConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def http_configuration(self):
        """Gets the http_configuration of this ConnectionMonitorTestConfiguration.


        :return: The http_configuration of this ConnectionMonitorTestConfiguration.
        :rtype: ConnectionMonitorHttpConfiguration
        """
        return self._http_configuration

    @http_configuration.setter
    def http_configuration(self, http_configuration):
        """Sets the http_configuration of this ConnectionMonitorTestConfiguration.


        :param http_configuration: The http_configuration of this ConnectionMonitorTestConfiguration.
        :type http_configuration: ConnectionMonitorHttpConfiguration
        """

        self._http_configuration = http_configuration

    @property
    def icmp_configuration(self):
        """Gets the icmp_configuration of this ConnectionMonitorTestConfiguration.


        :return: The icmp_configuration of this ConnectionMonitorTestConfiguration.
        :rtype: ConnectionMonitorIcmpConfiguration
        """
        return self._icmp_configuration

    @icmp_configuration.setter
    def icmp_configuration(self, icmp_configuration):
        """Sets the icmp_configuration of this ConnectionMonitorTestConfiguration.


        :param icmp_configuration: The icmp_configuration of this ConnectionMonitorTestConfiguration.
        :type icmp_configuration: ConnectionMonitorIcmpConfiguration
        """

        self._icmp_configuration = icmp_configuration

    @property
    def name(self):
        """Gets the name of this ConnectionMonitorTestConfiguration.

        The name of the connection monitor test configuration.

        :return: The name of this ConnectionMonitorTestConfiguration.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ConnectionMonitorTestConfiguration.

        The name of the connection monitor test configuration.

        :param name: The name of this ConnectionMonitorTestConfiguration.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def preferred_ip_version(self):
        """Gets the preferred_ip_version of this ConnectionMonitorTestConfiguration.

        The preferred IP version to use in test evaluation. The connection monitor may choose to use a different version depending on other parameters.

        :return: The preferred_ip_version of this ConnectionMonitorTestConfiguration.
        :rtype: str
        """
        return self._preferred_ip_version

    @preferred_ip_version.setter
    def preferred_ip_version(self, preferred_ip_version):
        """Sets the preferred_ip_version of this ConnectionMonitorTestConfiguration.

        The preferred IP version to use in test evaluation. The connection monitor may choose to use a different version depending on other parameters.

        :param preferred_ip_version: The preferred_ip_version of this ConnectionMonitorTestConfiguration.
        :type preferred_ip_version: str
        """
        allowed_values = ["IPv4", "IPv6"]  # noqa: E501
        if preferred_ip_version not in allowed_values:
            raise ValueError(
                "Invalid value for `preferred_ip_version` ({0}), must be one of {1}"
                .format(preferred_ip_version, allowed_values)
            )

        self._preferred_ip_version = preferred_ip_version

    @property
    def protocol(self):
        """Gets the protocol of this ConnectionMonitorTestConfiguration.

        The protocol to use in test evaluation.

        :return: The protocol of this ConnectionMonitorTestConfiguration.
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this ConnectionMonitorTestConfiguration.

        The protocol to use in test evaluation.

        :param protocol: The protocol of this ConnectionMonitorTestConfiguration.
        :type protocol: str
        """
        allowed_values = ["Tcp", "Http", "Icmp"]  # noqa: E501
        if protocol not in allowed_values:
            raise ValueError(
                "Invalid value for `protocol` ({0}), must be one of {1}"
                .format(protocol, allowed_values)
            )

        self._protocol = protocol

    @property
    def success_threshold(self):
        """Gets the success_threshold of this ConnectionMonitorTestConfiguration.


        :return: The success_threshold of this ConnectionMonitorTestConfiguration.
        :rtype: ConnectionMonitorSuccessThreshold
        """
        return self._success_threshold

    @success_threshold.setter
    def success_threshold(self, success_threshold):
        """Sets the success_threshold of this ConnectionMonitorTestConfiguration.


        :param success_threshold: The success_threshold of this ConnectionMonitorTestConfiguration.
        :type success_threshold: ConnectionMonitorSuccessThreshold
        """

        self._success_threshold = success_threshold

    @property
    def tcp_configuration(self):
        """Gets the tcp_configuration of this ConnectionMonitorTestConfiguration.


        :return: The tcp_configuration of this ConnectionMonitorTestConfiguration.
        :rtype: ConnectionMonitorTcpConfiguration
        """
        return self._tcp_configuration

    @tcp_configuration.setter
    def tcp_configuration(self, tcp_configuration):
        """Sets the tcp_configuration of this ConnectionMonitorTestConfiguration.


        :param tcp_configuration: The tcp_configuration of this ConnectionMonitorTestConfiguration.
        :type tcp_configuration: ConnectionMonitorTcpConfiguration
        """

        self._tcp_configuration = tcp_configuration

    @property
    def test_frequency_sec(self):
        """Gets the test_frequency_sec of this ConnectionMonitorTestConfiguration.

        The frequency of test evaluation, in seconds.

        :return: The test_frequency_sec of this ConnectionMonitorTestConfiguration.
        :rtype: int
        """
        return self._test_frequency_sec

    @test_frequency_sec.setter
    def test_frequency_sec(self, test_frequency_sec):
        """Sets the test_frequency_sec of this ConnectionMonitorTestConfiguration.

        The frequency of test evaluation, in seconds.

        :param test_frequency_sec: The test_frequency_sec of this ConnectionMonitorTestConfiguration.
        :type test_frequency_sec: int
        """

        self._test_frequency_sec = test_frequency_sec
