# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.packet_capture_parameters import PacketCaptureParameters
from openapi_server import util


class PacketCapture(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, properties: PacketCaptureParameters=None):
        """PacketCapture - a model defined in OpenAPI

        :param properties: The properties of this PacketCapture.
        """
        self.openapi_types = {
            'properties': PacketCaptureParameters
        }

        self.attribute_map = {
            'properties': 'properties'
        }

        self._properties = properties

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PacketCapture':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PacketCapture of this PacketCapture.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def properties(self):
        """Gets the properties of this PacketCapture.


        :return: The properties of this PacketCapture.
        :rtype: PacketCaptureParameters
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this PacketCapture.


        :param properties: The properties of this PacketCapture.
        :type properties: PacketCaptureParameters
        """
        if properties is None:
            raise ValueError("Invalid value for `properties`, must not be `None`")

        self._properties = properties
