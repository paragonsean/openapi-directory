# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.connection_state_snapshot_hops_inner_issues_inner import ConnectionStateSnapshotHopsInnerIssuesInner
from openapi_server import util


class ConnectivityHop(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: str=None, id: str=None, issues: List[ConnectionStateSnapshotHopsInnerIssuesInner]=None, next_hop_ids: List[str]=None, resource_id: str=None, type: str=None):
        """ConnectivityHop - a model defined in OpenAPI

        :param address: The address of this ConnectivityHop.
        :param id: The id of this ConnectivityHop.
        :param issues: The issues of this ConnectivityHop.
        :param next_hop_ids: The next_hop_ids of this ConnectivityHop.
        :param resource_id: The resource_id of this ConnectivityHop.
        :param type: The type of this ConnectivityHop.
        """
        self.openapi_types = {
            'address': str,
            'id': str,
            'issues': List[ConnectionStateSnapshotHopsInnerIssuesInner],
            'next_hop_ids': List[str],
            'resource_id': str,
            'type': str
        }

        self.attribute_map = {
            'address': 'address',
            'id': 'id',
            'issues': 'issues',
            'next_hop_ids': 'nextHopIds',
            'resource_id': 'resourceId',
            'type': 'type'
        }

        self._address = address
        self._id = id
        self._issues = issues
        self._next_hop_ids = next_hop_ids
        self._resource_id = resource_id
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConnectivityHop':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConnectivityHop of this ConnectivityHop.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this ConnectivityHop.

        The IP address of the hop.

        :return: The address of this ConnectivityHop.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this ConnectivityHop.

        The IP address of the hop.

        :param address: The address of this ConnectivityHop.
        :type address: str
        """

        self._address = address

    @property
    def id(self):
        """Gets the id of this ConnectivityHop.

        The ID of the hop.

        :return: The id of this ConnectivityHop.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ConnectivityHop.

        The ID of the hop.

        :param id: The id of this ConnectivityHop.
        :type id: str
        """

        self._id = id

    @property
    def issues(self):
        """Gets the issues of this ConnectivityHop.

        List of issues.

        :return: The issues of this ConnectivityHop.
        :rtype: List[ConnectionStateSnapshotHopsInnerIssuesInner]
        """
        return self._issues

    @issues.setter
    def issues(self, issues):
        """Sets the issues of this ConnectivityHop.

        List of issues.

        :param issues: The issues of this ConnectivityHop.
        :type issues: List[ConnectionStateSnapshotHopsInnerIssuesInner]
        """

        self._issues = issues

    @property
    def next_hop_ids(self):
        """Gets the next_hop_ids of this ConnectivityHop.

        List of next hop identifiers.

        :return: The next_hop_ids of this ConnectivityHop.
        :rtype: List[str]
        """
        return self._next_hop_ids

    @next_hop_ids.setter
    def next_hop_ids(self, next_hop_ids):
        """Sets the next_hop_ids of this ConnectivityHop.

        List of next hop identifiers.

        :param next_hop_ids: The next_hop_ids of this ConnectivityHop.
        :type next_hop_ids: List[str]
        """

        self._next_hop_ids = next_hop_ids

    @property
    def resource_id(self):
        """Gets the resource_id of this ConnectivityHop.

        The ID of the resource corresponding to this hop.

        :return: The resource_id of this ConnectivityHop.
        :rtype: str
        """
        return self._resource_id

    @resource_id.setter
    def resource_id(self, resource_id):
        """Sets the resource_id of this ConnectivityHop.

        The ID of the resource corresponding to this hop.

        :param resource_id: The resource_id of this ConnectivityHop.
        :type resource_id: str
        """

        self._resource_id = resource_id

    @property
    def type(self):
        """Gets the type of this ConnectivityHop.

        The type of the hop.

        :return: The type of this ConnectivityHop.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ConnectivityHop.

        The type of the hop.

        :param type: The type of this ConnectivityHop.
        :type type: str
        """

        self._type = type
