# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.connection_monitor_destination import ConnectionMonitorDestination
from openapi_server.models.connection_monitor_endpoint import ConnectionMonitorEndpoint
from openapi_server.models.connection_monitor_output import ConnectionMonitorOutput
from openapi_server.models.connection_monitor_source import ConnectionMonitorSource
from openapi_server.models.connection_monitor_test_configuration import ConnectionMonitorTestConfiguration
from openapi_server.models.connection_monitor_test_group import ConnectionMonitorTestGroup
from openapi_server import util


class ConnectionMonitorResultProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, connection_monitor_type: str=None, monitoring_status: str=None, provisioning_state: str=None, start_time: datetime=None, auto_start: bool=True, destination: ConnectionMonitorDestination=None, endpoints: List[ConnectionMonitorEndpoint]=None, monitoring_interval_in_seconds: int=None, notes: str=None, outputs: List[ConnectionMonitorOutput]=None, source: ConnectionMonitorSource=None, test_configurations: List[ConnectionMonitorTestConfiguration]=None, test_groups: List[ConnectionMonitorTestGroup]=None):
        """ConnectionMonitorResultProperties - a model defined in OpenAPI

        :param connection_monitor_type: The connection_monitor_type of this ConnectionMonitorResultProperties.
        :param monitoring_status: The monitoring_status of this ConnectionMonitorResultProperties.
        :param provisioning_state: The provisioning_state of this ConnectionMonitorResultProperties.
        :param start_time: The start_time of this ConnectionMonitorResultProperties.
        :param auto_start: The auto_start of this ConnectionMonitorResultProperties.
        :param destination: The destination of this ConnectionMonitorResultProperties.
        :param endpoints: The endpoints of this ConnectionMonitorResultProperties.
        :param monitoring_interval_in_seconds: The monitoring_interval_in_seconds of this ConnectionMonitorResultProperties.
        :param notes: The notes of this ConnectionMonitorResultProperties.
        :param outputs: The outputs of this ConnectionMonitorResultProperties.
        :param source: The source of this ConnectionMonitorResultProperties.
        :param test_configurations: The test_configurations of this ConnectionMonitorResultProperties.
        :param test_groups: The test_groups of this ConnectionMonitorResultProperties.
        """
        self.openapi_types = {
            'connection_monitor_type': str,
            'monitoring_status': str,
            'provisioning_state': str,
            'start_time': datetime,
            'auto_start': bool,
            'destination': ConnectionMonitorDestination,
            'endpoints': List[ConnectionMonitorEndpoint],
            'monitoring_interval_in_seconds': int,
            'notes': str,
            'outputs': List[ConnectionMonitorOutput],
            'source': ConnectionMonitorSource,
            'test_configurations': List[ConnectionMonitorTestConfiguration],
            'test_groups': List[ConnectionMonitorTestGroup]
        }

        self.attribute_map = {
            'connection_monitor_type': 'connectionMonitorType',
            'monitoring_status': 'monitoringStatus',
            'provisioning_state': 'provisioningState',
            'start_time': 'startTime',
            'auto_start': 'autoStart',
            'destination': 'destination',
            'endpoints': 'endpoints',
            'monitoring_interval_in_seconds': 'monitoringIntervalInSeconds',
            'notes': 'notes',
            'outputs': 'outputs',
            'source': 'source',
            'test_configurations': 'testConfigurations',
            'test_groups': 'testGroups'
        }

        self._connection_monitor_type = connection_monitor_type
        self._monitoring_status = monitoring_status
        self._provisioning_state = provisioning_state
        self._start_time = start_time
        self._auto_start = auto_start
        self._destination = destination
        self._endpoints = endpoints
        self._monitoring_interval_in_seconds = monitoring_interval_in_seconds
        self._notes = notes
        self._outputs = outputs
        self._source = source
        self._test_configurations = test_configurations
        self._test_groups = test_groups

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConnectionMonitorResultProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConnectionMonitorResultProperties of this ConnectionMonitorResultProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def connection_monitor_type(self):
        """Gets the connection_monitor_type of this ConnectionMonitorResultProperties.

        Type of connection monitor.

        :return: The connection_monitor_type of this ConnectionMonitorResultProperties.
        :rtype: str
        """
        return self._connection_monitor_type

    @connection_monitor_type.setter
    def connection_monitor_type(self, connection_monitor_type):
        """Sets the connection_monitor_type of this ConnectionMonitorResultProperties.

        Type of connection monitor.

        :param connection_monitor_type: The connection_monitor_type of this ConnectionMonitorResultProperties.
        :type connection_monitor_type: str
        """
        allowed_values = ["MultiEndpoint", "SingleSourceDestination"]  # noqa: E501
        if connection_monitor_type not in allowed_values:
            raise ValueError(
                "Invalid value for `connection_monitor_type` ({0}), must be one of {1}"
                .format(connection_monitor_type, allowed_values)
            )

        self._connection_monitor_type = connection_monitor_type

    @property
    def monitoring_status(self):
        """Gets the monitoring_status of this ConnectionMonitorResultProperties.

        The monitoring status of the connection monitor.

        :return: The monitoring_status of this ConnectionMonitorResultProperties.
        :rtype: str
        """
        return self._monitoring_status

    @monitoring_status.setter
    def monitoring_status(self, monitoring_status):
        """Sets the monitoring_status of this ConnectionMonitorResultProperties.

        The monitoring status of the connection monitor.

        :param monitoring_status: The monitoring_status of this ConnectionMonitorResultProperties.
        :type monitoring_status: str
        """

        self._monitoring_status = monitoring_status

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this ConnectionMonitorResultProperties.

        The current provisioning state.

        :return: The provisioning_state of this ConnectionMonitorResultProperties.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this ConnectionMonitorResultProperties.

        The current provisioning state.

        :param provisioning_state: The provisioning_state of this ConnectionMonitorResultProperties.
        :type provisioning_state: str
        """
        allowed_values = ["Succeeded", "Updating", "Deleting", "Failed"]  # noqa: E501
        if provisioning_state not in allowed_values:
            raise ValueError(
                "Invalid value for `provisioning_state` ({0}), must be one of {1}"
                .format(provisioning_state, allowed_values)
            )

        self._provisioning_state = provisioning_state

    @property
    def start_time(self):
        """Gets the start_time of this ConnectionMonitorResultProperties.

        The date and time when the connection monitor was started.

        :return: The start_time of this ConnectionMonitorResultProperties.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this ConnectionMonitorResultProperties.

        The date and time when the connection monitor was started.

        :param start_time: The start_time of this ConnectionMonitorResultProperties.
        :type start_time: datetime
        """

        self._start_time = start_time

    @property
    def auto_start(self):
        """Gets the auto_start of this ConnectionMonitorResultProperties.

        Determines if the connection monitor will start automatically once created.

        :return: The auto_start of this ConnectionMonitorResultProperties.
        :rtype: bool
        """
        return self._auto_start

    @auto_start.setter
    def auto_start(self, auto_start):
        """Sets the auto_start of this ConnectionMonitorResultProperties.

        Determines if the connection monitor will start automatically once created.

        :param auto_start: The auto_start of this ConnectionMonitorResultProperties.
        :type auto_start: bool
        """

        self._auto_start = auto_start

    @property
    def destination(self):
        """Gets the destination of this ConnectionMonitorResultProperties.


        :return: The destination of this ConnectionMonitorResultProperties.
        :rtype: ConnectionMonitorDestination
        """
        return self._destination

    @destination.setter
    def destination(self, destination):
        """Sets the destination of this ConnectionMonitorResultProperties.


        :param destination: The destination of this ConnectionMonitorResultProperties.
        :type destination: ConnectionMonitorDestination
        """

        self._destination = destination

    @property
    def endpoints(self):
        """Gets the endpoints of this ConnectionMonitorResultProperties.

        List of connection monitor endpoints.

        :return: The endpoints of this ConnectionMonitorResultProperties.
        :rtype: List[ConnectionMonitorEndpoint]
        """
        return self._endpoints

    @endpoints.setter
    def endpoints(self, endpoints):
        """Sets the endpoints of this ConnectionMonitorResultProperties.

        List of connection monitor endpoints.

        :param endpoints: The endpoints of this ConnectionMonitorResultProperties.
        :type endpoints: List[ConnectionMonitorEndpoint]
        """

        self._endpoints = endpoints

    @property
    def monitoring_interval_in_seconds(self):
        """Gets the monitoring_interval_in_seconds of this ConnectionMonitorResultProperties.

        Monitoring interval in seconds.

        :return: The monitoring_interval_in_seconds of this ConnectionMonitorResultProperties.
        :rtype: int
        """
        return self._monitoring_interval_in_seconds

    @monitoring_interval_in_seconds.setter
    def monitoring_interval_in_seconds(self, monitoring_interval_in_seconds):
        """Sets the monitoring_interval_in_seconds of this ConnectionMonitorResultProperties.

        Monitoring interval in seconds.

        :param monitoring_interval_in_seconds: The monitoring_interval_in_seconds of this ConnectionMonitorResultProperties.
        :type monitoring_interval_in_seconds: int
        """

        self._monitoring_interval_in_seconds = monitoring_interval_in_seconds

    @property
    def notes(self):
        """Gets the notes of this ConnectionMonitorResultProperties.

        Optional notes to be associated with the connection monitor.

        :return: The notes of this ConnectionMonitorResultProperties.
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this ConnectionMonitorResultProperties.

        Optional notes to be associated with the connection monitor.

        :param notes: The notes of this ConnectionMonitorResultProperties.
        :type notes: str
        """

        self._notes = notes

    @property
    def outputs(self):
        """Gets the outputs of this ConnectionMonitorResultProperties.

        List of connection monitor outputs.

        :return: The outputs of this ConnectionMonitorResultProperties.
        :rtype: List[ConnectionMonitorOutput]
        """
        return self._outputs

    @outputs.setter
    def outputs(self, outputs):
        """Sets the outputs of this ConnectionMonitorResultProperties.

        List of connection monitor outputs.

        :param outputs: The outputs of this ConnectionMonitorResultProperties.
        :type outputs: List[ConnectionMonitorOutput]
        """

        self._outputs = outputs

    @property
    def source(self):
        """Gets the source of this ConnectionMonitorResultProperties.


        :return: The source of this ConnectionMonitorResultProperties.
        :rtype: ConnectionMonitorSource
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this ConnectionMonitorResultProperties.


        :param source: The source of this ConnectionMonitorResultProperties.
        :type source: ConnectionMonitorSource
        """

        self._source = source

    @property
    def test_configurations(self):
        """Gets the test_configurations of this ConnectionMonitorResultProperties.

        List of connection monitor test configurations.

        :return: The test_configurations of this ConnectionMonitorResultProperties.
        :rtype: List[ConnectionMonitorTestConfiguration]
        """
        return self._test_configurations

    @test_configurations.setter
    def test_configurations(self, test_configurations):
        """Sets the test_configurations of this ConnectionMonitorResultProperties.

        List of connection monitor test configurations.

        :param test_configurations: The test_configurations of this ConnectionMonitorResultProperties.
        :type test_configurations: List[ConnectionMonitorTestConfiguration]
        """

        self._test_configurations = test_configurations

    @property
    def test_groups(self):
        """Gets the test_groups of this ConnectionMonitorResultProperties.

        List of connection monitor test groups.

        :return: The test_groups of this ConnectionMonitorResultProperties.
        :rtype: List[ConnectionMonitorTestGroup]
        """
        return self._test_groups

    @test_groups.setter
    def test_groups(self, test_groups):
        """Sets the test_groups of this ConnectionMonitorResultProperties.

        List of connection monitor test groups.

        :param test_groups: The test_groups of this ConnectionMonitorResultProperties.
        :type test_groups: List[ConnectionMonitorTestGroup]
        """

        self._test_groups = test_groups
