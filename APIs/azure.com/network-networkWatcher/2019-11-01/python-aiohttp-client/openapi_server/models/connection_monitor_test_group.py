# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ConnectionMonitorTestGroup(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, destinations: List[str]=None, disable: bool=None, name: str=None, sources: List[str]=None, test_configurations: List[str]=None):
        """ConnectionMonitorTestGroup - a model defined in OpenAPI

        :param destinations: The destinations of this ConnectionMonitorTestGroup.
        :param disable: The disable of this ConnectionMonitorTestGroup.
        :param name: The name of this ConnectionMonitorTestGroup.
        :param sources: The sources of this ConnectionMonitorTestGroup.
        :param test_configurations: The test_configurations of this ConnectionMonitorTestGroup.
        """
        self.openapi_types = {
            'destinations': List[str],
            'disable': bool,
            'name': str,
            'sources': List[str],
            'test_configurations': List[str]
        }

        self.attribute_map = {
            'destinations': 'destinations',
            'disable': 'disable',
            'name': 'name',
            'sources': 'sources',
            'test_configurations': 'testConfigurations'
        }

        self._destinations = destinations
        self._disable = disable
        self._name = name
        self._sources = sources
        self._test_configurations = test_configurations

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConnectionMonitorTestGroup':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConnectionMonitorTestGroup of this ConnectionMonitorTestGroup.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def destinations(self):
        """Gets the destinations of this ConnectionMonitorTestGroup.

        List of destination endpoint names.

        :return: The destinations of this ConnectionMonitorTestGroup.
        :rtype: List[str]
        """
        return self._destinations

    @destinations.setter
    def destinations(self, destinations):
        """Sets the destinations of this ConnectionMonitorTestGroup.

        List of destination endpoint names.

        :param destinations: The destinations of this ConnectionMonitorTestGroup.
        :type destinations: List[str]
        """
        if destinations is None:
            raise ValueError("Invalid value for `destinations`, must not be `None`")

        self._destinations = destinations

    @property
    def disable(self):
        """Gets the disable of this ConnectionMonitorTestGroup.

        Value indicating whether test group is disabled.

        :return: The disable of this ConnectionMonitorTestGroup.
        :rtype: bool
        """
        return self._disable

    @disable.setter
    def disable(self, disable):
        """Sets the disable of this ConnectionMonitorTestGroup.

        Value indicating whether test group is disabled.

        :param disable: The disable of this ConnectionMonitorTestGroup.
        :type disable: bool
        """

        self._disable = disable

    @property
    def name(self):
        """Gets the name of this ConnectionMonitorTestGroup.

        The name of the connection monitor test group.

        :return: The name of this ConnectionMonitorTestGroup.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ConnectionMonitorTestGroup.

        The name of the connection monitor test group.

        :param name: The name of this ConnectionMonitorTestGroup.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def sources(self):
        """Gets the sources of this ConnectionMonitorTestGroup.

        List of source endpoint names.

        :return: The sources of this ConnectionMonitorTestGroup.
        :rtype: List[str]
        """
        return self._sources

    @sources.setter
    def sources(self, sources):
        """Sets the sources of this ConnectionMonitorTestGroup.

        List of source endpoint names.

        :param sources: The sources of this ConnectionMonitorTestGroup.
        :type sources: List[str]
        """
        if sources is None:
            raise ValueError("Invalid value for `sources`, must not be `None`")

        self._sources = sources

    @property
    def test_configurations(self):
        """Gets the test_configurations of this ConnectionMonitorTestGroup.

        List of test configuration names.

        :return: The test_configurations of this ConnectionMonitorTestGroup.
        :rtype: List[str]
        """
        return self._test_configurations

    @test_configurations.setter
    def test_configurations(self, test_configurations):
        """Sets the test_configurations of this ConnectionMonitorTestGroup.

        List of test configuration names.

        :param test_configurations: The test_configurations of this ConnectionMonitorTestGroup.
        :type test_configurations: List[str]
        """
        if test_configurations is None:
            raise ValueError("Invalid value for `test_configurations`, must not be `None`")

        self._test_configurations = test_configurations
