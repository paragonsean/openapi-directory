# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.connection_state_snapshot import ConnectionStateSnapshot
from openapi_server import util


class ConnectionMonitorQueryResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, source_status: str=None, states: List[ConnectionStateSnapshot]=None):
        """ConnectionMonitorQueryResult - a model defined in OpenAPI

        :param source_status: The source_status of this ConnectionMonitorQueryResult.
        :param states: The states of this ConnectionMonitorQueryResult.
        """
        self.openapi_types = {
            'source_status': str,
            'states': List[ConnectionStateSnapshot]
        }

        self.attribute_map = {
            'source_status': 'sourceStatus',
            'states': 'states'
        }

        self._source_status = source_status
        self._states = states

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConnectionMonitorQueryResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConnectionMonitorQueryResult of this ConnectionMonitorQueryResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def source_status(self):
        """Gets the source_status of this ConnectionMonitorQueryResult.

        Status of connection monitor source.

        :return: The source_status of this ConnectionMonitorQueryResult.
        :rtype: str
        """
        return self._source_status

    @source_status.setter
    def source_status(self, source_status):
        """Sets the source_status of this ConnectionMonitorQueryResult.

        Status of connection monitor source.

        :param source_status: The source_status of this ConnectionMonitorQueryResult.
        :type source_status: str
        """
        allowed_values = ["Unknown", "Active", "Inactive"]  # noqa: E501
        if source_status not in allowed_values:
            raise ValueError(
                "Invalid value for `source_status` ({0}), must be one of {1}"
                .format(source_status, allowed_values)
            )

        self._source_status = source_status

    @property
    def states(self):
        """Gets the states of this ConnectionMonitorQueryResult.

        Information about connection states.

        :return: The states of this ConnectionMonitorQueryResult.
        :rtype: List[ConnectionStateSnapshot]
        """
        return self._states

    @states.setter
    def states(self, states):
        """Sets the states of this ConnectionMonitorQueryResult.

        Information about connection states.

        :param states: The states of this ConnectionMonitorQueryResult.
        :type states: List[ConnectionStateSnapshot]
        """

        self._states = states
