# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.connectivity_hop import ConnectivityHop
from openapi_server import util


class ConnectivityInformation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, avg_latency_in_ms: int=None, connection_status: str=None, hops: List[ConnectivityHop]=None, max_latency_in_ms: int=None, min_latency_in_ms: int=None, probes_failed: int=None, probes_sent: int=None):
        """ConnectivityInformation - a model defined in OpenAPI

        :param avg_latency_in_ms: The avg_latency_in_ms of this ConnectivityInformation.
        :param connection_status: The connection_status of this ConnectivityInformation.
        :param hops: The hops of this ConnectivityInformation.
        :param max_latency_in_ms: The max_latency_in_ms of this ConnectivityInformation.
        :param min_latency_in_ms: The min_latency_in_ms of this ConnectivityInformation.
        :param probes_failed: The probes_failed of this ConnectivityInformation.
        :param probes_sent: The probes_sent of this ConnectivityInformation.
        """
        self.openapi_types = {
            'avg_latency_in_ms': int,
            'connection_status': str,
            'hops': List[ConnectivityHop],
            'max_latency_in_ms': int,
            'min_latency_in_ms': int,
            'probes_failed': int,
            'probes_sent': int
        }

        self.attribute_map = {
            'avg_latency_in_ms': 'avgLatencyInMs',
            'connection_status': 'connectionStatus',
            'hops': 'hops',
            'max_latency_in_ms': 'maxLatencyInMs',
            'min_latency_in_ms': 'minLatencyInMs',
            'probes_failed': 'probesFailed',
            'probes_sent': 'probesSent'
        }

        self._avg_latency_in_ms = avg_latency_in_ms
        self._connection_status = connection_status
        self._hops = hops
        self._max_latency_in_ms = max_latency_in_ms
        self._min_latency_in_ms = min_latency_in_ms
        self._probes_failed = probes_failed
        self._probes_sent = probes_sent

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConnectivityInformation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConnectivityInformation of this ConnectivityInformation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def avg_latency_in_ms(self):
        """Gets the avg_latency_in_ms of this ConnectivityInformation.

        Average latency in milliseconds.

        :return: The avg_latency_in_ms of this ConnectivityInformation.
        :rtype: int
        """
        return self._avg_latency_in_ms

    @avg_latency_in_ms.setter
    def avg_latency_in_ms(self, avg_latency_in_ms):
        """Sets the avg_latency_in_ms of this ConnectivityInformation.

        Average latency in milliseconds.

        :param avg_latency_in_ms: The avg_latency_in_ms of this ConnectivityInformation.
        :type avg_latency_in_ms: int
        """

        self._avg_latency_in_ms = avg_latency_in_ms

    @property
    def connection_status(self):
        """Gets the connection_status of this ConnectivityInformation.

        The connection status.

        :return: The connection_status of this ConnectivityInformation.
        :rtype: str
        """
        return self._connection_status

    @connection_status.setter
    def connection_status(self, connection_status):
        """Sets the connection_status of this ConnectivityInformation.

        The connection status.

        :param connection_status: The connection_status of this ConnectivityInformation.
        :type connection_status: str
        """
        allowed_values = ["Unknown", "Connected", "Disconnected", "Degraded"]  # noqa: E501
        if connection_status not in allowed_values:
            raise ValueError(
                "Invalid value for `connection_status` ({0}), must be one of {1}"
                .format(connection_status, allowed_values)
            )

        self._connection_status = connection_status

    @property
    def hops(self):
        """Gets the hops of this ConnectivityInformation.

        List of hops between the source and the destination.

        :return: The hops of this ConnectivityInformation.
        :rtype: List[ConnectivityHop]
        """
        return self._hops

    @hops.setter
    def hops(self, hops):
        """Sets the hops of this ConnectivityInformation.

        List of hops between the source and the destination.

        :param hops: The hops of this ConnectivityInformation.
        :type hops: List[ConnectivityHop]
        """

        self._hops = hops

    @property
    def max_latency_in_ms(self):
        """Gets the max_latency_in_ms of this ConnectivityInformation.

        Maximum latency in milliseconds.

        :return: The max_latency_in_ms of this ConnectivityInformation.
        :rtype: int
        """
        return self._max_latency_in_ms

    @max_latency_in_ms.setter
    def max_latency_in_ms(self, max_latency_in_ms):
        """Sets the max_latency_in_ms of this ConnectivityInformation.

        Maximum latency in milliseconds.

        :param max_latency_in_ms: The max_latency_in_ms of this ConnectivityInformation.
        :type max_latency_in_ms: int
        """

        self._max_latency_in_ms = max_latency_in_ms

    @property
    def min_latency_in_ms(self):
        """Gets the min_latency_in_ms of this ConnectivityInformation.

        Minimum latency in milliseconds.

        :return: The min_latency_in_ms of this ConnectivityInformation.
        :rtype: int
        """
        return self._min_latency_in_ms

    @min_latency_in_ms.setter
    def min_latency_in_ms(self, min_latency_in_ms):
        """Sets the min_latency_in_ms of this ConnectivityInformation.

        Minimum latency in milliseconds.

        :param min_latency_in_ms: The min_latency_in_ms of this ConnectivityInformation.
        :type min_latency_in_ms: int
        """

        self._min_latency_in_ms = min_latency_in_ms

    @property
    def probes_failed(self):
        """Gets the probes_failed of this ConnectivityInformation.

        Number of failed probes.

        :return: The probes_failed of this ConnectivityInformation.
        :rtype: int
        """
        return self._probes_failed

    @probes_failed.setter
    def probes_failed(self, probes_failed):
        """Sets the probes_failed of this ConnectivityInformation.

        Number of failed probes.

        :param probes_failed: The probes_failed of this ConnectivityInformation.
        :type probes_failed: int
        """

        self._probes_failed = probes_failed

    @property
    def probes_sent(self):
        """Gets the probes_sent of this ConnectivityInformation.

        Total number of probes sent.

        :return: The probes_sent of this ConnectivityInformation.
        :rtype: int
        """
        return self._probes_sent

    @probes_sent.setter
    def probes_sent(self, probes_sent):
        """Sets the probes_sent of this ConnectivityInformation.

        Total number of probes sent.

        :param probes_sent: The probes_sent of this ConnectivityInformation.
        :type probes_sent: int
        """

        self._probes_sent = probes_sent
