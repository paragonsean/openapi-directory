# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.flow_log_format_parameters import FlowLogFormatParameters
from openapi_server.models.retention_policy_parameters import RetentionPolicyParameters
from openapi_server.models.traffic_analytics_properties import TrafficAnalyticsProperties
from openapi_server import util


class FlowLogPropertiesFormat(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, enabled: bool=None, flow_analytics_configuration: TrafficAnalyticsProperties=None, format: FlowLogFormatParameters=None, provisioning_state: str=None, retention_policy: RetentionPolicyParameters=None, storage_id: str=None, target_resource_guid: str=None, target_resource_id: str=None):
        """FlowLogPropertiesFormat - a model defined in OpenAPI

        :param enabled: The enabled of this FlowLogPropertiesFormat.
        :param flow_analytics_configuration: The flow_analytics_configuration of this FlowLogPropertiesFormat.
        :param format: The format of this FlowLogPropertiesFormat.
        :param provisioning_state: The provisioning_state of this FlowLogPropertiesFormat.
        :param retention_policy: The retention_policy of this FlowLogPropertiesFormat.
        :param storage_id: The storage_id of this FlowLogPropertiesFormat.
        :param target_resource_guid: The target_resource_guid of this FlowLogPropertiesFormat.
        :param target_resource_id: The target_resource_id of this FlowLogPropertiesFormat.
        """
        self.openapi_types = {
            'enabled': bool,
            'flow_analytics_configuration': TrafficAnalyticsProperties,
            'format': FlowLogFormatParameters,
            'provisioning_state': str,
            'retention_policy': RetentionPolicyParameters,
            'storage_id': str,
            'target_resource_guid': str,
            'target_resource_id': str
        }

        self.attribute_map = {
            'enabled': 'enabled',
            'flow_analytics_configuration': 'flowAnalyticsConfiguration',
            'format': 'format',
            'provisioning_state': 'provisioningState',
            'retention_policy': 'retentionPolicy',
            'storage_id': 'storageId',
            'target_resource_guid': 'targetResourceGuid',
            'target_resource_id': 'targetResourceId'
        }

        self._enabled = enabled
        self._flow_analytics_configuration = flow_analytics_configuration
        self._format = format
        self._provisioning_state = provisioning_state
        self._retention_policy = retention_policy
        self._storage_id = storage_id
        self._target_resource_guid = target_resource_guid
        self._target_resource_id = target_resource_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FlowLogPropertiesFormat':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FlowLogPropertiesFormat of this FlowLogPropertiesFormat.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enabled(self):
        """Gets the enabled of this FlowLogPropertiesFormat.

        Flag to enable/disable flow logging.

        :return: The enabled of this FlowLogPropertiesFormat.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this FlowLogPropertiesFormat.

        Flag to enable/disable flow logging.

        :param enabled: The enabled of this FlowLogPropertiesFormat.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def flow_analytics_configuration(self):
        """Gets the flow_analytics_configuration of this FlowLogPropertiesFormat.


        :return: The flow_analytics_configuration of this FlowLogPropertiesFormat.
        :rtype: TrafficAnalyticsProperties
        """
        return self._flow_analytics_configuration

    @flow_analytics_configuration.setter
    def flow_analytics_configuration(self, flow_analytics_configuration):
        """Sets the flow_analytics_configuration of this FlowLogPropertiesFormat.


        :param flow_analytics_configuration: The flow_analytics_configuration of this FlowLogPropertiesFormat.
        :type flow_analytics_configuration: TrafficAnalyticsProperties
        """

        self._flow_analytics_configuration = flow_analytics_configuration

    @property
    def format(self):
        """Gets the format of this FlowLogPropertiesFormat.


        :return: The format of this FlowLogPropertiesFormat.
        :rtype: FlowLogFormatParameters
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this FlowLogPropertiesFormat.


        :param format: The format of this FlowLogPropertiesFormat.
        :type format: FlowLogFormatParameters
        """

        self._format = format

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this FlowLogPropertiesFormat.

        The current provisioning state.

        :return: The provisioning_state of this FlowLogPropertiesFormat.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this FlowLogPropertiesFormat.

        The current provisioning state.

        :param provisioning_state: The provisioning_state of this FlowLogPropertiesFormat.
        :type provisioning_state: str
        """
        allowed_values = ["Succeeded", "Updating", "Deleting", "Failed"]  # noqa: E501
        if provisioning_state not in allowed_values:
            raise ValueError(
                "Invalid value for `provisioning_state` ({0}), must be one of {1}"
                .format(provisioning_state, allowed_values)
            )

        self._provisioning_state = provisioning_state

    @property
    def retention_policy(self):
        """Gets the retention_policy of this FlowLogPropertiesFormat.


        :return: The retention_policy of this FlowLogPropertiesFormat.
        :rtype: RetentionPolicyParameters
        """
        return self._retention_policy

    @retention_policy.setter
    def retention_policy(self, retention_policy):
        """Sets the retention_policy of this FlowLogPropertiesFormat.


        :param retention_policy: The retention_policy of this FlowLogPropertiesFormat.
        :type retention_policy: RetentionPolicyParameters
        """

        self._retention_policy = retention_policy

    @property
    def storage_id(self):
        """Gets the storage_id of this FlowLogPropertiesFormat.

        ID of the storage account which is used to store the flow log.

        :return: The storage_id of this FlowLogPropertiesFormat.
        :rtype: str
        """
        return self._storage_id

    @storage_id.setter
    def storage_id(self, storage_id):
        """Sets the storage_id of this FlowLogPropertiesFormat.

        ID of the storage account which is used to store the flow log.

        :param storage_id: The storage_id of this FlowLogPropertiesFormat.
        :type storage_id: str
        """
        if storage_id is None:
            raise ValueError("Invalid value for `storage_id`, must not be `None`")

        self._storage_id = storage_id

    @property
    def target_resource_guid(self):
        """Gets the target_resource_guid of this FlowLogPropertiesFormat.

        Guid of network security group to which flow log will be applied.

        :return: The target_resource_guid of this FlowLogPropertiesFormat.
        :rtype: str
        """
        return self._target_resource_guid

    @target_resource_guid.setter
    def target_resource_guid(self, target_resource_guid):
        """Sets the target_resource_guid of this FlowLogPropertiesFormat.

        Guid of network security group to which flow log will be applied.

        :param target_resource_guid: The target_resource_guid of this FlowLogPropertiesFormat.
        :type target_resource_guid: str
        """

        self._target_resource_guid = target_resource_guid

    @property
    def target_resource_id(self):
        """Gets the target_resource_id of this FlowLogPropertiesFormat.

        ID of network security group to which flow log will be applied.

        :return: The target_resource_id of this FlowLogPropertiesFormat.
        :rtype: str
        """
        return self._target_resource_id

    @target_resource_id.setter
    def target_resource_id(self, target_resource_id):
        """Sets the target_resource_id of this FlowLogPropertiesFormat.

        ID of network security group to which flow log will be applied.

        :param target_resource_id: The target_resource_id of this FlowLogPropertiesFormat.
        :type target_resource_id: str
        """
        if target_resource_id is None:
            raise ValueError("Invalid value for `target_resource_id`, must not be `None`")

        self._target_resource_id = target_resource_id
