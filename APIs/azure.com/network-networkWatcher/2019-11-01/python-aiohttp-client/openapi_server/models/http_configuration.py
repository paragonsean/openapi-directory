# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.http_header import HTTPHeader
from openapi_server import util


class HTTPConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, headers: List[HTTPHeader]=None, method: str=None, valid_status_codes: List[int]=None):
        """HTTPConfiguration - a model defined in OpenAPI

        :param headers: The headers of this HTTPConfiguration.
        :param method: The method of this HTTPConfiguration.
        :param valid_status_codes: The valid_status_codes of this HTTPConfiguration.
        """
        self.openapi_types = {
            'headers': List[HTTPHeader],
            'method': str,
            'valid_status_codes': List[int]
        }

        self.attribute_map = {
            'headers': 'headers',
            'method': 'method',
            'valid_status_codes': 'validStatusCodes'
        }

        self._headers = headers
        self._method = method
        self._valid_status_codes = valid_status_codes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HTTPConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HTTPConfiguration of this HTTPConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def headers(self):
        """Gets the headers of this HTTPConfiguration.

        List of HTTP headers.

        :return: The headers of this HTTPConfiguration.
        :rtype: List[HTTPHeader]
        """
        return self._headers

    @headers.setter
    def headers(self, headers):
        """Sets the headers of this HTTPConfiguration.

        List of HTTP headers.

        :param headers: The headers of this HTTPConfiguration.
        :type headers: List[HTTPHeader]
        """

        self._headers = headers

    @property
    def method(self):
        """Gets the method of this HTTPConfiguration.

        HTTP method.

        :return: The method of this HTTPConfiguration.
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this HTTPConfiguration.

        HTTP method.

        :param method: The method of this HTTPConfiguration.
        :type method: str
        """
        allowed_values = ["Get"]  # noqa: E501
        if method not in allowed_values:
            raise ValueError(
                "Invalid value for `method` ({0}), must be one of {1}"
                .format(method, allowed_values)
            )

        self._method = method

    @property
    def valid_status_codes(self):
        """Gets the valid_status_codes of this HTTPConfiguration.

        Valid status codes.

        :return: The valid_status_codes of this HTTPConfiguration.
        :rtype: List[int]
        """
        return self._valid_status_codes

    @valid_status_codes.setter
    def valid_status_codes(self, valid_status_codes):
        """Sets the valid_status_codes of this HTTPConfiguration.

        Valid status codes.

        :param valid_status_codes: The valid_status_codes of this HTTPConfiguration.
        :type valid_status_codes: List[int]
        """

        self._valid_status_codes = valid_status_codes
