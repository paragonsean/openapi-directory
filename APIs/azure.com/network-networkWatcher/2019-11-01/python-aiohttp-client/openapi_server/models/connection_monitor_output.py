# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.connection_monitor_workspace_settings import ConnectionMonitorWorkspaceSettings
from openapi_server import util


class ConnectionMonitorOutput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, type: str=None, workspace_settings: ConnectionMonitorWorkspaceSettings=None):
        """ConnectionMonitorOutput - a model defined in OpenAPI

        :param type: The type of this ConnectionMonitorOutput.
        :param workspace_settings: The workspace_settings of this ConnectionMonitorOutput.
        """
        self.openapi_types = {
            'type': str,
            'workspace_settings': ConnectionMonitorWorkspaceSettings
        }

        self.attribute_map = {
            'type': 'type',
            'workspace_settings': 'workspaceSettings'
        }

        self._type = type
        self._workspace_settings = workspace_settings

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConnectionMonitorOutput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConnectionMonitorOutput of this ConnectionMonitorOutput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self):
        """Gets the type of this ConnectionMonitorOutput.

        Connection monitor output destination type. Currently, only \"Workspace\" is supported.

        :return: The type of this ConnectionMonitorOutput.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ConnectionMonitorOutput.

        Connection monitor output destination type. Currently, only \"Workspace\" is supported.

        :param type: The type of this ConnectionMonitorOutput.
        :type type: str
        """
        allowed_values = ["Workspace"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def workspace_settings(self):
        """Gets the workspace_settings of this ConnectionMonitorOutput.


        :return: The workspace_settings of this ConnectionMonitorOutput.
        :rtype: ConnectionMonitorWorkspaceSettings
        """
        return self._workspace_settings

    @workspace_settings.setter
    def workspace_settings(self, workspace_settings):
        """Sets the workspace_settings of this ConnectionMonitorOutput.


        :param workspace_settings: The workspace_settings of this ConnectionMonitorOutput.
        :type workspace_settings: ConnectionMonitorWorkspaceSettings
        """

        self._workspace_settings = workspace_settings
