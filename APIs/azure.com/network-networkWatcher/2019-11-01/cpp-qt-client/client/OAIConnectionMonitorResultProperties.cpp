/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-11-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConnectionMonitorResultProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConnectionMonitorResultProperties::OAIConnectionMonitorResultProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConnectionMonitorResultProperties::OAIConnectionMonitorResultProperties() {
    this->initializeModel();
}

OAIConnectionMonitorResultProperties::~OAIConnectionMonitorResultProperties() {}

void OAIConnectionMonitorResultProperties::initializeModel() {

    m_connection_monitor_type_isSet = false;
    m_connection_monitor_type_isValid = false;

    m_monitoring_status_isSet = false;
    m_monitoring_status_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_auto_start_isSet = false;
    m_auto_start_isValid = false;

    m_destination_isSet = false;
    m_destination_isValid = false;

    m_endpoints_isSet = false;
    m_endpoints_isValid = false;

    m_monitoring_interval_in_seconds_isSet = false;
    m_monitoring_interval_in_seconds_isValid = false;

    m_notes_isSet = false;
    m_notes_isValid = false;

    m_outputs_isSet = false;
    m_outputs_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_test_configurations_isSet = false;
    m_test_configurations_isValid = false;

    m_test_groups_isSet = false;
    m_test_groups_isValid = false;
}

void OAIConnectionMonitorResultProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConnectionMonitorResultProperties::fromJsonObject(QJsonObject json) {

    m_connection_monitor_type_isValid = ::OpenAPI::fromJsonValue(m_connection_monitor_type, json[QString("connectionMonitorType")]);
    m_connection_monitor_type_isSet = !json[QString("connectionMonitorType")].isNull() && m_connection_monitor_type_isValid;

    m_monitoring_status_isValid = ::OpenAPI::fromJsonValue(m_monitoring_status, json[QString("monitoringStatus")]);
    m_monitoring_status_isSet = !json[QString("monitoringStatus")].isNull() && m_monitoring_status_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_auto_start_isValid = ::OpenAPI::fromJsonValue(m_auto_start, json[QString("autoStart")]);
    m_auto_start_isSet = !json[QString("autoStart")].isNull() && m_auto_start_isValid;

    m_destination_isValid = ::OpenAPI::fromJsonValue(m_destination, json[QString("destination")]);
    m_destination_isSet = !json[QString("destination")].isNull() && m_destination_isValid;

    m_endpoints_isValid = ::OpenAPI::fromJsonValue(m_endpoints, json[QString("endpoints")]);
    m_endpoints_isSet = !json[QString("endpoints")].isNull() && m_endpoints_isValid;

    m_monitoring_interval_in_seconds_isValid = ::OpenAPI::fromJsonValue(m_monitoring_interval_in_seconds, json[QString("monitoringIntervalInSeconds")]);
    m_monitoring_interval_in_seconds_isSet = !json[QString("monitoringIntervalInSeconds")].isNull() && m_monitoring_interval_in_seconds_isValid;

    m_notes_isValid = ::OpenAPI::fromJsonValue(m_notes, json[QString("notes")]);
    m_notes_isSet = !json[QString("notes")].isNull() && m_notes_isValid;

    m_outputs_isValid = ::OpenAPI::fromJsonValue(m_outputs, json[QString("outputs")]);
    m_outputs_isSet = !json[QString("outputs")].isNull() && m_outputs_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_test_configurations_isValid = ::OpenAPI::fromJsonValue(m_test_configurations, json[QString("testConfigurations")]);
    m_test_configurations_isSet = !json[QString("testConfigurations")].isNull() && m_test_configurations_isValid;

    m_test_groups_isValid = ::OpenAPI::fromJsonValue(m_test_groups, json[QString("testGroups")]);
    m_test_groups_isSet = !json[QString("testGroups")].isNull() && m_test_groups_isValid;
}

QString OAIConnectionMonitorResultProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConnectionMonitorResultProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_connection_monitor_type_isSet) {
        obj.insert(QString("connectionMonitorType"), ::OpenAPI::toJsonValue(m_connection_monitor_type));
    }
    if (m_monitoring_status_isSet) {
        obj.insert(QString("monitoringStatus"), ::OpenAPI::toJsonValue(m_monitoring_status));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_auto_start_isSet) {
        obj.insert(QString("autoStart"), ::OpenAPI::toJsonValue(m_auto_start));
    }
    if (m_destination.isSet()) {
        obj.insert(QString("destination"), ::OpenAPI::toJsonValue(m_destination));
    }
    if (m_endpoints.size() > 0) {
        obj.insert(QString("endpoints"), ::OpenAPI::toJsonValue(m_endpoints));
    }
    if (m_monitoring_interval_in_seconds_isSet) {
        obj.insert(QString("monitoringIntervalInSeconds"), ::OpenAPI::toJsonValue(m_monitoring_interval_in_seconds));
    }
    if (m_notes_isSet) {
        obj.insert(QString("notes"), ::OpenAPI::toJsonValue(m_notes));
    }
    if (m_outputs.size() > 0) {
        obj.insert(QString("outputs"), ::OpenAPI::toJsonValue(m_outputs));
    }
    if (m_source.isSet()) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_test_configurations.size() > 0) {
        obj.insert(QString("testConfigurations"), ::OpenAPI::toJsonValue(m_test_configurations));
    }
    if (m_test_groups.size() > 0) {
        obj.insert(QString("testGroups"), ::OpenAPI::toJsonValue(m_test_groups));
    }
    return obj;
}

QString OAIConnectionMonitorResultProperties::getConnectionMonitorType() const {
    return m_connection_monitor_type;
}
void OAIConnectionMonitorResultProperties::setConnectionMonitorType(const QString &connection_monitor_type) {
    m_connection_monitor_type = connection_monitor_type;
    m_connection_monitor_type_isSet = true;
}

bool OAIConnectionMonitorResultProperties::is_connection_monitor_type_Set() const{
    return m_connection_monitor_type_isSet;
}

bool OAIConnectionMonitorResultProperties::is_connection_monitor_type_Valid() const{
    return m_connection_monitor_type_isValid;
}

QString OAIConnectionMonitorResultProperties::getMonitoringStatus() const {
    return m_monitoring_status;
}
void OAIConnectionMonitorResultProperties::setMonitoringStatus(const QString &monitoring_status) {
    m_monitoring_status = monitoring_status;
    m_monitoring_status_isSet = true;
}

bool OAIConnectionMonitorResultProperties::is_monitoring_status_Set() const{
    return m_monitoring_status_isSet;
}

bool OAIConnectionMonitorResultProperties::is_monitoring_status_Valid() const{
    return m_monitoring_status_isValid;
}

QString OAIConnectionMonitorResultProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIConnectionMonitorResultProperties::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIConnectionMonitorResultProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIConnectionMonitorResultProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

QDateTime OAIConnectionMonitorResultProperties::getStartTime() const {
    return m_start_time;
}
void OAIConnectionMonitorResultProperties::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIConnectionMonitorResultProperties::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIConnectionMonitorResultProperties::is_start_time_Valid() const{
    return m_start_time_isValid;
}

bool OAIConnectionMonitorResultProperties::isAutoStart() const {
    return m_auto_start;
}
void OAIConnectionMonitorResultProperties::setAutoStart(const bool &auto_start) {
    m_auto_start = auto_start;
    m_auto_start_isSet = true;
}

bool OAIConnectionMonitorResultProperties::is_auto_start_Set() const{
    return m_auto_start_isSet;
}

bool OAIConnectionMonitorResultProperties::is_auto_start_Valid() const{
    return m_auto_start_isValid;
}

OAIConnectionMonitorDestination OAIConnectionMonitorResultProperties::getDestination() const {
    return m_destination;
}
void OAIConnectionMonitorResultProperties::setDestination(const OAIConnectionMonitorDestination &destination) {
    m_destination = destination;
    m_destination_isSet = true;
}

bool OAIConnectionMonitorResultProperties::is_destination_Set() const{
    return m_destination_isSet;
}

bool OAIConnectionMonitorResultProperties::is_destination_Valid() const{
    return m_destination_isValid;
}

QList<OAIConnectionMonitorEndpoint> OAIConnectionMonitorResultProperties::getEndpoints() const {
    return m_endpoints;
}
void OAIConnectionMonitorResultProperties::setEndpoints(const QList<OAIConnectionMonitorEndpoint> &endpoints) {
    m_endpoints = endpoints;
    m_endpoints_isSet = true;
}

bool OAIConnectionMonitorResultProperties::is_endpoints_Set() const{
    return m_endpoints_isSet;
}

bool OAIConnectionMonitorResultProperties::is_endpoints_Valid() const{
    return m_endpoints_isValid;
}

qint32 OAIConnectionMonitorResultProperties::getMonitoringIntervalInSeconds() const {
    return m_monitoring_interval_in_seconds;
}
void OAIConnectionMonitorResultProperties::setMonitoringIntervalInSeconds(const qint32 &monitoring_interval_in_seconds) {
    m_monitoring_interval_in_seconds = monitoring_interval_in_seconds;
    m_monitoring_interval_in_seconds_isSet = true;
}

bool OAIConnectionMonitorResultProperties::is_monitoring_interval_in_seconds_Set() const{
    return m_monitoring_interval_in_seconds_isSet;
}

bool OAIConnectionMonitorResultProperties::is_monitoring_interval_in_seconds_Valid() const{
    return m_monitoring_interval_in_seconds_isValid;
}

QString OAIConnectionMonitorResultProperties::getNotes() const {
    return m_notes;
}
void OAIConnectionMonitorResultProperties::setNotes(const QString &notes) {
    m_notes = notes;
    m_notes_isSet = true;
}

bool OAIConnectionMonitorResultProperties::is_notes_Set() const{
    return m_notes_isSet;
}

bool OAIConnectionMonitorResultProperties::is_notes_Valid() const{
    return m_notes_isValid;
}

QList<OAIConnectionMonitorOutput> OAIConnectionMonitorResultProperties::getOutputs() const {
    return m_outputs;
}
void OAIConnectionMonitorResultProperties::setOutputs(const QList<OAIConnectionMonitorOutput> &outputs) {
    m_outputs = outputs;
    m_outputs_isSet = true;
}

bool OAIConnectionMonitorResultProperties::is_outputs_Set() const{
    return m_outputs_isSet;
}

bool OAIConnectionMonitorResultProperties::is_outputs_Valid() const{
    return m_outputs_isValid;
}

OAIConnectionMonitorSource OAIConnectionMonitorResultProperties::getSource() const {
    return m_source;
}
void OAIConnectionMonitorResultProperties::setSource(const OAIConnectionMonitorSource &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIConnectionMonitorResultProperties::is_source_Set() const{
    return m_source_isSet;
}

bool OAIConnectionMonitorResultProperties::is_source_Valid() const{
    return m_source_isValid;
}

QList<OAIConnectionMonitorTestConfiguration> OAIConnectionMonitorResultProperties::getTestConfigurations() const {
    return m_test_configurations;
}
void OAIConnectionMonitorResultProperties::setTestConfigurations(const QList<OAIConnectionMonitorTestConfiguration> &test_configurations) {
    m_test_configurations = test_configurations;
    m_test_configurations_isSet = true;
}

bool OAIConnectionMonitorResultProperties::is_test_configurations_Set() const{
    return m_test_configurations_isSet;
}

bool OAIConnectionMonitorResultProperties::is_test_configurations_Valid() const{
    return m_test_configurations_isValid;
}

QList<OAIConnectionMonitorTestGroup> OAIConnectionMonitorResultProperties::getTestGroups() const {
    return m_test_groups;
}
void OAIConnectionMonitorResultProperties::setTestGroups(const QList<OAIConnectionMonitorTestGroup> &test_groups) {
    m_test_groups = test_groups;
    m_test_groups_isSet = true;
}

bool OAIConnectionMonitorResultProperties::is_test_groups_Set() const{
    return m_test_groups_isSet;
}

bool OAIConnectionMonitorResultProperties::is_test_groups_Valid() const{
    return m_test_groups_isValid;
}

bool OAIConnectionMonitorResultProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_connection_monitor_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_monitoring_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoints.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_monitoring_interval_in_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_outputs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_test_configurations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_test_groups.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConnectionMonitorResultProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
