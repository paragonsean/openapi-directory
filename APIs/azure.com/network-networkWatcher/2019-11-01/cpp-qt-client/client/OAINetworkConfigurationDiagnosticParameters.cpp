/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-11-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINetworkConfigurationDiagnosticParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINetworkConfigurationDiagnosticParameters::OAINetworkConfigurationDiagnosticParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINetworkConfigurationDiagnosticParameters::OAINetworkConfigurationDiagnosticParameters() {
    this->initializeModel();
}

OAINetworkConfigurationDiagnosticParameters::~OAINetworkConfigurationDiagnosticParameters() {}

void OAINetworkConfigurationDiagnosticParameters::initializeModel() {

    m_profiles_isSet = false;
    m_profiles_isValid = false;

    m_target_resource_id_isSet = false;
    m_target_resource_id_isValid = false;

    m_verbosity_level_isSet = false;
    m_verbosity_level_isValid = false;
}

void OAINetworkConfigurationDiagnosticParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINetworkConfigurationDiagnosticParameters::fromJsonObject(QJsonObject json) {

    m_profiles_isValid = ::OpenAPI::fromJsonValue(m_profiles, json[QString("profiles")]);
    m_profiles_isSet = !json[QString("profiles")].isNull() && m_profiles_isValid;

    m_target_resource_id_isValid = ::OpenAPI::fromJsonValue(m_target_resource_id, json[QString("targetResourceId")]);
    m_target_resource_id_isSet = !json[QString("targetResourceId")].isNull() && m_target_resource_id_isValid;

    m_verbosity_level_isValid = ::OpenAPI::fromJsonValue(m_verbosity_level, json[QString("verbosityLevel")]);
    m_verbosity_level_isSet = !json[QString("verbosityLevel")].isNull() && m_verbosity_level_isValid;
}

QString OAINetworkConfigurationDiagnosticParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINetworkConfigurationDiagnosticParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_profiles.size() > 0) {
        obj.insert(QString("profiles"), ::OpenAPI::toJsonValue(m_profiles));
    }
    if (m_target_resource_id_isSet) {
        obj.insert(QString("targetResourceId"), ::OpenAPI::toJsonValue(m_target_resource_id));
    }
    if (m_verbosity_level_isSet) {
        obj.insert(QString("verbosityLevel"), ::OpenAPI::toJsonValue(m_verbosity_level));
    }
    return obj;
}

QList<OAINetworkConfigurationDiagnosticProfile> OAINetworkConfigurationDiagnosticParameters::getProfiles() const {
    return m_profiles;
}
void OAINetworkConfigurationDiagnosticParameters::setProfiles(const QList<OAINetworkConfigurationDiagnosticProfile> &profiles) {
    m_profiles = profiles;
    m_profiles_isSet = true;
}

bool OAINetworkConfigurationDiagnosticParameters::is_profiles_Set() const{
    return m_profiles_isSet;
}

bool OAINetworkConfigurationDiagnosticParameters::is_profiles_Valid() const{
    return m_profiles_isValid;
}

QString OAINetworkConfigurationDiagnosticParameters::getTargetResourceId() const {
    return m_target_resource_id;
}
void OAINetworkConfigurationDiagnosticParameters::setTargetResourceId(const QString &target_resource_id) {
    m_target_resource_id = target_resource_id;
    m_target_resource_id_isSet = true;
}

bool OAINetworkConfigurationDiagnosticParameters::is_target_resource_id_Set() const{
    return m_target_resource_id_isSet;
}

bool OAINetworkConfigurationDiagnosticParameters::is_target_resource_id_Valid() const{
    return m_target_resource_id_isValid;
}

QString OAINetworkConfigurationDiagnosticParameters::getVerbosityLevel() const {
    return m_verbosity_level;
}
void OAINetworkConfigurationDiagnosticParameters::setVerbosityLevel(const QString &verbosity_level) {
    m_verbosity_level = verbosity_level;
    m_verbosity_level_isSet = true;
}

bool OAINetworkConfigurationDiagnosticParameters::is_verbosity_level_Set() const{
    return m_verbosity_level_isSet;
}

bool OAINetworkConfigurationDiagnosticParameters::is_verbosity_level_Valid() const{
    return m_verbosity_level_isValid;
}

bool OAINetworkConfigurationDiagnosticParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_profiles.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_verbosity_level_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINetworkConfigurationDiagnosticParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_profiles_isValid && m_target_resource_id_isValid && true;
}

} // namespace OpenAPI
