/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-11-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConnectionMonitorEndpointFilterItem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConnectionMonitorEndpointFilterItem::OAIConnectionMonitorEndpointFilterItem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConnectionMonitorEndpointFilterItem::OAIConnectionMonitorEndpointFilterItem() {
    this->initializeModel();
}

OAIConnectionMonitorEndpointFilterItem::~OAIConnectionMonitorEndpointFilterItem() {}

void OAIConnectionMonitorEndpointFilterItem::initializeModel() {

    m_address_isSet = false;
    m_address_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIConnectionMonitorEndpointFilterItem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConnectionMonitorEndpointFilterItem::fromJsonObject(QJsonObject json) {

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIConnectionMonitorEndpointFilterItem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConnectionMonitorEndpointFilterItem::asJsonObject() const {
    QJsonObject obj;
    if (m_address_isSet) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIConnectionMonitorEndpointFilterItem::getAddress() const {
    return m_address;
}
void OAIConnectionMonitorEndpointFilterItem::setAddress(const QString &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAIConnectionMonitorEndpointFilterItem::is_address_Set() const{
    return m_address_isSet;
}

bool OAIConnectionMonitorEndpointFilterItem::is_address_Valid() const{
    return m_address_isValid;
}

QString OAIConnectionMonitorEndpointFilterItem::getType() const {
    return m_type;
}
void OAIConnectionMonitorEndpointFilterItem::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIConnectionMonitorEndpointFilterItem::is_type_Set() const{
    return m_type_isSet;
}

bool OAIConnectionMonitorEndpointFilterItem::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIConnectionMonitorEndpointFilterItem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConnectionMonitorEndpointFilterItem::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
