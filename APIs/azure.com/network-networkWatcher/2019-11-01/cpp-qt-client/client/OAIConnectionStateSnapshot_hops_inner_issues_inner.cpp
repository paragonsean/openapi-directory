/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-11-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConnectionStateSnapshot_hops_inner_issues_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConnectionStateSnapshot_hops_inner_issues_inner::OAIConnectionStateSnapshot_hops_inner_issues_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConnectionStateSnapshot_hops_inner_issues_inner::OAIConnectionStateSnapshot_hops_inner_issues_inner() {
    this->initializeModel();
}

OAIConnectionStateSnapshot_hops_inner_issues_inner::~OAIConnectionStateSnapshot_hops_inner_issues_inner() {}

void OAIConnectionStateSnapshot_hops_inner_issues_inner::initializeModel() {

    m_context_isSet = false;
    m_context_isValid = false;

    m_origin_isSet = false;
    m_origin_isValid = false;

    m_severity_isSet = false;
    m_severity_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIConnectionStateSnapshot_hops_inner_issues_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConnectionStateSnapshot_hops_inner_issues_inner::fromJsonObject(QJsonObject json) {

    if(json["context"].isArray()){
        auto arr = json["context"].toArray();
        m_context_isValid = true;
        if(arr.count() > 0) {
            for (const QJsonValue jval : arr) {
                QMap<QString, QString> item;
                m_context_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_context_isSet = !jval.isNull() && m_context_isValid;
                m_context.push_back(item);
            }
        }
    }

    m_origin_isValid = ::OpenAPI::fromJsonValue(m_origin, json[QString("origin")]);
    m_origin_isSet = !json[QString("origin")].isNull() && m_origin_isValid;

    m_severity_isValid = ::OpenAPI::fromJsonValue(m_severity, json[QString("severity")]);
    m_severity_isSet = !json[QString("severity")].isNull() && m_severity_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIConnectionStateSnapshot_hops_inner_issues_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConnectionStateSnapshot_hops_inner_issues_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_context.size() > 0) {
        
        obj.insert(QString("context"), toJsonValue(m_context));
    }
    if (m_origin_isSet) {
        obj.insert(QString("origin"), ::OpenAPI::toJsonValue(m_origin));
    }
    if (m_severity_isSet) {
        obj.insert(QString("severity"), ::OpenAPI::toJsonValue(m_severity));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QList<QMap<QString, QString>> OAIConnectionStateSnapshot_hops_inner_issues_inner::getContext() const {
    return m_context;
}
void OAIConnectionStateSnapshot_hops_inner_issues_inner::setContext(const QList<QMap<QString, QString>> &context) {
    m_context = context;
    m_context_isSet = true;
}

bool OAIConnectionStateSnapshot_hops_inner_issues_inner::is_context_Set() const{
    return m_context_isSet;
}

bool OAIConnectionStateSnapshot_hops_inner_issues_inner::is_context_Valid() const{
    return m_context_isValid;
}

QString OAIConnectionStateSnapshot_hops_inner_issues_inner::getOrigin() const {
    return m_origin;
}
void OAIConnectionStateSnapshot_hops_inner_issues_inner::setOrigin(const QString &origin) {
    m_origin = origin;
    m_origin_isSet = true;
}

bool OAIConnectionStateSnapshot_hops_inner_issues_inner::is_origin_Set() const{
    return m_origin_isSet;
}

bool OAIConnectionStateSnapshot_hops_inner_issues_inner::is_origin_Valid() const{
    return m_origin_isValid;
}

QString OAIConnectionStateSnapshot_hops_inner_issues_inner::getSeverity() const {
    return m_severity;
}
void OAIConnectionStateSnapshot_hops_inner_issues_inner::setSeverity(const QString &severity) {
    m_severity = severity;
    m_severity_isSet = true;
}

bool OAIConnectionStateSnapshot_hops_inner_issues_inner::is_severity_Set() const{
    return m_severity_isSet;
}

bool OAIConnectionStateSnapshot_hops_inner_issues_inner::is_severity_Valid() const{
    return m_severity_isValid;
}

QString OAIConnectionStateSnapshot_hops_inner_issues_inner::getType() const {
    return m_type;
}
void OAIConnectionStateSnapshot_hops_inner_issues_inner::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIConnectionStateSnapshot_hops_inner_issues_inner::is_type_Set() const{
    return m_type_isSet;
}

bool OAIConnectionStateSnapshot_hops_inner_issues_inner::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIConnectionStateSnapshot_hops_inner_issues_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_context.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_origin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_severity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConnectionStateSnapshot_hops_inner_issues_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
