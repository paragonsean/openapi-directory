/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-11-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIConnectionMonitorsApi_H
#define OAI_OAIConnectionMonitorsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIConnectionMonitor.h"
#include "OAIConnectionMonitorListResult.h"
#include "OAIConnectionMonitorQueryResult.h"
#include "OAIConnectionMonitorResult.h"
#include "OAIConnectionMonitors_List_default_response.h"
#include "OAINetworkWatchers_UpdateTags_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIConnectionMonitorsApi : public QObject {
    Q_OBJECT

public:
    OAIConnectionMonitorsApi(const int timeOut = 0);
    ~OAIConnectionMonitorsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  network_watcher_name QString [required]
    * @param[in]  connection_monitor_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIConnectionMonitor [required]
    */
    virtual void connectionMonitorsCreateOrUpdate(const QString &resource_group_name, const QString &network_watcher_name, const QString &connection_monitor_name, const QString &api_version, const QString &subscription_id, const OAIConnectionMonitor &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  network_watcher_name QString [required]
    * @param[in]  connection_monitor_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void connectionMonitorsDelete(const QString &resource_group_name, const QString &network_watcher_name, const QString &connection_monitor_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  network_watcher_name QString [required]
    * @param[in]  connection_monitor_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void connectionMonitorsGet(const QString &resource_group_name, const QString &network_watcher_name, const QString &connection_monitor_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  network_watcher_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void connectionMonitorsList(const QString &resource_group_name, const QString &network_watcher_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  network_watcher_name QString [required]
    * @param[in]  connection_monitor_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void connectionMonitorsQuery(const QString &resource_group_name, const QString &network_watcher_name, const QString &connection_monitor_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  network_watcher_name QString [required]
    * @param[in]  connection_monitor_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void connectionMonitorsStart(const QString &resource_group_name, const QString &network_watcher_name, const QString &connection_monitor_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  network_watcher_name QString [required]
    * @param[in]  connection_monitor_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void connectionMonitorsStop(const QString &resource_group_name, const QString &network_watcher_name, const QString &connection_monitor_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  network_watcher_name QString [required]
    * @param[in]  connection_monitor_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAINetworkWatchers_UpdateTags_request [required]
    */
    virtual void connectionMonitorsUpdateTags(const QString &resource_group_name, const QString &network_watcher_name, const QString &connection_monitor_name, const QString &api_version, const QString &subscription_id, const OAINetworkWatchers_UpdateTags_request &parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void connectionMonitorsCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void connectionMonitorsDeleteCallback(OAIHttpRequestWorker *worker);
    void connectionMonitorsGetCallback(OAIHttpRequestWorker *worker);
    void connectionMonitorsListCallback(OAIHttpRequestWorker *worker);
    void connectionMonitorsQueryCallback(OAIHttpRequestWorker *worker);
    void connectionMonitorsStartCallback(OAIHttpRequestWorker *worker);
    void connectionMonitorsStopCallback(OAIHttpRequestWorker *worker);
    void connectionMonitorsUpdateTagsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void connectionMonitorsCreateOrUpdateSignal(OAIConnectionMonitorResult summary);
    void connectionMonitorsDeleteSignal();
    void connectionMonitorsGetSignal(OAIConnectionMonitorResult summary);
    void connectionMonitorsListSignal(OAIConnectionMonitorListResult summary);
    void connectionMonitorsQuerySignal(OAIConnectionMonitorQueryResult summary);
    void connectionMonitorsStartSignal();
    void connectionMonitorsStopSignal();
    void connectionMonitorsUpdateTagsSignal(OAIConnectionMonitorResult summary);


    void connectionMonitorsCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIConnectionMonitorResult summary);
    void connectionMonitorsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void connectionMonitorsGetSignalFull(OAIHttpRequestWorker *worker, OAIConnectionMonitorResult summary);
    void connectionMonitorsListSignalFull(OAIHttpRequestWorker *worker, OAIConnectionMonitorListResult summary);
    void connectionMonitorsQuerySignalFull(OAIHttpRequestWorker *worker, OAIConnectionMonitorQueryResult summary);
    void connectionMonitorsStartSignalFull(OAIHttpRequestWorker *worker);
    void connectionMonitorsStopSignalFull(OAIHttpRequestWorker *worker);
    void connectionMonitorsUpdateTagsSignalFull(OAIHttpRequestWorker *worker, OAIConnectionMonitorResult summary);

    Q_DECL_DEPRECATED_X("Use connectionMonitorsCreateOrUpdateSignalError() instead")
    void connectionMonitorsCreateOrUpdateSignalE(OAIConnectionMonitorResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void connectionMonitorsCreateOrUpdateSignalError(OAIConnectionMonitorResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use connectionMonitorsDeleteSignalError() instead")
    void connectionMonitorsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void connectionMonitorsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use connectionMonitorsGetSignalError() instead")
    void connectionMonitorsGetSignalE(OAIConnectionMonitorResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void connectionMonitorsGetSignalError(OAIConnectionMonitorResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use connectionMonitorsListSignalError() instead")
    void connectionMonitorsListSignalE(OAIConnectionMonitorListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void connectionMonitorsListSignalError(OAIConnectionMonitorListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use connectionMonitorsQuerySignalError() instead")
    void connectionMonitorsQuerySignalE(OAIConnectionMonitorQueryResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void connectionMonitorsQuerySignalError(OAIConnectionMonitorQueryResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use connectionMonitorsStartSignalError() instead")
    void connectionMonitorsStartSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void connectionMonitorsStartSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use connectionMonitorsStopSignalError() instead")
    void connectionMonitorsStopSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void connectionMonitorsStopSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use connectionMonitorsUpdateTagsSignalError() instead")
    void connectionMonitorsUpdateTagsSignalE(OAIConnectionMonitorResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void connectionMonitorsUpdateTagsSignalError(OAIConnectionMonitorResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use connectionMonitorsCreateOrUpdateSignalErrorFull() instead")
    void connectionMonitorsCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void connectionMonitorsCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use connectionMonitorsDeleteSignalErrorFull() instead")
    void connectionMonitorsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void connectionMonitorsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use connectionMonitorsGetSignalErrorFull() instead")
    void connectionMonitorsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void connectionMonitorsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use connectionMonitorsListSignalErrorFull() instead")
    void connectionMonitorsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void connectionMonitorsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use connectionMonitorsQuerySignalErrorFull() instead")
    void connectionMonitorsQuerySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void connectionMonitorsQuerySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use connectionMonitorsStartSignalErrorFull() instead")
    void connectionMonitorsStartSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void connectionMonitorsStartSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use connectionMonitorsStopSignalErrorFull() instead")
    void connectionMonitorsStopSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void connectionMonitorsStopSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use connectionMonitorsUpdateTagsSignalErrorFull() instead")
    void connectionMonitorsUpdateTagsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void connectionMonitorsUpdateTagsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
