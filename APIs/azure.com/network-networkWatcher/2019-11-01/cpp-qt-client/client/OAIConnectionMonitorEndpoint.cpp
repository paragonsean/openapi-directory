/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-11-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConnectionMonitorEndpoint.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConnectionMonitorEndpoint::OAIConnectionMonitorEndpoint(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConnectionMonitorEndpoint::OAIConnectionMonitorEndpoint() {
    this->initializeModel();
}

OAIConnectionMonitorEndpoint::~OAIConnectionMonitorEndpoint() {}

void OAIConnectionMonitorEndpoint::initializeModel() {

    m_address_isSet = false;
    m_address_isValid = false;

    m_filter_isSet = false;
    m_filter_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_resource_id_isSet = false;
    m_resource_id_isValid = false;
}

void OAIConnectionMonitorEndpoint::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConnectionMonitorEndpoint::fromJsonObject(QJsonObject json) {

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_filter_isValid = ::OpenAPI::fromJsonValue(m_filter, json[QString("filter")]);
    m_filter_isSet = !json[QString("filter")].isNull() && m_filter_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_resource_id_isValid = ::OpenAPI::fromJsonValue(m_resource_id, json[QString("resourceId")]);
    m_resource_id_isSet = !json[QString("resourceId")].isNull() && m_resource_id_isValid;
}

QString OAIConnectionMonitorEndpoint::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConnectionMonitorEndpoint::asJsonObject() const {
    QJsonObject obj;
    if (m_address_isSet) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_filter.isSet()) {
        obj.insert(QString("filter"), ::OpenAPI::toJsonValue(m_filter));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_resource_id_isSet) {
        obj.insert(QString("resourceId"), ::OpenAPI::toJsonValue(m_resource_id));
    }
    return obj;
}

QString OAIConnectionMonitorEndpoint::getAddress() const {
    return m_address;
}
void OAIConnectionMonitorEndpoint::setAddress(const QString &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAIConnectionMonitorEndpoint::is_address_Set() const{
    return m_address_isSet;
}

bool OAIConnectionMonitorEndpoint::is_address_Valid() const{
    return m_address_isValid;
}

OAIConnectionMonitorEndpointFilter OAIConnectionMonitorEndpoint::getFilter() const {
    return m_filter;
}
void OAIConnectionMonitorEndpoint::setFilter(const OAIConnectionMonitorEndpointFilter &filter) {
    m_filter = filter;
    m_filter_isSet = true;
}

bool OAIConnectionMonitorEndpoint::is_filter_Set() const{
    return m_filter_isSet;
}

bool OAIConnectionMonitorEndpoint::is_filter_Valid() const{
    return m_filter_isValid;
}

QString OAIConnectionMonitorEndpoint::getName() const {
    return m_name;
}
void OAIConnectionMonitorEndpoint::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIConnectionMonitorEndpoint::is_name_Set() const{
    return m_name_isSet;
}

bool OAIConnectionMonitorEndpoint::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIConnectionMonitorEndpoint::getResourceId() const {
    return m_resource_id;
}
void OAIConnectionMonitorEndpoint::setResourceId(const QString &resource_id) {
    m_resource_id = resource_id;
    m_resource_id_isSet = true;
}

bool OAIConnectionMonitorEndpoint::is_resource_id_Set() const{
    return m_resource_id_isSet;
}

bool OAIConnectionMonitorEndpoint::is_resource_id_Valid() const{
    return m_resource_id_isValid;
}

bool OAIConnectionMonitorEndpoint::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConnectionMonitorEndpoint::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && true;
}

} // namespace OpenAPI
