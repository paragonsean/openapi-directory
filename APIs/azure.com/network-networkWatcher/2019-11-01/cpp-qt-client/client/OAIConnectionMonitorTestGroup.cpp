/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-11-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConnectionMonitorTestGroup.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConnectionMonitorTestGroup::OAIConnectionMonitorTestGroup(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConnectionMonitorTestGroup::OAIConnectionMonitorTestGroup() {
    this->initializeModel();
}

OAIConnectionMonitorTestGroup::~OAIConnectionMonitorTestGroup() {}

void OAIConnectionMonitorTestGroup::initializeModel() {

    m_destinations_isSet = false;
    m_destinations_isValid = false;

    m_disable_isSet = false;
    m_disable_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_sources_isSet = false;
    m_sources_isValid = false;

    m_test_configurations_isSet = false;
    m_test_configurations_isValid = false;
}

void OAIConnectionMonitorTestGroup::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConnectionMonitorTestGroup::fromJsonObject(QJsonObject json) {

    m_destinations_isValid = ::OpenAPI::fromJsonValue(m_destinations, json[QString("destinations")]);
    m_destinations_isSet = !json[QString("destinations")].isNull() && m_destinations_isValid;

    m_disable_isValid = ::OpenAPI::fromJsonValue(m_disable, json[QString("disable")]);
    m_disable_isSet = !json[QString("disable")].isNull() && m_disable_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_sources_isValid = ::OpenAPI::fromJsonValue(m_sources, json[QString("sources")]);
    m_sources_isSet = !json[QString("sources")].isNull() && m_sources_isValid;

    m_test_configurations_isValid = ::OpenAPI::fromJsonValue(m_test_configurations, json[QString("testConfigurations")]);
    m_test_configurations_isSet = !json[QString("testConfigurations")].isNull() && m_test_configurations_isValid;
}

QString OAIConnectionMonitorTestGroup::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConnectionMonitorTestGroup::asJsonObject() const {
    QJsonObject obj;
    if (m_destinations.size() > 0) {
        obj.insert(QString("destinations"), ::OpenAPI::toJsonValue(m_destinations));
    }
    if (m_disable_isSet) {
        obj.insert(QString("disable"), ::OpenAPI::toJsonValue(m_disable));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_sources.size() > 0) {
        obj.insert(QString("sources"), ::OpenAPI::toJsonValue(m_sources));
    }
    if (m_test_configurations.size() > 0) {
        obj.insert(QString("testConfigurations"), ::OpenAPI::toJsonValue(m_test_configurations));
    }
    return obj;
}

QList<QString> OAIConnectionMonitorTestGroup::getDestinations() const {
    return m_destinations;
}
void OAIConnectionMonitorTestGroup::setDestinations(const QList<QString> &destinations) {
    m_destinations = destinations;
    m_destinations_isSet = true;
}

bool OAIConnectionMonitorTestGroup::is_destinations_Set() const{
    return m_destinations_isSet;
}

bool OAIConnectionMonitorTestGroup::is_destinations_Valid() const{
    return m_destinations_isValid;
}

bool OAIConnectionMonitorTestGroup::isDisable() const {
    return m_disable;
}
void OAIConnectionMonitorTestGroup::setDisable(const bool &disable) {
    m_disable = disable;
    m_disable_isSet = true;
}

bool OAIConnectionMonitorTestGroup::is_disable_Set() const{
    return m_disable_isSet;
}

bool OAIConnectionMonitorTestGroup::is_disable_Valid() const{
    return m_disable_isValid;
}

QString OAIConnectionMonitorTestGroup::getName() const {
    return m_name;
}
void OAIConnectionMonitorTestGroup::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIConnectionMonitorTestGroup::is_name_Set() const{
    return m_name_isSet;
}

bool OAIConnectionMonitorTestGroup::is_name_Valid() const{
    return m_name_isValid;
}

QList<QString> OAIConnectionMonitorTestGroup::getSources() const {
    return m_sources;
}
void OAIConnectionMonitorTestGroup::setSources(const QList<QString> &sources) {
    m_sources = sources;
    m_sources_isSet = true;
}

bool OAIConnectionMonitorTestGroup::is_sources_Set() const{
    return m_sources_isSet;
}

bool OAIConnectionMonitorTestGroup::is_sources_Valid() const{
    return m_sources_isValid;
}

QList<QString> OAIConnectionMonitorTestGroup::getTestConfigurations() const {
    return m_test_configurations;
}
void OAIConnectionMonitorTestGroup::setTestConfigurations(const QList<QString> &test_configurations) {
    m_test_configurations = test_configurations;
    m_test_configurations_isSet = true;
}

bool OAIConnectionMonitorTestGroup::is_test_configurations_Set() const{
    return m_test_configurations_isSet;
}

bool OAIConnectionMonitorTestGroup::is_test_configurations_Valid() const{
    return m_test_configurations_isValid;
}

bool OAIConnectionMonitorTestGroup::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_destinations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_disable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sources.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_test_configurations.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConnectionMonitorTestGroup::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_destinations_isValid && m_name_isValid && m_sources_isValid && m_test_configurations_isValid && true;
}

} // namespace OpenAPI
