/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-11-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConnectionMonitorTestConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConnectionMonitorTestConfiguration::OAIConnectionMonitorTestConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConnectionMonitorTestConfiguration::OAIConnectionMonitorTestConfiguration() {
    this->initializeModel();
}

OAIConnectionMonitorTestConfiguration::~OAIConnectionMonitorTestConfiguration() {}

void OAIConnectionMonitorTestConfiguration::initializeModel() {

    m_http_configuration_isSet = false;
    m_http_configuration_isValid = false;

    m_icmp_configuration_isSet = false;
    m_icmp_configuration_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_preferred_ip_version_isSet = false;
    m_preferred_ip_version_isValid = false;

    m_protocol_isSet = false;
    m_protocol_isValid = false;

    m_success_threshold_isSet = false;
    m_success_threshold_isValid = false;

    m_tcp_configuration_isSet = false;
    m_tcp_configuration_isValid = false;

    m_test_frequency_sec_isSet = false;
    m_test_frequency_sec_isValid = false;
}

void OAIConnectionMonitorTestConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConnectionMonitorTestConfiguration::fromJsonObject(QJsonObject json) {

    m_http_configuration_isValid = ::OpenAPI::fromJsonValue(m_http_configuration, json[QString("httpConfiguration")]);
    m_http_configuration_isSet = !json[QString("httpConfiguration")].isNull() && m_http_configuration_isValid;

    m_icmp_configuration_isValid = ::OpenAPI::fromJsonValue(m_icmp_configuration, json[QString("icmpConfiguration")]);
    m_icmp_configuration_isSet = !json[QString("icmpConfiguration")].isNull() && m_icmp_configuration_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_preferred_ip_version_isValid = ::OpenAPI::fromJsonValue(m_preferred_ip_version, json[QString("preferredIPVersion")]);
    m_preferred_ip_version_isSet = !json[QString("preferredIPVersion")].isNull() && m_preferred_ip_version_isValid;

    m_protocol_isValid = ::OpenAPI::fromJsonValue(m_protocol, json[QString("protocol")]);
    m_protocol_isSet = !json[QString("protocol")].isNull() && m_protocol_isValid;

    m_success_threshold_isValid = ::OpenAPI::fromJsonValue(m_success_threshold, json[QString("successThreshold")]);
    m_success_threshold_isSet = !json[QString("successThreshold")].isNull() && m_success_threshold_isValid;

    m_tcp_configuration_isValid = ::OpenAPI::fromJsonValue(m_tcp_configuration, json[QString("tcpConfiguration")]);
    m_tcp_configuration_isSet = !json[QString("tcpConfiguration")].isNull() && m_tcp_configuration_isValid;

    m_test_frequency_sec_isValid = ::OpenAPI::fromJsonValue(m_test_frequency_sec, json[QString("testFrequencySec")]);
    m_test_frequency_sec_isSet = !json[QString("testFrequencySec")].isNull() && m_test_frequency_sec_isValid;
}

QString OAIConnectionMonitorTestConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConnectionMonitorTestConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_http_configuration.isSet()) {
        obj.insert(QString("httpConfiguration"), ::OpenAPI::toJsonValue(m_http_configuration));
    }
    if (m_icmp_configuration.isSet()) {
        obj.insert(QString("icmpConfiguration"), ::OpenAPI::toJsonValue(m_icmp_configuration));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_preferred_ip_version_isSet) {
        obj.insert(QString("preferredIPVersion"), ::OpenAPI::toJsonValue(m_preferred_ip_version));
    }
    if (m_protocol_isSet) {
        obj.insert(QString("protocol"), ::OpenAPI::toJsonValue(m_protocol));
    }
    if (m_success_threshold.isSet()) {
        obj.insert(QString("successThreshold"), ::OpenAPI::toJsonValue(m_success_threshold));
    }
    if (m_tcp_configuration.isSet()) {
        obj.insert(QString("tcpConfiguration"), ::OpenAPI::toJsonValue(m_tcp_configuration));
    }
    if (m_test_frequency_sec_isSet) {
        obj.insert(QString("testFrequencySec"), ::OpenAPI::toJsonValue(m_test_frequency_sec));
    }
    return obj;
}

OAIConnectionMonitorHttpConfiguration OAIConnectionMonitorTestConfiguration::getHttpConfiguration() const {
    return m_http_configuration;
}
void OAIConnectionMonitorTestConfiguration::setHttpConfiguration(const OAIConnectionMonitorHttpConfiguration &http_configuration) {
    m_http_configuration = http_configuration;
    m_http_configuration_isSet = true;
}

bool OAIConnectionMonitorTestConfiguration::is_http_configuration_Set() const{
    return m_http_configuration_isSet;
}

bool OAIConnectionMonitorTestConfiguration::is_http_configuration_Valid() const{
    return m_http_configuration_isValid;
}

OAIConnectionMonitorIcmpConfiguration OAIConnectionMonitorTestConfiguration::getIcmpConfiguration() const {
    return m_icmp_configuration;
}
void OAIConnectionMonitorTestConfiguration::setIcmpConfiguration(const OAIConnectionMonitorIcmpConfiguration &icmp_configuration) {
    m_icmp_configuration = icmp_configuration;
    m_icmp_configuration_isSet = true;
}

bool OAIConnectionMonitorTestConfiguration::is_icmp_configuration_Set() const{
    return m_icmp_configuration_isSet;
}

bool OAIConnectionMonitorTestConfiguration::is_icmp_configuration_Valid() const{
    return m_icmp_configuration_isValid;
}

QString OAIConnectionMonitorTestConfiguration::getName() const {
    return m_name;
}
void OAIConnectionMonitorTestConfiguration::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIConnectionMonitorTestConfiguration::is_name_Set() const{
    return m_name_isSet;
}

bool OAIConnectionMonitorTestConfiguration::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIConnectionMonitorTestConfiguration::getPreferredIpVersion() const {
    return m_preferred_ip_version;
}
void OAIConnectionMonitorTestConfiguration::setPreferredIpVersion(const QString &preferred_ip_version) {
    m_preferred_ip_version = preferred_ip_version;
    m_preferred_ip_version_isSet = true;
}

bool OAIConnectionMonitorTestConfiguration::is_preferred_ip_version_Set() const{
    return m_preferred_ip_version_isSet;
}

bool OAIConnectionMonitorTestConfiguration::is_preferred_ip_version_Valid() const{
    return m_preferred_ip_version_isValid;
}

QString OAIConnectionMonitorTestConfiguration::getProtocol() const {
    return m_protocol;
}
void OAIConnectionMonitorTestConfiguration::setProtocol(const QString &protocol) {
    m_protocol = protocol;
    m_protocol_isSet = true;
}

bool OAIConnectionMonitorTestConfiguration::is_protocol_Set() const{
    return m_protocol_isSet;
}

bool OAIConnectionMonitorTestConfiguration::is_protocol_Valid() const{
    return m_protocol_isValid;
}

OAIConnectionMonitorSuccessThreshold OAIConnectionMonitorTestConfiguration::getSuccessThreshold() const {
    return m_success_threshold;
}
void OAIConnectionMonitorTestConfiguration::setSuccessThreshold(const OAIConnectionMonitorSuccessThreshold &success_threshold) {
    m_success_threshold = success_threshold;
    m_success_threshold_isSet = true;
}

bool OAIConnectionMonitorTestConfiguration::is_success_threshold_Set() const{
    return m_success_threshold_isSet;
}

bool OAIConnectionMonitorTestConfiguration::is_success_threshold_Valid() const{
    return m_success_threshold_isValid;
}

OAIConnectionMonitorTcpConfiguration OAIConnectionMonitorTestConfiguration::getTcpConfiguration() const {
    return m_tcp_configuration;
}
void OAIConnectionMonitorTestConfiguration::setTcpConfiguration(const OAIConnectionMonitorTcpConfiguration &tcp_configuration) {
    m_tcp_configuration = tcp_configuration;
    m_tcp_configuration_isSet = true;
}

bool OAIConnectionMonitorTestConfiguration::is_tcp_configuration_Set() const{
    return m_tcp_configuration_isSet;
}

bool OAIConnectionMonitorTestConfiguration::is_tcp_configuration_Valid() const{
    return m_tcp_configuration_isValid;
}

qint32 OAIConnectionMonitorTestConfiguration::getTestFrequencySec() const {
    return m_test_frequency_sec;
}
void OAIConnectionMonitorTestConfiguration::setTestFrequencySec(const qint32 &test_frequency_sec) {
    m_test_frequency_sec = test_frequency_sec;
    m_test_frequency_sec_isSet = true;
}

bool OAIConnectionMonitorTestConfiguration::is_test_frequency_sec_Set() const{
    return m_test_frequency_sec_isSet;
}

bool OAIConnectionMonitorTestConfiguration::is_test_frequency_sec_Valid() const{
    return m_test_frequency_sec_isValid;
}

bool OAIConnectionMonitorTestConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_http_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_icmp_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preferred_ip_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protocol_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_success_threshold.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tcp_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_test_frequency_sec_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConnectionMonitorTestConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_protocol_isValid && true;
}

} // namespace OpenAPI
