/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-11-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFlowLogPropertiesFormat.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFlowLogPropertiesFormat::OAIFlowLogPropertiesFormat(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFlowLogPropertiesFormat::OAIFlowLogPropertiesFormat() {
    this->initializeModel();
}

OAIFlowLogPropertiesFormat::~OAIFlowLogPropertiesFormat() {}

void OAIFlowLogPropertiesFormat::initializeModel() {

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_flow_analytics_configuration_isSet = false;
    m_flow_analytics_configuration_isValid = false;

    m_format_isSet = false;
    m_format_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_retention_policy_isSet = false;
    m_retention_policy_isValid = false;

    m_storage_id_isSet = false;
    m_storage_id_isValid = false;

    m_target_resource_guid_isSet = false;
    m_target_resource_guid_isValid = false;

    m_target_resource_id_isSet = false;
    m_target_resource_id_isValid = false;
}

void OAIFlowLogPropertiesFormat::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFlowLogPropertiesFormat::fromJsonObject(QJsonObject json) {

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_flow_analytics_configuration_isValid = ::OpenAPI::fromJsonValue(m_flow_analytics_configuration, json[QString("flowAnalyticsConfiguration")]);
    m_flow_analytics_configuration_isSet = !json[QString("flowAnalyticsConfiguration")].isNull() && m_flow_analytics_configuration_isValid;

    m_format_isValid = ::OpenAPI::fromJsonValue(m_format, json[QString("format")]);
    m_format_isSet = !json[QString("format")].isNull() && m_format_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_retention_policy_isValid = ::OpenAPI::fromJsonValue(m_retention_policy, json[QString("retentionPolicy")]);
    m_retention_policy_isSet = !json[QString("retentionPolicy")].isNull() && m_retention_policy_isValid;

    m_storage_id_isValid = ::OpenAPI::fromJsonValue(m_storage_id, json[QString("storageId")]);
    m_storage_id_isSet = !json[QString("storageId")].isNull() && m_storage_id_isValid;

    m_target_resource_guid_isValid = ::OpenAPI::fromJsonValue(m_target_resource_guid, json[QString("targetResourceGuid")]);
    m_target_resource_guid_isSet = !json[QString("targetResourceGuid")].isNull() && m_target_resource_guid_isValid;

    m_target_resource_id_isValid = ::OpenAPI::fromJsonValue(m_target_resource_id, json[QString("targetResourceId")]);
    m_target_resource_id_isSet = !json[QString("targetResourceId")].isNull() && m_target_resource_id_isValid;
}

QString OAIFlowLogPropertiesFormat::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFlowLogPropertiesFormat::asJsonObject() const {
    QJsonObject obj;
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_flow_analytics_configuration.isSet()) {
        obj.insert(QString("flowAnalyticsConfiguration"), ::OpenAPI::toJsonValue(m_flow_analytics_configuration));
    }
    if (m_format.isSet()) {
        obj.insert(QString("format"), ::OpenAPI::toJsonValue(m_format));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_retention_policy.isSet()) {
        obj.insert(QString("retentionPolicy"), ::OpenAPI::toJsonValue(m_retention_policy));
    }
    if (m_storage_id_isSet) {
        obj.insert(QString("storageId"), ::OpenAPI::toJsonValue(m_storage_id));
    }
    if (m_target_resource_guid_isSet) {
        obj.insert(QString("targetResourceGuid"), ::OpenAPI::toJsonValue(m_target_resource_guid));
    }
    if (m_target_resource_id_isSet) {
        obj.insert(QString("targetResourceId"), ::OpenAPI::toJsonValue(m_target_resource_id));
    }
    return obj;
}

bool OAIFlowLogPropertiesFormat::isEnabled() const {
    return m_enabled;
}
void OAIFlowLogPropertiesFormat::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAIFlowLogPropertiesFormat::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIFlowLogPropertiesFormat::is_enabled_Valid() const{
    return m_enabled_isValid;
}

OAITrafficAnalyticsProperties OAIFlowLogPropertiesFormat::getFlowAnalyticsConfiguration() const {
    return m_flow_analytics_configuration;
}
void OAIFlowLogPropertiesFormat::setFlowAnalyticsConfiguration(const OAITrafficAnalyticsProperties &flow_analytics_configuration) {
    m_flow_analytics_configuration = flow_analytics_configuration;
    m_flow_analytics_configuration_isSet = true;
}

bool OAIFlowLogPropertiesFormat::is_flow_analytics_configuration_Set() const{
    return m_flow_analytics_configuration_isSet;
}

bool OAIFlowLogPropertiesFormat::is_flow_analytics_configuration_Valid() const{
    return m_flow_analytics_configuration_isValid;
}

OAIFlowLogFormatParameters OAIFlowLogPropertiesFormat::getFormat() const {
    return m_format;
}
void OAIFlowLogPropertiesFormat::setFormat(const OAIFlowLogFormatParameters &format) {
    m_format = format;
    m_format_isSet = true;
}

bool OAIFlowLogPropertiesFormat::is_format_Set() const{
    return m_format_isSet;
}

bool OAIFlowLogPropertiesFormat::is_format_Valid() const{
    return m_format_isValid;
}

QString OAIFlowLogPropertiesFormat::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIFlowLogPropertiesFormat::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIFlowLogPropertiesFormat::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIFlowLogPropertiesFormat::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

OAIRetentionPolicyParameters OAIFlowLogPropertiesFormat::getRetentionPolicy() const {
    return m_retention_policy;
}
void OAIFlowLogPropertiesFormat::setRetentionPolicy(const OAIRetentionPolicyParameters &retention_policy) {
    m_retention_policy = retention_policy;
    m_retention_policy_isSet = true;
}

bool OAIFlowLogPropertiesFormat::is_retention_policy_Set() const{
    return m_retention_policy_isSet;
}

bool OAIFlowLogPropertiesFormat::is_retention_policy_Valid() const{
    return m_retention_policy_isValid;
}

QString OAIFlowLogPropertiesFormat::getStorageId() const {
    return m_storage_id;
}
void OAIFlowLogPropertiesFormat::setStorageId(const QString &storage_id) {
    m_storage_id = storage_id;
    m_storage_id_isSet = true;
}

bool OAIFlowLogPropertiesFormat::is_storage_id_Set() const{
    return m_storage_id_isSet;
}

bool OAIFlowLogPropertiesFormat::is_storage_id_Valid() const{
    return m_storage_id_isValid;
}

QString OAIFlowLogPropertiesFormat::getTargetResourceGuid() const {
    return m_target_resource_guid;
}
void OAIFlowLogPropertiesFormat::setTargetResourceGuid(const QString &target_resource_guid) {
    m_target_resource_guid = target_resource_guid;
    m_target_resource_guid_isSet = true;
}

bool OAIFlowLogPropertiesFormat::is_target_resource_guid_Set() const{
    return m_target_resource_guid_isSet;
}

bool OAIFlowLogPropertiesFormat::is_target_resource_guid_Valid() const{
    return m_target_resource_guid_isValid;
}

QString OAIFlowLogPropertiesFormat::getTargetResourceId() const {
    return m_target_resource_id;
}
void OAIFlowLogPropertiesFormat::setTargetResourceId(const QString &target_resource_id) {
    m_target_resource_id = target_resource_id;
    m_target_resource_id_isSet = true;
}

bool OAIFlowLogPropertiesFormat::is_target_resource_id_Set() const{
    return m_target_resource_id_isSet;
}

bool OAIFlowLogPropertiesFormat::is_target_resource_id_Valid() const{
    return m_target_resource_id_isValid;
}

bool OAIFlowLogPropertiesFormat::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_flow_analytics_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_format.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_retention_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_resource_guid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFlowLogPropertiesFormat::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_storage_id_isValid && m_target_resource_id_isValid && true;
}

} // namespace OpenAPI
