/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-11-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIConnectionMonitorHttpConfiguration.h
 *
 * Describes the HTTP configuration.
 */

#ifndef OAIConnectionMonitorHttpConfiguration_H
#define OAIConnectionMonitorHttpConfiguration_H

#include <QJsonObject>

#include "OAIHTTPHeader.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIHTTPHeader;

class OAIConnectionMonitorHttpConfiguration : public OAIObject {
public:
    OAIConnectionMonitorHttpConfiguration();
    OAIConnectionMonitorHttpConfiguration(QString json);
    ~OAIConnectionMonitorHttpConfiguration() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getMethod() const;
    void setMethod(const QString &method);
    bool is_method_Set() const;
    bool is_method_Valid() const;

    QString getPath() const;
    void setPath(const QString &path);
    bool is_path_Set() const;
    bool is_path_Valid() const;

    qint32 getPort() const;
    void setPort(const qint32 &port);
    bool is_port_Set() const;
    bool is_port_Valid() const;

    bool isPreferHttps() const;
    void setPreferHttps(const bool &prefer_https);
    bool is_prefer_https_Set() const;
    bool is_prefer_https_Valid() const;

    QList<OAIHTTPHeader> getRequestHeaders() const;
    void setRequestHeaders(const QList<OAIHTTPHeader> &request_headers);
    bool is_request_headers_Set() const;
    bool is_request_headers_Valid() const;

    QList<QString> getValidStatusCodeRanges() const;
    void setValidStatusCodeRanges(const QList<QString> &valid_status_code_ranges);
    bool is_valid_status_code_ranges_Set() const;
    bool is_valid_status_code_ranges_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_method;
    bool m_method_isSet;
    bool m_method_isValid;

    QString m_path;
    bool m_path_isSet;
    bool m_path_isValid;

    qint32 m_port;
    bool m_port_isSet;
    bool m_port_isValid;

    bool m_prefer_https;
    bool m_prefer_https_isSet;
    bool m_prefer_https_isValid;

    QList<OAIHTTPHeader> m_request_headers;
    bool m_request_headers_isSet;
    bool m_request_headers_isValid;

    QList<QString> m_valid_status_code_ranges;
    bool m_valid_status_code_ranges_isSet;
    bool m_valid_status_code_ranges_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIConnectionMonitorHttpConfiguration)

#endif // OAIConnectionMonitorHttpConfiguration_H
